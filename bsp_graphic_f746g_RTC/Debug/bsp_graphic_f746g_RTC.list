
bsp_graphic_f746g_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a1c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004578  08016bf0  08016bf0  00017bf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b168  0801b168  000220f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b168  0801b168  0001c168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .qspi         00000000  90000000  90000000  000220f0  2**0
                  CONTENTS
  6 .preinit_array 00000000  0801b170  0801b170  000220f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801b170  0801b170  0001c170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801b174  0801b174  0001c174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000050f0  20000000  0801b178  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001648  200050f0  08020268  000220f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20006738  08020268  00022738  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000220f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036e0d  00000000  00000000  00022120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007e7b  00000000  00000000  00058f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002bf8  00000000  00000000  00060da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000021ac  00000000  00000000  000639a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000331ae  00000000  00000000  00065b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003da16  00000000  00000000  00098cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001147c4  00000000  00000000  000d6710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001eaed4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c7c8  00000000  00000000  001eaf18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001f76e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200050f0 	.word	0x200050f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016bd4 	.word	0x08016bd4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200050f4 	.word	0x200050f4
 800020c:	08016bd4 	.word	0x08016bd4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <getRTCTimeStr>:
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
const char* joursSemaine[] = {"Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"};


void getRTCTimeStr(char* timeStr) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    // Lecture de l'heure
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f80:	2200      	movs	r2, #0
 8000f82:	490b      	ldr	r1, [pc, #44]	@ (8000fb0 <getRTCTimeStr+0x38>)
 8000f84:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <getRTCTimeStr+0x3c>)
 8000f86:	f00b fbb7 	bl	800c6f8 <HAL_RTC_GetTime>
    // Lecture de la date (obligatoire pour débloquer les registres)
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	490a      	ldr	r1, [pc, #40]	@ (8000fb8 <getRTCTimeStr+0x40>)
 8000f8e:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <getRTCTimeStr+0x3c>)
 8000f90:	f00b fc94 	bl	800c8bc <HAL_RTC_GetDate>

    // Format: "HH:MM"
    sprintf(timeStr, "%02d:%02d", sTime.Hours, sTime.Minutes);
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <getRTCTimeStr+0x38>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <getRTCTimeStr+0x38>)
 8000f9c:	785b      	ldrb	r3, [r3, #1]
 8000f9e:	4907      	ldr	r1, [pc, #28]	@ (8000fbc <getRTCTimeStr+0x44>)
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f013 fce9 	bl	8014978 <siprintf>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000510c 	.word	0x2000510c
 8000fb4:	20005ec8 	.word	0x20005ec8
 8000fb8:	20005120 	.word	0x20005120
 8000fbc:	08016c34 	.word	0x08016c34

08000fc0 <get_current_time_in_seconds>:
    //printf("Heure actuelle: %02d:%02d, Minutes depuis minuit: %lu\n", sTime.Hours, sTime.Minutes, minutes);

    return minutes;
}

uint32_t get_current_time_in_seconds(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    return HAL_GetTick() / 1000; // Convertir le temps système en secondes
 8000fc4:	f007 f94c 	bl	8008260 <HAL_GetTick>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a03      	ldr	r2, [pc, #12]	@ (8000fd8 <get_current_time_in_seconds+0x18>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	099b      	lsrs	r3, r3, #6
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	10624dd3 	.word	0x10624dd3

08000fdc <date_Heure>:

//date et heure sur l'interface
// ===== En-tête avec la date =====
void date_Heure(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
	char dateStr[20];
	char timeStr[6];

	//date en en-tete
    BSP_LCD_SetFont(&Font16);
 8000fe2:	480e      	ldr	r0, [pc, #56]	@ (800101c <date_Heure+0x40>)
 8000fe4:	f005 fc2a 	bl	800683c <BSP_LCD_SetFont>
    getRTCDateStr(dateStr);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 ff6f 	bl	8003ed0 <getRTCDateStr>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)dateStr, CENTER_MODE);
 8000ff2:	f107 020c 	add.w	r2, r7, #12
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	210a      	movs	r1, #10
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f005 fca4 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Heure au centre
	//BSP_LCD_SetFont(&Font16);
	getRTCTimeStr(timeStr);
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffb8 	bl	8000f78 <getRTCTimeStr>
	BSP_LCD_DisplayStringAt(0, 250, (uint8_t*)timeStr, CENTER_MODE);
 8001008:	1d3a      	adds	r2, r7, #4
 800100a:	2301      	movs	r3, #1
 800100c:	21fa      	movs	r1, #250	@ 0xfa
 800100e:	2000      	movs	r0, #0
 8001010:	f005 fc9a 	bl	8006948 <BSP_LCD_DisplayStringAt>
}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20004f0c 	.word	0x20004f0c

08001020 <drawMenuPage>:

/**
 * @brief Dessine la page menu principale
 */
void drawMenuPage(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0


    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f005 fc22 	bl	8006870 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800102c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001030:	f005 fbd2 	bl	80067d8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f005 fbe6 	bl	8006808 <BSP_LCD_SetBackColor>

    // ===== Section Gauche =====
    // Zone conteneur gauche
    BSP_LCD_DrawRect(40, 60, 180, 160);
 800103c:	23a0      	movs	r3, #160	@ 0xa0
 800103e:	22b4      	movs	r2, #180	@ 0xb4
 8001040:	213c      	movs	r1, #60	@ 0x3c
 8001042:	2028      	movs	r0, #40	@ 0x28
 8001044:	f005 fed4 	bl	8006df0 <BSP_LCD_DrawRect>

    // Température
    BSP_LCD_DrawBitmap(50, 70, (uint8_t *)temp_icon_bmp);
 8001048:	4a2f      	ldr	r2, [pc, #188]	@ (8001108 <drawMenuPage+0xe8>)
 800104a:	2146      	movs	r1, #70	@ 0x46
 800104c:	2032      	movs	r0, #50	@ 0x32
 800104e:	f006 f833 	bl	80070b8 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font12);
 8001052:	482e      	ldr	r0, [pc, #184]	@ (800110c <drawMenuPage+0xec>)
 8001054:	f005 fbf2 	bl	800683c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(92, 80, (uint8_t*)"Temperature", LEFT_MODE);
 8001058:	2303      	movs	r3, #3
 800105a:	4a2d      	ldr	r2, [pc, #180]	@ (8001110 <drawMenuPage+0xf0>)
 800105c:	2150      	movs	r1, #80	@ 0x50
 800105e:	205c      	movs	r0, #92	@ 0x5c
 8001060:	f005 fc72 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Humidité
    BSP_LCD_DrawBitmap(50, 122, (uint8_t *)cloud_icon_bmp);
 8001064:	4a2b      	ldr	r2, [pc, #172]	@ (8001114 <drawMenuPage+0xf4>)
 8001066:	217a      	movs	r1, #122	@ 0x7a
 8001068:	2032      	movs	r0, #50	@ 0x32
 800106a:	f006 f825 	bl	80070b8 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(92, 132, (uint8_t*)"Humidite", LEFT_MODE);
 800106e:	2303      	movs	r3, #3
 8001070:	4a29      	ldr	r2, [pc, #164]	@ (8001118 <drawMenuPage+0xf8>)
 8001072:	2184      	movs	r1, #132	@ 0x84
 8001074:	205c      	movs	r0, #92	@ 0x5c
 8001076:	f005 fc67 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Pluie
    BSP_LCD_DrawBitmap(50, 174, (uint8_t *)rain_icon_bmp);
 800107a:	4a28      	ldr	r2, [pc, #160]	@ (800111c <drawMenuPage+0xfc>)
 800107c:	21ae      	movs	r1, #174	@ 0xae
 800107e:	2032      	movs	r0, #50	@ 0x32
 8001080:	f006 f81a 	bl	80070b8 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(92, 184, (uint8_t*)"Pluie", LEFT_MODE);
 8001084:	2303      	movs	r3, #3
 8001086:	4a26      	ldr	r2, [pc, #152]	@ (8001120 <drawMenuPage+0x100>)
 8001088:	21b8      	movs	r1, #184	@ 0xb8
 800108a:	205c      	movs	r0, #92	@ 0x5c
 800108c:	f005 fc5c 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // ===== Section Droite =====
    // Zone conteneur droite
    BSP_LCD_DrawRect(260, 60, 180, 160);
 8001090:	23a0      	movs	r3, #160	@ 0xa0
 8001092:	22b4      	movs	r2, #180	@ 0xb4
 8001094:	213c      	movs	r1, #60	@ 0x3c
 8001096:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800109a:	f005 fea9 	bl	8006df0 <BSP_LCD_DrawRect>

    // Vent
    BSP_LCD_DrawBitmap(270, 70, (uint8_t *)wind_icon_bmp);
 800109e:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <drawMenuPage+0x104>)
 80010a0:	2146      	movs	r1, #70	@ 0x46
 80010a2:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010a6:	f006 f807 	bl	80070b8 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 80, (uint8_t*)"Vent", LEFT_MODE);
 80010aa:	2303      	movs	r3, #3
 80010ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001128 <drawMenuPage+0x108>)
 80010ae:	2150      	movs	r1, #80	@ 0x50
 80010b0:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80010b4:	f005 fc48 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Direction
    BSP_LCD_DrawBitmap(270, 122, (uint8_t *)direction_icon_bmp);
 80010b8:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <drawMenuPage+0x10c>)
 80010ba:	217a      	movs	r1, #122	@ 0x7a
 80010bc:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010c0:	f005 fffa 	bl	80070b8 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 132, (uint8_t*)"Direction", LEFT_MODE);
 80010c4:	2303      	movs	r3, #3
 80010c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001130 <drawMenuPage+0x110>)
 80010c8:	2184      	movs	r1, #132	@ 0x84
 80010ca:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80010ce:	f005 fc3b 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Pression
    BSP_LCD_DrawBitmap(270, 174, (uint8_t *)pressure_icon_bmp);
 80010d2:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <drawMenuPage+0x114>)
 80010d4:	21ae      	movs	r1, #174	@ 0xae
 80010d6:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010da:	f005 ffed 	bl	80070b8 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 184, (uint8_t*)"Pression", LEFT_MODE);
 80010de:	2303      	movs	r3, #3
 80010e0:	4a15      	ldr	r2, [pc, #84]	@ (8001138 <drawMenuPage+0x118>)
 80010e2:	21b8      	movs	r1, #184	@ 0xb8
 80010e4:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80010e8:	f005 fc2e 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // ===== Barre inférieure =====

    // Icône info à gauche
    BSP_LCD_DrawBitmap(18, 235, (uint8_t *)infos_icon_bmp);
 80010ec:	4a13      	ldr	r2, [pc, #76]	@ (800113c <drawMenuPage+0x11c>)
 80010ee:	21eb      	movs	r1, #235	@ 0xeb
 80010f0:	2012      	movs	r0, #18
 80010f2:	f005 ffe1 	bl	80070b8 <BSP_LCD_DrawBitmap>


    // Icône paramètres à droite
    BSP_LCD_DrawBitmap(438, 235, (uint8_t *)setting_icon_bmp);
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <drawMenuPage+0x120>)
 80010f8:	21eb      	movs	r1, #235	@ 0xeb
 80010fa:	f44f 70db 	mov.w	r0, #438	@ 0x1b6
 80010fe:	f005 ffdb 	bl	80070b8 <BSP_LCD_DrawBitmap>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20002c48 	.word	0x20002c48
 800110c:	20004f14 	.word	0x20004f14
 8001110:	08016c40 	.word	0x08016c40
 8001114:	20000000 	.word	0x20000000
 8001118:	08016c4c 	.word	0x08016c4c
 800111c:	20001eb0 	.word	0x20001eb0
 8001120:	08016c58 	.word	0x08016c58
 8001124:	200034d4 	.word	0x200034d4
 8001128:	08016c60 	.word	0x08016c60
 800112c:	2000088c 	.word	0x2000088c
 8001130:	08016c68 	.word	0x08016c68
 8001134:	20001624 	.word	0x20001624
 8001138:	08016c74 	.word	0x08016c74
 800113c:	20001118 	.word	0x20001118
 8001140:	2000273c 	.word	0x2000273c

08001144 <drawCreditsPage>:

/**
 * @brief Dessine la page Crédits
 */
void drawCreditsPage(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0


    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f005 fb90 	bl	8006870 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001150:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001154:	f005 fb40 	bl	80067d8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f005 fb54 	bl	8006808 <BSP_LCD_SetBackColor>


    // Icône retour
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001160:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <drawCreditsPage+0x68>)
 8001162:	210a      	movs	r1, #10
 8001164:	200a      	movs	r0, #10
 8001166:	f005 ffa7 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // ===== Titre explicatif =====
    BSP_LCD_SetFont(&Font16);
 800116a:	4811      	ldr	r0, [pc, #68]	@ (80011b0 <drawCreditsPage+0x6c>)
 800116c:	f005 fb66 	bl	800683c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"Cette station Meteo a ete realisee par :", CENTER_MODE);
 8001170:	2301      	movs	r3, #1
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <drawCreditsPage+0x70>)
 8001174:	2150      	movs	r1, #80	@ 0x50
 8001176:	2000      	movs	r0, #0
 8001178:	f005 fbe6 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // ===== Liste des développeurs =====
    BSP_LCD_SetFont(&Font16);  // Police plus grande pour les noms
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <drawCreditsPage+0x6c>)
 800117e:	f005 fb5d 	bl	800683c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t*)"Maxime MORET", CENTER_MODE);
 8001182:	2301      	movs	r3, #1
 8001184:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <drawCreditsPage+0x74>)
 8001186:	2182      	movs	r1, #130	@ 0x82
 8001188:	2000      	movs	r0, #0
 800118a:	f005 fbdd 	bl	8006948 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 160, (uint8_t*)"Tristan GROUSSARD", CENTER_MODE);
 800118e:	2301      	movs	r3, #1
 8001190:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <drawCreditsPage+0x78>)
 8001192:	21a0      	movs	r1, #160	@ 0xa0
 8001194:	2000      	movs	r0, #0
 8001196:	f005 fbd7 	bl	8006948 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 190, (uint8_t*)"Koundeme Nobel DJESSOU", CENTER_MODE);
 800119a:	2301      	movs	r3, #1
 800119c:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <drawCreditsPage+0x7c>)
 800119e:	21be      	movs	r1, #190	@ 0xbe
 80011a0:	2000      	movs	r0, #0
 80011a2:	f005 fbd1 	bl	8006948 <BSP_LCD_DisplayStringAt>

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20003d60 	.word	0x20003d60
 80011b0:	20004f0c 	.word	0x20004f0c
 80011b4:	08016c80 	.word	0x08016c80
 80011b8:	08016cac 	.word	0x08016cac
 80011bc:	08016cbc 	.word	0x08016cbc
 80011c0:	08016cd0 	.word	0x08016cd0

080011c4 <drawTempHumidRainPage>:

/**
 * @brief Dessine la page 1
 */
void drawTempHumidRainPage(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
    //char tempStr[10];
    //char humidStr[10];
    char rainStr[10];

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
 80011ce:	f005 fb4f 	bl	8006870 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011d2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80011d6:	f005 faff 	bl	80067d8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011da:	f04f 30ff 	mov.w	r0, #4294967295
 80011de:	f005 fb13 	bl	8006808 <BSP_LCD_SetBackColor>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80011e2:	4a3a      	ldr	r2, [pc, #232]	@ (80012cc <drawTempHumidRainPage+0x108>)
 80011e4:	210a      	movs	r1, #10
 80011e6:	200a      	movs	r0, #10
 80011e8:	f005 ff66 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // ===== Les trois carrés de mesures =====
    // Carrés de 120x120 pixels avec espacement de 30 pixels
    // Position Y centrée verticalement
    volatile const uint16_t squareSize = 120;
 80011ec:	2378      	movs	r3, #120	@ 0x78
 80011ee:	817b      	strh	r3, [r7, #10]
    volatile const uint16_t spacing = 30;
 80011f0:	231e      	movs	r3, #30
 80011f2:	813b      	strh	r3, [r7, #8]
    volatile const uint16_t startX = 40;
 80011f4:	2328      	movs	r3, #40	@ 0x28
 80011f6:	80fb      	strh	r3, [r7, #6]
    volatile const uint16_t startY = 80;  // Ajusté pour centrer verticalement
 80011f8:	2350      	movs	r3, #80	@ 0x50
 80011fa:	80bb      	strh	r3, [r7, #4]

    // Carré température
    BSP_LCD_DrawRect(startX, startY, squareSize, squareSize);
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	b298      	uxth	r0, r3
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	b299      	uxth	r1, r3
 8001204:	897b      	ldrh	r3, [r7, #10]
 8001206:	b29a      	uxth	r2, r3
 8001208:	897b      	ldrh	r3, [r7, #10]
 800120a:	b29b      	uxth	r3, r3
 800120c:	f005 fdf0 	bl	8006df0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 20, startY + 20, (uint8_t *)temp_icon_bmp);
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	b29b      	uxth	r3, r3
 8001214:	3314      	adds	r3, #20
 8001216:	4618      	mov	r0, r3
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	b29b      	uxth	r3, r3
 800121c:	3314      	adds	r3, #20
 800121e:	4a2c      	ldr	r2, [pc, #176]	@ (80012d0 <drawTempHumidRainPage+0x10c>)
 8001220:	4619      	mov	r1, r3
 8001222:	f005 ff49 	bl	80070b8 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font20);
 8001226:	482b      	ldr	r0, [pc, #172]	@ (80012d4 <drawTempHumidRainPage+0x110>)
 8001228:	f005 fb08 	bl	800683c <BSP_LCD_SetFont>
    //sprintf(tempStr, "15deg");
    //BSP_LCD_DisplayStringAt(startX + 20, startY + 70, (uint8_t*)tempStr, LEFT_MODE);

    // Carré humidité
    BSP_LCD_DrawRect(startX + squareSize + spacing, startY, squareSize, squareSize);
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	b29a      	uxth	r2, r3
 8001230:	897b      	ldrh	r3, [r7, #10]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4413      	add	r3, r2
 8001236:	b29a      	uxth	r2, r3
 8001238:	893b      	ldrh	r3, [r7, #8]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b298      	uxth	r0, r3
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	b299      	uxth	r1, r3
 8001244:	897b      	ldrh	r3, [r7, #10]
 8001246:	b29a      	uxth	r2, r3
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	b29b      	uxth	r3, r3
 800124c:	f005 fdd0 	bl	8006df0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + squareSize + spacing + 20, startY + 20, (uint8_t *)cloud_icon_bmp);
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	b29b      	uxth	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	897b      	ldrh	r3, [r7, #10]
 8001258:	b29b      	uxth	r3, r3
 800125a:	4413      	add	r3, r2
 800125c:	893a      	ldrh	r2, [r7, #8]
 800125e:	b292      	uxth	r2, r2
 8001260:	4413      	add	r3, r2
 8001262:	3314      	adds	r3, #20
 8001264:	4618      	mov	r0, r3
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	b29b      	uxth	r3, r3
 800126a:	3314      	adds	r3, #20
 800126c:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <drawTempHumidRainPage+0x114>)
 800126e:	4619      	mov	r1, r3
 8001270:	f005 ff22 	bl	80070b8 <BSP_LCD_DrawBitmap>
    //sprintf(humidStr, "65%%");
    //BSP_LCD_DisplayStringAt(startX + squareSize + spacing + 20, startY + 70, (uint8_t*)humidStr, LEFT_MODE);

    // Carré pluviométrie
    BSP_LCD_DrawRect(startX + 2 * (squareSize + spacing), startY, squareSize, squareSize);
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	b29a      	uxth	r2, r3
 8001278:	893b      	ldrh	r3, [r7, #8]
 800127a:	b29b      	uxth	r3, r3
 800127c:	4413      	add	r3, r2
 800127e:	b29b      	uxth	r3, r3
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	b29a      	uxth	r2, r3
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4413      	add	r3, r2
 800128a:	b298      	uxth	r0, r3
 800128c:	88bb      	ldrh	r3, [r7, #4]
 800128e:	b299      	uxth	r1, r3
 8001290:	897b      	ldrh	r3, [r7, #10]
 8001292:	b29a      	uxth	r2, r3
 8001294:	897b      	ldrh	r3, [r7, #10]
 8001296:	b29b      	uxth	r3, r3
 8001298:	f005 fdaa 	bl	8006df0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 2 * (squareSize + spacing) + 20, startY + 20, (uint8_t *)rain_icon_bmp);
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	893b      	ldrh	r3, [r7, #8]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	440b      	add	r3, r1
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	3314      	adds	r3, #20
 80012b4:	4618      	mov	r0, r3
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	3314      	adds	r3, #20
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <drawTempHumidRainPage+0x118>)
 80012be:	4619      	mov	r1, r3
 80012c0:	f005 fefa 	bl	80070b8 <BSP_LCD_DrawBitmap>
    //sprintf(rainStr, "100 mm");
    //BSP_LCD_DisplayStringAt(startX + 2 * (squareSize + spacing) + 20, startY + 70, (uint8_t*)rainStr, LEFT_MODE);


}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20003d60 	.word	0x20003d60
 80012d0:	20002c48 	.word	0x20002c48
 80012d4:	20004f04 	.word	0x20004f04
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20001eb0 	.word	0x20001eb0

080012e0 <drawWindDirPressurePage>:

/**
 * @brief Dessine la page 2
 */

void drawWindDirPressurePage(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	@ 0x30
 80012e4:	af00      	add	r7, sp, #0
    char windStr[10];
    char dirStr[10];
    char pressureStr[10];

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80012e6:	f04f 30ff 	mov.w	r0, #4294967295
 80012ea:	f005 fac1 	bl	8006870 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80012ee:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80012f2:	f005 fa71 	bl	80067d8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80012f6:	f04f 30ff 	mov.w	r0, #4294967295
 80012fa:	f005 fa85 	bl	8006808 <BSP_LCD_SetBackColor>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80012fe:	4a2a      	ldr	r2, [pc, #168]	@ (80013a8 <drawWindDirPressurePage+0xc8>)
 8001300:	210a      	movs	r1, #10
 8001302:	200a      	movs	r0, #10
 8001304:	f005 fed8 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // ===== Les trois carrés de mesures =====
    // Carrés de 120x120 pixels avec espacement de 30 pixels
    const uint16_t squareSize = 120;
 8001308:	2378      	movs	r3, #120	@ 0x78
 800130a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    const uint16_t spacing = 30;
 800130c:	231e      	movs	r3, #30
 800130e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    const uint16_t startX = 40;
 8001310:	2328      	movs	r3, #40	@ 0x28
 8001312:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const uint16_t startY = 80;  // Ajusté pour centrer verticalement
 8001314:	2350      	movs	r3, #80	@ 0x50
 8001316:	853b      	strh	r3, [r7, #40]	@ 0x28

    // Carré vitesse du vent
    BSP_LCD_DrawRect(startX, startY, squareSize, squareSize);
 8001318:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800131a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800131c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800131e:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 8001320:	f005 fd66 	bl	8006df0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 20, startY + 20, (uint8_t *)wind_icon_bmp);
 8001324:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001326:	3314      	adds	r3, #20
 8001328:	4618      	mov	r0, r3
 800132a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800132c:	3314      	adds	r3, #20
 800132e:	4a1f      	ldr	r2, [pc, #124]	@ (80013ac <drawWindDirPressurePage+0xcc>)
 8001330:	4619      	mov	r1, r3
 8001332:	f005 fec1 	bl	80070b8 <BSP_LCD_DrawBitmap>
    //BSP_LCD_SetFont(&Font20);
    //sprintf(windStr, "30\nkm/h");
    //BSP_LCD_DisplayStringAt(startX + 20, startY + 60, (uint8_t*)windStr, LEFT_MODE);

    // Carré direction du vent
    BSP_LCD_DrawRect(startX + squareSize + spacing, startY, squareSize, squareSize);
 8001336:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001338:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800133a:	4413      	add	r3, r2
 800133c:	b29a      	uxth	r2, r3
 800133e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001340:	4413      	add	r3, r2
 8001342:	b298      	uxth	r0, r3
 8001344:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001346:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001348:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800134a:	f005 fd51 	bl	8006df0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + squareSize + spacing + 20, startY + 20, (uint8_t *)direction_icon_bmp);
 800134e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001350:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001352:	441a      	add	r2, r3
 8001354:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001356:	4413      	add	r3, r2
 8001358:	3314      	adds	r3, #20
 800135a:	4618      	mov	r0, r3
 800135c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800135e:	3314      	adds	r3, #20
 8001360:	4a13      	ldr	r2, [pc, #76]	@ (80013b0 <drawWindDirPressurePage+0xd0>)
 8001362:	4619      	mov	r1, r3
 8001364:	f005 fea8 	bl	80070b8 <BSP_LCD_DrawBitmap>
    //sprintf(dirStr, "65%%");
    //BSP_LCD_DisplayStringAt(startX + squareSize + spacing + 20, startY + 70, (uint8_t*)dirStr, LEFT_MODE);

    // Carré pression
    BSP_LCD_DrawRect(startX + 2 * (squareSize + spacing), startY, squareSize, squareSize);
 8001368:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800136a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800136c:	4413      	add	r3, r2
 800136e:	b29b      	uxth	r3, r3
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	b29a      	uxth	r2, r3
 8001374:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001376:	4413      	add	r3, r2
 8001378:	b298      	uxth	r0, r3
 800137a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800137c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800137e:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001380:	f005 fd36 	bl	8006df0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 2 * (squareSize + spacing) + 20, startY + 20, (uint8_t *)pressure_icon_bmp);
 8001384:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001386:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 8001388:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800138a:	440b      	add	r3, r1
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	4413      	add	r3, r2
 8001390:	3314      	adds	r3, #20
 8001392:	4618      	mov	r0, r3
 8001394:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001396:	3314      	adds	r3, #20
 8001398:	4a06      	ldr	r2, [pc, #24]	@ (80013b4 <drawWindDirPressurePage+0xd4>)
 800139a:	4619      	mov	r1, r3
 800139c:	f005 fe8c 	bl	80070b8 <BSP_LCD_DrawBitmap>
    //sprintf(pressureStr, "50\nbar");
    //BSP_LCD_DisplayStringAt(startX + 2 * (squareSize + spacing) + 20, startY + 60, (uint8_t*)pressureStr, LEFT_MODE);
}
 80013a0:	bf00      	nop
 80013a2:	3730      	adds	r7, #48	@ 0x30
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20003d60 	.word	0x20003d60
 80013ac:	200034d4 	.word	0x200034d4
 80013b0:	2000088c 	.word	0x2000088c
 80013b4:	20001624 	.word	0x20001624

080013b8 <drawSettingsPage>:
 * @brief Dessine la page de réglage date/heure
 */
/**
 * @brief Dessine la page de réglage date/heure
 */
void drawSettingsPage(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af02      	add	r7, sp, #8
    char buffer[20];
    const uint16_t buttonSize = 30;      // Taille des boutons +/-
 80013be:	231e      	movs	r3, #30
 80013c0:	83fb      	strh	r3, [r7, #30]
    const uint16_t valueWidth = 60;      // Largeur zone valeur
 80013c2:	233c      	movs	r3, #60	@ 0x3c
 80013c4:	83bb      	strh	r3, [r7, #28]
    const uint16_t spacing = 30;         // Espacement entre les éléments
 80013c6:	231e      	movs	r3, #30
 80013c8:	837b      	strh	r3, [r7, #26]

    // Lire les valeurs actuelles de la RTC
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013ca:	2200      	movs	r2, #0
 80013cc:	499e      	ldr	r1, [pc, #632]	@ (8001648 <drawSettingsPage+0x290>)
 80013ce:	489f      	ldr	r0, [pc, #636]	@ (800164c <drawSettingsPage+0x294>)
 80013d0:	f00b f992 	bl	800c6f8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013d4:	2200      	movs	r2, #0
 80013d6:	499e      	ldr	r1, [pc, #632]	@ (8001650 <drawSettingsPage+0x298>)
 80013d8:	489c      	ldr	r0, [pc, #624]	@ (800164c <drawSettingsPage+0x294>)
 80013da:	f00b fa6f 	bl	800c8bc <HAL_RTC_GetDate>

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80013de:	f04f 30ff 	mov.w	r0, #4294967295
 80013e2:	f005 fa45 	bl	8006870 <BSP_LCD_Clear>

    // Icône retour
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80013e6:	4a9b      	ldr	r2, [pc, #620]	@ (8001654 <drawSettingsPage+0x29c>)
 80013e8:	210a      	movs	r1, #10
 80013ea:	200a      	movs	r0, #10
 80013ec:	f005 fe64 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // Configuration texte
    BSP_LCD_SetFont(&Font16);
 80013f0:	4899      	ldr	r0, [pc, #612]	@ (8001658 <drawSettingsPage+0x2a0>)
 80013f2:	f005 fa23 	bl	800683c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013f6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80013fa:	f005 f9ed 	bl	80067d8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80013fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001402:	f005 fa01 	bl	8006808 <BSP_LCD_SetBackColor>

    // Section Date
    BSP_LCD_DisplayStringAt(40, 80, (uint8_t*)"Date", LEFT_MODE);
 8001406:	2303      	movs	r3, #3
 8001408:	4a94      	ldr	r2, [pc, #592]	@ (800165c <drawSettingsPage+0x2a4>)
 800140a:	2150      	movs	r1, #80	@ 0x50
 800140c:	2028      	movs	r0, #40	@ 0x28
 800140e:	f005 fa9b 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Positions horizontales pour les colonnes de réglage
    const uint16_t col1 = 150;  // Jour
 8001412:	2396      	movs	r3, #150	@ 0x96
 8001414:	833b      	strh	r3, [r7, #24]
    const uint16_t col2 = col1 + valueWidth + spacing;  // Mois
 8001416:	8b3a      	ldrh	r2, [r7, #24]
 8001418:	8bbb      	ldrh	r3, [r7, #28]
 800141a:	4413      	add	r3, r2
 800141c:	b29a      	uxth	r2, r3
 800141e:	8b7b      	ldrh	r3, [r7, #26]
 8001420:	4413      	add	r3, r2
 8001422:	82fb      	strh	r3, [r7, #22]
    const uint16_t col3 = col2 + valueWidth + spacing;  // Année
 8001424:	8afa      	ldrh	r2, [r7, #22]
 8001426:	8bbb      	ldrh	r3, [r7, #28]
 8001428:	4413      	add	r3, r2
 800142a:	b29a      	uxth	r2, r3
 800142c:	8b7b      	ldrh	r3, [r7, #26]
 800142e:	4413      	add	r3, r2
 8001430:	82bb      	strh	r3, [r7, #20]

    // Afficher la date actuelle en haut
    sprintf(buffer, "%02d/%02d/%04d", sDate.Date, sDate.Month, 2000 + sDate.Year);
 8001432:	4b87      	ldr	r3, [pc, #540]	@ (8001650 <drawSettingsPage+0x298>)
 8001434:	789b      	ldrb	r3, [r3, #2]
 8001436:	461a      	mov	r2, r3
 8001438:	4b85      	ldr	r3, [pc, #532]	@ (8001650 <drawSettingsPage+0x298>)
 800143a:	785b      	ldrb	r3, [r3, #1]
 800143c:	4619      	mov	r1, r3
 800143e:	4b84      	ldr	r3, [pc, #528]	@ (8001650 <drawSettingsPage+0x298>)
 8001440:	78db      	ldrb	r3, [r3, #3]
 8001442:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001446:	4638      	mov	r0, r7
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	460b      	mov	r3, r1
 800144c:	4984      	ldr	r1, [pc, #528]	@ (8001660 <drawSettingsPage+0x2a8>)
 800144e:	f013 fa93 	bl	8014978 <siprintf>
    BSP_LCD_DisplayStringAt(0, 15, (uint8_t*)buffer, CENTER_MODE);
 8001452:	463a      	mov	r2, r7
 8001454:	2301      	movs	r3, #1
 8001456:	210f      	movs	r1, #15
 8001458:	2000      	movs	r0, #0
 800145a:	f005 fa75 	bl	8006948 <BSP_LCD_DisplayStringAt>

// Boutons et valeurs pour le jour
	BSP_LCD_DrawRect(col1, 40, buttonSize, buttonSize);  // Bouton +
 800145e:	8bfb      	ldrh	r3, [r7, #30]
 8001460:	8bfa      	ldrh	r2, [r7, #30]
 8001462:	8b38      	ldrh	r0, [r7, #24]
 8001464:	2128      	movs	r1, #40	@ 0x28
 8001466:	f005 fcc3 	bl	8006df0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col1 + 10, 50, (uint8_t*)"+", LEFT_MODE);
 800146a:	8b3b      	ldrh	r3, [r7, #24]
 800146c:	330a      	adds	r3, #10
 800146e:	b298      	uxth	r0, r3
 8001470:	2303      	movs	r3, #3
 8001472:	4a7c      	ldr	r2, [pc, #496]	@ (8001664 <drawSettingsPage+0x2ac>)
 8001474:	2132      	movs	r1, #50	@ 0x32
 8001476:	f005 fa67 	bl	8006948 <BSP_LCD_DisplayStringAt>
	sprintf(buffer, "%02d", sDate.Date);
 800147a:	4b75      	ldr	r3, [pc, #468]	@ (8001650 <drawSettingsPage+0x298>)
 800147c:	789b      	ldrb	r3, [r3, #2]
 800147e:	461a      	mov	r2, r3
 8001480:	463b      	mov	r3, r7
 8001482:	4979      	ldr	r1, [pc, #484]	@ (8001668 <drawSettingsPage+0x2b0>)
 8001484:	4618      	mov	r0, r3
 8001486:	f013 fa77 	bl	8014978 <siprintf>
	BSP_LCD_DisplayStringAt(col1 + 5, 85, (uint8_t*)buffer, LEFT_MODE);
 800148a:	8b3b      	ldrh	r3, [r7, #24]
 800148c:	3305      	adds	r3, #5
 800148e:	b298      	uxth	r0, r3
 8001490:	463a      	mov	r2, r7
 8001492:	2303      	movs	r3, #3
 8001494:	2155      	movs	r1, #85	@ 0x55
 8001496:	f005 fa57 	bl	8006948 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(col1, 105, buttonSize, buttonSize);  // Bouton -
 800149a:	8bfb      	ldrh	r3, [r7, #30]
 800149c:	8bfa      	ldrh	r2, [r7, #30]
 800149e:	8b38      	ldrh	r0, [r7, #24]
 80014a0:	2169      	movs	r1, #105	@ 0x69
 80014a2:	f005 fca5 	bl	8006df0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col1 + 10, 115, (uint8_t*)"-", LEFT_MODE);
 80014a6:	8b3b      	ldrh	r3, [r7, #24]
 80014a8:	330a      	adds	r3, #10
 80014aa:	b298      	uxth	r0, r3
 80014ac:	2303      	movs	r3, #3
 80014ae:	4a6f      	ldr	r2, [pc, #444]	@ (800166c <drawSettingsPage+0x2b4>)
 80014b0:	2173      	movs	r1, #115	@ 0x73
 80014b2:	f005 fa49 	bl	8006948 <BSP_LCD_DisplayStringAt>

	// Boutons et valeurs pour le mois
	BSP_LCD_DrawRect(col2, 40, buttonSize, buttonSize);
 80014b6:	8bfb      	ldrh	r3, [r7, #30]
 80014b8:	8bfa      	ldrh	r2, [r7, #30]
 80014ba:	8af8      	ldrh	r0, [r7, #22]
 80014bc:	2128      	movs	r1, #40	@ 0x28
 80014be:	f005 fc97 	bl	8006df0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col2 + 10, 50, (uint8_t*)"+", LEFT_MODE);
 80014c2:	8afb      	ldrh	r3, [r7, #22]
 80014c4:	330a      	adds	r3, #10
 80014c6:	b298      	uxth	r0, r3
 80014c8:	2303      	movs	r3, #3
 80014ca:	4a66      	ldr	r2, [pc, #408]	@ (8001664 <drawSettingsPage+0x2ac>)
 80014cc:	2132      	movs	r1, #50	@ 0x32
 80014ce:	f005 fa3b 	bl	8006948 <BSP_LCD_DisplayStringAt>
	sprintf(buffer, "%02d", sDate.Month);
 80014d2:	4b5f      	ldr	r3, [pc, #380]	@ (8001650 <drawSettingsPage+0x298>)
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	461a      	mov	r2, r3
 80014d8:	463b      	mov	r3, r7
 80014da:	4963      	ldr	r1, [pc, #396]	@ (8001668 <drawSettingsPage+0x2b0>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f013 fa4b 	bl	8014978 <siprintf>
	BSP_LCD_DisplayStringAt(col2 + 5, 85, (uint8_t*)buffer, LEFT_MODE);
 80014e2:	8afb      	ldrh	r3, [r7, #22]
 80014e4:	3305      	adds	r3, #5
 80014e6:	b298      	uxth	r0, r3
 80014e8:	463a      	mov	r2, r7
 80014ea:	2303      	movs	r3, #3
 80014ec:	2155      	movs	r1, #85	@ 0x55
 80014ee:	f005 fa2b 	bl	8006948 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(col2, 105, buttonSize, buttonSize);  // Bouton -
 80014f2:	8bfb      	ldrh	r3, [r7, #30]
 80014f4:	8bfa      	ldrh	r2, [r7, #30]
 80014f6:	8af8      	ldrh	r0, [r7, #22]
 80014f8:	2169      	movs	r1, #105	@ 0x69
 80014fa:	f005 fc79 	bl	8006df0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col2 + 10, 115, (uint8_t*)"-", LEFT_MODE);
 80014fe:	8afb      	ldrh	r3, [r7, #22]
 8001500:	330a      	adds	r3, #10
 8001502:	b298      	uxth	r0, r3
 8001504:	2303      	movs	r3, #3
 8001506:	4a59      	ldr	r2, [pc, #356]	@ (800166c <drawSettingsPage+0x2b4>)
 8001508:	2173      	movs	r1, #115	@ 0x73
 800150a:	f005 fa1d 	bl	8006948 <BSP_LCD_DisplayStringAt>

	// Boutons et valeurs pour l'année
	BSP_LCD_DrawRect(col3, 40, buttonSize, buttonSize);
 800150e:	8bfb      	ldrh	r3, [r7, #30]
 8001510:	8bfa      	ldrh	r2, [r7, #30]
 8001512:	8ab8      	ldrh	r0, [r7, #20]
 8001514:	2128      	movs	r1, #40	@ 0x28
 8001516:	f005 fc6b 	bl	8006df0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col3 + 10, 50, (uint8_t*)"+", LEFT_MODE);
 800151a:	8abb      	ldrh	r3, [r7, #20]
 800151c:	330a      	adds	r3, #10
 800151e:	b298      	uxth	r0, r3
 8001520:	2303      	movs	r3, #3
 8001522:	4a50      	ldr	r2, [pc, #320]	@ (8001664 <drawSettingsPage+0x2ac>)
 8001524:	2132      	movs	r1, #50	@ 0x32
 8001526:	f005 fa0f 	bl	8006948 <BSP_LCD_DisplayStringAt>
	sprintf(buffer, "20%02d", sDate.Year);
 800152a:	4b49      	ldr	r3, [pc, #292]	@ (8001650 <drawSettingsPage+0x298>)
 800152c:	78db      	ldrb	r3, [r3, #3]
 800152e:	461a      	mov	r2, r3
 8001530:	463b      	mov	r3, r7
 8001532:	494f      	ldr	r1, [pc, #316]	@ (8001670 <drawSettingsPage+0x2b8>)
 8001534:	4618      	mov	r0, r3
 8001536:	f013 fa1f 	bl	8014978 <siprintf>
	BSP_LCD_DisplayStringAt(col3 - 5, 85, (uint8_t*)buffer, LEFT_MODE);
 800153a:	8abb      	ldrh	r3, [r7, #20]
 800153c:	3b05      	subs	r3, #5
 800153e:	b298      	uxth	r0, r3
 8001540:	463a      	mov	r2, r7
 8001542:	2303      	movs	r3, #3
 8001544:	2155      	movs	r1, #85	@ 0x55
 8001546:	f005 f9ff 	bl	8006948 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(col3, 105, buttonSize, buttonSize);  // Bouton -
 800154a:	8bfb      	ldrh	r3, [r7, #30]
 800154c:	8bfa      	ldrh	r2, [r7, #30]
 800154e:	8ab8      	ldrh	r0, [r7, #20]
 8001550:	2169      	movs	r1, #105	@ 0x69
 8001552:	f005 fc4d 	bl	8006df0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col3 + 10, 115, (uint8_t*)"-", LEFT_MODE);
 8001556:	8abb      	ldrh	r3, [r7, #20]
 8001558:	330a      	adds	r3, #10
 800155a:	b298      	uxth	r0, r3
 800155c:	2303      	movs	r3, #3
 800155e:	4a43      	ldr	r2, [pc, #268]	@ (800166c <drawSettingsPage+0x2b4>)
 8001560:	2173      	movs	r1, #115	@ 0x73
 8001562:	f005 f9f1 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Section Heure (déplacée vers le haut)
    BSP_LCD_DisplayStringAt(40, 160, (uint8_t*)"Heure", LEFT_MODE);
 8001566:	2303      	movs	r3, #3
 8001568:	4a42      	ldr	r2, [pc, #264]	@ (8001674 <drawSettingsPage+0x2bc>)
 800156a:	21a0      	movs	r1, #160	@ 0xa0
 800156c:	2028      	movs	r0, #40	@ 0x28
 800156e:	f005 f9eb 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Boutons et valeurs pour les heures (déplacés vers le haut)
    BSP_LCD_DrawRect(col1, 140, buttonSize, buttonSize);  // Bouton +
 8001572:	8bfb      	ldrh	r3, [r7, #30]
 8001574:	8bfa      	ldrh	r2, [r7, #30]
 8001576:	8b38      	ldrh	r0, [r7, #24]
 8001578:	218c      	movs	r1, #140	@ 0x8c
 800157a:	f005 fc39 	bl	8006df0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col1 + 10, 145, (uint8_t*)"+", LEFT_MODE);
 800157e:	8b3b      	ldrh	r3, [r7, #24]
 8001580:	330a      	adds	r3, #10
 8001582:	b298      	uxth	r0, r3
 8001584:	2303      	movs	r3, #3
 8001586:	4a37      	ldr	r2, [pc, #220]	@ (8001664 <drawSettingsPage+0x2ac>)
 8001588:	2191      	movs	r1, #145	@ 0x91
 800158a:	f005 f9dd 	bl	8006948 <BSP_LCD_DisplayStringAt>
    sprintf(buffer, "%02d", sTime.Hours);
 800158e:	4b2e      	ldr	r3, [pc, #184]	@ (8001648 <drawSettingsPage+0x290>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	461a      	mov	r2, r3
 8001594:	463b      	mov	r3, r7
 8001596:	4934      	ldr	r1, [pc, #208]	@ (8001668 <drawSettingsPage+0x2b0>)
 8001598:	4618      	mov	r0, r3
 800159a:	f013 f9ed 	bl	8014978 <siprintf>
    BSP_LCD_DisplayStringAt(col1 + 5, 180, (uint8_t*)buffer, LEFT_MODE);
 800159e:	8b3b      	ldrh	r3, [r7, #24]
 80015a0:	3305      	adds	r3, #5
 80015a2:	b298      	uxth	r0, r3
 80015a4:	463a      	mov	r2, r7
 80015a6:	2303      	movs	r3, #3
 80015a8:	21b4      	movs	r1, #180	@ 0xb4
 80015aa:	f005 f9cd 	bl	8006948 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(col1, 200, buttonSize, buttonSize);  // Bouton -
 80015ae:	8bfb      	ldrh	r3, [r7, #30]
 80015b0:	8bfa      	ldrh	r2, [r7, #30]
 80015b2:	8b38      	ldrh	r0, [r7, #24]
 80015b4:	21c8      	movs	r1, #200	@ 0xc8
 80015b6:	f005 fc1b 	bl	8006df0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col1 + 10, 205, (uint8_t*)"-", LEFT_MODE);
 80015ba:	8b3b      	ldrh	r3, [r7, #24]
 80015bc:	330a      	adds	r3, #10
 80015be:	b298      	uxth	r0, r3
 80015c0:	2303      	movs	r3, #3
 80015c2:	4a2a      	ldr	r2, [pc, #168]	@ (800166c <drawSettingsPage+0x2b4>)
 80015c4:	21cd      	movs	r1, #205	@ 0xcd
 80015c6:	f005 f9bf 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Boutons et valeurs pour les minutes (déplacés vers le haut)
    BSP_LCD_DrawRect(col2, 140, buttonSize, buttonSize);
 80015ca:	8bfb      	ldrh	r3, [r7, #30]
 80015cc:	8bfa      	ldrh	r2, [r7, #30]
 80015ce:	8af8      	ldrh	r0, [r7, #22]
 80015d0:	218c      	movs	r1, #140	@ 0x8c
 80015d2:	f005 fc0d 	bl	8006df0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col2 + 10, 145, (uint8_t*)"+", LEFT_MODE);
 80015d6:	8afb      	ldrh	r3, [r7, #22]
 80015d8:	330a      	adds	r3, #10
 80015da:	b298      	uxth	r0, r3
 80015dc:	2303      	movs	r3, #3
 80015de:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <drawSettingsPage+0x2ac>)
 80015e0:	2191      	movs	r1, #145	@ 0x91
 80015e2:	f005 f9b1 	bl	8006948 <BSP_LCD_DisplayStringAt>
    sprintf(buffer, "%02d", sTime.Minutes);
 80015e6:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <drawSettingsPage+0x290>)
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	461a      	mov	r2, r3
 80015ec:	463b      	mov	r3, r7
 80015ee:	491e      	ldr	r1, [pc, #120]	@ (8001668 <drawSettingsPage+0x2b0>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f013 f9c1 	bl	8014978 <siprintf>
    BSP_LCD_DisplayStringAt(col2 + 5, 180, (uint8_t*)buffer, LEFT_MODE);
 80015f6:	8afb      	ldrh	r3, [r7, #22]
 80015f8:	3305      	adds	r3, #5
 80015fa:	b298      	uxth	r0, r3
 80015fc:	463a      	mov	r2, r7
 80015fe:	2303      	movs	r3, #3
 8001600:	21b4      	movs	r1, #180	@ 0xb4
 8001602:	f005 f9a1 	bl	8006948 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(col2, 200, buttonSize, buttonSize);
 8001606:	8bfb      	ldrh	r3, [r7, #30]
 8001608:	8bfa      	ldrh	r2, [r7, #30]
 800160a:	8af8      	ldrh	r0, [r7, #22]
 800160c:	21c8      	movs	r1, #200	@ 0xc8
 800160e:	f005 fbef 	bl	8006df0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col2 + 10, 205, (uint8_t*)"-", LEFT_MODE);
 8001612:	8afb      	ldrh	r3, [r7, #22]
 8001614:	330a      	adds	r3, #10
 8001616:	b298      	uxth	r0, r3
 8001618:	2303      	movs	r3, #3
 800161a:	4a14      	ldr	r2, [pc, #80]	@ (800166c <drawSettingsPage+0x2b4>)
 800161c:	21cd      	movs	r1, #205	@ 0xcd
 800161e:	f005 f993 	bl	8006948 <BSP_LCD_DisplayStringAt>


    // Bouton Valider
    BSP_LCD_DrawRect(340, 220, 100, 30);
 8001622:	231e      	movs	r3, #30
 8001624:	2264      	movs	r2, #100	@ 0x64
 8001626:	21dc      	movs	r1, #220	@ 0xdc
 8001628:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 800162c:	f005 fbe0 	bl	8006df0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(350, 225, (uint8_t*)"Valider",LEFT_MODE);
 8001630:	2303      	movs	r3, #3
 8001632:	4a11      	ldr	r2, [pc, #68]	@ (8001678 <drawSettingsPage+0x2c0>)
 8001634:	21e1      	movs	r1, #225	@ 0xe1
 8001636:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800163a:	f005 f985 	bl	8006948 <BSP_LCD_DisplayStringAt>

}
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000510c 	.word	0x2000510c
 800164c:	20005ec8 	.word	0x20005ec8
 8001650:	20005120 	.word	0x20005120
 8001654:	20003d60 	.word	0x20003d60
 8001658:	20004f0c 	.word	0x20004f0c
 800165c:	08016ce8 	.word	0x08016ce8
 8001660:	08016cf0 	.word	0x08016cf0
 8001664:	08016d00 	.word	0x08016d00
 8001668:	08016d04 	.word	0x08016d04
 800166c:	08016d0c 	.word	0x08016d0c
 8001670:	08016d10 	.word	0x08016d10
 8001674:	08016d18 	.word	0x08016d18
 8001678:	08016d20 	.word	0x08016d20

0800167c <drawTempHumGraphPage>:

void drawTempHumGraphPage(void) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001682:	f04f 30ff 	mov.w	r0, #4294967295
 8001686:	f005 f8f3 	bl	8006870 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800168a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800168e:	f005 f8a3 	bl	80067d8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001692:	f04f 30ff 	mov.w	r0, #4294967295
 8001696:	f005 f8b7 	bl	8006808 <BSP_LCD_SetBackColor>

    // ===== En-tête =====
    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 800169a:	4a17      	ldr	r2, [pc, #92]	@ (80016f8 <drawTempHumGraphPage+0x7c>)
 800169c:	210a      	movs	r1, #10
 800169e:	200a      	movs	r0, #10
 80016a0:	f005 fd0a 	bl	80070b8 <BSP_LCD_DrawBitmap>



    // ===== Lignes verticales de séparation =====
    const uint16_t lineStartY = 60;
 80016a4:	233c      	movs	r3, #60	@ 0x3c
 80016a6:	80fb      	strh	r3, [r7, #6]
    const uint16_t lineHeight = 180;
 80016a8:	23b4      	movs	r3, #180	@ 0xb4
 80016aa:	80bb      	strh	r3, [r7, #4]

    // Première ligne verticale (1/3 de l'écran)
    BSP_LCD_DrawVLine(480/3, lineStartY, lineHeight);
 80016ac:	88ba      	ldrh	r2, [r7, #4]
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	4619      	mov	r1, r3
 80016b2:	20a0      	movs	r0, #160	@ 0xa0
 80016b4:	f005 fa6e 	bl	8006b94 <BSP_LCD_DrawVLine>

    // Deuxième ligne verticale (2/3 de l'écran)
    BSP_LCD_DrawVLine(2*480/3, lineStartY, lineHeight);
 80016b8:	88ba      	ldrh	r2, [r7, #4]
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 80016c2:	f005 fa67 	bl	8006b94 <BSP_LCD_DrawVLine>

    // ===== Icônes en haut de chaque colonne =====
    const uint16_t iconY = 60;
 80016c6:	233c      	movs	r3, #60	@ 0x3c
 80016c8:	807b      	strh	r3, [r7, #2]

    // Colonne 1 (horloge)
    BSP_LCD_DrawBitmap(480/6 - 16, iconY, (uint8_t *)clock_icon_bmp);
 80016ca:	887b      	ldrh	r3, [r7, #2]
 80016cc:	4a0b      	ldr	r2, [pc, #44]	@ (80016fc <drawTempHumGraphPage+0x80>)
 80016ce:	4619      	mov	r1, r3
 80016d0:	2040      	movs	r0, #64	@ 0x40
 80016d2:	f005 fcf1 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // Colonne 2 (thermomètre)
    BSP_LCD_DrawBitmap(480/2 - 16, iconY, (uint8_t *)temp_icon_bmp);
 80016d6:	887b      	ldrh	r3, [r7, #2]
 80016d8:	4a09      	ldr	r2, [pc, #36]	@ (8001700 <drawTempHumGraphPage+0x84>)
 80016da:	4619      	mov	r1, r3
 80016dc:	20e0      	movs	r0, #224	@ 0xe0
 80016de:	f005 fceb 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // Colonne 3 (gouttes)
    BSP_LCD_DrawBitmap(5*480/6 - 16, iconY, (uint8_t *)rain_icon_bmp);
 80016e2:	887b      	ldrh	r3, [r7, #2]
 80016e4:	4a07      	ldr	r2, [pc, #28]	@ (8001704 <drawTempHumGraphPage+0x88>)
 80016e6:	4619      	mov	r1, r3
 80016e8:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80016ec:	f005 fce4 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // ===== Zone pour les graphiques =====
    // TODO: Ajouter les graphiques dans chaque colonne


}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20003d60 	.word	0x20003d60
 80016fc:	200045ec 	.word	0x200045ec
 8001700:	20002c48 	.word	0x20002c48
 8001704:	20001eb0 	.word	0x20001eb0

08001708 <drawRainPressGraphPage>:

void drawRainPressGraphPage(void) {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800170e:	f04f 30ff 	mov.w	r0, #4294967295
 8001712:	f005 f8ad 	bl	8006870 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001716:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800171a:	f005 f85d 	bl	80067d8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800171e:	f04f 30ff 	mov.w	r0, #4294967295
 8001722:	f005 f871 	bl	8006808 <BSP_LCD_SetBackColor>

    // ===== En-tête =====
    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001726:	4a17      	ldr	r2, [pc, #92]	@ (8001784 <drawRainPressGraphPage+0x7c>)
 8001728:	210a      	movs	r1, #10
 800172a:	200a      	movs	r0, #10
 800172c:	f005 fcc4 	bl	80070b8 <BSP_LCD_DrawBitmap>


    // ===== Lignes verticales de séparation =====
    const uint16_t lineStartY = 60;
 8001730:	233c      	movs	r3, #60	@ 0x3c
 8001732:	80fb      	strh	r3, [r7, #6]
    const uint16_t lineHeight = 180;
 8001734:	23b4      	movs	r3, #180	@ 0xb4
 8001736:	80bb      	strh	r3, [r7, #4]

    // Première ligne verticale (1/3 de l'écran)
    BSP_LCD_DrawVLine(480/3, lineStartY, lineHeight);
 8001738:	88ba      	ldrh	r2, [r7, #4]
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	4619      	mov	r1, r3
 800173e:	20a0      	movs	r0, #160	@ 0xa0
 8001740:	f005 fa28 	bl	8006b94 <BSP_LCD_DrawVLine>

    // Deuxième ligne verticale (2/3 de l'écran)
    BSP_LCD_DrawVLine(2*480/3, lineStartY, lineHeight);
 8001744:	88ba      	ldrh	r2, [r7, #4]
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	4619      	mov	r1, r3
 800174a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800174e:	f005 fa21 	bl	8006b94 <BSP_LCD_DrawVLine>

    // ===== Icônes en haut de chaque colonne =====
    const uint16_t iconY = 60;
 8001752:	233c      	movs	r3, #60	@ 0x3c
 8001754:	807b      	strh	r3, [r7, #2]

    // Colonne 1 (horloge)
    BSP_LCD_DrawBitmap(480/6 - 16, iconY, (uint8_t *)clock_icon_bmp);
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	4a0b      	ldr	r2, [pc, #44]	@ (8001788 <drawRainPressGraphPage+0x80>)
 800175a:	4619      	mov	r1, r3
 800175c:	2040      	movs	r0, #64	@ 0x40
 800175e:	f005 fcab 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // Colonne 2 (thermomètre)
    BSP_LCD_DrawBitmap(480/2 - 16, iconY, (uint8_t *)temp_icon_bmp);
 8001762:	887b      	ldrh	r3, [r7, #2]
 8001764:	4a09      	ldr	r2, [pc, #36]	@ (800178c <drawRainPressGraphPage+0x84>)
 8001766:	4619      	mov	r1, r3
 8001768:	20e0      	movs	r0, #224	@ 0xe0
 800176a:	f005 fca5 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // Colonne 3 (gouttes)
    BSP_LCD_DrawBitmap(5*480/6 - 16, iconY, (uint8_t *)rain_icon_bmp);
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	4a07      	ldr	r2, [pc, #28]	@ (8001790 <drawRainPressGraphPage+0x88>)
 8001772:	4619      	mov	r1, r3
 8001774:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8001778:	f005 fc9e 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // ===== Zone pour les graphiques =====
    // TODO: Ajouter les graphiques dans chaque colonne

}
 800177c:	bf00      	nop
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20003d60 	.word	0x20003d60
 8001788:	200045ec 	.word	0x200045ec
 800178c:	20002c48 	.word	0x20002c48
 8001790:	20001eb0 	.word	0x20001eb0

08001794 <draw_temperature_graph>:
int current_point = 0;




void draw_temperature_graph(float *temps, uint32_t *times, int num_points) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b096      	sub	sp, #88	@ 0x58
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
    int offsetY = 20; // Décalage vers le bas
 80017a0:	2314      	movs	r3, #20
 80017a2:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Effacer l'écran
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f005 f816 	bl	80067d8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, 480, 275); // Effacer l'écran (fond blanc)
 80017ac:	f240 1313 	movw	r3, #275	@ 0x113
 80017b0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2000      	movs	r0, #0
 80017b8:	f005 fd30 	bl	800721c <BSP_LCD_FillRect>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80017bc:	4a9b      	ldr	r2, [pc, #620]	@ (8001a2c <draw_temperature_graph+0x298>)
 80017be:	210a      	movs	r1, #10
 80017c0:	200a      	movs	r0, #10
 80017c2:	f005 fc79 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // Couleur des axes
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80017c6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80017ca:	f005 f805 	bl	80067d8 <BSP_LCD_SetTextColor>

    // Ajouter un titre
    BSP_LCD_SetFont(&Font16); // Police pour le titre
 80017ce:	4898      	ldr	r0, [pc, #608]	@ (8001a30 <draw_temperature_graph+0x29c>)
 80017d0:	f005 f834 	bl	800683c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10 + offsetY, (uint8_t *)"Temperature", CENTER_MODE);
 80017d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	330a      	adds	r3, #10
 80017da:	b299      	uxth	r1, r3
 80017dc:	2301      	movs	r3, #1
 80017de:	4a95      	ldr	r2, [pc, #596]	@ (8001a34 <draw_temperature_graph+0x2a0>)
 80017e0:	2000      	movs	r0, #0
 80017e2:	f005 f8b1 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Dessiner les axes
    BSP_LCD_DrawLine(80, 200 + offsetY, 400, 200 + offsetY); // Axe X (horizontal)
 80017e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	33c8      	adds	r3, #200	@ 0xc8
 80017ec:	b299      	uxth	r1, r3
 80017ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	33c8      	adds	r3, #200	@ 0xc8
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80017fa:	2050      	movs	r0, #80	@ 0x50
 80017fc:	f005 fa2c 	bl	8006c58 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(80, 200 + offsetY, 80, 50 + offsetY);   // Axe Y (vertical)
 8001800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001802:	b29b      	uxth	r3, r3
 8001804:	33c8      	adds	r3, #200	@ 0xc8
 8001806:	b299      	uxth	r1, r3
 8001808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800180a:	b29b      	uxth	r3, r3
 800180c:	3332      	adds	r3, #50	@ 0x32
 800180e:	b29b      	uxth	r3, r3
 8001810:	2250      	movs	r2, #80	@ 0x50
 8001812:	2050      	movs	r0, #80	@ 0x50
 8001814:	f005 fa20 	bl	8006c58 <BSP_LCD_DrawLine>

    // Ajouter des noms aux axes
    BSP_LCD_SetFont(&Font16); // Police pour les axes
 8001818:	4885      	ldr	r0, [pc, #532]	@ (8001a30 <draw_temperature_graph+0x29c>)
 800181a:	f005 f80f 	bl	800683c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(190, 210 + offsetY, (uint8_t *)"Time(min)", CENTER_MODE); // Nom de l'axe X
 800181e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001820:	b29b      	uxth	r3, r3
 8001822:	33d2      	adds	r3, #210	@ 0xd2
 8001824:	b299      	uxth	r1, r3
 8001826:	2301      	movs	r3, #1
 8001828:	4a83      	ldr	r2, [pc, #524]	@ (8001a38 <draw_temperature_graph+0x2a4>)
 800182a:	20be      	movs	r0, #190	@ 0xbe
 800182c:	f005 f88c 	bl	8006948 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(25, 30 + offsetY, (uint8_t *)"Temp(C)", LEFT_MODE);           // Nom de l'axe Y
 8001830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001832:	b29b      	uxth	r3, r3
 8001834:	331e      	adds	r3, #30
 8001836:	b299      	uxth	r1, r3
 8001838:	2303      	movs	r3, #3
 800183a:	4a80      	ldr	r2, [pc, #512]	@ (8001a3c <draw_temperature_graph+0x2a8>)
 800183c:	2019      	movs	r0, #25
 800183e:	f005 f883 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Ajouter des graduations sur l'axe Y (température de 0°C à 50°C)
    for (int i = 0; i <= 5; i++) {
 8001842:	2300      	movs	r3, #0
 8001844:	657b      	str	r3, [r7, #84]	@ 0x54
 8001846:	e02a      	b.n	800189e <draw_temperature_graph+0x10a>
        int y = 200 + offsetY - (i * 30); // Espacement uniforme entre graduations (30 px)
 8001848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800184a:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 800184e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001850:	4613      	mov	r3, r2
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	440b      	add	r3, r1
 800185a:	62bb      	str	r3, [r7, #40]	@ 0x28
        char label[10];
        sprintf(label, "%d", i * 10); // Température (0°C à 50°C par pas de 10°C)
 800185c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800185e:	4613      	mov	r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4413      	add	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	461a      	mov	r2, r3
 8001868:	f107 031c 	add.w	r3, r7, #28
 800186c:	4974      	ldr	r1, [pc, #464]	@ (8001a40 <draw_temperature_graph+0x2ac>)
 800186e:	4618      	mov	r0, r3
 8001870:	f013 f882 	bl	8014978 <siprintf>
        BSP_LCD_DisplayStringAt(50, y - 5, (uint8_t *)label, LEFT_MODE);
 8001874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001876:	b29b      	uxth	r3, r3
 8001878:	3b05      	subs	r3, #5
 800187a:	b299      	uxth	r1, r3
 800187c:	f107 021c 	add.w	r2, r7, #28
 8001880:	2303      	movs	r3, #3
 8001882:	2032      	movs	r0, #50	@ 0x32
 8001884:	f005 f860 	bl	8006948 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(75, y, 80, y); // Petite graduation
 8001888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188a:	b299      	uxth	r1, r3
 800188c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800188e:	b29b      	uxth	r3, r3
 8001890:	2250      	movs	r2, #80	@ 0x50
 8001892:	204b      	movs	r0, #75	@ 0x4b
 8001894:	f005 f9e0 	bl	8006c58 <BSP_LCD_DrawLine>
    for (int i = 0; i <= 5; i++) {
 8001898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189a:	3301      	adds	r3, #1
 800189c:	657b      	str	r3, [r7, #84]	@ 0x54
 800189e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	ddd1      	ble.n	8001848 <draw_temperature_graph+0xb4>
    }

    // Ajouter des graduations sur l'axe X (temps)
    for (int i = 0; i < num_points; i++) {
 80018a4:	2300      	movs	r3, #0
 80018a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80018a8:	e02f      	b.n	800190a <draw_temperature_graph+0x176>
        int x = 80 + (i * 30); // Position X des graduations
 80018aa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80018ac:	4613      	mov	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	3350      	adds	r3, #80	@ 0x50
 80018b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        char label[10];
        sprintf(label, "%lu", times[i]); // Afficher le temps en secondes
 80018b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	4413      	add	r3, r2
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	495f      	ldr	r1, [pc, #380]	@ (8001a44 <draw_temperature_graph+0x2b0>)
 80018c8:	4618      	mov	r0, r3
 80018ca:	f013 f855 	bl	8014978 <siprintf>
        BSP_LCD_DisplayStringAt(x - 20, 210 + offsetY, (uint8_t *)label, LEFT_MODE);
 80018ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b14      	subs	r3, #20
 80018d4:	b298      	uxth	r0, r3
 80018d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018d8:	b29b      	uxth	r3, r3
 80018da:	33d2      	adds	r3, #210	@ 0xd2
 80018dc:	b299      	uxth	r1, r3
 80018de:	f107 0210 	add.w	r2, r7, #16
 80018e2:	2303      	movs	r3, #3
 80018e4:	f005 f830 	bl	8006948 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(x, 200 + offsetY, x, 195 + offsetY); // Petite graduation
 80018e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018ea:	b298      	uxth	r0, r3
 80018ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	33c8      	adds	r3, #200	@ 0xc8
 80018f2:	b299      	uxth	r1, r3
 80018f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	33c3      	adds	r3, #195	@ 0xc3
 80018fe:	b29b      	uxth	r3, r3
 8001900:	f005 f9aa 	bl	8006c58 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points; i++) {
 8001904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001906:	3301      	adds	r3, #1
 8001908:	653b      	str	r3, [r7, #80]	@ 0x50
 800190a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	429a      	cmp	r2, r3
 8001910:	dbcb      	blt.n	80018aa <draw_temperature_graph+0x116>
    }

    // Tracer les points et relier par des lignes
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001912:	484d      	ldr	r0, [pc, #308]	@ (8001a48 <draw_temperature_graph+0x2b4>)
 8001914:	f004 ff60 	bl	80067d8 <BSP_LCD_SetTextColor>

    for (int i = 0; i < num_points - 1; i++) {
 8001918:	2300      	movs	r3, #0
 800191a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800191c:	e052      	b.n	80019c4 <draw_temperature_graph+0x230>
        // Coordonnées du point courant
        int x1 = 80 + (i * 30);
 800191e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001920:	4613      	mov	r3, r2
 8001922:	011b      	lsls	r3, r3, #4
 8001924:	1a9b      	subs	r3, r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	3350      	adds	r3, #80	@ 0x50
 800192a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int y1 = 200 + offsetY - ((temps[i] - 0) * 3); // Adapter l'échelle pour la plage 0°C-50°C (3 px par °C)
 800192c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800192e:	33c8      	adds	r3, #200	@ 0xc8
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4413      	add	r3, r2
 8001940:	edd3 7a00 	vldr	s15, [r3]
 8001944:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001948:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800194c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001954:	ee17 3a90 	vmov	r3, s15
 8001958:	63bb      	str	r3, [r7, #56]	@ 0x38

        // Coordonnées du point suivant
        int x2 = 80 + ((i + 1) * 30);
 800195a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	4613      	mov	r3, r2
 8001960:	011b      	lsls	r3, r3, #4
 8001962:	1a9b      	subs	r3, r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	3350      	adds	r3, #80	@ 0x50
 8001968:	637b      	str	r3, [r7, #52]	@ 0x34
        int y2 = 200 + offsetY - ((temps[i + 1] - 0) * 3);
 800196a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800196c:	33c8      	adds	r3, #200	@ 0xc8
 800196e:	ee07 3a90 	vmov	s15, r3
 8001972:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001976:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001978:	3301      	adds	r3, #1
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001988:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800198c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001994:	ee17 3a90 	vmov	r3, s15
 8001998:	633b      	str	r3, [r7, #48]	@ 0x30

        // Tracer le point et la ligne
        BSP_LCD_FillCircle(x1, y1, 2); // Cercle pour le point
 800199a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800199c:	b29b      	uxth	r3, r3
 800199e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019a0:	b291      	uxth	r1, r2
 80019a2:	2202      	movs	r2, #2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f005 fcb3 	bl	8007310 <BSP_LCD_FillCircle>
        BSP_LCD_DrawLine(x1, y1, x2, y2); // Ligne entre les points
 80019aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ac:	b298      	uxth	r0, r3
 80019ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019b0:	b299      	uxth	r1, r3
 80019b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	f005 f94d 	bl	8006c58 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points - 1; i++) {
 80019be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019c0:	3301      	adds	r3, #1
 80019c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dba7      	blt.n	800191e <draw_temperature_graph+0x18a>
    }

    // Dernier point
    int last_x = 80 + ((num_points - 1) * 30);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	1e5a      	subs	r2, r3, #1
 80019d2:	4613      	mov	r3, r2
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	1a9b      	subs	r3, r3, r2
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	3350      	adds	r3, #80	@ 0x50
 80019dc:	647b      	str	r3, [r7, #68]	@ 0x44
    int last_y = 200 + offsetY - ((temps[num_points - 1] - 0) * 3);
 80019de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019e0:	33c8      	adds	r3, #200	@ 0xc8
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001a00:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0c:	ee17 3a90 	vmov	r3, s15
 8001a10:	643b      	str	r3, [r7, #64]	@ 0x40
    BSP_LCD_FillCircle(last_x, last_y, 2); // Point final
 8001a12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a18:	b291      	uxth	r1, r2
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f005 fc77 	bl	8007310 <BSP_LCD_FillCircle>
}
 8001a22:	bf00      	nop
 8001a24:	3758      	adds	r7, #88	@ 0x58
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20003d60 	.word	0x20003d60
 8001a30:	20004f0c 	.word	0x20004f0c
 8001a34:	08016c40 	.word	0x08016c40
 8001a38:	08016d28 	.word	0x08016d28
 8001a3c:	08016d34 	.word	0x08016d34
 8001a40:	08016d3c 	.word	0x08016d3c
 8001a44:	08016d40 	.word	0x08016d40
 8001a48:	ff0000ff 	.word	0xff0000ff

08001a4c <update_temperature_graph>:


void update_temperature_graph(float new_temp, uint32_t current_time) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a56:	6038      	str	r0, [r7, #0]
    // Ajouter la nouvelle température et l'heure au tableau
    if (current_point < MAX_POINTS) {
 8001a58:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <update_temperature_graph+0x98>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b09      	cmp	r3, #9
 8001a5e:	dc12      	bgt.n	8001a86 <update_temperature_graph+0x3a>
        temps[current_point] = new_temp;
 8001a60:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <update_temperature_graph+0x98>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a20      	ldr	r2, [pc, #128]	@ (8001ae8 <update_temperature_graph+0x9c>)
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	601a      	str	r2, [r3, #0]
        times[current_point] = current_time;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae4 <update_temperature_graph+0x98>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	491e      	ldr	r1, [pc, #120]	@ (8001aec <update_temperature_graph+0xa0>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        current_point++;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <update_temperature_graph+0x98>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	4a18      	ldr	r2, [pc, #96]	@ (8001ae4 <update_temperature_graph+0x98>)
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	e022      	b.n	8001acc <update_temperature_graph+0x80>
    } else {
        // Décaler les données vers la gauche pour ajouter le nouveau point
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	e016      	b.n	8001aba <update_temperature_graph+0x6e>
            temps[i] = temps[i + 1];
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <update_temperature_graph+0x9c>)
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4913      	ldr	r1, [pc, #76]	@ (8001ae8 <update_temperature_graph+0x9c>)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	601a      	str	r2, [r3, #0]
            times[i] = times[i + 1];
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	4a11      	ldr	r2, [pc, #68]	@ (8001aec <update_temperature_graph+0xa0>)
 8001aa8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001aac:	490f      	ldr	r1, [pc, #60]	@ (8001aec <update_temperature_graph+0xa0>)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	dde5      	ble.n	8001a8c <update_temperature_graph+0x40>
        }
        temps[MAX_POINTS - 1] = new_temp;
 8001ac0:	4a09      	ldr	r2, [pc, #36]	@ (8001ae8 <update_temperature_graph+0x9c>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6253      	str	r3, [r2, #36]	@ 0x24
        times[MAX_POINTS - 1] = current_time;
 8001ac6:	4a09      	ldr	r2, [pc, #36]	@ (8001aec <update_temperature_graph+0xa0>)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	6253      	str	r3, [r2, #36]	@ 0x24
    }
    draw_temperature_graph(temps, times, current_point);
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <update_temperature_graph+0x98>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4906      	ldr	r1, [pc, #24]	@ (8001aec <update_temperature_graph+0xa0>)
 8001ad4:	4804      	ldr	r0, [pc, #16]	@ (8001ae8 <update_temperature_graph+0x9c>)
 8001ad6:	f7ff fe5d 	bl	8001794 <draw_temperature_graph>

}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20005174 	.word	0x20005174
 8001ae8:	20005124 	.word	0x20005124
 8001aec:	2000514c 	.word	0x2000514c

08001af0 <draw_humidity_graph>:
float humidities[MAX_POINTS];
uint32_t times[MAX_POINTS];



void draw_humidity_graph(float *humidities, uint32_t *times, int num_points) {
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b096      	sub	sp, #88	@ 0x58
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
    int offsetY = 20; // Décalage vers le bas
 8001afc:	2314      	movs	r3, #20
 8001afe:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Effacer l'écran
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f004 fe68 	bl	80067d8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, 480, 275); // Effacer l'écran (fond blanc)
 8001b08:	f240 1313 	movw	r3, #275	@ 0x113
 8001b0c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2000      	movs	r0, #0
 8001b14:	f005 fb82 	bl	800721c <BSP_LCD_FillRect>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001b18:	4aa5      	ldr	r2, [pc, #660]	@ (8001db0 <draw_humidity_graph+0x2c0>)
 8001b1a:	210a      	movs	r1, #10
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f005 facb 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // Couleur des axes
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b22:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001b26:	f004 fe57 	bl	80067d8 <BSP_LCD_SetTextColor>

    // Ajouter un titre
    BSP_LCD_SetFont(&Font16); // Police pour le titre
 8001b2a:	48a2      	ldr	r0, [pc, #648]	@ (8001db4 <draw_humidity_graph+0x2c4>)
 8001b2c:	f004 fe86 	bl	800683c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10 + offsetY, (uint8_t *)"Humidity", CENTER_MODE);
 8001b30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	330a      	adds	r3, #10
 8001b36:	b299      	uxth	r1, r3
 8001b38:	2301      	movs	r3, #1
 8001b3a:	4a9f      	ldr	r2, [pc, #636]	@ (8001db8 <draw_humidity_graph+0x2c8>)
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f004 ff03 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Dessiner les axes
    BSP_LCD_DrawLine(80, 200 + offsetY, 400, 200 + offsetY); // Axe X (horizontal)
 8001b42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	33c8      	adds	r3, #200	@ 0xc8
 8001b48:	b299      	uxth	r1, r3
 8001b4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	33c8      	adds	r3, #200	@ 0xc8
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001b56:	2050      	movs	r0, #80	@ 0x50
 8001b58:	f005 f87e 	bl	8006c58 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(80, 200 + offsetY, 80, 50 + offsetY);   // Axe Y (vertical)
 8001b5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	33c8      	adds	r3, #200	@ 0xc8
 8001b62:	b299      	uxth	r1, r3
 8001b64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3332      	adds	r3, #50	@ 0x32
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	2250      	movs	r2, #80	@ 0x50
 8001b6e:	2050      	movs	r0, #80	@ 0x50
 8001b70:	f005 f872 	bl	8006c58 <BSP_LCD_DrawLine>

    // Ajouter des noms aux axes
    BSP_LCD_SetFont(&Font16); // Police pour les axes
 8001b74:	488f      	ldr	r0, [pc, #572]	@ (8001db4 <draw_humidity_graph+0x2c4>)
 8001b76:	f004 fe61 	bl	800683c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(190, 210 + offsetY, (uint8_t *)"Time(min)", CENTER_MODE); // Nom de l'axe X
 8001b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	33d2      	adds	r3, #210	@ 0xd2
 8001b80:	b299      	uxth	r1, r3
 8001b82:	2301      	movs	r3, #1
 8001b84:	4a8d      	ldr	r2, [pc, #564]	@ (8001dbc <draw_humidity_graph+0x2cc>)
 8001b86:	20be      	movs	r0, #190	@ 0xbe
 8001b88:	f004 fede 	bl	8006948 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(25, 30 + offsetY, (uint8_t *)"Humidity(%)", LEFT_MODE);    // Nom de l'axe Y
 8001b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	331e      	adds	r3, #30
 8001b92:	b299      	uxth	r1, r3
 8001b94:	2303      	movs	r3, #3
 8001b96:	4a8a      	ldr	r2, [pc, #552]	@ (8001dc0 <draw_humidity_graph+0x2d0>)
 8001b98:	2019      	movs	r0, #25
 8001b9a:	f004 fed5 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Ajouter des graduations sur l'axe Y (humidité de 0% à 100%)
    for (int i = 0; i <= 5; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ba2:	e02a      	b.n	8001bfa <draw_humidity_graph+0x10a>
        int y = 200 + offsetY - (i * 30); // Espacement uniforme entre graduations (30 px)
 8001ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ba6:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8001baa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001bac:	4613      	mov	r3, r2
 8001bae:	0112      	lsls	r2, r2, #4
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
        char label[10];
        sprintf(label, "%d", i * 20); // Humidité (0% à 100% par pas de 20%)
 8001bb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	497e      	ldr	r1, [pc, #504]	@ (8001dc4 <draw_humidity_graph+0x2d4>)
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f012 fed4 	bl	8014978 <siprintf>
        BSP_LCD_DisplayStringAt(50, y - 5, (uint8_t *)label, LEFT_MODE);
 8001bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b05      	subs	r3, #5
 8001bd6:	b299      	uxth	r1, r3
 8001bd8:	f107 021c 	add.w	r2, r7, #28
 8001bdc:	2303      	movs	r3, #3
 8001bde:	2032      	movs	r0, #50	@ 0x32
 8001be0:	f004 feb2 	bl	8006948 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(75, y, 80, y); // Petite graduation
 8001be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be6:	b299      	uxth	r1, r3
 8001be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	2250      	movs	r2, #80	@ 0x50
 8001bee:	204b      	movs	r0, #75	@ 0x4b
 8001bf0:	f005 f832 	bl	8006c58 <BSP_LCD_DrawLine>
    for (int i = 0; i <= 5; i++) {
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bfc:	2b05      	cmp	r3, #5
 8001bfe:	ddd1      	ble.n	8001ba4 <draw_humidity_graph+0xb4>
    }

    // Ajouter des graduations sur l'axe X (temps)
    for (int i = 0; i < num_points; i++) {
 8001c00:	2300      	movs	r3, #0
 8001c02:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c04:	e02f      	b.n	8001c66 <draw_humidity_graph+0x176>
		int x = 80 + (i * 30); // Position X des graduations
 8001c06:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c08:	4613      	mov	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	3350      	adds	r3, #80	@ 0x50
 8001c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
		char label[10];
		sprintf(label, "%lu", times[i]); // Afficher le temps en secondes
 8001c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4969      	ldr	r1, [pc, #420]	@ (8001dc8 <draw_humidity_graph+0x2d8>)
 8001c24:	4618      	mov	r0, r3
 8001c26:	f012 fea7 	bl	8014978 <siprintf>
		BSP_LCD_DisplayStringAt(x - 20, 210 + offsetY, (uint8_t *)label, LEFT_MODE);
 8001c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	3b14      	subs	r3, #20
 8001c30:	b298      	uxth	r0, r3
 8001c32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	33d2      	adds	r3, #210	@ 0xd2
 8001c38:	b299      	uxth	r1, r3
 8001c3a:	f107 0210 	add.w	r2, r7, #16
 8001c3e:	2303      	movs	r3, #3
 8001c40:	f004 fe82 	bl	8006948 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DrawLine(x, 200 + offsetY, x, 195 + offsetY); // Petite graduation
 8001c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c46:	b298      	uxth	r0, r3
 8001c48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	33c8      	adds	r3, #200	@ 0xc8
 8001c4e:	b299      	uxth	r1, r3
 8001c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	33c3      	adds	r3, #195	@ 0xc3
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	f004 fffc 	bl	8006c58 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points; i++) {
 8001c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c62:	3301      	adds	r3, #1
 8001c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	dbcb      	blt.n	8001c06 <draw_humidity_graph+0x116>
	}

    // Tracer les points et relier par des lignes
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001c6e:	4857      	ldr	r0, [pc, #348]	@ (8001dcc <draw_humidity_graph+0x2dc>)
 8001c70:	f004 fdb2 	bl	80067d8 <BSP_LCD_SetTextColor>

    for (int i = 0; i < num_points - 1; i++) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c78:	e068      	b.n	8001d4c <draw_humidity_graph+0x25c>
        // Coordonnées du point courant
        int x1 = 80 + (i * 30);
 8001c7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	1a9b      	subs	r3, r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	3350      	adds	r3, #80	@ 0x50
 8001c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int y1 = 200 + offsetY - ((humidities[i] - 0) * 1.5); // Adapter l'échelle pour l'humidité (2 px par %)
 8001c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c8a:	33c8      	adds	r3, #200	@ 0xc8
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fc69 	bl	8000564 <__aeabi_i2d>
 8001c92:	4604      	mov	r4, r0
 8001c94:	460d      	mov	r5, r1
 8001c96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fc71 	bl	8000588 <__aeabi_f2d>
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b49      	ldr	r3, [pc, #292]	@ (8001dd0 <draw_humidity_graph+0x2e0>)
 8001cac:	f7fe fcc4 	bl	8000638 <__aeabi_dmul>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fb06 	bl	80002c8 <__aeabi_dsub>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe ff68 	bl	8000b98 <__aeabi_d2iz>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	63bb      	str	r3, [r7, #56]	@ 0x38

        // Coordonnées du point suivant
        int x2 = 80 + ((i + 1) * 30);
 8001ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cce:	1c5a      	adds	r2, r3, #1
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	011b      	lsls	r3, r3, #4
 8001cd4:	1a9b      	subs	r3, r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	3350      	adds	r3, #80	@ 0x50
 8001cda:	637b      	str	r3, [r7, #52]	@ 0x34
        int y2 = 200 + offsetY - ((humidities[i + 1] - 0) * 1.5);
 8001cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cde:	33c8      	adds	r3, #200	@ 0xc8
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc3f 	bl	8000564 <__aeabi_i2d>
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	460d      	mov	r5, r1
 8001cea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cec:	3301      	adds	r3, #1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc46 	bl	8000588 <__aeabi_f2d>
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b33      	ldr	r3, [pc, #204]	@ (8001dd0 <draw_humidity_graph+0x2e0>)
 8001d02:	f7fe fc99 	bl	8000638 <__aeabi_dmul>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	f7fe fadb 	bl	80002c8 <__aeabi_dsub>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4610      	mov	r0, r2
 8001d18:	4619      	mov	r1, r3
 8001d1a:	f7fe ff3d 	bl	8000b98 <__aeabi_d2iz>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	633b      	str	r3, [r7, #48]	@ 0x30

        // Tracer le point et la ligne
        BSP_LCD_FillCircle(x1, y1, 2); // Cercle pour le point
 8001d22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d28:	b291      	uxth	r1, r2
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f005 faef 	bl	8007310 <BSP_LCD_FillCircle>
        BSP_LCD_DrawLine(x1, y1, x2, y2); // Ligne entre les points
 8001d32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d34:	b298      	uxth	r0, r3
 8001d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d38:	b299      	uxth	r1, r3
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f004 ff89 	bl	8006c58 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points - 1; i++) {
 8001d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d48:	3301      	adds	r3, #1
 8001d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d52:	429a      	cmp	r2, r3
 8001d54:	db91      	blt.n	8001c7a <draw_humidity_graph+0x18a>
    }

    // Dernier point
    int last_x = 80 + ((num_points - 1) * 30);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	1e5a      	subs	r2, r3, #1
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	3350      	adds	r3, #80	@ 0x50
 8001d64:	647b      	str	r3, [r7, #68]	@ 0x44
    int last_y = 200 + offsetY - ((humidities[num_points - 1] - 0) * 2);
 8001d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d68:	33c8      	adds	r3, #200	@ 0xc8
 8001d6a:	ee07 3a90 	vmov	s15, r3
 8001d6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4413      	add	r3, r2
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d90:	ee17 3a90 	vmov	r3, s15
 8001d94:	643b      	str	r3, [r7, #64]	@ 0x40
    BSP_LCD_FillCircle(last_x, last_y, 2); // Point final
 8001d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d9c:	b291      	uxth	r1, r2
 8001d9e:	2202      	movs	r2, #2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 fab5 	bl	8007310 <BSP_LCD_FillCircle>
}
 8001da6:	bf00      	nop
 8001da8:	3758      	adds	r7, #88	@ 0x58
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bdb0      	pop	{r4, r5, r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20003d60 	.word	0x20003d60
 8001db4:	20004f0c 	.word	0x20004f0c
 8001db8:	08016d44 	.word	0x08016d44
 8001dbc:	08016d28 	.word	0x08016d28
 8001dc0:	08016d50 	.word	0x08016d50
 8001dc4:	08016d3c 	.word	0x08016d3c
 8001dc8:	08016d40 	.word	0x08016d40
 8001dcc:	ff0000ff 	.word	0xff0000ff
 8001dd0:	3ff80000 	.word	0x3ff80000

08001dd4 <update_humidity_graph>:


void update_humidity_graph(float humidity, uint32_t current_time) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	ed87 0a01 	vstr	s0, [r7, #4]
 8001dde:	6038      	str	r0, [r7, #0]
    // Ajouter la nouvelle humidité et l'heure dans le tableau
    if (current_point < MAX_POINTS) {
 8001de0:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <update_humidity_graph+0x98>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	dc12      	bgt.n	8001e0e <update_humidity_graph+0x3a>
        humidities[current_point] = humidity;
 8001de8:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <update_humidity_graph+0x98>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a20      	ldr	r2, [pc, #128]	@ (8001e70 <update_humidity_graph+0x9c>)
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	4413      	add	r3, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	601a      	str	r2, [r3, #0]
        times[current_point] = current_time;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <update_humidity_graph+0x98>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	491e      	ldr	r1, [pc, #120]	@ (8001e74 <update_humidity_graph+0xa0>)
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        current_point++;
 8001e02:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <update_humidity_graph+0x98>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	3301      	adds	r3, #1
 8001e08:	4a18      	ldr	r2, [pc, #96]	@ (8001e6c <update_humidity_graph+0x98>)
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	e022      	b.n	8001e54 <update_humidity_graph+0x80>
    } else {
        // Déplacer tous les points pour faire de la place au nouveau point
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e016      	b.n	8001e42 <update_humidity_graph+0x6e>
            humidities[i] = humidities[i + 1];
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	3301      	adds	r3, #1
 8001e18:	4a15      	ldr	r2, [pc, #84]	@ (8001e70 <update_humidity_graph+0x9c>)
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4913      	ldr	r1, [pc, #76]	@ (8001e70 <update_humidity_graph+0x9c>)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	601a      	str	r2, [r3, #0]
            times[i] = times[i + 1];
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	4a11      	ldr	r2, [pc, #68]	@ (8001e74 <update_humidity_graph+0xa0>)
 8001e30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e34:	490f      	ldr	r1, [pc, #60]	@ (8001e74 <update_humidity_graph+0xa0>)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	dde5      	ble.n	8001e14 <update_humidity_graph+0x40>
        }
        humidities[MAX_POINTS - 1] = humidity;
 8001e48:	4a09      	ldr	r2, [pc, #36]	@ (8001e70 <update_humidity_graph+0x9c>)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6253      	str	r3, [r2, #36]	@ 0x24
        times[MAX_POINTS - 1] = current_time;
 8001e4e:	4a09      	ldr	r2, [pc, #36]	@ (8001e74 <update_humidity_graph+0xa0>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    // Redessiner le graphique avec les nouvelles données
    draw_humidity_graph(humidities, times, current_point);
 8001e54:	4b05      	ldr	r3, [pc, #20]	@ (8001e6c <update_humidity_graph+0x98>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4906      	ldr	r1, [pc, #24]	@ (8001e74 <update_humidity_graph+0xa0>)
 8001e5c:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <update_humidity_graph+0x9c>)
 8001e5e:	f7ff fe47 	bl	8001af0 <draw_humidity_graph>
}
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20005174 	.word	0x20005174
 8001e70:	20005178 	.word	0x20005178
 8001e74:	2000514c 	.word	0x2000514c

08001e78 <draw_pressure_graph>:

#define MAX_POINTS 10
float pressures[MAX_POINTS];
uint32_t times[MAX_POINTS];

void draw_pressure_graph(float *pressures, uint32_t *times, int num_points) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b096      	sub	sp, #88	@ 0x58
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
    int offsetY = 20; // Décalage vers le bas
 8001e84:	2314      	movs	r3, #20
 8001e86:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Effacer l'écran
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001e88:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8c:	f004 fca4 	bl	80067d8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, 480, 275); // Effacer l'écran (fond blanc)
 8001e90:	f240 1313 	movw	r3, #275	@ 0x113
 8001e94:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f005 f9be 	bl	800721c <BSP_LCD_FillRect>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001ea0:	4a57      	ldr	r2, [pc, #348]	@ (8002000 <draw_pressure_graph+0x188>)
 8001ea2:	210a      	movs	r1, #10
 8001ea4:	200a      	movs	r0, #10
 8001ea6:	f005 f907 	bl	80070b8 <BSP_LCD_DrawBitmap>

    // Couleur des axes
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001eaa:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001eae:	f004 fc93 	bl	80067d8 <BSP_LCD_SetTextColor>

    // Ajouter un titre
    BSP_LCD_SetFont(&Font16); // Police pour le titre
 8001eb2:	4854      	ldr	r0, [pc, #336]	@ (8002004 <draw_pressure_graph+0x18c>)
 8001eb4:	f004 fcc2 	bl	800683c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10 + offsetY, (uint8_t *)"Pressure", CENTER_MODE);
 8001eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	330a      	adds	r3, #10
 8001ebe:	b299      	uxth	r1, r3
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	4a51      	ldr	r2, [pc, #324]	@ (8002008 <draw_pressure_graph+0x190>)
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f004 fd3f 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Dessiner les axes
    BSP_LCD_DrawLine(80, 200 + offsetY, 400, 200 + offsetY); // Axe X (horizontal)
 8001eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	33c8      	adds	r3, #200	@ 0xc8
 8001ed0:	b299      	uxth	r1, r3
 8001ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	33c8      	adds	r3, #200	@ 0xc8
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001ede:	2050      	movs	r0, #80	@ 0x50
 8001ee0:	f004 feba 	bl	8006c58 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(80, 200 + offsetY, 80, 50 + offsetY);   // Axe Y (vertical)
 8001ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	33c8      	adds	r3, #200	@ 0xc8
 8001eea:	b299      	uxth	r1, r3
 8001eec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	3332      	adds	r3, #50	@ 0x32
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2250      	movs	r2, #80	@ 0x50
 8001ef6:	2050      	movs	r0, #80	@ 0x50
 8001ef8:	f004 feae 	bl	8006c58 <BSP_LCD_DrawLine>

    // Ajouter des noms aux axes
    BSP_LCD_SetFont(&Font16); // Police pour les axes
 8001efc:	4841      	ldr	r0, [pc, #260]	@ (8002004 <draw_pressure_graph+0x18c>)
 8001efe:	f004 fc9d 	bl	800683c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(190, 210 + offsetY, (uint8_t *)"Time(sec)", CENTER_MODE); // Nom de l'axe X
 8001f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	33d2      	adds	r3, #210	@ 0xd2
 8001f08:	b299      	uxth	r1, r3
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	4a3f      	ldr	r2, [pc, #252]	@ (800200c <draw_pressure_graph+0x194>)
 8001f0e:	20be      	movs	r0, #190	@ 0xbe
 8001f10:	f004 fd1a 	bl	8006948 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(25, 30 + offsetY, (uint8_t *)"Pressure(hPa)", LEFT_MODE); // Nom de l'axe Y
 8001f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	331e      	adds	r3, #30
 8001f1a:	b299      	uxth	r1, r3
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	4a3c      	ldr	r2, [pc, #240]	@ (8002010 <draw_pressure_graph+0x198>)
 8001f20:	2019      	movs	r0, #25
 8001f22:	f004 fd11 	bl	8006948 <BSP_LCD_DisplayStringAt>

    // Ajouter des graduations sur l'axe Y (pression de 0 à 1200 hPa)
    for (int i = 0; i <= 6; i++) {
 8001f26:	2300      	movs	r3, #0
 8001f28:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f2a:	e028      	b.n	8001f7e <draw_pressure_graph+0x106>
        int y = 200 + offsetY - (i * 25); // Espacement uniforme entre graduations (25 px)
 8001f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f2e:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8001f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f34:	f06f 0118 	mvn.w	r1, #24
 8001f38:	fb01 f303 	mul.w	r3, r1, r3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
        char label[10];
        sprintf(label, "%d", i * 200); // Pression (0 à 1200 hPa par pas de 200 hPa)
 8001f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f42:	22c8      	movs	r2, #200	@ 0xc8
 8001f44:	fb03 f202 	mul.w	r2, r3, r2
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4931      	ldr	r1, [pc, #196]	@ (8002014 <draw_pressure_graph+0x19c>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f012 fd12 	bl	8014978 <siprintf>
        BSP_LCD_DisplayStringAt(50, y - 5, (uint8_t *)label, LEFT_MODE);
 8001f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b05      	subs	r3, #5
 8001f5a:	b299      	uxth	r1, r3
 8001f5c:	f107 021c 	add.w	r2, r7, #28
 8001f60:	2303      	movs	r3, #3
 8001f62:	2032      	movs	r0, #50	@ 0x32
 8001f64:	f004 fcf0 	bl	8006948 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(75, y, 80, y); // Petite graduation
 8001f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6a:	b299      	uxth	r1, r3
 8001f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2250      	movs	r2, #80	@ 0x50
 8001f72:	204b      	movs	r0, #75	@ 0x4b
 8001f74:	f004 fe70 	bl	8006c58 <BSP_LCD_DrawLine>
    for (int i = 0; i <= 6; i++) {
 8001f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f80:	2b06      	cmp	r3, #6
 8001f82:	ddd3      	ble.n	8001f2c <draw_pressure_graph+0xb4>
    }

    // Ajouter des graduations sur l'axe X (temps)
    for (int i = 0; i < num_points; i++) {
 8001f84:	2300      	movs	r3, #0
 8001f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f88:	e02f      	b.n	8001fea <draw_pressure_graph+0x172>
        int x = 80 + (i * 30); // Position X des graduations
 8001f8a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	1a9b      	subs	r3, r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	3350      	adds	r3, #80	@ 0x50
 8001f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        char label[10];
        sprintf(label, "%lu", times[i]); // Afficher le temps en secondes
 8001f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	f107 0310 	add.w	r3, r7, #16
 8001fa6:	491c      	ldr	r1, [pc, #112]	@ (8002018 <draw_pressure_graph+0x1a0>)
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f012 fce5 	bl	8014978 <siprintf>
        BSP_LCD_DisplayStringAt(x - 20, 210 + offsetY, (uint8_t *)label, LEFT_MODE);
 8001fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	3b14      	subs	r3, #20
 8001fb4:	b298      	uxth	r0, r3
 8001fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	33d2      	adds	r3, #210	@ 0xd2
 8001fbc:	b299      	uxth	r1, r3
 8001fbe:	f107 0210 	add.w	r2, r7, #16
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	f004 fcc0 	bl	8006948 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(x, 200 + offsetY, x, 195 + offsetY); // Petite graduation
 8001fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fca:	b298      	uxth	r0, r3
 8001fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	33c8      	adds	r3, #200	@ 0xc8
 8001fd2:	b299      	uxth	r1, r3
 8001fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	33c3      	adds	r3, #195	@ 0xc3
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f004 fe3a 	bl	8006c58 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points; i++) {
 8001fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbcb      	blt.n	8001f8a <draw_pressure_graph+0x112>
    }

    // Tracer les points et relier par des lignes
    BSP_LCD_SetTextColor(LCD_COLOR_RED); // Utilisation d'une couleur rouge pour le graphique de pression
 8001ff2:	480a      	ldr	r0, [pc, #40]	@ (800201c <draw_pressure_graph+0x1a4>)
 8001ff4:	f004 fbf0 	bl	80067d8 <BSP_LCD_SetTextColor>

    // Ajuster l'échelle de la pression pour l'affichage (0 à 1200 hPa)
    for (int i = 0; i < num_points - 1; i++) {
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ffc:	e08f      	b.n	800211e <draw_pressure_graph+0x2a6>
 8001ffe:	bf00      	nop
 8002000:	20003d60 	.word	0x20003d60
 8002004:	20004f0c 	.word	0x20004f0c
 8002008:	08016d5c 	.word	0x08016d5c
 800200c:	08016d68 	.word	0x08016d68
 8002010:	08016d74 	.word	0x08016d74
 8002014:	08016d3c 	.word	0x08016d3c
 8002018:	08016d40 	.word	0x08016d40
 800201c:	ffff0000 	.word	0xffff0000
 8002020:	43160000 	.word	0x43160000
 8002024:	44960000 	.word	0x44960000
        // Coordonnées du point courant
        int x1 = 80 + (i * 30);
 8002028:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800202a:	4613      	mov	r3, r2
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	1a9b      	subs	r3, r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	3350      	adds	r3, #80	@ 0x50
 8002034:	637b      	str	r3, [r7, #52]	@ 0x34
        int y1 = 200 + offsetY - (pressures[i] * 150 / 1200); // Calcul de l'échelle pour la pression
 8002036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002038:	33c8      	adds	r3, #200	@ 0xc8
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4413      	add	r3, r2
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ed5f 6a0c 	vldr	s13, [pc, #-48]	@ 8002020 <draw_pressure_graph+0x1a8>
 8002052:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002056:	ed1f 6a0d 	vldr	s12, [pc, #-52]	@ 8002024 <draw_pressure_graph+0x1ac>
 800205a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800205e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002066:	ee17 3a90 	vmov	r3, s15
 800206a:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Vérification des coordonnées y1
        if (y1 < 50 + offsetY) y1 = 50 + offsetY; // Limiter à l'axe Y bas
 800206c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800206e:	3331      	adds	r3, #49	@ 0x31
 8002070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002072:	429a      	cmp	r2, r3
 8002074:	dc02      	bgt.n	800207c <draw_pressure_graph+0x204>
 8002076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002078:	3332      	adds	r3, #50	@ 0x32
 800207a:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (y1 > 200 + offsetY) y1 = 200 + offsetY; // Limiter à l'axe Y haut
 800207c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800207e:	33c8      	adds	r3, #200	@ 0xc8
 8002080:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002082:	429a      	cmp	r2, r3
 8002084:	dd02      	ble.n	800208c <draw_pressure_graph+0x214>
 8002086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002088:	33c8      	adds	r3, #200	@ 0xc8
 800208a:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Coordonnées du point suivant
        int x2 = 80 + ((i + 1) * 30);
 800208c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	3350      	adds	r3, #80	@ 0x50
 800209a:	633b      	str	r3, [r7, #48]	@ 0x30
        int y2 = 200 + offsetY - (pressures[i + 1] * 150 / 1200);
 800209c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800209e:	33c8      	adds	r3, #200	@ 0xc8
 80020a0:	ee07 3a90 	vmov	s15, r3
 80020a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020aa:	3301      	adds	r3, #1
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	4413      	add	r3, r2
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ed5f 6a26 	vldr	s13, [pc, #-152]	@ 8002020 <draw_pressure_graph+0x1a8>
 80020ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020be:	ed1f 6a27 	vldr	s12, [pc, #-156]	@ 8002024 <draw_pressure_graph+0x1ac>
 80020c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ce:	ee17 3a90 	vmov	r3, s15
 80020d2:	647b      	str	r3, [r7, #68]	@ 0x44

        // Vérification des coordonnées y2
        if (y2 < 50 + offsetY) y2 = 50 + offsetY; // Limiter à l'axe Y bas
 80020d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020d6:	3331      	adds	r3, #49	@ 0x31
 80020d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020da:	429a      	cmp	r2, r3
 80020dc:	dc02      	bgt.n	80020e4 <draw_pressure_graph+0x26c>
 80020de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020e0:	3332      	adds	r3, #50	@ 0x32
 80020e2:	647b      	str	r3, [r7, #68]	@ 0x44
        if (y2 > 200 + offsetY) y2 = 200 + offsetY; // Limiter à l'axe Y haut
 80020e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020e6:	33c8      	adds	r3, #200	@ 0xc8
 80020e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020ea:	429a      	cmp	r2, r3
 80020ec:	dd02      	ble.n	80020f4 <draw_pressure_graph+0x27c>
 80020ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020f0:	33c8      	adds	r3, #200	@ 0xc8
 80020f2:	647b      	str	r3, [r7, #68]	@ 0x44

        // Tracer le point et la ligne
        BSP_LCD_FillCircle(x1, y1, 2); // Cercle pour le point
 80020f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020fa:	b291      	uxth	r1, r2
 80020fc:	2202      	movs	r2, #2
 80020fe:	4618      	mov	r0, r3
 8002100:	f005 f906 	bl	8007310 <BSP_LCD_FillCircle>
        BSP_LCD_DrawLine(x1, y1, x2, y2); // Ligne entre les points
 8002104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002106:	b298      	uxth	r0, r3
 8002108:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800210a:	b299      	uxth	r1, r3
 800210c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800210e:	b29a      	uxth	r2, r3
 8002110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002112:	b29b      	uxth	r3, r3
 8002114:	f004 fda0 	bl	8006c58 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points - 1; i++) {
 8002118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800211a:	3301      	adds	r3, #1
 800211c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3b01      	subs	r3, #1
 8002122:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002124:	429a      	cmp	r2, r3
 8002126:	f6ff af7f 	blt.w	8002028 <draw_pressure_graph+0x1b0>
    }

    // Dernier point
    int last_x = 80 + ((num_points - 1) * 30);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	1e5a      	subs	r2, r3, #1
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	3350      	adds	r3, #80	@ 0x50
 8002138:	63bb      	str	r3, [r7, #56]	@ 0x38
    int last_y = 200 + offsetY - (pressures[num_points - 1] * 150 / 1200);
 800213a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800213c:	33c8      	adds	r3, #200	@ 0xc8
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	ed5f 6a4f 	vldr	s13, [pc, #-316]	@ 8002020 <draw_pressure_graph+0x1a8>
 800215c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002160:	ed1f 6a50 	vldr	s12, [pc, #-320]	@ 8002024 <draw_pressure_graph+0x1ac>
 8002164:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002170:	ee17 3a90 	vmov	r3, s15
 8002174:	643b      	str	r3, [r7, #64]	@ 0x40

    // Vérification de la position du dernier point
    if (last_y < 50 + offsetY) last_y = 50 + offsetY;
 8002176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002178:	3331      	adds	r3, #49	@ 0x31
 800217a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800217c:	429a      	cmp	r2, r3
 800217e:	dc02      	bgt.n	8002186 <draw_pressure_graph+0x30e>
 8002180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002182:	3332      	adds	r3, #50	@ 0x32
 8002184:	643b      	str	r3, [r7, #64]	@ 0x40
    if (last_y > 200 + offsetY) last_y = 200 + offsetY;
 8002186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002188:	33c8      	adds	r3, #200	@ 0xc8
 800218a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800218c:	429a      	cmp	r2, r3
 800218e:	dd02      	ble.n	8002196 <draw_pressure_graph+0x31e>
 8002190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002192:	33c8      	adds	r3, #200	@ 0xc8
 8002194:	643b      	str	r3, [r7, #64]	@ 0x40

    BSP_LCD_FillCircle(last_x, last_y, 2); // Point final
 8002196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002198:	b29b      	uxth	r3, r3
 800219a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800219c:	b291      	uxth	r1, r2
 800219e:	2202      	movs	r2, #2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f005 f8b5 	bl	8007310 <BSP_LCD_FillCircle>
}
 80021a6:	bf00      	nop
 80021a8:	3758      	adds	r7, #88	@ 0x58
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop

080021b0 <update_pressure_graph>:


void update_pressure_graph(float pressure, uint32_t current_time) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80021ba:	6038      	str	r0, [r7, #0]
    // Ajouter la nouvelle pression et l'heure dans le tableau
    if (current_point < MAX_POINTS) {
 80021bc:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <update_pressure_graph+0x98>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	dc12      	bgt.n	80021ea <update_pressure_graph+0x3a>
        pressures[current_point] = pressure;
 80021c4:	4b20      	ldr	r3, [pc, #128]	@ (8002248 <update_pressure_graph+0x98>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a20      	ldr	r2, [pc, #128]	@ (800224c <update_pressure_graph+0x9c>)
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	4413      	add	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	601a      	str	r2, [r3, #0]
        times[current_point] = current_time;
 80021d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002248 <update_pressure_graph+0x98>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	491e      	ldr	r1, [pc, #120]	@ (8002250 <update_pressure_graph+0xa0>)
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        current_point++;
 80021de:	4b1a      	ldr	r3, [pc, #104]	@ (8002248 <update_pressure_graph+0x98>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	4a18      	ldr	r2, [pc, #96]	@ (8002248 <update_pressure_graph+0x98>)
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e022      	b.n	8002230 <update_pressure_graph+0x80>
    } else {
        // Déplacer tous les points pour faire de la place au nouveau point
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 80021ea:	2300      	movs	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	e016      	b.n	800221e <update_pressure_graph+0x6e>
            pressures[i] = pressures[i + 1];
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3301      	adds	r3, #1
 80021f4:	4a15      	ldr	r2, [pc, #84]	@ (800224c <update_pressure_graph+0x9c>)
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4913      	ldr	r1, [pc, #76]	@ (800224c <update_pressure_graph+0x9c>)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	601a      	str	r2, [r3, #0]
            times[i] = times[i + 1];
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3301      	adds	r3, #1
 800220a:	4a11      	ldr	r2, [pc, #68]	@ (8002250 <update_pressure_graph+0xa0>)
 800220c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002210:	490f      	ldr	r1, [pc, #60]	@ (8002250 <update_pressure_graph+0xa0>)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3301      	adds	r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b08      	cmp	r3, #8
 8002222:	dde5      	ble.n	80021f0 <update_pressure_graph+0x40>
        }
        pressures[MAX_POINTS - 1] = pressure;
 8002224:	4a09      	ldr	r2, [pc, #36]	@ (800224c <update_pressure_graph+0x9c>)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6253      	str	r3, [r2, #36]	@ 0x24
        times[MAX_POINTS - 1] = current_time;
 800222a:	4a09      	ldr	r2, [pc, #36]	@ (8002250 <update_pressure_graph+0xa0>)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    // Redessiner le graphique avec les nouvelles données
    draw_pressure_graph(pressures, times, current_point);
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <update_pressure_graph+0x98>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	461a      	mov	r2, r3
 8002236:	4906      	ldr	r1, [pc, #24]	@ (8002250 <update_pressure_graph+0xa0>)
 8002238:	4804      	ldr	r0, [pc, #16]	@ (800224c <update_pressure_graph+0x9c>)
 800223a:	f7ff fe1d 	bl	8001e78 <draw_pressure_graph>
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20005174 	.word	0x20005174
 800224c:	200051a0 	.word	0x200051a0
 8002250:	2000514c 	.word	0x2000514c

08002254 <linear_interpolation>:
static int32_t platform_write_hts221(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len);
static int32_t platform_read_hts221(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len);
static void platform_delay_hts221(uint32_t ms);

float linear_interpolation(lin_t *lin, int16_t x)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	807b      	strh	r3, [r7, #2]
return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	ed93 7a03 	vldr	s14, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	edd3 7a01 	vldr	s15, [r3, #4]
 800226c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002270:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800227c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	edd3 6a02 	vldr	s13, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	edd3 7a01 	vldr	s15, [r3, #4]
 800228c:	ee66 6aa7 	vmul.f32	s13, s13, s15
								   (lin->x0 * lin->y1)))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	ed93 6a00 	vldr	s12, [r3]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	edd3 7a03 	vldr	s15, [r3, #12]
 800229c:	ee66 7a27 	vmul.f32	s15, s12, s15
return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 80022a0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022a4:	ee37 7a27 	vadd.f32	s14, s14, s15
	   / (lin->x1 - lin->x0);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022bc:	eef0 7a66 	vmov.f32	s15, s13
}
 80022c0:	eeb0 0a67 	vmov.f32	s0, s15
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <init_HumTemp>:


void init_HumTemp(void) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
    dev_ctx1.write_reg = platform_write_hts221;
 80022d4:	4b23      	ldr	r3, [pc, #140]	@ (8002364 <init_HumTemp+0x94>)
 80022d6:	4a24      	ldr	r2, [pc, #144]	@ (8002368 <init_HumTemp+0x98>)
 80022d8:	601a      	str	r2, [r3, #0]
    dev_ctx1.read_reg = platform_read_hts221;
 80022da:	4b22      	ldr	r3, [pc, #136]	@ (8002364 <init_HumTemp+0x94>)
 80022dc:	4a23      	ldr	r2, [pc, #140]	@ (800236c <init_HumTemp+0x9c>)
 80022de:	605a      	str	r2, [r3, #4]
    dev_ctx1.mdelay = platform_delay_hts221;
 80022e0:	4b20      	ldr	r3, [pc, #128]	@ (8002364 <init_HumTemp+0x94>)
 80022e2:	4a23      	ldr	r2, [pc, #140]	@ (8002370 <init_HumTemp+0xa0>)
 80022e4:	609a      	str	r2, [r3, #8]
    dev_ctx1.handle = &SENSOR_BUS;
 80022e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002364 <init_HumTemp+0x94>)
 80022e8:	4a22      	ldr	r2, [pc, #136]	@ (8002374 <init_HumTemp+0xa4>)
 80022ea:	60da      	str	r2, [r3, #12]

    whoamI = 0;
 80022ec:	4b22      	ldr	r3, [pc, #136]	@ (8002378 <init_HumTemp+0xa8>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
    hts221_device_id_get(&dev_ctx1, &whoamI);
 80022f2:	4921      	ldr	r1, [pc, #132]	@ (8002378 <init_HumTemp+0xa8>)
 80022f4:	481b      	ldr	r0, [pc, #108]	@ (8002364 <init_HumTemp+0x94>)
 80022f6:	f00e fcc3 	bl	8010c80 <hts221_device_id_get>

    if ( whoamI != HTS221_ID )
 80022fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002378 <init_HumTemp+0xa8>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2bbc      	cmp	r3, #188	@ 0xbc
 8002300:	d001      	beq.n	8002306 <init_HumTemp+0x36>
       while (1);
 8002302:	bf00      	nop
 8002304:	e7fd      	b.n	8002302 <init_HumTemp+0x32>

    hts221_hum_adc_point_0_get(&dev_ctx1, &lin_hum.x0);
 8002306:	491d      	ldr	r1, [pc, #116]	@ (800237c <init_HumTemp+0xac>)
 8002308:	4816      	ldr	r0, [pc, #88]	@ (8002364 <init_HumTemp+0x94>)
 800230a:	f00e fd9f 	bl	8010e4c <hts221_hum_adc_point_0_get>
    hts221_hum_rh_point_0_get(&dev_ctx1, &lin_hum.y0);
 800230e:	491c      	ldr	r1, [pc, #112]	@ (8002380 <init_HumTemp+0xb0>)
 8002310:	4814      	ldr	r0, [pc, #80]	@ (8002364 <init_HumTemp+0x94>)
 8002312:	f00e fcfd 	bl	8010d10 <hts221_hum_rh_point_0_get>
    hts221_hum_adc_point_1_get(&dev_ctx1, &lin_hum.x1);
 8002316:	491b      	ldr	r1, [pc, #108]	@ (8002384 <init_HumTemp+0xb4>)
 8002318:	4812      	ldr	r0, [pc, #72]	@ (8002364 <init_HumTemp+0x94>)
 800231a:	f00e fdb9 	bl	8010e90 <hts221_hum_adc_point_1_get>
    hts221_hum_rh_point_1_get(&dev_ctx1, &lin_hum.y1);
 800231e:	491a      	ldr	r1, [pc, #104]	@ (8002388 <init_HumTemp+0xb8>)
 8002320:	4810      	ldr	r0, [pc, #64]	@ (8002364 <init_HumTemp+0x94>)
 8002322:	f00e fd13 	bl	8010d4c <hts221_hum_rh_point_1_get>

    hts221_temp_adc_point_0_get(&dev_ctx1, &lin_temp.x0);
 8002326:	4919      	ldr	r1, [pc, #100]	@ (800238c <init_HumTemp+0xbc>)
 8002328:	480e      	ldr	r0, [pc, #56]	@ (8002364 <init_HumTemp+0x94>)
 800232a:	f00e fdd3 	bl	8010ed4 <hts221_temp_adc_point_0_get>
    hts221_temp_deg_point_0_get(&dev_ctx1, &lin_temp.y0);
 800232e:	4918      	ldr	r1, [pc, #96]	@ (8002390 <init_HumTemp+0xc0>)
 8002330:	480c      	ldr	r0, [pc, #48]	@ (8002364 <init_HumTemp+0x94>)
 8002332:	f00e fd29 	bl	8010d88 <hts221_temp_deg_point_0_get>
    hts221_temp_adc_point_1_get(&dev_ctx1, &lin_temp.x1);
 8002336:	4917      	ldr	r1, [pc, #92]	@ (8002394 <init_HumTemp+0xc4>)
 8002338:	480a      	ldr	r0, [pc, #40]	@ (8002364 <init_HumTemp+0x94>)
 800233a:	f00e fded 	bl	8010f18 <hts221_temp_adc_point_1_get>
    hts221_temp_deg_point_1_get(&dev_ctx1, &lin_temp.y1);
 800233e:	4916      	ldr	r1, [pc, #88]	@ (8002398 <init_HumTemp+0xc8>)
 8002340:	4808      	ldr	r0, [pc, #32]	@ (8002364 <init_HumTemp+0x94>)
 8002342:	f00e fd52 	bl	8010dea <hts221_temp_deg_point_1_get>

    hts221_block_data_update_set(&dev_ctx1, PROPERTY_ENABLE);
 8002346:	2101      	movs	r1, #1
 8002348:	4806      	ldr	r0, [pc, #24]	@ (8002364 <init_HumTemp+0x94>)
 800234a:	f00e fc2f 	bl	8010bac <hts221_block_data_update_set>
    hts221_data_rate_set(&dev_ctx1, HTS221_ODR_1Hz);
 800234e:	2101      	movs	r1, #1
 8002350:	4804      	ldr	r0, [pc, #16]	@ (8002364 <init_HumTemp+0x94>)
 8002352:	f00e fc05 	bl	8010b60 <hts221_data_rate_set>
    hts221_power_on_set(&dev_ctx1, PROPERTY_ENABLE);
 8002356:	2101      	movs	r1, #1
 8002358:	4802      	ldr	r0, [pc, #8]	@ (8002364 <init_HumTemp+0x94>)
 800235a:	f00e fca2 	bl	8010ca2 <hts221_power_on_set>

}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200055c0 	.word	0x200055c0
 8002368:	08002605 	.word	0x08002605
 800236c:	08002647 	.word	0x08002647
 8002370:	08002689 	.word	0x08002689
 8002374:	20005d10 	.word	0x20005d10
 8002378:	200051d4 	.word	0x200051d4
 800237c:	200055d0 	.word	0x200055d0
 8002380:	200055d4 	.word	0x200055d4
 8002384:	200055d8 	.word	0x200055d8
 8002388:	200055dc 	.word	0x200055dc
 800238c:	200055e0 	.word	0x200055e0
 8002390:	200055e4 	.word	0x200055e4
 8002394:	200055e8 	.word	0x200055e8
 8002398:	200055ec 	.word	0x200055ec

0800239c <valeur_Hum>:


void valeur_Hum(void) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af02      	add	r7, sp, #8
	hts221_reg_t reg1;
	hts221_status_get(&dev_ctx1, &reg1.status_reg);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	482d      	ldr	r0, [pc, #180]	@ (800245c <valeur_Hum+0xc0>)
 80023a8:	f00e fca1 	bl	8010cee <hts221_status_get>
    if (reg1.status_reg.h_da) {
 80023ac:	793b      	ldrb	r3, [r7, #4]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d04d      	beq.n	8002454 <valeur_Hum+0xb8>
        memset(&data_raw_humidity, 0x00, sizeof(int16_t));
 80023b8:	4b29      	ldr	r3, [pc, #164]	@ (8002460 <valeur_Hum+0xc4>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	801a      	strh	r2, [r3, #0]
        hts221_humidity_raw_get(&dev_ctx1, &data_raw_humidity);
 80023be:	4928      	ldr	r1, [pc, #160]	@ (8002460 <valeur_Hum+0xc4>)
 80023c0:	4826      	ldr	r0, [pc, #152]	@ (800245c <valeur_Hum+0xc0>)
 80023c2:	f00e fc19 	bl	8010bf8 <hts221_humidity_raw_get>
        humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 80023c6:	4b26      	ldr	r3, [pc, #152]	@ (8002460 <valeur_Hum+0xc4>)
 80023c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023cc:	4619      	mov	r1, r3
 80023ce:	4825      	ldr	r0, [pc, #148]	@ (8002464 <valeur_Hum+0xc8>)
 80023d0:	f7ff ff40 	bl	8002254 <linear_interpolation>
 80023d4:	eef0 7a40 	vmov.f32	s15, s0
 80023d8:	4b23      	ldr	r3, [pc, #140]	@ (8002468 <valeur_Hum+0xcc>)
 80023da:	edc3 7a00 	vstr	s15, [r3]

        if (humidity_perc < 0) {
 80023de:	4b22      	ldr	r3, [pc, #136]	@ (8002468 <valeur_Hum+0xcc>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ec:	d503      	bpl.n	80023f6 <valeur_Hum+0x5a>
            humidity_perc = 0;
 80023ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002468 <valeur_Hum+0xcc>)
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
        }
        if (humidity_perc > 100) {
 80023f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002468 <valeur_Hum+0xcc>)
 80023f8:	edd3 7a00 	vldr	s15, [r3]
 80023fc:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800246c <valeur_Hum+0xd0>
 8002400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002408:	dd02      	ble.n	8002410 <valeur_Hum+0x74>
            humidity_perc = 100;
 800240a:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <valeur_Hum+0xcc>)
 800240c:	4a18      	ldr	r2, [pc, #96]	@ (8002470 <valeur_Hum+0xd4>)
 800240e:	601a      	str	r2, [r3, #0]
        }

        snprintf((char *)tx_buffer, sizeof(tx_buffer), "%3.2f %%", humidity_perc);
 8002410:	4b15      	ldr	r3, [pc, #84]	@ (8002468 <valeur_Hum+0xcc>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe f8b7 	bl	8000588 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	e9cd 2300 	strd	r2, r3, [sp]
 8002422:	4a14      	ldr	r2, [pc, #80]	@ (8002474 <valeur_Hum+0xd8>)
 8002424:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002428:	4813      	ldr	r0, [pc, #76]	@ (8002478 <valeur_Hum+0xdc>)
 800242a:	f012 fa71 	bl	8014910 <sniprintf>
        //printf((char const *)tx_buffer);
        BSP_LCD_SetFont(&Font16);
 800242e:	4813      	ldr	r0, [pc, #76]	@ (800247c <valeur_Hum+0xe0>)
 8002430:	f004 fa04 	bl	800683c <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(startX + squareSize + spacing + 20, startY + 70, (uint8_t*)tx_buffer, LEFT_MODE);
 8002434:	2228      	movs	r2, #40	@ 0x28
 8002436:	2378      	movs	r3, #120	@ 0x78
 8002438:	4413      	add	r3, r2
 800243a:	b29b      	uxth	r3, r3
 800243c:	221e      	movs	r2, #30
 800243e:	4413      	add	r3, r2
 8002440:	b29b      	uxth	r3, r3
 8002442:	3314      	adds	r3, #20
 8002444:	b298      	uxth	r0, r3
 8002446:	2350      	movs	r3, #80	@ 0x50
 8002448:	3346      	adds	r3, #70	@ 0x46
 800244a:	b299      	uxth	r1, r3
 800244c:	2303      	movs	r3, #3
 800244e:	4a0a      	ldr	r2, [pc, #40]	@ (8002478 <valeur_Hum+0xdc>)
 8002450:	f004 fa7a 	bl	8006948 <BSP_LCD_DisplayStringAt>

    }
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200055c0 	.word	0x200055c0
 8002460:	200051c8 	.word	0x200051c8
 8002464:	200055d0 	.word	0x200055d0
 8002468:	200051cc 	.word	0x200051cc
 800246c:	42c80000 	.word	0x42c80000
 8002470:	42c80000 	.word	0x42c80000
 8002474:	08016d84 	.word	0x08016d84
 8002478:	200051d8 	.word	0x200051d8
 800247c:	20004f0c 	.word	0x20004f0c

08002480 <valeur_TempH>:


// Fonction principale pour lire les données et les afficher
void valeur_TempH(void){
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af02      	add	r7, sp, #8

	hts221_reg_t reg1;
	hts221_status_get(&dev_ctx1, &reg1.status_reg);
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	4619      	mov	r1, r3
 800248a:	481e      	ldr	r0, [pc, #120]	@ (8002504 <valeur_TempH+0x84>)
 800248c:	f00e fc2f 	bl	8010cee <hts221_status_get>
    if (reg1.status_reg.t_da) {
 8002490:	793b      	ldrb	r3, [r7, #4]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d02e      	beq.n	80024fa <valeur_TempH+0x7a>
        memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800249c:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <valeur_TempH+0x88>)
 800249e:	2200      	movs	r2, #0
 80024a0:	801a      	strh	r2, [r3, #0]
        hts221_temperature_raw_get(&dev_ctx1, &data_raw_temperature);
 80024a2:	4919      	ldr	r1, [pc, #100]	@ (8002508 <valeur_TempH+0x88>)
 80024a4:	4817      	ldr	r0, [pc, #92]	@ (8002504 <valeur_TempH+0x84>)
 80024a6:	f00e fbc9 	bl	8010c3c <hts221_temperature_raw_get>
        temperature_degC = linear_interpolation(&lin_temp, data_raw_temperature);
 80024aa:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <valeur_TempH+0x88>)
 80024ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b0:	4619      	mov	r1, r3
 80024b2:	4816      	ldr	r0, [pc, #88]	@ (800250c <valeur_TempH+0x8c>)
 80024b4:	f7ff fece 	bl	8002254 <linear_interpolation>
 80024b8:	eef0 7a40 	vmov.f32	s15, s0
 80024bc:	4b14      	ldr	r3, [pc, #80]	@ (8002510 <valeur_TempH+0x90>)
 80024be:	edc3 7a00 	vstr	s15, [r3]
        snprintf((char *)tx_buffer, sizeof(tx_buffer), "%6.2f deg", temperature_degC);
 80024c2:	4b13      	ldr	r3, [pc, #76]	@ (8002510 <valeur_TempH+0x90>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f85e 	bl	8000588 <__aeabi_f2d>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	e9cd 2300 	strd	r2, r3, [sp]
 80024d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002514 <valeur_TempH+0x94>)
 80024d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024da:	480f      	ldr	r0, [pc, #60]	@ (8002518 <valeur_TempH+0x98>)
 80024dc:	f012 fa18 	bl	8014910 <sniprintf>
        //printf((char const *)tx_buffer);
        BSP_LCD_SetFont(&Font16);
 80024e0:	480e      	ldr	r0, [pc, #56]	@ (800251c <valeur_TempH+0x9c>)
 80024e2:	f004 f9ab 	bl	800683c <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(startX+2, startY + 70, (uint8_t*)tx_buffer, LEFT_MODE);
 80024e6:	2328      	movs	r3, #40	@ 0x28
 80024e8:	3302      	adds	r3, #2
 80024ea:	b298      	uxth	r0, r3
 80024ec:	2350      	movs	r3, #80	@ 0x50
 80024ee:	3346      	adds	r3, #70	@ 0x46
 80024f0:	b299      	uxth	r1, r3
 80024f2:	2303      	movs	r3, #3
 80024f4:	4a08      	ldr	r2, [pc, #32]	@ (8002518 <valeur_TempH+0x98>)
 80024f6:	f004 fa27 	bl	8006948 <BSP_LCD_DisplayStringAt>
    }
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200055c0 	.word	0x200055c0
 8002508:	200051ca 	.word	0x200051ca
 800250c:	200055e0 	.word	0x200055e0
 8002510:	200051d0 	.word	0x200051d0
 8002514:	08016d90 	.word	0x08016d90
 8002518:	200051d8 	.word	0x200051d8
 800251c:	20004f0c 	.word	0x20004f0c

08002520 <valeur_graph_TempH>:

extern float temperatures[MAX_POINTS]; // Tableau pour stocker les températures
extern uint8_t temp_index;
extern int current_point;

void valeur_graph_TempH(void) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
    hts221_reg_t reg1;
    hts221_status_get(&dev_ctx1, &reg1.status_reg);
 8002526:	463b      	mov	r3, r7
 8002528:	4619      	mov	r1, r3
 800252a:	4815      	ldr	r0, [pc, #84]	@ (8002580 <valeur_graph_TempH+0x60>)
 800252c:	f00e fbdf 	bl	8010cee <hts221_status_get>

    if (reg1.status_reg.t_da) {
 8002530:	783b      	ldrb	r3, [r7, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01d      	beq.n	8002578 <valeur_graph_TempH+0x58>
        // Lire la température brute du capteur
        memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800253c:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <valeur_graph_TempH+0x64>)
 800253e:	2200      	movs	r2, #0
 8002540:	801a      	strh	r2, [r3, #0]
        hts221_temperature_raw_get(&dev_ctx1, &data_raw_temperature);
 8002542:	4910      	ldr	r1, [pc, #64]	@ (8002584 <valeur_graph_TempH+0x64>)
 8002544:	480e      	ldr	r0, [pc, #56]	@ (8002580 <valeur_graph_TempH+0x60>)
 8002546:	f00e fb79 	bl	8010c3c <hts221_temperature_raw_get>

        // Convertir la valeur brute en °C
        temperature_degC = linear_interpolation(&lin_temp, data_raw_temperature);
 800254a:	4b0e      	ldr	r3, [pc, #56]	@ (8002584 <valeur_graph_TempH+0x64>)
 800254c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002550:	4619      	mov	r1, r3
 8002552:	480d      	ldr	r0, [pc, #52]	@ (8002588 <valeur_graph_TempH+0x68>)
 8002554:	f7ff fe7e 	bl	8002254 <linear_interpolation>
 8002558:	eef0 7a40 	vmov.f32	s15, s0
 800255c:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <valeur_graph_TempH+0x6c>)
 800255e:	edc3 7a00 	vstr	s15, [r3]

        // Obtenir l'heure actuelle en secondes depuis le début (ou autre base temporelle)
        uint32_t current_time = get_current_time_in_seconds();
 8002562:	f7fe fd2d 	bl	8000fc0 <get_current_time_in_seconds>
 8002566:	6078      	str	r0, [r7, #4]

        // Ajouter la nouvelle valeur et mettre à jour le graphique
        update_temperature_graph(temperature_degC, current_time);
 8002568:	4b08      	ldr	r3, [pc, #32]	@ (800258c <valeur_graph_TempH+0x6c>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	eeb0 0a67 	vmov.f32	s0, s15
 8002574:	f7ff fa6a 	bl	8001a4c <update_temperature_graph>

        // Rafraîchir le graphique s'il est affiché
        //draw_temperature_graph(temperature_degC, current_time, current_point);
    }
}
 8002578:	bf00      	nop
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200055c0 	.word	0x200055c0
 8002584:	200051ca 	.word	0x200051ca
 8002588:	200055e0 	.word	0x200055e0
 800258c:	200051d0 	.word	0x200051d0

08002590 <value_humidity_graph>:

void value_humidity_graph(void) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0

        hts221_reg_t reg1;
		hts221_status_get(&dev_ctx1, &reg1.status_reg);
 8002596:	463b      	mov	r3, r7
 8002598:	4619      	mov	r1, r3
 800259a:	4816      	ldr	r0, [pc, #88]	@ (80025f4 <value_humidity_graph+0x64>)
 800259c:	f00e fba7 	bl	8010cee <hts221_status_get>
		if (reg1.status_reg.h_da) {
 80025a0:	783b      	ldrb	r3, [r7, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01f      	beq.n	80025ec <value_humidity_graph+0x5c>
			memset(&data_raw_humidity, 0x00, sizeof(int16_t));
 80025ac:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <value_humidity_graph+0x68>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	801a      	strh	r2, [r3, #0]
			hts221_humidity_raw_get(&dev_ctx1, &data_raw_humidity);
 80025b2:	4911      	ldr	r1, [pc, #68]	@ (80025f8 <value_humidity_graph+0x68>)
 80025b4:	480f      	ldr	r0, [pc, #60]	@ (80025f4 <value_humidity_graph+0x64>)
 80025b6:	f00e fb1f 	bl	8010bf8 <hts221_humidity_raw_get>
			humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 80025ba:	4b0f      	ldr	r3, [pc, #60]	@ (80025f8 <value_humidity_graph+0x68>)
 80025bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c0:	4619      	mov	r1, r3
 80025c2:	480e      	ldr	r0, [pc, #56]	@ (80025fc <value_humidity_graph+0x6c>)
 80025c4:	f7ff fe46 	bl	8002254 <linear_interpolation>
 80025c8:	eef0 7a40 	vmov.f32	s15, s0
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <value_humidity_graph+0x70>)
 80025ce:	edc3 7a00 	vstr	s15, [r3]

			// Récupérer l'heure actuelle en minutes
			int32_t current_time = get_current_time_in_seconds();
 80025d2:	f7fe fcf5 	bl	8000fc0 <get_current_time_in_seconds>
 80025d6:	4603      	mov	r3, r0
 80025d8:	607b      	str	r3, [r7, #4]
			// Ajouter les données
			update_humidity_graph(humidity_perc, current_time);
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <value_humidity_graph+0x70>)
 80025dc:	edd3 7a00 	vldr	s15, [r3]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4618      	mov	r0, r3
 80025e4:	eeb0 0a67 	vmov.f32	s0, s15
 80025e8:	f7ff fbf4 	bl	8001dd4 <update_humidity_graph>
        }
}
 80025ec:	bf00      	nop
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200055c0 	.word	0x200055c0
 80025f8:	200051c8 	.word	0x200051c8
 80025fc:	200055d0 	.word	0x200055d0
 8002600:	200051cc 	.word	0x200051cc

08002604 <platform_write_hts221>:
        }
    }
}


static int32_t platform_write_hts221(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af04      	add	r7, sp, #16
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	607a      	str	r2, [r7, #4]
 800260e:	461a      	mov	r2, r3
 8002610:	460b      	mov	r3, r1
 8002612:	72fb      	strb	r3, [r7, #11]
 8002614:	4613      	mov	r3, r2
 8002616:	813b      	strh	r3, [r7, #8]
	  reg |= 0x80;
 8002618:	7afb      	ldrb	r3, [r7, #11]
 800261a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800261e:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg,
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	b29a      	uxth	r2, r3
 8002624:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002628:	9302      	str	r3, [sp, #8]
 800262a:	893b      	ldrh	r3, [r7, #8]
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	21bf      	movs	r1, #191	@ 0xbf
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f007 fde0 	bl	800a1fc <HAL_I2C_Mem_Write>
	                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	  return 0;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <platform_read_hts221>:

static int32_t platform_read_hts221(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8002646:	b580      	push	{r7, lr}
 8002648:	b088      	sub	sp, #32
 800264a:	af04      	add	r7, sp, #16
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	461a      	mov	r2, r3
 8002652:	460b      	mov	r3, r1
 8002654:	72fb      	strb	r3, [r7, #11]
 8002656:	4613      	mov	r3, r2
 8002658:	813b      	strh	r3, [r7, #8]
	  reg |= 0x80;
 800265a:	7afb      	ldrb	r3, [r7, #11]
 800265c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002660:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg,
 8002662:	7afb      	ldrb	r3, [r7, #11]
 8002664:	b29a      	uxth	r2, r3
 8002666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	893b      	ldrh	r3, [r7, #8]
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	2301      	movs	r3, #1
 8002676:	21bf      	movs	r1, #191	@ 0xbf
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f007 fed3 	bl	800a424 <HAL_I2C_Mem_Read>
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	  return 0;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3710      	adds	r7, #16
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <platform_delay_hts221>:

static void platform_delay_hts221(uint32_t ms) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f005 fdf1 	bl	8008278 <HAL_Delay>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <init_Pression>:
stmdev_ctx_t dev_ctx;

lps22hh_reg_t reg;


void init_Pression(void) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0

    dev_ctx.write_reg = platform_write;
 80026a4:	4b18      	ldr	r3, [pc, #96]	@ (8002708 <init_Pression+0x68>)
 80026a6:	4a19      	ldr	r2, [pc, #100]	@ (800270c <init_Pression+0x6c>)
 80026a8:	601a      	str	r2, [r3, #0]
    dev_ctx.read_reg = platform_read;
 80026aa:	4b17      	ldr	r3, [pc, #92]	@ (8002708 <init_Pression+0x68>)
 80026ac:	4a18      	ldr	r2, [pc, #96]	@ (8002710 <init_Pression+0x70>)
 80026ae:	605a      	str	r2, [r3, #4]
    dev_ctx.mdelay = platform_delay;
 80026b0:	4b15      	ldr	r3, [pc, #84]	@ (8002708 <init_Pression+0x68>)
 80026b2:	4a18      	ldr	r2, [pc, #96]	@ (8002714 <init_Pression+0x74>)
 80026b4:	609a      	str	r2, [r3, #8]
    dev_ctx.handle = &SENSOR_BUS;
 80026b6:	4b14      	ldr	r3, [pc, #80]	@ (8002708 <init_Pression+0x68>)
 80026b8:	4a17      	ldr	r2, [pc, #92]	@ (8002718 <init_Pression+0x78>)
 80026ba:	60da      	str	r2, [r3, #12]

    platform_delay(BOOT_TIME);
 80026bc:	2005      	movs	r0, #5
 80026be:	f000 f90f 	bl	80028e0 <platform_delay>

    whoamI = 0;
 80026c2:	4b16      	ldr	r3, [pc, #88]	@ (800271c <init_Pression+0x7c>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
    lps22hh_device_id_get(&dev_ctx, &whoamI);
 80026c8:	4914      	ldr	r1, [pc, #80]	@ (800271c <init_Pression+0x7c>)
 80026ca:	480f      	ldr	r0, [pc, #60]	@ (8002708 <init_Pression+0x68>)
 80026cc:	f00e fd37 	bl	801113e <lps22hh_device_id_get>

    if (whoamI != LPS22HH_ID) {
 80026d0:	4b12      	ldr	r3, [pc, #72]	@ (800271c <init_Pression+0x7c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2bb3      	cmp	r3, #179	@ 0xb3
 80026d6:	d001      	beq.n	80026dc <init_Pression+0x3c>
        while (1); // Gérer l'erreur si le capteur n'est pas trouvé
 80026d8:	bf00      	nop
 80026da:	e7fd      	b.n	80026d8 <init_Pression+0x38>
    }

    lps22hh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80026dc:	2101      	movs	r1, #1
 80026de:	480a      	ldr	r0, [pc, #40]	@ (8002708 <init_Pression+0x68>)
 80026e0:	f00e fd3e 	bl	8011160 <lps22hh_reset_set>

    do {
        lps22hh_reset_get(&dev_ctx, &rst);
 80026e4:	490e      	ldr	r1, [pc, #56]	@ (8002720 <init_Pression+0x80>)
 80026e6:	4808      	ldr	r0, [pc, #32]	@ (8002708 <init_Pression+0x68>)
 80026e8:	f00e fd60 	bl	80111ac <lps22hh_reset_get>
    } while (rst);
 80026ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <init_Pression+0x80>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f7      	bne.n	80026e4 <init_Pression+0x44>

    lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80026f4:	2101      	movs	r1, #1
 80026f6:	4804      	ldr	r0, [pc, #16]	@ (8002708 <init_Pression+0x68>)
 80026f8:	f00e fc84 	bl	8011004 <lps22hh_block_data_update_set>
    lps22hh_data_rate_set(&dev_ctx, LPS22HH_10_Hz_LOW_NOISE);
 80026fc:	2112      	movs	r1, #18
 80026fe:	4802      	ldr	r0, [pc, #8]	@ (8002708 <init_Pression+0x68>)
 8002700:	f00e fca6 	bl	8011050 <lps22hh_data_rate_set>
}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200059e4 	.word	0x200059e4
 800270c:	0800286d 	.word	0x0800286d
 8002710:	080028a7 	.word	0x080028a7
 8002714:	080028e1 	.word	0x080028e1
 8002718:	20005d10 	.word	0x20005d10
 800271c:	200055f8 	.word	0x200055f8
 8002720:	200055f9 	.word	0x200055f9

08002724 <valeur_Pression>:

void valeur_Pression(void) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af02      	add	r7, sp, #8


    lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800272a:	2301      	movs	r3, #1
 800272c:	4a21      	ldr	r2, [pc, #132]	@ (80027b4 <valeur_Pression+0x90>)
 800272e:	2127      	movs	r1, #39	@ 0x27
 8002730:	4821      	ldr	r0, [pc, #132]	@ (80027b8 <valeur_Pression+0x94>)
 8002732:	f00e fc13 	bl	8010f5c <lps22hh_read_reg>

    if (reg.status.p_da) {
 8002736:	4b1f      	ldr	r3, [pc, #124]	@ (80027b4 <valeur_Pression+0x90>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d034      	beq.n	80027ae <valeur_Pression+0x8a>
        memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8002744:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <valeur_Pression+0x98>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
        lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 800274a:	491c      	ldr	r1, [pc, #112]	@ (80027bc <valeur_Pression+0x98>)
 800274c:	481a      	ldr	r0, [pc, #104]	@ (80027b8 <valeur_Pression+0x94>)
 800274e:	f00e fccd 	bl	80110ec <lps22hh_pressure_raw_get>
        pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8002752:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <valeur_Pression+0x98>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f00e fc3c 	bl	8010fd4 <lps22hh_from_lsb_to_hpa>
 800275c:	eef0 7a40 	vmov.f32	s15, s0
 8002760:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <valeur_Pression+0x9c>)
 8002762:	edc3 7a00 	vstr	s15, [r3]
        snprintf((char *)tx_buffer, sizeof(tx_buffer), "%6.2f hPa", pressure_hPa);
 8002766:	4b16      	ldr	r3, [pc, #88]	@ (80027c0 <valeur_Pression+0x9c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd ff0c 	bl	8000588 <__aeabi_f2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	e9cd 2300 	strd	r2, r3, [sp]
 8002778:	4a12      	ldr	r2, [pc, #72]	@ (80027c4 <valeur_Pression+0xa0>)
 800277a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800277e:	4812      	ldr	r0, [pc, #72]	@ (80027c8 <valeur_Pression+0xa4>)
 8002780:	f012 f8c6 	bl	8014910 <sniprintf>
        //printf((char const *)tx_buffer);
        BSP_LCD_SetFont(&Font16);
 8002784:	4811      	ldr	r0, [pc, #68]	@ (80027cc <valeur_Pression+0xa8>)
 8002786:	f004 f859 	bl	800683c <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(startXP+2 * (squareSizeP + spacingP) + 20, startYP + 60, (uint8_t*)tx_buffer, LEFT_MODE);
 800278a:	2278      	movs	r2, #120	@ 0x78
 800278c:	2317      	movs	r3, #23
 800278e:	4413      	add	r3, r2
 8002790:	b29b      	uxth	r3, r3
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	b29b      	uxth	r3, r3
 8002796:	2228      	movs	r2, #40	@ 0x28
 8002798:	4413      	add	r3, r2
 800279a:	b29b      	uxth	r3, r3
 800279c:	3314      	adds	r3, #20
 800279e:	b298      	uxth	r0, r3
 80027a0:	2350      	movs	r3, #80	@ 0x50
 80027a2:	333c      	adds	r3, #60	@ 0x3c
 80027a4:	b299      	uxth	r1, r3
 80027a6:	2303      	movs	r3, #3
 80027a8:	4a07      	ldr	r2, [pc, #28]	@ (80027c8 <valeur_Pression+0xa4>)
 80027aa:	f004 f8cd 	bl	8006948 <BSP_LCD_DisplayStringAt>

    }
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	200059f4 	.word	0x200059f4
 80027b8:	200059e4 	.word	0x200059e4
 80027bc:	200055f0 	.word	0x200055f0
 80027c0:	200055f4 	.word	0x200055f4
 80027c4:	08016e70 	.word	0x08016e70
 80027c8:	200055fc 	.word	0x200055fc
 80027cc:	20004f0c 	.word	0x20004f0c

080027d0 <valeur_Pression_graph>:


void valeur_Pression_graph(void) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0


    lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 80027d6:	2301      	movs	r3, #1
 80027d8:	4a15      	ldr	r2, [pc, #84]	@ (8002830 <valeur_Pression_graph+0x60>)
 80027da:	2127      	movs	r1, #39	@ 0x27
 80027dc:	4815      	ldr	r0, [pc, #84]	@ (8002834 <valeur_Pression_graph+0x64>)
 80027de:	f00e fbbd 	bl	8010f5c <lps22hh_read_reg>

    if (reg.status.p_da) {
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <valeur_Pression_graph+0x60>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d01b      	beq.n	8002828 <valeur_Pression_graph+0x58>
        memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <valeur_Pression_graph+0x68>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
        lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 80027f6:	4910      	ldr	r1, [pc, #64]	@ (8002838 <valeur_Pression_graph+0x68>)
 80027f8:	480e      	ldr	r0, [pc, #56]	@ (8002834 <valeur_Pression_graph+0x64>)
 80027fa:	f00e fc77 	bl	80110ec <lps22hh_pressure_raw_get>
        pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 80027fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002838 <valeur_Pression_graph+0x68>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f00e fbe6 	bl	8010fd4 <lps22hh_from_lsb_to_hpa>
 8002808:	eef0 7a40 	vmov.f32	s15, s0
 800280c:	4b0b      	ldr	r3, [pc, #44]	@ (800283c <valeur_Pression_graph+0x6c>)
 800280e:	edc3 7a00 	vstr	s15, [r3]

        uint32_t current_time = get_current_time_in_seconds();
 8002812:	f7fe fbd5 	bl	8000fc0 <get_current_time_in_seconds>
 8002816:	6078      	str	r0, [r7, #4]

        update_pressure_graph(pressure_hPa, current_time);
 8002818:	4b08      	ldr	r3, [pc, #32]	@ (800283c <valeur_Pression_graph+0x6c>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	eeb0 0a67 	vmov.f32	s0, s15
 8002824:	f7ff fcc4 	bl	80021b0 <update_pressure_graph>

    }
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200059f4 	.word	0x200059f4
 8002834:	200059e4 	.word	0x200059e4
 8002838:	200055f0 	.word	0x200055f0
 800283c:	200055f4 	.word	0x200055f4

08002840 <manage_pressure_graph>:

void manage_pressure_graph() {
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
    static uint32_t last_second = 0;  // Dernière seconde enregistrée
    uint32_t current_second = get_current_time_in_seconds(); // Récupérer l'heure en secondes
 8002846:	f7fe fbbb 	bl	8000fc0 <get_current_time_in_seconds>
 800284a:	6078      	str	r0, [r7, #4]

    // Si une seconde s'est écoulée, mettre à jour le graphique
    if (current_second != last_second) {
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <manage_pressure_graph+0x28>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	429a      	cmp	r2, r3
 8002854:	d004      	beq.n	8002860 <manage_pressure_graph+0x20>
        last_second = current_second; // Mettre à jour la dernière seconde enregistrée
 8002856:	4a04      	ldr	r2, [pc, #16]	@ (8002868 <manage_pressure_graph+0x28>)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6013      	str	r3, [r2, #0]
        valeur_Pression_graph(); // Lire la pression et mettre à jour le graphique
 800285c:	f7ff ffb8 	bl	80027d0 <valeur_Pression_graph>
    }
}
 8002860:	bf00      	nop
 8002862:	3708      	adds	r7, #8
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	200059f8 	.word	0x200059f8

0800286c <platform_write>:

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af04      	add	r7, sp, #16
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	461a      	mov	r2, r3
 8002878:	460b      	mov	r3, r1
 800287a:	72fb      	strb	r3, [r7, #11]
 800287c:	4613      	mov	r3, r2
 800287e:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000);
 8002880:	7afb      	ldrb	r3, [r7, #11]
 8002882:	b29a      	uxth	r2, r3
 8002884:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002888:	9302      	str	r3, [sp, #8]
 800288a:	893b      	ldrh	r3, [r7, #8]
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	2301      	movs	r3, #1
 8002894:	21bb      	movs	r1, #187	@ 0xbb
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f007 fcb0 	bl	800a1fc <HAL_I2C_Mem_Write>
    return 0;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b088      	sub	sp, #32
 80028aa:	af04      	add	r7, sp, #16
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	607a      	str	r2, [r7, #4]
 80028b0:	461a      	mov	r2, r3
 80028b2:	460b      	mov	r3, r1
 80028b4:	72fb      	strb	r3, [r7, #11]
 80028b6:	4613      	mov	r3, r2
 80028b8:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80028ba:	7afb      	ldrb	r3, [r7, #11]
 80028bc:	b29a      	uxth	r2, r3
 80028be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	893b      	ldrh	r3, [r7, #8]
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	2301      	movs	r3, #1
 80028ce:	21bb      	movs	r1, #187	@ 0xbb
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f007 fda7 	bl	800a424 <HAL_I2C_Mem_Read>
    return 0;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <platform_delay>:

static void platform_delay(uint32_t ms) {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f005 fcc5 	bl	8008278 <HAL_Delay>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <Draw_Rain_Measure_Value>:
    }
}


//revoie et affiche les mesures de pluie
void Draw_Rain_Measure_Value(){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0

	if(flagRain){
 80028fe:	4b36      	ldr	r3, [pc, #216]	@ (80029d8 <Draw_Rain_Measure_Value+0xe0>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d05d      	beq.n	80029c4 <Draw_Rain_Measure_Value+0xcc>

		  //remise à 0 du timer 2 (mesure de station meteo non detecté pendant 1 min)
		  flag_meteo=0;
 8002908:	4b34      	ldr	r3, [pc, #208]	@ (80029dc <Draw_Rain_Measure_Value+0xe4>)
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Stop(&htim2);        // Arrêter le timer
 800290e:	4834      	ldr	r0, [pc, #208]	@ (80029e0 <Draw_Rain_Measure_Value+0xe8>)
 8002910:	f00b fd7c 	bl	800e40c <HAL_TIM_Base_Stop>
		  __HAL_TIM_SET_COUNTER(&htim2, 0); // Réinitialiser le compteur à zéro
 8002914:	4b32      	ldr	r3, [pc, #200]	@ (80029e0 <Draw_Rain_Measure_Value+0xe8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2200      	movs	r2, #0
 800291a:	625a      	str	r2, [r3, #36]	@ 0x24
		  HAL_TIM_Base_Start(&htim2);       // Redémarrer le timer
 800291c:	4830      	ldr	r0, [pc, #192]	@ (80029e0 <Draw_Rain_Measure_Value+0xe8>)
 800291e:	f00b fd05 	bl	800e32c <HAL_TIM_Base_Start>

		  printf("raincount: %lu \r\n", rainCount);
 8002922:	4b30      	ldr	r3, [pc, #192]	@ (80029e4 <Draw_Rain_Measure_Value+0xec>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4619      	mov	r1, r3
 8002928:	482f      	ldr	r0, [pc, #188]	@ (80029e8 <Draw_Rain_Measure_Value+0xf0>)
 800292a:	f011 ff81 	bl	8014830 <iprintf>
		  rainfallR = rainCount * VOLUME_PAR_IMPULSION;
 800292e:	4b2d      	ldr	r3, [pc, #180]	@ (80029e4 <Draw_Rain_Measure_Value+0xec>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fe06 	bl	8000544 <__aeabi_ui2d>
 8002938:	a325      	add	r3, pc, #148	@ (adr r3, 80029d0 <Draw_Rain_Measure_Value+0xd8>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fe7b 	bl	8000638 <__aeabi_dmul>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	f7fe f94d 	bl	8000be8 <__aeabi_d2f>
 800294e:	4603      	mov	r3, r0
 8002950:	4a26      	ldr	r2, [pc, #152]	@ (80029ec <Draw_Rain_Measure_Value+0xf4>)
 8002952:	6013      	str	r3, [r2, #0]

		  printf("Volume d'eau par seconde: %.2f mm\r\n", rainfallR);
 8002954:	4b25      	ldr	r3, [pc, #148]	@ (80029ec <Draw_Rain_Measure_Value+0xf4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4618      	mov	r0, r3
 800295a:	f7fd fe15 	bl	8000588 <__aeabi_f2d>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4823      	ldr	r0, [pc, #140]	@ (80029f0 <Draw_Rain_Measure_Value+0xf8>)
 8002964:	f011 ff64 	bl	8014830 <iprintf>
		  // Afficher la valeur sur l'écran LCD à une position donnée (par exemple, ligne 50, colonne 50)
		  timeElapsed = 0;
 8002968:	4b22      	ldr	r3, [pc, #136]	@ (80029f4 <Draw_Rain_Measure_Value+0xfc>)
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
		  flagRain=0;
 800296e:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <Draw_Rain_Measure_Value+0xe0>)
 8002970:	2200      	movs	r2, #0
 8002972:	701a      	strb	r2, [r3, #0]
		  char rainfallStr[20];
		  sprintf(rainfallStr, "%.2f mm", rainfallR);
 8002974:	4b1d      	ldr	r3, [pc, #116]	@ (80029ec <Draw_Rain_Measure_Value+0xf4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fe05 	bl	8000588 <__aeabi_f2d>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	1d38      	adds	r0, r7, #4
 8002984:	491c      	ldr	r1, [pc, #112]	@ (80029f8 <Draw_Rain_Measure_Value+0x100>)
 8002986:	f011 fff7 	bl	8014978 <siprintf>
		  BSP_LCD_SetFont(&Font16); // Police de caractères pour l'affichage
 800298a:	481c      	ldr	r0, [pc, #112]	@ (80029fc <Draw_Rain_Measure_Value+0x104>)
 800298c:	f003 ff56 	bl	800683c <BSP_LCD_SetFont>
	      BSP_LCD_DisplayStringAt(startXR + 2 * (squareSizeR + spacingR) + 20, startYR + 70, (uint8_t*)rainfallStr, LEFT_MODE);
 8002990:	4b1b      	ldr	r3, [pc, #108]	@ (8002a00 <Draw_Rain_Measure_Value+0x108>)
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29a      	uxth	r2, r3
 8002996:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <Draw_Rain_Measure_Value+0x10c>)
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	b29b      	uxth	r3, r3
 800299c:	4413      	add	r3, r2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	4b18      	ldr	r3, [pc, #96]	@ (8002a08 <Draw_Rain_Measure_Value+0x110>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3314      	adds	r3, #20
 80029b0:	b298      	uxth	r0, r3
 80029b2:	4b16      	ldr	r3, [pc, #88]	@ (8002a0c <Draw_Rain_Measure_Value+0x114>)
 80029b4:	881b      	ldrh	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3346      	adds	r3, #70	@ 0x46
 80029ba:	b299      	uxth	r1, r3
 80029bc:	1d3a      	adds	r2, r7, #4
 80029be:	2303      	movs	r3, #3
 80029c0:	f003 ffc2 	bl	8006948 <BSP_LCD_DisplayStringAt>
	}



}
 80029c4:	bf00      	nop
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	f3af 8000 	nop.w
 80029d0:	89a02752 	.word	0x89a02752
 80029d4:	3fd1e1b0 	.word	0x3fd1e1b0
 80029d8:	20005a01 	.word	0x20005a01
 80029dc:	20005e95 	.word	0x20005e95
 80029e0:	2000607c 	.word	0x2000607c
 80029e4:	200059fc 	.word	0x200059fc
 80029e8:	08016ec4 	.word	0x08016ec4
 80029ec:	20005a04 	.word	0x20005a04
 80029f0:	08016ed8 	.word	0x08016ed8
 80029f4:	20005a00 	.word	0x20005a00
 80029f8:	08016efc 	.word	0x08016efc
 80029fc:	20004f0c 	.word	0x20004f0c
 8002a00:	20004e76 	.word	0x20004e76
 8002a04:	20004e78 	.word	0x20004e78
 8002a08:	20004e7a 	.word	0x20004e7a
 8002a0c:	20004e7c 	.word	0x20004e7c

08002a10 <init_sd_logging>:
extern float humidity_perc;
extern float temperature_degC;


// Initialisation du système d'enregistrement
FRESULT init_sd_logging(void) {
 8002a10:	b5b0      	push	{r4, r5, r7, lr}
 8002a12:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8002a16:	af00      	add	r7, sp, #0
    FRESULT res;
    uint32_t byteswritten;
    FIL SDFile;
    char header[] = "Date,Time,Value\n";
 8002a18:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002a1c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002a20:	4a52      	ldr	r2, [pc, #328]	@ (8002b6c <init_sd_logging+0x15c>)
 8002a22:	461c      	mov	r4, r3
 8002a24:	4615      	mov	r5, r2
 8002a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a2a:	682b      	ldr	r3, [r5, #0]
 8002a2c:	7023      	strb	r3, [r4, #0]

    // Monter le système de fichiers
    res = f_mount(&fs, "", 1);
 8002a2e:	2201      	movs	r2, #1
 8002a30:	494f      	ldr	r1, [pc, #316]	@ (8002b70 <init_sd_logging+0x160>)
 8002a32:	4850      	ldr	r0, [pc, #320]	@ (8002b74 <init_sd_logging+0x164>)
 8002a34:	f010 fb62 	bl	80130fc <f_mount>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if (res != FR_OK) {
 8002a3e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d008      	beq.n	8002a58 <init_sd_logging+0x48>
        printf("Erreur montage SD: %d\r\n", res);
 8002a46:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	484a      	ldr	r0, [pc, #296]	@ (8002b78 <init_sd_logging+0x168>)
 8002a4e:	f011 feef 	bl	8014830 <iprintf>
        return res;
 8002a52:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002a56:	e083      	b.n	8002b60 <init_sd_logging+0x150>
    }

    // Créer le fichier température avec en-tête
    res = f_open(&SDFile, "TEMP.CSV", FA_CREATE_ALWAYS | FA_WRITE);
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	220a      	movs	r2, #10
 8002a5e:	4947      	ldr	r1, [pc, #284]	@ (8002b7c <init_sd_logging+0x16c>)
 8002a60:	4618      	mov	r0, r3
 8002a62:	f010 fb91 	bl	8013188 <f_open>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if(res == FR_OK) {
 8002a6c:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d135      	bne.n	8002ae0 <init_sd_logging+0xd0>
        res = f_write(&SDFile, header, strlen(header), (void *)&byteswritten);
 8002a74:	1d3b      	adds	r3, r7, #4
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fc1a 	bl	80002b0 <strlen>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002a82:	1d39      	adds	r1, r7, #4
 8002a84:	f107 0018 	add.w	r0, r7, #24
 8002a88:	f010 fd38 	bl	80134fc <f_write>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
        if((byteswritten == 0) || (res != FR_OK)) {
 8002a92:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <init_sd_logging+0x92>
 8002a9a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <init_sd_logging+0xa8>
            printf("Erreur écriture en-tête température\n");
 8002aa2:	4837      	ldr	r0, [pc, #220]	@ (8002b80 <init_sd_logging+0x170>)
 8002aa4:	f011 ff2c 	bl	8014900 <puts>
            f_close(&SDFile);
 8002aa8:	f107 0318 	add.w	r3, r7, #24
 8002aac:	4618      	mov	r0, r3
 8002aae:	f010 ff18 	bl	80138e2 <f_close>
            return res;
 8002ab2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002ab6:	e053      	b.n	8002b60 <init_sd_logging+0x150>
        }
        f_close(&SDFile);
 8002ab8:	f107 0318 	add.w	r3, r7, #24
 8002abc:	4618      	mov	r0, r3
 8002abe:	f010 ff10 	bl	80138e2 <f_close>
        printf("Erreur création fichier température: %d\n", res);
        return res;
    }

    // Créer le fichier humidité avec en-tête
    res = f_open(&SDFile, "HUM.CSV", FA_CREATE_ALWAYS | FA_WRITE);
 8002ac2:	f107 0318 	add.w	r3, r7, #24
 8002ac6:	220a      	movs	r2, #10
 8002ac8:	492e      	ldr	r1, [pc, #184]	@ (8002b84 <init_sd_logging+0x174>)
 8002aca:	4618      	mov	r0, r3
 8002acc:	f010 fb5c 	bl	8013188 <f_open>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if(res == FR_OK) {
 8002ad6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d138      	bne.n	8002b50 <init_sd_logging+0x140>
 8002ade:	e008      	b.n	8002af2 <init_sd_logging+0xe2>
        printf("Erreur création fichier température: %d\n", res);
 8002ae0:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4828      	ldr	r0, [pc, #160]	@ (8002b88 <init_sd_logging+0x178>)
 8002ae8:	f011 fea2 	bl	8014830 <iprintf>
        return res;
 8002aec:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002af0:	e036      	b.n	8002b60 <init_sd_logging+0x150>
        res = f_write(&SDFile, header, strlen(header), (void *)&byteswritten);
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fbdb 	bl	80002b0 <strlen>
 8002afa:	4602      	mov	r2, r0
 8002afc:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002b00:	1d39      	adds	r1, r7, #4
 8002b02:	f107 0018 	add.w	r0, r7, #24
 8002b06:	f010 fcf9 	bl	80134fc <f_write>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
        if((byteswritten == 0) || (res != FR_OK)) {
 8002b10:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <init_sd_logging+0x110>
 8002b18:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <init_sd_logging+0x126>
            printf("Erreur écriture en-tête humidité\n");
 8002b20:	481a      	ldr	r0, [pc, #104]	@ (8002b8c <init_sd_logging+0x17c>)
 8002b22:	f011 feed 	bl	8014900 <puts>
            f_close(&SDFile);
 8002b26:	f107 0318 	add.w	r3, r7, #24
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f010 fed9 	bl	80138e2 <f_close>
            return res;
 8002b30:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002b34:	e014      	b.n	8002b60 <init_sd_logging+0x150>
        }
        f_close(&SDFile);
 8002b36:	f107 0318 	add.w	r3, r7, #24
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f010 fed1 	bl	80138e2 <f_close>
    } else {
        printf("Erreur création fichier humidité: %d\n", res);
        return res;
    }

    printf("Système d'enregistrement initialisé avec succès\n");
 8002b40:	4813      	ldr	r0, [pc, #76]	@ (8002b90 <init_sd_logging+0x180>)
 8002b42:	f011 fedd 	bl	8014900 <puts>
    sd_logging_enabled = 1;
 8002b46:	4b13      	ldr	r3, [pc, #76]	@ (8002b94 <init_sd_logging+0x184>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	701a      	strb	r2, [r3, #0]
    return FR_OK;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	e007      	b.n	8002b60 <init_sd_logging+0x150>
        printf("Erreur création fichier humidité: %d\n", res);
 8002b50:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002b54:	4619      	mov	r1, r3
 8002b56:	4810      	ldr	r0, [pc, #64]	@ (8002b98 <init_sd_logging+0x188>)
 8002b58:	f011 fe6a 	bl	8014830 <iprintf>
        return res;
 8002b5c:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bdb0      	pop	{r4, r5, r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	08017008 	.word	0x08017008
 8002b70:	08016f04 	.word	0x08016f04
 8002b74:	20005a08 	.word	0x20005a08
 8002b78:	08016f08 	.word	0x08016f08
 8002b7c:	08016f20 	.word	0x08016f20
 8002b80:	08016f2c 	.word	0x08016f2c
 8002b84:	08016f80 	.word	0x08016f80
 8002b88:	08016f54 	.word	0x08016f54
 8002b8c:	08016f88 	.word	0x08016f88
 8002b90:	08016fd4 	.word	0x08016fd4
 8002b94:	20005c38 	.word	0x20005c38
 8002b98:	08016fac 	.word	0x08016fac

08002b9c <log_weather_data>:

// Fonction d'enregistrement appelée par l'interruption du timer
void log_weather_data(void) {
 8002b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ba0:	f5ad 7d37 	sub.w	sp, sp, #732	@ 0x2dc
 8002ba4:	af06      	add	r7, sp, #24
    uint32_t byteswritten;
    char buffer[100];
    FIL SDFile;

    // Vérifier si le système est initialisé
    if(!sd_logging_enabled) {
 8002ba6:	4b89      	ldr	r3, [pc, #548]	@ (8002dcc <log_weather_data+0x230>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <log_weather_data+0x1a>
        printf("Logging non activé\n");
 8002bae:	4888      	ldr	r0, [pc, #544]	@ (8002dd0 <log_weather_data+0x234>)
 8002bb0:	f011 fea6 	bl	8014900 <puts>
 8002bb4:	e104      	b.n	8002dc0 <log_weather_data+0x224>
    }

    // Récupérer l'heure et la date
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002bb6:	f107 0310 	add.w	r3, r7, #16
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4885      	ldr	r0, [pc, #532]	@ (8002dd4 <log_weather_data+0x238>)
 8002bc0:	f009 fd9a 	bl	800c6f8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002bc4:	f107 030c 	add.w	r3, r7, #12
 8002bc8:	2200      	movs	r2, #0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4881      	ldr	r0, [pc, #516]	@ (8002dd4 <log_weather_data+0x238>)
 8002bce:	f009 fe75 	bl	800c8bc <HAL_RTC_GetDate>

    // Essayer d'ouvrir/créer le fichier température
    res = f_open(&SDFile, "TEMP.CSV", FA_OPEN_ALWAYS | FA_WRITE);
 8002bd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd6:	2212      	movs	r2, #18
 8002bd8:	497f      	ldr	r1, [pc, #508]	@ (8002dd8 <log_weather_data+0x23c>)
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f010 fad4 	bl	8013188 <f_open>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf
    if(res == FR_OK) {
 8002be6:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d165      	bne.n	8002cba <log_weather_data+0x11e>
        // Se positionner à la fin du fichier
        f_lseek(&SDFile, f_size(&SDFile));
 8002bee:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002bf2:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f010 fe99 	bl	8013936 <f_lseek>

        // Préparer la ligne de données
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
                date.Year, date.Month, date.Date,
 8002c04:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002c08:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002c0c:	78db      	ldrb	r3, [r3, #3]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002c0e:	4698      	mov	r8, r3
                date.Year, date.Month, date.Date,
 8002c10:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002c14:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002c18:	785b      	ldrb	r3, [r3, #1]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002c1a:	4699      	mov	r9, r3
                date.Year, date.Month, date.Date,
 8002c1c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002c20:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002c24:	789b      	ldrb	r3, [r3, #2]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002c26:	461c      	mov	r4, r3
                time.Hours, time.Minutes, time.Seconds,
 8002c28:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002c2c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002c30:	781b      	ldrb	r3, [r3, #0]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002c32:	461d      	mov	r5, r3
                time.Hours, time.Minutes, time.Seconds,
 8002c34:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002c38:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002c3c:	785b      	ldrb	r3, [r3, #1]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002c3e:	461e      	mov	r6, r3
                time.Hours, time.Minutes, time.Seconds,
 8002c40:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002c44:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002c48:	789b      	ldrb	r3, [r3, #2]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002c4a:	607b      	str	r3, [r7, #4]
 8002c4c:	4b63      	ldr	r3, [pc, #396]	@ (8002ddc <log_weather_data+0x240>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc99 	bl	8000588 <__aeabi_f2d>
 8002c56:	4602      	mov	r2, r0
 8002c58:	460b      	mov	r3, r1
 8002c5a:	f507 7015 	add.w	r0, r7, #596	@ 0x254
 8002c5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	9303      	str	r3, [sp, #12]
 8002c66:	9602      	str	r6, [sp, #8]
 8002c68:	9501      	str	r5, [sp, #4]
 8002c6a:	9400      	str	r4, [sp, #0]
 8002c6c:	464b      	mov	r3, r9
 8002c6e:	4642      	mov	r2, r8
 8002c70:	495b      	ldr	r1, [pc, #364]	@ (8002de0 <log_weather_data+0x244>)
 8002c72:	f011 fe81 	bl	8014978 <siprintf>
                temperature_degC);

        // Écrire les données
        res = f_write(&SDFile, buffer, strlen(buffer), (void *)&byteswritten);
 8002c76:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fb18 	bl	80002b0 <strlen>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002c86:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 8002c8a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002c8e:	f010 fc35 	bl	80134fc <f_write>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf

        if((byteswritten == 0) || (res != FR_OK)) {
 8002c98:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <log_weather_data+0x10c>
 8002ca0:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <log_weather_data+0x112>
            printf("Erreur d'écriture température\n");
 8002ca8:	484e      	ldr	r0, [pc, #312]	@ (8002de4 <log_weather_data+0x248>)
 8002caa:	f011 fe29 	bl	8014900 <puts>
        }

        // Fermer le fichier
        f_close(&SDFile);
 8002cae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f010 fe15 	bl	80138e2 <f_close>
 8002cb8:	e005      	b.n	8002cc6 <log_weather_data+0x12a>
    } else {
        printf("Erreur ouverture fichier température: %d\n", res);
 8002cba:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4849      	ldr	r0, [pc, #292]	@ (8002de8 <log_weather_data+0x24c>)
 8002cc2:	f011 fdb5 	bl	8014830 <iprintf>
    }

    // Même chose pour l'humidité
    res = f_open(&SDFile, "HUM.CSV", FA_OPEN_ALWAYS | FA_WRITE);
 8002cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cca:	2212      	movs	r2, #18
 8002ccc:	4947      	ldr	r1, [pc, #284]	@ (8002dec <log_weather_data+0x250>)
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f010 fa5a 	bl	8013188 <f_open>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf
    if(res == FR_OK) {
 8002cda:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d165      	bne.n	8002dae <log_weather_data+0x212>
        f_lseek(&SDFile, f_size(&SDFile));
 8002ce2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002ce6:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8002cea:	68da      	ldr	r2, [r3, #12]
 8002cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f010 fe1f 	bl	8013936 <f_lseek>

        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
                date.Year, date.Month, date.Date,
 8002cf8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002cfc:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002d00:	78db      	ldrb	r3, [r3, #3]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002d02:	4698      	mov	r8, r3
                date.Year, date.Month, date.Date,
 8002d04:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002d08:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002d0c:	785b      	ldrb	r3, [r3, #1]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002d0e:	4699      	mov	r9, r3
                date.Year, date.Month, date.Date,
 8002d10:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002d14:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002d18:	789b      	ldrb	r3, [r3, #2]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002d1a:	461c      	mov	r4, r3
                time.Hours, time.Minutes, time.Seconds,
 8002d1c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002d20:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002d24:	781b      	ldrb	r3, [r3, #0]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002d26:	461d      	mov	r5, r3
                time.Hours, time.Minutes, time.Seconds,
 8002d28:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002d2c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002d30:	785b      	ldrb	r3, [r3, #1]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002d32:	461e      	mov	r6, r3
                time.Hours, time.Minutes, time.Seconds,
 8002d34:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002d38:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002d3c:	789b      	ldrb	r3, [r3, #2]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002d3e:	607b      	str	r3, [r7, #4]
 8002d40:	4b2b      	ldr	r3, [pc, #172]	@ (8002df0 <log_weather_data+0x254>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fc1f 	bl	8000588 <__aeabi_f2d>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	f507 7015 	add.w	r0, r7, #596	@ 0x254
 8002d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	9303      	str	r3, [sp, #12]
 8002d5a:	9602      	str	r6, [sp, #8]
 8002d5c:	9501      	str	r5, [sp, #4]
 8002d5e:	9400      	str	r4, [sp, #0]
 8002d60:	464b      	mov	r3, r9
 8002d62:	4642      	mov	r2, r8
 8002d64:	491e      	ldr	r1, [pc, #120]	@ (8002de0 <log_weather_data+0x244>)
 8002d66:	f011 fe07 	bl	8014978 <siprintf>
                humidity_perc);

        res = f_write(&SDFile, buffer, strlen(buffer), (void *)&byteswritten);
 8002d6a:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fa9e 	bl	80002b0 <strlen>
 8002d74:	4602      	mov	r2, r0
 8002d76:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d7a:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 8002d7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002d82:	f010 fbbb 	bl	80134fc <f_write>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf

        if((byteswritten == 0) || (res != FR_OK)) {
 8002d8c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <log_weather_data+0x200>
 8002d94:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <log_weather_data+0x206>
            printf("Erreur d'écriture humidité\n");
 8002d9c:	4815      	ldr	r0, [pc, #84]	@ (8002df4 <log_weather_data+0x258>)
 8002d9e:	f011 fdaf 	bl	8014900 <puts>
        }

        f_close(&SDFile);
 8002da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da6:	4618      	mov	r0, r3
 8002da8:	f010 fd9b 	bl	80138e2 <f_close>
 8002dac:	e005      	b.n	8002dba <log_weather_data+0x21e>
    } else {
        printf("Erreur ouverture fichier humidité: %d\n", res);
 8002dae:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002db2:	4619      	mov	r1, r3
 8002db4:	4810      	ldr	r0, [pc, #64]	@ (8002df8 <log_weather_data+0x25c>)
 8002db6:	f011 fd3b 	bl	8014830 <iprintf>
    }

    printf("Enregistrement effectué\n");
 8002dba:	4810      	ldr	r0, [pc, #64]	@ (8002dfc <log_weather_data+0x260>)
 8002dbc:	f011 fda0 	bl	8014900 <puts>
}
 8002dc0:	f507 7731 	add.w	r7, r7, #708	@ 0x2c4
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dca:	bf00      	nop
 8002dcc:	20005c38 	.word	0x20005c38
 8002dd0:	0801701c 	.word	0x0801701c
 8002dd4:	20005ec8 	.word	0x20005ec8
 8002dd8:	08016f20 	.word	0x08016f20
 8002ddc:	200051d0 	.word	0x200051d0
 8002de0:	08017030 	.word	0x08017030
 8002de4:	08017058 	.word	0x08017058
 8002de8:	08017078 	.word	0x08017078
 8002dec:	08016f80 	.word	0x08016f80
 8002df0:	200051cc 	.word	0x200051cc
 8002df4:	080170a4 	.word	0x080170a4
 8002df8:	080170c4 	.word	0x080170c4
 8002dfc:	080170ec 	.word	0x080170ec

08002e00 <Wind_Dir_Value>:
float voltage;
uint32_t adcValue = 0;
float R_sensor;

//retourne la direction du vent
void Wind_Dir_Value() {
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8002e06:	4878      	ldr	r0, [pc, #480]	@ (8002fe8 <Wind_Dir_Value+0x1e8>)
 8002e08:	f005 fa9e 	bl	8008348 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8002e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e10:	4875      	ldr	r0, [pc, #468]	@ (8002fe8 <Wind_Dir_Value+0x1e8>)
 8002e12:	f005 fb9b 	bl	800854c <HAL_ADC_PollForConversion>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d126      	bne.n	8002e6a <Wind_Dir_Value+0x6a>
        adcValue = HAL_ADC_GetValue(&hadc1);
 8002e1c:	4872      	ldr	r0, [pc, #456]	@ (8002fe8 <Wind_Dir_Value+0x1e8>)
 8002e1e:	f005 fc20 	bl	8008662 <HAL_ADC_GetValue>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4a71      	ldr	r2, [pc, #452]	@ (8002fec <Wind_Dir_Value+0x1ec>)
 8002e26:	6013      	str	r3, [r2, #0]
        voltage = ((float)adcValue / 4095.0) * Vref;
 8002e28:	4b70      	ldr	r3, [pc, #448]	@ (8002fec <Wind_Dir_Value+0x1ec>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	ee07 3a90 	vmov	s15, r3
 8002e30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e34:	ee17 0a90 	vmov	r0, s15
 8002e38:	f7fd fba6 	bl	8000588 <__aeabi_f2d>
 8002e3c:	a366      	add	r3, pc, #408	@ (adr r3, 8002fd8 <Wind_Dir_Value+0x1d8>)
 8002e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e42:	f7fd fd23 	bl	800088c <__aeabi_ddiv>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	a364      	add	r3, pc, #400	@ (adr r3, 8002fe0 <Wind_Dir_Value+0x1e0>)
 8002e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e54:	f7fd fbf0 	bl	8000638 <__aeabi_dmul>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	f7fd fec2 	bl	8000be8 <__aeabi_d2f>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4a62      	ldr	r2, [pc, #392]	@ (8002ff0 <Wind_Dir_Value+0x1f0>)
 8002e68:	6013      	str	r3, [r2, #0]
    }
    HAL_ADC_Stop(&hadc1);
 8002e6a:	485f      	ldr	r0, [pc, #380]	@ (8002fe8 <Wind_Dir_Value+0x1e8>)
 8002e6c:	f005 fb3a 	bl	80084e4 <HAL_ADC_Stop>

    printf("ADC Value: %lu, Voltage: %.2f V\r\n", adcValue, voltage);
 8002e70:	4b5e      	ldr	r3, [pc, #376]	@ (8002fec <Wind_Dir_Value+0x1ec>)
 8002e72:	681c      	ldr	r4, [r3, #0]
 8002e74:	4b5e      	ldr	r3, [pc, #376]	@ (8002ff0 <Wind_Dir_Value+0x1f0>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fb85 	bl	8000588 <__aeabi_f2d>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4621      	mov	r1, r4
 8002e84:	485b      	ldr	r0, [pc, #364]	@ (8002ff4 <Wind_Dir_Value+0x1f4>)
 8002e86:	f011 fcd3 	bl	8014830 <iprintf>

    if (voltage > 0) {
 8002e8a:	4b59      	ldr	r3, [pc, #356]	@ (8002ff0 <Wind_Dir_Value+0x1f0>)
 8002e8c:	edd3 7a00 	vldr	s15, [r3]
 8002e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e98:	f340 8094 	ble.w	8002fc4 <Wind_Dir_Value+0x1c4>
        R_sensor = (externalResistor * (Vref / voltage)) - externalResistor;
 8002e9c:	4b56      	ldr	r3, [pc, #344]	@ (8002ff8 <Wind_Dir_Value+0x1f8>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fd fb71 	bl	8000588 <__aeabi_f2d>
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	460d      	mov	r5, r1
 8002eaa:	4b51      	ldr	r3, [pc, #324]	@ (8002ff0 <Wind_Dir_Value+0x1f0>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd fb6a 	bl	8000588 <__aeabi_f2d>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	a149      	add	r1, pc, #292	@ (adr r1, 8002fe0 <Wind_Dir_Value+0x1e0>)
 8002eba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ebe:	f7fd fce5 	bl	800088c <__aeabi_ddiv>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4620      	mov	r0, r4
 8002ec8:	4629      	mov	r1, r5
 8002eca:	f7fd fbb5 	bl	8000638 <__aeabi_dmul>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4614      	mov	r4, r2
 8002ed4:	461d      	mov	r5, r3
 8002ed6:	4b48      	ldr	r3, [pc, #288]	@ (8002ff8 <Wind_Dir_Value+0x1f8>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fd fb54 	bl	8000588 <__aeabi_f2d>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	f7fd f9ee 	bl	80002c8 <__aeabi_dsub>
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4610      	mov	r0, r2
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	f7fd fe78 	bl	8000be8 <__aeabi_d2f>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	4a40      	ldr	r2, [pc, #256]	@ (8002ffc <Wind_Dir_Value+0x1fc>)
 8002efc:	6013      	str	r3, [r2, #0]
        printf("Resistance: %.2f ohms\r\n", R_sensor);
 8002efe:	4b3f      	ldr	r3, [pc, #252]	@ (8002ffc <Wind_Dir_Value+0x1fc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fb40 	bl	8000588 <__aeabi_f2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	483c      	ldr	r0, [pc, #240]	@ (8003000 <Wind_Dir_Value+0x200>)
 8002f0e:	f011 fc8f 	bl	8014830 <iprintf>


        const char* direction = "Unk"; //si aucune valeur n'est trouvé "unknow"
 8002f12:	4b3c      	ldr	r3, [pc, #240]	@ (8003004 <Wind_Dir_Value+0x204>)
 8002f14:	60fb      	str	r3, [r7, #12]
        float minDifference = 5000.0;  // Initialisation ajustée
 8002f16:	4b3c      	ldr	r3, [pc, #240]	@ (8003008 <Wind_Dir_Value+0x208>)
 8002f18:	60bb      	str	r3, [r7, #8]

        for (int i = 0; i < NUM_POSITIONS; i++) {
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	607b      	str	r3, [r7, #4]
 8002f1e:	e02e      	b.n	8002f7e <Wind_Dir_Value+0x17e>
            float difference = fabs(R_sensor - resistorValues[i]);
 8002f20:	4b36      	ldr	r3, [pc, #216]	@ (8002ffc <Wind_Dir_Value+0x1fc>)
 8002f22:	ed93 7a00 	vldr	s14, [r3]
 8002f26:	4a39      	ldr	r2, [pc, #228]	@ (800300c <Wind_Dir_Value+0x20c>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	edd3 7a00 	vldr	s15, [r3]
 8002f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f36:	eef0 7ae7 	vabs.f32	s15, s15
 8002f3a:	edc7 7a00 	vstr	s15, [r7]
            printf("Checking direction %s: Difference = %.2f ohms\r\n", directionStrings[i], difference);
 8002f3e:	4a34      	ldr	r2, [pc, #208]	@ (8003010 <Wind_Dir_Value+0x210>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002f46:	6838      	ldr	r0, [r7, #0]
 8002f48:	f7fd fb1e 	bl	8000588 <__aeabi_f2d>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4621      	mov	r1, r4
 8002f52:	4830      	ldr	r0, [pc, #192]	@ (8003014 <Wind_Dir_Value+0x214>)
 8002f54:	f011 fc6c 	bl	8014830 <iprintf>
            if (difference < minDifference) {
 8002f58:	ed97 7a00 	vldr	s14, [r7]
 8002f5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f68:	d506      	bpl.n	8002f78 <Wind_Dir_Value+0x178>
                minDifference = difference;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	60bb      	str	r3, [r7, #8]
                direction = directionStrings[i];
 8002f6e:	4a28      	ldr	r2, [pc, #160]	@ (8003010 <Wind_Dir_Value+0x210>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < NUM_POSITIONS; i++) {
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2b0f      	cmp	r3, #15
 8002f82:	ddcd      	ble.n	8002f20 <Wind_Dir_Value+0x120>
            }
        }
		BSP_LCD_SetFont(&Font16); // Police de caractères pour l'affichage
 8002f84:	4824      	ldr	r0, [pc, #144]	@ (8003018 <Wind_Dir_Value+0x218>)
 8002f86:	f003 fc59 	bl	800683c <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(startXD + squareSizeD + spacingD + 20, startYD + 70, (uint8_t*)direction, LEFT_MODE);
 8002f8a:	4b24      	ldr	r3, [pc, #144]	@ (800301c <Wind_Dir_Value+0x21c>)
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	4b23      	ldr	r3, [pc, #140]	@ (8003020 <Wind_Dir_Value+0x220>)
 8002f92:	881b      	ldrh	r3, [r3, #0]
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	4413      	add	r3, r2
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	4b22      	ldr	r3, [pc, #136]	@ (8003024 <Wind_Dir_Value+0x224>)
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3314      	adds	r3, #20
 8002fa6:	b298      	uxth	r0, r3
 8002fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8003028 <Wind_Dir_Value+0x228>)
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3346      	adds	r3, #70	@ 0x46
 8002fb0:	b299      	uxth	r1, r3
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	f003 fcc7 	bl	8006948 <BSP_LCD_DisplayStringAt>
        printf("Detected Wind Direction: %s\r\n", direction);
 8002fba:	68f9      	ldr	r1, [r7, #12]
 8002fbc:	481b      	ldr	r0, [pc, #108]	@ (800302c <Wind_Dir_Value+0x22c>)
 8002fbe:	f011 fc37 	bl	8014830 <iprintf>
    } else {
        printf("Voltage is too low. Check sensor connections.\r\n");
    }

}
 8002fc2:	e002      	b.n	8002fca <Wind_Dir_Value+0x1ca>
        printf("Voltage is too low. Check sensor connections.\r\n");
 8002fc4:	481a      	ldr	r0, [pc, #104]	@ (8003030 <Wind_Dir_Value+0x230>)
 8002fc6:	f011 fc9b 	bl	8014900 <puts>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	f3af 8000 	nop.w
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	40affe00 	.word	0x40affe00
 8002fe0:	66666666 	.word	0x66666666
 8002fe4:	400a6666 	.word	0x400a6666
 8002fe8:	20005c50 	.word	0x20005c50
 8002fec:	20005c40 	.word	0x20005c40
 8002ff0:	20005c3c 	.word	0x20005c3c
 8002ff4:	08017148 	.word	0x08017148
 8002ff8:	20004ec8 	.word	0x20004ec8
 8002ffc:	20005c44 	.word	0x20005c44
 8003000:	0801716c 	.word	0x0801716c
 8003004:	08017184 	.word	0x08017184
 8003008:	459c4000 	.word	0x459c4000
 800300c:	08017320 	.word	0x08017320
 8003010:	20004e88 	.word	0x20004e88
 8003014:	08017188 	.word	0x08017188
 8003018:	20004f0c 	.word	0x20004f0c
 800301c:	20004e82 	.word	0x20004e82
 8003020:	20004e7e 	.word	0x20004e7e
 8003024:	20004e80 	.word	0x20004e80
 8003028:	20004e84 	.word	0x20004e84
 800302c:	080171b8 	.word	0x080171b8
 8003030:	080171d8 	.word	0x080171d8
 8003034:	00000000 	.word	0x00000000

08003038 <Wind_Speed_Value>:
	HAL_TIM_Base_Start_IT(&htim6);
}

//renvoi la valeur de la vitesse du vent moyenne sur 1 minute (à appeler dans la boucle while)
void Wind_Speed_Value()
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0

	if (minute_flag) {
 800303e:	4b32      	ldr	r3, [pc, #200]	@ (8003108 <Wind_Speed_Value+0xd0>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d054      	beq.n	80030f2 <Wind_Speed_Value+0xba>

		  //remise à 0 du timer 2 (mesure de station meteo non detecté pendant 1 min)
			  flag_meteo=0;
 8003048:	4b30      	ldr	r3, [pc, #192]	@ (800310c <Wind_Speed_Value+0xd4>)
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
			  HAL_TIM_Base_Stop(&htim2);        // Arrêter le timer
 800304e:	4830      	ldr	r0, [pc, #192]	@ (8003110 <Wind_Speed_Value+0xd8>)
 8003050:	f00b f9dc 	bl	800e40c <HAL_TIM_Base_Stop>
			  __HAL_TIM_SET_COUNTER(&htim2, 0); // Réinitialiser le compteur à zéro
 8003054:	4b2e      	ldr	r3, [pc, #184]	@ (8003110 <Wind_Speed_Value+0xd8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2200      	movs	r2, #0
 800305a:	625a      	str	r2, [r3, #36]	@ 0x24
			  HAL_TIM_Base_Start(&htim2);       // Redémarrer le timer
 800305c:	482c      	ldr	r0, [pc, #176]	@ (8003110 <Wind_Speed_Value+0xd8>)
 800305e:	f00b f965 	bl	800e32c <HAL_TIM_Base_Start>

		      // Si 1 minute est écoulée, afficher les impulsions
		      //remise à 0 du timer 2 (mesure de station meteo non detecté pendant 1 min)
		      printf("Impulsions sur 1 minute : %lu\r\n", pulse_count);
 8003062:	4b2c      	ldr	r3, [pc, #176]	@ (8003114 <Wind_Speed_Value+0xdc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4619      	mov	r1, r3
 8003068:	482b      	ldr	r0, [pc, #172]	@ (8003118 <Wind_Speed_Value+0xe0>)
 800306a:	f011 fbe1 	bl	8014830 <iprintf>
		      float vitesse_Vent = pulse_count*VITESSE_PAR_IMPULSION_PAR_SECONDE/5;
 800306e:	4b29      	ldr	r3, [pc, #164]	@ (8003114 <Wind_Speed_Value+0xdc>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7fd fa66 	bl	8000544 <__aeabi_ui2d>
 8003078:	a321      	add	r3, pc, #132	@ (adr r3, 8003100 <Wind_Speed_Value+0xc8>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f7fd fadb 	bl	8000638 <__aeabi_dmul>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4610      	mov	r0, r2
 8003088:	4619      	mov	r1, r3
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	4b23      	ldr	r3, [pc, #140]	@ (800311c <Wind_Speed_Value+0xe4>)
 8003090:	f7fd fbfc 	bl	800088c <__aeabi_ddiv>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	f7fd fda4 	bl	8000be8 <__aeabi_d2f>
 80030a0:	4603      	mov	r3, r0
 80030a2:	617b      	str	r3, [r7, #20]
		      printf("vitesse du vent: %.2f Km/h \r\n ", vitesse_Vent);
 80030a4:	6978      	ldr	r0, [r7, #20]
 80030a6:	f7fd fa6f 	bl	8000588 <__aeabi_f2d>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	481c      	ldr	r0, [pc, #112]	@ (8003120 <Wind_Speed_Value+0xe8>)
 80030b0:	f011 fbbe 	bl	8014830 <iprintf>
		      // Réinitialiser le computeur d'impulsions pour la prochaine minute
		      pulse_count = 0;
 80030b4:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <Wind_Speed_Value+0xdc>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]

		      char vent[20];
			  sprintf(vent, "%.2f Km/h", vitesse_Vent);
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7fd fa64 	bl	8000588 <__aeabi_f2d>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4638      	mov	r0, r7
 80030c6:	4917      	ldr	r1, [pc, #92]	@ (8003124 <Wind_Speed_Value+0xec>)
 80030c8:	f011 fc56 	bl	8014978 <siprintf>
			  BSP_LCD_SetFont(&Font16);
 80030cc:	4816      	ldr	r0, [pc, #88]	@ (8003128 <Wind_Speed_Value+0xf0>)
 80030ce:	f003 fbb5 	bl	800683c <BSP_LCD_SetFont>
			  BSP_LCD_DisplayStringAt(startXW + 5, startYW + 60, (uint8_t*)vent, LEFT_MODE);
 80030d2:	2328      	movs	r3, #40	@ 0x28
 80030d4:	3305      	adds	r3, #5
 80030d6:	b298      	uxth	r0, r3
 80030d8:	2350      	movs	r3, #80	@ 0x50
 80030da:	333c      	adds	r3, #60	@ 0x3c
 80030dc:	b299      	uxth	r1, r3
 80030de:	463a      	mov	r2, r7
 80030e0:	2303      	movs	r3, #3
 80030e2:	f003 fc31 	bl	8006948 <BSP_LCD_DisplayStringAt>

		      // Réinitialiser le flag pour le prochain intervalle de 1 minute
		      minute_flag = 0;
 80030e6:	4b08      	ldr	r3, [pc, #32]	@ (8003108 <Wind_Speed_Value+0xd0>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
		      printf("Minute flag reset!\r\n"); // Vérifier que le flag est réinitialisé
 80030ec:	480f      	ldr	r0, [pc, #60]	@ (800312c <Wind_Speed_Value+0xf4>)
 80030ee:	f011 fc07 	bl	8014900 <puts>



			  }
		  //}
}
 80030f2:	bf00      	nop
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	f3af 8000 	nop.w
 8003100:	33333333 	.word	0x33333333
 8003104:	40033333 	.word	0x40033333
 8003108:	20005c4c 	.word	0x20005c4c
 800310c:	20005e95 	.word	0x20005e95
 8003110:	2000607c 	.word	0x2000607c
 8003114:	20005c48 	.word	0x20005c48
 8003118:	08017208 	.word	0x08017208
 800311c:	40140000 	.word	0x40140000
 8003120:	08017228 	.word	0x08017228
 8003124:	08017248 	.word	0x08017248
 8003128:	20004f0c 	.word	0x20004f0c
 800312c:	08017254 	.word	0x08017254

08003130 <HAL_TIM_IC_CaptureCallback>:



//routine de comptage par input capture (PIN PA8)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a08      	ldr	r2, [pc, #32]	@ (8003160 <HAL_TIM_IC_CaptureCallback+0x30>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d108      	bne.n	8003154 <HAL_TIM_IC_CaptureCallback+0x24>
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7f1b      	ldrb	r3, [r3, #28]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d104      	bne.n	8003154 <HAL_TIM_IC_CaptureCallback+0x24>
      //printf("bonjour");
        pulse_count++; // Incrémenter le compteur d'impulsions
 800314a:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <HAL_TIM_IC_CaptureCallback+0x34>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	4a04      	ldr	r2, [pc, #16]	@ (8003164 <HAL_TIM_IC_CaptureCallback+0x34>)
 8003152:	6013      	str	r3, [r2, #0]
        //printf("Pulse captured: %lu\r\n", pulse_count); // Ajouter imprimé pour vérification

    }
  }
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40010000 	.word	0x40010000
 8003164:	20005c48 	.word	0x20005c48

08003168 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800316e:	463b      	mov	r3, r7
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800317a:	4b21      	ldr	r3, [pc, #132]	@ (8003200 <MX_ADC1_Init+0x98>)
 800317c:	4a21      	ldr	r2, [pc, #132]	@ (8003204 <MX_ADC1_Init+0x9c>)
 800317e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003180:	4b1f      	ldr	r3, [pc, #124]	@ (8003200 <MX_ADC1_Init+0x98>)
 8003182:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003186:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003188:	4b1d      	ldr	r3, [pc, #116]	@ (8003200 <MX_ADC1_Init+0x98>)
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800318e:	4b1c      	ldr	r3, [pc, #112]	@ (8003200 <MX_ADC1_Init+0x98>)
 8003190:	2200      	movs	r2, #0
 8003192:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003194:	4b1a      	ldr	r3, [pc, #104]	@ (8003200 <MX_ADC1_Init+0x98>)
 8003196:	2200      	movs	r2, #0
 8003198:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800319a:	4b19      	ldr	r3, [pc, #100]	@ (8003200 <MX_ADC1_Init+0x98>)
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031a2:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <MX_ADC1_Init+0x98>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031a8:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <MX_ADC1_Init+0x98>)
 80031aa:	4a17      	ldr	r2, [pc, #92]	@ (8003208 <MX_ADC1_Init+0xa0>)
 80031ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031ae:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <MX_ADC1_Init+0x98>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80031b4:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <MX_ADC1_Init+0x98>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031ba:	4b11      	ldr	r3, [pc, #68]	@ (8003200 <MX_ADC1_Init+0x98>)
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003200 <MX_ADC1_Init+0x98>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031c8:	480d      	ldr	r0, [pc, #52]	@ (8003200 <MX_ADC1_Init+0x98>)
 80031ca:	f005 f879 	bl	80082c0 <HAL_ADC_Init>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80031d4:	f001 fdca 	bl	8004d6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80031d8:	2300      	movs	r3, #0
 80031da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031dc:	2301      	movs	r3, #1
 80031de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031e4:	463b      	mov	r3, r7
 80031e6:	4619      	mov	r1, r3
 80031e8:	4805      	ldr	r0, [pc, #20]	@ (8003200 <MX_ADC1_Init+0x98>)
 80031ea:	f005 fa47 	bl	800867c <HAL_ADC_ConfigChannel>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80031f4:	f001 fdba 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	20005c50 	.word	0x20005c50
 8003204:	40012000 	.word	0x40012000
 8003208:	0f000001 	.word	0x0f000001

0800320c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	@ 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a15      	ldr	r2, [pc, #84]	@ (8003280 <HAL_ADC_MspInit+0x74>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d123      	bne.n	8003276 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800322e:	4b15      	ldr	r3, [pc, #84]	@ (8003284 <HAL_ADC_MspInit+0x78>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	4a14      	ldr	r2, [pc, #80]	@ (8003284 <HAL_ADC_MspInit+0x78>)
 8003234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003238:	6453      	str	r3, [r2, #68]	@ 0x44
 800323a:	4b12      	ldr	r3, [pc, #72]	@ (8003284 <HAL_ADC_MspInit+0x78>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003246:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <HAL_ADC_MspInit+0x78>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	4a0e      	ldr	r2, [pc, #56]	@ (8003284 <HAL_ADC_MspInit+0x78>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6313      	str	r3, [r2, #48]	@ 0x30
 8003252:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <HAL_ADC_MspInit+0x78>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800325e:	2301      	movs	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003262:	2303      	movs	r3, #3
 8003264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	4805      	ldr	r0, [pc, #20]	@ (8003288 <HAL_ADC_MspInit+0x7c>)
 8003272:	f006 fbf5 	bl	8009a60 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003276:	bf00      	nop
 8003278:	3728      	adds	r7, #40	@ 0x28
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40012000 	.word	0x40012000
 8003284:	40023800 	.word	0x40023800
 8003288:	40020000 	.word	0x40020000

0800328c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003292:	4b10      	ldr	r3, [pc, #64]	@ (80032d4 <MX_DMA_Init+0x48>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	4a0f      	ldr	r2, [pc, #60]	@ (80032d4 <MX_DMA_Init+0x48>)
 8003298:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800329c:	6313      	str	r3, [r2, #48]	@ 0x30
 800329e:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <MX_DMA_Init+0x48>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2100      	movs	r1, #0
 80032ae:	203b      	movs	r0, #59	@ 0x3b
 80032b0:	f005 fd0f 	bl	8008cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80032b4:	203b      	movs	r0, #59	@ 0x3b
 80032b6:	f005 fd28 	bl	8008d0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2100      	movs	r1, #0
 80032be:	2045      	movs	r0, #69	@ 0x45
 80032c0:	f005 fd07 	bl	8008cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80032c4:	2045      	movs	r0, #69	@ 0x45
 80032c6:	f005 fd20 	bl	8008d0a <HAL_NVIC_EnableIRQ>

}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800

080032d8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80032dc:	4b15      	ldr	r3, [pc, #84]	@ (8003334 <MX_DMA2D_Init+0x5c>)
 80032de:	4a16      	ldr	r2, [pc, #88]	@ (8003338 <MX_DMA2D_Init+0x60>)
 80032e0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80032e2:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <MX_DMA2D_Init+0x5c>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80032e8:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <MX_DMA2D_Init+0x5c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80032ee:	4b11      	ldr	r3, [pc, #68]	@ (8003334 <MX_DMA2D_Init+0x5c>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80032f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003334 <MX_DMA2D_Init+0x5c>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80032fa:	4b0e      	ldr	r3, [pc, #56]	@ (8003334 <MX_DMA2D_Init+0x5c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003300:	4b0c      	ldr	r3, [pc, #48]	@ (8003334 <MX_DMA2D_Init+0x5c>)
 8003302:	2200      	movs	r2, #0
 8003304:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8003306:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <MX_DMA2D_Init+0x5c>)
 8003308:	2200      	movs	r2, #0
 800330a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800330c:	4809      	ldr	r0, [pc, #36]	@ (8003334 <MX_DMA2D_Init+0x5c>)
 800330e:	f006 f91b 	bl	8009548 <HAL_DMA2D_Init>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d001      	beq.n	800331c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8003318:	f001 fd28 	bl	8004d6c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800331c:	2101      	movs	r1, #1
 800331e:	4805      	ldr	r0, [pc, #20]	@ (8003334 <MX_DMA2D_Init+0x5c>)
 8003320:	f006 fa70 	bl	8009804 <HAL_DMA2D_ConfigLayer>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800332a:	f001 fd1f 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20005c98 	.word	0x20005c98
 8003338:	4002b000 	.word	0x4002b000

0800333c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a0a      	ldr	r2, [pc, #40]	@ (8003374 <HAL_DMA2D_MspInit+0x38>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10b      	bne.n	8003366 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800334e:	4b0a      	ldr	r3, [pc, #40]	@ (8003378 <HAL_DMA2D_MspInit+0x3c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	4a09      	ldr	r2, [pc, #36]	@ (8003378 <HAL_DMA2D_MspInit+0x3c>)
 8003354:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003358:	6313      	str	r3, [r2, #48]	@ 0x30
 800335a:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <HAL_DMA2D_MspInit+0x3c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8003366:	bf00      	nop
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	4002b000 	.word	0x4002b000
 8003378:	40023800 	.word	0x40023800

0800337c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b088      	sub	sp, #32
 8003380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	611a      	str	r2, [r3, #16]
 8003390:	615a      	str	r2, [r3, #20]
 8003392:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003394:	4b1e      	ldr	r3, [pc, #120]	@ (8003410 <MX_FMC_Init+0x94>)
 8003396:	4a1f      	ldr	r2, [pc, #124]	@ (8003414 <MX_FMC_Init+0x98>)
 8003398:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800339a:	4b1d      	ldr	r3, [pc, #116]	@ (8003410 <MX_FMC_Init+0x94>)
 800339c:	2200      	movs	r2, #0
 800339e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80033a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003410 <MX_FMC_Init+0x94>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80033a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003410 <MX_FMC_Init+0x94>)
 80033a8:	2204      	movs	r2, #4
 80033aa:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80033ac:	4b18      	ldr	r3, [pc, #96]	@ (8003410 <MX_FMC_Init+0x94>)
 80033ae:	2210      	movs	r2, #16
 80033b0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80033b2:	4b17      	ldr	r3, [pc, #92]	@ (8003410 <MX_FMC_Init+0x94>)
 80033b4:	2240      	movs	r2, #64	@ 0x40
 80033b6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80033b8:	4b15      	ldr	r3, [pc, #84]	@ (8003410 <MX_FMC_Init+0x94>)
 80033ba:	2280      	movs	r2, #128	@ 0x80
 80033bc:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80033be:	4b14      	ldr	r3, [pc, #80]	@ (8003410 <MX_FMC_Init+0x94>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80033c4:	4b12      	ldr	r3, [pc, #72]	@ (8003410 <MX_FMC_Init+0x94>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80033ca:	4b11      	ldr	r3, [pc, #68]	@ (8003410 <MX_FMC_Init+0x94>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80033d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003410 <MX_FMC_Init+0x94>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80033d6:	2310      	movs	r3, #16
 80033d8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80033da:	2310      	movs	r3, #16
 80033dc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80033de:	2310      	movs	r3, #16
 80033e0:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80033e2:	2310      	movs	r3, #16
 80033e4:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80033e6:	2310      	movs	r3, #16
 80033e8:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80033ea:	2310      	movs	r3, #16
 80033ec:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80033ee:	2310      	movs	r3, #16
 80033f0:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4806      	ldr	r0, [pc, #24]	@ (8003410 <MX_FMC_Init+0x94>)
 80033f8:	f00a feb0 	bl	800e15c <HAL_SDRAM_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8003402:	f001 fcb3 	bl	8004d6c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003406:	bf00      	nop
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20005cd8 	.word	0x20005cd8
 8003414:	a0000140 	.word	0xa0000140

08003418 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800342c:	4b33      	ldr	r3, [pc, #204]	@ (80034fc <HAL_FMC_MspInit+0xe4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d15e      	bne.n	80034f2 <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8003434:	4b31      	ldr	r3, [pc, #196]	@ (80034fc <HAL_FMC_MspInit+0xe4>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800343a:	4b31      	ldr	r3, [pc, #196]	@ (8003500 <HAL_FMC_MspInit+0xe8>)
 800343c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343e:	4a30      	ldr	r2, [pc, #192]	@ (8003500 <HAL_FMC_MspInit+0xe8>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6393      	str	r3, [r2, #56]	@ 0x38
 8003446:	4b2e      	ldr	r3, [pc, #184]	@ (8003500 <HAL_FMC_MspInit+0xe8>)
 8003448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8003452:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003456:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003460:	2303      	movs	r3, #3
 8003462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003464:	230c      	movs	r3, #12
 8003466:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003468:	1d3b      	adds	r3, r7, #4
 800346a:	4619      	mov	r1, r3
 800346c:	4825      	ldr	r0, [pc, #148]	@ (8003504 <HAL_FMC_MspInit+0xec>)
 800346e:	f006 faf7 	bl	8009a60 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8003472:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003476:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003478:	2302      	movs	r3, #2
 800347a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003480:	2303      	movs	r3, #3
 8003482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003484:	230c      	movs	r3, #12
 8003486:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	4619      	mov	r1, r3
 800348c:	481e      	ldr	r0, [pc, #120]	@ (8003508 <HAL_FMC_MspInit+0xf0>)
 800348e:	f006 fae7 	bl	8009a60 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8003492:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003496:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003498:	2302      	movs	r3, #2
 800349a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a0:	2303      	movs	r3, #3
 80034a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034a4:	230c      	movs	r3, #12
 80034a6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034a8:	1d3b      	adds	r3, r7, #4
 80034aa:	4619      	mov	r1, r3
 80034ac:	4817      	ldr	r0, [pc, #92]	@ (800350c <HAL_FMC_MspInit+0xf4>)
 80034ae:	f006 fad7 	bl	8009a60 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80034b2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80034b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c0:	2303      	movs	r3, #3
 80034c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034c4:	230c      	movs	r3, #12
 80034c6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034c8:	1d3b      	adds	r3, r7, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	4810      	ldr	r0, [pc, #64]	@ (8003510 <HAL_FMC_MspInit+0xf8>)
 80034ce:	f006 fac7 	bl	8009a60 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 80034d2:	232c      	movs	r3, #44	@ 0x2c
 80034d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d6:	2302      	movs	r3, #2
 80034d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034de:	2303      	movs	r3, #3
 80034e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034e2:	230c      	movs	r3, #12
 80034e4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	480a      	ldr	r0, [pc, #40]	@ (8003514 <HAL_FMC_MspInit+0xfc>)
 80034ec:	f006 fab8 	bl	8009a60 <HAL_GPIO_Init>
 80034f0:	e000      	b.n	80034f4 <HAL_FMC_MspInit+0xdc>
    return;
 80034f2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20005d0c 	.word	0x20005d0c
 8003500:	40023800 	.word	0x40023800
 8003504:	40021000 	.word	0x40021000
 8003508:	40021800 	.word	0x40021800
 800350c:	40020c00 	.word	0x40020c00
 8003510:	40021400 	.word	0x40021400
 8003514:	40021c00 	.word	0x40021c00

08003518 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003520:	f7ff ff7a 	bl	8003418 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003524:	bf00      	nop
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b090      	sub	sp, #64	@ 0x40
 8003530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003532:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	609a      	str	r2, [r3, #8]
 800353e:	60da      	str	r2, [r3, #12]
 8003540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003542:	4bb1      	ldr	r3, [pc, #708]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003546:	4ab0      	ldr	r2, [pc, #704]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003548:	f043 0310 	orr.w	r3, r3, #16
 800354c:	6313      	str	r3, [r2, #48]	@ 0x30
 800354e:	4bae      	ldr	r3, [pc, #696]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800355a:	4bab      	ldr	r3, [pc, #684]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355e:	4aaa      	ldr	r2, [pc, #680]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003564:	6313      	str	r3, [r2, #48]	@ 0x30
 8003566:	4ba8      	ldr	r3, [pc, #672]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003572:	4ba5      	ldr	r3, [pc, #660]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	4aa4      	ldr	r2, [pc, #656]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003578:	f043 0302 	orr.w	r3, r3, #2
 800357c:	6313      	str	r3, [r2, #48]	@ 0x30
 800357e:	4ba2      	ldr	r3, [pc, #648]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	623b      	str	r3, [r7, #32]
 8003588:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800358a:	4b9f      	ldr	r3, [pc, #636]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	4a9e      	ldr	r2, [pc, #632]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003590:	f043 0308 	orr.w	r3, r3, #8
 8003594:	6313      	str	r3, [r2, #48]	@ 0x30
 8003596:	4b9c      	ldr	r3, [pc, #624]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	61fb      	str	r3, [r7, #28]
 80035a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a2:	4b99      	ldr	r3, [pc, #612]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	4a98      	ldr	r2, [pc, #608]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ae:	4b96      	ldr	r3, [pc, #600]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	61bb      	str	r3, [r7, #24]
 80035b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ba:	4b93      	ldr	r3, [pc, #588]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	4a92      	ldr	r2, [pc, #584]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c6:	4b90      	ldr	r3, [pc, #576]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80035d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	4a8c      	ldr	r2, [pc, #560]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035de:	4b8a      	ldr	r3, [pc, #552]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80035ea:	4b87      	ldr	r3, [pc, #540]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	4a86      	ldr	r2, [pc, #536]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f6:	4b84      	ldr	r3, [pc, #528]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003602:	4b81      	ldr	r3, [pc, #516]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	4a80      	ldr	r2, [pc, #512]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003608:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800360c:	6313      	str	r3, [r2, #48]	@ 0x30
 800360e:	4b7e      	ldr	r3, [pc, #504]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800361a:	4b7b      	ldr	r3, [pc, #492]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	4a7a      	ldr	r2, [pc, #488]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003620:	f043 0320 	orr.w	r3, r3, #32
 8003624:	6313      	str	r3, [r2, #48]	@ 0x30
 8003626:	4b78      	ldr	r3, [pc, #480]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	f003 0320 	and.w	r3, r3, #32
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003632:	4b75      	ldr	r3, [pc, #468]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	4a74      	ldr	r2, [pc, #464]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800363c:	6313      	str	r3, [r2, #48]	@ 0x30
 800363e:	4b72      	ldr	r3, [pc, #456]	@ (8003808 <MX_GPIO_Init+0x2dc>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003646:	603b      	str	r3, [r7, #0]
 8003648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_RESET);
 800364a:	2200      	movs	r2, #0
 800364c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003650:	486e      	ldr	r0, [pc, #440]	@ (800380c <MX_GPIO_Init+0x2e0>)
 8003652:	f006 fcd5 	bl	800a000 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE4 PE3 PE2 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8003656:	237c      	movs	r3, #124	@ 0x7c
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800365a:	2303      	movs	r3, #3
 800365c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003662:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003666:	4619      	mov	r1, r3
 8003668:	4869      	ldr	r0, [pc, #420]	@ (8003810 <MX_GPIO_Init+0x2e4>)
 800366a:	f006 f9f9 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG12 PG9
                           PG7 PG3 PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
 800366e:	f247 238c 	movw	r3, #29324	@ 0x728c
 8003672:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003674:	2303      	movs	r3, #3
 8003676:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003678:	2300      	movs	r3, #0
 800367a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800367c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003680:	4619      	mov	r1, r3
 8003682:	4864      	ldr	r0, [pc, #400]	@ (8003814 <MX_GPIO_Init+0x2e8>)
 8003684:	f006 f9ec 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB3 PB6
                           PB13 PB12 PB2 PB10
                           PB0 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_6
 8003688:	f64f 437d 	movw	r3, #64637	@ 0xfc7d
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368e:	2303      	movs	r3, #3
 8003690:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003692:	2300      	movs	r3, #0
 8003694:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003696:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800369a:	4619      	mov	r1, r3
 800369c:	485e      	ldr	r0, [pc, #376]	@ (8003818 <MX_GPIO_Init+0x2ec>)
 800369e:	f006 f9df 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80036a2:	f643 03f0 	movw	r3, #14576	@ 0x38f0
 80036a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a8:	2303      	movs	r3, #3
 80036aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b4:	4619      	mov	r1, r3
 80036b6:	4859      	ldr	r0, [pc, #356]	@ (800381c <MX_GPIO_Init+0x2f0>)
 80036b8:	f006 f9d2 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036c2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036c8:	2301      	movs	r3, #1
 80036ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036cc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036d0:	4619      	mov	r1, r3
 80036d2:	4853      	ldr	r0, [pc, #332]	@ (8003820 <MX_GPIO_Init+0x2f4>)
 80036d4:	f006 f9c4 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80036d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036de:	2303      	movs	r3, #3
 80036e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80036e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036ea:	4619      	mov	r1, r3
 80036ec:	484d      	ldr	r0, [pc, #308]	@ (8003824 <MX_GPIO_Init+0x2f8>)
 80036ee:	f006 f9b7 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC9 PC7
                           PC6 PC3 PC0 PC1
                           PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_7
 80036f2:	f640 63ff 	movw	r3, #3839	@ 0xeff
 80036f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f8:	2303      	movs	r3, #3
 80036fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003700:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003704:	4619      	mov	r1, r3
 8003706:	4848      	ldr	r0, [pc, #288]	@ (8003828 <MX_GPIO_Init+0x2fc>)
 8003708:	f006 f9aa 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI3 PI2 PI7
                           PI6 PI12 PI13 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7
 800370c:	f24b 13cc 	movw	r3, #45516	@ 0xb1cc
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003712:	2303      	movs	r3, #3
 8003714:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800371a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800371e:	4619      	mov	r1, r3
 8003720:	4842      	ldr	r0, [pc, #264]	@ (800382c <MX_GPIO_Init+0x300>)
 8003722:	f006 f99d 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003726:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800372a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800372c:	2300      	movs	r3, #0
 800372e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003734:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003738:	4619      	mov	r1, r3
 800373a:	483b      	ldr	r0, [pc, #236]	@ (8003828 <MX_GPIO_Init+0x2fc>)
 800373c:	f006 f990 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK4 PK3 PK1 PK2
                           PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2
 8003740:	231f      	movs	r3, #31
 8003742:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003744:	2303      	movs	r3, #3
 8003746:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800374c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003750:	4619      	mov	r1, r3
 8003752:	4837      	ldr	r0, [pc, #220]	@ (8003830 <MX_GPIO_Init+0x304>)
 8003754:	f006 f984 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA1 PA4 PA2
                           PA6 PA5 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
 8003758:	f240 437e 	movw	r3, #1150	@ 0x47e
 800375c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800375e:	2303      	movs	r3, #3
 8003760:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	2300      	movs	r3, #0
 8003764:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003766:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800376a:	4619      	mov	r1, r3
 800376c:	482c      	ldr	r0, [pc, #176]	@ (8003820 <MX_GPIO_Init+0x2f4>)
 800376e:	f006 f977 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH14 PH4 PH12 PH11
                           PH6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_11
 8003772:	f645 0350 	movw	r3, #22608	@ 0x5850
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003778:	2303      	movs	r3, #3
 800377a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003780:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003784:	4619      	mov	r1, r3
 8003786:	4821      	ldr	r0, [pc, #132]	@ (800380c <MX_GPIO_Init+0x2e0>)
 8003788:	f006 f96a 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = sleep_button_Pin;
 800378c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003790:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003792:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003796:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	2300      	movs	r3, #0
 800379a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(sleep_button_GPIO_Port, &GPIO_InitStruct);
 800379c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037a0:	4619      	mov	r1, r3
 80037a2:	4822      	ldr	r0, [pc, #136]	@ (800382c <MX_GPIO_Init+0x300>)
 80037a4:	f006 f95c 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9;
 80037a8:	f44f 63d8 	mov.w	r3, #1728	@ 0x6c0
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ae:	2303      	movs	r3, #3
 80037b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037b6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037ba:	4619      	mov	r1, r3
 80037bc:	481d      	ldr	r0, [pc, #116]	@ (8003834 <MX_GPIO_Init+0x308>)
 80037be:	f006 f94f 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button_Pin;
 80037c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80037cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ce:	2300      	movs	r3, #0
 80037d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80037d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037d6:	4619      	mov	r1, r3
 80037d8:	4816      	ldr	r0, [pc, #88]	@ (8003834 <MX_GPIO_Init+0x308>)
 80037da:	f006 f941 	bl	8009a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80037de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e4:	2301      	movs	r3, #1
 80037e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e8:	2300      	movs	r3, #0
 80037ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ec:	2300      	movs	r3, #0
 80037ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80037f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037f4:	4619      	mov	r1, r3
 80037f6:	4805      	ldr	r0, [pc, #20]	@ (800380c <MX_GPIO_Init+0x2e0>)
 80037f8:	f006 f932 	bl	8009a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80037fc:	2200      	movs	r2, #0
 80037fe:	2100      	movs	r1, #0
 8003800:	2017      	movs	r0, #23
 8003802:	f005 fa66 	bl	8008cd2 <HAL_NVIC_SetPriority>
 8003806:	e017      	b.n	8003838 <MX_GPIO_Init+0x30c>
 8003808:	40023800 	.word	0x40023800
 800380c:	40021c00 	.word	0x40021c00
 8003810:	40021000 	.word	0x40021000
 8003814:	40021800 	.word	0x40021800
 8003818:	40020400 	.word	0x40020400
 800381c:	40020c00 	.word	0x40020c00
 8003820:	40020000 	.word	0x40020000
 8003824:	40022400 	.word	0x40022400
 8003828:	40020800 	.word	0x40020800
 800382c:	40022000 	.word	0x40022000
 8003830:	40022800 	.word	0x40022800
 8003834:	40021400 	.word	0x40021400
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003838:	2017      	movs	r0, #23
 800383a:	f005 fa66 	bl	8008d0a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800383e:	2200      	movs	r2, #0
 8003840:	2102      	movs	r1, #2
 8003842:	2028      	movs	r0, #40	@ 0x28
 8003844:	f005 fa45 	bl	8008cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003848:	2028      	movs	r0, #40	@ 0x28
 800384a:	f005 fa5e 	bl	8008d0a <HAL_NVIC_EnableIRQ>

}
 800384e:	bf00      	nop
 8003850:	3740      	adds	r7, #64	@ 0x40
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop

08003858 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800385c:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <MX_I2C1_Init+0x74>)
 800385e:	4a1c      	ldr	r2, [pc, #112]	@ (80038d0 <MX_I2C1_Init+0x78>)
 8003860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8003862:	4b1a      	ldr	r3, [pc, #104]	@ (80038cc <MX_I2C1_Init+0x74>)
 8003864:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <MX_I2C1_Init+0x7c>)
 8003866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003868:	4b18      	ldr	r3, [pc, #96]	@ (80038cc <MX_I2C1_Init+0x74>)
 800386a:	2200      	movs	r2, #0
 800386c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800386e:	4b17      	ldr	r3, [pc, #92]	@ (80038cc <MX_I2C1_Init+0x74>)
 8003870:	2201      	movs	r2, #1
 8003872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003874:	4b15      	ldr	r3, [pc, #84]	@ (80038cc <MX_I2C1_Init+0x74>)
 8003876:	2200      	movs	r2, #0
 8003878:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800387a:	4b14      	ldr	r3, [pc, #80]	@ (80038cc <MX_I2C1_Init+0x74>)
 800387c:	2200      	movs	r2, #0
 800387e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003880:	4b12      	ldr	r3, [pc, #72]	@ (80038cc <MX_I2C1_Init+0x74>)
 8003882:	2200      	movs	r2, #0
 8003884:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003886:	4b11      	ldr	r3, [pc, #68]	@ (80038cc <MX_I2C1_Init+0x74>)
 8003888:	2200      	movs	r2, #0
 800388a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <MX_I2C1_Init+0x74>)
 800388e:	2200      	movs	r2, #0
 8003890:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003892:	480e      	ldr	r0, [pc, #56]	@ (80038cc <MX_I2C1_Init+0x74>)
 8003894:	f006 fbe6 	bl	800a064 <HAL_I2C_Init>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800389e:	f001 fa65 	bl	8004d6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038a2:	2100      	movs	r1, #0
 80038a4:	4809      	ldr	r0, [pc, #36]	@ (80038cc <MX_I2C1_Init+0x74>)
 80038a6:	f007 f9a7 	bl	800abf8 <HAL_I2CEx_ConfigAnalogFilter>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80038b0:	f001 fa5c 	bl	8004d6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80038b4:	2100      	movs	r1, #0
 80038b6:	4805      	ldr	r0, [pc, #20]	@ (80038cc <MX_I2C1_Init+0x74>)
 80038b8:	f007 f9e9 	bl	800ac8e <HAL_I2CEx_ConfigDigitalFilter>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80038c2:	f001 fa53 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20005d10 	.word	0x20005d10
 80038d0:	40005400 	.word	0x40005400
 80038d4:	20404768 	.word	0x20404768

080038d8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80038dc:	4b1b      	ldr	r3, [pc, #108]	@ (800394c <MX_I2C3_Init+0x74>)
 80038de:	4a1c      	ldr	r2, [pc, #112]	@ (8003950 <MX_I2C3_Init+0x78>)
 80038e0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80038e2:	4b1a      	ldr	r3, [pc, #104]	@ (800394c <MX_I2C3_Init+0x74>)
 80038e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003954 <MX_I2C3_Init+0x7c>)
 80038e6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80038e8:	4b18      	ldr	r3, [pc, #96]	@ (800394c <MX_I2C3_Init+0x74>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038ee:	4b17      	ldr	r3, [pc, #92]	@ (800394c <MX_I2C3_Init+0x74>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038f4:	4b15      	ldr	r3, [pc, #84]	@ (800394c <MX_I2C3_Init+0x74>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80038fa:	4b14      	ldr	r3, [pc, #80]	@ (800394c <MX_I2C3_Init+0x74>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003900:	4b12      	ldr	r3, [pc, #72]	@ (800394c <MX_I2C3_Init+0x74>)
 8003902:	2200      	movs	r2, #0
 8003904:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003906:	4b11      	ldr	r3, [pc, #68]	@ (800394c <MX_I2C3_Init+0x74>)
 8003908:	2200      	movs	r2, #0
 800390a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800390c:	4b0f      	ldr	r3, [pc, #60]	@ (800394c <MX_I2C3_Init+0x74>)
 800390e:	2200      	movs	r2, #0
 8003910:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003912:	480e      	ldr	r0, [pc, #56]	@ (800394c <MX_I2C3_Init+0x74>)
 8003914:	f006 fba6 	bl	800a064 <HAL_I2C_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800391e:	f001 fa25 	bl	8004d6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003922:	2100      	movs	r1, #0
 8003924:	4809      	ldr	r0, [pc, #36]	@ (800394c <MX_I2C3_Init+0x74>)
 8003926:	f007 f967 	bl	800abf8 <HAL_I2CEx_ConfigAnalogFilter>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003930:	f001 fa1c 	bl	8004d6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003934:	2100      	movs	r1, #0
 8003936:	4805      	ldr	r0, [pc, #20]	@ (800394c <MX_I2C3_Init+0x74>)
 8003938:	f007 f9a9 	bl	800ac8e <HAL_I2CEx_ConfigDigitalFilter>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003942:	f001 fa13 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20005d64 	.word	0x20005d64
 8003950:	40005c00 	.word	0x40005c00
 8003954:	20404768 	.word	0x20404768

08003958 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b0ac      	sub	sp, #176	@ 0xb0
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003960:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003970:	f107 0318 	add.w	r3, r7, #24
 8003974:	2284      	movs	r2, #132	@ 0x84
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f011 f8f5 	bl	8014b68 <memset>
  if(i2cHandle->Instance==I2C1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a44      	ldr	r2, [pc, #272]	@ (8003a94 <HAL_I2C_MspInit+0x13c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d13d      	bne.n	8003a04 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003988:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800398c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800398e:	2300      	movs	r3, #0
 8003990:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003992:	f107 0318 	add.w	r3, r7, #24
 8003996:	4618      	mov	r0, r3
 8003998:	f008 f9a0 	bl	800bcdc <HAL_RCCEx_PeriphCLKConfig>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80039a2:	f001 f9e3 	bl	8004d6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 80039ac:	f043 0302 	orr.w	r3, r3, #2
 80039b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039b2:	4b39      	ldr	r3, [pc, #228]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80039c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039c6:	2312      	movs	r3, #18
 80039c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d2:	2303      	movs	r3, #3
 80039d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039d8:	2304      	movs	r3, #4
 80039da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039de:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80039e2:	4619      	mov	r1, r3
 80039e4:	482d      	ldr	r0, [pc, #180]	@ (8003a9c <HAL_I2C_MspInit+0x144>)
 80039e6:	f006 f83b 	bl	8009a60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 80039f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f6:	4b28      	ldr	r3, [pc, #160]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003a02:	e042      	b.n	8003a8a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a25      	ldr	r2, [pc, #148]	@ (8003aa0 <HAL_I2C_MspInit+0x148>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d13d      	bne.n	8003a8a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003a0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a12:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a1a:	f107 0318 	add.w	r3, r7, #24
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f008 f95c 	bl	800bcdc <HAL_RCCEx_PeriphCLKConfig>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003a2a:	f001 f99f 	bl	8004d6c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a32:	4a19      	ldr	r2, [pc, #100]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 8003a34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a3a:	4b17      	ldr	r3, [pc, #92]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003a46:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8003a4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a4e:	2312      	movs	r3, #18
 8003a50:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a60:	2304      	movs	r3, #4
 8003a62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a66:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	480d      	ldr	r0, [pc, #52]	@ (8003aa4 <HAL_I2C_MspInit+0x14c>)
 8003a6e:	f005 fff7 	bl	8009a60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003a72:	4b09      	ldr	r3, [pc, #36]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 8003a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a76:	4a08      	ldr	r2, [pc, #32]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 8003a78:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a7e:	4b06      	ldr	r3, [pc, #24]	@ (8003a98 <HAL_I2C_MspInit+0x140>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a86:	60bb      	str	r3, [r7, #8]
 8003a88:	68bb      	ldr	r3, [r7, #8]
}
 8003a8a:	bf00      	nop
 8003a8c:	37b0      	adds	r7, #176	@ 0xb0
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40005400 	.word	0x40005400
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40020400 	.word	0x40020400
 8003aa0:	40005c00 	.word	0x40005c00
 8003aa4:	40021c00 	.word	0x40021c00

08003aa8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	@ (8003b0c <HAL_I2C_MspDeInit+0x64>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d110      	bne.n	8003adc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003aba:	4b15      	ldr	r3, [pc, #84]	@ (8003b10 <HAL_I2C_MspDeInit+0x68>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	4a14      	ldr	r2, [pc, #80]	@ (8003b10 <HAL_I2C_MspDeInit+0x68>)
 8003ac0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ac4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003ac6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003aca:	4812      	ldr	r0, [pc, #72]	@ (8003b14 <HAL_I2C_MspDeInit+0x6c>)
 8003acc:	f006 f974 	bl	8009db8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003ad0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003ad4:	480f      	ldr	r0, [pc, #60]	@ (8003b14 <HAL_I2C_MspDeInit+0x6c>)
 8003ad6:	f006 f96f 	bl	8009db8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8003ada:	e013      	b.n	8003b04 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8003b18 <HAL_I2C_MspDeInit+0x70>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d10e      	bne.n	8003b04 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <HAL_I2C_MspDeInit+0x68>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	4a09      	ldr	r2, [pc, #36]	@ (8003b10 <HAL_I2C_MspDeInit+0x68>)
 8003aec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003af0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8003af2:	2180      	movs	r1, #128	@ 0x80
 8003af4:	4809      	ldr	r0, [pc, #36]	@ (8003b1c <HAL_I2C_MspDeInit+0x74>)
 8003af6:	f006 f95f 	bl	8009db8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8003afa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003afe:	4807      	ldr	r0, [pc, #28]	@ (8003b1c <HAL_I2C_MspDeInit+0x74>)
 8003b00:	f006 f95a 	bl	8009db8 <HAL_GPIO_DeInit>
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40005400 	.word	0x40005400
 8003b10:	40023800 	.word	0x40023800
 8003b14:	40020400 	.word	0x40020400
 8003b18:	40005c00 	.word	0x40005c00
 8003b1c:	40021c00 	.word	0x40021c00

08003b20 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08e      	sub	sp, #56	@ 0x38
 8003b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	2234      	movs	r2, #52	@ 0x34
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f011 f81b 	bl	8014b68 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003b32:	4b3a      	ldr	r3, [pc, #232]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b34:	4a3a      	ldr	r2, [pc, #232]	@ (8003c20 <MX_LTDC_Init+0x100>)
 8003b36:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003b38:	4b38      	ldr	r3, [pc, #224]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003b3e:	4b37      	ldr	r3, [pc, #220]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003b44:	4b35      	ldr	r3, [pc, #212]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003b4a:	4b34      	ldr	r3, [pc, #208]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8003b50:	4b32      	ldr	r3, [pc, #200]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8003b56:	4b31      	ldr	r3, [pc, #196]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b58:	2209      	movs	r2, #9
 8003b5a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8003b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b5e:	222b      	movs	r2, #43	@ 0x2b
 8003b60:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8003b62:	4b2e      	ldr	r3, [pc, #184]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b64:	2215      	movs	r2, #21
 8003b66:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8003b68:	4b2c      	ldr	r3, [pc, #176]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b6a:	f240 220b 	movw	r2, #523	@ 0x20b
 8003b6e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8003b70:	4b2a      	ldr	r3, [pc, #168]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b72:	f240 1225 	movw	r2, #293	@ 0x125
 8003b76:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 531;
 8003b78:	4b28      	ldr	r3, [pc, #160]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b7a:	f240 2213 	movw	r2, #531	@ 0x213
 8003b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 297;
 8003b80:	4b26      	ldr	r3, [pc, #152]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b82:	f240 1229 	movw	r2, #297	@ 0x129
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003b88:	4b24      	ldr	r3, [pc, #144]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003b90:	4b22      	ldr	r3, [pc, #136]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003b98:	4b20      	ldr	r3, [pc, #128]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003ba0:	481e      	ldr	r0, [pc, #120]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003ba2:	f007 f8c1 	bl	800ad28 <HAL_LTDC_Init>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003bac:	f001 f8de 	bl	8004d6c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8003bb4:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003bb8:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8003bbe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003bc2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003bc8:	23ff      	movs	r3, #255	@ 0xff
 8003bca:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003bd0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003bd4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003bd6:	2307      	movs	r3, #7
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8003bde:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8003be4:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003be8:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003bfc:	1d3b      	adds	r3, r7, #4
 8003bfe:	2200      	movs	r2, #0
 8003c00:	4619      	mov	r1, r3
 8003c02:	4806      	ldr	r0, [pc, #24]	@ (8003c1c <MX_LTDC_Init+0xfc>)
 8003c04:	f007 f960 	bl	800aec8 <HAL_LTDC_ConfigLayer>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8003c0e:	f001 f8ad 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003c12:	bf00      	nop
 8003c14:	3738      	adds	r7, #56	@ 0x38
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20005db8 	.word	0x20005db8
 8003c20:	40016800 	.word	0x40016800

08003c24 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b0b0      	sub	sp, #192	@ 0xc0
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c2c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	60da      	str	r2, [r3, #12]
 8003c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c40:	2284      	movs	r2, #132	@ 0x84
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f010 ff8f 	bl	8014b68 <memset>
  if(ltdcHandle->Instance==LTDC)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a97      	ldr	r2, [pc, #604]	@ (8003eac <HAL_LTDC_MspInit+0x288>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	f040 8126 	bne.w	8003ea2 <HAL_LTDC_MspInit+0x27e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003c56:	2308      	movs	r3, #8
 8003c58:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8003c5a:	2364      	movs	r3, #100	@ 0x64
 8003c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003c5e:	2304      	movs	r3, #4
 8003c60:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003c62:	2302      	movs	r3, #2
 8003c64:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8003c66:	2300      	movs	r3, #0
 8003c68:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003c6e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c72:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f008 f82f 	bl	800bcdc <HAL_RCCEx_PeriphCLKConfig>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 8003c84:	f001 f872 	bl	8004d6c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003c88:	4b89      	ldr	r3, [pc, #548]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c8c:	4a88      	ldr	r2, [pc, #544]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003c8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c92:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c94:	4b86      	ldr	r3, [pc, #536]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003c96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ca0:	4b83      	ldr	r3, [pc, #524]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	4a82      	ldr	r2, [pc, #520]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003caa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cac:	4b80      	ldr	r3, [pc, #512]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb4:	623b      	str	r3, [r7, #32]
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	4a7c      	ldr	r2, [pc, #496]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003cbe:	f043 0301 	orr.w	r3, r3, #1
 8003cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cc4:	4b7a      	ldr	r3, [pc, #488]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cd0:	4b77      	ldr	r3, [pc, #476]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd4:	4a76      	ldr	r2, [pc, #472]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003cd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cda:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cdc:	4b74      	ldr	r3, [pc, #464]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003ce8:	4b71      	ldr	r3, [pc, #452]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cec:	4a70      	ldr	r2, [pc, #448]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003cee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003cf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cf4:	4b6e      	ldr	r3, [pc, #440]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d00:	4b6b      	ldr	r3, [pc, #428]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	4a6a      	ldr	r2, [pc, #424]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003d06:	f043 0308 	orr.w	r3, r3, #8
 8003d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d0c:	4b68      	ldr	r3, [pc, #416]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d18:	4b65      	ldr	r3, [pc, #404]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1c:	4a64      	ldr	r2, [pc, #400]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d22:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d24:	4b62      	ldr	r3, [pc, #392]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003d26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d30:	4b5f      	ldr	r3, [pc, #380]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	4a5e      	ldr	r2, [pc, #376]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003d36:	f043 0302 	orr.w	r3, r3, #2
 8003d3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8003eb0 <HAL_LTDC_MspInit+0x28c>)
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
    PI14     ------> LTDC_CLK
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    PB1     ------> LTDC_R6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8003d48:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8003d4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d50:	2302      	movs	r3, #2
 8003d52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d62:	230e      	movs	r3, #14
 8003d64:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d68:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4851      	ldr	r0, [pc, #324]	@ (8003eb4 <HAL_LTDC_MspInit+0x290>)
 8003d70:	f005 fe76 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8003d74:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003d78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d82:	2300      	movs	r3, #0
 8003d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d8e:	230e      	movs	r3, #14
 8003d90:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d94:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003d98:	4619      	mov	r1, r3
 8003d9a:	4847      	ldr	r0, [pc, #284]	@ (8003eb8 <HAL_LTDC_MspInit+0x294>)
 8003d9c:	f005 fe60 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_1
 8003da0:	f244 6333 	movw	r3, #17971	@ 0x4633
 8003da4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da8:	2302      	movs	r3, #2
 8003daa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dae:	2300      	movs	r3, #0
 8003db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003dba:	230e      	movs	r3, #14
 8003dbc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003dc0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	483d      	ldr	r0, [pc, #244]	@ (8003ebc <HAL_LTDC_MspInit+0x298>)
 8003dc8:	f005 fe4a 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8003dcc:	23e0      	movs	r3, #224	@ 0xe0
 8003dce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003de4:	230e      	movs	r3, #14
 8003de6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003dea:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003dee:	4619      	mov	r1, r3
 8003df0:	4833      	ldr	r0, [pc, #204]	@ (8003ec0 <HAL_LTDC_MspInit+0x29c>)
 8003df2:	f005 fe35 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfe:	2302      	movs	r3, #2
 8003e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003e10:	2309      	movs	r3, #9
 8003e12:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e16:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4825      	ldr	r0, [pc, #148]	@ (8003eb4 <HAL_LTDC_MspInit+0x290>)
 8003e1e:	f005 fe1f 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003e22:	2308      	movs	r3, #8
 8003e24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e3a:	230e      	movs	r3, #14
 8003e3c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e40:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003e44:	4619      	mov	r1, r3
 8003e46:	481f      	ldr	r0, [pc, #124]	@ (8003ec4 <HAL_LTDC_MspInit+0x2a0>)
 8003e48:	f005 fe0a 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 8003e4c:	f44f 4322 	mov.w	r3, #41472	@ 0xa200
 8003e50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	2302      	movs	r3, #2
 8003e56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e66:	230e      	movs	r3, #14
 8003e68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003e6c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003e70:	4619      	mov	r1, r3
 8003e72:	4815      	ldr	r0, [pc, #84]	@ (8003ec8 <HAL_LTDC_MspInit+0x2a4>)
 8003e74:	f005 fdf4 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7e:	2302      	movs	r3, #2
 8003e80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003e90:	2309      	movs	r3, #9
 8003e92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e96:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	480b      	ldr	r0, [pc, #44]	@ (8003ecc <HAL_LTDC_MspInit+0x2a8>)
 8003e9e:	f005 fddf 	bl	8009a60 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003ea2:	bf00      	nop
 8003ea4:	37c0      	adds	r7, #192	@ 0xc0
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	40016800 	.word	0x40016800
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	40021800 	.word	0x40021800
 8003eb8:	40020000 	.word	0x40020000
 8003ebc:	40022000 	.word	0x40022000
 8003ec0:	40022800 	.word	0x40022800
 8003ec4:	40020c00 	.word	0x40020c00
 8003ec8:	40021c00 	.word	0x40021c00
 8003ecc:	40020400 	.word	0x40020400

08003ed0 <getRTCDateStr>:

/**
 * @brief Récupère la date formatée depuis la RTC
 * @param dateStr: buffer pour stocker la chaîne formatée
 */
void getRTCDateStr(char* dateStr) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	6078      	str	r0, [r7, #4]
    // Lecture de l'heure (nécessaire avant la date)
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003ed8:	2200      	movs	r2, #0
 8003eda:	490d      	ldr	r1, [pc, #52]	@ (8003f10 <getRTCDateStr+0x40>)
 8003edc:	480d      	ldr	r0, [pc, #52]	@ (8003f14 <getRTCDateStr+0x44>)
 8003ede:	f008 fc0b 	bl	800c6f8 <HAL_RTC_GetTime>
    // Lecture de la date
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	490c      	ldr	r1, [pc, #48]	@ (8003f18 <getRTCDateStr+0x48>)
 8003ee6:	480b      	ldr	r0, [pc, #44]	@ (8003f14 <getRTCDateStr+0x44>)
 8003ee8:	f008 fce8 	bl	800c8bc <HAL_RTC_GetDate>

    // Format: "Jour JJ/MM/AAAA"
    sprintf(dateStr, "%02d/%02d/20%02d",
            sDate.Date,
 8003eec:	4b0a      	ldr	r3, [pc, #40]	@ (8003f18 <getRTCDateStr+0x48>)
 8003eee:	789b      	ldrb	r3, [r3, #2]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8003ef0:	461a      	mov	r2, r3
            sDate.Month,
 8003ef2:	4b09      	ldr	r3, [pc, #36]	@ (8003f18 <getRTCDateStr+0x48>)
 8003ef4:	785b      	ldrb	r3, [r3, #1]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8003ef6:	4619      	mov	r1, r3
            sDate.Year);
 8003ef8:	4b07      	ldr	r3, [pc, #28]	@ (8003f18 <getRTCDateStr+0x48>)
 8003efa:	78db      	ldrb	r3, [r3, #3]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	460b      	mov	r3, r1
 8003f00:	4906      	ldr	r1, [pc, #24]	@ (8003f1c <getRTCDateStr+0x4c>)
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f010 fd38 	bl	8014978 <siprintf>
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	2000510c 	.word	0x2000510c
 8003f14:	20005ec8 	.word	0x20005ec8
 8003f18:	20005120 	.word	0x20005120
 8003f1c:	08017268 	.word	0x08017268

08003f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f26:	f004 f941 	bl	80081ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f2a:	f000 fdc3 	bl	8004ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f2e:	f7ff fafd 	bl	800352c <MX_GPIO_Init>
  MX_DMA_Init();
 8003f32:	f7ff f9ab 	bl	800328c <MX_DMA_Init>
  MX_DMA2D_Init();
 8003f36:	f7ff f9cf 	bl	80032d8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8003f3a:	f7ff fa1f 	bl	800337c <MX_FMC_Init>
  MX_LTDC_Init();
 8003f3e:	f7ff fdef 	bl	8003b20 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8003f42:	f001 fde3 	bl	8005b0c <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8003f46:	f7ff fcc7 	bl	80038d8 <MX_I2C3_Init>
  MX_TIM3_Init();
 8003f4a:	f001 fb73 	bl	8005634 <MX_TIM3_Init>
  MX_RTC_Init();
 8003f4e:	f000 ff13 	bl	8004d78 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8003f52:	f000 ffdd 	bl	8004f10 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8003f56:	f7ff fc7f 	bl	8003858 <MX_I2C1_Init>
  MX_FATFS_Init();
 8003f5a:	f00d f941 	bl	80111e0 <MX_FATFS_Init>
  MX_ADC1_Init();
 8003f5e:	f7ff f903 	bl	8003168 <MX_ADC1_Init>
  MX_TIM1_Init();
 8003f62:	f001 fabb 	bl	80054dc <MX_TIM1_Init>
  MX_TIM6_Init();
 8003f66:	f001 fc07 	bl	8005778 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003f6a:	f001 fc3d 	bl	80057e8 <MX_TIM7_Init>
  MX_TIM5_Init();
 8003f6e:	f001 fbb1 	bl	80056d4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8003f72:	f001 fc71 	bl	8005858 <MX_TIM8_Init>
  MX_TIM2_Init();
 8003f76:	f001 fb0b 	bl	8005590 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8003f7a:	f002 fae7 	bl	800654c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, SDRAM_DEVICE_ADDR);
 8003f7e:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8003f82:	2001      	movs	r0, #1
 8003f84:	f002 fb7a 	bl	800667c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SetLayerVisible(LTDC_ACTIVE_LAYER, ENABLE);
 8003f88:	2101      	movs	r1, #1
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f002 fbe6 	bl	800675c <BSP_LCD_SetLayerVisible>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003f90:	48a2      	ldr	r0, [pc, #648]	@ (800421c <main+0x2fc>)
 8003f92:	f002 fc53 	bl	800683c <BSP_LCD_SetFont>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8003f96:	2001      	movs	r0, #1
 8003f98:	f002 fbd0 	bl	800673c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	f002 fc66 	bl	8006870 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa8:	f002 fc2e 	bl	8006808 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003fac:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003fb0:	f002 fc12 	bl	80067d8 <BSP_LCD_SetTextColor>

  init_HumTemp();
 8003fb4:	f7fe f98c 	bl	80022d0 <init_HumTemp>
  init_Pression();
 8003fb8:	f7fe fb72 	bl	80026a0 <init_Pression>
  //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
  TouchTimer_Init();
 8003fbc:	f000 fdec 	bl	8004b98 <TouchTimer_Init>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4897      	ldr	r0, [pc, #604]	@ (8004220 <main+0x300>)
 8003fc4:	f00a fb48 	bl	800e658 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8003fc8:	4896      	ldr	r0, [pc, #600]	@ (8004224 <main+0x304>)
 8003fca:	f00a fa47 	bl	800e45c <HAL_TIM_Base_Start_IT>

  __HAL_TIM_SET_COUNTER(&htim5, 0);           // Réinitialise le compteur à 0
 8003fce:	4b96      	ldr	r3, [pc, #600]	@ (8004228 <main+0x308>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE); // Efface le drapeau d'interruption
 8003fd6:	4b94      	ldr	r3, [pc, #592]	@ (8004228 <main+0x308>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f06f 0201 	mvn.w	r2, #1
 8003fde:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim5);
 8003fe0:	4891      	ldr	r0, [pc, #580]	@ (8004228 <main+0x308>)
 8003fe2:	f00a fa3b 	bl	800e45c <HAL_TIM_Base_Start_IT>

  __HAL_TIM_SET_COUNTER(&htim8, 0);           // Réinitialise le compteur à 0
 8003fe6:	4b91      	ldr	r3, [pc, #580]	@ (800422c <main+0x30c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2200      	movs	r2, #0
 8003fec:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE); // Efface le drapeau d'interruption
 8003fee:	4b8f      	ldr	r3, [pc, #572]	@ (800422c <main+0x30c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f06f 0201 	mvn.w	r2, #1
 8003ff6:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim8);
 8003ff8:	488c      	ldr	r0, [pc, #560]	@ (800422c <main+0x30c>)
 8003ffa:	f00a fa2f 	bl	800e45c <HAL_TIM_Base_Start_IT>

  __HAL_TIM_SET_COUNTER(&htim2, 0);           // Réinitialise le compteur à 0
 8003ffe:	4b8c      	ldr	r3, [pc, #560]	@ (8004230 <main+0x310>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE); // Efface le drapeau d'interruption
 8004006:	4b8a      	ldr	r3, [pc, #552]	@ (8004230 <main+0x310>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f06f 0201 	mvn.w	r2, #1
 800400e:	611a      	str	r2, [r3, #16]
  HAL_TIM_Base_Start_IT(&htim2);
 8004010:	4887      	ldr	r0, [pc, #540]	@ (8004230 <main+0x310>)
 8004012:	f00a fa23 	bl	800e45c <HAL_TIM_Base_Start_IT>

  init_sd_logging();
 8004016:	f7fe fcfb 	bl	8002a10 <init_sd_logging>
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
         //machine d' etat de l'inteface graphique
         if (needRedraw) {
 800401a:	4b86      	ldr	r3, [pc, #536]	@ (8004234 <main+0x314>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d04f      	beq.n	80040c2 <main+0x1a2>
             switch (flag) {
 8004022:	4b85      	ldr	r3, [pc, #532]	@ (8004238 <main+0x318>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b09      	cmp	r3, #9
 8004028:	f200 809d 	bhi.w	8004166 <main+0x246>
 800402c:	a201      	add	r2, pc, #4	@ (adr r2, 8004034 <main+0x114>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	0800405d 	.word	0x0800405d
 8004038:	08004069 	.word	0x08004069
 800403c:	08004075 	.word	0x08004075
 8004040:	08004081 	.word	0x08004081
 8004044:	0800408d 	.word	0x0800408d
 8004048:	08004099 	.word	0x08004099
 800404c:	0800409f 	.word	0x0800409f
 8004050:	080040a5 	.word	0x080040a5
 8004054:	080040b1 	.word	0x080040b1
 8004058:	080040b7 	.word	0x080040b7
                 case 0:
                     drawMenuPage();
 800405c:	f7fc ffe0 	bl	8001020 <drawMenuPage>
                     needRedraw = 0; // Reset the redraw flag
 8004060:	4b74      	ldr	r3, [pc, #464]	@ (8004234 <main+0x314>)
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
                     break;
 8004066:	e07e      	b.n	8004166 <main+0x246>

                 case 1:
                	 drawTempHumidRainPage();
 8004068:	f7fd f8ac 	bl	80011c4 <drawTempHumidRainPage>
                     needRedraw = 0; // Reset the redraw flag
 800406c:	4b71      	ldr	r3, [pc, #452]	@ (8004234 <main+0x314>)
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
                     break;
 8004072:	e078      	b.n	8004166 <main+0x246>

                 case 2:
                      drawWindDirPressurePage();
 8004074:	f7fd f934 	bl	80012e0 <drawWindDirPressurePage>
                      needRedraw = 0; // Reset the redraw flag
 8004078:	4b6e      	ldr	r3, [pc, #440]	@ (8004234 <main+0x314>)
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
                      break;
 800407e:	e072      	b.n	8004166 <main+0x246>

                 case 3:
                      drawSettingsPage();
 8004080:	f7fd f99a 	bl	80013b8 <drawSettingsPage>
                      needRedraw = 0; // Reset the redraw flag
 8004084:	4b6b      	ldr	r3, [pc, #428]	@ (8004234 <main+0x314>)
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
                      break;
 800408a:	e06c      	b.n	8004166 <main+0x246>

                  case 4:
                      drawCreditsPage();
 800408c:	f7fd f85a 	bl	8001144 <drawCreditsPage>
                      needRedraw = 0; // Reset the redraw flag
 8004090:	4b68      	ldr	r3, [pc, #416]	@ (8004234 <main+0x314>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
                      break;
 8004096:	e066      	b.n	8004166 <main+0x246>

                  case 5:
                	  valeur_graph_TempH();
 8004098:	f7fe fa42 	bl	8002520 <valeur_graph_TempH>
                      //needRedraw = 0; // Reset the redraw flag
                      break;
 800409c:	e063      	b.n	8004166 <main+0x246>

                  case 6:
                	  value_humidity_graph();
 800409e:	f7fe fa77 	bl	8002590 <value_humidity_graph>
                      //needRedraw = 0; // Reset the redraw flag
                      break;
 80040a2:	e060      	b.n	8004166 <main+0x246>

                  case 7:
                	  drawTempHumGraphPage();
 80040a4:	f7fd faea 	bl	800167c <drawTempHumGraphPage>
                      needRedraw = 0; // Reset the redraw flag
 80040a8:	4b62      	ldr	r3, [pc, #392]	@ (8004234 <main+0x314>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
                      break;
 80040ae:	e05a      	b.n	8004166 <main+0x246>

                  case 8:
                	  manage_pressure_graph();
 80040b0:	f7fe fbc6 	bl	8002840 <manage_pressure_graph>
                      //needRedraw = 0; // Reset the redraw flag
                      break;
 80040b4:	e057      	b.n	8004166 <main+0x246>

                  case 9:
                	  drawRainPressGraphPage();
 80040b6:	f7fd fb27 	bl	8001708 <drawRainPressGraphPage>
                      needRedraw = 0; // Reset the redraw flag
 80040ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004234 <main+0x314>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
                      break;
 80040c0:	e051      	b.n	8004166 <main+0x246>
                }
         }

         //affichage des valeurs toutes les 5 secondes
         else if(time_IRQ_acquisition)
 80040c2:	4b5e      	ldr	r3, [pc, #376]	@ (800423c <main+0x31c>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d022      	beq.n	8004110 <main+0x1f0>
         {
			 if(flag==1){
 80040ca:	4b5b      	ldr	r3, [pc, #364]	@ (8004238 <main+0x318>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d10b      	bne.n	80040ea <main+0x1ca>
					 valeur_TempH();
 80040d2:	f7fe f9d5 	bl	8002480 <valeur_TempH>
					 valeur_Hum();
 80040d6:	f7fe f961 	bl	800239c <valeur_Hum>
					 if(flag_meteo==0){
 80040da:	4b59      	ldr	r3, [pc, #356]	@ (8004240 <main+0x320>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d111      	bne.n	8004108 <main+0x1e8>
						 Draw_Rain_Measure_Value();
 80040e4:	f7fe fc08 	bl	80028f8 <Draw_Rain_Measure_Value>
 80040e8:	e00e      	b.n	8004108 <main+0x1e8>
					 }
				 }

  	  	  	 else if(flag==2){
 80040ea:	4b53      	ldr	r3, [pc, #332]	@ (8004238 <main+0x318>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d10a      	bne.n	8004108 <main+0x1e8>
  	  	  		 valeur_Pression();
 80040f2:	f7fe fb17 	bl	8002724 <valeur_Pression>
  	  	  		 if(flag_meteo==0){
 80040f6:	4b52      	ldr	r3, [pc, #328]	@ (8004240 <main+0x320>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d103      	bne.n	8004108 <main+0x1e8>
					 Wind_Dir_Value();
 8004100:	f7fe fe7e 	bl	8002e00 <Wind_Dir_Value>
					 Wind_Speed_Value();
 8004104:	f7fe ff98 	bl	8003038 <Wind_Speed_Value>
  	  	  		 }
  			 }

			 time_IRQ_acquisition=0;
 8004108:	4b4c      	ldr	r3, [pc, #304]	@ (800423c <main+0x31c>)
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e02a      	b.n	8004166 <main+0x246>
         }

		 //condition de mise en sommeil et de réveil
		 else if (flag_IRQ_sleep == 1) {
 8004110:	4b4c      	ldr	r3, [pc, #304]	@ (8004244 <main+0x324>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d126      	bne.n	8004166 <main+0x246>
			BSP_LCD_DisplayOff();
 8004118:	f003 f9b8 	bl	800748c <BSP_LCD_DisplayOff>
			printf("Entrée en sommeil\r\n");
 800411c:	484a      	ldr	r0, [pc, #296]	@ (8004248 <main+0x328>)
 800411e:	f010 fbef 	bl	8014900 <puts>

			// Entrer en mode STOP
			HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8004122:	2101      	movs	r1, #1
 8004124:	2000      	movs	r0, #0
 8004126:	f007 f8c5 	bl	800b2b4 <HAL_PWR_EnterSTOPMode>
			//HAL_SuspendTick() et HAL_ResumeTick() non utilisé pour la RTC;


			//reactivation et redessinage de l'interface
			SystemClock_Config(); // Reconfigure les horloges
 800412a:	f000 fcc3 	bl	8004ab4 <SystemClock_Config>
			BSP_LCD_Init();
 800412e:	f002 fa0d 	bl	800654c <BSP_LCD_Init>
			BSP_LCD_DisplayOn();  // Rallume l'écran
 8004132:	f003 f98d 	bl	8007450 <BSP_LCD_DisplayOn>
			BSP_LCD_SetFont(&Font16); // Police de caractères pour l'affichage
 8004136:	4845      	ldr	r0, [pc, #276]	@ (800424c <main+0x32c>)
 8004138:	f002 fb80 	bl	800683c <BSP_LCD_SetFont>

			needRedraw = 1;
 800413c:	4b3d      	ldr	r3, [pc, #244]	@ (8004234 <main+0x314>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]

			//redémarrage du compteur
			HAL_TIM_Base_Stop_IT(&htim5);  // Arrêter le timer en mode veille
 8004142:	4839      	ldr	r0, [pc, #228]	@ (8004228 <main+0x308>)
 8004144:	f00a fa02 	bl	800e54c <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim5, 0);  // Réinitialiser le compteur du timer
 8004148:	4b37      	ldr	r3, [pc, #220]	@ (8004228 <main+0x308>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2200      	movs	r2, #0
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24
			__HAL_TIM_CLEAR_FLAG(&htim5, TIM_FLAG_UPDATE); // Efface le drapeau d'interruption
 8004150:	4b35      	ldr	r3, [pc, #212]	@ (8004228 <main+0x308>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0201 	mvn.w	r2, #1
 8004158:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim5);  // Redémarrer le timer
 800415a:	4833      	ldr	r0, [pc, #204]	@ (8004228 <main+0x308>)
 800415c:	f00a f97e 	bl	800e45c <HAL_TIM_Base_Start_IT>
			printf("Réveil de l'écran\r\n");
 8004160:	483b      	ldr	r0, [pc, #236]	@ (8004250 <main+0x330>)
 8004162:	f010 fbcd 	bl	8014900 <puts>

  	  	 }

         //changement d'état par interruption sur bouton du touch screen
         if (TS_State.touchDetected && !debounce) {
 8004166:	4b3b      	ldr	r3, [pc, #236]	@ (8004254 <main+0x334>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8482 	beq.w	8004a76 <main+0xb56>
 8004172:	4b39      	ldr	r3, [pc, #228]	@ (8004258 <main+0x338>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	f040 847d 	bne.w	8004a76 <main+0xb56>

        	 debounce=1;
 800417c:	4b36      	ldr	r3, [pc, #216]	@ (8004258 <main+0x338>)
 800417e:	2201      	movs	r2, #1
 8004180:	601a      	str	r2, [r3, #0]
			   //hum Temp Rain button
			  if (flag == 0 && x > 40 && x < 220 && y > 60 && y < 220) {
 8004182:	4b2d      	ldr	r3, [pc, #180]	@ (8004238 <main+0x318>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11b      	bne.n	80041c2 <main+0x2a2>
 800418a:	4b34      	ldr	r3, [pc, #208]	@ (800425c <main+0x33c>)
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29b      	uxth	r3, r3
 8004190:	2b28      	cmp	r3, #40	@ 0x28
 8004192:	d916      	bls.n	80041c2 <main+0x2a2>
 8004194:	4b31      	ldr	r3, [pc, #196]	@ (800425c <main+0x33c>)
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	2bdb      	cmp	r3, #219	@ 0xdb
 800419c:	d811      	bhi.n	80041c2 <main+0x2a2>
 800419e:	4b30      	ldr	r3, [pc, #192]	@ (8004260 <main+0x340>)
 80041a0:	881b      	ldrh	r3, [r3, #0]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b3c      	cmp	r3, #60	@ 0x3c
 80041a6:	d90c      	bls.n	80041c2 <main+0x2a2>
 80041a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004260 <main+0x340>)
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2bdb      	cmp	r3, #219	@ 0xdb
 80041b0:	d807      	bhi.n	80041c2 <main+0x2a2>
				  flag = 1;
 80041b2:	4b21      	ldr	r3, [pc, #132]	@ (8004238 <main+0x318>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
				  needRedraw = 1; // Set the redraw flag
 80041b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004234 <main+0x314>)
 80041ba:	2201      	movs	r2, #1
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	f000 bc4f 	b.w	8004a60 <main+0xb40>

			  //return menu button
			  } else if ((flag == 1 || flag == 2 || flag == 3 || flag == 4) && x > 10 && x < 40 && y > 10 && y < 40) {
 80041c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004238 <main+0x318>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d00b      	beq.n	80041e2 <main+0x2c2>
 80041ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004238 <main+0x318>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d007      	beq.n	80041e2 <main+0x2c2>
 80041d2:	4b19      	ldr	r3, [pc, #100]	@ (8004238 <main+0x318>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d003      	beq.n	80041e2 <main+0x2c2>
 80041da:	4b17      	ldr	r3, [pc, #92]	@ (8004238 <main+0x318>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d140      	bne.n	8004264 <main+0x344>
 80041e2:	4b1e      	ldr	r3, [pc, #120]	@ (800425c <main+0x33c>)
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b0a      	cmp	r3, #10
 80041ea:	d93b      	bls.n	8004264 <main+0x344>
 80041ec:	4b1b      	ldr	r3, [pc, #108]	@ (800425c <main+0x33c>)
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b27      	cmp	r3, #39	@ 0x27
 80041f4:	d836      	bhi.n	8004264 <main+0x344>
 80041f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004260 <main+0x340>)
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b0a      	cmp	r3, #10
 80041fe:	d931      	bls.n	8004264 <main+0x344>
 8004200:	4b17      	ldr	r3, [pc, #92]	@ (8004260 <main+0x340>)
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b27      	cmp	r3, #39	@ 0x27
 8004208:	d82c      	bhi.n	8004264 <main+0x344>
				  flag = 0;
 800420a:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <main+0x318>)
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
				  needRedraw = 1; // Set the redraw flag
 8004210:	4b08      	ldr	r3, [pc, #32]	@ (8004234 <main+0x314>)
 8004212:	2201      	movs	r2, #1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f000 bc23 	b.w	8004a60 <main+0xb40>
 800421a:	bf00      	nop
 800421c:	20004efc 	.word	0x20004efc
 8004220:	20006030 	.word	0x20006030
 8004224:	200061ac 	.word	0x200061ac
 8004228:	20006114 	.word	0x20006114
 800422c:	200061f8 	.word	0x200061f8
 8004230:	2000607c 	.word	0x2000607c
 8004234:	20004ecc 	.word	0x20004ecc
 8004238:	20005e94 	.word	0x20005e94
 800423c:	20005e97 	.word	0x20005e97
 8004240:	20005e95 	.word	0x20005e95
 8004244:	20005e98 	.word	0x20005e98
 8004248:	0801727c 	.word	0x0801727c
 800424c:	20004f0c 	.word	0x20004f0c
 8004250:	08017290 	.word	0x08017290
 8004254:	20005e60 	.word	0x20005e60
 8004258:	20005e90 	.word	0x20005e90
 800425c:	20005e8c 	.word	0x20005e8c
 8004260:	20005e8e 	.word	0x20005e8e

			   //wind dir pressure button
			  } else if (flag == 0 && x > 260 && x < 440 && y > 60 && y < 220) {
 8004264:	4b81      	ldr	r3, [pc, #516]	@ (800446c <main+0x54c>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d11c      	bne.n	80042a6 <main+0x386>
 800426c:	4b80      	ldr	r3, [pc, #512]	@ (8004470 <main+0x550>)
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004276:	d916      	bls.n	80042a6 <main+0x386>
 8004278:	4b7d      	ldr	r3, [pc, #500]	@ (8004470 <main+0x550>)
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8004282:	d210      	bcs.n	80042a6 <main+0x386>
 8004284:	4b7b      	ldr	r3, [pc, #492]	@ (8004474 <main+0x554>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b3c      	cmp	r3, #60	@ 0x3c
 800428c:	d90b      	bls.n	80042a6 <main+0x386>
 800428e:	4b79      	ldr	r3, [pc, #484]	@ (8004474 <main+0x554>)
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	2bdb      	cmp	r3, #219	@ 0xdb
 8004296:	d806      	bhi.n	80042a6 <main+0x386>
				  flag = 2;
 8004298:	4b74      	ldr	r3, [pc, #464]	@ (800446c <main+0x54c>)
 800429a:	2202      	movs	r2, #2
 800429c:	701a      	strb	r2, [r3, #0]
				  needRedraw = 1; // Set the redraw flag
 800429e:	4b76      	ldr	r3, [pc, #472]	@ (8004478 <main+0x558>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e3dc      	b.n	8004a60 <main+0xb40>

			   //setting button
			  } else if (flag == 0 && x > 438 && x < 480 && y > 235 && y < 272) {
 80042a6:	4b71      	ldr	r3, [pc, #452]	@ (800446c <main+0x54c>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d11d      	bne.n	80042ea <main+0x3ca>
 80042ae:	4b70      	ldr	r3, [pc, #448]	@ (8004470 <main+0x550>)
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	f5b3 7fdb 	cmp.w	r3, #438	@ 0x1b6
 80042b8:	d917      	bls.n	80042ea <main+0x3ca>
 80042ba:	4b6d      	ldr	r3, [pc, #436]	@ (8004470 <main+0x550>)
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80042c4:	d211      	bcs.n	80042ea <main+0x3ca>
 80042c6:	4b6b      	ldr	r3, [pc, #428]	@ (8004474 <main+0x554>)
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2beb      	cmp	r3, #235	@ 0xeb
 80042ce:	d90c      	bls.n	80042ea <main+0x3ca>
 80042d0:	4b68      	ldr	r3, [pc, #416]	@ (8004474 <main+0x554>)
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 80042da:	d206      	bcs.n	80042ea <main+0x3ca>
				  flag = 3;
 80042dc:	4b63      	ldr	r3, [pc, #396]	@ (800446c <main+0x54c>)
 80042de:	2203      	movs	r2, #3
 80042e0:	701a      	strb	r2, [r3, #0]
				  needRedraw = 1; // Set the redraw flag
 80042e2:	4b65      	ldr	r3, [pc, #404]	@ (8004478 <main+0x558>)
 80042e4:	2201      	movs	r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e3ba      	b.n	8004a60 <main+0xb40>

			  //credits button
			  } else if (flag == 0 && x > 18 && x < 58 && y > 235 && y < 272) {
 80042ea:	4b60      	ldr	r3, [pc, #384]	@ (800446c <main+0x54c>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d11b      	bne.n	800432a <main+0x40a>
 80042f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004470 <main+0x550>)
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b12      	cmp	r3, #18
 80042fa:	d916      	bls.n	800432a <main+0x40a>
 80042fc:	4b5c      	ldr	r3, [pc, #368]	@ (8004470 <main+0x550>)
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b39      	cmp	r3, #57	@ 0x39
 8004304:	d811      	bhi.n	800432a <main+0x40a>
 8004306:	4b5b      	ldr	r3, [pc, #364]	@ (8004474 <main+0x554>)
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	b29b      	uxth	r3, r3
 800430c:	2beb      	cmp	r3, #235	@ 0xeb
 800430e:	d90c      	bls.n	800432a <main+0x40a>
 8004310:	4b58      	ldr	r3, [pc, #352]	@ (8004474 <main+0x554>)
 8004312:	881b      	ldrh	r3, [r3, #0]
 8004314:	b29b      	uxth	r3, r3
 8004316:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 800431a:	d206      	bcs.n	800432a <main+0x40a>
				  flag = 4;
 800431c:	4b53      	ldr	r3, [pc, #332]	@ (800446c <main+0x54c>)
 800431e:	2204      	movs	r2, #4
 8004320:	701a      	strb	r2, [r3, #0]
				  needRedraw = 1; // Set the redraw flag
 8004322:	4b55      	ldr	r3, [pc, #340]	@ (8004478 <main+0x558>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e39a      	b.n	8004a60 <main+0xb40>

			  //Temperature graph
			  } else if (flag == 1 && x > 40 && x < 160 && y > 80 && y < 200) {
 800432a:	4b50      	ldr	r3, [pc, #320]	@ (800446c <main+0x54c>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d11a      	bne.n	8004368 <main+0x448>
 8004332:	4b4f      	ldr	r3, [pc, #316]	@ (8004470 <main+0x550>)
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	2b28      	cmp	r3, #40	@ 0x28
 800433a:	d915      	bls.n	8004368 <main+0x448>
 800433c:	4b4c      	ldr	r3, [pc, #304]	@ (8004470 <main+0x550>)
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	2b9f      	cmp	r3, #159	@ 0x9f
 8004344:	d810      	bhi.n	8004368 <main+0x448>
 8004346:	4b4b      	ldr	r3, [pc, #300]	@ (8004474 <main+0x554>)
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b50      	cmp	r3, #80	@ 0x50
 800434e:	d90b      	bls.n	8004368 <main+0x448>
 8004350:	4b48      	ldr	r3, [pc, #288]	@ (8004474 <main+0x554>)
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	2bc7      	cmp	r3, #199	@ 0xc7
 8004358:	d806      	bhi.n	8004368 <main+0x448>
				  flag = 5;
 800435a:	4b44      	ldr	r3, [pc, #272]	@ (800446c <main+0x54c>)
 800435c:	2205      	movs	r2, #5
 800435e:	701a      	strb	r2, [r3, #0]
				  needRedraw = 1; // Set the redraw flag
 8004360:	4b45      	ldr	r3, [pc, #276]	@ (8004478 <main+0x558>)
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	e37b      	b.n	8004a60 <main+0xb40>

			  //humidity graph
         	  } else if (flag == 1 && x > 180 && x < 300 && y > 80 && y < 200){
 8004368:	4b40      	ldr	r3, [pc, #256]	@ (800446c <main+0x54c>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d11b      	bne.n	80043a8 <main+0x488>
 8004370:	4b3f      	ldr	r3, [pc, #252]	@ (8004470 <main+0x550>)
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	2bb4      	cmp	r3, #180	@ 0xb4
 8004378:	d916      	bls.n	80043a8 <main+0x488>
 800437a:	4b3d      	ldr	r3, [pc, #244]	@ (8004470 <main+0x550>)
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b29b      	uxth	r3, r3
 8004380:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8004384:	d210      	bcs.n	80043a8 <main+0x488>
 8004386:	4b3b      	ldr	r3, [pc, #236]	@ (8004474 <main+0x554>)
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b50      	cmp	r3, #80	@ 0x50
 800438e:	d90b      	bls.n	80043a8 <main+0x488>
 8004390:	4b38      	ldr	r3, [pc, #224]	@ (8004474 <main+0x554>)
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	2bc7      	cmp	r3, #199	@ 0xc7
 8004398:	d806      	bhi.n	80043a8 <main+0x488>
         		 flag = 6;
 800439a:	4b34      	ldr	r3, [pc, #208]	@ (800446c <main+0x54c>)
 800439c:	2206      	movs	r2, #6
 800439e:	701a      	strb	r2, [r3, #0]
         		 needRedraw = 1; // Set the redraw flag
 80043a0:	4b35      	ldr	r3, [pc, #212]	@ (8004478 <main+0x558>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	e35b      	b.n	8004a60 <main+0xb40>

         	  //Rain graph
         	  } else if (flag == 1 && x > 320 && x < 440 && y > 80 && y < 200){
 80043a8:	4b30      	ldr	r3, [pc, #192]	@ (800446c <main+0x54c>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d11c      	bne.n	80043ea <main+0x4ca>
 80043b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004470 <main+0x550>)
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80043ba:	d916      	bls.n	80043ea <main+0x4ca>
 80043bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004470 <main+0x550>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 80043c6:	d210      	bcs.n	80043ea <main+0x4ca>
 80043c8:	4b2a      	ldr	r3, [pc, #168]	@ (8004474 <main+0x554>)
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b50      	cmp	r3, #80	@ 0x50
 80043d0:	d90b      	bls.n	80043ea <main+0x4ca>
 80043d2:	4b28      	ldr	r3, [pc, #160]	@ (8004474 <main+0x554>)
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80043da:	d806      	bhi.n	80043ea <main+0x4ca>
          		 flag = 7;
 80043dc:	4b23      	ldr	r3, [pc, #140]	@ (800446c <main+0x54c>)
 80043de:	2207      	movs	r2, #7
 80043e0:	701a      	strb	r2, [r3, #0]
          		 needRedraw = 1; // Set the redraw flag
 80043e2:	4b25      	ldr	r3, [pc, #148]	@ (8004478 <main+0x558>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	e33a      	b.n	8004a60 <main+0xb40>

          	  //Pressure graph
         	  } else if (flag == 2 && x > 320 && x < 440 && y > 80 && y < 200){
 80043ea:	4b20      	ldr	r3, [pc, #128]	@ (800446c <main+0x54c>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d11c      	bne.n	800442c <main+0x50c>
 80043f2:	4b1f      	ldr	r3, [pc, #124]	@ (8004470 <main+0x550>)
 80043f4:	881b      	ldrh	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80043fc:	d916      	bls.n	800442c <main+0x50c>
 80043fe:	4b1c      	ldr	r3, [pc, #112]	@ (8004470 <main+0x550>)
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8004408:	d210      	bcs.n	800442c <main+0x50c>
 800440a:	4b1a      	ldr	r3, [pc, #104]	@ (8004474 <main+0x554>)
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	2b50      	cmp	r3, #80	@ 0x50
 8004412:	d90b      	bls.n	800442c <main+0x50c>
 8004414:	4b17      	ldr	r3, [pc, #92]	@ (8004474 <main+0x554>)
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b29b      	uxth	r3, r3
 800441a:	2bc7      	cmp	r3, #199	@ 0xc7
 800441c:	d806      	bhi.n	800442c <main+0x50c>
				 flag = 8;
 800441e:	4b13      	ldr	r3, [pc, #76]	@ (800446c <main+0x54c>)
 8004420:	2208      	movs	r2, #8
 8004422:	701a      	strb	r2, [r3, #0]
				 needRedraw = 1; // Set the redraw flag
 8004424:	4b14      	ldr	r3, [pc, #80]	@ (8004478 <main+0x558>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	e319      	b.n	8004a60 <main+0xb40>

			  //Wind Graph
			  }else if (flag == 2 && x > 40 && x < 160 && y > 80 && y < 200){
 800442c:	4b0f      	ldr	r3, [pc, #60]	@ (800446c <main+0x54c>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d123      	bne.n	800447c <main+0x55c>
 8004434:	4b0e      	ldr	r3, [pc, #56]	@ (8004470 <main+0x550>)
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b28      	cmp	r3, #40	@ 0x28
 800443c:	d91e      	bls.n	800447c <main+0x55c>
 800443e:	4b0c      	ldr	r3, [pc, #48]	@ (8004470 <main+0x550>)
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b9f      	cmp	r3, #159	@ 0x9f
 8004446:	d819      	bhi.n	800447c <main+0x55c>
 8004448:	4b0a      	ldr	r3, [pc, #40]	@ (8004474 <main+0x554>)
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b50      	cmp	r3, #80	@ 0x50
 8004450:	d914      	bls.n	800447c <main+0x55c>
 8004452:	4b08      	ldr	r3, [pc, #32]	@ (8004474 <main+0x554>)
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	2bc7      	cmp	r3, #199	@ 0xc7
 800445a:	d80f      	bhi.n	800447c <main+0x55c>
				 flag = 9;
 800445c:	4b03      	ldr	r3, [pc, #12]	@ (800446c <main+0x54c>)
 800445e:	2209      	movs	r2, #9
 8004460:	701a      	strb	r2, [r3, #0]
				 needRedraw = 1; // Set the redraw flag
 8004462:	4b05      	ldr	r3, [pc, #20]	@ (8004478 <main+0x558>)
 8004464:	2201      	movs	r2, #1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e2fa      	b.n	8004a60 <main+0xb40>
 800446a:	bf00      	nop
 800446c:	20005e94 	.word	0x20005e94
 8004470:	20005e8c 	.word	0x20005e8c
 8004474:	20005e8e 	.word	0x20005e8e
 8004478:	20004ecc 	.word	0x20004ecc

			  //return data page 1 button
			  } else if ((flag == 5 || flag == 6 || flag == 7) && x > 10 && x < 40 && y > 10 && y < 40) {
 800447c:	4b8b      	ldr	r3, [pc, #556]	@ (80046ac <main+0x78c>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b05      	cmp	r3, #5
 8004482:	d007      	beq.n	8004494 <main+0x574>
 8004484:	4b89      	ldr	r3, [pc, #548]	@ (80046ac <main+0x78c>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b06      	cmp	r3, #6
 800448a:	d003      	beq.n	8004494 <main+0x574>
 800448c:	4b87      	ldr	r3, [pc, #540]	@ (80046ac <main+0x78c>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b07      	cmp	r3, #7
 8004492:	d11a      	bne.n	80044ca <main+0x5aa>
 8004494:	4b86      	ldr	r3, [pc, #536]	@ (80046b0 <main+0x790>)
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b0a      	cmp	r3, #10
 800449c:	d915      	bls.n	80044ca <main+0x5aa>
 800449e:	4b84      	ldr	r3, [pc, #528]	@ (80046b0 <main+0x790>)
 80044a0:	881b      	ldrh	r3, [r3, #0]
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b27      	cmp	r3, #39	@ 0x27
 80044a6:	d810      	bhi.n	80044ca <main+0x5aa>
 80044a8:	4b82      	ldr	r3, [pc, #520]	@ (80046b4 <main+0x794>)
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b0a      	cmp	r3, #10
 80044b0:	d90b      	bls.n	80044ca <main+0x5aa>
 80044b2:	4b80      	ldr	r3, [pc, #512]	@ (80046b4 <main+0x794>)
 80044b4:	881b      	ldrh	r3, [r3, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b27      	cmp	r3, #39	@ 0x27
 80044ba:	d806      	bhi.n	80044ca <main+0x5aa>
				  flag = 1;
 80044bc:	4b7b      	ldr	r3, [pc, #492]	@ (80046ac <main+0x78c>)
 80044be:	2201      	movs	r2, #1
 80044c0:	701a      	strb	r2, [r3, #0]
				  needRedraw = 1; // Set the redraw flag
 80044c2:	4b7d      	ldr	r3, [pc, #500]	@ (80046b8 <main+0x798>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	e2ca      	b.n	8004a60 <main+0xb40>

			  //return data page 2 button
			  } else if ((flag == 8 || flag == 9) && x > 10 && x < 40 && y > 10 && y < 40) {
 80044ca:	4b78      	ldr	r3, [pc, #480]	@ (80046ac <main+0x78c>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b08      	cmp	r3, #8
 80044d0:	d003      	beq.n	80044da <main+0x5ba>
 80044d2:	4b76      	ldr	r3, [pc, #472]	@ (80046ac <main+0x78c>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b09      	cmp	r3, #9
 80044d8:	d11a      	bne.n	8004510 <main+0x5f0>
 80044da:	4b75      	ldr	r3, [pc, #468]	@ (80046b0 <main+0x790>)
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b0a      	cmp	r3, #10
 80044e2:	d915      	bls.n	8004510 <main+0x5f0>
 80044e4:	4b72      	ldr	r3, [pc, #456]	@ (80046b0 <main+0x790>)
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	2b27      	cmp	r3, #39	@ 0x27
 80044ec:	d810      	bhi.n	8004510 <main+0x5f0>
 80044ee:	4b71      	ldr	r3, [pc, #452]	@ (80046b4 <main+0x794>)
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b0a      	cmp	r3, #10
 80044f6:	d90b      	bls.n	8004510 <main+0x5f0>
 80044f8:	4b6e      	ldr	r3, [pc, #440]	@ (80046b4 <main+0x794>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b27      	cmp	r3, #39	@ 0x27
 8004500:	d806      	bhi.n	8004510 <main+0x5f0>
				  flag = 2;
 8004502:	4b6a      	ldr	r3, [pc, #424]	@ (80046ac <main+0x78c>)
 8004504:	2202      	movs	r2, #2
 8004506:	701a      	strb	r2, [r3, #0]
				  needRedraw = 1; // Set the redraw flag
 8004508:	4b6b      	ldr	r3, [pc, #428]	@ (80046b8 <main+0x798>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	e2a7      	b.n	8004a60 <main+0xb40>
				  //Dans la partie où vous gérez les touches
			  } else if (flag == 3) {
 8004510:	4b66      	ldr	r3, [pc, #408]	@ (80046ac <main+0x78c>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b03      	cmp	r3, #3
 8004516:	f040 82a3 	bne.w	8004a60 <main+0xb40>
				      const uint16_t col1 = 150;
 800451a:	2396      	movs	r3, #150	@ 0x96
 800451c:	80fb      	strh	r3, [r7, #6]
				      const uint16_t col2 = col1 + 90;
 800451e:	88fb      	ldrh	r3, [r7, #6]
 8004520:	335a      	adds	r3, #90	@ 0x5a
 8004522:	80bb      	strh	r3, [r7, #4]
				      const uint16_t col3 = col2 + 90;
 8004524:	88bb      	ldrh	r3, [r7, #4]
 8004526:	335a      	adds	r3, #90	@ 0x5a
 8004528:	807b      	strh	r3, [r7, #2]
				      const uint16_t buttonSize = 30;
 800452a:	231e      	movs	r3, #30
 800452c:	803b      	strh	r3, [r7, #0]

				      // Bouton retour
				      if (x > 10 && x < 40 && y > 10 && y < 40) {
 800452e:	4b60      	ldr	r3, [pc, #384]	@ (80046b0 <main+0x790>)
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b0a      	cmp	r3, #10
 8004536:	d915      	bls.n	8004564 <main+0x644>
 8004538:	4b5d      	ldr	r3, [pc, #372]	@ (80046b0 <main+0x790>)
 800453a:	881b      	ldrh	r3, [r3, #0]
 800453c:	b29b      	uxth	r3, r3
 800453e:	2b27      	cmp	r3, #39	@ 0x27
 8004540:	d810      	bhi.n	8004564 <main+0x644>
 8004542:	4b5c      	ldr	r3, [pc, #368]	@ (80046b4 <main+0x794>)
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b0a      	cmp	r3, #10
 800454a:	d90b      	bls.n	8004564 <main+0x644>
 800454c:	4b59      	ldr	r3, [pc, #356]	@ (80046b4 <main+0x794>)
 800454e:	881b      	ldrh	r3, [r3, #0]
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b27      	cmp	r3, #39	@ 0x27
 8004554:	d806      	bhi.n	8004564 <main+0x644>
				          flag = 0;
 8004556:	4b55      	ldr	r3, [pc, #340]	@ (80046ac <main+0x78c>)
 8004558:	2200      	movs	r2, #0
 800455a:	701a      	strb	r2, [r3, #0]
				          needRedraw = 1;
 800455c:	4b56      	ldr	r3, [pc, #344]	@ (80046b8 <main+0x798>)
 800455e:	2201      	movs	r2, #1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	e26b      	b.n	8004a3c <main+0xb1c>
				      }
				      // === Boutons Date ===
				      // Jour +
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 40 && y <= 70) {
 8004564:	4b52      	ldr	r3, [pc, #328]	@ (80046b0 <main+0x790>)
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	b29b      	uxth	r3, r3
 800456a:	88fa      	ldrh	r2, [r7, #6]
 800456c:	429a      	cmp	r2, r3
 800456e:	d832      	bhi.n	80045d6 <main+0x6b6>
 8004570:	4b4f      	ldr	r3, [pc, #316]	@ (80046b0 <main+0x790>)
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	4619      	mov	r1, r3
 8004578:	88fa      	ldrh	r2, [r7, #6]
 800457a:	883b      	ldrh	r3, [r7, #0]
 800457c:	4413      	add	r3, r2
 800457e:	4299      	cmp	r1, r3
 8004580:	dc29      	bgt.n	80045d6 <main+0x6b6>
 8004582:	4b4c      	ldr	r3, [pc, #304]	@ (80046b4 <main+0x794>)
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b27      	cmp	r3, #39	@ 0x27
 800458a:	d924      	bls.n	80045d6 <main+0x6b6>
 800458c:	4b49      	ldr	r3, [pc, #292]	@ (80046b4 <main+0x794>)
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b46      	cmp	r3, #70	@ 0x46
 8004594:	d81f      	bhi.n	80045d6 <main+0x6b6>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004596:	2200      	movs	r2, #0
 8004598:	4948      	ldr	r1, [pc, #288]	@ (80046bc <main+0x79c>)
 800459a:	4849      	ldr	r0, [pc, #292]	@ (80046c0 <main+0x7a0>)
 800459c:	f008 f8ac 	bl	800c6f8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80045a0:	2200      	movs	r2, #0
 80045a2:	4948      	ldr	r1, [pc, #288]	@ (80046c4 <main+0x7a4>)
 80045a4:	4846      	ldr	r0, [pc, #280]	@ (80046c0 <main+0x7a0>)
 80045a6:	f008 f989 	bl	800c8bc <HAL_RTC_GetDate>
				          sDate.Date = (sDate.Date % 31) + 1;
 80045aa:	4b46      	ldr	r3, [pc, #280]	@ (80046c4 <main+0x7a4>)
 80045ac:	789a      	ldrb	r2, [r3, #2]
 80045ae:	4b46      	ldr	r3, [pc, #280]	@ (80046c8 <main+0x7a8>)
 80045b0:	fba3 1302 	umull	r1, r3, r3, r2
 80045b4:	1ad1      	subs	r1, r2, r3
 80045b6:	0849      	lsrs	r1, r1, #1
 80045b8:	440b      	add	r3, r1
 80045ba:	0919      	lsrs	r1, r3, #4
 80045bc:	460b      	mov	r3, r1
 80045be:	015b      	lsls	r3, r3, #5
 80045c0:	1a5b      	subs	r3, r3, r1
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	3301      	adds	r3, #1
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	4b3e      	ldr	r3, [pc, #248]	@ (80046c4 <main+0x7a4>)
 80045cc:	709a      	strb	r2, [r3, #2]
				          needRedraw = 1;
 80045ce:	4b3a      	ldr	r3, [pc, #232]	@ (80046b8 <main+0x798>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	e232      	b.n	8004a3c <main+0xb1c>
				      }
				      // Jour -
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 105 && y <= 135) {
 80045d6:	4b36      	ldr	r3, [pc, #216]	@ (80046b0 <main+0x790>)
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	88fa      	ldrh	r2, [r7, #6]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d82c      	bhi.n	800463c <main+0x71c>
 80045e2:	4b33      	ldr	r3, [pc, #204]	@ (80046b0 <main+0x790>)
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	4619      	mov	r1, r3
 80045ea:	88fa      	ldrh	r2, [r7, #6]
 80045ec:	883b      	ldrh	r3, [r7, #0]
 80045ee:	4413      	add	r3, r2
 80045f0:	4299      	cmp	r1, r3
 80045f2:	dc23      	bgt.n	800463c <main+0x71c>
 80045f4:	4b2f      	ldr	r3, [pc, #188]	@ (80046b4 <main+0x794>)
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	2b68      	cmp	r3, #104	@ 0x68
 80045fc:	d91e      	bls.n	800463c <main+0x71c>
 80045fe:	4b2d      	ldr	r3, [pc, #180]	@ (80046b4 <main+0x794>)
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	b29b      	uxth	r3, r3
 8004604:	2b87      	cmp	r3, #135	@ 0x87
 8004606:	d819      	bhi.n	800463c <main+0x71c>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004608:	2200      	movs	r2, #0
 800460a:	492c      	ldr	r1, [pc, #176]	@ (80046bc <main+0x79c>)
 800460c:	482c      	ldr	r0, [pc, #176]	@ (80046c0 <main+0x7a0>)
 800460e:	f008 f873 	bl	800c6f8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004612:	2200      	movs	r2, #0
 8004614:	492b      	ldr	r1, [pc, #172]	@ (80046c4 <main+0x7a4>)
 8004616:	482a      	ldr	r0, [pc, #168]	@ (80046c0 <main+0x7a0>)
 8004618:	f008 f950 	bl	800c8bc <HAL_RTC_GetDate>
				          sDate.Date = (sDate.Date > 1) ? sDate.Date - 1 : 31;
 800461c:	4b29      	ldr	r3, [pc, #164]	@ (80046c4 <main+0x7a4>)
 800461e:	789b      	ldrb	r3, [r3, #2]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d904      	bls.n	800462e <main+0x70e>
 8004624:	4b27      	ldr	r3, [pc, #156]	@ (80046c4 <main+0x7a4>)
 8004626:	789b      	ldrb	r3, [r3, #2]
 8004628:	3b01      	subs	r3, #1
 800462a:	b2db      	uxtb	r3, r3
 800462c:	e000      	b.n	8004630 <main+0x710>
 800462e:	231f      	movs	r3, #31
 8004630:	4a24      	ldr	r2, [pc, #144]	@ (80046c4 <main+0x7a4>)
 8004632:	7093      	strb	r3, [r2, #2]
				          needRedraw = 1;
 8004634:	4b20      	ldr	r3, [pc, #128]	@ (80046b8 <main+0x798>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	e1ff      	b.n	8004a3c <main+0xb1c>
				      }
				      // Mois +
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 40 && y <= 70) {
 800463c:	4b1c      	ldr	r3, [pc, #112]	@ (80046b0 <main+0x790>)
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29b      	uxth	r3, r3
 8004642:	88ba      	ldrh	r2, [r7, #4]
 8004644:	429a      	cmp	r2, r3
 8004646:	d843      	bhi.n	80046d0 <main+0x7b0>
 8004648:	4b19      	ldr	r3, [pc, #100]	@ (80046b0 <main+0x790>)
 800464a:	881b      	ldrh	r3, [r3, #0]
 800464c:	b29b      	uxth	r3, r3
 800464e:	4619      	mov	r1, r3
 8004650:	88ba      	ldrh	r2, [r7, #4]
 8004652:	883b      	ldrh	r3, [r7, #0]
 8004654:	4413      	add	r3, r2
 8004656:	4299      	cmp	r1, r3
 8004658:	dc3a      	bgt.n	80046d0 <main+0x7b0>
 800465a:	4b16      	ldr	r3, [pc, #88]	@ (80046b4 <main+0x794>)
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b27      	cmp	r3, #39	@ 0x27
 8004662:	d935      	bls.n	80046d0 <main+0x7b0>
 8004664:	4b13      	ldr	r3, [pc, #76]	@ (80046b4 <main+0x794>)
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	b29b      	uxth	r3, r3
 800466a:	2b46      	cmp	r3, #70	@ 0x46
 800466c:	d830      	bhi.n	80046d0 <main+0x7b0>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800466e:	2200      	movs	r2, #0
 8004670:	4912      	ldr	r1, [pc, #72]	@ (80046bc <main+0x79c>)
 8004672:	4813      	ldr	r0, [pc, #76]	@ (80046c0 <main+0x7a0>)
 8004674:	f008 f840 	bl	800c6f8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004678:	2200      	movs	r2, #0
 800467a:	4912      	ldr	r1, [pc, #72]	@ (80046c4 <main+0x7a4>)
 800467c:	4810      	ldr	r0, [pc, #64]	@ (80046c0 <main+0x7a0>)
 800467e:	f008 f91d 	bl	800c8bc <HAL_RTC_GetDate>
				          sDate.Month = (sDate.Month % 12) + 1;
 8004682:	4b10      	ldr	r3, [pc, #64]	@ (80046c4 <main+0x7a4>)
 8004684:	785a      	ldrb	r2, [r3, #1]
 8004686:	4b11      	ldr	r3, [pc, #68]	@ (80046cc <main+0x7ac>)
 8004688:	fba3 1302 	umull	r1, r3, r3, r2
 800468c:	08d9      	lsrs	r1, r3, #3
 800468e:	460b      	mov	r3, r1
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	440b      	add	r3, r1
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	3301      	adds	r3, #1
 800469c:	b2da      	uxtb	r2, r3
 800469e:	4b09      	ldr	r3, [pc, #36]	@ (80046c4 <main+0x7a4>)
 80046a0:	705a      	strb	r2, [r3, #1]
				          needRedraw = 1;
 80046a2:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <main+0x798>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	e1c8      	b.n	8004a3c <main+0xb1c>
 80046aa:	bf00      	nop
 80046ac:	20005e94 	.word	0x20005e94
 80046b0:	20005e8c 	.word	0x20005e8c
 80046b4:	20005e8e 	.word	0x20005e8e
 80046b8:	20004ecc 	.word	0x20004ecc
 80046bc:	2000510c 	.word	0x2000510c
 80046c0:	20005ec8 	.word	0x20005ec8
 80046c4:	20005120 	.word	0x20005120
 80046c8:	08421085 	.word	0x08421085
 80046cc:	aaaaaaab 	.word	0xaaaaaaab
				      }
				      // Mois -
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 105 && y <= 135) {
 80046d0:	4b84      	ldr	r3, [pc, #528]	@ (80048e4 <main+0x9c4>)
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	88ba      	ldrh	r2, [r7, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d82c      	bhi.n	8004736 <main+0x816>
 80046dc:	4b81      	ldr	r3, [pc, #516]	@ (80048e4 <main+0x9c4>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	4619      	mov	r1, r3
 80046e4:	88ba      	ldrh	r2, [r7, #4]
 80046e6:	883b      	ldrh	r3, [r7, #0]
 80046e8:	4413      	add	r3, r2
 80046ea:	4299      	cmp	r1, r3
 80046ec:	dc23      	bgt.n	8004736 <main+0x816>
 80046ee:	4b7e      	ldr	r3, [pc, #504]	@ (80048e8 <main+0x9c8>)
 80046f0:	881b      	ldrh	r3, [r3, #0]
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b68      	cmp	r3, #104	@ 0x68
 80046f6:	d91e      	bls.n	8004736 <main+0x816>
 80046f8:	4b7b      	ldr	r3, [pc, #492]	@ (80048e8 <main+0x9c8>)
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b87      	cmp	r3, #135	@ 0x87
 8004700:	d819      	bhi.n	8004736 <main+0x816>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004702:	2200      	movs	r2, #0
 8004704:	4979      	ldr	r1, [pc, #484]	@ (80048ec <main+0x9cc>)
 8004706:	487a      	ldr	r0, [pc, #488]	@ (80048f0 <main+0x9d0>)
 8004708:	f007 fff6 	bl	800c6f8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800470c:	2200      	movs	r2, #0
 800470e:	4979      	ldr	r1, [pc, #484]	@ (80048f4 <main+0x9d4>)
 8004710:	4877      	ldr	r0, [pc, #476]	@ (80048f0 <main+0x9d0>)
 8004712:	f008 f8d3 	bl	800c8bc <HAL_RTC_GetDate>
				          sDate.Month = (sDate.Month > 1) ? sDate.Month - 1 : 12;
 8004716:	4b77      	ldr	r3, [pc, #476]	@ (80048f4 <main+0x9d4>)
 8004718:	785b      	ldrb	r3, [r3, #1]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d904      	bls.n	8004728 <main+0x808>
 800471e:	4b75      	ldr	r3, [pc, #468]	@ (80048f4 <main+0x9d4>)
 8004720:	785b      	ldrb	r3, [r3, #1]
 8004722:	3b01      	subs	r3, #1
 8004724:	b2db      	uxtb	r3, r3
 8004726:	e000      	b.n	800472a <main+0x80a>
 8004728:	230c      	movs	r3, #12
 800472a:	4a72      	ldr	r2, [pc, #456]	@ (80048f4 <main+0x9d4>)
 800472c:	7053      	strb	r3, [r2, #1]
				          needRedraw = 1;
 800472e:	4b72      	ldr	r3, [pc, #456]	@ (80048f8 <main+0x9d8>)
 8004730:	2201      	movs	r2, #1
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	e182      	b.n	8004a3c <main+0xb1c>
				      }
				      // === Boutons Heure ===
				      // Heures +
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 140 && y <= 170) {
 8004736:	4b6b      	ldr	r3, [pc, #428]	@ (80048e4 <main+0x9c4>)
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	b29b      	uxth	r3, r3
 800473c:	88fa      	ldrh	r2, [r7, #6]
 800473e:	429a      	cmp	r2, r3
 8004740:	d831      	bhi.n	80047a6 <main+0x886>
 8004742:	4b68      	ldr	r3, [pc, #416]	@ (80048e4 <main+0x9c4>)
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	4619      	mov	r1, r3
 800474a:	88fa      	ldrh	r2, [r7, #6]
 800474c:	883b      	ldrh	r3, [r7, #0]
 800474e:	4413      	add	r3, r2
 8004750:	4299      	cmp	r1, r3
 8004752:	dc28      	bgt.n	80047a6 <main+0x886>
 8004754:	4b64      	ldr	r3, [pc, #400]	@ (80048e8 <main+0x9c8>)
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b8b      	cmp	r3, #139	@ 0x8b
 800475c:	d923      	bls.n	80047a6 <main+0x886>
 800475e:	4b62      	ldr	r3, [pc, #392]	@ (80048e8 <main+0x9c8>)
 8004760:	881b      	ldrh	r3, [r3, #0]
 8004762:	b29b      	uxth	r3, r3
 8004764:	2baa      	cmp	r3, #170	@ 0xaa
 8004766:	d81e      	bhi.n	80047a6 <main+0x886>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004768:	2200      	movs	r2, #0
 800476a:	4960      	ldr	r1, [pc, #384]	@ (80048ec <main+0x9cc>)
 800476c:	4860      	ldr	r0, [pc, #384]	@ (80048f0 <main+0x9d0>)
 800476e:	f007 ffc3 	bl	800c6f8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004772:	2200      	movs	r2, #0
 8004774:	495f      	ldr	r1, [pc, #380]	@ (80048f4 <main+0x9d4>)
 8004776:	485e      	ldr	r0, [pc, #376]	@ (80048f0 <main+0x9d0>)
 8004778:	f008 f8a0 	bl	800c8bc <HAL_RTC_GetDate>
				          sTime.Hours = (sTime.Hours + 1) % 24;
 800477c:	4b5b      	ldr	r3, [pc, #364]	@ (80048ec <main+0x9cc>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	4b5e      	ldr	r3, [pc, #376]	@ (80048fc <main+0x9dc>)
 8004784:	fb83 1302 	smull	r1, r3, r3, r2
 8004788:	1099      	asrs	r1, r3, #2
 800478a:	17d3      	asrs	r3, r2, #31
 800478c:	1ac9      	subs	r1, r1, r3
 800478e:	460b      	mov	r3, r1
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	440b      	add	r3, r1
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	1ad1      	subs	r1, r2, r3
 8004798:	b2ca      	uxtb	r2, r1
 800479a:	4b54      	ldr	r3, [pc, #336]	@ (80048ec <main+0x9cc>)
 800479c:	701a      	strb	r2, [r3, #0]
				          needRedraw = 1;
 800479e:	4b56      	ldr	r3, [pc, #344]	@ (80048f8 <main+0x9d8>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e14a      	b.n	8004a3c <main+0xb1c>
				      }
				      // Heures -
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 200 && y <= 230) {
 80047a6:	4b4f      	ldr	r3, [pc, #316]	@ (80048e4 <main+0x9c4>)
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	88fa      	ldrh	r2, [r7, #6]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d82c      	bhi.n	800480c <main+0x8ec>
 80047b2:	4b4c      	ldr	r3, [pc, #304]	@ (80048e4 <main+0x9c4>)
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	4619      	mov	r1, r3
 80047ba:	88fa      	ldrh	r2, [r7, #6]
 80047bc:	883b      	ldrh	r3, [r7, #0]
 80047be:	4413      	add	r3, r2
 80047c0:	4299      	cmp	r1, r3
 80047c2:	dc23      	bgt.n	800480c <main+0x8ec>
 80047c4:	4b48      	ldr	r3, [pc, #288]	@ (80048e8 <main+0x9c8>)
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80047cc:	d91e      	bls.n	800480c <main+0x8ec>
 80047ce:	4b46      	ldr	r3, [pc, #280]	@ (80048e8 <main+0x9c8>)
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2be6      	cmp	r3, #230	@ 0xe6
 80047d6:	d819      	bhi.n	800480c <main+0x8ec>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80047d8:	2200      	movs	r2, #0
 80047da:	4944      	ldr	r1, [pc, #272]	@ (80048ec <main+0x9cc>)
 80047dc:	4844      	ldr	r0, [pc, #272]	@ (80048f0 <main+0x9d0>)
 80047de:	f007 ff8b 	bl	800c6f8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80047e2:	2200      	movs	r2, #0
 80047e4:	4943      	ldr	r1, [pc, #268]	@ (80048f4 <main+0x9d4>)
 80047e6:	4842      	ldr	r0, [pc, #264]	@ (80048f0 <main+0x9d0>)
 80047e8:	f008 f868 	bl	800c8bc <HAL_RTC_GetDate>
				          sTime.Hours = (sTime.Hours > 0) ? sTime.Hours - 1 : 23;
 80047ec:	4b3f      	ldr	r3, [pc, #252]	@ (80048ec <main+0x9cc>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <main+0x8de>
 80047f4:	4b3d      	ldr	r3, [pc, #244]	@ (80048ec <main+0x9cc>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	e000      	b.n	8004800 <main+0x8e0>
 80047fe:	2317      	movs	r3, #23
 8004800:	4a3a      	ldr	r2, [pc, #232]	@ (80048ec <main+0x9cc>)
 8004802:	7013      	strb	r3, [r2, #0]
				          needRedraw = 1;
 8004804:	4b3c      	ldr	r3, [pc, #240]	@ (80048f8 <main+0x9d8>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e117      	b.n	8004a3c <main+0xb1c>
				      }
				      // Minutes +
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 140 && y <= 170) {
 800480c:	4b35      	ldr	r3, [pc, #212]	@ (80048e4 <main+0x9c4>)
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	b29b      	uxth	r3, r3
 8004812:	88ba      	ldrh	r2, [r7, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	d832      	bhi.n	800487e <main+0x95e>
 8004818:	4b32      	ldr	r3, [pc, #200]	@ (80048e4 <main+0x9c4>)
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	4619      	mov	r1, r3
 8004820:	88ba      	ldrh	r2, [r7, #4]
 8004822:	883b      	ldrh	r3, [r7, #0]
 8004824:	4413      	add	r3, r2
 8004826:	4299      	cmp	r1, r3
 8004828:	dc29      	bgt.n	800487e <main+0x95e>
 800482a:	4b2f      	ldr	r3, [pc, #188]	@ (80048e8 <main+0x9c8>)
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b8b      	cmp	r3, #139	@ 0x8b
 8004832:	d924      	bls.n	800487e <main+0x95e>
 8004834:	4b2c      	ldr	r3, [pc, #176]	@ (80048e8 <main+0x9c8>)
 8004836:	881b      	ldrh	r3, [r3, #0]
 8004838:	b29b      	uxth	r3, r3
 800483a:	2baa      	cmp	r3, #170	@ 0xaa
 800483c:	d81f      	bhi.n	800487e <main+0x95e>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800483e:	2200      	movs	r2, #0
 8004840:	492a      	ldr	r1, [pc, #168]	@ (80048ec <main+0x9cc>)
 8004842:	482b      	ldr	r0, [pc, #172]	@ (80048f0 <main+0x9d0>)
 8004844:	f007 ff58 	bl	800c6f8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004848:	2200      	movs	r2, #0
 800484a:	492a      	ldr	r1, [pc, #168]	@ (80048f4 <main+0x9d4>)
 800484c:	4828      	ldr	r0, [pc, #160]	@ (80048f0 <main+0x9d0>)
 800484e:	f008 f835 	bl	800c8bc <HAL_RTC_GetDate>
				          sTime.Minutes = (sTime.Minutes + 1) % 60;
 8004852:	4b26      	ldr	r3, [pc, #152]	@ (80048ec <main+0x9cc>)
 8004854:	785b      	ldrb	r3, [r3, #1]
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	4b29      	ldr	r3, [pc, #164]	@ (8004900 <main+0x9e0>)
 800485a:	fb83 1302 	smull	r1, r3, r3, r2
 800485e:	4413      	add	r3, r2
 8004860:	1159      	asrs	r1, r3, #5
 8004862:	17d3      	asrs	r3, r2, #31
 8004864:	1ac9      	subs	r1, r1, r3
 8004866:	460b      	mov	r3, r1
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	1a5b      	subs	r3, r3, r1
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	1ad1      	subs	r1, r2, r3
 8004870:	b2ca      	uxtb	r2, r1
 8004872:	4b1e      	ldr	r3, [pc, #120]	@ (80048ec <main+0x9cc>)
 8004874:	705a      	strb	r2, [r3, #1]
				          needRedraw = 1;
 8004876:	4b20      	ldr	r3, [pc, #128]	@ (80048f8 <main+0x9d8>)
 8004878:	2201      	movs	r2, #1
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e0de      	b.n	8004a3c <main+0xb1c>
				      }
				      // Minutes -
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 200 && y <= 230) {
 800487e:	4b19      	ldr	r3, [pc, #100]	@ (80048e4 <main+0x9c4>)
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	88ba      	ldrh	r2, [r7, #4]
 8004886:	429a      	cmp	r2, r3
 8004888:	d83c      	bhi.n	8004904 <main+0x9e4>
 800488a:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <main+0x9c4>)
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	4619      	mov	r1, r3
 8004892:	88ba      	ldrh	r2, [r7, #4]
 8004894:	883b      	ldrh	r3, [r7, #0]
 8004896:	4413      	add	r3, r2
 8004898:	4299      	cmp	r1, r3
 800489a:	dc33      	bgt.n	8004904 <main+0x9e4>
 800489c:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <main+0x9c8>)
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80048a4:	d92e      	bls.n	8004904 <main+0x9e4>
 80048a6:	4b10      	ldr	r3, [pc, #64]	@ (80048e8 <main+0x9c8>)
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2be6      	cmp	r3, #230	@ 0xe6
 80048ae:	d829      	bhi.n	8004904 <main+0x9e4>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80048b0:	2200      	movs	r2, #0
 80048b2:	490e      	ldr	r1, [pc, #56]	@ (80048ec <main+0x9cc>)
 80048b4:	480e      	ldr	r0, [pc, #56]	@ (80048f0 <main+0x9d0>)
 80048b6:	f007 ff1f 	bl	800c6f8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80048ba:	2200      	movs	r2, #0
 80048bc:	490d      	ldr	r1, [pc, #52]	@ (80048f4 <main+0x9d4>)
 80048be:	480c      	ldr	r0, [pc, #48]	@ (80048f0 <main+0x9d0>)
 80048c0:	f007 fffc 	bl	800c8bc <HAL_RTC_GetDate>
				          sTime.Minutes = (sTime.Minutes > 0) ? sTime.Minutes - 1 : 59;
 80048c4:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <main+0x9cc>)
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <main+0x9b6>
 80048cc:	4b07      	ldr	r3, [pc, #28]	@ (80048ec <main+0x9cc>)
 80048ce:	785b      	ldrb	r3, [r3, #1]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	e000      	b.n	80048d8 <main+0x9b8>
 80048d6:	233b      	movs	r3, #59	@ 0x3b
 80048d8:	4a04      	ldr	r2, [pc, #16]	@ (80048ec <main+0x9cc>)
 80048da:	7053      	strb	r3, [r2, #1]
				          needRedraw = 1;
 80048dc:	4b06      	ldr	r3, [pc, #24]	@ (80048f8 <main+0x9d8>)
 80048de:	2201      	movs	r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	e0ab      	b.n	8004a3c <main+0xb1c>
 80048e4:	20005e8c 	.word	0x20005e8c
 80048e8:	20005e8e 	.word	0x20005e8e
 80048ec:	2000510c 	.word	0x2000510c
 80048f0:	20005ec8 	.word	0x20005ec8
 80048f4:	20005120 	.word	0x20005120
 80048f8:	20004ecc 	.word	0x20004ecc
 80048fc:	2aaaaaab 	.word	0x2aaaaaab
 8004900:	88888889 	.word	0x88888889
				      }
				      // Année +
				      else if (x >= col3 && x <= col3 + buttonSize && y >= 40 && y <= 70) {
 8004904:	4b61      	ldr	r3, [pc, #388]	@ (8004a8c <main+0xb6c>)
 8004906:	881b      	ldrh	r3, [r3, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	887a      	ldrh	r2, [r7, #2]
 800490c:	429a      	cmp	r2, r3
 800490e:	d82f      	bhi.n	8004970 <main+0xa50>
 8004910:	4b5e      	ldr	r3, [pc, #376]	@ (8004a8c <main+0xb6c>)
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	4619      	mov	r1, r3
 8004918:	887a      	ldrh	r2, [r7, #2]
 800491a:	883b      	ldrh	r3, [r7, #0]
 800491c:	4413      	add	r3, r2
 800491e:	4299      	cmp	r1, r3
 8004920:	dc26      	bgt.n	8004970 <main+0xa50>
 8004922:	4b5b      	ldr	r3, [pc, #364]	@ (8004a90 <main+0xb70>)
 8004924:	881b      	ldrh	r3, [r3, #0]
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b27      	cmp	r3, #39	@ 0x27
 800492a:	d921      	bls.n	8004970 <main+0xa50>
 800492c:	4b58      	ldr	r3, [pc, #352]	@ (8004a90 <main+0xb70>)
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b46      	cmp	r3, #70	@ 0x46
 8004934:	d81c      	bhi.n	8004970 <main+0xa50>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004936:	2200      	movs	r2, #0
 8004938:	4956      	ldr	r1, [pc, #344]	@ (8004a94 <main+0xb74>)
 800493a:	4857      	ldr	r0, [pc, #348]	@ (8004a98 <main+0xb78>)
 800493c:	f007 fedc 	bl	800c6f8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004940:	2200      	movs	r2, #0
 8004942:	4956      	ldr	r1, [pc, #344]	@ (8004a9c <main+0xb7c>)
 8004944:	4854      	ldr	r0, [pc, #336]	@ (8004a98 <main+0xb78>)
 8004946:	f007 ffb9 	bl	800c8bc <HAL_RTC_GetDate>
				          if(sDate.Year < 99) {  // Limite pour format BCD
 800494a:	4b54      	ldr	r3, [pc, #336]	@ (8004a9c <main+0xb7c>)
 800494c:	78db      	ldrb	r3, [r3, #3]
 800494e:	2b62      	cmp	r3, #98	@ 0x62
 8004950:	d874      	bhi.n	8004a3c <main+0xb1c>
				              sDate.Year++;
 8004952:	4b52      	ldr	r3, [pc, #328]	@ (8004a9c <main+0xb7c>)
 8004954:	78db      	ldrb	r3, [r3, #3]
 8004956:	3301      	adds	r3, #1
 8004958:	b2da      	uxtb	r2, r3
 800495a:	4b50      	ldr	r3, [pc, #320]	@ (8004a9c <main+0xb7c>)
 800495c:	70da      	strb	r2, [r3, #3]
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800495e:	2200      	movs	r2, #0
 8004960:	494e      	ldr	r1, [pc, #312]	@ (8004a9c <main+0xb7c>)
 8004962:	484d      	ldr	r0, [pc, #308]	@ (8004a98 <main+0xb78>)
 8004964:	f007 ff26 	bl	800c7b4 <HAL_RTC_SetDate>
				              needRedraw = 1;
 8004968:	4b4d      	ldr	r3, [pc, #308]	@ (8004aa0 <main+0xb80>)
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]
				          if(sDate.Year < 99) {  // Limite pour format BCD
 800496e:	e065      	b.n	8004a3c <main+0xb1c>
				          }
				      }
				      // Année -
				      else if (x >= col3 && x <= col3 + buttonSize && y >= 105 && y <= 135) {
 8004970:	4b46      	ldr	r3, [pc, #280]	@ (8004a8c <main+0xb6c>)
 8004972:	881b      	ldrh	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	887a      	ldrh	r2, [r7, #2]
 8004978:	429a      	cmp	r2, r3
 800497a:	d82f      	bhi.n	80049dc <main+0xabc>
 800497c:	4b43      	ldr	r3, [pc, #268]	@ (8004a8c <main+0xb6c>)
 800497e:	881b      	ldrh	r3, [r3, #0]
 8004980:	b29b      	uxth	r3, r3
 8004982:	4619      	mov	r1, r3
 8004984:	887a      	ldrh	r2, [r7, #2]
 8004986:	883b      	ldrh	r3, [r7, #0]
 8004988:	4413      	add	r3, r2
 800498a:	4299      	cmp	r1, r3
 800498c:	dc26      	bgt.n	80049dc <main+0xabc>
 800498e:	4b40      	ldr	r3, [pc, #256]	@ (8004a90 <main+0xb70>)
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b68      	cmp	r3, #104	@ 0x68
 8004996:	d921      	bls.n	80049dc <main+0xabc>
 8004998:	4b3d      	ldr	r3, [pc, #244]	@ (8004a90 <main+0xb70>)
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b87      	cmp	r3, #135	@ 0x87
 80049a0:	d81c      	bhi.n	80049dc <main+0xabc>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80049a2:	2200      	movs	r2, #0
 80049a4:	493b      	ldr	r1, [pc, #236]	@ (8004a94 <main+0xb74>)
 80049a6:	483c      	ldr	r0, [pc, #240]	@ (8004a98 <main+0xb78>)
 80049a8:	f007 fea6 	bl	800c6f8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80049ac:	2200      	movs	r2, #0
 80049ae:	493b      	ldr	r1, [pc, #236]	@ (8004a9c <main+0xb7c>)
 80049b0:	4839      	ldr	r0, [pc, #228]	@ (8004a98 <main+0xb78>)
 80049b2:	f007 ff83 	bl	800c8bc <HAL_RTC_GetDate>
				          if(sDate.Year > 0) {
 80049b6:	4b39      	ldr	r3, [pc, #228]	@ (8004a9c <main+0xb7c>)
 80049b8:	78db      	ldrb	r3, [r3, #3]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d03e      	beq.n	8004a3c <main+0xb1c>
				              sDate.Year--;
 80049be:	4b37      	ldr	r3, [pc, #220]	@ (8004a9c <main+0xb7c>)
 80049c0:	78db      	ldrb	r3, [r3, #3]
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	4b35      	ldr	r3, [pc, #212]	@ (8004a9c <main+0xb7c>)
 80049c8:	70da      	strb	r2, [r3, #3]
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80049ca:	2200      	movs	r2, #0
 80049cc:	4933      	ldr	r1, [pc, #204]	@ (8004a9c <main+0xb7c>)
 80049ce:	4832      	ldr	r0, [pc, #200]	@ (8004a98 <main+0xb78>)
 80049d0:	f007 fef0 	bl	800c7b4 <HAL_RTC_SetDate>
				              needRedraw = 1;
 80049d4:	4b32      	ldr	r3, [pc, #200]	@ (8004aa0 <main+0xb80>)
 80049d6:	2201      	movs	r2, #1
 80049d8:	601a      	str	r2, [r3, #0]
				          if(sDate.Year > 0) {
 80049da:	e02f      	b.n	8004a3c <main+0xb1c>
				          }
				      }
				      // Bouton Valider
				      else if (x >= 340 && x <= 440 && y >= 220 && y <= 250) {
 80049dc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a8c <main+0xb6c>)
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 80049e6:	d329      	bcc.n	8004a3c <main+0xb1c>
 80049e8:	4b28      	ldr	r3, [pc, #160]	@ (8004a8c <main+0xb6c>)
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 80049f2:	d823      	bhi.n	8004a3c <main+0xb1c>
 80049f4:	4b26      	ldr	r3, [pc, #152]	@ (8004a90 <main+0xb70>)
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	2bdb      	cmp	r3, #219	@ 0xdb
 80049fc:	d91e      	bls.n	8004a3c <main+0xb1c>
 80049fe:	4b24      	ldr	r3, [pc, #144]	@ (8004a90 <main+0xb70>)
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	2bfa      	cmp	r3, #250	@ 0xfa
 8004a06:	d819      	bhi.n	8004a3c <main+0xb1c>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4922      	ldr	r1, [pc, #136]	@ (8004a94 <main+0xb74>)
 8004a0c:	4822      	ldr	r0, [pc, #136]	@ (8004a98 <main+0xb78>)
 8004a0e:	f007 fe73 	bl	800c6f8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004a12:	2200      	movs	r2, #0
 8004a14:	4921      	ldr	r1, [pc, #132]	@ (8004a9c <main+0xb7c>)
 8004a16:	4820      	ldr	r0, [pc, #128]	@ (8004a98 <main+0xb78>)
 8004a18:	f007 ff50 	bl	800c8bc <HAL_RTC_GetDate>
				          // Mise à jour de la date et de l'heure
				          HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	491d      	ldr	r1, [pc, #116]	@ (8004a94 <main+0xb74>)
 8004a20:	481d      	ldr	r0, [pc, #116]	@ (8004a98 <main+0xb78>)
 8004a22:	f007 fdcf 	bl	800c5c4 <HAL_RTC_SetTime>
				          HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004a26:	2200      	movs	r2, #0
 8004a28:	491c      	ldr	r1, [pc, #112]	@ (8004a9c <main+0xb7c>)
 8004a2a:	481b      	ldr	r0, [pc, #108]	@ (8004a98 <main+0xb78>)
 8004a2c:	f007 fec2 	bl	800c7b4 <HAL_RTC_SetDate>
				          flag = 0;
 8004a30:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa4 <main+0xb84>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	701a      	strb	r2, [r3, #0]
				          needRedraw = 1;
 8004a36:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa0 <main+0xb80>)
 8004a38:	2201      	movs	r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]
				      }

				      // Si une valeur a été modifiée, on met à jour la RTC
				      if (needRedraw) {
 8004a3c:	4b18      	ldr	r3, [pc, #96]	@ (8004aa0 <main+0xb80>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <main+0xb40>
				          if (flag == 3) {  // Si on est toujours sur la page de réglage
 8004a44:	4b17      	ldr	r3, [pc, #92]	@ (8004aa4 <main+0xb84>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d109      	bne.n	8004a60 <main+0xb40>
				              HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	4911      	ldr	r1, [pc, #68]	@ (8004a94 <main+0xb74>)
 8004a50:	4811      	ldr	r0, [pc, #68]	@ (8004a98 <main+0xb78>)
 8004a52:	f007 fdb7 	bl	800c5c4 <HAL_RTC_SetTime>
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004a56:	2200      	movs	r2, #0
 8004a58:	4910      	ldr	r1, [pc, #64]	@ (8004a9c <main+0xb7c>)
 8004a5a:	480f      	ldr	r0, [pc, #60]	@ (8004a98 <main+0xb78>)
 8004a5c:	f007 feaa 	bl	800c7b4 <HAL_RTC_SetDate>
				          }
				      }
				  //remise à 0 du timer 5 si l'écran est touché (Mise en sommeil).

				  }
			  	  HAL_TIM_Base_Stop(&htim5);
 8004a60:	4811      	ldr	r0, [pc, #68]	@ (8004aa8 <main+0xb88>)
 8004a62:	f009 fcd3 	bl	800e40c <HAL_TIM_Base_Stop>
			  	  __HAL_TIM_SET_COUNTER(&htim5, 0);
 8004a66:	4b10      	ldr	r3, [pc, #64]	@ (8004aa8 <main+0xb88>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	625a      	str	r2, [r3, #36]	@ 0x24
			  	  HAL_TIM_Base_Start(&htim5);
 8004a6e:	480e      	ldr	r0, [pc, #56]	@ (8004aa8 <main+0xb88>)
 8004a70:	f009 fc5c 	bl	800e32c <HAL_TIM_Base_Start>
 8004a74:	e008      	b.n	8004a88 <main+0xb68>


		  } else if (!TS_State.touchDetected) {
 8004a76:	4b0d      	ldr	r3, [pc, #52]	@ (8004aac <main+0xb8c>)
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f47f aacc 	bne.w	800401a <main+0xfa>
			  debounce = 0; // Reset debounce flag when touch is released
 8004a82:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab0 <main+0xb90>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
         if (needRedraw) {
 8004a88:	f7ff bac7 	b.w	800401a <main+0xfa>
 8004a8c:	20005e8c 	.word	0x20005e8c
 8004a90:	20005e8e 	.word	0x20005e8e
 8004a94:	2000510c 	.word	0x2000510c
 8004a98:	20005ec8 	.word	0x20005ec8
 8004a9c:	20005120 	.word	0x20005120
 8004aa0:	20004ecc 	.word	0x20004ecc
 8004aa4:	20005e94 	.word	0x20005e94
 8004aa8:	20006114 	.word	0x20006114
 8004aac:	20005e60 	.word	0x20005e60
 8004ab0:	20005e90 	.word	0x20005e90

08004ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b094      	sub	sp, #80	@ 0x50
 8004ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004aba:	f107 0320 	add.w	r3, r7, #32
 8004abe:	2230      	movs	r2, #48	@ 0x30
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f010 f850 	bl	8014b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ac8:	f107 030c 	add.w	r3, r7, #12
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004ad8:	f006 fbdc 	bl	800b294 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004adc:	4b2c      	ldr	r3, [pc, #176]	@ (8004b90 <SystemClock_Config+0xdc>)
 8004ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b90 <SystemClock_Config+0xdc>)
 8004ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ae8:	4b29      	ldr	r3, [pc, #164]	@ (8004b90 <SystemClock_Config+0xdc>)
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004af0:	60bb      	str	r3, [r7, #8]
 8004af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004af4:	4b27      	ldr	r3, [pc, #156]	@ (8004b94 <SystemClock_Config+0xe0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a26      	ldr	r2, [pc, #152]	@ (8004b94 <SystemClock_Config+0xe0>)
 8004afa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	4b24      	ldr	r3, [pc, #144]	@ (8004b94 <SystemClock_Config+0xe0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004b0c:	2309      	movs	r3, #9
 8004b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004b16:	2301      	movs	r3, #1
 8004b18:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004b24:	2319      	movs	r3, #25
 8004b26:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8004b28:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8004b2c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004b2e:	2302      	movs	r3, #2
 8004b30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8004b32:	2309      	movs	r3, #9
 8004b34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b36:	f107 0320 	add.w	r3, r7, #32
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f006 fc44 	bl	800b3c8 <HAL_RCC_OscConfig>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004b46:	f000 f911 	bl	8004d6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004b4a:	f006 fbed 	bl	800b328 <HAL_PWREx_EnableOverDrive>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8004b54:	f000 f90a 	bl	8004d6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b58:	230f      	movs	r3, #15
 8004b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b60:	2300      	movs	r3, #0
 8004b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004b64:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004b68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004b6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004b70:	f107 030c 	add.w	r3, r7, #12
 8004b74:	2107      	movs	r1, #7
 8004b76:	4618      	mov	r0, r3
 8004b78:	f006 feca 	bl	800b910 <HAL_RCC_ClockConfig>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8004b82:	f000 f8f3 	bl	8004d6c <Error_Handler>
  }
}
 8004b86:	bf00      	nop
 8004b88:	3750      	adds	r7, #80	@ 0x50
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800
 8004b94:	40007000 	.word	0x40007000

08004b98 <TouchTimer_Init>:

/* USER CODE BEGIN 4 */
void TouchTimer_Init() {
 8004b98:	b598      	push	{r3, r4, r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8004b9c:	f001 fd46 	bl	800662c <BSP_LCD_GetXSize>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	b29c      	uxth	r4, r3
 8004ba4:	f001 fd56 	bl	8006654 <BSP_LCD_GetYSize>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	4619      	mov	r1, r3
 8004bae:	4620      	mov	r0, r4
 8004bb0:	f003 f87e 	bl	8007cb0 <BSP_TS_Init>

    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8004bb4:	4808      	ldr	r0, [pc, #32]	@ (8004bd8 <TouchTimer_Init+0x40>)
 8004bb6:	f009 fb62 	bl	800e27e <HAL_TIM_Base_Init>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <TouchTimer_Init+0x2c>
        while (1);
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <TouchTimer_Init+0x28>
    }
    if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8004bc4:	4804      	ldr	r0, [pc, #16]	@ (8004bd8 <TouchTimer_Init+0x40>)
 8004bc6:	f009 fc49 	bl	800e45c <HAL_TIM_Base_Start_IT>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <TouchTimer_Init+0x3c>
        while (1);
 8004bd0:	bf00      	nop
 8004bd2:	e7fd      	b.n	8004bd0 <TouchTimer_Init+0x38>
    }
}
 8004bd4:	bf00      	nop
 8004bd6:	bd98      	pop	{r3, r4, r7, pc}
 8004bd8:	200060c8 	.word	0x200060c8

08004bdc <PollTouchScreen>:

void PollTouchScreen(void)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b08c      	sub	sp, #48	@ 0x30
 8004be0:	af00      	add	r7, sp, #0
	static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
	TS_StateTypeDef ts;                   /* Actual touch state from the touch sensor used from BSP package */
	BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API)*/
 8004be2:	1d3b      	adds	r3, r7, #4
 8004be4:	4618      	mov	r0, r3
 8004be6:	f003 f8a3 	bl	8007d30 <BSP_TS_GetState>
	TS_State.touchDetected = ts.touchDetected;  /* Store pressed state */
 8004bea:	793a      	ldrb	r2, [r7, #4]
 8004bec:	4b10      	ldr	r3, [pc, #64]	@ (8004c30 <PollTouchScreen+0x54>)
 8004bee:	701a      	strb	r2, [r3, #0]

	/* Check if the touch is pressed */
	if ((prev_state.touchDetected != ts.touchDetected))
 8004bf0:	4b10      	ldr	r3, [pc, #64]	@ (8004c34 <PollTouchScreen+0x58>)
 8004bf2:	781a      	ldrb	r2, [r3, #0]
 8004bf4:	793b      	ldrb	r3, [r7, #4]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d016      	beq.n	8004c28 <PollTouchScreen+0x4c>
	{
		prev_state.touchDetected = ts.touchDetected;
 8004bfa:	793a      	ldrb	r2, [r7, #4]
 8004bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004c34 <PollTouchScreen+0x58>)
 8004bfe:	701a      	strb	r2, [r3, #0]
		/* Check touch variations */
		if ((ts.touchX[0] != 0) && (ts.touchY[0] != 0))
 8004c00:	88fb      	ldrh	r3, [r7, #6]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d008      	beq.n	8004c18 <PollTouchScreen+0x3c>
 8004c06:	8a3b      	ldrh	r3, [r7, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <PollTouchScreen+0x3c>
		{
		  prev_state.touchX[0] = ts.touchX[0];
 8004c0c:	88fa      	ldrh	r2, [r7, #6]
 8004c0e:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <PollTouchScreen+0x58>)
 8004c10:	805a      	strh	r2, [r3, #2]
		  prev_state.touchY[0] = ts.touchY[0];
 8004c12:	8a3a      	ldrh	r2, [r7, #16]
 8004c14:	4b07      	ldr	r3, [pc, #28]	@ (8004c34 <PollTouchScreen+0x58>)
 8004c16:	819a      	strh	r2, [r3, #12]
		}
		x = prev_state.touchX[0];
 8004c18:	4b06      	ldr	r3, [pc, #24]	@ (8004c34 <PollTouchScreen+0x58>)
 8004c1a:	885a      	ldrh	r2, [r3, #2]
 8004c1c:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <PollTouchScreen+0x5c>)
 8004c1e:	801a      	strh	r2, [r3, #0]
		y = prev_state.touchY[0];
 8004c20:	4b04      	ldr	r3, [pc, #16]	@ (8004c34 <PollTouchScreen+0x58>)
 8004c22:	899a      	ldrh	r2, [r3, #12]
 8004c24:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <PollTouchScreen+0x60>)
 8004c26:	801a      	strh	r2, [r3, #0]
	}
}
 8004c28:	bf00      	nop
 8004c2a:	3730      	adds	r7, #48	@ 0x30
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20005e60 	.word	0x20005e60
 8004c34:	20005e9c 	.word	0x20005e9c
 8004c38:	20005e8c 	.word	0x20005e8c
 8004c3c:	20005e8e 	.word	0x20005e8e

08004c40 <HAL_TIM_PeriodElapsedCallback>:

//interruption timer
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]

  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */
  //routine de l'écran tactile
  if (htim->Instance == TIM3)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d104      	bne.n	8004c5c <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  PollTouchScreen();
 8004c52:	f7ff ffc3 	bl	8004bdc <PollTouchScreen>
 	  date_Heure();
 8004c56:	f7fc f9c1 	bl	8000fdc <date_Heure>
  else if(htim->Instance == TIM2) {
  	  // Timer si 1 minute atteint
  	  flag_meteo=1; // Activer le flag indiquant la fin de 1 minute
  }
  /* USER CODE END Callback 1 */
}
 8004c5a:	e030      	b.n	8004cbe <HAL_TIM_PeriodElapsedCallback+0x7e>
  else if (htim->Instance == TIM6) {
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1a      	ldr	r2, [pc, #104]	@ (8004ccc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d106      	bne.n	8004c74 <HAL_TIM_PeriodElapsedCallback+0x34>
	  minute_flag = 1; // Activer le flag indiquant la fin de 1 minute (5s pour le test)
 8004c66:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	701a      	strb	r2, [r3, #0]
	  printf("Minute flag set!\r\n"); // Pour vérifier que l'interruption est déclenchée
 8004c6c:	4819      	ldr	r0, [pc, #100]	@ (8004cd4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004c6e:	f00f fe47 	bl	8014900 <puts>
}
 8004c72:	e024      	b.n	8004cbe <HAL_TIM_PeriodElapsedCallback+0x7e>
  else if(htim->Instance == TIM8) {
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a17      	ldr	r2, [pc, #92]	@ (8004cd8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d103      	bne.n	8004c86 <HAL_TIM_PeriodElapsedCallback+0x46>
	  time_IRQ_acquisition=1; // Activer le flag indiquant la fin de 1 minute
 8004c7e:	4b17      	ldr	r3, [pc, #92]	@ (8004cdc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
}
 8004c84:	e01b      	b.n	8004cbe <HAL_TIM_PeriodElapsedCallback+0x7e>
  else if(htim->Instance == TIM7) {
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a15      	ldr	r2, [pc, #84]	@ (8004ce0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d105      	bne.n	8004c9c <HAL_TIM_PeriodElapsedCallback+0x5c>
          printf("Tentative d'enregistrement...\n");  // Debug
 8004c90:	4814      	ldr	r0, [pc, #80]	@ (8004ce4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004c92:	f00f fe35 	bl	8014900 <puts>
          log_weather_data();
 8004c96:	f7fd ff81 	bl	8002b9c <log_weather_data>
}
 8004c9a:	e010      	b.n	8004cbe <HAL_TIM_PeriodElapsedCallback+0x7e>
  else if(htim->Instance == TIM5) {
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a11      	ldr	r2, [pc, #68]	@ (8004ce8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d103      	bne.n	8004cae <HAL_TIM_PeriodElapsedCallback+0x6e>
	  flag_IRQ_sleep=1; // Activer le flag indiquant la fin de 1 minute
 8004ca6:	4b11      	ldr	r3, [pc, #68]	@ (8004cec <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	701a      	strb	r2, [r3, #0]
}
 8004cac:	e007      	b.n	8004cbe <HAL_TIM_PeriodElapsedCallback+0x7e>
  else if(htim->Instance == TIM2) {
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cb6:	d102      	bne.n	8004cbe <HAL_TIM_PeriodElapsedCallback+0x7e>
  	  flag_meteo=1; // Activer le flag indiquant la fin de 1 minute
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40001000 	.word	0x40001000
 8004cd0:	20005c4c 	.word	0x20005c4c
 8004cd4:	080172a8 	.word	0x080172a8
 8004cd8:	40010400 	.word	0x40010400
 8004cdc:	20005e97 	.word	0x20005e97
 8004ce0:	40001400 	.word	0x40001400
 8004ce4:	080172bc 	.word	0x080172bc
 8004ce8:	40000c00 	.word	0x40000c00
 8004cec:	20005e98 	.word	0x20005e98
 8004cf0:	20005e95 	.word	0x20005e95

08004cf4 <HAL_GPIO_EXTI_Callback>:

//interruption GPIO
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	80fb      	strh	r3, [r7, #6]
    UNUSED(GPIO_Pin);

    if(GPIO_Pin == GPIO_PIN_15){
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d04:	d108      	bne.n	8004d18 <HAL_GPIO_EXTI_Callback+0x24>
    	  rainCount++;
 8004d06:	4b0c      	ldr	r3, [pc, #48]	@ (8004d38 <HAL_GPIO_EXTI_Callback+0x44>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004d38 <HAL_GPIO_EXTI_Callback+0x44>)
 8004d0e:	6013      	str	r3, [r2, #0]
    	  flagRain=1;
 8004d10:	4b0a      	ldr	r3, [pc, #40]	@ (8004d3c <HAL_GPIO_EXTI_Callback+0x48>)
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]

    else if (GPIO_Pin == sleep_button_Pin) {
          flag_ext_button = 1;
    	  flag_IRQ_sleep=0;
    }
}
 8004d16:	e009      	b.n	8004d2c <HAL_GPIO_EXTI_Callback+0x38>
    else if (GPIO_Pin == sleep_button_Pin) {
 8004d18:	88fb      	ldrh	r3, [r7, #6]
 8004d1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d1e:	d105      	bne.n	8004d2c <HAL_GPIO_EXTI_Callback+0x38>
          flag_ext_button = 1;
 8004d20:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
    	  flag_IRQ_sleep=0;
 8004d26:	4b07      	ldr	r3, [pc, #28]	@ (8004d44 <HAL_GPIO_EXTI_Callback+0x50>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	200059fc 	.word	0x200059fc
 8004d3c:	20005a01 	.word	0x20005a01
 8004d40:	20005e96 	.word	0x20005e96
 8004d44:	20005e98 	.word	0x20005e98

08004d48 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART1 and Loop until the end of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8004d50:	1d39      	adds	r1, r7, #4
 8004d52:	2364      	movs	r3, #100	@ 0x64
 8004d54:	2201      	movs	r2, #1
 8004d56:	4804      	ldr	r0, [pc, #16]	@ (8004d68 <__io_putchar+0x20>)
 8004d58:	f00a fbda 	bl	800f510 <HAL_UART_Transmit>
return ch;
 8004d5c:	687b      	ldr	r3, [r7, #4]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3708      	adds	r7, #8
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	20006244 	.word	0x20006244

08004d6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d70:	b672      	cpsid	i
}
 8004d72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <Error_Handler+0x8>

08004d78 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b090      	sub	sp, #64	@ 0x40
 8004d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004d7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	605a      	str	r2, [r3, #4]
 8004d88:	609a      	str	r2, [r3, #8]
 8004d8a:	60da      	str	r2, [r3, #12]
 8004d8c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004d8e:	2300      	movs	r3, #0
 8004d90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8004d92:	463b      	mov	r3, r7
 8004d94:	2228      	movs	r2, #40	@ 0x28
 8004d96:	2100      	movs	r1, #0
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f00f fee5 	bl	8014b68 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004da0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ea0 <MX_RTC_Init+0x128>)
 8004da2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004da4:	4b3d      	ldr	r3, [pc, #244]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004daa:	4b3c      	ldr	r3, [pc, #240]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004dac:	227f      	movs	r2, #127	@ 0x7f
 8004dae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004db0:	4b3a      	ldr	r3, [pc, #232]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004db2:	22ff      	movs	r2, #255	@ 0xff
 8004db4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004db6:	4b39      	ldr	r3, [pc, #228]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004dbc:	4b37      	ldr	r3, [pc, #220]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004dc2:	4b36      	ldr	r3, [pc, #216]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004dc8:	4834      	ldr	r0, [pc, #208]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004dca:	f007 fb77 	bl	800c4bc <HAL_RTC_Init>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8004dd4:	f7ff ffca 	bl	8004d6c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004df6:	2200      	movs	r2, #0
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4828      	ldr	r0, [pc, #160]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004dfc:	f007 fbe2 	bl	800c5c4 <HAL_RTC_SetTime>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8004e06:	f7ff ffb1 	bl	8004d6c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004e22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004e26:	2200      	movs	r2, #0
 8004e28:	4619      	mov	r1, r3
 8004e2a:	481c      	ldr	r0, [pc, #112]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004e2c:	f007 fcc2 	bl	800c7b4 <HAL_RTC_SetDate>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8004e36:	f7ff ff99 	bl	8004d6c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8004e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4619      	mov	r1, r3
 8004e70:	480a      	ldr	r0, [pc, #40]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004e72:	f007 fd73 	bl	800c95c <HAL_RTC_SetAlarm>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8004e7c:	f7ff ff76 	bl	8004d6c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004e80:	2200      	movs	r2, #0
 8004e82:	2100      	movs	r1, #0
 8004e84:	4805      	ldr	r0, [pc, #20]	@ (8004e9c <MX_RTC_Init+0x124>)
 8004e86:	f007 ff51 	bl	800cd2c <HAL_RTCEx_SetWakeUpTimer_IT>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8004e90:	f7ff ff6c 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004e94:	bf00      	nop
 8004e96:	3740      	adds	r7, #64	@ 0x40
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20005ec8 	.word	0x20005ec8
 8004ea0:	40002800 	.word	0x40002800

08004ea4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b0a4      	sub	sp, #144	@ 0x90
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004eac:	f107 030c 	add.w	r3, r7, #12
 8004eb0:	2284      	movs	r2, #132	@ 0x84
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f00f fe57 	bl	8014b68 <memset>
  if(rtcHandle->Instance==RTC)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a12      	ldr	r2, [pc, #72]	@ (8004f08 <HAL_RTC_MspInit+0x64>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d11c      	bne.n	8004efe <HAL_RTC_MspInit+0x5a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004ec4:	2320      	movs	r3, #32
 8004ec6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004ec8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ece:	f107 030c 	add.w	r3, r7, #12
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f006 ff02 	bl	800bcdc <HAL_RCCEx_PeriphCLKConfig>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d001      	beq.n	8004ee2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004ede:	f7ff ff45 	bl	8004d6c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <HAL_RTC_MspInit+0x68>)
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	4a09      	ldr	r2, [pc, #36]	@ (8004f0c <HAL_RTC_MspInit+0x68>)
 8004ee8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004eec:	6713      	str	r3, [r2, #112]	@ 0x70

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	2003      	movs	r0, #3
 8004ef4:	f003 feed 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004ef8:	2003      	movs	r0, #3
 8004efa:	f003 ff06 	bl	8008d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004efe:	bf00      	nop
 8004f00:	3790      	adds	r7, #144	@ 0x90
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40002800 	.word	0x40002800
 8004f0c:	40023800 	.word	0x40023800

08004f10 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8004f14:	4b0c      	ldr	r3, [pc, #48]	@ (8004f48 <MX_SDMMC1_SD_Init+0x38>)
 8004f16:	4a0d      	ldr	r2, [pc, #52]	@ (8004f4c <MX_SDMMC1_SD_Init+0x3c>)
 8004f18:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f48 <MX_SDMMC1_SD_Init+0x38>)
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004f20:	4b09      	ldr	r3, [pc, #36]	@ (8004f48 <MX_SDMMC1_SD_Init+0x38>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004f26:	4b08      	ldr	r3, [pc, #32]	@ (8004f48 <MX_SDMMC1_SD_Init+0x38>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004f2c:	4b06      	ldr	r3, [pc, #24]	@ (8004f48 <MX_SDMMC1_SD_Init+0x38>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004f32:	4b05      	ldr	r3, [pc, #20]	@ (8004f48 <MX_SDMMC1_SD_Init+0x38>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004f38:	4b03      	ldr	r3, [pc, #12]	@ (8004f48 <MX_SDMMC1_SD_Init+0x38>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8004f3e:	bf00      	nop
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	20005ee8 	.word	0x20005ee8
 8004f4c:	40012c00 	.word	0x40012c00

08004f50 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b0ac      	sub	sp, #176	@ 0xb0
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	605a      	str	r2, [r3, #4]
 8004f62:	609a      	str	r2, [r3, #8]
 8004f64:	60da      	str	r2, [r3, #12]
 8004f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f68:	f107 0318 	add.w	r3, r7, #24
 8004f6c:	2284      	movs	r2, #132	@ 0x84
 8004f6e:	2100      	movs	r1, #0
 8004f70:	4618      	mov	r0, r3
 8004f72:	f00f fdf9 	bl	8014b68 <memset>
  if(sdHandle->Instance==SDMMC1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a74      	ldr	r2, [pc, #464]	@ (800514c <HAL_SD_MspInit+0x1fc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	f040 80e0 	bne.w	8005142 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8004f82:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8004f86:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f94:	f107 0318 	add.w	r3, r7, #24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f006 fe9f 	bl	800bcdc <HAL_RCCEx_PeriphCLKConfig>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8004fa4:	f7ff fee2 	bl	8004d6c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004fa8:	4b69      	ldr	r3, [pc, #420]	@ (8005150 <HAL_SD_MspInit+0x200>)
 8004faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fac:	4a68      	ldr	r2, [pc, #416]	@ (8005150 <HAL_SD_MspInit+0x200>)
 8004fae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fb4:	4b66      	ldr	r3, [pc, #408]	@ (8005150 <HAL_SD_MspInit+0x200>)
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fc0:	4b63      	ldr	r3, [pc, #396]	@ (8005150 <HAL_SD_MspInit+0x200>)
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc4:	4a62      	ldr	r2, [pc, #392]	@ (8005150 <HAL_SD_MspInit+0x200>)
 8004fc6:	f043 0304 	orr.w	r3, r3, #4
 8004fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fcc:	4b60      	ldr	r3, [pc, #384]	@ (8005150 <HAL_SD_MspInit+0x200>)
 8004fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fd8:	4b5d      	ldr	r3, [pc, #372]	@ (8005150 <HAL_SD_MspInit+0x200>)
 8004fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fdc:	4a5c      	ldr	r2, [pc, #368]	@ (8005150 <HAL_SD_MspInit+0x200>)
 8004fde:	f043 0308 	orr.w	r3, r3, #8
 8004fe2:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8005150 <HAL_SD_MspInit+0x200>)
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8004ff0:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8004ff4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005004:	2303      	movs	r3, #3
 8005006:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800500a:	230c      	movs	r3, #12
 800500c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005010:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005014:	4619      	mov	r1, r3
 8005016:	484f      	ldr	r0, [pc, #316]	@ (8005154 <HAL_SD_MspInit+0x204>)
 8005018:	f004 fd22 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800501c:	2304      	movs	r3, #4
 800501e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005022:	2302      	movs	r3, #2
 8005024:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005028:	2300      	movs	r3, #0
 800502a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800502e:	2303      	movs	r3, #3
 8005030:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005034:	230c      	movs	r3, #12
 8005036:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800503a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800503e:	4619      	mov	r1, r3
 8005040:	4845      	ldr	r0, [pc, #276]	@ (8005158 <HAL_SD_MspInit+0x208>)
 8005042:	f004 fd0d 	bl	8009a60 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8005046:	4b45      	ldr	r3, [pc, #276]	@ (800515c <HAL_SD_MspInit+0x20c>)
 8005048:	4a45      	ldr	r2, [pc, #276]	@ (8005160 <HAL_SD_MspInit+0x210>)
 800504a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800504c:	4b43      	ldr	r3, [pc, #268]	@ (800515c <HAL_SD_MspInit+0x20c>)
 800504e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005052:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005054:	4b41      	ldr	r3, [pc, #260]	@ (800515c <HAL_SD_MspInit+0x20c>)
 8005056:	2200      	movs	r2, #0
 8005058:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800505a:	4b40      	ldr	r3, [pc, #256]	@ (800515c <HAL_SD_MspInit+0x20c>)
 800505c:	2200      	movs	r2, #0
 800505e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005060:	4b3e      	ldr	r3, [pc, #248]	@ (800515c <HAL_SD_MspInit+0x20c>)
 8005062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005066:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005068:	4b3c      	ldr	r3, [pc, #240]	@ (800515c <HAL_SD_MspInit+0x20c>)
 800506a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800506e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005070:	4b3a      	ldr	r3, [pc, #232]	@ (800515c <HAL_SD_MspInit+0x20c>)
 8005072:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005076:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8005078:	4b38      	ldr	r3, [pc, #224]	@ (800515c <HAL_SD_MspInit+0x20c>)
 800507a:	2220      	movs	r2, #32
 800507c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800507e:	4b37      	ldr	r3, [pc, #220]	@ (800515c <HAL_SD_MspInit+0x20c>)
 8005080:	2200      	movs	r2, #0
 8005082:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005084:	4b35      	ldr	r3, [pc, #212]	@ (800515c <HAL_SD_MspInit+0x20c>)
 8005086:	2204      	movs	r2, #4
 8005088:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800508a:	4b34      	ldr	r3, [pc, #208]	@ (800515c <HAL_SD_MspInit+0x20c>)
 800508c:	2203      	movs	r2, #3
 800508e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005090:	4b32      	ldr	r3, [pc, #200]	@ (800515c <HAL_SD_MspInit+0x20c>)
 8005092:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8005096:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005098:	4b30      	ldr	r3, [pc, #192]	@ (800515c <HAL_SD_MspInit+0x20c>)
 800509a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800509e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80050a0:	482e      	ldr	r0, [pc, #184]	@ (800515c <HAL_SD_MspInit+0x20c>)
 80050a2:	f003 fe4d 	bl	8008d40 <HAL_DMA_Init>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d001      	beq.n	80050b0 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80050ac:	f7ff fe5e 	bl	8004d6c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a2a      	ldr	r2, [pc, #168]	@ (800515c <HAL_SD_MspInit+0x20c>)
 80050b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80050b6:	4a29      	ldr	r2, [pc, #164]	@ (800515c <HAL_SD_MspInit+0x20c>)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80050bc:	4b29      	ldr	r3, [pc, #164]	@ (8005164 <HAL_SD_MspInit+0x214>)
 80050be:	4a2a      	ldr	r2, [pc, #168]	@ (8005168 <HAL_SD_MspInit+0x218>)
 80050c0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80050c2:	4b28      	ldr	r3, [pc, #160]	@ (8005164 <HAL_SD_MspInit+0x214>)
 80050c4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80050c8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050ca:	4b26      	ldr	r3, [pc, #152]	@ (8005164 <HAL_SD_MspInit+0x214>)
 80050cc:	2240      	movs	r2, #64	@ 0x40
 80050ce:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050d0:	4b24      	ldr	r3, [pc, #144]	@ (8005164 <HAL_SD_MspInit+0x214>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050d6:	4b23      	ldr	r3, [pc, #140]	@ (8005164 <HAL_SD_MspInit+0x214>)
 80050d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050dc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050de:	4b21      	ldr	r3, [pc, #132]	@ (8005164 <HAL_SD_MspInit+0x214>)
 80050e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80050e4:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050e6:	4b1f      	ldr	r3, [pc, #124]	@ (8005164 <HAL_SD_MspInit+0x214>)
 80050e8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80050ec:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80050ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005164 <HAL_SD_MspInit+0x214>)
 80050f0:	2220      	movs	r2, #32
 80050f2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80050f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005164 <HAL_SD_MspInit+0x214>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80050fa:	4b1a      	ldr	r3, [pc, #104]	@ (8005164 <HAL_SD_MspInit+0x214>)
 80050fc:	2204      	movs	r2, #4
 80050fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005100:	4b18      	ldr	r3, [pc, #96]	@ (8005164 <HAL_SD_MspInit+0x214>)
 8005102:	2203      	movs	r2, #3
 8005104:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005106:	4b17      	ldr	r3, [pc, #92]	@ (8005164 <HAL_SD_MspInit+0x214>)
 8005108:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800510c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800510e:	4b15      	ldr	r3, [pc, #84]	@ (8005164 <HAL_SD_MspInit+0x214>)
 8005110:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8005114:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8005116:	4813      	ldr	r0, [pc, #76]	@ (8005164 <HAL_SD_MspInit+0x214>)
 8005118:	f003 fe12 	bl	8008d40 <HAL_DMA_Init>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8005122:	f7ff fe23 	bl	8004d6c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a0e      	ldr	r2, [pc, #56]	@ (8005164 <HAL_SD_MspInit+0x214>)
 800512a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800512c:	4a0d      	ldr	r2, [pc, #52]	@ (8005164 <HAL_SD_MspInit+0x214>)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8005132:	2200      	movs	r2, #0
 8005134:	2100      	movs	r1, #0
 8005136:	2031      	movs	r0, #49	@ 0x31
 8005138:	f003 fdcb 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800513c:	2031      	movs	r0, #49	@ 0x31
 800513e:	f003 fde4 	bl	8008d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8005142:	bf00      	nop
 8005144:	37b0      	adds	r7, #176	@ 0xb0
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00
 8005150:	40023800 	.word	0x40023800
 8005154:	40020800 	.word	0x40020800
 8005158:	40020c00 	.word	0x40020c00
 800515c:	20005f6c 	.word	0x20005f6c
 8005160:	40026458 	.word	0x40026458
 8005164:	20005fcc 	.word	0x20005fcc
 8005168:	400264a0 	.word	0x400264a0

0800516c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005172:	4b0f      	ldr	r3, [pc, #60]	@ (80051b0 <HAL_MspInit+0x44>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005176:	4a0e      	ldr	r2, [pc, #56]	@ (80051b0 <HAL_MspInit+0x44>)
 8005178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800517c:	6413      	str	r3, [r2, #64]	@ 0x40
 800517e:	4b0c      	ldr	r3, [pc, #48]	@ (80051b0 <HAL_MspInit+0x44>)
 8005180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005186:	607b      	str	r3, [r7, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800518a:	4b09      	ldr	r3, [pc, #36]	@ (80051b0 <HAL_MspInit+0x44>)
 800518c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518e:	4a08      	ldr	r2, [pc, #32]	@ (80051b0 <HAL_MspInit+0x44>)
 8005190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005194:	6453      	str	r3, [r2, #68]	@ 0x44
 8005196:	4b06      	ldr	r3, [pc, #24]	@ (80051b0 <HAL_MspInit+0x44>)
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80051a2:	bf00      	nop
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40023800 	.word	0x40023800

080051b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051b8:	bf00      	nop
 80051ba:	e7fd      	b.n	80051b8 <NMI_Handler+0x4>

080051bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <HardFault_Handler+0x4>

080051c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <MemManage_Handler+0x4>

080051cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <BusFault_Handler+0x4>

080051d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <UsageFault_Handler+0x4>

080051dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051e0:	bf00      	nop
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051ea:	b480      	push	{r7}
 80051ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800520a:	f003 f815 	bl	8008238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800520e:	bf00      	nop
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005218:	4802      	ldr	r0, [pc, #8]	@ (8005224 <RTC_WKUP_IRQHandler+0x10>)
 800521a:	f007 fe49 	bl	800ceb0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20005ec8 	.word	0x20005ec8

08005228 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 800522c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005230:	f004 ff00 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}

08005238 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800523c:	4802      	ldr	r0, [pc, #8]	@ (8005248 <TIM1_CC_IRQHandler+0x10>)
 800523e:	f009 fb5b 	bl	800e8f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20006030 	.word	0x20006030

0800524c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005250:	4802      	ldr	r0, [pc, #8]	@ (800525c <TIM2_IRQHandler+0x10>)
 8005252:	f009 fb51 	bl	800e8f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	2000607c 	.word	0x2000607c

08005260 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005264:	4802      	ldr	r0, [pc, #8]	@ (8005270 <TIM3_IRQHandler+0x10>)
 8005266:	f009 fb47 	bl	800e8f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800526a:	bf00      	nop
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	200060c8 	.word	0x200060c8

08005274 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(sleep_button_Pin);
 8005278:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800527c:	f004 feda 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005280:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005284:	f004 fed6 	bl	800a034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005288:	bf00      	nop
 800528a:	bd80      	pop	{r7, pc}

0800528c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005290:	4802      	ldr	r0, [pc, #8]	@ (800529c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8005292:	f009 fb31 	bl	800e8f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200061f8 	.word	0x200061f8

080052a0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80052a4:	4802      	ldr	r0, [pc, #8]	@ (80052b0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80052a6:	f009 fb27 	bl	800e8f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80052aa:	bf00      	nop
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	200061f8 	.word	0x200061f8

080052b4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80052b8:	4802      	ldr	r0, [pc, #8]	@ (80052c4 <SDMMC1_IRQHandler+0x10>)
 80052ba:	f008 f8a7 	bl	800d40c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80052be:	bf00      	nop
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20005ee8 	.word	0x20005ee8

080052c8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80052cc:	4802      	ldr	r0, [pc, #8]	@ (80052d8 <TIM5_IRQHandler+0x10>)
 80052ce:	f009 fb13 	bl	800e8f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20006114 	.word	0x20006114

080052dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80052e0:	4802      	ldr	r0, [pc, #8]	@ (80052ec <TIM6_DAC_IRQHandler+0x10>)
 80052e2:	f009 fb09 	bl	800e8f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20006160 	.word	0x20006160

080052f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80052f4:	4802      	ldr	r0, [pc, #8]	@ (8005300 <TIM7_IRQHandler+0x10>)
 80052f6:	f009 faff 	bl	800e8f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	200061ac 	.word	0x200061ac

08005304 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8005308:	4802      	ldr	r0, [pc, #8]	@ (8005314 <DMA2_Stream3_IRQHandler+0x10>)
 800530a:	f003 fea7 	bl	800905c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20005f6c 	.word	0x20005f6c

08005318 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800531c:	4802      	ldr	r0, [pc, #8]	@ (8005328 <DMA2_Stream6_IRQHandler+0x10>)
 800531e:	f003 fe9d 	bl	800905c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005322:	bf00      	nop
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20005fcc 	.word	0x20005fcc

0800532c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
  return 1;
 8005330:	2301      	movs	r3, #1
}
 8005332:	4618      	mov	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <_kill>:

int _kill(int pid, int sig)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005346:	f00f fc61 	bl	8014c0c <__errno>
 800534a:	4603      	mov	r3, r0
 800534c:	2216      	movs	r2, #22
 800534e:	601a      	str	r2, [r3, #0]
  return -1;
 8005350:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <_exit>:

void _exit (int status)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005364:	f04f 31ff 	mov.w	r1, #4294967295
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff ffe7 	bl	800533c <_kill>
  while (1) {}    /* Make sure we hang here */
 800536e:	bf00      	nop
 8005370:	e7fd      	b.n	800536e <_exit+0x12>

08005372 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b086      	sub	sp, #24
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e00a      	b.n	800539a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005384:	f3af 8000 	nop.w
 8005388:	4601      	mov	r1, r0
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	60ba      	str	r2, [r7, #8]
 8005390:	b2ca      	uxtb	r2, r1
 8005392:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	3301      	adds	r3, #1
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	429a      	cmp	r2, r3
 80053a0:	dbf0      	blt.n	8005384 <_read+0x12>
  }

  return len;
 80053a2:	687b      	ldr	r3, [r7, #4]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3718      	adds	r7, #24
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e009      	b.n	80053d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	1c5a      	adds	r2, r3, #1
 80053c2:	60ba      	str	r2, [r7, #8]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7ff fcbe 	bl	8004d48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	3301      	adds	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	dbf1      	blt.n	80053be <_write+0x12>
  }
  return len;
 80053da:	687b      	ldr	r3, [r7, #4]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3718      	adds	r7, #24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <_close>:

int _close(int file)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80053ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800540c:	605a      	str	r2, [r3, #4]
  return 0;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <_isatty>:

int _isatty(int file)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005424:	2301      	movs	r3, #1
}
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005432:	b480      	push	{r7}
 8005434:	b085      	sub	sp, #20
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005454:	4a14      	ldr	r2, [pc, #80]	@ (80054a8 <_sbrk+0x5c>)
 8005456:	4b15      	ldr	r3, [pc, #84]	@ (80054ac <_sbrk+0x60>)
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005460:	4b13      	ldr	r3, [pc, #76]	@ (80054b0 <_sbrk+0x64>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005468:	4b11      	ldr	r3, [pc, #68]	@ (80054b0 <_sbrk+0x64>)
 800546a:	4a12      	ldr	r2, [pc, #72]	@ (80054b4 <_sbrk+0x68>)
 800546c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800546e:	4b10      	ldr	r3, [pc, #64]	@ (80054b0 <_sbrk+0x64>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4413      	add	r3, r2
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	429a      	cmp	r2, r3
 800547a:	d207      	bcs.n	800548c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800547c:	f00f fbc6 	bl	8014c0c <__errno>
 8005480:	4603      	mov	r3, r0
 8005482:	220c      	movs	r2, #12
 8005484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005486:	f04f 33ff 	mov.w	r3, #4294967295
 800548a:	e009      	b.n	80054a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800548c:	4b08      	ldr	r3, [pc, #32]	@ (80054b0 <_sbrk+0x64>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005492:	4b07      	ldr	r3, [pc, #28]	@ (80054b0 <_sbrk+0x64>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	4a05      	ldr	r2, [pc, #20]	@ (80054b0 <_sbrk+0x64>)
 800549c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800549e:	68fb      	ldr	r3, [r7, #12]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20050000 	.word	0x20050000
 80054ac:	00000800 	.word	0x00000800
 80054b0:	2000602c 	.word	0x2000602c
 80054b4:	20006738 	.word	0x20006738

080054b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80054bc:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <SystemInit+0x20>)
 80054be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c2:	4a05      	ldr	r2, [pc, #20]	@ (80054d8 <SystemInit+0x20>)
 80054c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80054cc:	bf00      	nop
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	e000ed00 	.word	0xe000ed00

080054dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b088      	sub	sp, #32
 80054e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054e2:	f107 0314 	add.w	r3, r7, #20
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
 80054ea:	605a      	str	r2, [r3, #4]
 80054ec:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80054ee:	1d3b      	adds	r3, r7, #4
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	609a      	str	r2, [r3, #8]
 80054f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80054fa:	4b23      	ldr	r3, [pc, #140]	@ (8005588 <MX_TIM1_Init+0xac>)
 80054fc:	4a23      	ldr	r2, [pc, #140]	@ (800558c <MX_TIM1_Init+0xb0>)
 80054fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8005500:	4b21      	ldr	r3, [pc, #132]	@ (8005588 <MX_TIM1_Init+0xac>)
 8005502:	2263      	movs	r2, #99	@ 0x63
 8005504:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005506:	4b20      	ldr	r3, [pc, #128]	@ (8005588 <MX_TIM1_Init+0xac>)
 8005508:	2200      	movs	r2, #0
 800550a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800550c:	4b1e      	ldr	r3, [pc, #120]	@ (8005588 <MX_TIM1_Init+0xac>)
 800550e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005512:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005514:	4b1c      	ldr	r3, [pc, #112]	@ (8005588 <MX_TIM1_Init+0xac>)
 8005516:	2200      	movs	r2, #0
 8005518:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800551a:	4b1b      	ldr	r3, [pc, #108]	@ (8005588 <MX_TIM1_Init+0xac>)
 800551c:	2200      	movs	r2, #0
 800551e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005520:	4b19      	ldr	r3, [pc, #100]	@ (8005588 <MX_TIM1_Init+0xac>)
 8005522:	2200      	movs	r2, #0
 8005524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8005526:	4818      	ldr	r0, [pc, #96]	@ (8005588 <MX_TIM1_Init+0xac>)
 8005528:	f009 f83f 	bl	800e5aa <HAL_TIM_IC_Init>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8005532:	f7ff fc1b 	bl	8004d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800553a:	2300      	movs	r3, #0
 800553c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005542:	f107 0314 	add.w	r3, r7, #20
 8005546:	4619      	mov	r1, r3
 8005548:	480f      	ldr	r0, [pc, #60]	@ (8005588 <MX_TIM1_Init+0xac>)
 800554a:	f009 fee7 	bl	800f31c <HAL_TIMEx_MasterConfigSynchronization>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005554:	f7ff fc0a 	bl	8004d6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005558:	2300      	movs	r3, #0
 800555a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800555c:	2301      	movs	r3, #1
 800555e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005560:	2300      	movs	r3, #0
 8005562:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8005564:	2300      	movs	r3, #0
 8005566:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005568:	1d3b      	adds	r3, r7, #4
 800556a:	2200      	movs	r2, #0
 800556c:	4619      	mov	r1, r3
 800556e:	4806      	ldr	r0, [pc, #24]	@ (8005588 <MX_TIM1_Init+0xac>)
 8005570:	f009 fac9 	bl	800eb06 <HAL_TIM_IC_ConfigChannel>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800557a:	f7ff fbf7 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800557e:	bf00      	nop
 8005580:	3720      	adds	r7, #32
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20006030 	.word	0x20006030
 800558c:	40010000 	.word	0x40010000

08005590 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005596:	f107 030c 	add.w	r3, r7, #12
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	605a      	str	r2, [r3, #4]
 80055a0:	609a      	str	r2, [r3, #8]
 80055a2:	60da      	str	r2, [r3, #12]
 80055a4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055a6:	463b      	mov	r3, r7
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80055b0:	4b1e      	ldr	r3, [pc, #120]	@ (800562c <MX_TIM2_Init+0x9c>)
 80055b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80055b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10799;
 80055b8:	4b1c      	ldr	r3, [pc, #112]	@ (800562c <MX_TIM2_Init+0x9c>)
 80055ba:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 80055be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055c0:	4b1a      	ldr	r3, [pc, #104]	@ (800562c <MX_TIM2_Init+0x9c>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 599999;
 80055c6:	4b19      	ldr	r3, [pc, #100]	@ (800562c <MX_TIM2_Init+0x9c>)
 80055c8:	4a19      	ldr	r2, [pc, #100]	@ (8005630 <MX_TIM2_Init+0xa0>)
 80055ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055cc:	4b17      	ldr	r3, [pc, #92]	@ (800562c <MX_TIM2_Init+0x9c>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055d2:	4b16      	ldr	r3, [pc, #88]	@ (800562c <MX_TIM2_Init+0x9c>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80055d8:	4814      	ldr	r0, [pc, #80]	@ (800562c <MX_TIM2_Init+0x9c>)
 80055da:	f008 fe50 	bl	800e27e <HAL_TIM_Base_Init>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80055e4:	f7ff fbc2 	bl	8004d6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80055e8:	2304      	movs	r3, #4
 80055ea:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80055f0:	f107 030c 	add.w	r3, r7, #12
 80055f4:	4619      	mov	r1, r3
 80055f6:	480d      	ldr	r0, [pc, #52]	@ (800562c <MX_TIM2_Init+0x9c>)
 80055f8:	f009 fb21 	bl	800ec3e <HAL_TIM_SlaveConfigSynchro>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8005602:	f7ff fbb3 	bl	8004d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005606:	2300      	movs	r3, #0
 8005608:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800560e:	463b      	mov	r3, r7
 8005610:	4619      	mov	r1, r3
 8005612:	4806      	ldr	r0, [pc, #24]	@ (800562c <MX_TIM2_Init+0x9c>)
 8005614:	f009 fe82 	bl	800f31c <HAL_TIMEx_MasterConfigSynchronization>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800561e:	f7ff fba5 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005622:	bf00      	nop
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	2000607c 	.word	0x2000607c
 8005630:	000927bf 	.word	0x000927bf

08005634 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800563a:	f107 030c 	add.w	r3, r7, #12
 800563e:	2200      	movs	r2, #0
 8005640:	601a      	str	r2, [r3, #0]
 8005642:	605a      	str	r2, [r3, #4]
 8005644:	609a      	str	r2, [r3, #8]
 8005646:	60da      	str	r2, [r3, #12]
 8005648:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800564a:	463b      	mov	r3, r7
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005654:	4b1d      	ldr	r3, [pc, #116]	@ (80056cc <MX_TIM3_Init+0x98>)
 8005656:	4a1e      	ldr	r2, [pc, #120]	@ (80056d0 <MX_TIM3_Init+0x9c>)
 8005658:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800565a:	4b1c      	ldr	r3, [pc, #112]	@ (80056cc <MX_TIM3_Init+0x98>)
 800565c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005660:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005662:	4b1a      	ldr	r3, [pc, #104]	@ (80056cc <MX_TIM3_Init+0x98>)
 8005664:	2200      	movs	r2, #0
 8005666:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8005668:	4b18      	ldr	r3, [pc, #96]	@ (80056cc <MX_TIM3_Init+0x98>)
 800566a:	22c7      	movs	r2, #199	@ 0xc7
 800566c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800566e:	4b17      	ldr	r3, [pc, #92]	@ (80056cc <MX_TIM3_Init+0x98>)
 8005670:	2200      	movs	r2, #0
 8005672:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005674:	4b15      	ldr	r3, [pc, #84]	@ (80056cc <MX_TIM3_Init+0x98>)
 8005676:	2200      	movs	r2, #0
 8005678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800567a:	4814      	ldr	r0, [pc, #80]	@ (80056cc <MX_TIM3_Init+0x98>)
 800567c:	f008 fdff 	bl	800e27e <HAL_TIM_Base_Init>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8005686:	f7ff fb71 	bl	8004d6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800568a:	2304      	movs	r3, #4
 800568c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800568e:	2300      	movs	r3, #0
 8005690:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8005692:	f107 030c 	add.w	r3, r7, #12
 8005696:	4619      	mov	r1, r3
 8005698:	480c      	ldr	r0, [pc, #48]	@ (80056cc <MX_TIM3_Init+0x98>)
 800569a:	f009 fad0 	bl	800ec3e <HAL_TIM_SlaveConfigSynchro>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80056a4:	f7ff fb62 	bl	8004d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056a8:	2300      	movs	r3, #0
 80056aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056ac:	2300      	movs	r3, #0
 80056ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056b0:	463b      	mov	r3, r7
 80056b2:	4619      	mov	r1, r3
 80056b4:	4805      	ldr	r0, [pc, #20]	@ (80056cc <MX_TIM3_Init+0x98>)
 80056b6:	f009 fe31 	bl	800f31c <HAL_TIMEx_MasterConfigSynchronization>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d001      	beq.n	80056c4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80056c0:	f7ff fb54 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80056c4:	bf00      	nop
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	200060c8 	.word	0x200060c8
 80056d0:	40000400 	.word	0x40000400

080056d4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b088      	sub	sp, #32
 80056d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80056da:	f107 030c 	add.w	r3, r7, #12
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	605a      	str	r2, [r3, #4]
 80056e4:	609a      	str	r2, [r3, #8]
 80056e6:	60da      	str	r2, [r3, #12]
 80056e8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056ea:	463b      	mov	r3, r7
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	605a      	str	r2, [r3, #4]
 80056f2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80056f4:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <MX_TIM5_Init+0x98>)
 80056f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005770 <MX_TIM5_Init+0x9c>)
 80056f8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 10799;
 80056fa:	4b1c      	ldr	r3, [pc, #112]	@ (800576c <MX_TIM5_Init+0x98>)
 80056fc:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8005700:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005702:	4b1a      	ldr	r3, [pc, #104]	@ (800576c <MX_TIM5_Init+0x98>)
 8005704:	2200      	movs	r2, #0
 8005706:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 299999;
 8005708:	4b18      	ldr	r3, [pc, #96]	@ (800576c <MX_TIM5_Init+0x98>)
 800570a:	4a1a      	ldr	r2, [pc, #104]	@ (8005774 <MX_TIM5_Init+0xa0>)
 800570c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800570e:	4b17      	ldr	r3, [pc, #92]	@ (800576c <MX_TIM5_Init+0x98>)
 8005710:	2200      	movs	r2, #0
 8005712:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005714:	4b15      	ldr	r3, [pc, #84]	@ (800576c <MX_TIM5_Init+0x98>)
 8005716:	2200      	movs	r2, #0
 8005718:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800571a:	4814      	ldr	r0, [pc, #80]	@ (800576c <MX_TIM5_Init+0x98>)
 800571c:	f008 fdaf 	bl	800e27e <HAL_TIM_Base_Init>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8005726:	f7ff fb21 	bl	8004d6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800572a:	2304      	movs	r3, #4
 800572c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800572e:	2300      	movs	r3, #0
 8005730:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8005732:	f107 030c 	add.w	r3, r7, #12
 8005736:	4619      	mov	r1, r3
 8005738:	480c      	ldr	r0, [pc, #48]	@ (800576c <MX_TIM5_Init+0x98>)
 800573a:	f009 fa80 	bl	800ec3e <HAL_TIM_SlaveConfigSynchro>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8005744:	f7ff fb12 	bl	8004d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005748:	2300      	movs	r3, #0
 800574a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800574c:	2300      	movs	r3, #0
 800574e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005750:	463b      	mov	r3, r7
 8005752:	4619      	mov	r1, r3
 8005754:	4805      	ldr	r0, [pc, #20]	@ (800576c <MX_TIM5_Init+0x98>)
 8005756:	f009 fde1 	bl	800f31c <HAL_TIMEx_MasterConfigSynchronization>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8005760:	f7ff fb04 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005764:	bf00      	nop
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20006114 	.word	0x20006114
 8005770:	40000c00 	.word	0x40000c00
 8005774:	000493df 	.word	0x000493df

08005778 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800577e:	1d3b      	adds	r3, r7, #4
 8005780:	2200      	movs	r2, #0
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005788:	4b15      	ldr	r3, [pc, #84]	@ (80057e0 <MX_TIM6_Init+0x68>)
 800578a:	4a16      	ldr	r2, [pc, #88]	@ (80057e4 <MX_TIM6_Init+0x6c>)
 800578c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 65535;
 800578e:	4b14      	ldr	r3, [pc, #80]	@ (80057e0 <MX_TIM6_Init+0x68>)
 8005790:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005794:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005796:	4b12      	ldr	r3, [pc, #72]	@ (80057e0 <MX_TIM6_Init+0x68>)
 8005798:	2200      	movs	r2, #0
 800579a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8232;
 800579c:	4b10      	ldr	r3, [pc, #64]	@ (80057e0 <MX_TIM6_Init+0x68>)
 800579e:	f242 0228 	movw	r2, #8232	@ 0x2028
 80057a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057a4:	4b0e      	ldr	r3, [pc, #56]	@ (80057e0 <MX_TIM6_Init+0x68>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80057aa:	480d      	ldr	r0, [pc, #52]	@ (80057e0 <MX_TIM6_Init+0x68>)
 80057ac:	f008 fd67 	bl	800e27e <HAL_TIM_Base_Init>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80057b6:	f7ff fad9 	bl	8004d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057be:	2300      	movs	r3, #0
 80057c0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80057c2:	1d3b      	adds	r3, r7, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4806      	ldr	r0, [pc, #24]	@ (80057e0 <MX_TIM6_Init+0x68>)
 80057c8:	f009 fda8 	bl	800f31c <HAL_TIMEx_MasterConfigSynchronization>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d001      	beq.n	80057d6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80057d2:	f7ff facb 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80057d6:	bf00      	nop
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	20006160 	.word	0x20006160
 80057e4:	40001000 	.word	0x40001000

080057e8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80057ee:	1d3b      	adds	r3, r7, #4
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80057f8:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <MX_TIM7_Init+0x68>)
 80057fa:	4a16      	ldr	r2, [pc, #88]	@ (8005854 <MX_TIM7_Init+0x6c>)
 80057fc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3294;
 80057fe:	4b14      	ldr	r3, [pc, #80]	@ (8005850 <MX_TIM7_Init+0x68>)
 8005800:	f640 42de 	movw	r2, #3294	@ 0xcde
 8005804:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005806:	4b12      	ldr	r3, [pc, #72]	@ (8005850 <MX_TIM7_Init+0x68>)
 8005808:	2200      	movs	r2, #0
 800580a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800580c:	4b10      	ldr	r3, [pc, #64]	@ (8005850 <MX_TIM7_Init+0x68>)
 800580e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005812:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005814:	4b0e      	ldr	r3, [pc, #56]	@ (8005850 <MX_TIM7_Init+0x68>)
 8005816:	2200      	movs	r2, #0
 8005818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800581a:	480d      	ldr	r0, [pc, #52]	@ (8005850 <MX_TIM7_Init+0x68>)
 800581c:	f008 fd2f 	bl	800e27e <HAL_TIM_Base_Init>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005826:	f7ff faa1 	bl	8004d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800582a:	2300      	movs	r3, #0
 800582c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005832:	1d3b      	adds	r3, r7, #4
 8005834:	4619      	mov	r1, r3
 8005836:	4806      	ldr	r0, [pc, #24]	@ (8005850 <MX_TIM7_Init+0x68>)
 8005838:	f009 fd70 	bl	800f31c <HAL_TIMEx_MasterConfigSynchronization>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8005842:	f7ff fa93 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005846:	bf00      	nop
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	200061ac 	.word	0x200061ac
 8005854:	40001400 	.word	0x40001400

08005858 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b088      	sub	sp, #32
 800585c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800585e:	f107 030c 	add.w	r3, r7, #12
 8005862:	2200      	movs	r2, #0
 8005864:	601a      	str	r2, [r3, #0]
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	609a      	str	r2, [r3, #8]
 800586a:	60da      	str	r2, [r3, #12]
 800586c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800586e:	463b      	mov	r3, r7
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	605a      	str	r2, [r3, #4]
 8005876:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005878:	4b20      	ldr	r3, [pc, #128]	@ (80058fc <MX_TIM8_Init+0xa4>)
 800587a:	4a21      	ldr	r2, [pc, #132]	@ (8005900 <MX_TIM8_Init+0xa8>)
 800587c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 8231;
 800587e:	4b1f      	ldr	r3, [pc, #124]	@ (80058fc <MX_TIM8_Init+0xa4>)
 8005880:	f242 0227 	movw	r2, #8231	@ 0x2027
 8005884:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005886:	4b1d      	ldr	r3, [pc, #116]	@ (80058fc <MX_TIM8_Init+0xa4>)
 8005888:	2200      	movs	r2, #0
 800588a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800588c:	4b1b      	ldr	r3, [pc, #108]	@ (80058fc <MX_TIM8_Init+0xa4>)
 800588e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005892:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005894:	4b19      	ldr	r3, [pc, #100]	@ (80058fc <MX_TIM8_Init+0xa4>)
 8005896:	2200      	movs	r2, #0
 8005898:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800589a:	4b18      	ldr	r3, [pc, #96]	@ (80058fc <MX_TIM8_Init+0xa4>)
 800589c:	2200      	movs	r2, #0
 800589e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058a0:	4b16      	ldr	r3, [pc, #88]	@ (80058fc <MX_TIM8_Init+0xa4>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80058a6:	4815      	ldr	r0, [pc, #84]	@ (80058fc <MX_TIM8_Init+0xa4>)
 80058a8:	f008 fce9 	bl	800e27e <HAL_TIM_Base_Init>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <MX_TIM8_Init+0x5e>
  {
    Error_Handler();
 80058b2:	f7ff fa5b 	bl	8004d6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80058b6:	2304      	movs	r3, #4
 80058b8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 80058be:	f107 030c 	add.w	r3, r7, #12
 80058c2:	4619      	mov	r1, r3
 80058c4:	480d      	ldr	r0, [pc, #52]	@ (80058fc <MX_TIM8_Init+0xa4>)
 80058c6:	f009 f9ba 	bl	800ec3e <HAL_TIM_SlaveConfigSynchro>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80058d0:	f7ff fa4c 	bl	8004d6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058d4:	2300      	movs	r3, #0
 80058d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80058d8:	2300      	movs	r3, #0
 80058da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058dc:	2300      	movs	r3, #0
 80058de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80058e0:	463b      	mov	r3, r7
 80058e2:	4619      	mov	r1, r3
 80058e4:	4805      	ldr	r0, [pc, #20]	@ (80058fc <MX_TIM8_Init+0xa4>)
 80058e6:	f009 fd19 	bl	800f31c <HAL_TIMEx_MasterConfigSynchronization>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <MX_TIM8_Init+0x9c>
  {
    Error_Handler();
 80058f0:	f7ff fa3c 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80058f4:	bf00      	nop
 80058f6:	3720      	adds	r7, #32
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	200061f8 	.word	0x200061f8
 8005900:	40010400 	.word	0x40010400

08005904 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b08a      	sub	sp, #40	@ 0x28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800590c:	f107 0314 	add.w	r3, r7, #20
 8005910:	2200      	movs	r2, #0
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	605a      	str	r2, [r3, #4]
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	60da      	str	r2, [r3, #12]
 800591a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1b      	ldr	r2, [pc, #108]	@ (8005990 <HAL_TIM_IC_MspInit+0x8c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d130      	bne.n	8005988 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005926:	4b1b      	ldr	r3, [pc, #108]	@ (8005994 <HAL_TIM_IC_MspInit+0x90>)
 8005928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800592a:	4a1a      	ldr	r2, [pc, #104]	@ (8005994 <HAL_TIM_IC_MspInit+0x90>)
 800592c:	f043 0301 	orr.w	r3, r3, #1
 8005930:	6453      	str	r3, [r2, #68]	@ 0x44
 8005932:	4b18      	ldr	r3, [pc, #96]	@ (8005994 <HAL_TIM_IC_MspInit+0x90>)
 8005934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800593e:	4b15      	ldr	r3, [pc, #84]	@ (8005994 <HAL_TIM_IC_MspInit+0x90>)
 8005940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005942:	4a14      	ldr	r2, [pc, #80]	@ (8005994 <HAL_TIM_IC_MspInit+0x90>)
 8005944:	f043 0301 	orr.w	r3, r3, #1
 8005948:	6313      	str	r3, [r2, #48]	@ 0x30
 800594a:	4b12      	ldr	r3, [pc, #72]	@ (8005994 <HAL_TIM_IC_MspInit+0x90>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005956:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800595a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595c:	2302      	movs	r3, #2
 800595e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005960:	2301      	movs	r3, #1
 8005962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005964:	2300      	movs	r3, #0
 8005966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005968:	2301      	movs	r3, #1
 800596a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800596c:	f107 0314 	add.w	r3, r7, #20
 8005970:	4619      	mov	r1, r3
 8005972:	4809      	ldr	r0, [pc, #36]	@ (8005998 <HAL_TIM_IC_MspInit+0x94>)
 8005974:	f004 f874 	bl	8009a60 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005978:	2200      	movs	r2, #0
 800597a:	2100      	movs	r1, #0
 800597c:	201b      	movs	r0, #27
 800597e:	f003 f9a8 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005982:	201b      	movs	r0, #27
 8005984:	f003 f9c1 	bl	8008d0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005988:	bf00      	nop
 800598a:	3728      	adds	r7, #40	@ 0x28
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40010000 	.word	0x40010000
 8005994:	40023800 	.word	0x40023800
 8005998:	40020000 	.word	0x40020000

0800599c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b088      	sub	sp, #32
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ac:	d114      	bne.n	80059d8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80059ae:	4b51      	ldr	r3, [pc, #324]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 80059b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059b2:	4a50      	ldr	r2, [pc, #320]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 80059b4:	f043 0301 	orr.w	r3, r3, #1
 80059b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80059ba:	4b4e      	ldr	r3, [pc, #312]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 80059bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	69fb      	ldr	r3, [r7, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80059c6:	2200      	movs	r2, #0
 80059c8:	2100      	movs	r1, #0
 80059ca:	201c      	movs	r0, #28
 80059cc:	f003 f981 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80059d0:	201c      	movs	r0, #28
 80059d2:	f003 f99a 	bl	8008d0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80059d6:	e088      	b.n	8005aea <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM3)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a46      	ldr	r2, [pc, #280]	@ (8005af8 <HAL_TIM_Base_MspInit+0x15c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d114      	bne.n	8005a0c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80059e2:	4b44      	ldr	r3, [pc, #272]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 80059e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e6:	4a43      	ldr	r2, [pc, #268]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 80059e8:	f043 0302 	orr.w	r3, r3, #2
 80059ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80059ee:	4b41      	ldr	r3, [pc, #260]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80059fa:	2200      	movs	r2, #0
 80059fc:	2100      	movs	r1, #0
 80059fe:	201d      	movs	r0, #29
 8005a00:	f003 f967 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005a04:	201d      	movs	r0, #29
 8005a06:	f003 f980 	bl	8008d0a <HAL_NVIC_EnableIRQ>
}
 8005a0a:	e06e      	b.n	8005aea <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM5)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a3a      	ldr	r2, [pc, #232]	@ (8005afc <HAL_TIM_Base_MspInit+0x160>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d114      	bne.n	8005a40 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005a16:	4b37      	ldr	r3, [pc, #220]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	4a36      	ldr	r2, [pc, #216]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005a1c:	f043 0308 	orr.w	r3, r3, #8
 8005a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a22:	4b34      	ldr	r3, [pc, #208]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2101      	movs	r1, #1
 8005a32:	2032      	movs	r0, #50	@ 0x32
 8005a34:	f003 f94d 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8005a38:	2032      	movs	r0, #50	@ 0x32
 8005a3a:	f003 f966 	bl	8008d0a <HAL_NVIC_EnableIRQ>
}
 8005a3e:	e054      	b.n	8005aea <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM6)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a2e      	ldr	r2, [pc, #184]	@ (8005b00 <HAL_TIM_Base_MspInit+0x164>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d114      	bne.n	8005a74 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005a4a:	4b2a      	ldr	r3, [pc, #168]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	4a29      	ldr	r2, [pc, #164]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005a50:	f043 0310 	orr.w	r3, r3, #16
 8005a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a56:	4b27      	ldr	r3, [pc, #156]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	f003 0310 	and.w	r3, r3, #16
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8005a62:	2200      	movs	r2, #0
 8005a64:	2103      	movs	r1, #3
 8005a66:	2036      	movs	r0, #54	@ 0x36
 8005a68:	f003 f933 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a6c:	2036      	movs	r0, #54	@ 0x36
 8005a6e:	f003 f94c 	bl	8008d0a <HAL_NVIC_EnableIRQ>
}
 8005a72:	e03a      	b.n	8005aea <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM7)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a22      	ldr	r2, [pc, #136]	@ (8005b04 <HAL_TIM_Base_MspInit+0x168>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d114      	bne.n	8005aa8 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a82:	4a1c      	ldr	r2, [pc, #112]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005a84:	f043 0320 	orr.w	r3, r3, #32
 8005a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	60fb      	str	r3, [r7, #12]
 8005a94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8005a96:	2200      	movs	r2, #0
 8005a98:	2104      	movs	r1, #4
 8005a9a:	2037      	movs	r0, #55	@ 0x37
 8005a9c:	f003 f919 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005aa0:	2037      	movs	r0, #55	@ 0x37
 8005aa2:	f003 f932 	bl	8008d0a <HAL_NVIC_EnableIRQ>
}
 8005aa6:	e020      	b.n	8005aea <HAL_TIM_Base_MspInit+0x14e>
  else if(tim_baseHandle->Instance==TIM8)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a16      	ldr	r2, [pc, #88]	@ (8005b08 <HAL_TIM_Base_MspInit+0x16c>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d11b      	bne.n	8005aea <HAL_TIM_Base_MspInit+0x14e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005ab2:	4b10      	ldr	r3, [pc, #64]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	4a0f      	ldr	r2, [pc, #60]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005ab8:	f043 0302 	orr.w	r3, r3, #2
 8005abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005abe:	4b0d      	ldr	r3, [pc, #52]	@ (8005af4 <HAL_TIM_Base_MspInit+0x158>)
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	60bb      	str	r3, [r7, #8]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005aca:	2200      	movs	r2, #0
 8005acc:	2100      	movs	r1, #0
 8005ace:	202b      	movs	r0, #43	@ 0x2b
 8005ad0:	f003 f8ff 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005ad4:	202b      	movs	r0, #43	@ 0x2b
 8005ad6:	f003 f918 	bl	8008d0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005ada:	2200      	movs	r2, #0
 8005adc:	2100      	movs	r1, #0
 8005ade:	202c      	movs	r0, #44	@ 0x2c
 8005ae0:	f003 f8f7 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005ae4:	202c      	movs	r0, #44	@ 0x2c
 8005ae6:	f003 f910 	bl	8008d0a <HAL_NVIC_EnableIRQ>
}
 8005aea:	bf00      	nop
 8005aec:	3720      	adds	r7, #32
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	40023800 	.word	0x40023800
 8005af8:	40000400 	.word	0x40000400
 8005afc:	40000c00 	.word	0x40000c00
 8005b00:	40001000 	.word	0x40001000
 8005b04:	40001400 	.word	0x40001400
 8005b08:	40010400 	.word	0x40010400

08005b0c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005b10:	4b14      	ldr	r3, [pc, #80]	@ (8005b64 <MX_USART1_UART_Init+0x58>)
 8005b12:	4a15      	ldr	r2, [pc, #84]	@ (8005b68 <MX_USART1_UART_Init+0x5c>)
 8005b14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005b16:	4b13      	ldr	r3, [pc, #76]	@ (8005b64 <MX_USART1_UART_Init+0x58>)
 8005b18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005b1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005b1e:	4b11      	ldr	r3, [pc, #68]	@ (8005b64 <MX_USART1_UART_Init+0x58>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005b24:	4b0f      	ldr	r3, [pc, #60]	@ (8005b64 <MX_USART1_UART_Init+0x58>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005b64 <MX_USART1_UART_Init+0x58>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005b30:	4b0c      	ldr	r3, [pc, #48]	@ (8005b64 <MX_USART1_UART_Init+0x58>)
 8005b32:	220c      	movs	r2, #12
 8005b34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b36:	4b0b      	ldr	r3, [pc, #44]	@ (8005b64 <MX_USART1_UART_Init+0x58>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b3c:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <MX_USART1_UART_Init+0x58>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b42:	4b08      	ldr	r3, [pc, #32]	@ (8005b64 <MX_USART1_UART_Init+0x58>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b48:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <MX_USART1_UART_Init+0x58>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005b4e:	4805      	ldr	r0, [pc, #20]	@ (8005b64 <MX_USART1_UART_Init+0x58>)
 8005b50:	f009 fc90 	bl	800f474 <HAL_UART_Init>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005b5a:	f7ff f907 	bl	8004d6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005b5e:	bf00      	nop
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20006244 	.word	0x20006244
 8005b68:	40011000 	.word	0x40011000

08005b6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b0ac      	sub	sp, #176	@ 0xb0
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	605a      	str	r2, [r3, #4]
 8005b7e:	609a      	str	r2, [r3, #8]
 8005b80:	60da      	str	r2, [r3, #12]
 8005b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005b84:	f107 0318 	add.w	r3, r7, #24
 8005b88:	2284      	movs	r2, #132	@ 0x84
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f00e ffeb 	bl	8014b68 <memset>
  if(uartHandle->Instance==USART1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a32      	ldr	r2, [pc, #200]	@ (8005c60 <HAL_UART_MspInit+0xf4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d15c      	bne.n	8005c56 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005b9c:	2340      	movs	r3, #64	@ 0x40
 8005b9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ba4:	f107 0318 	add.w	r3, r7, #24
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f006 f897 	bl	800bcdc <HAL_RCCEx_PeriphCLKConfig>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005bb4:	f7ff f8da 	bl	8004d6c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c64 <HAL_UART_MspInit+0xf8>)
 8005bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bbc:	4a29      	ldr	r2, [pc, #164]	@ (8005c64 <HAL_UART_MspInit+0xf8>)
 8005bbe:	f043 0310 	orr.w	r3, r3, #16
 8005bc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bc4:	4b27      	ldr	r3, [pc, #156]	@ (8005c64 <HAL_UART_MspInit+0xf8>)
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	617b      	str	r3, [r7, #20]
 8005bce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bd0:	4b24      	ldr	r3, [pc, #144]	@ (8005c64 <HAL_UART_MspInit+0xf8>)
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd4:	4a23      	ldr	r2, [pc, #140]	@ (8005c64 <HAL_UART_MspInit+0xf8>)
 8005bd6:	f043 0302 	orr.w	r3, r3, #2
 8005bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bdc:	4b21      	ldr	r3, [pc, #132]	@ (8005c64 <HAL_UART_MspInit+0xf8>)
 8005bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005be8:	4b1e      	ldr	r3, [pc, #120]	@ (8005c64 <HAL_UART_MspInit+0xf8>)
 8005bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bec:	4a1d      	ldr	r2, [pc, #116]	@ (8005c64 <HAL_UART_MspInit+0xf8>)
 8005bee:	f043 0301 	orr.w	r3, r3, #1
 8005bf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8005c64 <HAL_UART_MspInit+0xf8>)
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	60fb      	str	r3, [r7, #12]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005c00:	2380      	movs	r3, #128	@ 0x80
 8005c02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c06:	2302      	movs	r3, #2
 8005c08:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c12:	2303      	movs	r3, #3
 8005c14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c18:	2307      	movs	r3, #7
 8005c1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c1e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005c22:	4619      	mov	r1, r3
 8005c24:	4810      	ldr	r0, [pc, #64]	@ (8005c68 <HAL_UART_MspInit+0xfc>)
 8005c26:	f003 ff1b 	bl	8009a60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c32:	2302      	movs	r3, #2
 8005c34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c44:	2307      	movs	r3, #7
 8005c46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4806      	ldr	r0, [pc, #24]	@ (8005c6c <HAL_UART_MspInit+0x100>)
 8005c52:	f003 ff05 	bl	8009a60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005c56:	bf00      	nop
 8005c58:	37b0      	adds	r7, #176	@ 0xb0
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40011000 	.word	0x40011000
 8005c64:	40023800 	.word	0x40023800
 8005c68:	40020400 	.word	0x40020400
 8005c6c:	40020000 	.word	0x40020000

08005c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005c70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005ca8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005c74:	480d      	ldr	r0, [pc, #52]	@ (8005cac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005c76:	490e      	ldr	r1, [pc, #56]	@ (8005cb0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005c78:	4a0e      	ldr	r2, [pc, #56]	@ (8005cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005c7c:	e002      	b.n	8005c84 <LoopCopyDataInit>

08005c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005c82:	3304      	adds	r3, #4

08005c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005c88:	d3f9      	bcc.n	8005c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8005cb8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005c8c:	4c0b      	ldr	r4, [pc, #44]	@ (8005cbc <LoopFillZerobss+0x26>)
  movs r3, #0
 8005c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005c90:	e001      	b.n	8005c96 <LoopFillZerobss>

08005c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005c94:	3204      	adds	r2, #4

08005c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005c98:	d3fb      	bcc.n	8005c92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005c9a:	f7ff fc0d 	bl	80054b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005c9e:	f00e ffbb 	bl	8014c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ca2:	f7fe f93d 	bl	8003f20 <main>
  bx  lr    
 8005ca6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005ca8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005cb0:	200050f0 	.word	0x200050f0
  ldr r2, =_sidata
 8005cb4:	0801b178 	.word	0x0801b178
  ldr r2, =_sbss
 8005cb8:	200050f0 	.word	0x200050f0
  ldr r4, =_ebss
 8005cbc:	20006738 	.word	0x20006738

08005cc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005cc0:	e7fe      	b.n	8005cc0 <ADC_IRQHandler>

08005cc2 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	4603      	mov	r3, r0
 8005cca:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8005ccc:	20c8      	movs	r0, #200	@ 0xc8
 8005cce:	f000 fc31 	bl	8006534 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8005cd2:	f000 fa79 	bl	80061c8 <ft5336_I2C_InitializeIfRequired>
}
 8005cd6:	bf00      	nop
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8005d06:	2300      	movs	r3, #0
 8005d08:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8005d0a:	f000 fa5d 	bl	80061c8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]
 8005d12:	e010      	b.n	8005d36 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	21a8      	movs	r1, #168	@ 0xa8
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fbec 	bl	80064f8 <TS_IO_Read>
 8005d20:	4603      	mov	r3, r0
 8005d22:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8005d24:	7b7b      	ldrb	r3, [r7, #13]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b51      	cmp	r3, #81	@ 0x51
 8005d2a:	d101      	bne.n	8005d30 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	3301      	adds	r3, #1
 8005d34:	73fb      	strb	r3, [r7, #15]
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d802      	bhi.n	8005d42 <ft5336_ReadID+0x4e>
 8005d3c:	7bbb      	ldrb	r3, [r7, #14]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0e8      	beq.n	8005d14 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8005d42:	7b7b      	ldrb	r3, [r7, #13]
 8005d44:	b2db      	uxtb	r3, r3
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	4603      	mov	r3, r0
 8005d56:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8005d58:	88fb      	ldrh	r3, [r7, #6]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fa44 	bl	80061e8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 f932 	bl	8005fcc <ft5336_TS_DisableIT>
}
 8005d68:	bf00      	nop
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2102      	movs	r1, #2
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fbb7 	bl	80064f8 <TS_IO_Read>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8005d8e:	7bfb      	ldrb	r3, [r7, #15]
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f003 030f 	and.w	r3, r3, #15
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8005d9a:	7bfb      	ldrb	r3, [r7, #15]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b05      	cmp	r3, #5
 8005da0:	d901      	bls.n	8005da6 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <ft5336_TS_DetectTouch+0x50>)
 8005dac:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8005dae:	4b04      	ldr	r3, [pc, #16]	@ (8005dc0 <ft5336_TS_DetectTouch+0x50>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8005db4:	7bfb      	ldrb	r3, [r7, #15]
 8005db6:	b2db      	uxtb	r3, r3
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	200062cc 	.word	0x200062cc

08005dc4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	4603      	mov	r3, r0
 8005dcc:	60b9      	str	r1, [r7, #8]
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8005de2:	2300      	movs	r3, #0
 8005de4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8005de6:	4b6d      	ldr	r3, [pc, #436]	@ (8005f9c <ft5336_TS_GetXY+0x1d8>)
 8005de8:	789a      	ldrb	r2, [r3, #2]
 8005dea:	4b6c      	ldr	r3, [pc, #432]	@ (8005f9c <ft5336_TS_GetXY+0x1d8>)
 8005dec:	785b      	ldrb	r3, [r3, #1]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	f080 80cf 	bcs.w	8005f92 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8005df4:	4b69      	ldr	r3, [pc, #420]	@ (8005f9c <ft5336_TS_GetXY+0x1d8>)
 8005df6:	789b      	ldrb	r3, [r3, #2]
 8005df8:	2b09      	cmp	r3, #9
 8005dfa:	d871      	bhi.n	8005ee0 <ft5336_TS_GetXY+0x11c>
 8005dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005e04 <ft5336_TS_GetXY+0x40>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e2d 	.word	0x08005e2d
 8005e08:	08005e3f 	.word	0x08005e3f
 8005e0c:	08005e51 	.word	0x08005e51
 8005e10:	08005e63 	.word	0x08005e63
 8005e14:	08005e75 	.word	0x08005e75
 8005e18:	08005e87 	.word	0x08005e87
 8005e1c:	08005e99 	.word	0x08005e99
 8005e20:	08005eab 	.word	0x08005eab
 8005e24:	08005ebd 	.word	0x08005ebd
 8005e28:	08005ecf 	.word	0x08005ecf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8005e2c:	2304      	movs	r3, #4
 8005e2e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8005e30:	2303      	movs	r3, #3
 8005e32:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8005e34:	2306      	movs	r3, #6
 8005e36:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8005e38:	2305      	movs	r3, #5
 8005e3a:	753b      	strb	r3, [r7, #20]
      break;
 8005e3c:	e051      	b.n	8005ee2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8005e3e:	230a      	movs	r3, #10
 8005e40:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8005e42:	2309      	movs	r3, #9
 8005e44:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8005e46:	230c      	movs	r3, #12
 8005e48:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8005e4a:	230b      	movs	r3, #11
 8005e4c:	753b      	strb	r3, [r7, #20]
      break;
 8005e4e:	e048      	b.n	8005ee2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8005e50:	2310      	movs	r3, #16
 8005e52:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8005e54:	230f      	movs	r3, #15
 8005e56:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8005e58:	2312      	movs	r3, #18
 8005e5a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8005e5c:	2311      	movs	r3, #17
 8005e5e:	753b      	strb	r3, [r7, #20]
      break;
 8005e60:	e03f      	b.n	8005ee2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8005e62:	2316      	movs	r3, #22
 8005e64:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8005e66:	2315      	movs	r3, #21
 8005e68:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8005e6a:	2318      	movs	r3, #24
 8005e6c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8005e6e:	2317      	movs	r3, #23
 8005e70:	753b      	strb	r3, [r7, #20]
      break;
 8005e72:	e036      	b.n	8005ee2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8005e74:	231c      	movs	r3, #28
 8005e76:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8005e78:	231b      	movs	r3, #27
 8005e7a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8005e7c:	231e      	movs	r3, #30
 8005e7e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8005e80:	231d      	movs	r3, #29
 8005e82:	753b      	strb	r3, [r7, #20]
      break;
 8005e84:	e02d      	b.n	8005ee2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8005e86:	2322      	movs	r3, #34	@ 0x22
 8005e88:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8005e8a:	2321      	movs	r3, #33	@ 0x21
 8005e8c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8005e8e:	2324      	movs	r3, #36	@ 0x24
 8005e90:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8005e92:	2323      	movs	r3, #35	@ 0x23
 8005e94:	753b      	strb	r3, [r7, #20]
      break;
 8005e96:	e024      	b.n	8005ee2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8005e98:	2328      	movs	r3, #40	@ 0x28
 8005e9a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8005e9c:	2327      	movs	r3, #39	@ 0x27
 8005e9e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8005ea0:	232a      	movs	r3, #42	@ 0x2a
 8005ea2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8005ea4:	2329      	movs	r3, #41	@ 0x29
 8005ea6:	753b      	strb	r3, [r7, #20]
      break;
 8005ea8:	e01b      	b.n	8005ee2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8005eaa:	232e      	movs	r3, #46	@ 0x2e
 8005eac:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8005eae:	232d      	movs	r3, #45	@ 0x2d
 8005eb0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8005eb2:	2330      	movs	r3, #48	@ 0x30
 8005eb4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8005eb6:	232f      	movs	r3, #47	@ 0x2f
 8005eb8:	753b      	strb	r3, [r7, #20]
      break;
 8005eba:	e012      	b.n	8005ee2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8005ebc:	2334      	movs	r3, #52	@ 0x34
 8005ebe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8005ec0:	2333      	movs	r3, #51	@ 0x33
 8005ec2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8005ec4:	2336      	movs	r3, #54	@ 0x36
 8005ec6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8005ec8:	2335      	movs	r3, #53	@ 0x35
 8005eca:	753b      	strb	r3, [r7, #20]
      break;
 8005ecc:	e009      	b.n	8005ee2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8005ece:	233a      	movs	r3, #58	@ 0x3a
 8005ed0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8005ed2:	2339      	movs	r3, #57	@ 0x39
 8005ed4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8005ed6:	233c      	movs	r3, #60	@ 0x3c
 8005ed8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8005eda:	233b      	movs	r3, #59	@ 0x3b
 8005edc:	753b      	strb	r3, [r7, #20]
      break;
 8005ede:	e000      	b.n	8005ee2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8005ee0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8005ee2:	89fb      	ldrh	r3, [r7, #14]
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	7dfa      	ldrb	r2, [r7, #23]
 8005ee8:	4611      	mov	r1, r2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fb04 	bl	80064f8 <TS_IO_Read>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005ef4:	7cfb      	ldrb	r3, [r7, #19]
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4b29      	ldr	r3, [pc, #164]	@ (8005fa0 <ft5336_TS_GetXY+0x1dc>)
 8005efc:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8005efe:	89fb      	ldrh	r3, [r7, #14]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	7dba      	ldrb	r2, [r7, #22]
 8005f04:	4611      	mov	r1, r2
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 faf6 	bl	80064f8 <TS_IO_Read>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005f10:	7cfb      	ldrb	r3, [r7, #19]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005f1a:	b21a      	sxth	r2, r3
 8005f1c:	4b20      	ldr	r3, [pc, #128]	@ (8005fa0 <ft5336_TS_GetXY+0x1dc>)
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b21b      	sxth	r3, r3
 8005f22:	4313      	orrs	r3, r2
 8005f24:	b21b      	sxth	r3, r3
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	4b1d      	ldr	r3, [pc, #116]	@ (8005fa0 <ft5336_TS_GetXY+0x1dc>)
 8005f2a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8005f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa0 <ft5336_TS_GetXY+0x1dc>)
 8005f2e:	881a      	ldrh	r2, [r3, #0]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005f34:	89fb      	ldrh	r3, [r7, #14]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	7d7a      	ldrb	r2, [r7, #21]
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fadb 	bl	80064f8 <TS_IO_Read>
 8005f42:	4603      	mov	r3, r0
 8005f44:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005f46:	7cfb      	ldrb	r3, [r7, #19]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	4b14      	ldr	r3, [pc, #80]	@ (8005fa0 <ft5336_TS_GetXY+0x1dc>)
 8005f4e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005f50:	89fb      	ldrh	r3, [r7, #14]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	7d3a      	ldrb	r2, [r7, #20]
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f000 facd 	bl	80064f8 <TS_IO_Read>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005f62:	7cfb      	ldrb	r3, [r7, #19]
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	021b      	lsls	r3, r3, #8
 8005f68:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005f6c:	b21a      	sxth	r2, r3
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa0 <ft5336_TS_GetXY+0x1dc>)
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b21b      	sxth	r3, r3
 8005f74:	4313      	orrs	r3, r2
 8005f76:	b21b      	sxth	r3, r3
 8005f78:	b29a      	uxth	r2, r3
 8005f7a:	4b09      	ldr	r3, [pc, #36]	@ (8005fa0 <ft5336_TS_GetXY+0x1dc>)
 8005f7c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8005f7e:	4b08      	ldr	r3, [pc, #32]	@ (8005fa0 <ft5336_TS_GetXY+0x1dc>)
 8005f80:	881a      	ldrh	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8005f86:	4b05      	ldr	r3, [pc, #20]	@ (8005f9c <ft5336_TS_GetXY+0x1d8>)
 8005f88:	789b      	ldrb	r3, [r3, #2]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	4b03      	ldr	r3, [pc, #12]	@ (8005f9c <ft5336_TS_GetXY+0x1d8>)
 8005f90:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8005f92:	bf00      	nop
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200062cc 	.word	0x200062cc
 8005fa0:	200062d0 	.word	0x200062d0

08005fa4 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	4603      	mov	r3, r0
 8005fac:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	7bfa      	ldrb	r2, [r7, #15]
 8005fbc:	21a4      	movs	r1, #164	@ 0xa4
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fa80 	bl	80064c4 <TS_IO_Write>
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	7bfa      	ldrb	r2, [r7, #15]
 8005fe4:	21a4      	movs	r1, #164	@ 0xa4
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f000 fa6c 	bl	80064c4 <TS_IO_Write>
}
 8005fec:	bf00      	nop
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b084      	sub	sp, #16
 8006026:	af00      	add	r7, sp, #0
 8006028:	4603      	mov	r3, r0
 800602a:	6039      	str	r1, [r7, #0]
 800602c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2101      	movs	r1, #1
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fa5d 	bl	80064f8 <TS_IO_Read>
 800603e:	4603      	mov	r3, r0
 8006040:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	b2db      	uxtb	r3, r3
 8006046:	461a      	mov	r2, r3
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	601a      	str	r2, [r3, #0]
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4603      	mov	r3, r0
 8006062:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8006068:	2300      	movs	r3, #0
 800606a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8006070:	2300      	movs	r3, #0
 8006072:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8006074:	4b4d      	ldr	r3, [pc, #308]	@ (80061ac <ft5336_TS_GetTouchInfo+0x158>)
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	461a      	mov	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	4293      	cmp	r3, r2
 800607e:	f080 8090 	bcs.w	80061a2 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2b09      	cmp	r3, #9
 8006086:	d85d      	bhi.n	8006144 <ft5336_TS_GetTouchInfo+0xf0>
 8006088:	a201      	add	r2, pc, #4	@ (adr r2, 8006090 <ft5336_TS_GetTouchInfo+0x3c>)
 800608a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060b9 	.word	0x080060b9
 8006094:	080060c7 	.word	0x080060c7
 8006098:	080060d5 	.word	0x080060d5
 800609c:	080060e3 	.word	0x080060e3
 80060a0:	080060f1 	.word	0x080060f1
 80060a4:	080060ff 	.word	0x080060ff
 80060a8:	0800610d 	.word	0x0800610d
 80060ac:	0800611b 	.word	0x0800611b
 80060b0:	08006129 	.word	0x08006129
 80060b4:	08006137 	.word	0x08006137
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80060b8:	2303      	movs	r3, #3
 80060ba:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80060bc:	2307      	movs	r3, #7
 80060be:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80060c0:	2308      	movs	r3, #8
 80060c2:	757b      	strb	r3, [r7, #21]
      break;
 80060c4:	e03f      	b.n	8006146 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80060c6:	2309      	movs	r3, #9
 80060c8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80060ca:	230d      	movs	r3, #13
 80060cc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80060ce:	230e      	movs	r3, #14
 80060d0:	757b      	strb	r3, [r7, #21]
      break;
 80060d2:	e038      	b.n	8006146 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80060d4:	230f      	movs	r3, #15
 80060d6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80060d8:	2313      	movs	r3, #19
 80060da:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80060dc:	2314      	movs	r3, #20
 80060de:	757b      	strb	r3, [r7, #21]
      break;
 80060e0:	e031      	b.n	8006146 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80060e2:	2315      	movs	r3, #21
 80060e4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80060e6:	2319      	movs	r3, #25
 80060e8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80060ea:	231a      	movs	r3, #26
 80060ec:	757b      	strb	r3, [r7, #21]
      break;
 80060ee:	e02a      	b.n	8006146 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80060f0:	231b      	movs	r3, #27
 80060f2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80060f4:	231f      	movs	r3, #31
 80060f6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80060f8:	2320      	movs	r3, #32
 80060fa:	757b      	strb	r3, [r7, #21]
      break;
 80060fc:	e023      	b.n	8006146 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80060fe:	2321      	movs	r3, #33	@ 0x21
 8006100:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8006102:	2325      	movs	r3, #37	@ 0x25
 8006104:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8006106:	2326      	movs	r3, #38	@ 0x26
 8006108:	757b      	strb	r3, [r7, #21]
      break;
 800610a:	e01c      	b.n	8006146 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 800610c:	2327      	movs	r3, #39	@ 0x27
 800610e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8006110:	232b      	movs	r3, #43	@ 0x2b
 8006112:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8006114:	232c      	movs	r3, #44	@ 0x2c
 8006116:	757b      	strb	r3, [r7, #21]
      break;
 8006118:	e015      	b.n	8006146 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 800611a:	232d      	movs	r3, #45	@ 0x2d
 800611c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800611e:	2331      	movs	r3, #49	@ 0x31
 8006120:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8006122:	2332      	movs	r3, #50	@ 0x32
 8006124:	757b      	strb	r3, [r7, #21]
      break;
 8006126:	e00e      	b.n	8006146 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8006128:	2333      	movs	r3, #51	@ 0x33
 800612a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 800612c:	2337      	movs	r3, #55	@ 0x37
 800612e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8006130:	2338      	movs	r3, #56	@ 0x38
 8006132:	757b      	strb	r3, [r7, #21]
      break;
 8006134:	e007      	b.n	8006146 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8006136:	2339      	movs	r3, #57	@ 0x39
 8006138:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 800613a:	233d      	movs	r3, #61	@ 0x3d
 800613c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800613e:	233e      	movs	r3, #62	@ 0x3e
 8006140:	757b      	strb	r3, [r7, #21]
      break;
 8006142:	e000      	b.n	8006146 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8006144:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8006146:	89fb      	ldrh	r3, [r7, #14]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	7dfa      	ldrb	r2, [r7, #23]
 800614c:	4611      	mov	r1, r2
 800614e:	4618      	mov	r0, r3
 8006150:	f000 f9d2 	bl	80064f8 <TS_IO_Read>
 8006154:	4603      	mov	r3, r0
 8006156:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8006158:	7d3b      	ldrb	r3, [r7, #20]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	119b      	asrs	r3, r3, #6
 800615e:	f003 0203 	and.w	r2, r3, #3
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8006166:	89fb      	ldrh	r3, [r7, #14]
 8006168:	b2db      	uxtb	r3, r3
 800616a:	7dba      	ldrb	r2, [r7, #22]
 800616c:	4611      	mov	r1, r2
 800616e:	4618      	mov	r0, r3
 8006170:	f000 f9c2 	bl	80064f8 <TS_IO_Read>
 8006174:	4603      	mov	r3, r0
 8006176:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8006178:	7d3b      	ldrb	r3, [r7, #20]
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8006182:	89fb      	ldrh	r3, [r7, #14]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	7d7a      	ldrb	r2, [r7, #21]
 8006188:	4611      	mov	r1, r2
 800618a:	4618      	mov	r0, r3
 800618c:	f000 f9b4 	bl	80064f8 <TS_IO_Read>
 8006190:	4603      	mov	r3, r0
 8006192:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8006194:	7d3b      	ldrb	r3, [r7, #20]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	111b      	asrs	r3, r3, #4
 800619a:	f003 0204 	and.w	r2, r3, #4
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80061a2:	bf00      	nop
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	200062cc 	.word	0x200062cc

080061b0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80061b4:	4b03      	ldr	r3, [pc, #12]	@ (80061c4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	200062cc 	.word	0x200062cc

080061c8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80061cc:	f7ff fff0 	bl	80061b0 <ft5336_Get_I2C_InitializedStatus>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d104      	bne.n	80061e0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80061d6:	f000 f96b 	bl	80064b0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80061da:	4b02      	ldr	r3, [pc, #8]	@ (80061e4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80061dc:	2201      	movs	r2, #1
 80061de:	701a      	strb	r2, [r3, #0]
  }
}
 80061e0:	bf00      	nop
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	200062cc 	.word	0x200062cc

080061e8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80061f6:	68fb      	ldr	r3, [r7, #12]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3714      	adds	r7, #20
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08c      	sub	sp, #48	@ 0x30
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a51      	ldr	r2, [pc, #324]	@ (8006354 <I2Cx_MspInit+0x150>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d14d      	bne.n	80062b0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8006214:	4b50      	ldr	r3, [pc, #320]	@ (8006358 <I2Cx_MspInit+0x154>)
 8006216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006218:	4a4f      	ldr	r2, [pc, #316]	@ (8006358 <I2Cx_MspInit+0x154>)
 800621a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800621e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006220:	4b4d      	ldr	r3, [pc, #308]	@ (8006358 <I2Cx_MspInit+0x154>)
 8006222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006224:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800622c:	2380      	movs	r3, #128	@ 0x80
 800622e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8006230:	2312      	movs	r3, #18
 8006232:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006234:	2300      	movs	r3, #0
 8006236:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8006238:	2302      	movs	r3, #2
 800623a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800623c:	2304      	movs	r3, #4
 800623e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006240:	f107 031c 	add.w	r3, r7, #28
 8006244:	4619      	mov	r1, r3
 8006246:	4845      	ldr	r0, [pc, #276]	@ (800635c <I2Cx_MspInit+0x158>)
 8006248:	f003 fc0a 	bl	8009a60 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800624c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006250:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006252:	f107 031c 	add.w	r3, r7, #28
 8006256:	4619      	mov	r1, r3
 8006258:	4840      	ldr	r0, [pc, #256]	@ (800635c <I2Cx_MspInit+0x158>)
 800625a:	f003 fc01 	bl	8009a60 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800625e:	4b3e      	ldr	r3, [pc, #248]	@ (8006358 <I2Cx_MspInit+0x154>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006262:	4a3d      	ldr	r2, [pc, #244]	@ (8006358 <I2Cx_MspInit+0x154>)
 8006264:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006268:	6413      	str	r3, [r2, #64]	@ 0x40
 800626a:	4b3b      	ldr	r3, [pc, #236]	@ (8006358 <I2Cx_MspInit+0x154>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8006276:	4b38      	ldr	r3, [pc, #224]	@ (8006358 <I2Cx_MspInit+0x154>)
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	4a37      	ldr	r2, [pc, #220]	@ (8006358 <I2Cx_MspInit+0x154>)
 800627c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006280:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8006282:	4b35      	ldr	r3, [pc, #212]	@ (8006358 <I2Cx_MspInit+0x154>)
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	4a34      	ldr	r2, [pc, #208]	@ (8006358 <I2Cx_MspInit+0x154>)
 8006288:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800628c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800628e:	2200      	movs	r2, #0
 8006290:	210f      	movs	r1, #15
 8006292:	2048      	movs	r0, #72	@ 0x48
 8006294:	f002 fd1d 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8006298:	2048      	movs	r0, #72	@ 0x48
 800629a:	f002 fd36 	bl	8008d0a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800629e:	2200      	movs	r2, #0
 80062a0:	210f      	movs	r1, #15
 80062a2:	2049      	movs	r0, #73	@ 0x49
 80062a4:	f002 fd15 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80062a8:	2049      	movs	r0, #73	@ 0x49
 80062aa:	f002 fd2e 	bl	8008d0a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80062ae:	e04d      	b.n	800634c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80062b0:	4b29      	ldr	r3, [pc, #164]	@ (8006358 <I2Cx_MspInit+0x154>)
 80062b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b4:	4a28      	ldr	r2, [pc, #160]	@ (8006358 <I2Cx_MspInit+0x154>)
 80062b6:	f043 0302 	orr.w	r3, r3, #2
 80062ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80062bc:	4b26      	ldr	r3, [pc, #152]	@ (8006358 <I2Cx_MspInit+0x154>)
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80062c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062cc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80062ce:	2312      	movs	r3, #18
 80062d0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80062d2:	2300      	movs	r3, #0
 80062d4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80062d6:	2302      	movs	r3, #2
 80062d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80062da:	2304      	movs	r3, #4
 80062dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80062de:	f107 031c 	add.w	r3, r7, #28
 80062e2:	4619      	mov	r1, r3
 80062e4:	481e      	ldr	r0, [pc, #120]	@ (8006360 <I2Cx_MspInit+0x15c>)
 80062e6:	f003 fbbb 	bl	8009a60 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80062ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80062f0:	f107 031c 	add.w	r3, r7, #28
 80062f4:	4619      	mov	r1, r3
 80062f6:	481a      	ldr	r0, [pc, #104]	@ (8006360 <I2Cx_MspInit+0x15c>)
 80062f8:	f003 fbb2 	bl	8009a60 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80062fc:	4b16      	ldr	r3, [pc, #88]	@ (8006358 <I2Cx_MspInit+0x154>)
 80062fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006300:	4a15      	ldr	r2, [pc, #84]	@ (8006358 <I2Cx_MspInit+0x154>)
 8006302:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006306:	6413      	str	r3, [r2, #64]	@ 0x40
 8006308:	4b13      	ldr	r3, [pc, #76]	@ (8006358 <I2Cx_MspInit+0x154>)
 800630a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8006314:	4b10      	ldr	r3, [pc, #64]	@ (8006358 <I2Cx_MspInit+0x154>)
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	4a0f      	ldr	r2, [pc, #60]	@ (8006358 <I2Cx_MspInit+0x154>)
 800631a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800631e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8006320:	4b0d      	ldr	r3, [pc, #52]	@ (8006358 <I2Cx_MspInit+0x154>)
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	4a0c      	ldr	r2, [pc, #48]	@ (8006358 <I2Cx_MspInit+0x154>)
 8006326:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800632a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800632c:	2200      	movs	r2, #0
 800632e:	210f      	movs	r1, #15
 8006330:	201f      	movs	r0, #31
 8006332:	f002 fcce 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8006336:	201f      	movs	r0, #31
 8006338:	f002 fce7 	bl	8008d0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800633c:	2200      	movs	r2, #0
 800633e:	210f      	movs	r1, #15
 8006340:	2020      	movs	r0, #32
 8006342:	f002 fcc6 	bl	8008cd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8006346:	2020      	movs	r0, #32
 8006348:	f002 fcdf 	bl	8008d0a <HAL_NVIC_EnableIRQ>
}
 800634c:	bf00      	nop
 800634e:	3730      	adds	r7, #48	@ 0x30
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	200062d4 	.word	0x200062d4
 8006358:	40023800 	.word	0x40023800
 800635c:	40021c00 	.word	0x40021c00
 8006360:	40020400 	.word	0x40020400

08006364 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f004 f973 	bl	800a658 <HAL_I2C_GetState>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d125      	bne.n	80063c4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a14      	ldr	r2, [pc, #80]	@ (80063cc <I2Cx_Init+0x68>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d103      	bne.n	8006388 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a13      	ldr	r2, [pc, #76]	@ (80063d0 <I2Cx_Init+0x6c>)
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	e002      	b.n	800638e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a12      	ldr	r2, [pc, #72]	@ (80063d4 <I2Cx_Init+0x70>)
 800638c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a11      	ldr	r2, [pc, #68]	@ (80063d8 <I2Cx_Init+0x74>)
 8006392:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7ff ff23 	bl	8006204 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f003 fe50 	bl	800a064 <HAL_I2C_Init>
  }
}
 80063c4:	bf00      	nop
 80063c6:	3708      	adds	r7, #8
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	200062d4 	.word	0x200062d4
 80063d0:	40005c00 	.word	0x40005c00
 80063d4:	40005400 	.word	0x40005400
 80063d8:	40912732 	.word	0x40912732

080063dc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	@ 0x28
 80063e0:	af04      	add	r7, sp, #16
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	4608      	mov	r0, r1
 80063e6:	4611      	mov	r1, r2
 80063e8:	461a      	mov	r2, r3
 80063ea:	4603      	mov	r3, r0
 80063ec:	72fb      	strb	r3, [r7, #11]
 80063ee:	460b      	mov	r3, r1
 80063f0:	813b      	strh	r3, [r7, #8]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80063fa:	7afb      	ldrb	r3, [r7, #11]
 80063fc:	b299      	uxth	r1, r3
 80063fe:	88f8      	ldrh	r0, [r7, #6]
 8006400:	893a      	ldrh	r2, [r7, #8]
 8006402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006406:	9302      	str	r3, [sp, #8]
 8006408:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800640a:	9301      	str	r3, [sp, #4]
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	4603      	mov	r3, r0
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f004 f806 	bl	800a424 <HAL_I2C_Mem_Read>
 8006418:	4603      	mov	r3, r0
 800641a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800641c:	7dfb      	ldrb	r3, [r7, #23]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8006422:	7afb      	ldrb	r3, [r7, #11]
 8006424:	4619      	mov	r1, r3
 8006426:	68f8      	ldr	r0, [r7, #12]
 8006428:	f000 f832 	bl	8006490 <I2Cx_Error>
  }
  return status;    
 800642c:	7dfb      	ldrb	r3, [r7, #23]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3718      	adds	r7, #24
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b08a      	sub	sp, #40	@ 0x28
 800643a:	af04      	add	r7, sp, #16
 800643c:	60f8      	str	r0, [r7, #12]
 800643e:	4608      	mov	r0, r1
 8006440:	4611      	mov	r1, r2
 8006442:	461a      	mov	r2, r3
 8006444:	4603      	mov	r3, r0
 8006446:	72fb      	strb	r3, [r7, #11]
 8006448:	460b      	mov	r3, r1
 800644a:	813b      	strh	r3, [r7, #8]
 800644c:	4613      	mov	r3, r2
 800644e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006450:	2300      	movs	r3, #0
 8006452:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	b299      	uxth	r1, r3
 8006458:	88f8      	ldrh	r0, [r7, #6]
 800645a:	893a      	ldrh	r2, [r7, #8]
 800645c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006460:	9302      	str	r3, [sp, #8]
 8006462:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006464:	9301      	str	r3, [sp, #4]
 8006466:	6a3b      	ldr	r3, [r7, #32]
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	4603      	mov	r3, r0
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f003 fec5 	bl	800a1fc <HAL_I2C_Mem_Write>
 8006472:	4603      	mov	r3, r0
 8006474:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8006476:	7dfb      	ldrb	r3, [r7, #23]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d004      	beq.n	8006486 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800647c:	7afb      	ldrb	r3, [r7, #11]
 800647e:	4619      	mov	r1, r3
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 f805 	bl	8006490 <I2Cx_Error>
  }
  return status;
 8006486:	7dfb      	ldrb	r3, [r7, #23]
}
 8006488:	4618      	mov	r0, r3
 800648a:	3718      	adds	r7, #24
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	460b      	mov	r3, r1
 800649a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f003 fe7d 	bl	800a19c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7ff ff5e 	bl	8006364 <I2Cx_Init>
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80064b4:	4802      	ldr	r0, [pc, #8]	@ (80064c0 <TS_IO_Init+0x10>)
 80064b6:	f7ff ff55 	bl	8006364 <I2Cx_Init>
}
 80064ba:	bf00      	nop
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	200062d4 	.word	0x200062d4

080064c4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	4603      	mov	r3, r0
 80064cc:	71fb      	strb	r3, [r7, #7]
 80064ce:	460b      	mov	r3, r1
 80064d0:	71bb      	strb	r3, [r7, #6]
 80064d2:	4613      	mov	r3, r2
 80064d4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80064d6:	79bb      	ldrb	r3, [r7, #6]
 80064d8:	b29a      	uxth	r2, r3
 80064da:	79f9      	ldrb	r1, [r7, #7]
 80064dc:	2301      	movs	r3, #1
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	1d7b      	adds	r3, r7, #5
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	2301      	movs	r3, #1
 80064e6:	4803      	ldr	r0, [pc, #12]	@ (80064f4 <TS_IO_Write+0x30>)
 80064e8:	f7ff ffa5 	bl	8006436 <I2Cx_WriteMultiple>
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	200062d4 	.word	0x200062d4

080064f8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	4603      	mov	r3, r0
 8006500:	460a      	mov	r2, r1
 8006502:	71fb      	strb	r3, [r7, #7]
 8006504:	4613      	mov	r3, r2
 8006506:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800650c:	79bb      	ldrb	r3, [r7, #6]
 800650e:	b29a      	uxth	r2, r3
 8006510:	79f9      	ldrb	r1, [r7, #7]
 8006512:	2301      	movs	r3, #1
 8006514:	9301      	str	r3, [sp, #4]
 8006516:	f107 030f 	add.w	r3, r7, #15
 800651a:	9300      	str	r3, [sp, #0]
 800651c:	2301      	movs	r3, #1
 800651e:	4804      	ldr	r0, [pc, #16]	@ (8006530 <TS_IO_Read+0x38>)
 8006520:	f7ff ff5c 	bl	80063dc <I2Cx_ReadMultiple>

  return read_value;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	200062d4 	.word	0x200062d4

08006534 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 fe9b 	bl	8008278 <HAL_Delay>
}
 8006542:	bf00      	nop
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
	...

0800654c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800654c:	b580      	push	{r7, lr}
 800654e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006550:	4b31      	ldr	r3, [pc, #196]	@ (8006618 <BSP_LCD_Init+0xcc>)
 8006552:	2228      	movs	r2, #40	@ 0x28
 8006554:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006556:	4b30      	ldr	r3, [pc, #192]	@ (8006618 <BSP_LCD_Init+0xcc>)
 8006558:	2209      	movs	r2, #9
 800655a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800655c:	4b2e      	ldr	r3, [pc, #184]	@ (8006618 <BSP_LCD_Init+0xcc>)
 800655e:	2235      	movs	r2, #53	@ 0x35
 8006560:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006562:	4b2d      	ldr	r3, [pc, #180]	@ (8006618 <BSP_LCD_Init+0xcc>)
 8006564:	220b      	movs	r2, #11
 8006566:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006568:	4b2b      	ldr	r3, [pc, #172]	@ (8006618 <BSP_LCD_Init+0xcc>)
 800656a:	f240 121b 	movw	r2, #283	@ 0x11b
 800656e:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006570:	4b29      	ldr	r3, [pc, #164]	@ (8006618 <BSP_LCD_Init+0xcc>)
 8006572:	f240 2215 	movw	r2, #533	@ 0x215
 8006576:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006578:	4b27      	ldr	r3, [pc, #156]	@ (8006618 <BSP_LCD_Init+0xcc>)
 800657a:	f240 121d 	movw	r2, #285	@ 0x11d
 800657e:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006580:	4b25      	ldr	r3, [pc, #148]	@ (8006618 <BSP_LCD_Init+0xcc>)
 8006582:	f240 2235 	movw	r2, #565	@ 0x235
 8006586:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006588:	2100      	movs	r1, #0
 800658a:	4823      	ldr	r0, [pc, #140]	@ (8006618 <BSP_LCD_Init+0xcc>)
 800658c:	f001 f876 	bl	800767c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006590:	4b21      	ldr	r3, [pc, #132]	@ (8006618 <BSP_LCD_Init+0xcc>)
 8006592:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006596:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006598:	4b1f      	ldr	r3, [pc, #124]	@ (8006618 <BSP_LCD_Init+0xcc>)
 800659a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800659e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80065a0:	4b1d      	ldr	r3, [pc, #116]	@ (8006618 <BSP_LCD_Init+0xcc>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80065a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006618 <BSP_LCD_Init+0xcc>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80065b0:	4b19      	ldr	r3, [pc, #100]	@ (8006618 <BSP_LCD_Init+0xcc>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80065b8:	4b17      	ldr	r3, [pc, #92]	@ (8006618 <BSP_LCD_Init+0xcc>)
 80065ba:	2200      	movs	r2, #0
 80065bc:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80065be:	4b16      	ldr	r3, [pc, #88]	@ (8006618 <BSP_LCD_Init+0xcc>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80065c4:	4b14      	ldr	r3, [pc, #80]	@ (8006618 <BSP_LCD_Init+0xcc>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80065ca:	4b13      	ldr	r3, [pc, #76]	@ (8006618 <BSP_LCD_Init+0xcc>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80065d0:	4b11      	ldr	r3, [pc, #68]	@ (8006618 <BSP_LCD_Init+0xcc>)
 80065d2:	4a12      	ldr	r2, [pc, #72]	@ (800661c <BSP_LCD_Init+0xd0>)
 80065d4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80065d6:	4810      	ldr	r0, [pc, #64]	@ (8006618 <BSP_LCD_Init+0xcc>)
 80065d8:	f004 fcb4 	bl	800af44 <HAL_LTDC_GetState>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d103      	bne.n	80065ea <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80065e2:	2100      	movs	r1, #0
 80065e4:	480c      	ldr	r0, [pc, #48]	@ (8006618 <BSP_LCD_Init+0xcc>)
 80065e6:	f000 ff6f 	bl	80074c8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80065ea:	480b      	ldr	r0, [pc, #44]	@ (8006618 <BSP_LCD_Init+0xcc>)
 80065ec:	f004 fb9c 	bl	800ad28 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80065f0:	2201      	movs	r2, #1
 80065f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80065f6:	480a      	ldr	r0, [pc, #40]	@ (8006620 <BSP_LCD_Init+0xd4>)
 80065f8:	f003 fd02 	bl	800a000 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80065fc:	2201      	movs	r2, #1
 80065fe:	2108      	movs	r1, #8
 8006600:	4808      	ldr	r0, [pc, #32]	@ (8006624 <BSP_LCD_Init+0xd8>)
 8006602:	f003 fcfd 	bl	800a000 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8006606:	f001 f99d 	bl	8007944 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800660a:	4807      	ldr	r0, [pc, #28]	@ (8006628 <BSP_LCD_Init+0xdc>)
 800660c:	f000 f916 	bl	800683c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20006328 	.word	0x20006328
 800661c:	40016800 	.word	0x40016800
 8006620:	40022000 	.word	0x40022000
 8006624:	40022800 	.word	0x40022800
 8006628:	20004efc 	.word	0x20004efc

0800662c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006630:	4b06      	ldr	r3, [pc, #24]	@ (800664c <BSP_LCD_GetXSize+0x20>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a06      	ldr	r2, [pc, #24]	@ (8006650 <BSP_LCD_GetXSize+0x24>)
 8006636:	2134      	movs	r1, #52	@ 0x34
 8006638:	fb01 f303 	mul.w	r3, r1, r3
 800663c:	4413      	add	r3, r2
 800663e:	3360      	adds	r3, #96	@ 0x60
 8006640:	681b      	ldr	r3, [r3, #0]
}
 8006642:	4618      	mov	r0, r3
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	20006410 	.word	0x20006410
 8006650:	20006328 	.word	0x20006328

08006654 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006658:	4b06      	ldr	r3, [pc, #24]	@ (8006674 <BSP_LCD_GetYSize+0x20>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a06      	ldr	r2, [pc, #24]	@ (8006678 <BSP_LCD_GetYSize+0x24>)
 800665e:	2134      	movs	r1, #52	@ 0x34
 8006660:	fb01 f303 	mul.w	r3, r1, r3
 8006664:	4413      	add	r3, r2
 8006666:	3364      	adds	r3, #100	@ 0x64
 8006668:	681b      	ldr	r3, [r3, #0]
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	20006410 	.word	0x20006410
 8006678:	20006328 	.word	0x20006328

0800667c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800667c:	b580      	push	{r7, lr}
 800667e:	b090      	sub	sp, #64	@ 0x40
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	6039      	str	r1, [r7, #0]
 8006686:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800668c:	f7ff ffce 	bl	800662c <BSP_LCD_GetXSize>
 8006690:	4603      	mov	r3, r0
 8006692:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8006698:	f7ff ffdc 	bl	8006654 <BSP_LCD_GetYSize>
 800669c:	4603      	mov	r3, r0
 800669e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 80066a8:	23ff      	movs	r3, #255	@ 0xff
 80066aa:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 80066b6:	2300      	movs	r3, #0
 80066b8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80066c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80066c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80066c8:	2307      	movs	r3, #7
 80066ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80066cc:	f7ff ffae 	bl	800662c <BSP_LCD_GetXSize>
 80066d0:	4603      	mov	r3, r0
 80066d2:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80066d4:	f7ff ffbe 	bl	8006654 <BSP_LCD_GetYSize>
 80066d8:	4603      	mov	r3, r0
 80066da:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80066dc:	88fa      	ldrh	r2, [r7, #6]
 80066de:	f107 030c 	add.w	r3, r7, #12
 80066e2:	4619      	mov	r1, r3
 80066e4:	4812      	ldr	r0, [pc, #72]	@ (8006730 <BSP_LCD_LayerDefaultInit+0xb4>)
 80066e6:	f004 fbef 	bl	800aec8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80066ea:	88fa      	ldrh	r2, [r7, #6]
 80066ec:	4911      	ldr	r1, [pc, #68]	@ (8006734 <BSP_LCD_LayerDefaultInit+0xb8>)
 80066ee:	4613      	mov	r3, r2
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	3304      	adds	r3, #4
 80066fa:	f04f 32ff 	mov.w	r2, #4294967295
 80066fe:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8006700:	88fa      	ldrh	r2, [r7, #6]
 8006702:	490c      	ldr	r1, [pc, #48]	@ (8006734 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006704:	4613      	mov	r3, r2
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	3308      	adds	r3, #8
 8006710:	4a09      	ldr	r2, [pc, #36]	@ (8006738 <BSP_LCD_LayerDefaultInit+0xbc>)
 8006712:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8006714:	88fa      	ldrh	r2, [r7, #6]
 8006716:	4907      	ldr	r1, [pc, #28]	@ (8006734 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006718:	4613      	mov	r3, r2
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8006726:	601a      	str	r2, [r3, #0]
}
 8006728:	bf00      	nop
 800672a:	3740      	adds	r7, #64	@ 0x40
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20006328 	.word	0x20006328
 8006734:	20006414 	.word	0x20006414
 8006738:	20004efc 	.word	0x20004efc

0800673c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8006744:	4a04      	ldr	r2, [pc, #16]	@ (8006758 <BSP_LCD_SelectLayer+0x1c>)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6013      	str	r3, [r2, #0]
} 
 800674a:	bf00      	nop
 800674c:	370c      	adds	r7, #12
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	20006410 	.word	0x20006410

0800675c <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d112      	bne.n	8006794 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 800676e:	4b19      	ldr	r3, [pc, #100]	@ (80067d4 <BSP_LCD_SetLayerVisible+0x78>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	461a      	mov	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	01db      	lsls	r3, r3, #7
 8006778:	4413      	add	r3, r2
 800677a:	3384      	adds	r3, #132	@ 0x84
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a15      	ldr	r2, [pc, #84]	@ (80067d4 <BSP_LCD_SetLayerVisible+0x78>)
 8006780:	6812      	ldr	r2, [r2, #0]
 8006782:	4611      	mov	r1, r2
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	01d2      	lsls	r2, r2, #7
 8006788:	440a      	add	r2, r1
 800678a:	3284      	adds	r2, #132	@ 0x84
 800678c:	f043 0301 	orr.w	r3, r3, #1
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	e011      	b.n	80067b8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8006794:	4b0f      	ldr	r3, [pc, #60]	@ (80067d4 <BSP_LCD_SetLayerVisible+0x78>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	461a      	mov	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	01db      	lsls	r3, r3, #7
 800679e:	4413      	add	r3, r2
 80067a0:	3384      	adds	r3, #132	@ 0x84
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a0b      	ldr	r2, [pc, #44]	@ (80067d4 <BSP_LCD_SetLayerVisible+0x78>)
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	4611      	mov	r1, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	01d2      	lsls	r2, r2, #7
 80067ae:	440a      	add	r2, r1
 80067b0:	3284      	adds	r2, #132	@ 0x84
 80067b2:	f023 0301 	bic.w	r3, r3, #1
 80067b6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 80067b8:	4b06      	ldr	r3, [pc, #24]	@ (80067d4 <BSP_LCD_SetLayerVisible+0x78>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067be:	4b05      	ldr	r3, [pc, #20]	@ (80067d4 <BSP_LCD_SetLayerVisible+0x78>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0201 	orr.w	r2, r2, #1
 80067c6:	625a      	str	r2, [r3, #36]	@ 0x24
} 
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	20006328 	.word	0x20006328

080067d8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80067e0:	4b07      	ldr	r3, [pc, #28]	@ (8006800 <BSP_LCD_SetTextColor+0x28>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	4907      	ldr	r1, [pc, #28]	@ (8006804 <BSP_LCD_SetTextColor+0x2c>)
 80067e6:	4613      	mov	r3, r2
 80067e8:	005b      	lsls	r3, r3, #1
 80067ea:	4413      	add	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	440b      	add	r3, r1
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	601a      	str	r2, [r3, #0]
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	20006410 	.word	0x20006410
 8006804:	20006414 	.word	0x20006414

08006808 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8006810:	4b08      	ldr	r3, [pc, #32]	@ (8006834 <BSP_LCD_SetBackColor+0x2c>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	4908      	ldr	r1, [pc, #32]	@ (8006838 <BSP_LCD_SetBackColor+0x30>)
 8006816:	4613      	mov	r3, r2
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	3304      	adds	r3, #4
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	601a      	str	r2, [r3, #0]
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20006410 	.word	0x20006410
 8006838:	20006414 	.word	0x20006414

0800683c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8006844:	4b08      	ldr	r3, [pc, #32]	@ (8006868 <BSP_LCD_SetFont+0x2c>)
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	4908      	ldr	r1, [pc, #32]	@ (800686c <BSP_LCD_SetFont+0x30>)
 800684a:	4613      	mov	r3, r2
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	4413      	add	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	440b      	add	r3, r1
 8006854:	3308      	adds	r3, #8
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	601a      	str	r2, [r3, #0]
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	20006410 	.word	0x20006410
 800686c:	20006414 	.word	0x20006414

08006870 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8006870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006872:	b085      	sub	sp, #20
 8006874:	af02      	add	r7, sp, #8
 8006876:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006878:	4b0f      	ldr	r3, [pc, #60]	@ (80068b8 <BSP_LCD_Clear+0x48>)
 800687a:	681c      	ldr	r4, [r3, #0]
 800687c:	4b0e      	ldr	r3, [pc, #56]	@ (80068b8 <BSP_LCD_Clear+0x48>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a0e      	ldr	r2, [pc, #56]	@ (80068bc <BSP_LCD_Clear+0x4c>)
 8006882:	2134      	movs	r1, #52	@ 0x34
 8006884:	fb01 f303 	mul.w	r3, r1, r3
 8006888:	4413      	add	r3, r2
 800688a:	335c      	adds	r3, #92	@ 0x5c
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461e      	mov	r6, r3
 8006890:	f7ff fecc 	bl	800662c <BSP_LCD_GetXSize>
 8006894:	4605      	mov	r5, r0
 8006896:	f7ff fedd 	bl	8006654 <BSP_LCD_GetYSize>
 800689a:	4602      	mov	r2, r0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	2300      	movs	r3, #0
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	462a      	mov	r2, r5
 80068a8:	4631      	mov	r1, r6
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 ffba 	bl	8007824 <LL_FillBuffer>
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068b8:	20006410 	.word	0x20006410
 80068bc:	20006328 	.word	0x20006328

080068c0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80068c0:	b590      	push	{r4, r7, lr}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	80fb      	strh	r3, [r7, #6]
 80068ca:	460b      	mov	r3, r1
 80068cc:	80bb      	strh	r3, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80068d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006940 <BSP_LCD_DisplayChar+0x80>)
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	491b      	ldr	r1, [pc, #108]	@ (8006944 <BSP_LCD_DisplayChar+0x84>)
 80068d8:	4613      	mov	r3, r2
 80068da:	005b      	lsls	r3, r3, #1
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	3308      	adds	r3, #8
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6819      	ldr	r1, [r3, #0]
 80068e8:	78fb      	ldrb	r3, [r7, #3]
 80068ea:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80068ee:	4b14      	ldr	r3, [pc, #80]	@ (8006940 <BSP_LCD_DisplayChar+0x80>)
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	4c14      	ldr	r4, [pc, #80]	@ (8006944 <BSP_LCD_DisplayChar+0x84>)
 80068f4:	4613      	mov	r3, r2
 80068f6:	005b      	lsls	r3, r3, #1
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	4423      	add	r3, r4
 80068fe:	3308      	adds	r3, #8
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8006904:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8006908:	4b0d      	ldr	r3, [pc, #52]	@ (8006940 <BSP_LCD_DisplayChar+0x80>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	4c0d      	ldr	r4, [pc, #52]	@ (8006944 <BSP_LCD_DisplayChar+0x84>)
 800690e:	4613      	mov	r3, r2
 8006910:	005b      	lsls	r3, r3, #1
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4423      	add	r3, r4
 8006918:	3308      	adds	r3, #8
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	889b      	ldrh	r3, [r3, #4]
 800691e:	3307      	adds	r3, #7
 8006920:	2b00      	cmp	r3, #0
 8006922:	da00      	bge.n	8006926 <BSP_LCD_DisplayChar+0x66>
 8006924:	3307      	adds	r3, #7
 8006926:	10db      	asrs	r3, r3, #3
 8006928:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800692c:	18ca      	adds	r2, r1, r3
 800692e:	88b9      	ldrh	r1, [r7, #4]
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 febe 	bl	80076b4 <DrawChar>
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	bd90      	pop	{r4, r7, pc}
 8006940:	20006410 	.word	0x20006410
 8006944:	20006414 	.word	0x20006414

08006948 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8006948:	b5b0      	push	{r4, r5, r7, lr}
 800694a:	b088      	sub	sp, #32
 800694c:	af00      	add	r7, sp, #0
 800694e:	60ba      	str	r2, [r7, #8]
 8006950:	461a      	mov	r2, r3
 8006952:	4603      	mov	r3, r0
 8006954:	81fb      	strh	r3, [r7, #14]
 8006956:	460b      	mov	r3, r1
 8006958:	81bb      	strh	r3, [r7, #12]
 800695a:	4613      	mov	r3, r2
 800695c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800695e:	2301      	movs	r3, #1
 8006960:	83fb      	strh	r3, [r7, #30]
 8006962:	2300      	movs	r3, #0
 8006964:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8006966:	2300      	movs	r3, #0
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	2300      	movs	r3, #0
 800696c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8006972:	e002      	b.n	800697a <BSP_LCD_DisplayStringAt+0x32>
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	3301      	adds	r3, #1
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	1c5a      	adds	r2, r3, #1
 800697e:	617a      	str	r2, [r7, #20]
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1f6      	bne.n	8006974 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006986:	f7ff fe51 	bl	800662c <BSP_LCD_GetXSize>
 800698a:	4601      	mov	r1, r0
 800698c:	4b50      	ldr	r3, [pc, #320]	@ (8006ad0 <BSP_LCD_DisplayStringAt+0x188>)
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	4850      	ldr	r0, [pc, #320]	@ (8006ad4 <BSP_LCD_DisplayStringAt+0x18c>)
 8006992:	4613      	mov	r3, r2
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4403      	add	r3, r0
 800699c:	3308      	adds	r3, #8
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	889b      	ldrh	r3, [r3, #4]
 80069a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80069a6:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80069a8:	79fb      	ldrb	r3, [r7, #7]
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	d01c      	beq.n	80069e8 <BSP_LCD_DisplayStringAt+0xa0>
 80069ae:	2b03      	cmp	r3, #3
 80069b0:	dc33      	bgt.n	8006a1a <BSP_LCD_DisplayStringAt+0xd2>
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d002      	beq.n	80069bc <BSP_LCD_DisplayStringAt+0x74>
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d019      	beq.n	80069ee <BSP_LCD_DisplayStringAt+0xa6>
 80069ba:	e02e      	b.n	8006a1a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	1ad1      	subs	r1, r2, r3
 80069c2:	4b43      	ldr	r3, [pc, #268]	@ (8006ad0 <BSP_LCD_DisplayStringAt+0x188>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4843      	ldr	r0, [pc, #268]	@ (8006ad4 <BSP_LCD_DisplayStringAt+0x18c>)
 80069c8:	4613      	mov	r3, r2
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4403      	add	r3, r0
 80069d2:	3308      	adds	r3, #8
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	889b      	ldrh	r3, [r3, #4]
 80069d8:	fb01 f303 	mul.w	r3, r1, r3
 80069dc:	085b      	lsrs	r3, r3, #1
 80069de:	b29a      	uxth	r2, r3
 80069e0:	89fb      	ldrh	r3, [r7, #14]
 80069e2:	4413      	add	r3, r2
 80069e4:	83fb      	strh	r3, [r7, #30]
      break;
 80069e6:	e01b      	b.n	8006a20 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80069e8:	89fb      	ldrh	r3, [r7, #14]
 80069ea:	83fb      	strh	r3, [r7, #30]
      break;
 80069ec:	e018      	b.n	8006a20 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	b299      	uxth	r1, r3
 80069f6:	4b36      	ldr	r3, [pc, #216]	@ (8006ad0 <BSP_LCD_DisplayStringAt+0x188>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	4836      	ldr	r0, [pc, #216]	@ (8006ad4 <BSP_LCD_DisplayStringAt+0x18c>)
 80069fc:	4613      	mov	r3, r2
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	4413      	add	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4403      	add	r3, r0
 8006a06:	3308      	adds	r3, #8
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	889b      	ldrh	r3, [r3, #4]
 8006a0c:	fb11 f303 	smulbb	r3, r1, r3
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	89fb      	ldrh	r3, [r7, #14]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	83fb      	strh	r3, [r7, #30]
      break;
 8006a18:	e002      	b.n	8006a20 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8006a1a:	89fb      	ldrh	r3, [r7, #14]
 8006a1c:	83fb      	strh	r3, [r7, #30]
      break;
 8006a1e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8006a20:	8bfb      	ldrh	r3, [r7, #30]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <BSP_LCD_DisplayStringAt+0xe6>
 8006a26:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	da1d      	bge.n	8006a6a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006a32:	e01a      	b.n	8006a6a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	781a      	ldrb	r2, [r3, #0]
 8006a38:	89b9      	ldrh	r1, [r7, #12]
 8006a3a:	8bfb      	ldrh	r3, [r7, #30]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff ff3f 	bl	80068c0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8006a42:	4b23      	ldr	r3, [pc, #140]	@ (8006ad0 <BSP_LCD_DisplayStringAt+0x188>)
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4923      	ldr	r1, [pc, #140]	@ (8006ad4 <BSP_LCD_DisplayStringAt+0x18c>)
 8006a48:	4613      	mov	r3, r2
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	440b      	add	r3, r1
 8006a52:	3308      	adds	r3, #8
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	889a      	ldrh	r2, [r3, #4]
 8006a58:	8bfb      	ldrh	r3, [r7, #30]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	3301      	adds	r3, #1
 8006a62:	60bb      	str	r3, [r7, #8]
    i++;
 8006a64:	8bbb      	ldrh	r3, [r7, #28]
 8006a66:	3301      	adds	r3, #1
 8006a68:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bf14      	ite	ne
 8006a72:	2301      	movne	r3, #1
 8006a74:	2300      	moveq	r3, #0
 8006a76:	b2dc      	uxtb	r4, r3
 8006a78:	f7ff fdd8 	bl	800662c <BSP_LCD_GetXSize>
 8006a7c:	8bb9      	ldrh	r1, [r7, #28]
 8006a7e:	4b14      	ldr	r3, [pc, #80]	@ (8006ad0 <BSP_LCD_DisplayStringAt+0x188>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4d14      	ldr	r5, [pc, #80]	@ (8006ad4 <BSP_LCD_DisplayStringAt+0x18c>)
 8006a84:	4613      	mov	r3, r2
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	4413      	add	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	442b      	add	r3, r5
 8006a8e:	3308      	adds	r3, #8
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	889b      	ldrh	r3, [r3, #4]
 8006a94:	fb01 f303 	mul.w	r3, r1, r3
 8006a98:	1ac3      	subs	r3, r0, r3
 8006a9a:	b299      	uxth	r1, r3
 8006a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad0 <BSP_LCD_DisplayStringAt+0x188>)
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	480c      	ldr	r0, [pc, #48]	@ (8006ad4 <BSP_LCD_DisplayStringAt+0x18c>)
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	4413      	add	r3, r2
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4403      	add	r3, r0
 8006aac:	3308      	adds	r3, #8
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	889b      	ldrh	r3, [r3, #4]
 8006ab2:	4299      	cmp	r1, r3
 8006ab4:	bf2c      	ite	cs
 8006ab6:	2301      	movcs	r3, #1
 8006ab8:	2300      	movcc	r3, #0
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	4023      	ands	r3, r4
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1b7      	bne.n	8006a34 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop
 8006ac8:	3720      	adds	r7, #32
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bdb0      	pop	{r4, r5, r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	20006410 	.word	0x20006410
 8006ad4:	20006414 	.word	0x20006414

08006ad8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006ad8:	b5b0      	push	{r4, r5, r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	4603      	mov	r3, r0
 8006ae0:	80fb      	strh	r3, [r7, #6]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	80bb      	strh	r3, [r7, #4]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006aee:	4b26      	ldr	r3, [pc, #152]	@ (8006b88 <BSP_LCD_DrawHLine+0xb0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a26      	ldr	r2, [pc, #152]	@ (8006b8c <BSP_LCD_DrawHLine+0xb4>)
 8006af4:	2134      	movs	r1, #52	@ 0x34
 8006af6:	fb01 f303 	mul.w	r3, r1, r3
 8006afa:	4413      	add	r3, r2
 8006afc:	3348      	adds	r3, #72	@ 0x48
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d114      	bne.n	8006b2e <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006b04:	4b20      	ldr	r3, [pc, #128]	@ (8006b88 <BSP_LCD_DrawHLine+0xb0>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a20      	ldr	r2, [pc, #128]	@ (8006b8c <BSP_LCD_DrawHLine+0xb4>)
 8006b0a:	2134      	movs	r1, #52	@ 0x34
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	335c      	adds	r3, #92	@ 0x5c
 8006b14:	681c      	ldr	r4, [r3, #0]
 8006b16:	f7ff fd89 	bl	800662c <BSP_LCD_GetXSize>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	88bb      	ldrh	r3, [r7, #4]
 8006b1e:	fb03 f202 	mul.w	r2, r3, r2
 8006b22:	88fb      	ldrh	r3, [r7, #6]
 8006b24:	4413      	add	r3, r2
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	4423      	add	r3, r4
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	e013      	b.n	8006b56 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006b2e:	4b16      	ldr	r3, [pc, #88]	@ (8006b88 <BSP_LCD_DrawHLine+0xb0>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a16      	ldr	r2, [pc, #88]	@ (8006b8c <BSP_LCD_DrawHLine+0xb4>)
 8006b34:	2134      	movs	r1, #52	@ 0x34
 8006b36:	fb01 f303 	mul.w	r3, r1, r3
 8006b3a:	4413      	add	r3, r2
 8006b3c:	335c      	adds	r3, #92	@ 0x5c
 8006b3e:	681c      	ldr	r4, [r3, #0]
 8006b40:	f7ff fd74 	bl	800662c <BSP_LCD_GetXSize>
 8006b44:	4602      	mov	r2, r0
 8006b46:	88bb      	ldrh	r3, [r7, #4]
 8006b48:	fb03 f202 	mul.w	r2, r3, r2
 8006b4c:	88fb      	ldrh	r3, [r7, #6]
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4423      	add	r3, r4
 8006b54:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8006b56:	4b0c      	ldr	r3, [pc, #48]	@ (8006b88 <BSP_LCD_DrawHLine+0xb0>)
 8006b58:	6818      	ldr	r0, [r3, #0]
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	887c      	ldrh	r4, [r7, #2]
 8006b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006b88 <BSP_LCD_DrawHLine+0xb0>)
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	4d0b      	ldr	r5, [pc, #44]	@ (8006b90 <BSP_LCD_DrawHLine+0xb8>)
 8006b64:	4613      	mov	r3, r2
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	4413      	add	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	442b      	add	r3, r5
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	9301      	str	r3, [sp, #4]
 8006b72:	2300      	movs	r3, #0
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	2301      	movs	r3, #1
 8006b78:	4622      	mov	r2, r4
 8006b7a:	f000 fe53 	bl	8007824 <LL_FillBuffer>
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bdb0      	pop	{r4, r5, r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20006410 	.word	0x20006410
 8006b8c:	20006328 	.word	0x20006328
 8006b90:	20006414 	.word	0x20006414

08006b94 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af02      	add	r7, sp, #8
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	80fb      	strh	r3, [r7, #6]
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	80bb      	strh	r3, [r7, #4]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006baa:	4b28      	ldr	r3, [pc, #160]	@ (8006c4c <BSP_LCD_DrawVLine+0xb8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a28      	ldr	r2, [pc, #160]	@ (8006c50 <BSP_LCD_DrawVLine+0xbc>)
 8006bb0:	2134      	movs	r1, #52	@ 0x34
 8006bb2:	fb01 f303 	mul.w	r3, r1, r3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3348      	adds	r3, #72	@ 0x48
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b02      	cmp	r3, #2
 8006bbe:	d114      	bne.n	8006bea <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006bc0:	4b22      	ldr	r3, [pc, #136]	@ (8006c4c <BSP_LCD_DrawVLine+0xb8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a22      	ldr	r2, [pc, #136]	@ (8006c50 <BSP_LCD_DrawVLine+0xbc>)
 8006bc6:	2134      	movs	r1, #52	@ 0x34
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	4413      	add	r3, r2
 8006bce:	335c      	adds	r3, #92	@ 0x5c
 8006bd0:	681c      	ldr	r4, [r3, #0]
 8006bd2:	f7ff fd2b 	bl	800662c <BSP_LCD_GetXSize>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	88bb      	ldrh	r3, [r7, #4]
 8006bda:	fb03 f202 	mul.w	r2, r3, r2
 8006bde:	88fb      	ldrh	r3, [r7, #6]
 8006be0:	4413      	add	r3, r2
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	4423      	add	r3, r4
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	e013      	b.n	8006c12 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006bea:	4b18      	ldr	r3, [pc, #96]	@ (8006c4c <BSP_LCD_DrawVLine+0xb8>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a18      	ldr	r2, [pc, #96]	@ (8006c50 <BSP_LCD_DrawVLine+0xbc>)
 8006bf0:	2134      	movs	r1, #52	@ 0x34
 8006bf2:	fb01 f303 	mul.w	r3, r1, r3
 8006bf6:	4413      	add	r3, r2
 8006bf8:	335c      	adds	r3, #92	@ 0x5c
 8006bfa:	681c      	ldr	r4, [r3, #0]
 8006bfc:	f7ff fd16 	bl	800662c <BSP_LCD_GetXSize>
 8006c00:	4602      	mov	r2, r0
 8006c02:	88bb      	ldrh	r3, [r7, #4]
 8006c04:	fb03 f202 	mul.w	r2, r3, r2
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4423      	add	r3, r4
 8006c10:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8006c12:	4b0e      	ldr	r3, [pc, #56]	@ (8006c4c <BSP_LCD_DrawVLine+0xb8>)
 8006c14:	681c      	ldr	r4, [r3, #0]
 8006c16:	68fd      	ldr	r5, [r7, #12]
 8006c18:	887e      	ldrh	r6, [r7, #2]
 8006c1a:	f7ff fd07 	bl	800662c <BSP_LCD_GetXSize>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	1e59      	subs	r1, r3, #1
 8006c22:	4b0a      	ldr	r3, [pc, #40]	@ (8006c4c <BSP_LCD_DrawVLine+0xb8>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	480b      	ldr	r0, [pc, #44]	@ (8006c54 <BSP_LCD_DrawVLine+0xc0>)
 8006c28:	4613      	mov	r3, r2
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4403      	add	r3, r0
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	9301      	str	r3, [sp, #4]
 8006c36:	9100      	str	r1, [sp, #0]
 8006c38:	4633      	mov	r3, r6
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 fdf0 	bl	8007824 <LL_FillBuffer>
}
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c4c:	20006410 	.word	0x20006410
 8006c50:	20006328 	.word	0x20006328
 8006c54:	20006414 	.word	0x20006414

08006c58 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8006c58:	b590      	push	{r4, r7, lr}
 8006c5a:	b08b      	sub	sp, #44	@ 0x2c
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	461a      	mov	r2, r3
 8006c66:	4623      	mov	r3, r4
 8006c68:	80fb      	strh	r3, [r7, #6]
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	80bb      	strh	r3, [r7, #4]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	807b      	strh	r3, [r7, #2]
 8006c72:	4613      	mov	r3, r2
 8006c74:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8006c76:	2300      	movs	r3, #0
 8006c78:	823b      	strh	r3, [r7, #16]
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	81fb      	strh	r3, [r7, #14]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006c82:	2300      	movs	r3, #0
 8006c84:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006c86:	2300      	movs	r3, #0
 8006c88:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8006c8e:	2300      	movs	r3, #0
 8006c90:	83fb      	strh	r3, [r7, #30]
 8006c92:	2300      	movs	r3, #0
 8006c94:	83bb      	strh	r3, [r7, #28]
 8006c96:	2300      	movs	r3, #0
 8006c98:	837b      	strh	r3, [r7, #26]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	833b      	strh	r3, [r7, #24]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	82fb      	strh	r3, [r7, #22]
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8006caa:	887a      	ldrh	r2, [r7, #2]
 8006cac:	88fb      	ldrh	r3, [r7, #6]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	bfb8      	it	lt
 8006cb4:	425b      	neglt	r3, r3
 8006cb6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8006cb8:	883a      	ldrh	r2, [r7, #0]
 8006cba:	88bb      	ldrh	r3, [r7, #4]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bfb8      	it	lt
 8006cc2:	425b      	neglt	r3, r3
 8006cc4:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8006cc6:	88fb      	ldrh	r3, [r7, #6]
 8006cc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = y1;                       /* Start y off at the first pixel */
 8006cca:	88bb      	ldrh	r3, [r7, #4]
 8006ccc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8006cce:	887a      	ldrh	r2, [r7, #2]
 8006cd0:	88fb      	ldrh	r3, [r7, #6]
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d304      	bcc.n	8006ce0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	843b      	strh	r3, [r7, #32]
 8006cde:	e005      	b.n	8006cec <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8006ce0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ce4:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 8006ce6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006cea:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8006cec:	883a      	ldrh	r2, [r7, #0]
 8006cee:	88bb      	ldrh	r3, [r7, #4]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d304      	bcc.n	8006cfe <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	83bb      	strh	r3, [r7, #28]
 8006cfc:	e005      	b.n	8006d0a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8006cfe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d02:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8006d04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d08:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8006d0a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8006d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	db11      	blt.n	8006d3a <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8006d16:	2300      	movs	r3, #0
 8006d18:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8006d1e:	8a3b      	ldrh	r3, [r7, #16]
 8006d20:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8006d22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	da00      	bge.n	8006d2c <BSP_LCD_DrawLine+0xd4>
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	105b      	asrs	r3, r3, #1
 8006d2e:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8006d30:	89fb      	ldrh	r3, [r7, #14]
 8006d32:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8006d34:	8a3b      	ldrh	r3, [r7, #16]
 8006d36:	82bb      	strh	r3, [r7, #20]
 8006d38:	e010      	b.n	8006d5c <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8006d3e:	2300      	movs	r3, #0
 8006d40:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8006d42:	89fb      	ldrh	r3, [r7, #14]
 8006d44:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8006d46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	da00      	bge.n	8006d50 <BSP_LCD_DrawLine+0xf8>
 8006d4e:	3301      	adds	r3, #1
 8006d50:	105b      	asrs	r3, r3, #1
 8006d52:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8006d54:	8a3b      	ldrh	r3, [r7, #16]
 8006d56:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8006d58:	89fb      	ldrh	r3, [r7, #14]
 8006d5a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	827b      	strh	r3, [r7, #18]
 8006d60:	e037      	b.n	8006dd2 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8006d62:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8006d64:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8006d66:	4b20      	ldr	r3, [pc, #128]	@ (8006de8 <BSP_LCD_DrawLine+0x190>)
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4c20      	ldr	r4, [pc, #128]	@ (8006dec <BSP_LCD_DrawLine+0x194>)
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	4413      	add	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4423      	add	r3, r4
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f000 f955 	bl	8007028 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8006d7e:	8b3a      	ldrh	r2, [r7, #24]
 8006d80:	8afb      	ldrh	r3, [r7, #22]
 8006d82:	4413      	add	r3, r2
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8006d88:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006d8c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	db0e      	blt.n	8006db2 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8006d94:	8b3a      	ldrh	r2, [r7, #24]
 8006d96:	8b7b      	ldrh	r3, [r7, #26]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8006d9e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006da0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006da2:	4413      	add	r3, r2
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8006da8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006daa:	8bfb      	ldrh	r3, [r7, #30]
 8006dac:	4413      	add	r3, r2
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8006db2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006db4:	8c3b      	ldrh	r3, [r7, #32]
 8006db6:	4413      	add	r3, r2
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8006dbc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006dbe:	8bbb      	ldrh	r3, [r7, #28]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8006dc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3301      	adds	r3, #1
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	827b      	strh	r3, [r7, #18]
 8006dd2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006dd6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	ddc1      	ble.n	8006d62 <BSP_LCD_DrawLine+0x10a>
  }
}
 8006dde:	bf00      	nop
 8006de0:	bf00      	nop
 8006de2:	372c      	adds	r7, #44	@ 0x2c
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd90      	pop	{r4, r7, pc}
 8006de8:	20006410 	.word	0x20006410
 8006dec:	20006414 	.word	0x20006414

08006df0 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8006df0:	b590      	push	{r4, r7, lr}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	4604      	mov	r4, r0
 8006df8:	4608      	mov	r0, r1
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4623      	mov	r3, r4
 8006e00:	80fb      	strh	r3, [r7, #6]
 8006e02:	4603      	mov	r3, r0
 8006e04:	80bb      	strh	r3, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	807b      	strh	r3, [r7, #2]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8006e0e:	887a      	ldrh	r2, [r7, #2]
 8006e10:	88b9      	ldrh	r1, [r7, #4]
 8006e12:	88fb      	ldrh	r3, [r7, #6]
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7ff fe5f 	bl	8006ad8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8006e1a:	88ba      	ldrh	r2, [r7, #4]
 8006e1c:	883b      	ldrh	r3, [r7, #0]
 8006e1e:	4413      	add	r3, r2
 8006e20:	b299      	uxth	r1, r3
 8006e22:	887a      	ldrh	r2, [r7, #2]
 8006e24:	88fb      	ldrh	r3, [r7, #6]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7ff fe56 	bl	8006ad8 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8006e2c:	883a      	ldrh	r2, [r7, #0]
 8006e2e:	88b9      	ldrh	r1, [r7, #4]
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff feae 	bl	8006b94 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8006e38:	88fa      	ldrh	r2, [r7, #6]
 8006e3a:	887b      	ldrh	r3, [r7, #2]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	883a      	ldrh	r2, [r7, #0]
 8006e42:	88b9      	ldrh	r1, [r7, #4]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff fea5 	bl	8006b94 <BSP_LCD_DrawVLine>
}
 8006e4a:	bf00      	nop
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd90      	pop	{r4, r7, pc}
	...

08006e54 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8006e54:	b590      	push	{r4, r7, lr}
 8006e56:	b087      	sub	sp, #28
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	80fb      	strh	r3, [r7, #6]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	80bb      	strh	r3, [r7, #4]
 8006e62:	4613      	mov	r3, r2
 8006e64:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8006e66:	887b      	ldrh	r3, [r7, #2]
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	f1c3 0303 	rsb	r3, r3, #3
 8006e6e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8006e74:	887b      	ldrh	r3, [r7, #2]
 8006e76:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8006e78:	e0c7      	b.n	800700a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	4413      	add	r3, r2
 8006e82:	b298      	uxth	r0, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	88ba      	ldrh	r2, [r7, #4]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	b299      	uxth	r1, r3
 8006e8e:	4b64      	ldr	r3, [pc, #400]	@ (8007020 <BSP_LCD_DrawCircle+0x1cc>)
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	4c64      	ldr	r4, [pc, #400]	@ (8007024 <BSP_LCD_DrawCircle+0x1d0>)
 8006e94:	4613      	mov	r3, r2
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	4423      	add	r3, r4
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	f000 f8c1 	bl	8007028 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	88fa      	ldrh	r2, [r7, #6]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	b298      	uxth	r0, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	88ba      	ldrh	r2, [r7, #4]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	b299      	uxth	r1, r3
 8006eba:	4b59      	ldr	r3, [pc, #356]	@ (8007020 <BSP_LCD_DrawCircle+0x1cc>)
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	4c59      	ldr	r4, [pc, #356]	@ (8007024 <BSP_LCD_DrawCircle+0x1d0>)
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4423      	add	r3, r4
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f000 f8ab 	bl	8007028 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	4413      	add	r3, r2
 8006eda:	b298      	uxth	r0, r3
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	88ba      	ldrh	r2, [r7, #4]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	b299      	uxth	r1, r3
 8006ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8007020 <BSP_LCD_DrawCircle+0x1cc>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4c4e      	ldr	r4, [pc, #312]	@ (8007024 <BSP_LCD_DrawCircle+0x1d0>)
 8006eec:	4613      	mov	r3, r2
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4423      	add	r3, r4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	f000 f895 	bl	8007028 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	88fa      	ldrh	r2, [r7, #6]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	b298      	uxth	r0, r3
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	88ba      	ldrh	r2, [r7, #4]
 8006f0e:	1ad3      	subs	r3, r2, r3
 8006f10:	b299      	uxth	r1, r3
 8006f12:	4b43      	ldr	r3, [pc, #268]	@ (8007020 <BSP_LCD_DrawCircle+0x1cc>)
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	4c43      	ldr	r4, [pc, #268]	@ (8007024 <BSP_LCD_DrawCircle+0x1d0>)
 8006f18:	4613      	mov	r3, r2
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4423      	add	r3, r4
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	f000 f87f 	bl	8007028 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	4413      	add	r3, r2
 8006f32:	b298      	uxth	r0, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	88bb      	ldrh	r3, [r7, #4]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	b299      	uxth	r1, r3
 8006f3e:	4b38      	ldr	r3, [pc, #224]	@ (8007020 <BSP_LCD_DrawCircle+0x1cc>)
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4c38      	ldr	r4, [pc, #224]	@ (8007024 <BSP_LCD_DrawCircle+0x1d0>)
 8006f44:	4613      	mov	r3, r2
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4423      	add	r3, r4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	f000 f869 	bl	8007028 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	88fa      	ldrh	r2, [r7, #6]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	b298      	uxth	r0, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	88bb      	ldrh	r3, [r7, #4]
 8006f66:	4413      	add	r3, r2
 8006f68:	b299      	uxth	r1, r3
 8006f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8007020 <BSP_LCD_DrawCircle+0x1cc>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4c2d      	ldr	r4, [pc, #180]	@ (8007024 <BSP_LCD_DrawCircle+0x1d0>)
 8006f70:	4613      	mov	r3, r2
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4423      	add	r3, r4
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	f000 f853 	bl	8007028 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	88fb      	ldrh	r3, [r7, #6]
 8006f88:	4413      	add	r3, r2
 8006f8a:	b298      	uxth	r0, r3
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	88bb      	ldrh	r3, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	b299      	uxth	r1, r3
 8006f96:	4b22      	ldr	r3, [pc, #136]	@ (8007020 <BSP_LCD_DrawCircle+0x1cc>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4c22      	ldr	r4, [pc, #136]	@ (8007024 <BSP_LCD_DrawCircle+0x1d0>)
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	4413      	add	r3, r2
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4423      	add	r3, r4
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	f000 f83d 	bl	8007028 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	88fa      	ldrh	r2, [r7, #6]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	b298      	uxth	r0, r3
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	88bb      	ldrh	r3, [r7, #4]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	b299      	uxth	r1, r3
 8006fc2:	4b17      	ldr	r3, [pc, #92]	@ (8007020 <BSP_LCD_DrawCircle+0x1cc>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	4c17      	ldr	r4, [pc, #92]	@ (8007024 <BSP_LCD_DrawCircle+0x1d0>)
 8006fc8:	4613      	mov	r3, r2
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	4413      	add	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4423      	add	r3, r4
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f000 f827 	bl	8007028 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	da06      	bge.n	8006fee <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	009a      	lsls	r2, r3, #2
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3306      	adds	r3, #6
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e00a      	b.n	8007004 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	009a      	lsls	r2, r3, #2
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	330a      	adds	r3, #10
 8006ffc:	617b      	str	r3, [r7, #20]
      current_y--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3b01      	subs	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	3301      	adds	r3, #1
 8007008:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	429a      	cmp	r2, r3
 8007010:	f67f af33 	bls.w	8006e7a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	bd90      	pop	{r4, r7, pc}
 800701e:	bf00      	nop
 8007020:	20006410 	.word	0x20006410
 8007024:	20006414 	.word	0x20006414

08007028 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8007028:	b5b0      	push	{r4, r5, r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	603a      	str	r2, [r7, #0]
 8007032:	80fb      	strh	r3, [r7, #6]
 8007034:	460b      	mov	r3, r1
 8007036:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8007038:	4b1d      	ldr	r3, [pc, #116]	@ (80070b0 <BSP_LCD_DrawPixel+0x88>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1d      	ldr	r2, [pc, #116]	@ (80070b4 <BSP_LCD_DrawPixel+0x8c>)
 800703e:	2134      	movs	r1, #52	@ 0x34
 8007040:	fb01 f303 	mul.w	r3, r1, r3
 8007044:	4413      	add	r3, r2
 8007046:	3348      	adds	r3, #72	@ 0x48
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d116      	bne.n	800707c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800704e:	4b18      	ldr	r3, [pc, #96]	@ (80070b0 <BSP_LCD_DrawPixel+0x88>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a18      	ldr	r2, [pc, #96]	@ (80070b4 <BSP_LCD_DrawPixel+0x8c>)
 8007054:	2134      	movs	r1, #52	@ 0x34
 8007056:	fb01 f303 	mul.w	r3, r1, r3
 800705a:	4413      	add	r3, r2
 800705c:	335c      	adds	r3, #92	@ 0x5c
 800705e:	681c      	ldr	r4, [r3, #0]
 8007060:	88bd      	ldrh	r5, [r7, #4]
 8007062:	f7ff fae3 	bl	800662c <BSP_LCD_GetXSize>
 8007066:	4603      	mov	r3, r0
 8007068:	fb03 f205 	mul.w	r2, r3, r5
 800706c:	88fb      	ldrh	r3, [r7, #6]
 800706e:	4413      	add	r3, r2
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	4423      	add	r3, r4
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	b292      	uxth	r2, r2
 8007078:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800707a:	e015      	b.n	80070a8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800707c:	4b0c      	ldr	r3, [pc, #48]	@ (80070b0 <BSP_LCD_DrawPixel+0x88>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0c      	ldr	r2, [pc, #48]	@ (80070b4 <BSP_LCD_DrawPixel+0x8c>)
 8007082:	2134      	movs	r1, #52	@ 0x34
 8007084:	fb01 f303 	mul.w	r3, r1, r3
 8007088:	4413      	add	r3, r2
 800708a:	335c      	adds	r3, #92	@ 0x5c
 800708c:	681c      	ldr	r4, [r3, #0]
 800708e:	88bd      	ldrh	r5, [r7, #4]
 8007090:	f7ff facc 	bl	800662c <BSP_LCD_GetXSize>
 8007094:	4603      	mov	r3, r0
 8007096:	fb03 f205 	mul.w	r2, r3, r5
 800709a:	88fb      	ldrh	r3, [r7, #6]
 800709c:	4413      	add	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4423      	add	r3, r4
 80070a2:	461a      	mov	r2, r3
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	6013      	str	r3, [r2, #0]
}
 80070a8:	bf00      	nop
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bdb0      	pop	{r4, r5, r7, pc}
 80070b0:	20006410 	.word	0x20006410
 80070b4:	20006328 	.word	0x20006328

080070b8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80070b8:	b590      	push	{r4, r7, lr}
 80070ba:	b08b      	sub	sp, #44	@ 0x2c
 80070bc:	af00      	add	r7, sp, #0
 80070be:	60f8      	str	r0, [r7, #12]
 80070c0:	60b9      	str	r1, [r7, #8]
 80070c2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80070c4:	2300      	movs	r3, #0
 80070c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070c8:	2300      	movs	r3, #0
 80070ca:	61bb      	str	r3, [r7, #24]
 80070cc:	2300      	movs	r3, #0
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	2300      	movs	r3, #0
 80070d2:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	330a      	adds	r3, #10
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	330b      	adds	r3, #11
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	441a      	add	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	330c      	adds	r3, #12
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	041b      	lsls	r3, r3, #16
 80070f2:	441a      	add	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	330d      	adds	r3, #13
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	061b      	lsls	r3, r3, #24
 80070fc:	4413      	add	r3, r2
 80070fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	3312      	adds	r3, #18
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	3313      	adds	r3, #19
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	441a      	add	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3314      	adds	r3, #20
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	041b      	lsls	r3, r3, #16
 800711a:	441a      	add	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3315      	adds	r3, #21
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	061b      	lsls	r3, r3, #24
 8007124:	4413      	add	r3, r2
 8007126:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	3316      	adds	r3, #22
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3317      	adds	r3, #23
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	021b      	lsls	r3, r3, #8
 8007138:	441a      	add	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	3318      	adds	r3, #24
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	441a      	add	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	3319      	adds	r3, #25
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	061b      	lsls	r3, r3, #24
 800714c:	4413      	add	r3, r2
 800714e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	331c      	adds	r3, #28
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	331d      	adds	r3, #29
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	021b      	lsls	r3, r3, #8
 8007160:	4413      	add	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8007164:	4b2b      	ldr	r3, [pc, #172]	@ (8007214 <BSP_LCD_DrawBitmap+0x15c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2b      	ldr	r2, [pc, #172]	@ (8007218 <BSP_LCD_DrawBitmap+0x160>)
 800716a:	2134      	movs	r1, #52	@ 0x34
 800716c:	fb01 f303 	mul.w	r3, r1, r3
 8007170:	4413      	add	r3, r2
 8007172:	335c      	adds	r3, #92	@ 0x5c
 8007174:	681c      	ldr	r4, [r3, #0]
 8007176:	f7ff fa59 	bl	800662c <BSP_LCD_GetXSize>
 800717a:	4602      	mov	r2, r0
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	fb03 f202 	mul.w	r2, r3, r2
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4423      	add	r3, r4
 800718a:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	3b20      	subs	r3, #32
 8007190:	2b07      	cmp	r3, #7
 8007192:	d802      	bhi.n	800719a <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8007194:	2300      	movs	r3, #0
 8007196:	61fb      	str	r3, [r7, #28]
 8007198:	e008      	b.n	80071ac <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	3b10      	subs	r3, #16
 800719e:	2b07      	cmp	r3, #7
 80071a0:	d802      	bhi.n	80071a8 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80071a2:	2302      	movs	r3, #2
 80071a4:	61fb      	str	r3, [r7, #28]
 80071a6:	e001      	b.n	80071ac <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80071a8:	2301      	movs	r3, #1
 80071aa:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	69ba      	ldr	r2, [r7, #24]
 80071b2:	fb02 f303 	mul.w	r3, r2, r3
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	08d2      	lsrs	r2, r2, #3
 80071ba:	fb03 f202 	mul.w	r2, r3, r2
 80071be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c0:	4413      	add	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	4413      	add	r3, r2
 80071c6:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80071c8:	2300      	movs	r3, #0
 80071ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80071cc:	e018      	b.n	8007200 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80071ce:	6a39      	ldr	r1, [r7, #32]
 80071d0:	69fb      	ldr	r3, [r7, #28]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 fb71 	bl	80078bc <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80071da:	f7ff fa27 	bl	800662c <BSP_LCD_GetXSize>
 80071de:	4603      	mov	r3, r0
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	6a3a      	ldr	r2, [r7, #32]
 80071e4:	4413      	add	r3, r2
 80071e6:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	08db      	lsrs	r3, r3, #3
 80071ec:	69ba      	ldr	r2, [r7, #24]
 80071ee:	fb02 f303 	mul.w	r3, r2, r3
 80071f2:	425b      	negs	r3, r3
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	4413      	add	r3, r2
 80071f8:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	3301      	adds	r3, #1
 80071fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	429a      	cmp	r2, r3
 8007206:	d3e2      	bcc.n	80071ce <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	372c      	adds	r7, #44	@ 0x2c
 800720e:	46bd      	mov	sp, r7
 8007210:	bd90      	pop	{r4, r7, pc}
 8007212:	bf00      	nop
 8007214:	20006410 	.word	0x20006410
 8007218:	20006328 	.word	0x20006328

0800721c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800721c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007220:	b086      	sub	sp, #24
 8007222:	af02      	add	r7, sp, #8
 8007224:	4604      	mov	r4, r0
 8007226:	4608      	mov	r0, r1
 8007228:	4611      	mov	r1, r2
 800722a:	461a      	mov	r2, r3
 800722c:	4623      	mov	r3, r4
 800722e:	80fb      	strh	r3, [r7, #6]
 8007230:	4603      	mov	r3, r0
 8007232:	80bb      	strh	r3, [r7, #4]
 8007234:	460b      	mov	r3, r1
 8007236:	807b      	strh	r3, [r7, #2]
 8007238:	4613      	mov	r3, r2
 800723a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8007240:	4b30      	ldr	r3, [pc, #192]	@ (8007304 <BSP_LCD_FillRect+0xe8>)
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	4930      	ldr	r1, [pc, #192]	@ (8007308 <BSP_LCD_FillRect+0xec>)
 8007246:	4613      	mov	r3, r2
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	440b      	add	r3, r1
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4618      	mov	r0, r3
 8007254:	f7ff fac0 	bl	80067d8 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8007258:	4b2a      	ldr	r3, [pc, #168]	@ (8007304 <BSP_LCD_FillRect+0xe8>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a2b      	ldr	r2, [pc, #172]	@ (800730c <BSP_LCD_FillRect+0xf0>)
 800725e:	2134      	movs	r1, #52	@ 0x34
 8007260:	fb01 f303 	mul.w	r3, r1, r3
 8007264:	4413      	add	r3, r2
 8007266:	3348      	adds	r3, #72	@ 0x48
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b02      	cmp	r3, #2
 800726c:	d114      	bne.n	8007298 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800726e:	4b25      	ldr	r3, [pc, #148]	@ (8007304 <BSP_LCD_FillRect+0xe8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a26      	ldr	r2, [pc, #152]	@ (800730c <BSP_LCD_FillRect+0xf0>)
 8007274:	2134      	movs	r1, #52	@ 0x34
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	4413      	add	r3, r2
 800727c:	335c      	adds	r3, #92	@ 0x5c
 800727e:	681c      	ldr	r4, [r3, #0]
 8007280:	f7ff f9d4 	bl	800662c <BSP_LCD_GetXSize>
 8007284:	4602      	mov	r2, r0
 8007286:	88bb      	ldrh	r3, [r7, #4]
 8007288:	fb03 f202 	mul.w	r2, r3, r2
 800728c:	88fb      	ldrh	r3, [r7, #6]
 800728e:	4413      	add	r3, r2
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	4423      	add	r3, r4
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	e013      	b.n	80072c0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8007298:	4b1a      	ldr	r3, [pc, #104]	@ (8007304 <BSP_LCD_FillRect+0xe8>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1b      	ldr	r2, [pc, #108]	@ (800730c <BSP_LCD_FillRect+0xf0>)
 800729e:	2134      	movs	r1, #52	@ 0x34
 80072a0:	fb01 f303 	mul.w	r3, r1, r3
 80072a4:	4413      	add	r3, r2
 80072a6:	335c      	adds	r3, #92	@ 0x5c
 80072a8:	681c      	ldr	r4, [r3, #0]
 80072aa:	f7ff f9bf 	bl	800662c <BSP_LCD_GetXSize>
 80072ae:	4602      	mov	r2, r0
 80072b0:	88bb      	ldrh	r3, [r7, #4]
 80072b2:	fb03 f202 	mul.w	r2, r3, r2
 80072b6:	88fb      	ldrh	r3, [r7, #6]
 80072b8:	4413      	add	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4423      	add	r3, r4
 80072be:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80072c0:	4b10      	ldr	r3, [pc, #64]	@ (8007304 <BSP_LCD_FillRect+0xe8>)
 80072c2:	681c      	ldr	r4, [r3, #0]
 80072c4:	68fd      	ldr	r5, [r7, #12]
 80072c6:	887e      	ldrh	r6, [r7, #2]
 80072c8:	f8b7 8000 	ldrh.w	r8, [r7]
 80072cc:	f7ff f9ae 	bl	800662c <BSP_LCD_GetXSize>
 80072d0:	4602      	mov	r2, r0
 80072d2:	887b      	ldrh	r3, [r7, #2]
 80072d4:	1ad1      	subs	r1, r2, r3
 80072d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007304 <BSP_LCD_FillRect+0xe8>)
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	480b      	ldr	r0, [pc, #44]	@ (8007308 <BSP_LCD_FillRect+0xec>)
 80072dc:	4613      	mov	r3, r2
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	4403      	add	r3, r0
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	9100      	str	r1, [sp, #0]
 80072ec:	4643      	mov	r3, r8
 80072ee:	4632      	mov	r2, r6
 80072f0:	4629      	mov	r1, r5
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 fa96 	bl	8007824 <LL_FillBuffer>
}
 80072f8:	bf00      	nop
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007302:	bf00      	nop
 8007304:	20006410 	.word	0x20006410
 8007308:	20006414 	.word	0x20006414
 800730c:	20006328 	.word	0x20006328

08007310 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	80fb      	strh	r3, [r7, #6]
 800731a:	460b      	mov	r3, r1
 800731c:	80bb      	strh	r3, [r7, #4]
 800731e:	4613      	mov	r3, r2
 8007320:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8007322:	887b      	ldrh	r3, [r7, #2]
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	f1c3 0303 	rsb	r3, r3, #3
 800732a:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 800732c:	2300      	movs	r3, #0
 800732e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8007330:	887b      	ldrh	r3, [r7, #2]
 8007332:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8007334:	4b44      	ldr	r3, [pc, #272]	@ (8007448 <BSP_LCD_FillCircle+0x138>)
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	4944      	ldr	r1, [pc, #272]	@ (800744c <BSP_LCD_FillCircle+0x13c>)
 800733a:	4613      	mov	r3, r2
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	440b      	add	r3, r1
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f7ff fa46 	bl	80067d8 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 800734c:	e061      	b.n	8007412 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d021      	beq.n	8007398 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	b29b      	uxth	r3, r3
 8007358:	88fa      	ldrh	r2, [r7, #6]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	b298      	uxth	r0, r3
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	b29a      	uxth	r2, r3
 8007362:	88bb      	ldrh	r3, [r7, #4]
 8007364:	4413      	add	r3, r2
 8007366:	b299      	uxth	r1, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	b29b      	uxth	r3, r3
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	b29b      	uxth	r3, r3
 8007370:	461a      	mov	r2, r3
 8007372:	f7ff fbb1 	bl	8006ad8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	b29b      	uxth	r3, r3
 800737a:	88fa      	ldrh	r2, [r7, #6]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	b298      	uxth	r0, r3
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	b29b      	uxth	r3, r3
 8007384:	88ba      	ldrh	r2, [r7, #4]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	b299      	uxth	r1, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	b29b      	uxth	r3, r3
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	b29b      	uxth	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	f7ff fba0 	bl	8006ad8 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d021      	beq.n	80073e2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	88fa      	ldrh	r2, [r7, #6]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	b298      	uxth	r0, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	88ba      	ldrh	r2, [r7, #4]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	b299      	uxth	r1, r3
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	005b      	lsls	r3, r3, #1
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	461a      	mov	r2, r3
 80073bc:	f7ff fb8c 	bl	8006ad8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	88fa      	ldrh	r2, [r7, #6]
 80073c6:	1ad3      	subs	r3, r2, r3
 80073c8:	b298      	uxth	r0, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	88bb      	ldrh	r3, [r7, #4]
 80073d0:	4413      	add	r3, r2
 80073d2:	b299      	uxth	r1, r3
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	b29b      	uxth	r3, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	f7ff fb7b 	bl	8006ad8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	da06      	bge.n	80073f6 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	009a      	lsls	r2, r3, #2
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	4413      	add	r3, r2
 80073f0:	3306      	adds	r3, #6
 80073f2:	617b      	str	r3, [r7, #20]
 80073f4:	e00a      	b.n	800740c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	009a      	lsls	r2, r3, #2
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	4413      	add	r3, r2
 8007402:	330a      	adds	r3, #10
 8007404:	617b      	str	r3, [r7, #20]
      current_y--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3b01      	subs	r3, #1
 800740a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	3301      	adds	r3, #1
 8007410:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	429a      	cmp	r2, r3
 8007418:	d999      	bls.n	800734e <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800741a:	4b0b      	ldr	r3, [pc, #44]	@ (8007448 <BSP_LCD_FillCircle+0x138>)
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	490b      	ldr	r1, [pc, #44]	@ (800744c <BSP_LCD_FillCircle+0x13c>)
 8007420:	4613      	mov	r3, r2
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	4413      	add	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	440b      	add	r3, r1
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff f9d3 	bl	80067d8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8007432:	887a      	ldrh	r2, [r7, #2]
 8007434:	88b9      	ldrh	r1, [r7, #4]
 8007436:	88fb      	ldrh	r3, [r7, #6]
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff fd0b 	bl	8006e54 <BSP_LCD_DrawCircle>
}
 800743e:	bf00      	nop
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20006410 	.word	0x20006410
 800744c:	20006414 	.word	0x20006414

08007450 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8007454:	4b0a      	ldr	r3, [pc, #40]	@ (8007480 <BSP_LCD_DisplayOn+0x30>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699a      	ldr	r2, [r3, #24]
 800745a:	4b09      	ldr	r3, [pc, #36]	@ (8007480 <BSP_LCD_DisplayOn+0x30>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8007464:	2201      	movs	r2, #1
 8007466:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800746a:	4806      	ldr	r0, [pc, #24]	@ (8007484 <BSP_LCD_DisplayOn+0x34>)
 800746c:	f002 fdc8 	bl	800a000 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8007470:	2201      	movs	r2, #1
 8007472:	2108      	movs	r1, #8
 8007474:	4804      	ldr	r0, [pc, #16]	@ (8007488 <BSP_LCD_DisplayOn+0x38>)
 8007476:	f002 fdc3 	bl	800a000 <HAL_GPIO_WritePin>
}
 800747a:	bf00      	nop
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20006328 	.word	0x20006328
 8007484:	40022000 	.word	0x40022000
 8007488:	40022800 	.word	0x40022800

0800748c <BSP_LCD_DisplayOff>:
/**
  * @brief  Disables the display.
  * @retval None
  */
void BSP_LCD_DisplayOff(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* Display Off */
  __HAL_LTDC_DISABLE(&hLtdcHandler);
 8007490:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <BSP_LCD_DisplayOff+0x30>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	699a      	ldr	r2, [r3, #24]
 8007496:	4b09      	ldr	r3, [pc, #36]	@ (80074bc <BSP_LCD_DisplayOff+0x30>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 0201 	bic.w	r2, r2, #1
 800749e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_RESET);      /* De-assert LCD_DISP pin */
 80074a0:	2200      	movs	r2, #0
 80074a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80074a6:	4806      	ldr	r0, [pc, #24]	@ (80074c0 <BSP_LCD_DisplayOff+0x34>)
 80074a8:	f002 fdaa 	bl	800a000 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_RESET);/* De-assert LCD_BL_CTRL pin */
 80074ac:	2200      	movs	r2, #0
 80074ae:	2108      	movs	r1, #8
 80074b0:	4804      	ldr	r0, [pc, #16]	@ (80074c4 <BSP_LCD_DisplayOff+0x38>)
 80074b2:	f002 fda5 	bl	800a000 <HAL_GPIO_WritePin>
}
 80074b6:	bf00      	nop
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20006328 	.word	0x20006328
 80074c0:	40022000 	.word	0x40022000
 80074c4:	40022800 	.word	0x40022800

080074c8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b090      	sub	sp, #64	@ 0x40
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80074d2:	4b64      	ldr	r3, [pc, #400]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 80074d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d6:	4a63      	ldr	r2, [pc, #396]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 80074d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80074de:	4b61      	ldr	r3, [pc, #388]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 80074e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80074e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80074ea:	4b5e      	ldr	r3, [pc, #376]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 80074ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ee:	4a5d      	ldr	r2, [pc, #372]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 80074f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80074f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80074f6:	4b5b      	ldr	r3, [pc, #364]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 80074f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007502:	4b58      	ldr	r3, [pc, #352]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007506:	4a57      	ldr	r2, [pc, #348]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007508:	f043 0310 	orr.w	r3, r3, #16
 800750c:	6313      	str	r3, [r2, #48]	@ 0x30
 800750e:	4b55      	ldr	r3, [pc, #340]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007512:	f003 0310 	and.w	r3, r3, #16
 8007516:	623b      	str	r3, [r7, #32]
 8007518:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800751a:	4b52      	ldr	r3, [pc, #328]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 800751c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751e:	4a51      	ldr	r2, [pc, #324]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007524:	6313      	str	r3, [r2, #48]	@ 0x30
 8007526:	4b4f      	ldr	r3, [pc, #316]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800752e:	61fb      	str	r3, [r7, #28]
 8007530:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8007532:	4b4c      	ldr	r3, [pc, #304]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007536:	4a4b      	ldr	r2, [pc, #300]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800753c:	6313      	str	r3, [r2, #48]	@ 0x30
 800753e:	4b49      	ldr	r3, [pc, #292]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007546:	61bb      	str	r3, [r7, #24]
 8007548:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800754a:	4b46      	ldr	r3, [pc, #280]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 800754c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800754e:	4a45      	ldr	r2, [pc, #276]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007550:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007554:	6313      	str	r3, [r2, #48]	@ 0x30
 8007556:	4b43      	ldr	r3, [pc, #268]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800755e:	617b      	str	r3, [r7, #20]
 8007560:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8007562:	4b40      	ldr	r3, [pc, #256]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	4a3f      	ldr	r2, [pc, #252]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007568:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800756c:	6313      	str	r3, [r2, #48]	@ 0x30
 800756e:	4b3d      	ldr	r3, [pc, #244]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007576:	613b      	str	r3, [r7, #16]
 8007578:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800757a:	4b3a      	ldr	r3, [pc, #232]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 800757c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757e:	4a39      	ldr	r2, [pc, #228]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007584:	6313      	str	r3, [r2, #48]	@ 0x30
 8007586:	4b37      	ldr	r3, [pc, #220]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8007592:	4b34      	ldr	r3, [pc, #208]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007596:	4a33      	ldr	r2, [pc, #204]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 8007598:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800759c:	6313      	str	r3, [r2, #48]	@ 0x30
 800759e:	4b31      	ldr	r3, [pc, #196]	@ (8007664 <BSP_LCD_MspInit+0x19c>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075a6:	60bb      	str	r3, [r7, #8]
 80075a8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80075aa:	2310      	movs	r3, #16
 80075ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80075ae:	2302      	movs	r3, #2
 80075b0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80075b6:	2302      	movs	r3, #2
 80075b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80075ba:	230e      	movs	r3, #14
 80075bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80075be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80075c2:	4619      	mov	r1, r3
 80075c4:	4828      	ldr	r0, [pc, #160]	@ (8007668 <BSP_LCD_MspInit+0x1a0>)
 80075c6:	f002 fa4b 	bl	8009a60 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80075ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80075ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80075d0:	2302      	movs	r3, #2
 80075d2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80075d4:	2309      	movs	r3, #9
 80075d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80075d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80075dc:	4619      	mov	r1, r3
 80075de:	4823      	ldr	r0, [pc, #140]	@ (800766c <BSP_LCD_MspInit+0x1a4>)
 80075e0:	f002 fa3e 	bl	8009a60 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80075e4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 80075e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80075ea:	2302      	movs	r3, #2
 80075ec:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80075ee:	230e      	movs	r3, #14
 80075f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80075f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80075f6:	4619      	mov	r1, r3
 80075f8:	481d      	ldr	r0, [pc, #116]	@ (8007670 <BSP_LCD_MspInit+0x1a8>)
 80075fa:	f002 fa31 	bl	8009a60 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80075fe:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8007602:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007604:	2302      	movs	r3, #2
 8007606:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007608:	230e      	movs	r3, #14
 800760a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800760c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007610:	4619      	mov	r1, r3
 8007612:	4818      	ldr	r0, [pc, #96]	@ (8007674 <BSP_LCD_MspInit+0x1ac>)
 8007614:	f002 fa24 	bl	8009a60 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8007618:	23f7      	movs	r3, #247	@ 0xf7
 800761a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800761c:	2302      	movs	r3, #2
 800761e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007620:	230e      	movs	r3, #14
 8007622:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8007624:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007628:	4619      	mov	r1, r3
 800762a:	4813      	ldr	r0, [pc, #76]	@ (8007678 <BSP_LCD_MspInit+0x1b0>)
 800762c:	f002 fa18 	bl	8009a60 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8007630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8007636:	2301      	movs	r3, #1
 8007638:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800763a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800763e:	4619      	mov	r1, r3
 8007640:	480b      	ldr	r0, [pc, #44]	@ (8007670 <BSP_LCD_MspInit+0x1a8>)
 8007642:	f002 fa0d 	bl	8009a60 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8007646:	2308      	movs	r3, #8
 8007648:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800764a:	2301      	movs	r3, #1
 800764c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800764e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007652:	4619      	mov	r1, r3
 8007654:	4808      	ldr	r0, [pc, #32]	@ (8007678 <BSP_LCD_MspInit+0x1b0>)
 8007656:	f002 fa03 	bl	8009a60 <HAL_GPIO_Init>
}
 800765a:	bf00      	nop
 800765c:	3740      	adds	r7, #64	@ 0x40
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	40023800 	.word	0x40023800
 8007668:	40021000 	.word	0x40021000
 800766c:	40021800 	.word	0x40021800
 8007670:	40022000 	.word	0x40022000
 8007674:	40022400 	.word	0x40022400
 8007678:	40022800 	.word	0x40022800

0800767c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b082      	sub	sp, #8
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8007686:	4b0a      	ldr	r3, [pc, #40]	@ (80076b0 <BSP_LCD_ClockConfig+0x34>)
 8007688:	2208      	movs	r2, #8
 800768a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800768c:	4b08      	ldr	r3, [pc, #32]	@ (80076b0 <BSP_LCD_ClockConfig+0x34>)
 800768e:	22c0      	movs	r2, #192	@ 0xc0
 8007690:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8007692:	4b07      	ldr	r3, [pc, #28]	@ (80076b0 <BSP_LCD_ClockConfig+0x34>)
 8007694:	2205      	movs	r2, #5
 8007696:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8007698:	4b05      	ldr	r3, [pc, #20]	@ (80076b0 <BSP_LCD_ClockConfig+0x34>)
 800769a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800769e:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80076a0:	4803      	ldr	r0, [pc, #12]	@ (80076b0 <BSP_LCD_ClockConfig+0x34>)
 80076a2:	f004 fb1b 	bl	800bcdc <HAL_RCCEx_PeriphCLKConfig>
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	2000642c 	.word	0x2000642c

080076b4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	603a      	str	r2, [r7, #0]
 80076be:	80fb      	strh	r3, [r7, #6]
 80076c0:	460b      	mov	r3, r1
 80076c2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	61fb      	str	r3, [r7, #28]
 80076c8:	2300      	movs	r3, #0
 80076ca:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80076cc:	4b53      	ldr	r3, [pc, #332]	@ (800781c <DrawChar+0x168>)
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	4953      	ldr	r1, [pc, #332]	@ (8007820 <DrawChar+0x16c>)
 80076d2:	4613      	mov	r3, r2
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	3308      	adds	r3, #8
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	88db      	ldrh	r3, [r3, #6]
 80076e2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80076e4:	4b4d      	ldr	r3, [pc, #308]	@ (800781c <DrawChar+0x168>)
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	494d      	ldr	r1, [pc, #308]	@ (8007820 <DrawChar+0x16c>)
 80076ea:	4613      	mov	r3, r2
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	4413      	add	r3, r2
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	440b      	add	r3, r1
 80076f4:	3308      	adds	r3, #8
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	889b      	ldrh	r3, [r3, #4]
 80076fa:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80076fc:	8a3b      	ldrh	r3, [r7, #16]
 80076fe:	3307      	adds	r3, #7
 8007700:	2b00      	cmp	r3, #0
 8007702:	da00      	bge.n	8007706 <DrawChar+0x52>
 8007704:	3307      	adds	r3, #7
 8007706:	10db      	asrs	r3, r3, #3
 8007708:	b2db      	uxtb	r3, r3
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	b2da      	uxtb	r2, r3
 800770e:	8a3b      	ldrh	r3, [r7, #16]
 8007710:	b2db      	uxtb	r3, r3
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8007716:	2300      	movs	r3, #0
 8007718:	61fb      	str	r3, [r7, #28]
 800771a:	e076      	b.n	800780a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800771c:	8a3b      	ldrh	r3, [r7, #16]
 800771e:	3307      	adds	r3, #7
 8007720:	2b00      	cmp	r3, #0
 8007722:	da00      	bge.n	8007726 <DrawChar+0x72>
 8007724:	3307      	adds	r3, #7
 8007726:	10db      	asrs	r3, r3, #3
 8007728:	461a      	mov	r2, r3
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	fb02 f303 	mul.w	r3, r2, r3
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	4413      	add	r3, r2
 8007734:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8007736:	8a3b      	ldrh	r3, [r7, #16]
 8007738:	3307      	adds	r3, #7
 800773a:	2b00      	cmp	r3, #0
 800773c:	da00      	bge.n	8007740 <DrawChar+0x8c>
 800773e:	3307      	adds	r3, #7
 8007740:	10db      	asrs	r3, r3, #3
 8007742:	2b01      	cmp	r3, #1
 8007744:	d002      	beq.n	800774c <DrawChar+0x98>
 8007746:	2b02      	cmp	r3, #2
 8007748:	d004      	beq.n	8007754 <DrawChar+0xa0>
 800774a:	e00c      	b.n	8007766 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	617b      	str	r3, [r7, #20]
      break;
 8007752:	e016      	b.n	8007782 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	021b      	lsls	r3, r3, #8
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	3201      	adds	r2, #1
 800775e:	7812      	ldrb	r2, [r2, #0]
 8007760:	4313      	orrs	r3, r2
 8007762:	617b      	str	r3, [r7, #20]
      break;
 8007764:	e00d      	b.n	8007782 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	041a      	lsls	r2, r3, #16
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	3301      	adds	r3, #1
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	021b      	lsls	r3, r3, #8
 8007774:	4313      	orrs	r3, r2
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	3202      	adds	r2, #2
 800777a:	7812      	ldrb	r2, [r2, #0]
 800777c:	4313      	orrs	r3, r2
 800777e:	617b      	str	r3, [r7, #20]
      break;
 8007780:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8007782:	2300      	movs	r3, #0
 8007784:	61bb      	str	r3, [r7, #24]
 8007786:	e036      	b.n	80077f6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8007788:	8a3a      	ldrh	r2, [r7, #16]
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	1ad2      	subs	r2, r2, r3
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	4413      	add	r3, r2
 8007792:	3b01      	subs	r3, #1
 8007794:	2201      	movs	r2, #1
 8007796:	fa02 f303 	lsl.w	r3, r2, r3
 800779a:	461a      	mov	r2, r3
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	4013      	ands	r3, r2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d012      	beq.n	80077ca <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	88fb      	ldrh	r3, [r7, #6]
 80077aa:	4413      	add	r3, r2
 80077ac:	b298      	uxth	r0, r3
 80077ae:	4b1b      	ldr	r3, [pc, #108]	@ (800781c <DrawChar+0x168>)
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	491b      	ldr	r1, [pc, #108]	@ (8007820 <DrawChar+0x16c>)
 80077b4:	4613      	mov	r3, r2
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	440b      	add	r3, r1
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	88bb      	ldrh	r3, [r7, #4]
 80077c2:	4619      	mov	r1, r3
 80077c4:	f7ff fc30 	bl	8007028 <BSP_LCD_DrawPixel>
 80077c8:	e012      	b.n	80077f0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	88fb      	ldrh	r3, [r7, #6]
 80077d0:	4413      	add	r3, r2
 80077d2:	b298      	uxth	r0, r3
 80077d4:	4b11      	ldr	r3, [pc, #68]	@ (800781c <DrawChar+0x168>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	4911      	ldr	r1, [pc, #68]	@ (8007820 <DrawChar+0x16c>)
 80077da:	4613      	mov	r3, r2
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	4413      	add	r3, r2
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	440b      	add	r3, r1
 80077e4:	3304      	adds	r3, #4
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	88bb      	ldrh	r3, [r7, #4]
 80077ea:	4619      	mov	r1, r3
 80077ec:	f7ff fc1c 	bl	8007028 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	3301      	adds	r3, #1
 80077f4:	61bb      	str	r3, [r7, #24]
 80077f6:	8a3b      	ldrh	r3, [r7, #16]
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d3c4      	bcc.n	8007788 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80077fe:	88bb      	ldrh	r3, [r7, #4]
 8007800:	3301      	adds	r3, #1
 8007802:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	3301      	adds	r3, #1
 8007808:	61fb      	str	r3, [r7, #28]
 800780a:	8a7b      	ldrh	r3, [r7, #18]
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	429a      	cmp	r2, r3
 8007810:	d384      	bcc.n	800771c <DrawChar+0x68>
  }
}
 8007812:	bf00      	nop
 8007814:	bf00      	nop
 8007816:	3720      	adds	r7, #32
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20006410 	.word	0x20006410
 8007820:	20006414 	.word	0x20006414

08007824 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af02      	add	r7, sp, #8
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8007832:	4b1e      	ldr	r3, [pc, #120]	@ (80078ac <LL_FillBuffer+0x88>)
 8007834:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8007838:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800783a:	4b1d      	ldr	r3, [pc, #116]	@ (80078b0 <LL_FillBuffer+0x8c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a1d      	ldr	r2, [pc, #116]	@ (80078b4 <LL_FillBuffer+0x90>)
 8007840:	2134      	movs	r1, #52	@ 0x34
 8007842:	fb01 f303 	mul.w	r3, r1, r3
 8007846:	4413      	add	r3, r2
 8007848:	3348      	adds	r3, #72	@ 0x48
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d103      	bne.n	8007858 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8007850:	4b16      	ldr	r3, [pc, #88]	@ (80078ac <LL_FillBuffer+0x88>)
 8007852:	2202      	movs	r2, #2
 8007854:	609a      	str	r2, [r3, #8]
 8007856:	e002      	b.n	800785e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8007858:	4b14      	ldr	r3, [pc, #80]	@ (80078ac <LL_FillBuffer+0x88>)
 800785a:	2200      	movs	r2, #0
 800785c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800785e:	4a13      	ldr	r2, [pc, #76]	@ (80078ac <LL_FillBuffer+0x88>)
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8007864:	4b11      	ldr	r3, [pc, #68]	@ (80078ac <LL_FillBuffer+0x88>)
 8007866:	4a14      	ldr	r2, [pc, #80]	@ (80078b8 <LL_FillBuffer+0x94>)
 8007868:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800786a:	4810      	ldr	r0, [pc, #64]	@ (80078ac <LL_FillBuffer+0x88>)
 800786c:	f001 fe6c 	bl	8009548 <HAL_DMA2D_Init>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d115      	bne.n	80078a2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	480c      	ldr	r0, [pc, #48]	@ (80078ac <LL_FillBuffer+0x88>)
 800787a:	f001 ffc3 	bl	8009804 <HAL_DMA2D_ConfigLayer>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10e      	bne.n	80078a2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8007884:	68ba      	ldr	r2, [r7, #8]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	69f9      	ldr	r1, [r7, #28]
 800788e:	4807      	ldr	r0, [pc, #28]	@ (80078ac <LL_FillBuffer+0x88>)
 8007890:	f001 fea4 	bl	80095dc <HAL_DMA2D_Start>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d103      	bne.n	80078a2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800789a:	210a      	movs	r1, #10
 800789c:	4803      	ldr	r0, [pc, #12]	@ (80078ac <LL_FillBuffer+0x88>)
 800789e:	f001 fec8 	bl	8009632 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80078a2:	bf00      	nop
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	200063d0 	.word	0x200063d0
 80078b0:	20006410 	.word	0x20006410
 80078b4:	20006328 	.word	0x20006328
 80078b8:	4002b000 	.word	0x4002b000

080078bc <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80078ca:	4b1c      	ldr	r3, [pc, #112]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 80078cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80078d0:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80078d2:	4b1a      	ldr	r3, [pc, #104]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80078d8:	4b18      	ldr	r3, [pc, #96]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 80078da:	2200      	movs	r2, #0
 80078dc:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80078de:	4b17      	ldr	r3, [pc, #92]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80078e4:	4b15      	ldr	r3, [pc, #84]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 80078e6:	22ff      	movs	r2, #255	@ 0xff
 80078e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80078ea:	4a14      	ldr	r2, [pc, #80]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80078f0:	4b12      	ldr	r3, [pc, #72]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80078f6:	4b11      	ldr	r3, [pc, #68]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 80078f8:	4a11      	ldr	r2, [pc, #68]	@ (8007940 <LL_ConvertLineToARGB8888+0x84>)
 80078fa:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80078fc:	480f      	ldr	r0, [pc, #60]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 80078fe:	f001 fe23 	bl	8009548 <HAL_DMA2D_Init>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d115      	bne.n	8007934 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8007908:	2101      	movs	r1, #1
 800790a:	480c      	ldr	r0, [pc, #48]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 800790c:	f001 ff7a 	bl	8009804 <HAL_DMA2D_ConfigLayer>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10e      	bne.n	8007934 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8007916:	68f9      	ldr	r1, [r7, #12]
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	2301      	movs	r3, #1
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4806      	ldr	r0, [pc, #24]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 8007922:	f001 fe5b 	bl	80095dc <HAL_DMA2D_Start>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d103      	bne.n	8007934 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800792c:	210a      	movs	r1, #10
 800792e:	4803      	ldr	r0, [pc, #12]	@ (800793c <LL_ConvertLineToARGB8888+0x80>)
 8007930:	f001 fe7f 	bl	8009632 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8007934:	bf00      	nop
 8007936:	3710      	adds	r7, #16
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	200063d0 	.word	0x200063d0
 8007940:	4002b000 	.word	0x4002b000

08007944 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8007948:	4b29      	ldr	r3, [pc, #164]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 800794a:	4a2a      	ldr	r2, [pc, #168]	@ (80079f4 <BSP_SDRAM_Init+0xb0>)
 800794c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800794e:	4b2a      	ldr	r3, [pc, #168]	@ (80079f8 <BSP_SDRAM_Init+0xb4>)
 8007950:	2202      	movs	r2, #2
 8007952:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8007954:	4b28      	ldr	r3, [pc, #160]	@ (80079f8 <BSP_SDRAM_Init+0xb4>)
 8007956:	2207      	movs	r2, #7
 8007958:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800795a:	4b27      	ldr	r3, [pc, #156]	@ (80079f8 <BSP_SDRAM_Init+0xb4>)
 800795c:	2204      	movs	r2, #4
 800795e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8007960:	4b25      	ldr	r3, [pc, #148]	@ (80079f8 <BSP_SDRAM_Init+0xb4>)
 8007962:	2207      	movs	r2, #7
 8007964:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8007966:	4b24      	ldr	r3, [pc, #144]	@ (80079f8 <BSP_SDRAM_Init+0xb4>)
 8007968:	2202      	movs	r2, #2
 800796a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800796c:	4b22      	ldr	r3, [pc, #136]	@ (80079f8 <BSP_SDRAM_Init+0xb4>)
 800796e:	2202      	movs	r2, #2
 8007970:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8007972:	4b21      	ldr	r3, [pc, #132]	@ (80079f8 <BSP_SDRAM_Init+0xb4>)
 8007974:	2202      	movs	r2, #2
 8007976:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8007978:	4b1d      	ldr	r3, [pc, #116]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 800797a:	2200      	movs	r2, #0
 800797c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800797e:	4b1c      	ldr	r3, [pc, #112]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 8007980:	2200      	movs	r2, #0
 8007982:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8007984:	4b1a      	ldr	r3, [pc, #104]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 8007986:	2204      	movs	r2, #4
 8007988:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800798a:	4b19      	ldr	r3, [pc, #100]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 800798c:	2210      	movs	r2, #16
 800798e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007990:	4b17      	ldr	r3, [pc, #92]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 8007992:	2240      	movs	r2, #64	@ 0x40
 8007994:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8007996:	4b16      	ldr	r3, [pc, #88]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 8007998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800799c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800799e:	4b14      	ldr	r3, [pc, #80]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80079a4:	4b12      	ldr	r3, [pc, #72]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 80079a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80079aa:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80079ac:	4b10      	ldr	r3, [pc, #64]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 80079ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80079b2:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80079b4:	4b0e      	ldr	r3, [pc, #56]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80079ba:	2100      	movs	r1, #0
 80079bc:	480c      	ldr	r0, [pc, #48]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 80079be:	f000 f87f 	bl	8007ac0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80079c2:	490d      	ldr	r1, [pc, #52]	@ (80079f8 <BSP_SDRAM_Init+0xb4>)
 80079c4:	480a      	ldr	r0, [pc, #40]	@ (80079f0 <BSP_SDRAM_Init+0xac>)
 80079c6:	f006 fbc9 	bl	800e15c <HAL_SDRAM_Init>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80079d0:	4b0a      	ldr	r3, [pc, #40]	@ (80079fc <BSP_SDRAM_Init+0xb8>)
 80079d2:	2201      	movs	r2, #1
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	e002      	b.n	80079de <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80079d8:	4b08      	ldr	r3, [pc, #32]	@ (80079fc <BSP_SDRAM_Init+0xb8>)
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80079de:	f240 6003 	movw	r0, #1539	@ 0x603
 80079e2:	f000 f80d 	bl	8007a00 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80079e6:	4b05      	ldr	r3, [pc, #20]	@ (80079fc <BSP_SDRAM_Init+0xb8>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	bf00      	nop
 80079f0:	200064b0 	.word	0x200064b0
 80079f4:	a0000140 	.word	0xa0000140
 80079f8:	200064e4 	.word	0x200064e4
 80079fc:	20004f1c 	.word	0x20004f1c

08007a00 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8007a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a0e:	2201      	movs	r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007a12:	4b29      	ldr	r3, [pc, #164]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a14:	2210      	movs	r2, #16
 8007a16:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007a18:	4b27      	ldr	r3, [pc, #156]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007a1e:	4b26      	ldr	r3, [pc, #152]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007a24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a28:	4923      	ldr	r1, [pc, #140]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a2a:	4824      	ldr	r0, [pc, #144]	@ (8007abc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007a2c:	f006 fbca 	bl	800e1c4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8007a30:	2001      	movs	r0, #1
 8007a32:	f000 fc21 	bl	8008278 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8007a36:	4b20      	ldr	r3, [pc, #128]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a38:	2202      	movs	r2, #2
 8007a3a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a3e:	2210      	movs	r2, #16
 8007a40:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007a42:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a44:	2201      	movs	r2, #1
 8007a46:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007a48:	4b1b      	ldr	r3, [pc, #108]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8007a4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a52:	4919      	ldr	r1, [pc, #100]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a54:	4819      	ldr	r0, [pc, #100]	@ (8007abc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007a56:	f006 fbb5 	bl	800e1c4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8007a5a:	4b17      	ldr	r3, [pc, #92]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007a60:	4b15      	ldr	r3, [pc, #84]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a62:	2210      	movs	r2, #16
 8007a64:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8007a66:	4b14      	ldr	r3, [pc, #80]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a68:	2208      	movs	r2, #8
 8007a6a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007a6c:	4b12      	ldr	r3, [pc, #72]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a76:	4910      	ldr	r1, [pc, #64]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a78:	4810      	ldr	r0, [pc, #64]	@ (8007abc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007a7a:	f006 fba3 	bl	800e1c4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8007a7e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8007a82:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8007a84:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a86:	2204      	movs	r2, #4
 8007a88:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a8c:	2210      	movs	r2, #16
 8007a8e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007a90:	4b09      	ldr	r3, [pc, #36]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a92:	2201      	movs	r2, #1
 8007a94:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	4a07      	ldr	r2, [pc, #28]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007a9a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007a9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007aa0:	4905      	ldr	r1, [pc, #20]	@ (8007ab8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007aa2:	4806      	ldr	r0, [pc, #24]	@ (8007abc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007aa4:	f006 fb8e 	bl	800e1c4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	4804      	ldr	r0, [pc, #16]	@ (8007abc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007aac:	f006 fbbf 	bl	800e22e <HAL_SDRAM_ProgramRefreshRate>
}
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	20006500 	.word	0x20006500
 8007abc:	200064b0 	.word	0x200064b0

08007ac0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b090      	sub	sp, #64	@ 0x40
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007aca:	4b70      	ldr	r3, [pc, #448]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ace:	4a6f      	ldr	r2, [pc, #444]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007ad0:	f043 0301 	orr.w	r3, r3, #1
 8007ad4:	6393      	str	r3, [r2, #56]	@ 0x38
 8007ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8007ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae6:	4a69      	ldr	r2, [pc, #420]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007ae8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8007aee:	4b67      	ldr	r3, [pc, #412]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007afa:	4b64      	ldr	r3, [pc, #400]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afe:	4a63      	ldr	r2, [pc, #396]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b00:	f043 0304 	orr.w	r3, r3, #4
 8007b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b06:	4b61      	ldr	r3, [pc, #388]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	623b      	str	r3, [r7, #32]
 8007b10:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b12:	4b5e      	ldr	r3, [pc, #376]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b16:	4a5d      	ldr	r2, [pc, #372]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b18:	f043 0308 	orr.w	r3, r3, #8
 8007b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b1e:	4b5b      	ldr	r3, [pc, #364]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	61fb      	str	r3, [r7, #28]
 8007b28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007b2a:	4b58      	ldr	r3, [pc, #352]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2e:	4a57      	ldr	r2, [pc, #348]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b30:	f043 0310 	orr.w	r3, r3, #16
 8007b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b36:	4b55      	ldr	r3, [pc, #340]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3a:	f003 0310 	and.w	r3, r3, #16
 8007b3e:	61bb      	str	r3, [r7, #24]
 8007b40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007b42:	4b52      	ldr	r3, [pc, #328]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b46:	4a51      	ldr	r2, [pc, #324]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b48:	f043 0320 	orr.w	r3, r3, #32
 8007b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b4e:	4b4f      	ldr	r3, [pc, #316]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b5e:	4a4b      	ldr	r2, [pc, #300]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b66:	4b49      	ldr	r3, [pc, #292]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b6e:	613b      	str	r3, [r7, #16]
 8007b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007b72:	4b46      	ldr	r3, [pc, #280]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b76:	4a45      	ldr	r2, [pc, #276]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8007b7e:	4b43      	ldr	r3, [pc, #268]	@ (8007c8c <BSP_SDRAM_MspInit+0x1cc>)
 8007b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007b92:	2302      	movs	r3, #2
 8007b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007b96:	230c      	movs	r3, #12
 8007b98:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007b9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	483a      	ldr	r0, [pc, #232]	@ (8007c90 <BSP_SDRAM_MspInit+0x1d0>)
 8007ba6:	f001 ff5b 	bl	8009a60 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8007baa:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8007bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007bb0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	4837      	ldr	r0, [pc, #220]	@ (8007c94 <BSP_SDRAM_MspInit+0x1d4>)
 8007bb8:	f001 ff52 	bl	8009a60 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007bbc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8007bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007bc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	4833      	ldr	r0, [pc, #204]	@ (8007c98 <BSP_SDRAM_MspInit+0x1d8>)
 8007bca:	f001 ff49 	bl	8009a60 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007bce:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8007bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007bd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4830      	ldr	r0, [pc, #192]	@ (8007c9c <BSP_SDRAM_MspInit+0x1dc>)
 8007bdc:	f001 ff40 	bl	8009a60 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007be0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8007be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007be6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007bea:	4619      	mov	r1, r3
 8007bec:	482c      	ldr	r0, [pc, #176]	@ (8007ca0 <BSP_SDRAM_MspInit+0x1e0>)
 8007bee:	f001 ff37 	bl	8009a60 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8007bf2:	2328      	movs	r3, #40	@ 0x28
 8007bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8007bf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4829      	ldr	r0, [pc, #164]	@ (8007ca4 <BSP_SDRAM_MspInit+0x1e4>)
 8007bfe:	f001 ff2f 	bl	8009a60 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8007c02:	4b29      	ldr	r3, [pc, #164]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007c08:	4b27      	ldr	r3, [pc, #156]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c0a:	2280      	movs	r2, #128	@ 0x80
 8007c0c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007c0e:	4b26      	ldr	r3, [pc, #152]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c14:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8007c16:	4b24      	ldr	r3, [pc, #144]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c1c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007c1e:	4b22      	ldr	r3, [pc, #136]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007c24:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007c26:	4b20      	ldr	r3, [pc, #128]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c28:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007c2c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8007c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8007c34:	4b1c      	ldr	r3, [pc, #112]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8007c3a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8007c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8007c42:	4b19      	ldr	r3, [pc, #100]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c44:	2203      	movs	r2, #3
 8007c46:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8007c48:	4b17      	ldr	r3, [pc, #92]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8007c4e:	4b16      	ldr	r3, [pc, #88]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8007c54:	4b14      	ldr	r3, [pc, #80]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c56:	4a15      	ldr	r2, [pc, #84]	@ (8007cac <BSP_SDRAM_MspInit+0x1ec>)
 8007c58:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a12      	ldr	r2, [pc, #72]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c60:	4a11      	ldr	r2, [pc, #68]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8007c66:	4810      	ldr	r0, [pc, #64]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c68:	f001 f918 	bl	8008e9c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8007c6c:	480e      	ldr	r0, [pc, #56]	@ (8007ca8 <BSP_SDRAM_MspInit+0x1e8>)
 8007c6e:	f001 f867 	bl	8008d40 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8007c72:	2200      	movs	r2, #0
 8007c74:	210f      	movs	r1, #15
 8007c76:	2038      	movs	r0, #56	@ 0x38
 8007c78:	f001 f82b 	bl	8008cd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8007c7c:	2038      	movs	r0, #56	@ 0x38
 8007c7e:	f001 f844 	bl	8008d0a <HAL_NVIC_EnableIRQ>
}
 8007c82:	bf00      	nop
 8007c84:	3740      	adds	r7, #64	@ 0x40
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	40023800 	.word	0x40023800
 8007c90:	40020800 	.word	0x40020800
 8007c94:	40020c00 	.word	0x40020c00
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	40021400 	.word	0x40021400
 8007ca0:	40021800 	.word	0x40021800
 8007ca4:	40021c00 	.word	0x40021c00
 8007ca8:	20006510 	.word	0x20006510
 8007cac:	40026410 	.word	0x40026410

08007cb0 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	460a      	mov	r2, r1
 8007cba:	80fb      	strh	r3, [r7, #6]
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8007cc4:	4a14      	ldr	r2, [pc, #80]	@ (8007d18 <BSP_TS_Init+0x68>)
 8007cc6:	88fb      	ldrh	r3, [r7, #6]
 8007cc8:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8007cca:	4a14      	ldr	r2, [pc, #80]	@ (8007d1c <BSP_TS_Init+0x6c>)
 8007ccc:	88bb      	ldrh	r3, [r7, #4]
 8007cce:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8007cd0:	4b13      	ldr	r3, [pc, #76]	@ (8007d20 <BSP_TS_Init+0x70>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2070      	movs	r0, #112	@ 0x70
 8007cd6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007cd8:	4b11      	ldr	r3, [pc, #68]	@ (8007d20 <BSP_TS_Init+0x70>)
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	2070      	movs	r0, #112	@ 0x70
 8007cde:	4798      	blx	r3
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b51      	cmp	r3, #81	@ 0x51
 8007ce4:	d110      	bne.n	8007d08 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8007d24 <BSP_TS_Init+0x74>)
 8007ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8007d20 <BSP_TS_Init+0x70>)
 8007cea:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8007cec:	4b0e      	ldr	r3, [pc, #56]	@ (8007d28 <BSP_TS_Init+0x78>)
 8007cee:	2270      	movs	r2, #112	@ 0x70
 8007cf0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8007cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8007d2c <BSP_TS_Init+0x7c>)
 8007cf4:	2208      	movs	r2, #8
 8007cf6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8007d24 <BSP_TS_Init+0x74>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8007d28 <BSP_TS_Init+0x78>)
 8007d00:	7812      	ldrb	r2, [r2, #0]
 8007d02:	4610      	mov	r0, r2
 8007d04:	4798      	blx	r3
 8007d06:	e001      	b.n	8007d0c <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20006574 	.word	0x20006574
 8007d1c:	20006576 	.word	0x20006576
 8007d20:	20004ed4 	.word	0x20004ed4
 8007d24:	20006570 	.word	0x20006570
 8007d28:	20006579 	.word	0x20006579
 8007d2c:	20006578 	.word	0x20006578

08007d30 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8007d30:	b590      	push	{r4, r7, lr}
 8007d32:	b097      	sub	sp, #92	@ 0x5c
 8007d34:	af02      	add	r7, sp, #8
 8007d36:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8007d4a:	4bb8      	ldr	r3, [pc, #736]	@ (800802c <BSP_TS_GetState+0x2fc>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	4ab7      	ldr	r2, [pc, #732]	@ (8008030 <BSP_TS_GetState+0x300>)
 8007d52:	7812      	ldrb	r2, [r2, #0]
 8007d54:	4610      	mov	r0, r2
 8007d56:	4798      	blx	r3
 8007d58:	4603      	mov	r3, r0
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f000 8198 	beq.w	800809a <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d6e:	e187      	b.n	8008080 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8007d70:	4bae      	ldr	r3, [pc, #696]	@ (800802c <BSP_TS_GetState+0x2fc>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	4aae      	ldr	r2, [pc, #696]	@ (8008030 <BSP_TS_GetState+0x300>)
 8007d78:	7812      	ldrb	r2, [r2, #0]
 8007d7a:	4614      	mov	r4, r2
 8007d7c:	f107 0120 	add.w	r1, r7, #32
 8007d80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d82:	0052      	lsls	r2, r2, #1
 8007d84:	1888      	adds	r0, r1, r2
 8007d86:	f107 0114 	add.w	r1, r7, #20
 8007d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d8c:	0052      	lsls	r2, r2, #1
 8007d8e:	440a      	add	r2, r1
 8007d90:	4601      	mov	r1, r0
 8007d92:	4620      	mov	r0, r4
 8007d94:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8007d96:	4ba7      	ldr	r3, [pc, #668]	@ (8008034 <BSP_TS_GetState+0x304>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d117      	bne.n	8007dce <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8007d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	3350      	adds	r3, #80	@ 0x50
 8007da4:	443b      	add	r3, r7
 8007da6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dac:	005b      	lsls	r3, r3, #1
 8007dae:	3350      	adds	r3, #80	@ 0x50
 8007db0:	443b      	add	r3, r7
 8007db2:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8007db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	3350      	adds	r3, #80	@ 0x50
 8007dbc:	443b      	add	r3, r7
 8007dbe:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	3350      	adds	r3, #80	@ 0x50
 8007dc8:	443b      	add	r3, r7
 8007dca:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8007dce:	4b99      	ldr	r3, [pc, #612]	@ (8008034 <BSP_TS_GetState+0x304>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d00e      	beq.n	8007df8 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8007dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	3350      	adds	r3, #80	@ 0x50
 8007de0:	443b      	add	r3, r7
 8007de2:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8007de6:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	3350      	adds	r3, #80	@ 0x50
 8007df2:	443b      	add	r3, r7
 8007df4:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8007df8:	4b8e      	ldr	r3, [pc, #568]	@ (8008034 <BSP_TS_GetState+0x304>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	f003 0304 	and.w	r3, r3, #4
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00e      	beq.n	8007e22 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8007e04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e06:	005b      	lsls	r3, r3, #1
 8007e08:	3350      	adds	r3, #80	@ 0x50
 8007e0a:	443b      	add	r3, r7
 8007e0c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8007e10:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	3350      	adds	r3, #80	@ 0x50
 8007e1c:	443b      	add	r3, r7
 8007e1e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8007e22:	4b84      	ldr	r3, [pc, #528]	@ (8008034 <BSP_TS_GetState+0x304>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	f003 0308 	and.w	r3, r3, #8
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d017      	beq.n	8007e5e <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8007e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	3350      	adds	r3, #80	@ 0x50
 8007e34:	443b      	add	r3, r7
 8007e36:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007e3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	3350      	adds	r3, #80	@ 0x50
 8007e40:	443b      	add	r3, r7
 8007e42:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8007e46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e48:	005b      	lsls	r3, r3, #1
 8007e4a:	3350      	adds	r3, #80	@ 0x50
 8007e4c:	443b      	add	r3, r7
 8007e4e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	3350      	adds	r3, #80	@ 0x50
 8007e58:	443b      	add	r3, r7
 8007e5a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8007e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e60:	005b      	lsls	r3, r3, #1
 8007e62:	3350      	adds	r3, #80	@ 0x50
 8007e64:	443b      	add	r3, r7
 8007e66:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4a72      	ldr	r2, [pc, #456]	@ (8008038 <BSP_TS_GetState+0x308>)
 8007e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e74:	4299      	cmp	r1, r3
 8007e76:	d90d      	bls.n	8007e94 <BSP_TS_GetState+0x164>
 8007e78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	3350      	adds	r3, #80	@ 0x50
 8007e7e:	443b      	add	r3, r7
 8007e80:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8007e84:	496c      	ldr	r1, [pc, #432]	@ (8008038 <BSP_TS_GetState+0x308>)
 8007e86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	1ad3      	subs	r3, r2, r3
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	e00c      	b.n	8007eae <BSP_TS_GetState+0x17e>
 8007e94:	4a68      	ldr	r2, [pc, #416]	@ (8008038 <BSP_TS_GetState+0x308>)
 8007e96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ea0:	005b      	lsls	r3, r3, #1
 8007ea2:	3350      	adds	r3, #80	@ 0x50
 8007ea4:	443b      	add	r3, r7
 8007ea6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8007eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	3350      	adds	r3, #80	@ 0x50
 8007eb8:	443b      	add	r3, r7
 8007eba:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	4a5e      	ldr	r2, [pc, #376]	@ (800803c <BSP_TS_GetState+0x30c>)
 8007ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec8:	4299      	cmp	r1, r3
 8007eca:	d90d      	bls.n	8007ee8 <BSP_TS_GetState+0x1b8>
 8007ecc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	3350      	adds	r3, #80	@ 0x50
 8007ed2:	443b      	add	r3, r7
 8007ed4:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8007ed8:	4958      	ldr	r1, [pc, #352]	@ (800803c <BSP_TS_GetState+0x30c>)
 8007eda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007edc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	e00c      	b.n	8007f02 <BSP_TS_GetState+0x1d2>
 8007ee8:	4a54      	ldr	r2, [pc, #336]	@ (800803c <BSP_TS_GetState+0x30c>)
 8007eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ef4:	005b      	lsls	r3, r3, #1
 8007ef6:	3350      	adds	r3, #80	@ 0x50
 8007ef8:	443b      	add	r3, r7
 8007efa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007efe:	1ad3      	subs	r3, r2, r3
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8007f06:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007f0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007f0e:	4413      	add	r3, r2
 8007f10:	2b05      	cmp	r3, #5
 8007f12:	dd15      	ble.n	8007f40 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8007f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f16:	005b      	lsls	r3, r3, #1
 8007f18:	3350      	adds	r3, #80	@ 0x50
 8007f1a:	443b      	add	r3, r7
 8007f1c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007f20:	4619      	mov	r1, r3
 8007f22:	4a45      	ldr	r2, [pc, #276]	@ (8008038 <BSP_TS_GetState+0x308>)
 8007f24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8007f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	3350      	adds	r3, #80	@ 0x50
 8007f30:	443b      	add	r3, r7
 8007f32:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007f36:	4619      	mov	r1, r3
 8007f38:	4a40      	ldr	r2, [pc, #256]	@ (800803c <BSP_TS_GetState+0x30c>)
 8007f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8007f40:	4b3b      	ldr	r3, [pc, #236]	@ (8008030 <BSP_TS_GetState+0x300>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	2b70      	cmp	r3, #112	@ 0x70
 8007f46:	d119      	bne.n	8007f7c <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8007f48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f4a:	005b      	lsls	r3, r3, #1
 8007f4c:	3350      	adds	r3, #80	@ 0x50
 8007f4e:	443b      	add	r3, r7
 8007f50:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	4413      	add	r3, r2
 8007f5c:	460a      	mov	r2, r1
 8007f5e:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8007f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f62:	005b      	lsls	r3, r3, #1
 8007f64:	3350      	adds	r3, #80	@ 0x50
 8007f66:	443b      	add	r3, r7
 8007f68:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f70:	3304      	adds	r3, #4
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	4413      	add	r3, r2
 8007f76:	460a      	mov	r2, r1
 8007f78:	809a      	strh	r2, [r3, #4]
 8007f7a:	e022      	b.n	8007fc2 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8007f7c:	4b30      	ldr	r3, [pc, #192]	@ (8008040 <BSP_TS_GetState+0x310>)
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	4619      	mov	r1, r3
 8007f82:	4a2d      	ldr	r2, [pc, #180]	@ (8008038 <BSP_TS_GetState+0x308>)
 8007f84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f8a:	fb01 f303 	mul.w	r3, r1, r3
 8007f8e:	0b1b      	lsrs	r3, r3, #12
 8007f90:	b299      	uxth	r1, r3
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	4413      	add	r3, r2
 8007f9a:	460a      	mov	r2, r1
 8007f9c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8007f9e:	4b29      	ldr	r3, [pc, #164]	@ (8008044 <BSP_TS_GetState+0x314>)
 8007fa0:	881b      	ldrh	r3, [r3, #0]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	4a25      	ldr	r2, [pc, #148]	@ (800803c <BSP_TS_GetState+0x30c>)
 8007fa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	0b1b      	lsrs	r3, r3, #12
 8007fb2:	b299      	uxth	r1, r3
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fb8:	3304      	adds	r3, #4
 8007fba:	005b      	lsls	r3, r3, #1
 8007fbc:	4413      	add	r3, r2
 8007fbe:	460a      	mov	r2, r1
 8007fc0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8007fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8008030 <BSP_TS_GetState+0x300>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f107 010c 	add.w	r1, r7, #12
 8007fcc:	f107 0210 	add.w	r2, r7, #16
 8007fd0:	f107 0308 	add.w	r3, r7, #8
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007fda:	f7fe f83b 	bl	8006054 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	b2d9      	uxtb	r1, r3
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fe6:	4413      	add	r3, r2
 8007fe8:	3316      	adds	r3, #22
 8007fea:	460a      	mov	r2, r1
 8007fec:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	b2d9      	uxtb	r1, r3
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ff6:	4413      	add	r3, r2
 8007ff8:	3320      	adds	r3, #32
 8007ffa:	460a      	mov	r2, r1
 8007ffc:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2b03      	cmp	r3, #3
 8008002:	d836      	bhi.n	8008072 <BSP_TS_GetState+0x342>
 8008004:	a201      	add	r2, pc, #4	@ (adr r2, 800800c <BSP_TS_GetState+0x2dc>)
 8008006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800800a:	bf00      	nop
 800800c:	0800801d 	.word	0x0800801d
 8008010:	08008049 	.word	0x08008049
 8008014:	08008057 	.word	0x08008057
 8008018:	08008065 	.word	0x08008065
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008020:	4413      	add	r3, r2
 8008022:	331b      	adds	r3, #27
 8008024:	2201      	movs	r2, #1
 8008026:	701a      	strb	r2, [r3, #0]
          break;
 8008028:	e027      	b.n	800807a <BSP_TS_GetState+0x34a>
 800802a:	bf00      	nop
 800802c:	20006570 	.word	0x20006570
 8008030:	20006579 	.word	0x20006579
 8008034:	20006578 	.word	0x20006578
 8008038:	2000657c 	.word	0x2000657c
 800803c:	20006590 	.word	0x20006590
 8008040:	20006574 	.word	0x20006574
 8008044:	20006576 	.word	0x20006576
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800804c:	4413      	add	r3, r2
 800804e:	331b      	adds	r3, #27
 8008050:	2202      	movs	r2, #2
 8008052:	701a      	strb	r2, [r3, #0]
          break;
 8008054:	e011      	b.n	800807a <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800805a:	4413      	add	r3, r2
 800805c:	331b      	adds	r3, #27
 800805e:	2203      	movs	r2, #3
 8008060:	701a      	strb	r2, [r3, #0]
          break;
 8008062:	e00a      	b.n	800807a <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008068:	4413      	add	r3, r2
 800806a:	331b      	adds	r3, #27
 800806c:	2200      	movs	r2, #0
 800806e:	701a      	strb	r2, [r3, #0]
          break;
 8008070:	e003      	b.n	800807a <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8008078:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800807a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800807c:	3301      	adds	r3, #1
 800807e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	461a      	mov	r2, r3
 8008086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008088:	4293      	cmp	r3, r2
 800808a:	f4ff ae71 	bcc.w	8007d70 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f80a 	bl	80080a8 <BSP_TS_Get_GestureId>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800809a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3754      	adds	r7, #84	@ 0x54
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd90      	pop	{r4, r7, pc}
 80080a6:	bf00      	nop

080080a8 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80080b4:	2300      	movs	r3, #0
 80080b6:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80080b8:	4b3b      	ldr	r3, [pc, #236]	@ (80081a8 <BSP_TS_Get_GestureId+0x100>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	461a      	mov	r2, r3
 80080be:	f107 0308 	add.w	r3, r7, #8
 80080c2:	4619      	mov	r1, r3
 80080c4:	4610      	mov	r0, r2
 80080c6:	f7fd ffac 	bl	8006022 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b49      	cmp	r3, #73	@ 0x49
 80080ce:	d05e      	beq.n	800818e <BSP_TS_Get_GestureId+0xe6>
 80080d0:	2b49      	cmp	r3, #73	@ 0x49
 80080d2:	d860      	bhi.n	8008196 <BSP_TS_Get_GestureId+0xee>
 80080d4:	2b1c      	cmp	r3, #28
 80080d6:	d83f      	bhi.n	8008158 <BSP_TS_Get_GestureId+0xb0>
 80080d8:	2b1c      	cmp	r3, #28
 80080da:	d85c      	bhi.n	8008196 <BSP_TS_Get_GestureId+0xee>
 80080dc:	a201      	add	r2, pc, #4	@ (adr r2, 80080e4 <BSP_TS_Get_GestureId+0x3c>)
 80080de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e2:	bf00      	nop
 80080e4:	0800815f 	.word	0x0800815f
 80080e8:	08008197 	.word	0x08008197
 80080ec:	08008197 	.word	0x08008197
 80080f0:	08008197 	.word	0x08008197
 80080f4:	08008197 	.word	0x08008197
 80080f8:	08008197 	.word	0x08008197
 80080fc:	08008197 	.word	0x08008197
 8008100:	08008197 	.word	0x08008197
 8008104:	08008197 	.word	0x08008197
 8008108:	08008197 	.word	0x08008197
 800810c:	08008197 	.word	0x08008197
 8008110:	08008197 	.word	0x08008197
 8008114:	08008197 	.word	0x08008197
 8008118:	08008197 	.word	0x08008197
 800811c:	08008197 	.word	0x08008197
 8008120:	08008197 	.word	0x08008197
 8008124:	08008167 	.word	0x08008167
 8008128:	08008197 	.word	0x08008197
 800812c:	08008197 	.word	0x08008197
 8008130:	08008197 	.word	0x08008197
 8008134:	0800816f 	.word	0x0800816f
 8008138:	08008197 	.word	0x08008197
 800813c:	08008197 	.word	0x08008197
 8008140:	08008197 	.word	0x08008197
 8008144:	08008177 	.word	0x08008177
 8008148:	08008197 	.word	0x08008197
 800814c:	08008197 	.word	0x08008197
 8008150:	08008197 	.word	0x08008197
 8008154:	0800817f 	.word	0x0800817f
 8008158:	2b40      	cmp	r3, #64	@ 0x40
 800815a:	d014      	beq.n	8008186 <BSP_TS_Get_GestureId+0xde>
 800815c:	e01b      	b.n	8008196 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008164:	e01a      	b.n	800819c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800816c:	e016      	b.n	800819c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2202      	movs	r2, #2
 8008172:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008174:	e012      	b.n	800819c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2203      	movs	r2, #3
 800817a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800817c:	e00e      	b.n	800819c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2204      	movs	r2, #4
 8008182:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008184:	e00a      	b.n	800819c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2205      	movs	r2, #5
 800818a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800818c:	e006      	b.n	800819c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2206      	movs	r2, #6
 8008192:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8008194:	e002      	b.n	800819c <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	73fb      	strb	r3, [r7, #15]
      break;
 800819a:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800819c:	7bfb      	ldrb	r3, [r7, #15]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20006579 	.word	0x20006579

080081ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80081b0:	4b08      	ldr	r3, [pc, #32]	@ (80081d4 <HAL_Init+0x28>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a07      	ldr	r2, [pc, #28]	@ (80081d4 <HAL_Init+0x28>)
 80081b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80081ba:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80081bc:	2003      	movs	r0, #3
 80081be:	f000 fd7d 	bl	8008cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80081c2:	2000      	movs	r0, #0
 80081c4:	f000 f808 	bl	80081d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80081c8:	f7fc ffd0 	bl	800516c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	40023c00 	.word	0x40023c00

080081d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80081e0:	4b12      	ldr	r3, [pc, #72]	@ (800822c <HAL_InitTick+0x54>)
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	4b12      	ldr	r3, [pc, #72]	@ (8008230 <HAL_InitTick+0x58>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	4619      	mov	r1, r3
 80081ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80081ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80081f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f6:	4618      	mov	r0, r3
 80081f8:	f000 fd95 	bl	8008d26 <HAL_SYSTICK_Config>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e00e      	b.n	8008224 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b0f      	cmp	r3, #15
 800820a:	d80a      	bhi.n	8008222 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800820c:	2200      	movs	r2, #0
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	f04f 30ff 	mov.w	r0, #4294967295
 8008214:	f000 fd5d 	bl	8008cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008218:	4a06      	ldr	r2, [pc, #24]	@ (8008234 <HAL_InitTick+0x5c>)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	e000      	b.n	8008224 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20004ed0 	.word	0x20004ed0
 8008230:	20004f24 	.word	0x20004f24
 8008234:	20004f20 	.word	0x20004f20

08008238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008238:	b480      	push	{r7}
 800823a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800823c:	4b06      	ldr	r3, [pc, #24]	@ (8008258 <HAL_IncTick+0x20>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	461a      	mov	r2, r3
 8008242:	4b06      	ldr	r3, [pc, #24]	@ (800825c <HAL_IncTick+0x24>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4413      	add	r3, r2
 8008248:	4a04      	ldr	r2, [pc, #16]	@ (800825c <HAL_IncTick+0x24>)
 800824a:	6013      	str	r3, [r2, #0]
}
 800824c:	bf00      	nop
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	20004f24 	.word	0x20004f24
 800825c:	200065a4 	.word	0x200065a4

08008260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
  return uwTick;
 8008264:	4b03      	ldr	r3, [pc, #12]	@ (8008274 <HAL_GetTick+0x14>)
 8008266:	681b      	ldr	r3, [r3, #0]
}
 8008268:	4618      	mov	r0, r3
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	200065a4 	.word	0x200065a4

08008278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008280:	f7ff ffee 	bl	8008260 <HAL_GetTick>
 8008284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008290:	d005      	beq.n	800829e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008292:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <HAL_Delay+0x44>)
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4413      	add	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800829e:	bf00      	nop
 80082a0:	f7ff ffde 	bl	8008260 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d8f7      	bhi.n	80082a0 <HAL_Delay+0x28>
  {
  }
}
 80082b0:	bf00      	nop
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20004f24 	.word	0x20004f24

080082c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e031      	b.n	800833a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fa ff94 	bl	800320c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f6:	f003 0310 	and.w	r3, r3, #16
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d116      	bne.n	800832c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008302:	4b10      	ldr	r3, [pc, #64]	@ (8008344 <HAL_ADC_Init+0x84>)
 8008304:	4013      	ands	r3, r2
 8008306:	f043 0202 	orr.w	r2, r3, #2
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fb0a 	bl	8008928 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831e:	f023 0303 	bic.w	r3, r3, #3
 8008322:	f043 0201 	orr.w	r2, r3, #1
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	641a      	str	r2, [r3, #64]	@ 0x40
 800832a:	e001      	b.n	8008330 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008338:	7bfb      	ldrb	r3, [r7, #15]
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	ffffeefd 	.word	0xffffeefd

08008348 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8008350:	2300      	movs	r3, #0
 8008352:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <HAL_ADC_Start+0x1a>
 800835e:	2302      	movs	r3, #2
 8008360:	e0ad      	b.n	80084be <HAL_ADC_Start+0x176>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2201      	movs	r2, #1
 8008366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f003 0301 	and.w	r3, r3, #1
 8008374:	2b01      	cmp	r3, #1
 8008376:	d018      	beq.n	80083aa <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f042 0201 	orr.w	r2, r2, #1
 8008386:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8008388:	4b50      	ldr	r3, [pc, #320]	@ (80084cc <HAL_ADC_Start+0x184>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a50      	ldr	r2, [pc, #320]	@ (80084d0 <HAL_ADC_Start+0x188>)
 800838e:	fba2 2303 	umull	r2, r3, r2, r3
 8008392:	0c9a      	lsrs	r2, r3, #18
 8008394:	4613      	mov	r3, r2
 8008396:	005b      	lsls	r3, r3, #1
 8008398:	4413      	add	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800839c:	e002      	b.n	80083a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1f9      	bne.n	800839e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d175      	bne.n	80084a4 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083bc:	4b45      	ldr	r3, [pc, #276]	@ (80084d4 <HAL_ADC_Start+0x18c>)
 80083be:	4013      	ands	r3, r2
 80083c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d007      	beq.n	80083e6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80083de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80083ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083f2:	d106      	bne.n	8008402 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f8:	f023 0206 	bic.w	r2, r3, #6
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	645a      	str	r2, [r3, #68]	@ 0x44
 8008400:	e002      	b.n	8008408 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8008418:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800841a:	4b2f      	ldr	r3, [pc, #188]	@ (80084d8 <HAL_ADC_Start+0x190>)
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f003 031f 	and.w	r3, r3, #31
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10f      	bne.n	8008446 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d143      	bne.n	80084bc <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008442:	609a      	str	r2, [r3, #8]
 8008444:	e03a      	b.n	80084bc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a24      	ldr	r2, [pc, #144]	@ (80084dc <HAL_ADC_Start+0x194>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d10e      	bne.n	800846e <HAL_ADC_Start+0x126>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d107      	bne.n	800846e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800846c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800846e:	4b1a      	ldr	r3, [pc, #104]	@ (80084d8 <HAL_ADC_Start+0x190>)
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	f003 0310 	and.w	r3, r3, #16
 8008476:	2b00      	cmp	r3, #0
 8008478:	d120      	bne.n	80084bc <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a18      	ldr	r2, [pc, #96]	@ (80084e0 <HAL_ADC_Start+0x198>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d11b      	bne.n	80084bc <HAL_ADC_Start+0x174>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d114      	bne.n	80084bc <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	689a      	ldr	r2, [r3, #8]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80084a0:	609a      	str	r2, [r3, #8]
 80084a2:	e00b      	b.n	80084bc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a8:	f043 0210 	orr.w	r2, r3, #16
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084b4:	f043 0201 	orr.w	r2, r3, #1
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	20004ed0 	.word	0x20004ed0
 80084d0:	431bde83 	.word	0x431bde83
 80084d4:	fffff8fe 	.word	0xfffff8fe
 80084d8:	40012300 	.word	0x40012300
 80084dc:	40012000 	.word	0x40012000
 80084e0:	40012200 	.word	0x40012200

080084e4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d101      	bne.n	80084fa <HAL_ADC_Stop+0x16>
 80084f6:	2302      	movs	r3, #2
 80084f8:	e01f      	b.n	800853a <HAL_ADC_Stop+0x56>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2201      	movs	r2, #1
 80084fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f022 0201 	bic.w	r2, r2, #1
 8008510:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f003 0301 	and.w	r3, r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	d107      	bne.n	8008530 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008524:	4b08      	ldr	r3, [pc, #32]	@ (8008548 <HAL_ADC_Stop+0x64>)
 8008526:	4013      	ands	r3, r2
 8008528:	f043 0201 	orr.w	r2, r3, #1
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	370c      	adds	r7, #12
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	ffffeefe 	.word	0xffffeefe

0800854c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008568:	d113      	bne.n	8008592 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008578:	d10b      	bne.n	8008592 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800857e:	f043 0220 	orr.w	r2, r3, #32
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e063      	b.n	800865a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008592:	f7ff fe65 	bl	8008260 <HAL_GetTick>
 8008596:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008598:	e021      	b.n	80085de <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a0:	d01d      	beq.n	80085de <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d007      	beq.n	80085b8 <HAL_ADC_PollForConversion+0x6c>
 80085a8:	f7ff fe5a 	bl	8008260 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	683a      	ldr	r2, [r7, #0]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d212      	bcs.n	80085de <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d00b      	beq.n	80085de <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ca:	f043 0204 	orr.w	r2, r3, #4
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e03d      	b.n	800865a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b02      	cmp	r3, #2
 80085ea:	d1d6      	bne.n	800859a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f06f 0212 	mvn.w	r2, #18
 80085f4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d123      	bne.n	8008658 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008614:	2b00      	cmp	r3, #0
 8008616:	d11f      	bne.n	8008658 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008622:	2b00      	cmp	r3, #0
 8008624:	d006      	beq.n	8008634 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008630:	2b00      	cmp	r3, #0
 8008632:	d111      	bne.n	8008658 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008638:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008644:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d105      	bne.n	8008658 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008650:	f043 0201 	orr.w	r2, r3, #1
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8008670:	4618      	mov	r0, r3
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008690:	2b01      	cmp	r3, #1
 8008692:	d101      	bne.n	8008698 <HAL_ADC_ConfigChannel+0x1c>
 8008694:	2302      	movs	r3, #2
 8008696:	e136      	b.n	8008906 <HAL_ADC_ConfigChannel+0x28a>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b09      	cmp	r3, #9
 80086a6:	d93a      	bls.n	800871e <HAL_ADC_ConfigChannel+0xa2>
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086b0:	d035      	beq.n	800871e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68d9      	ldr	r1, [r3, #12]
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	b29b      	uxth	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	4613      	mov	r3, r2
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	4413      	add	r3, r2
 80086c6:	3b1e      	subs	r3, #30
 80086c8:	2207      	movs	r2, #7
 80086ca:	fa02 f303 	lsl.w	r3, r2, r3
 80086ce:	43da      	mvns	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	400a      	ands	r2, r1
 80086d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a8d      	ldr	r2, [pc, #564]	@ (8008914 <HAL_ADC_ConfigChannel+0x298>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d10a      	bne.n	80086f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68d9      	ldr	r1, [r3, #12]
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	061a      	lsls	r2, r3, #24
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	430a      	orrs	r2, r1
 80086f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80086f6:	e035      	b.n	8008764 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68d9      	ldr	r1, [r3, #12]
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	689a      	ldr	r2, [r3, #8]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	4618      	mov	r0, r3
 800870a:	4603      	mov	r3, r0
 800870c:	005b      	lsls	r3, r3, #1
 800870e:	4403      	add	r3, r0
 8008710:	3b1e      	subs	r3, #30
 8008712:	409a      	lsls	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800871c:	e022      	b.n	8008764 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6919      	ldr	r1, [r3, #16]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	b29b      	uxth	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	4613      	mov	r3, r2
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	4413      	add	r3, r2
 8008732:	2207      	movs	r2, #7
 8008734:	fa02 f303 	lsl.w	r3, r2, r3
 8008738:	43da      	mvns	r2, r3
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	400a      	ands	r2, r1
 8008740:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	6919      	ldr	r1, [r3, #16]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	689a      	ldr	r2, [r3, #8]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	b29b      	uxth	r3, r3
 8008752:	4618      	mov	r0, r3
 8008754:	4603      	mov	r3, r0
 8008756:	005b      	lsls	r3, r3, #1
 8008758:	4403      	add	r3, r0
 800875a:	409a      	lsls	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b06      	cmp	r3, #6
 800876a:	d824      	bhi.n	80087b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	4613      	mov	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	3b05      	subs	r3, #5
 800877e:	221f      	movs	r2, #31
 8008780:	fa02 f303 	lsl.w	r3, r2, r3
 8008784:	43da      	mvns	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	400a      	ands	r2, r1
 800878c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	4618      	mov	r0, r3
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685a      	ldr	r2, [r3, #4]
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	3b05      	subs	r3, #5
 80087a8:	fa00 f203 	lsl.w	r2, r0, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	430a      	orrs	r2, r1
 80087b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80087b4:	e04c      	b.n	8008850 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	2b0c      	cmp	r3, #12
 80087bc:	d824      	bhi.n	8008808 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	4613      	mov	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	3b23      	subs	r3, #35	@ 0x23
 80087d0:	221f      	movs	r2, #31
 80087d2:	fa02 f303 	lsl.w	r3, r2, r3
 80087d6:	43da      	mvns	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	400a      	ands	r2, r1
 80087de:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	4618      	mov	r0, r3
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	685a      	ldr	r2, [r3, #4]
 80087f2:	4613      	mov	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	3b23      	subs	r3, #35	@ 0x23
 80087fa:	fa00 f203 	lsl.w	r2, r0, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	631a      	str	r2, [r3, #48]	@ 0x30
 8008806:	e023      	b.n	8008850 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	685a      	ldr	r2, [r3, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	3b41      	subs	r3, #65	@ 0x41
 800881a:	221f      	movs	r2, #31
 800881c:	fa02 f303 	lsl.w	r3, r2, r3
 8008820:	43da      	mvns	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	400a      	ands	r2, r1
 8008828:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	b29b      	uxth	r3, r3
 8008836:	4618      	mov	r0, r3
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	685a      	ldr	r2, [r3, #4]
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	3b41      	subs	r3, #65	@ 0x41
 8008844:	fa00 f203 	lsl.w	r2, r0, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	430a      	orrs	r2, r1
 800884e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a30      	ldr	r2, [pc, #192]	@ (8008918 <HAL_ADC_ConfigChannel+0x29c>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d10a      	bne.n	8008870 <HAL_ADC_ConfigChannel+0x1f4>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008862:	d105      	bne.n	8008870 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8008864:	4b2d      	ldr	r3, [pc, #180]	@ (800891c <HAL_ADC_ConfigChannel+0x2a0>)
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	4a2c      	ldr	r2, [pc, #176]	@ (800891c <HAL_ADC_ConfigChannel+0x2a0>)
 800886a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800886e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a28      	ldr	r2, [pc, #160]	@ (8008918 <HAL_ADC_ConfigChannel+0x29c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d10f      	bne.n	800889a <HAL_ADC_ConfigChannel+0x21e>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	2b12      	cmp	r3, #18
 8008880:	d10b      	bne.n	800889a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8008882:	4b26      	ldr	r3, [pc, #152]	@ (800891c <HAL_ADC_ConfigChannel+0x2a0>)
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	4a25      	ldr	r2, [pc, #148]	@ (800891c <HAL_ADC_ConfigChannel+0x2a0>)
 8008888:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800888c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800888e:	4b23      	ldr	r3, [pc, #140]	@ (800891c <HAL_ADC_ConfigChannel+0x2a0>)
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	4a22      	ldr	r2, [pc, #136]	@ (800891c <HAL_ADC_ConfigChannel+0x2a0>)
 8008894:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008898:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a1e      	ldr	r2, [pc, #120]	@ (8008918 <HAL_ADC_ConfigChannel+0x29c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d12b      	bne.n	80088fc <HAL_ADC_ConfigChannel+0x280>
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a1a      	ldr	r2, [pc, #104]	@ (8008914 <HAL_ADC_ConfigChannel+0x298>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d003      	beq.n	80088b6 <HAL_ADC_ConfigChannel+0x23a>
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	2b11      	cmp	r3, #17
 80088b4:	d122      	bne.n	80088fc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80088b6:	4b19      	ldr	r3, [pc, #100]	@ (800891c <HAL_ADC_ConfigChannel+0x2a0>)
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	4a18      	ldr	r2, [pc, #96]	@ (800891c <HAL_ADC_ConfigChannel+0x2a0>)
 80088bc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80088c0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80088c2:	4b16      	ldr	r3, [pc, #88]	@ (800891c <HAL_ADC_ConfigChannel+0x2a0>)
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	4a15      	ldr	r2, [pc, #84]	@ (800891c <HAL_ADC_ConfigChannel+0x2a0>)
 80088c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80088cc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a10      	ldr	r2, [pc, #64]	@ (8008914 <HAL_ADC_ConfigChannel+0x298>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d111      	bne.n	80088fc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80088d8:	4b11      	ldr	r3, [pc, #68]	@ (8008920 <HAL_ADC_ConfigChannel+0x2a4>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a11      	ldr	r2, [pc, #68]	@ (8008924 <HAL_ADC_ConfigChannel+0x2a8>)
 80088de:	fba2 2303 	umull	r2, r3, r2, r3
 80088e2:	0c9a      	lsrs	r2, r3, #18
 80088e4:	4613      	mov	r3, r2
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	4413      	add	r3, r2
 80088ea:	005b      	lsls	r3, r3, #1
 80088ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80088ee:	e002      	b.n	80088f6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1f9      	bne.n	80088f0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	10000012 	.word	0x10000012
 8008918:	40012000 	.word	0x40012000
 800891c:	40012300 	.word	0x40012300
 8008920:	20004ed0 	.word	0x20004ed0
 8008924:	431bde83 	.word	0x431bde83

08008928 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008930:	4b78      	ldr	r3, [pc, #480]	@ (8008b14 <ADC_Init+0x1ec>)
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	4a77      	ldr	r2, [pc, #476]	@ (8008b14 <ADC_Init+0x1ec>)
 8008936:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800893a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800893c:	4b75      	ldr	r3, [pc, #468]	@ (8008b14 <ADC_Init+0x1ec>)
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	4973      	ldr	r1, [pc, #460]	@ (8008b14 <ADC_Init+0x1ec>)
 8008946:	4313      	orrs	r3, r2
 8008948:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008958:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6859      	ldr	r1, [r3, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	021a      	lsls	r2, r3, #8
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	685a      	ldr	r2, [r3, #4]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800897c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6859      	ldr	r1, [r3, #4]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689a      	ldr	r2, [r3, #8]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	689a      	ldr	r2, [r3, #8]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800899e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6899      	ldr	r1, [r3, #8]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b6:	4a58      	ldr	r2, [pc, #352]	@ (8008b18 <ADC_Init+0x1f0>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d022      	beq.n	8008a02 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80089ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6899      	ldr	r1, [r3, #8]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	430a      	orrs	r2, r1
 80089dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80089ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6899      	ldr	r1, [r3, #8]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	609a      	str	r2, [r3, #8]
 8008a00:	e00f      	b.n	8008a22 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	689a      	ldr	r2, [r3, #8]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008a10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008a20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	689a      	ldr	r2, [r3, #8]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f022 0202 	bic.w	r2, r2, #2
 8008a30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6899      	ldr	r1, [r3, #8]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	005a      	lsls	r2, r3, #1
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d01b      	beq.n	8008a88 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008a5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685a      	ldr	r2, [r3, #4]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8008a6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6859      	ldr	r1, [r3, #4]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	035a      	lsls	r2, r3, #13
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	605a      	str	r2, [r3, #4]
 8008a86:	e007      	b.n	8008a98 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008a96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008aa6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	69db      	ldr	r3, [r3, #28]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	051a      	lsls	r2, r3, #20
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008acc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6899      	ldr	r1, [r3, #8]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008ada:	025a      	lsls	r2, r3, #9
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	430a      	orrs	r2, r1
 8008ae2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	6899      	ldr	r1, [r3, #8]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	029a      	lsls	r2, r3, #10
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	430a      	orrs	r2, r1
 8008b06:	609a      	str	r2, [r3, #8]
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	40012300 	.word	0x40012300
 8008b18:	0f000001 	.word	0x0f000001

08008b1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b5c <__NVIC_SetPriorityGrouping+0x40>)
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008b38:	4013      	ands	r3, r2
 8008b3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008b44:	4b06      	ldr	r3, [pc, #24]	@ (8008b60 <__NVIC_SetPriorityGrouping+0x44>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b4a:	4a04      	ldr	r2, [pc, #16]	@ (8008b5c <__NVIC_SetPriorityGrouping+0x40>)
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	60d3      	str	r3, [r2, #12]
}
 8008b50:	bf00      	nop
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	e000ed00 	.word	0xe000ed00
 8008b60:	05fa0000 	.word	0x05fa0000

08008b64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b64:	b480      	push	{r7}
 8008b66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b68:	4b04      	ldr	r3, [pc, #16]	@ (8008b7c <__NVIC_GetPriorityGrouping+0x18>)
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	0a1b      	lsrs	r3, r3, #8
 8008b6e:	f003 0307 	and.w	r3, r3, #7
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	e000ed00 	.word	0xe000ed00

08008b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	4603      	mov	r3, r0
 8008b88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	db0b      	blt.n	8008baa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	f003 021f 	and.w	r2, r3, #31
 8008b98:	4907      	ldr	r1, [pc, #28]	@ (8008bb8 <__NVIC_EnableIRQ+0x38>)
 8008b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b9e:	095b      	lsrs	r3, r3, #5
 8008ba0:	2001      	movs	r0, #1
 8008ba2:	fa00 f202 	lsl.w	r2, r0, r2
 8008ba6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008baa:	bf00      	nop
 8008bac:	370c      	adds	r7, #12
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	e000e100 	.word	0xe000e100

08008bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	6039      	str	r1, [r7, #0]
 8008bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	db0a      	blt.n	8008be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	b2da      	uxtb	r2, r3
 8008bd4:	490c      	ldr	r1, [pc, #48]	@ (8008c08 <__NVIC_SetPriority+0x4c>)
 8008bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bda:	0112      	lsls	r2, r2, #4
 8008bdc:	b2d2      	uxtb	r2, r2
 8008bde:	440b      	add	r3, r1
 8008be0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008be4:	e00a      	b.n	8008bfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	4908      	ldr	r1, [pc, #32]	@ (8008c0c <__NVIC_SetPriority+0x50>)
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	f003 030f 	and.w	r3, r3, #15
 8008bf2:	3b04      	subs	r3, #4
 8008bf4:	0112      	lsls	r2, r2, #4
 8008bf6:	b2d2      	uxtb	r2, r2
 8008bf8:	440b      	add	r3, r1
 8008bfa:	761a      	strb	r2, [r3, #24]
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	e000e100 	.word	0xe000e100
 8008c0c:	e000ed00 	.word	0xe000ed00

08008c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b089      	sub	sp, #36	@ 0x24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	f1c3 0307 	rsb	r3, r3, #7
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	bf28      	it	cs
 8008c2e:	2304      	movcs	r3, #4
 8008c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	3304      	adds	r3, #4
 8008c36:	2b06      	cmp	r3, #6
 8008c38:	d902      	bls.n	8008c40 <NVIC_EncodePriority+0x30>
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	3b03      	subs	r3, #3
 8008c3e:	e000      	b.n	8008c42 <NVIC_EncodePriority+0x32>
 8008c40:	2300      	movs	r3, #0
 8008c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c44:	f04f 32ff 	mov.w	r2, #4294967295
 8008c48:	69bb      	ldr	r3, [r7, #24]
 8008c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4e:	43da      	mvns	r2, r3
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	401a      	ands	r2, r3
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c58:	f04f 31ff 	mov.w	r1, #4294967295
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c62:	43d9      	mvns	r1, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c68:	4313      	orrs	r3, r2
         );
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3724      	adds	r7, #36	@ 0x24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
	...

08008c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c88:	d301      	bcc.n	8008c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e00f      	b.n	8008cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8008cb8 <SysTick_Config+0x40>)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	3b01      	subs	r3, #1
 8008c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c96:	210f      	movs	r1, #15
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	f7ff ff8e 	bl	8008bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008ca0:	4b05      	ldr	r3, [pc, #20]	@ (8008cb8 <SysTick_Config+0x40>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ca6:	4b04      	ldr	r3, [pc, #16]	@ (8008cb8 <SysTick_Config+0x40>)
 8008ca8:	2207      	movs	r2, #7
 8008caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	e000e010 	.word	0xe000e010

08008cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f7ff ff29 	bl	8008b1c <__NVIC_SetPriorityGrouping>
}
 8008cca:	bf00      	nop
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}

08008cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b086      	sub	sp, #24
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	4603      	mov	r3, r0
 8008cda:	60b9      	str	r1, [r7, #8]
 8008cdc:	607a      	str	r2, [r7, #4]
 8008cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008ce4:	f7ff ff3e 	bl	8008b64 <__NVIC_GetPriorityGrouping>
 8008ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	68b9      	ldr	r1, [r7, #8]
 8008cee:	6978      	ldr	r0, [r7, #20]
 8008cf0:	f7ff ff8e 	bl	8008c10 <NVIC_EncodePriority>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cfa:	4611      	mov	r1, r2
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7ff ff5d 	bl	8008bbc <__NVIC_SetPriority>
}
 8008d02:	bf00      	nop
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b082      	sub	sp, #8
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	4603      	mov	r3, r0
 8008d12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f7ff ff31 	bl	8008b80 <__NVIC_EnableIRQ>
}
 8008d1e:	bf00      	nop
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b082      	sub	sp, #8
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff ffa2 	bl	8008c78 <SysTick_Config>
 8008d34:	4603      	mov	r3, r0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008d4c:	f7ff fa88 	bl	8008260 <HAL_GetTick>
 8008d50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e099      	b.n	8008e90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 0201 	bic.w	r2, r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d7c:	e00f      	b.n	8008d9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008d7e:	f7ff fa6f 	bl	8008260 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	2b05      	cmp	r3, #5
 8008d8a:	d908      	bls.n	8008d9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2220      	movs	r2, #32
 8008d90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2203      	movs	r2, #3
 8008d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8008d9a:	2303      	movs	r3, #3
 8008d9c:	e078      	b.n	8008e90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e8      	bne.n	8008d7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	4b38      	ldr	r3, [pc, #224]	@ (8008e98 <HAL_DMA_Init+0x158>)
 8008db8:	4013      	ands	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008de2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a1b      	ldr	r3, [r3, #32]
 8008de8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008dea:	697a      	ldr	r2, [r7, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d107      	bne.n	8008e08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e00:	4313      	orrs	r3, r2
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f023 0307 	bic.w	r3, r3, #7
 8008e1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d117      	bne.n	8008e62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00e      	beq.n	8008e62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fb03 	bl	8009450 <DMA_CheckFifoParam>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d008      	beq.n	8008e62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2240      	movs	r2, #64	@ 0x40
 8008e54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e016      	b.n	8008e90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 faba 	bl	80093e4 <DMA_CalcBaseAndBitshift>
 8008e70:	4603      	mov	r3, r0
 8008e72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e78:	223f      	movs	r2, #63	@ 0x3f
 8008e7a:	409a      	lsls	r2, r3
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3718      	adds	r7, #24
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	f010803f 	.word	0xf010803f

08008e9c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e050      	b.n	8008f50 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d101      	bne.n	8008ebe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8008eba:	2302      	movs	r3, #2
 8008ebc:	e048      	b.n	8008f50 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f022 0201 	bic.w	r2, r2, #1
 8008ecc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2200      	movs	r2, #0
 8008edc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2200      	movs	r2, #0
 8008eec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	2221      	movs	r2, #33	@ 0x21
 8008efc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fa70 	bl	80093e4 <DMA_CalcBaseAndBitshift>
 8008f04:	4603      	mov	r3, r0
 8008f06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f0c:	223f      	movs	r2, #63	@ 0x3f
 8008f0e:	409a      	lsls	r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2200      	movs	r2, #0
 8008f18:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d101      	bne.n	8008f7e <HAL_DMA_Start_IT+0x26>
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e048      	b.n	8009010 <HAL_DMA_Start_IT+0xb8>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d137      	bne.n	8009002 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2202      	movs	r2, #2
 8008f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	68b9      	ldr	r1, [r7, #8]
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 f9ee 	bl	8009388 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fb0:	223f      	movs	r2, #63	@ 0x3f
 8008fb2:	409a      	lsls	r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0216 	orr.w	r2, r2, #22
 8008fc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	695a      	ldr	r2, [r3, #20]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008fd6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d007      	beq.n	8008ff0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0208 	orr.w	r2, r2, #8
 8008fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	681a      	ldr	r2, [r3, #0]
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f042 0201 	orr.w	r2, r2, #1
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	e005      	b.n	800900e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800900a:	2302      	movs	r3, #2
 800900c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800900e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009010:	4618      	mov	r0, r3
 8009012:	3718      	adds	r7, #24
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b02      	cmp	r3, #2
 800902a:	d004      	beq.n	8009036 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2280      	movs	r2, #128	@ 0x80
 8009030:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e00c      	b.n	8009050 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2205      	movs	r2, #5
 800903a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f022 0201 	bic.w	r2, r2, #1
 800904c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	4618      	mov	r0, r3
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8009068:	4b8e      	ldr	r3, [pc, #568]	@ (80092a4 <HAL_DMA_IRQHandler+0x248>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a8e      	ldr	r2, [pc, #568]	@ (80092a8 <HAL_DMA_IRQHandler+0x24c>)
 800906e:	fba2 2303 	umull	r2, r3, r2, r3
 8009072:	0a9b      	lsrs	r3, r3, #10
 8009074:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800907a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009086:	2208      	movs	r2, #8
 8009088:	409a      	lsls	r2, r3
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	4013      	ands	r3, r2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d01a      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0304 	and.w	r3, r3, #4
 800909c:	2b00      	cmp	r3, #0
 800909e:	d013      	beq.n	80090c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0204 	bic.w	r2, r2, #4
 80090ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090b4:	2208      	movs	r2, #8
 80090b6:	409a      	lsls	r2, r3
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090c0:	f043 0201 	orr.w	r2, r3, #1
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090cc:	2201      	movs	r2, #1
 80090ce:	409a      	lsls	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	4013      	ands	r3, r2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d012      	beq.n	80090fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	695b      	ldr	r3, [r3, #20]
 80090de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00b      	beq.n	80090fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090ea:	2201      	movs	r2, #1
 80090ec:	409a      	lsls	r2, r3
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f6:	f043 0202 	orr.w	r2, r3, #2
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009102:	2204      	movs	r2, #4
 8009104:	409a      	lsls	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	4013      	ands	r3, r2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d012      	beq.n	8009134 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0302 	and.w	r3, r3, #2
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009120:	2204      	movs	r2, #4
 8009122:	409a      	lsls	r2, r3
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800912c:	f043 0204 	orr.w	r2, r3, #4
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009138:	2210      	movs	r2, #16
 800913a:	409a      	lsls	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4013      	ands	r3, r2
 8009140:	2b00      	cmp	r3, #0
 8009142:	d043      	beq.n	80091cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d03c      	beq.n	80091cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009156:	2210      	movs	r2, #16
 8009158:	409a      	lsls	r2, r3
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009168:	2b00      	cmp	r3, #0
 800916a:	d018      	beq.n	800919e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d108      	bne.n	800918c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800917e:	2b00      	cmp	r3, #0
 8009180:	d024      	beq.n	80091cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	4798      	blx	r3
 800918a:	e01f      	b.n	80091cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009190:	2b00      	cmp	r3, #0
 8009192:	d01b      	beq.n	80091cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	4798      	blx	r3
 800919c:	e016      	b.n	80091cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d107      	bne.n	80091bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f022 0208 	bic.w	r2, r2, #8
 80091ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d003      	beq.n	80091cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091d0:	2220      	movs	r2, #32
 80091d2:	409a      	lsls	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4013      	ands	r3, r2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 808f 	beq.w	80092fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0310 	and.w	r3, r3, #16
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 8087 	beq.w	80092fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091f2:	2220      	movs	r2, #32
 80091f4:	409a      	lsls	r2, r3
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b05      	cmp	r3, #5
 8009204:	d136      	bne.n	8009274 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0216 	bic.w	r2, r2, #22
 8009214:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	695a      	ldr	r2, [r3, #20]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009224:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	d103      	bne.n	8009236 <HAL_DMA_IRQHandler+0x1da>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009232:	2b00      	cmp	r3, #0
 8009234:	d007      	beq.n	8009246 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f022 0208 	bic.w	r2, r2, #8
 8009244:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800924a:	223f      	movs	r2, #63	@ 0x3f
 800924c:	409a      	lsls	r2, r3
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2201      	movs	r2, #1
 8009256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009266:	2b00      	cmp	r3, #0
 8009268:	d07e      	beq.n	8009368 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	4798      	blx	r3
        }
        return;
 8009272:	e079      	b.n	8009368 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d01d      	beq.n	80092be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10d      	bne.n	80092ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009294:	2b00      	cmp	r3, #0
 8009296:	d031      	beq.n	80092fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
 80092a0:	e02c      	b.n	80092fc <HAL_DMA_IRQHandler+0x2a0>
 80092a2:	bf00      	nop
 80092a4:	20004ed0 	.word	0x20004ed0
 80092a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d023      	beq.n	80092fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	4798      	blx	r3
 80092bc:	e01e      	b.n	80092fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d10f      	bne.n	80092ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f022 0210 	bic.w	r2, r2, #16
 80092da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2201      	movs	r2, #1
 80092e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d003      	beq.n	80092fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009300:	2b00      	cmp	r3, #0
 8009302:	d032      	beq.n	800936a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009308:	f003 0301 	and.w	r3, r3, #1
 800930c:	2b00      	cmp	r3, #0
 800930e:	d022      	beq.n	8009356 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2205      	movs	r2, #5
 8009314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f022 0201 	bic.w	r2, r2, #1
 8009326:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	3301      	adds	r3, #1
 800932c:	60bb      	str	r3, [r7, #8]
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	429a      	cmp	r2, r3
 8009332:	d307      	bcc.n	8009344 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 0301 	and.w	r3, r3, #1
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1f2      	bne.n	8009328 <HAL_DMA_IRQHandler+0x2cc>
 8009342:	e000      	b.n	8009346 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009344:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800935a:	2b00      	cmp	r3, #0
 800935c:	d005      	beq.n	800936a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
 8009366:	e000      	b.n	800936a <HAL_DMA_IRQHandler+0x30e>
        return;
 8009368:	bf00      	nop
    }
  }
}
 800936a:	3718      	adds	r7, #24
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800937c:	4618      	mov	r0, r3
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80093a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	2b40      	cmp	r3, #64	@ 0x40
 80093b4:	d108      	bne.n	80093c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80093c6:	e007      	b.n	80093d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	60da      	str	r2, [r3, #12]
}
 80093d8:	bf00      	nop
 80093da:	3714      	adds	r7, #20
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	b2db      	uxtb	r3, r3
 80093f2:	3b10      	subs	r3, #16
 80093f4:	4a13      	ldr	r2, [pc, #76]	@ (8009444 <DMA_CalcBaseAndBitshift+0x60>)
 80093f6:	fba2 2303 	umull	r2, r3, r2, r3
 80093fa:	091b      	lsrs	r3, r3, #4
 80093fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80093fe:	4a12      	ldr	r2, [pc, #72]	@ (8009448 <DMA_CalcBaseAndBitshift+0x64>)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	2b03      	cmp	r3, #3
 8009410:	d908      	bls.n	8009424 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	4b0c      	ldr	r3, [pc, #48]	@ (800944c <DMA_CalcBaseAndBitshift+0x68>)
 800941a:	4013      	ands	r3, r2
 800941c:	1d1a      	adds	r2, r3, #4
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	659a      	str	r2, [r3, #88]	@ 0x58
 8009422:	e006      	b.n	8009432 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	461a      	mov	r2, r3
 800942a:	4b08      	ldr	r3, [pc, #32]	@ (800944c <DMA_CalcBaseAndBitshift+0x68>)
 800942c:	4013      	ands	r3, r2
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009436:	4618      	mov	r0, r3
 8009438:	3714      	adds	r7, #20
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	aaaaaaab 	.word	0xaaaaaaab
 8009448:	0801ad5c 	.word	0x0801ad5c
 800944c:	fffffc00 	.word	0xfffffc00

08009450 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009460:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d11f      	bne.n	80094aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b03      	cmp	r3, #3
 800946e:	d856      	bhi.n	800951e <DMA_CheckFifoParam+0xce>
 8009470:	a201      	add	r2, pc, #4	@ (adr r2, 8009478 <DMA_CheckFifoParam+0x28>)
 8009472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009476:	bf00      	nop
 8009478:	08009489 	.word	0x08009489
 800947c:	0800949b 	.word	0x0800949b
 8009480:	08009489 	.word	0x08009489
 8009484:	0800951f 	.word	0x0800951f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800948c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d046      	beq.n	8009522 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009498:	e043      	b.n	8009522 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80094a2:	d140      	bne.n	8009526 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094a8:	e03d      	b.n	8009526 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80094b2:	d121      	bne.n	80094f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b03      	cmp	r3, #3
 80094b8:	d837      	bhi.n	800952a <DMA_CheckFifoParam+0xda>
 80094ba:	a201      	add	r2, pc, #4	@ (adr r2, 80094c0 <DMA_CheckFifoParam+0x70>)
 80094bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c0:	080094d1 	.word	0x080094d1
 80094c4:	080094d7 	.word	0x080094d7
 80094c8:	080094d1 	.word	0x080094d1
 80094cc:	080094e9 	.word	0x080094e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	73fb      	strb	r3, [r7, #15]
      break;
 80094d4:	e030      	b.n	8009538 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d025      	beq.n	800952e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094e6:	e022      	b.n	800952e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80094f0:	d11f      	bne.n	8009532 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80094f2:	2301      	movs	r3, #1
 80094f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80094f6:	e01c      	b.n	8009532 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	d903      	bls.n	8009506 <DMA_CheckFifoParam+0xb6>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	2b03      	cmp	r3, #3
 8009502:	d003      	beq.n	800950c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009504:	e018      	b.n	8009538 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	73fb      	strb	r3, [r7, #15]
      break;
 800950a:	e015      	b.n	8009538 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009510:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d00e      	beq.n	8009536 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	73fb      	strb	r3, [r7, #15]
      break;
 800951c:	e00b      	b.n	8009536 <DMA_CheckFifoParam+0xe6>
      break;
 800951e:	bf00      	nop
 8009520:	e00a      	b.n	8009538 <DMA_CheckFifoParam+0xe8>
      break;
 8009522:	bf00      	nop
 8009524:	e008      	b.n	8009538 <DMA_CheckFifoParam+0xe8>
      break;
 8009526:	bf00      	nop
 8009528:	e006      	b.n	8009538 <DMA_CheckFifoParam+0xe8>
      break;
 800952a:	bf00      	nop
 800952c:	e004      	b.n	8009538 <DMA_CheckFifoParam+0xe8>
      break;
 800952e:	bf00      	nop
 8009530:	e002      	b.n	8009538 <DMA_CheckFifoParam+0xe8>
      break;   
 8009532:	bf00      	nop
 8009534:	e000      	b.n	8009538 <DMA_CheckFifoParam+0xe8>
      break;
 8009536:	bf00      	nop
    }
  } 
  
  return status; 
 8009538:	7bfb      	ldrb	r3, [r7, #15]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr
 8009546:	bf00      	nop

08009548 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e039      	b.n	80095ce <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8009560:	b2db      	uxtb	r3, r3
 8009562:	2b00      	cmp	r3, #0
 8009564:	d106      	bne.n	8009574 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f7f9 fee4 	bl	800333c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2202      	movs	r2, #2
 8009578:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685a      	ldr	r2, [r3, #4]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	430a      	orrs	r2, r1
 8009590:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009598:	f023 0107 	bic.w	r1, r3, #7
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	689a      	ldr	r2, [r3, #8]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	430a      	orrs	r2, r1
 80095a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095ae:	4b0a      	ldr	r3, [pc, #40]	@ (80095d8 <HAL_DMA2D_Init+0x90>)
 80095b0:	4013      	ands	r3, r2
 80095b2:	687a      	ldr	r2, [r7, #4]
 80095b4:	68d1      	ldr	r1, [r2, #12]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	6812      	ldr	r2, [r2, #0]
 80095ba:	430b      	orrs	r3, r1
 80095bc:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	ffffc000 	.word	0xffffc000

080095dc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d101      	bne.n	80095f8 <HAL_DMA2D_Start+0x1c>
 80095f4:	2302      	movs	r3, #2
 80095f6:	e018      	b.n	800962a <HAL_DMA2D_Start+0x4e>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2202      	movs	r2, #2
 8009604:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	68b9      	ldr	r1, [r7, #8]
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 f988 	bl	8009928 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0201 	orr.w	r2, r2, #1
 8009626:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b086      	sub	sp, #24
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800963c:	2300      	movs	r3, #0
 800963e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b00      	cmp	r3, #0
 800964c:	d056      	beq.n	80096fc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800964e:	f7fe fe07 	bl	8008260 <HAL_GetTick>
 8009652:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8009654:	e04b      	b.n	80096ee <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8009664:	2b00      	cmp	r3, #0
 8009666:	d023      	beq.n	80096b0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f003 0320 	and.w	r3, r3, #32
 800966e:	2b00      	cmp	r3, #0
 8009670:	d005      	beq.n	800967e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009676:	f043 0202 	orr.w	r2, r3, #2
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f003 0301 	and.w	r3, r3, #1
 8009684:	2b00      	cmp	r3, #0
 8009686:	d005      	beq.n	8009694 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800968c:	f043 0201 	orr.w	r2, r3, #1
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2221      	movs	r2, #33	@ 0x21
 800969a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2204      	movs	r2, #4
 80096a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e0a5      	b.n	80097fc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b6:	d01a      	beq.n	80096ee <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80096b8:	f7fe fdd2 	bl	8008260 <HAL_GetTick>
 80096bc:	4602      	mov	r2, r0
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	1ad3      	subs	r3, r2, r3
 80096c2:	683a      	ldr	r2, [r7, #0]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d302      	bcc.n	80096ce <HAL_DMA2D_PollForTransfer+0x9c>
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d10f      	bne.n	80096ee <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d2:	f043 0220 	orr.w	r2, r3, #32
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2203      	movs	r2, #3
 80096de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e086      	b.n	80097fc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0ac      	beq.n	8009656 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	f003 0320 	and.w	r3, r3, #32
 8009706:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	4313      	orrs	r3, r2
 8009716:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d061      	beq.n	80097e2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800971e:	f7fe fd9f 	bl	8008260 <HAL_GetTick>
 8009722:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8009724:	e056      	b.n	80097d4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8009734:	2b00      	cmp	r3, #0
 8009736:	d02e      	beq.n	8009796 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f003 0308 	and.w	r3, r3, #8
 800973e:	2b00      	cmp	r3, #0
 8009740:	d005      	beq.n	800974e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009746:	f043 0204 	orr.w	r2, r3, #4
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f003 0320 	and.w	r3, r3, #32
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800975c:	f043 0202 	orr.w	r2, r3, #2
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f003 0301 	and.w	r3, r3, #1
 800976a:	2b00      	cmp	r3, #0
 800976c:	d005      	beq.n	800977a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009772:	f043 0201 	orr.w	r2, r3, #1
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	2229      	movs	r2, #41	@ 0x29
 8009780:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2204      	movs	r2, #4
 8009786:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e032      	b.n	80097fc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979c:	d01a      	beq.n	80097d4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800979e:	f7fe fd5f 	bl	8008260 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d302      	bcc.n	80097b4 <HAL_DMA2D_PollForTransfer+0x182>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10f      	bne.n	80097d4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097b8:	f043 0220 	orr.w	r2, r3, #32
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2203      	movs	r2, #3
 80097c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e013      	b.n	80097fc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f003 0310 	and.w	r3, r3, #16
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d0a1      	beq.n	8009726 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2212      	movs	r2, #18
 80097e8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8009804:	b480      	push	{r7}
 8009806:	b087      	sub	sp, #28
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <HAL_DMA2D_ConfigLayer+0x20>
 8009820:	2302      	movs	r3, #2
 8009822:	e079      	b.n	8009918 <HAL_DMA2D_ConfigLayer+0x114>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2202      	movs	r2, #2
 8009830:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	011b      	lsls	r3, r3, #4
 8009838:	3318      	adds	r3, #24
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	4413      	add	r3, r2
 800983e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	689b      	ldr	r3, [r3, #8]
 8009848:	041b      	lsls	r3, r3, #16
 800984a:	4313      	orrs	r3, r2
 800984c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800984e:	4b35      	ldr	r3, [pc, #212]	@ (8009924 <HAL_DMA2D_ConfigLayer+0x120>)
 8009850:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	2b0a      	cmp	r3, #10
 8009858:	d003      	beq.n	8009862 <HAL_DMA2D_ConfigLayer+0x5e>
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	2b09      	cmp	r3, #9
 8009860:	d107      	bne.n	8009872 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	4313      	orrs	r3, r2
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	e005      	b.n	800987e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	061b      	lsls	r3, r3, #24
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	4313      	orrs	r3, r2
 800987c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d120      	bne.n	80098c6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	43db      	mvns	r3, r3
 800988e:	ea02 0103 	and.w	r1, r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	697a      	ldr	r2, [r7, #20]
 8009898:	430a      	orrs	r2, r1
 800989a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	6812      	ldr	r2, [r2, #0]
 80098a4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	2b0a      	cmp	r3, #10
 80098ac:	d003      	beq.n	80098b6 <HAL_DMA2D_ConfigLayer+0xb2>
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	2b09      	cmp	r3, #9
 80098b4:	d127      	bne.n	8009906 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	68da      	ldr	r2, [r3, #12]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80098c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80098c4:	e01f      	b.n	8009906 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	69da      	ldr	r2, [r3, #28]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	43db      	mvns	r3, r3
 80098d0:	ea02 0103 	and.w	r1, r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	430a      	orrs	r2, r1
 80098dc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	693a      	ldr	r2, [r7, #16]
 80098e4:	6812      	ldr	r2, [r2, #0]
 80098e6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	2b0a      	cmp	r3, #10
 80098ee:	d003      	beq.n	80098f8 <HAL_DMA2D_ConfigLayer+0xf4>
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	2b09      	cmp	r3, #9
 80098f6:	d106      	bne.n	8009906 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8009904:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	ff03000f 	.word	0xff03000f

08009928 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8009928:	b480      	push	{r7}
 800992a:	b08b      	sub	sp, #44	@ 0x2c
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800993c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	041a      	lsls	r2, r3, #16
 8009944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009946:	431a      	orrs	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	430a      	orrs	r2, r1
 800994e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009960:	d174      	bne.n	8009a4c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8009968:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009970:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009978:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	b2db      	uxtb	r3, r3
 800997e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d108      	bne.n	800999a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8009988:	69ba      	ldr	r2, [r7, #24]
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	431a      	orrs	r2, r3
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	4313      	orrs	r3, r2
 8009992:	697a      	ldr	r2, [r7, #20]
 8009994:	4313      	orrs	r3, r2
 8009996:	627b      	str	r3, [r7, #36]	@ 0x24
 8009998:	e053      	b.n	8009a42 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d106      	bne.n	80099b0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	4313      	orrs	r3, r2
 80099ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80099ae:	e048      	b.n	8009a42 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d111      	bne.n	80099dc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80099b8:	69fb      	ldr	r3, [r7, #28]
 80099ba:	0cdb      	lsrs	r3, r3, #19
 80099bc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	0a9b      	lsrs	r3, r3, #10
 80099c2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	08db      	lsrs	r3, r3, #3
 80099c8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	015a      	lsls	r2, r3, #5
 80099ce:	69fb      	ldr	r3, [r7, #28]
 80099d0:	02db      	lsls	r3, r3, #11
 80099d2:	4313      	orrs	r3, r2
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80099da:	e032      	b.n	8009a42 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	2b03      	cmp	r3, #3
 80099e2:	d117      	bne.n	8009a14 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	0fdb      	lsrs	r3, r3, #31
 80099e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80099ea:	69fb      	ldr	r3, [r7, #28]
 80099ec:	0cdb      	lsrs	r3, r3, #19
 80099ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	0adb      	lsrs	r3, r3, #11
 80099f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	08db      	lsrs	r3, r3, #3
 80099fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	69fb      	ldr	r3, [r7, #28]
 8009a02:	029b      	lsls	r3, r3, #10
 8009a04:	431a      	orrs	r2, r3
 8009a06:	6a3b      	ldr	r3, [r7, #32]
 8009a08:	03db      	lsls	r3, r3, #15
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a12:	e016      	b.n	8009a42 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8009a14:	6a3b      	ldr	r3, [r7, #32]
 8009a16:	0f1b      	lsrs	r3, r3, #28
 8009a18:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	0d1b      	lsrs	r3, r3, #20
 8009a1e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	0b1b      	lsrs	r3, r3, #12
 8009a24:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	091b      	lsrs	r3, r3, #4
 8009a2a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8009a2c:	69bb      	ldr	r3, [r7, #24]
 8009a2e:	011a      	lsls	r2, r3, #4
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	021b      	lsls	r3, r3, #8
 8009a34:	431a      	orrs	r2, r3
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	031b      	lsls	r3, r3, #12
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a48:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8009a4a:	e003      	b.n	8009a54 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	60da      	str	r2, [r3, #12]
}
 8009a54:	bf00      	nop
 8009a56:	372c      	adds	r7, #44	@ 0x2c
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b089      	sub	sp, #36	@ 0x24
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8009a72:	2300      	movs	r3, #0
 8009a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8009a76:	2300      	movs	r3, #0
 8009a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	61fb      	str	r3, [r7, #28]
 8009a7e:	e175      	b.n	8009d6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009a80:	2201      	movs	r2, #1
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	fa02 f303 	lsl.w	r3, r2, r3
 8009a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	4013      	ands	r3, r2
 8009a92:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	f040 8164 	bne.w	8009d66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	f003 0303 	and.w	r3, r3, #3
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d005      	beq.n	8009ab6 <HAL_GPIO_Init+0x56>
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f003 0303 	and.w	r3, r3, #3
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d130      	bne.n	8009b18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	689b      	ldr	r3, [r3, #8]
 8009aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	005b      	lsls	r3, r3, #1
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac6:	43db      	mvns	r3, r3
 8009ac8:	69ba      	ldr	r2, [r7, #24]
 8009aca:	4013      	ands	r3, r2
 8009acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	68da      	ldr	r2, [r3, #12]
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	005b      	lsls	r3, r3, #1
 8009ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8009ada:	69ba      	ldr	r2, [r7, #24]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	69ba      	ldr	r2, [r7, #24]
 8009ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009aec:	2201      	movs	r2, #1
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	fa02 f303 	lsl.w	r3, r2, r3
 8009af4:	43db      	mvns	r3, r3
 8009af6:	69ba      	ldr	r2, [r7, #24]
 8009af8:	4013      	ands	r3, r2
 8009afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	091b      	lsrs	r3, r3, #4
 8009b02:	f003 0201 	and.w	r2, r3, #1
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0c:	69ba      	ldr	r2, [r7, #24]
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f003 0303 	and.w	r3, r3, #3
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d017      	beq.n	8009b54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	005b      	lsls	r3, r3, #1
 8009b2e:	2203      	movs	r2, #3
 8009b30:	fa02 f303 	lsl.w	r3, r2, r3
 8009b34:	43db      	mvns	r3, r3
 8009b36:	69ba      	ldr	r2, [r7, #24]
 8009b38:	4013      	ands	r3, r2
 8009b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	fa02 f303 	lsl.w	r3, r2, r3
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	4313      	orrs	r3, r2
 8009b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	69ba      	ldr	r2, [r7, #24]
 8009b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d123      	bne.n	8009ba8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8009b60:	69fb      	ldr	r3, [r7, #28]
 8009b62:	08da      	lsrs	r2, r3, #3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	3208      	adds	r2, #8
 8009b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	f003 0307 	and.w	r3, r3, #7
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	220f      	movs	r2, #15
 8009b78:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7c:	43db      	mvns	r3, r3
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	4013      	ands	r3, r2
 8009b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	691a      	ldr	r2, [r3, #16]
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	f003 0307 	and.w	r3, r3, #7
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	fa02 f303 	lsl.w	r3, r2, r3
 8009b94:	69ba      	ldr	r2, [r7, #24]
 8009b96:	4313      	orrs	r3, r2
 8009b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	08da      	lsrs	r2, r3, #3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	3208      	adds	r2, #8
 8009ba2:	69b9      	ldr	r1, [r7, #24]
 8009ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	005b      	lsls	r3, r3, #1
 8009bb2:	2203      	movs	r2, #3
 8009bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb8:	43db      	mvns	r3, r3
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f003 0203 	and.w	r2, r3, #3
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8009bd0:	69ba      	ldr	r2, [r7, #24]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	69ba      	ldr	r2, [r7, #24]
 8009bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 80be 	beq.w	8009d66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009bea:	4b66      	ldr	r3, [pc, #408]	@ (8009d84 <HAL_GPIO_Init+0x324>)
 8009bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bee:	4a65      	ldr	r2, [pc, #404]	@ (8009d84 <HAL_GPIO_Init+0x324>)
 8009bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8009bf6:	4b63      	ldr	r3, [pc, #396]	@ (8009d84 <HAL_GPIO_Init+0x324>)
 8009bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009c02:	4a61      	ldr	r2, [pc, #388]	@ (8009d88 <HAL_GPIO_Init+0x328>)
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	089b      	lsrs	r3, r3, #2
 8009c08:	3302      	adds	r3, #2
 8009c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	f003 0303 	and.w	r3, r3, #3
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	220f      	movs	r2, #15
 8009c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1e:	43db      	mvns	r3, r3
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	4013      	ands	r3, r2
 8009c24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a58      	ldr	r2, [pc, #352]	@ (8009d8c <HAL_GPIO_Init+0x32c>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d037      	beq.n	8009c9e <HAL_GPIO_Init+0x23e>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a57      	ldr	r2, [pc, #348]	@ (8009d90 <HAL_GPIO_Init+0x330>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d031      	beq.n	8009c9a <HAL_GPIO_Init+0x23a>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a56      	ldr	r2, [pc, #344]	@ (8009d94 <HAL_GPIO_Init+0x334>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d02b      	beq.n	8009c96 <HAL_GPIO_Init+0x236>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a55      	ldr	r2, [pc, #340]	@ (8009d98 <HAL_GPIO_Init+0x338>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d025      	beq.n	8009c92 <HAL_GPIO_Init+0x232>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a54      	ldr	r2, [pc, #336]	@ (8009d9c <HAL_GPIO_Init+0x33c>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d01f      	beq.n	8009c8e <HAL_GPIO_Init+0x22e>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a53      	ldr	r2, [pc, #332]	@ (8009da0 <HAL_GPIO_Init+0x340>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d019      	beq.n	8009c8a <HAL_GPIO_Init+0x22a>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a52      	ldr	r2, [pc, #328]	@ (8009da4 <HAL_GPIO_Init+0x344>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d013      	beq.n	8009c86 <HAL_GPIO_Init+0x226>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a51      	ldr	r2, [pc, #324]	@ (8009da8 <HAL_GPIO_Init+0x348>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d00d      	beq.n	8009c82 <HAL_GPIO_Init+0x222>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a50      	ldr	r2, [pc, #320]	@ (8009dac <HAL_GPIO_Init+0x34c>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d007      	beq.n	8009c7e <HAL_GPIO_Init+0x21e>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a4f      	ldr	r2, [pc, #316]	@ (8009db0 <HAL_GPIO_Init+0x350>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d101      	bne.n	8009c7a <HAL_GPIO_Init+0x21a>
 8009c76:	2309      	movs	r3, #9
 8009c78:	e012      	b.n	8009ca0 <HAL_GPIO_Init+0x240>
 8009c7a:	230a      	movs	r3, #10
 8009c7c:	e010      	b.n	8009ca0 <HAL_GPIO_Init+0x240>
 8009c7e:	2308      	movs	r3, #8
 8009c80:	e00e      	b.n	8009ca0 <HAL_GPIO_Init+0x240>
 8009c82:	2307      	movs	r3, #7
 8009c84:	e00c      	b.n	8009ca0 <HAL_GPIO_Init+0x240>
 8009c86:	2306      	movs	r3, #6
 8009c88:	e00a      	b.n	8009ca0 <HAL_GPIO_Init+0x240>
 8009c8a:	2305      	movs	r3, #5
 8009c8c:	e008      	b.n	8009ca0 <HAL_GPIO_Init+0x240>
 8009c8e:	2304      	movs	r3, #4
 8009c90:	e006      	b.n	8009ca0 <HAL_GPIO_Init+0x240>
 8009c92:	2303      	movs	r3, #3
 8009c94:	e004      	b.n	8009ca0 <HAL_GPIO_Init+0x240>
 8009c96:	2302      	movs	r3, #2
 8009c98:	e002      	b.n	8009ca0 <HAL_GPIO_Init+0x240>
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e000      	b.n	8009ca0 <HAL_GPIO_Init+0x240>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	69fa      	ldr	r2, [r7, #28]
 8009ca2:	f002 0203 	and.w	r2, r2, #3
 8009ca6:	0092      	lsls	r2, r2, #2
 8009ca8:	4093      	lsls	r3, r2
 8009caa:	69ba      	ldr	r2, [r7, #24]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8009cb0:	4935      	ldr	r1, [pc, #212]	@ (8009d88 <HAL_GPIO_Init+0x328>)
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	089b      	lsrs	r3, r3, #2
 8009cb6:	3302      	adds	r3, #2
 8009cb8:	69ba      	ldr	r2, [r7, #24]
 8009cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009cbe:	4b3d      	ldr	r3, [pc, #244]	@ (8009db4 <HAL_GPIO_Init+0x354>)
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	43db      	mvns	r3, r3
 8009cc8:	69ba      	ldr	r2, [r7, #24]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	4313      	orrs	r3, r2
 8009ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009ce2:	4a34      	ldr	r2, [pc, #208]	@ (8009db4 <HAL_GPIO_Init+0x354>)
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009ce8:	4b32      	ldr	r3, [pc, #200]	@ (8009db4 <HAL_GPIO_Init+0x354>)
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	43db      	mvns	r3, r3
 8009cf2:	69ba      	ldr	r2, [r7, #24]
 8009cf4:	4013      	ands	r3, r2
 8009cf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d003      	beq.n	8009d0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009d04:	69ba      	ldr	r2, [r7, #24]
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009d0c:	4a29      	ldr	r2, [pc, #164]	@ (8009db4 <HAL_GPIO_Init+0x354>)
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009d12:	4b28      	ldr	r3, [pc, #160]	@ (8009db4 <HAL_GPIO_Init+0x354>)
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	43db      	mvns	r3, r3
 8009d1c:	69ba      	ldr	r2, [r7, #24]
 8009d1e:	4013      	ands	r3, r2
 8009d20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009d2e:	69ba      	ldr	r2, [r7, #24]
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	4313      	orrs	r3, r2
 8009d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009d36:	4a1f      	ldr	r2, [pc, #124]	@ (8009db4 <HAL_GPIO_Init+0x354>)
 8009d38:	69bb      	ldr	r3, [r7, #24]
 8009d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8009db4 <HAL_GPIO_Init+0x354>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	43db      	mvns	r3, r3
 8009d46:	69ba      	ldr	r2, [r7, #24]
 8009d48:	4013      	ands	r3, r2
 8009d4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8009d58:	69ba      	ldr	r2, [r7, #24]
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009d60:	4a14      	ldr	r2, [pc, #80]	@ (8009db4 <HAL_GPIO_Init+0x354>)
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	61fb      	str	r3, [r7, #28]
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	2b0f      	cmp	r3, #15
 8009d70:	f67f ae86 	bls.w	8009a80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8009d74:	bf00      	nop
 8009d76:	bf00      	nop
 8009d78:	3724      	adds	r7, #36	@ 0x24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	40023800 	.word	0x40023800
 8009d88:	40013800 	.word	0x40013800
 8009d8c:	40020000 	.word	0x40020000
 8009d90:	40020400 	.word	0x40020400
 8009d94:	40020800 	.word	0x40020800
 8009d98:	40020c00 	.word	0x40020c00
 8009d9c:	40021000 	.word	0x40021000
 8009da0:	40021400 	.word	0x40021400
 8009da4:	40021800 	.word	0x40021800
 8009da8:	40021c00 	.word	0x40021c00
 8009dac:	40022000 	.word	0x40022000
 8009db0:	40022400 	.word	0x40022400
 8009db4:	40013c00 	.word	0x40013c00

08009db8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8009dce:	2300      	movs	r3, #0
 8009dd0:	617b      	str	r3, [r7, #20]
 8009dd2:	e0d9      	b.n	8009f88 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8009ddc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	4013      	ands	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	f040 80c9 	bne.w	8009f82 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8009df0:	4a6b      	ldr	r2, [pc, #428]	@ (8009fa0 <HAL_GPIO_DeInit+0x1e8>)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	089b      	lsrs	r3, r3, #2
 8009df6:	3302      	adds	r3, #2
 8009df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009dfc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f003 0303 	and.w	r3, r3, #3
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	220f      	movs	r2, #15
 8009e08:	fa02 f303 	lsl.w	r3, r2, r3
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	4013      	ands	r3, r2
 8009e10:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a63      	ldr	r2, [pc, #396]	@ (8009fa4 <HAL_GPIO_DeInit+0x1ec>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d037      	beq.n	8009e8a <HAL_GPIO_DeInit+0xd2>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a62      	ldr	r2, [pc, #392]	@ (8009fa8 <HAL_GPIO_DeInit+0x1f0>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d031      	beq.n	8009e86 <HAL_GPIO_DeInit+0xce>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a61      	ldr	r2, [pc, #388]	@ (8009fac <HAL_GPIO_DeInit+0x1f4>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d02b      	beq.n	8009e82 <HAL_GPIO_DeInit+0xca>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a60      	ldr	r2, [pc, #384]	@ (8009fb0 <HAL_GPIO_DeInit+0x1f8>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d025      	beq.n	8009e7e <HAL_GPIO_DeInit+0xc6>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a5f      	ldr	r2, [pc, #380]	@ (8009fb4 <HAL_GPIO_DeInit+0x1fc>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d01f      	beq.n	8009e7a <HAL_GPIO_DeInit+0xc2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a5e      	ldr	r2, [pc, #376]	@ (8009fb8 <HAL_GPIO_DeInit+0x200>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d019      	beq.n	8009e76 <HAL_GPIO_DeInit+0xbe>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a5d      	ldr	r2, [pc, #372]	@ (8009fbc <HAL_GPIO_DeInit+0x204>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d013      	beq.n	8009e72 <HAL_GPIO_DeInit+0xba>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a5c      	ldr	r2, [pc, #368]	@ (8009fc0 <HAL_GPIO_DeInit+0x208>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d00d      	beq.n	8009e6e <HAL_GPIO_DeInit+0xb6>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a5b      	ldr	r2, [pc, #364]	@ (8009fc4 <HAL_GPIO_DeInit+0x20c>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d007      	beq.n	8009e6a <HAL_GPIO_DeInit+0xb2>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8009fc8 <HAL_GPIO_DeInit+0x210>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d101      	bne.n	8009e66 <HAL_GPIO_DeInit+0xae>
 8009e62:	2309      	movs	r3, #9
 8009e64:	e012      	b.n	8009e8c <HAL_GPIO_DeInit+0xd4>
 8009e66:	230a      	movs	r3, #10
 8009e68:	e010      	b.n	8009e8c <HAL_GPIO_DeInit+0xd4>
 8009e6a:	2308      	movs	r3, #8
 8009e6c:	e00e      	b.n	8009e8c <HAL_GPIO_DeInit+0xd4>
 8009e6e:	2307      	movs	r3, #7
 8009e70:	e00c      	b.n	8009e8c <HAL_GPIO_DeInit+0xd4>
 8009e72:	2306      	movs	r3, #6
 8009e74:	e00a      	b.n	8009e8c <HAL_GPIO_DeInit+0xd4>
 8009e76:	2305      	movs	r3, #5
 8009e78:	e008      	b.n	8009e8c <HAL_GPIO_DeInit+0xd4>
 8009e7a:	2304      	movs	r3, #4
 8009e7c:	e006      	b.n	8009e8c <HAL_GPIO_DeInit+0xd4>
 8009e7e:	2303      	movs	r3, #3
 8009e80:	e004      	b.n	8009e8c <HAL_GPIO_DeInit+0xd4>
 8009e82:	2302      	movs	r3, #2
 8009e84:	e002      	b.n	8009e8c <HAL_GPIO_DeInit+0xd4>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e000      	b.n	8009e8c <HAL_GPIO_DeInit+0xd4>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	f002 0203 	and.w	r2, r2, #3
 8009e92:	0092      	lsls	r2, r2, #2
 8009e94:	4093      	lsls	r3, r2
 8009e96:	68ba      	ldr	r2, [r7, #8]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d132      	bne.n	8009f02 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009e9c:	4b4b      	ldr	r3, [pc, #300]	@ (8009fcc <HAL_GPIO_DeInit+0x214>)
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	43db      	mvns	r3, r3
 8009ea4:	4949      	ldr	r1, [pc, #292]	@ (8009fcc <HAL_GPIO_DeInit+0x214>)
 8009ea6:	4013      	ands	r3, r2
 8009ea8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009eaa:	4b48      	ldr	r3, [pc, #288]	@ (8009fcc <HAL_GPIO_DeInit+0x214>)
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	43db      	mvns	r3, r3
 8009eb2:	4946      	ldr	r1, [pc, #280]	@ (8009fcc <HAL_GPIO_DeInit+0x214>)
 8009eb4:	4013      	ands	r3, r2
 8009eb6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009eb8:	4b44      	ldr	r3, [pc, #272]	@ (8009fcc <HAL_GPIO_DeInit+0x214>)
 8009eba:	68da      	ldr	r2, [r3, #12]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	43db      	mvns	r3, r3
 8009ec0:	4942      	ldr	r1, [pc, #264]	@ (8009fcc <HAL_GPIO_DeInit+0x214>)
 8009ec2:	4013      	ands	r3, r2
 8009ec4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009ec6:	4b41      	ldr	r3, [pc, #260]	@ (8009fcc <HAL_GPIO_DeInit+0x214>)
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	43db      	mvns	r3, r3
 8009ece:	493f      	ldr	r1, [pc, #252]	@ (8009fcc <HAL_GPIO_DeInit+0x214>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f003 0303 	and.w	r3, r3, #3
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	220f      	movs	r2, #15
 8009ede:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009ee4:	4a2e      	ldr	r2, [pc, #184]	@ (8009fa0 <HAL_GPIO_DeInit+0x1e8>)
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	089b      	lsrs	r3, r3, #2
 8009eea:	3302      	adds	r3, #2
 8009eec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	43da      	mvns	r2, r3
 8009ef4:	482a      	ldr	r0, [pc, #168]	@ (8009fa0 <HAL_GPIO_DeInit+0x1e8>)
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	089b      	lsrs	r3, r3, #2
 8009efa:	400a      	ands	r2, r1
 8009efc:	3302      	adds	r3, #2
 8009efe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	005b      	lsls	r3, r3, #1
 8009f0a:	2103      	movs	r1, #3
 8009f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f10:	43db      	mvns	r3, r3
 8009f12:	401a      	ands	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	08da      	lsrs	r2, r3, #3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	3208      	adds	r2, #8
 8009f20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	f003 0307 	and.w	r3, r3, #7
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	220f      	movs	r2, #15
 8009f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f32:	43db      	mvns	r3, r3
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	08d2      	lsrs	r2, r2, #3
 8009f38:	4019      	ands	r1, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	3208      	adds	r2, #8
 8009f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	005b      	lsls	r3, r3, #1
 8009f4a:	2103      	movs	r1, #3
 8009f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f50:	43db      	mvns	r3, r3
 8009f52:	401a      	ands	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	fa01 f303 	lsl.w	r3, r1, r3
 8009f64:	43db      	mvns	r3, r3
 8009f66:	401a      	ands	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	689a      	ldr	r2, [r3, #8]
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	005b      	lsls	r3, r3, #1
 8009f74:	2103      	movs	r1, #3
 8009f76:	fa01 f303 	lsl.w	r3, r1, r3
 8009f7a:	43db      	mvns	r3, r3
 8009f7c:	401a      	ands	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	3301      	adds	r3, #1
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	2b0f      	cmp	r3, #15
 8009f8c:	f67f af22 	bls.w	8009dd4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009f90:	bf00      	nop
 8009f92:	bf00      	nop
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	40013800 	.word	0x40013800
 8009fa4:	40020000 	.word	0x40020000
 8009fa8:	40020400 	.word	0x40020400
 8009fac:	40020800 	.word	0x40020800
 8009fb0:	40020c00 	.word	0x40020c00
 8009fb4:	40021000 	.word	0x40021000
 8009fb8:	40021400 	.word	0x40021400
 8009fbc:	40021800 	.word	0x40021800
 8009fc0:	40021c00 	.word	0x40021c00
 8009fc4:	40022000 	.word	0x40022000
 8009fc8:	40022400 	.word	0x40022400
 8009fcc:	40013c00 	.word	0x40013c00

08009fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	460b      	mov	r3, r1
 8009fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691a      	ldr	r2, [r3, #16]
 8009fe0:	887b      	ldrh	r3, [r7, #2]
 8009fe2:	4013      	ands	r3, r2
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	73fb      	strb	r3, [r7, #15]
 8009fec:	e001      	b.n	8009ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr

0800a000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a000:	b480      	push	{r7}
 800a002:	b083      	sub	sp, #12
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	460b      	mov	r3, r1
 800a00a:	807b      	strh	r3, [r7, #2]
 800a00c:	4613      	mov	r3, r2
 800a00e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a010:	787b      	ldrb	r3, [r7, #1]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d003      	beq.n	800a01e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a016:	887a      	ldrh	r2, [r7, #2]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800a01c:	e003      	b.n	800a026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a01e:	887b      	ldrh	r3, [r7, #2]
 800a020:	041a      	lsls	r2, r3, #16
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	619a      	str	r2, [r3, #24]
}
 800a026:	bf00      	nop
 800a028:	370c      	adds	r7, #12
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
	...

0800a034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a03e:	4b08      	ldr	r3, [pc, #32]	@ (800a060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a040:	695a      	ldr	r2, [r3, #20]
 800a042:	88fb      	ldrh	r3, [r7, #6]
 800a044:	4013      	ands	r3, r2
 800a046:	2b00      	cmp	r3, #0
 800a048:	d006      	beq.n	800a058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a04a:	4a05      	ldr	r2, [pc, #20]	@ (800a060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a04c:	88fb      	ldrh	r3, [r7, #6]
 800a04e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a050:	88fb      	ldrh	r3, [r7, #6]
 800a052:	4618      	mov	r0, r3
 800a054:	f7fa fe4e 	bl	8004cf4 <HAL_GPIO_EXTI_Callback>
  }
}
 800a058:	bf00      	nop
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	40013c00 	.word	0x40013c00

0800a064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e08b      	b.n	800a18e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7f9 fc64 	bl	8003958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2224      	movs	r2, #36	@ 0x24
 800a094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f022 0201 	bic.w	r2, r2, #1
 800a0a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a0b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	689a      	ldr	r2, [r3, #8]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a0c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d107      	bne.n	800a0de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	689a      	ldr	r2, [r3, #8]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0da:	609a      	str	r2, [r3, #8]
 800a0dc:	e006      	b.n	800a0ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689a      	ldr	r2, [r3, #8]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a0ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d108      	bne.n	800a106 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685a      	ldr	r2, [r3, #4]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a102:	605a      	str	r2, [r3, #4]
 800a104:	e007      	b.n	800a116 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	685a      	ldr	r2, [r3, #4]
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a114:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6859      	ldr	r1, [r3, #4]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	4b1d      	ldr	r3, [pc, #116]	@ (800a198 <HAL_I2C_Init+0x134>)
 800a122:	430b      	orrs	r3, r1
 800a124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68da      	ldr	r2, [r3, #12]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	691a      	ldr	r2, [r3, #16]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	699b      	ldr	r3, [r3, #24]
 800a146:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	430a      	orrs	r2, r1
 800a14e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	69d9      	ldr	r1, [r3, #28]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6a1a      	ldr	r2, [r3, #32]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	430a      	orrs	r2, r1
 800a15e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f042 0201 	orr.w	r2, r2, #1
 800a16e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2220      	movs	r2, #32
 800a17a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	02008000 	.word	0x02008000

0800a19c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d101      	bne.n	800a1ae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	e021      	b.n	800a1f2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2224      	movs	r2, #36	@ 0x24
 800a1b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f022 0201 	bic.w	r2, r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f7f9 fc6e 	bl	8003aa8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a1f0:	2300      	movs	r3, #0
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}
	...

0800a1fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b088      	sub	sp, #32
 800a200:	af02      	add	r7, sp, #8
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	4608      	mov	r0, r1
 800a206:	4611      	mov	r1, r2
 800a208:	461a      	mov	r2, r3
 800a20a:	4603      	mov	r3, r0
 800a20c:	817b      	strh	r3, [r7, #10]
 800a20e:	460b      	mov	r3, r1
 800a210:	813b      	strh	r3, [r7, #8]
 800a212:	4613      	mov	r3, r2
 800a214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	2b20      	cmp	r3, #32
 800a220:	f040 80f9 	bne.w	800a416 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a224:	6a3b      	ldr	r3, [r7, #32]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d002      	beq.n	800a230 <HAL_I2C_Mem_Write+0x34>
 800a22a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d105      	bne.n	800a23c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a236:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e0ed      	b.n	800a418 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a242:	2b01      	cmp	r3, #1
 800a244:	d101      	bne.n	800a24a <HAL_I2C_Mem_Write+0x4e>
 800a246:	2302      	movs	r3, #2
 800a248:	e0e6      	b.n	800a418 <HAL_I2C_Mem_Write+0x21c>
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a252:	f7fe f805 	bl	8008260 <HAL_GetTick>
 800a256:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	9300      	str	r3, [sp, #0]
 800a25c:	2319      	movs	r3, #25
 800a25e:	2201      	movs	r2, #1
 800a260:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 fad1 	bl	800a80c <I2C_WaitOnFlagUntilTimeout>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a270:	2301      	movs	r3, #1
 800a272:	e0d1      	b.n	800a418 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2221      	movs	r2, #33	@ 0x21
 800a278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2240      	movs	r2, #64	@ 0x40
 800a280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6a3a      	ldr	r2, [r7, #32]
 800a28e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a294:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a29c:	88f8      	ldrh	r0, [r7, #6]
 800a29e:	893a      	ldrh	r2, [r7, #8]
 800a2a0:	8979      	ldrh	r1, [r7, #10]
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	9301      	str	r3, [sp, #4]
 800a2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a8:	9300      	str	r3, [sp, #0]
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	68f8      	ldr	r0, [r7, #12]
 800a2ae:	f000 f9e1 	bl	800a674 <I2C_RequestMemoryWrite>
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d005      	beq.n	800a2c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e0a9      	b.n	800a418 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	2bff      	cmp	r3, #255	@ 0xff
 800a2cc:	d90e      	bls.n	800a2ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	22ff      	movs	r2, #255	@ 0xff
 800a2d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2d8:	b2da      	uxtb	r2, r3
 800a2da:	8979      	ldrh	r1, [r7, #10]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 fc55 	bl	800ab94 <I2C_TransferConfig>
 800a2ea:	e00f      	b.n	800a30c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2fa:	b2da      	uxtb	r2, r3
 800a2fc:	8979      	ldrh	r1, [r7, #10]
 800a2fe:	2300      	movs	r3, #0
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 fc44 	bl	800ab94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a30c:	697a      	ldr	r2, [r7, #20]
 800a30e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f000 fad4 	bl	800a8be <I2C_WaitOnTXISFlagUntilTimeout>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d001      	beq.n	800a320 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a31c:	2301      	movs	r3, #1
 800a31e:	e07b      	b.n	800a418 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a324:	781a      	ldrb	r2, [r3, #0]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a330:	1c5a      	adds	r2, r3, #1
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	3b01      	subs	r3, #1
 800a33e:	b29a      	uxth	r2, r3
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a348:	3b01      	subs	r3, #1
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a354:	b29b      	uxth	r3, r3
 800a356:	2b00      	cmp	r3, #0
 800a358:	d034      	beq.n	800a3c4 <HAL_I2C_Mem_Write+0x1c8>
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d130      	bne.n	800a3c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	2200      	movs	r2, #0
 800a36a:	2180      	movs	r1, #128	@ 0x80
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	f000 fa4d 	bl	800a80c <I2C_WaitOnFlagUntilTimeout>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	e04d      	b.n	800a418 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a380:	b29b      	uxth	r3, r3
 800a382:	2bff      	cmp	r3, #255	@ 0xff
 800a384:	d90e      	bls.n	800a3a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	22ff      	movs	r2, #255	@ 0xff
 800a38a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a390:	b2da      	uxtb	r2, r3
 800a392:	8979      	ldrh	r1, [r7, #10]
 800a394:	2300      	movs	r3, #0
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f000 fbf9 	bl	800ab94 <I2C_TransferConfig>
 800a3a2:	e00f      	b.n	800a3c4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	8979      	ldrh	r1, [r7, #10]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	9300      	str	r3, [sp, #0]
 800a3ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 fbe8 	bl	800ab94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d19e      	bne.n	800a30c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3d2:	68f8      	ldr	r0, [r7, #12]
 800a3d4:	f000 faba 	bl	800a94c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e01a      	b.n	800a418 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	6859      	ldr	r1, [r3, #4]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	4b0a      	ldr	r3, [pc, #40]	@ (800a420 <HAL_I2C_Mem_Write+0x224>)
 800a3f6:	400b      	ands	r3, r1
 800a3f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a412:	2300      	movs	r3, #0
 800a414:	e000      	b.n	800a418 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a416:	2302      	movs	r3, #2
  }
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}
 800a420:	fe00e800 	.word	0xfe00e800

0800a424 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b088      	sub	sp, #32
 800a428:	af02      	add	r7, sp, #8
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	4608      	mov	r0, r1
 800a42e:	4611      	mov	r1, r2
 800a430:	461a      	mov	r2, r3
 800a432:	4603      	mov	r3, r0
 800a434:	817b      	strh	r3, [r7, #10]
 800a436:	460b      	mov	r3, r1
 800a438:	813b      	strh	r3, [r7, #8]
 800a43a:	4613      	mov	r3, r2
 800a43c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b20      	cmp	r3, #32
 800a448:	f040 80fd 	bne.w	800a646 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a44c:	6a3b      	ldr	r3, [r7, #32]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d002      	beq.n	800a458 <HAL_I2C_Mem_Read+0x34>
 800a452:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a454:	2b00      	cmp	r3, #0
 800a456:	d105      	bne.n	800a464 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a45e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	e0f1      	b.n	800a648 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d101      	bne.n	800a472 <HAL_I2C_Mem_Read+0x4e>
 800a46e:	2302      	movs	r3, #2
 800a470:	e0ea      	b.n	800a648 <HAL_I2C_Mem_Read+0x224>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a47a:	f7fd fef1 	bl	8008260 <HAL_GetTick>
 800a47e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	9300      	str	r3, [sp, #0]
 800a484:	2319      	movs	r3, #25
 800a486:	2201      	movs	r2, #1
 800a488:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 f9bd 	bl	800a80c <I2C_WaitOnFlagUntilTimeout>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e0d5      	b.n	800a648 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2222      	movs	r2, #34	@ 0x22
 800a4a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2240      	movs	r2, #64	@ 0x40
 800a4a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6a3a      	ldr	r2, [r7, #32]
 800a4b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a4bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a4c4:	88f8      	ldrh	r0, [r7, #6]
 800a4c6:	893a      	ldrh	r2, [r7, #8]
 800a4c8:	8979      	ldrh	r1, [r7, #10]
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	9301      	str	r3, [sp, #4]
 800a4ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 f921 	bl	800a71c <I2C_RequestMemoryRead>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d005      	beq.n	800a4ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e0ad      	b.n	800a648 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	2bff      	cmp	r3, #255	@ 0xff
 800a4f4:	d90e      	bls.n	800a514 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a500:	b2da      	uxtb	r2, r3
 800a502:	8979      	ldrh	r1, [r7, #10]
 800a504:	4b52      	ldr	r3, [pc, #328]	@ (800a650 <HAL_I2C_Mem_Read+0x22c>)
 800a506:	9300      	str	r3, [sp, #0]
 800a508:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 fb41 	bl	800ab94 <I2C_TransferConfig>
 800a512:	e00f      	b.n	800a534 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a518:	b29a      	uxth	r2, r3
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a522:	b2da      	uxtb	r2, r3
 800a524:	8979      	ldrh	r1, [r7, #10]
 800a526:	4b4a      	ldr	r3, [pc, #296]	@ (800a650 <HAL_I2C_Mem_Read+0x22c>)
 800a528:	9300      	str	r3, [sp, #0]
 800a52a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f000 fb30 	bl	800ab94 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a53a:	2200      	movs	r2, #0
 800a53c:	2104      	movs	r1, #4
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f000 f964 	bl	800a80c <I2C_WaitOnFlagUntilTimeout>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e07c      	b.n	800a648 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a558:	b2d2      	uxtb	r2, r2
 800a55a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a560:	1c5a      	adds	r2, r3, #1
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a56a:	3b01      	subs	r3, #1
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a576:	b29b      	uxth	r3, r3
 800a578:	3b01      	subs	r3, #1
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a584:	b29b      	uxth	r3, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	d034      	beq.n	800a5f4 <HAL_I2C_Mem_Read+0x1d0>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d130      	bne.n	800a5f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	9300      	str	r3, [sp, #0]
 800a596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a598:	2200      	movs	r2, #0
 800a59a:	2180      	movs	r1, #128	@ 0x80
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f000 f935 	bl	800a80c <I2C_WaitOnFlagUntilTimeout>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e04d      	b.n	800a648 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	2bff      	cmp	r3, #255	@ 0xff
 800a5b4:	d90e      	bls.n	800a5d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5c0:	b2da      	uxtb	r2, r3
 800a5c2:	8979      	ldrh	r1, [r7, #10]
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 fae1 	bl	800ab94 <I2C_TransferConfig>
 800a5d2:	e00f      	b.n	800a5f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	8979      	ldrh	r1, [r7, #10]
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f000 fad0 	bl	800ab94 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d19a      	bne.n	800a534 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f000 f9a2 	bl	800a94c <I2C_WaitOnSTOPFlagUntilTimeout>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d001      	beq.n	800a612 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e01a      	b.n	800a648 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2220      	movs	r2, #32
 800a618:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6859      	ldr	r1, [r3, #4]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	4b0b      	ldr	r3, [pc, #44]	@ (800a654 <HAL_I2C_Mem_Read+0x230>)
 800a626:	400b      	ands	r3, r1
 800a628:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2220      	movs	r2, #32
 800a62e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a642:	2300      	movs	r3, #0
 800a644:	e000      	b.n	800a648 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a646:	2302      	movs	r3, #2
  }
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	80002400 	.word	0x80002400
 800a654:	fe00e800 	.word	0xfe00e800

0800a658 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800a658:	b480      	push	{r7}
 800a65a:	b083      	sub	sp, #12
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a666:	b2db      	uxtb	r3, r3
}
 800a668:	4618      	mov	r0, r3
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af02      	add	r7, sp, #8
 800a67a:	60f8      	str	r0, [r7, #12]
 800a67c:	4608      	mov	r0, r1
 800a67e:	4611      	mov	r1, r2
 800a680:	461a      	mov	r2, r3
 800a682:	4603      	mov	r3, r0
 800a684:	817b      	strh	r3, [r7, #10]
 800a686:	460b      	mov	r3, r1
 800a688:	813b      	strh	r3, [r7, #8]
 800a68a:	4613      	mov	r3, r2
 800a68c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a68e:	88fb      	ldrh	r3, [r7, #6]
 800a690:	b2da      	uxtb	r2, r3
 800a692:	8979      	ldrh	r1, [r7, #10]
 800a694:	4b20      	ldr	r3, [pc, #128]	@ (800a718 <I2C_RequestMemoryWrite+0xa4>)
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f000 fa79 	bl	800ab94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6a2:	69fa      	ldr	r2, [r7, #28]
 800a6a4:	69b9      	ldr	r1, [r7, #24]
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f000 f909 	bl	800a8be <I2C_WaitOnTXISFlagUntilTimeout>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e02c      	b.n	800a710 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a6b6:	88fb      	ldrh	r3, [r7, #6]
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d105      	bne.n	800a6c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a6bc:	893b      	ldrh	r3, [r7, #8]
 800a6be:	b2da      	uxtb	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	629a      	str	r2, [r3, #40]	@ 0x28
 800a6c6:	e015      	b.n	800a6f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a6c8:	893b      	ldrh	r3, [r7, #8]
 800a6ca:	0a1b      	lsrs	r3, r3, #8
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6d6:	69fa      	ldr	r2, [r7, #28]
 800a6d8:	69b9      	ldr	r1, [r7, #24]
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 f8ef 	bl	800a8be <I2C_WaitOnTXISFlagUntilTimeout>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e012      	b.n	800a710 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a6ea:	893b      	ldrh	r3, [r7, #8]
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2180      	movs	r1, #128	@ 0x80
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 f884 	bl	800a80c <I2C_WaitOnFlagUntilTimeout>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e000      	b.n	800a710 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	80002000 	.word	0x80002000

0800a71c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af02      	add	r7, sp, #8
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	4608      	mov	r0, r1
 800a726:	4611      	mov	r1, r2
 800a728:	461a      	mov	r2, r3
 800a72a:	4603      	mov	r3, r0
 800a72c:	817b      	strh	r3, [r7, #10]
 800a72e:	460b      	mov	r3, r1
 800a730:	813b      	strh	r3, [r7, #8]
 800a732:	4613      	mov	r3, r2
 800a734:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a736:	88fb      	ldrh	r3, [r7, #6]
 800a738:	b2da      	uxtb	r2, r3
 800a73a:	8979      	ldrh	r1, [r7, #10]
 800a73c:	4b20      	ldr	r3, [pc, #128]	@ (800a7c0 <I2C_RequestMemoryRead+0xa4>)
 800a73e:	9300      	str	r3, [sp, #0]
 800a740:	2300      	movs	r3, #0
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 fa26 	bl	800ab94 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a748:	69fa      	ldr	r2, [r7, #28]
 800a74a:	69b9      	ldr	r1, [r7, #24]
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 f8b6 	bl	800a8be <I2C_WaitOnTXISFlagUntilTimeout>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	e02c      	b.n	800a7b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a75c:	88fb      	ldrh	r3, [r7, #6]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d105      	bne.n	800a76e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a762:	893b      	ldrh	r3, [r7, #8]
 800a764:	b2da      	uxtb	r2, r3
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	629a      	str	r2, [r3, #40]	@ 0x28
 800a76c:	e015      	b.n	800a79a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a76e:	893b      	ldrh	r3, [r7, #8]
 800a770:	0a1b      	lsrs	r3, r3, #8
 800a772:	b29b      	uxth	r3, r3
 800a774:	b2da      	uxtb	r2, r3
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a77c:	69fa      	ldr	r2, [r7, #28]
 800a77e:	69b9      	ldr	r1, [r7, #24]
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 f89c 	bl	800a8be <I2C_WaitOnTXISFlagUntilTimeout>
 800a786:	4603      	mov	r3, r0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d001      	beq.n	800a790 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	e012      	b.n	800a7b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a790:	893b      	ldrh	r3, [r7, #8]
 800a792:	b2da      	uxtb	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	2140      	movs	r1, #64	@ 0x40
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f000 f831 	bl	800a80c <I2C_WaitOnFlagUntilTimeout>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e000      	b.n	800a7b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	80002000 	.word	0x80002000

0800a7c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d103      	bne.n	800a7e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d007      	beq.n	800a800 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	699a      	ldr	r2, [r3, #24]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f042 0201 	orr.w	r2, r2, #1
 800a7fe:	619a      	str	r2, [r3, #24]
  }
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	4613      	mov	r3, r2
 800a81a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a81c:	e03b      	b.n	800a896 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a81e:	69ba      	ldr	r2, [r7, #24]
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f000 f8d6 	bl	800a9d4 <I2C_IsErrorOccurred>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e041      	b.n	800a8b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a838:	d02d      	beq.n	800a896 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a83a:	f7fd fd11 	bl	8008260 <HAL_GetTick>
 800a83e:	4602      	mov	r2, r0
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	683a      	ldr	r2, [r7, #0]
 800a846:	429a      	cmp	r2, r3
 800a848:	d302      	bcc.n	800a850 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d122      	bne.n	800a896 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	699a      	ldr	r2, [r3, #24]
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	4013      	ands	r3, r2
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	bf0c      	ite	eq
 800a860:	2301      	moveq	r3, #1
 800a862:	2300      	movne	r3, #0
 800a864:	b2db      	uxtb	r3, r3
 800a866:	461a      	mov	r2, r3
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d113      	bne.n	800a896 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a872:	f043 0220 	orr.w	r2, r3, #32
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2220      	movs	r2, #32
 800a87e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2200      	movs	r2, #0
 800a886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e00f      	b.n	800a8b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	699a      	ldr	r2, [r3, #24]
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	4013      	ands	r3, r2
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	bf0c      	ite	eq
 800a8a6:	2301      	moveq	r3, #1
 800a8a8:	2300      	movne	r3, #0
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	79fb      	ldrb	r3, [r7, #7]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d0b4      	beq.n	800a81e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b084      	sub	sp, #16
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	60f8      	str	r0, [r7, #12]
 800a8c6:	60b9      	str	r1, [r7, #8]
 800a8c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a8ca:	e033      	b.n	800a934 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	68b9      	ldr	r1, [r7, #8]
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 f87f 	bl	800a9d4 <I2C_IsErrorOccurred>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e031      	b.n	800a944 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e6:	d025      	beq.n	800a934 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8e8:	f7fd fcba 	bl	8008260 <HAL_GetTick>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d302      	bcc.n	800a8fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d11a      	bne.n	800a934 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	f003 0302 	and.w	r3, r3, #2
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d013      	beq.n	800a934 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a910:	f043 0220 	orr.w	r2, r3, #32
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2220      	movs	r2, #32
 800a91c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e007      	b.n	800a944 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	699b      	ldr	r3, [r3, #24]
 800a93a:	f003 0302 	and.w	r3, r3, #2
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d1c4      	bne.n	800a8cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a958:	e02f      	b.n	800a9ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	68b9      	ldr	r1, [r7, #8]
 800a95e:	68f8      	ldr	r0, [r7, #12]
 800a960:	f000 f838 	bl	800a9d4 <I2C_IsErrorOccurred>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e02d      	b.n	800a9ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a96e:	f7fd fc77 	bl	8008260 <HAL_GetTick>
 800a972:	4602      	mov	r2, r0
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	1ad3      	subs	r3, r2, r3
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d302      	bcc.n	800a984 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d11a      	bne.n	800a9ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	2b20      	cmp	r3, #32
 800a990:	d013      	beq.n	800a9ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a996:	f043 0220 	orr.w	r2, r3, #32
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2220      	movs	r2, #32
 800a9a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e007      	b.n	800a9ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	f003 0320 	and.w	r3, r3, #32
 800a9c4:	2b20      	cmp	r3, #32
 800a9c6:	d1c8      	bne.n	800a95a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
	...

0800a9d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b08a      	sub	sp, #40	@ 0x28
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a9f6:	69bb      	ldr	r3, [r7, #24]
 800a9f8:	f003 0310 	and.w	r3, r3, #16
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d068      	beq.n	800aad2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	2210      	movs	r2, #16
 800aa06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aa08:	e049      	b.n	800aa9e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa10:	d045      	beq.n	800aa9e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aa12:	f7fd fc25 	bl	8008260 <HAL_GetTick>
 800aa16:	4602      	mov	r2, r0
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d302      	bcc.n	800aa28 <I2C_IsErrorOccurred+0x54>
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d13a      	bne.n	800aa9e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aa3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa4a:	d121      	bne.n	800aa90 <I2C_IsErrorOccurred+0xbc>
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa52:	d01d      	beq.n	800aa90 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800aa54:	7cfb      	ldrb	r3, [r7, #19]
 800aa56:	2b20      	cmp	r3, #32
 800aa58:	d01a      	beq.n	800aa90 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	685a      	ldr	r2, [r3, #4]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800aa68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800aa6a:	f7fd fbf9 	bl	8008260 <HAL_GetTick>
 800aa6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa70:	e00e      	b.n	800aa90 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800aa72:	f7fd fbf5 	bl	8008260 <HAL_GetTick>
 800aa76:	4602      	mov	r2, r0
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	2b19      	cmp	r3, #25
 800aa7e:	d907      	bls.n	800aa90 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	f043 0320 	orr.w	r3, r3, #32
 800aa86:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800aa8e:	e006      	b.n	800aa9e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	699b      	ldr	r3, [r3, #24]
 800aa96:	f003 0320 	and.w	r3, r3, #32
 800aa9a:	2b20      	cmp	r3, #32
 800aa9c:	d1e9      	bne.n	800aa72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	f003 0320 	and.w	r3, r3, #32
 800aaa8:	2b20      	cmp	r3, #32
 800aaaa:	d003      	beq.n	800aab4 <I2C_IsErrorOccurred+0xe0>
 800aaac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d0aa      	beq.n	800aa0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800aab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d103      	bne.n	800aac4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2220      	movs	r2, #32
 800aac2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800aac4:	6a3b      	ldr	r3, [r7, #32]
 800aac6:	f043 0304 	orr.w	r3, r3, #4
 800aaca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800aada:	69bb      	ldr	r3, [r7, #24]
 800aadc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00b      	beq.n	800aafc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	f043 0301 	orr.w	r3, r3, #1
 800aaea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aaf4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00b      	beq.n	800ab1e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ab06:	6a3b      	ldr	r3, [r7, #32]
 800ab08:	f043 0308 	orr.w	r3, r3, #8
 800ab0c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab16:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ab1e:	69bb      	ldr	r3, [r7, #24]
 800ab20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00b      	beq.n	800ab40 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ab28:	6a3b      	ldr	r3, [r7, #32]
 800ab2a:	f043 0302 	orr.w	r3, r3, #2
 800ab2e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ab40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d01c      	beq.n	800ab82 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f7ff fe3b 	bl	800a7c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6859      	ldr	r1, [r3, #4]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	4b0d      	ldr	r3, [pc, #52]	@ (800ab90 <I2C_IsErrorOccurred+0x1bc>)
 800ab5a:	400b      	ands	r3, r1
 800ab5c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab62:	6a3b      	ldr	r3, [r7, #32]
 800ab64:	431a      	orrs	r2, r3
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ab82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3728      	adds	r7, #40	@ 0x28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	fe00e800 	.word	0xfe00e800

0800ab94 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	607b      	str	r3, [r7, #4]
 800ab9e:	460b      	mov	r3, r1
 800aba0:	817b      	strh	r3, [r7, #10]
 800aba2:	4613      	mov	r3, r2
 800aba4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aba6:	897b      	ldrh	r3, [r7, #10]
 800aba8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800abac:	7a7b      	ldrb	r3, [r7, #9]
 800abae:	041b      	lsls	r3, r3, #16
 800abb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800abb4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800abba:	6a3b      	ldr	r3, [r7, #32]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800abc2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	6a3b      	ldr	r3, [r7, #32]
 800abcc:	0d5b      	lsrs	r3, r3, #21
 800abce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800abd2:	4b08      	ldr	r3, [pc, #32]	@ (800abf4 <I2C_TransferConfig+0x60>)
 800abd4:	430b      	orrs	r3, r1
 800abd6:	43db      	mvns	r3, r3
 800abd8:	ea02 0103 	and.w	r1, r2, r3
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	697a      	ldr	r2, [r7, #20]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800abe6:	bf00      	nop
 800abe8:	371c      	adds	r7, #28
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	03ff63ff 	.word	0x03ff63ff

0800abf8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	2b20      	cmp	r3, #32
 800ac0c:	d138      	bne.n	800ac80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d101      	bne.n	800ac1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ac18:	2302      	movs	r3, #2
 800ac1a:	e032      	b.n	800ac82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2224      	movs	r2, #36	@ 0x24
 800ac28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f022 0201 	bic.w	r2, r2, #1
 800ac3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ac4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6819      	ldr	r1, [r3, #0]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0201 	orr.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2220      	movs	r2, #32
 800ac70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e000      	b.n	800ac82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ac80:	2302      	movs	r3, #2
  }
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	370c      	adds	r7, #12
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b085      	sub	sp, #20
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	2b20      	cmp	r3, #32
 800aca2:	d139      	bne.n	800ad18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800acaa:	2b01      	cmp	r3, #1
 800acac:	d101      	bne.n	800acb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800acae:	2302      	movs	r3, #2
 800acb0:	e033      	b.n	800ad1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2201      	movs	r2, #1
 800acb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2224      	movs	r2, #36	@ 0x24
 800acbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 0201 	bic.w	r2, r2, #1
 800acd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ace0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	021b      	lsls	r3, r3, #8
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	4313      	orrs	r3, r2
 800acea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f042 0201 	orr.w	r2, r2, #1
 800ad02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2220      	movs	r2, #32
 800ad08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ad14:	2300      	movs	r3, #0
 800ad16:	e000      	b.n	800ad1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ad18:	2302      	movs	r3, #2
  }
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
	...

0800ad28 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b084      	sub	sp, #16
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d101      	bne.n	800ad3a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e0bf      	b.n	800aeba <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d106      	bne.n	800ad54 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7f8 ff68 	bl	8003c24 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	2202      	movs	r2, #2
 800ad58:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699a      	ldr	r2, [r3, #24]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800ad6a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6999      	ldr	r1, [r3, #24]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	685a      	ldr	r2, [r3, #4]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ad80:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	430a      	orrs	r2, r1
 800ad8e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	6899      	ldr	r1, [r3, #8]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	4b4a      	ldr	r3, [pc, #296]	@ (800aec4 <HAL_LTDC_Init+0x19c>)
 800ad9c:	400b      	ands	r3, r1
 800ad9e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	695b      	ldr	r3, [r3, #20]
 800ada4:	041b      	lsls	r3, r3, #16
 800ada6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6899      	ldr	r1, [r3, #8]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	699a      	ldr	r2, [r3, #24]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	431a      	orrs	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	430a      	orrs	r2, r1
 800adbc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	68d9      	ldr	r1, [r3, #12]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	4b3e      	ldr	r3, [pc, #248]	@ (800aec4 <HAL_LTDC_Init+0x19c>)
 800adca:	400b      	ands	r3, r1
 800adcc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	041b      	lsls	r3, r3, #16
 800add4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68d9      	ldr	r1, [r3, #12]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a1a      	ldr	r2, [r3, #32]
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	431a      	orrs	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	430a      	orrs	r2, r1
 800adea:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6919      	ldr	r1, [r3, #16]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681a      	ldr	r2, [r3, #0]
 800adf6:	4b33      	ldr	r3, [pc, #204]	@ (800aec4 <HAL_LTDC_Init+0x19c>)
 800adf8:	400b      	ands	r3, r1
 800adfa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae00:	041b      	lsls	r3, r3, #16
 800ae02:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	6919      	ldr	r1, [r3, #16]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	431a      	orrs	r2, r3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6959      	ldr	r1, [r3, #20]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	4b27      	ldr	r3, [pc, #156]	@ (800aec4 <HAL_LTDC_Init+0x19c>)
 800ae26:	400b      	ands	r3, r1
 800ae28:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae2e:	041b      	lsls	r3, r3, #16
 800ae30:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	6959      	ldr	r1, [r3, #20]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	431a      	orrs	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	430a      	orrs	r2, r1
 800ae46:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ae4e:	021b      	lsls	r3, r3, #8
 800ae50:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ae58:	041b      	lsls	r3, r3, #16
 800ae5a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800ae6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	430a      	orrs	r2, r1
 800ae86:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f042 0206 	orr.w	r2, r2, #6
 800ae96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	699a      	ldr	r2, [r3, #24]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f042 0201 	orr.w	r2, r2, #1
 800aea6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	f000f800 	.word	0xf000f800

0800aec8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800aec8:	b5b0      	push	{r4, r5, r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d101      	bne.n	800aee2 <HAL_LTDC_ConfigLayer+0x1a>
 800aede:	2302      	movs	r3, #2
 800aee0:	e02c      	b.n	800af3c <HAL_LTDC_ConfigLayer+0x74>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2202      	movs	r2, #2
 800aeee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2134      	movs	r1, #52	@ 0x34
 800aef8:	fb01 f303 	mul.w	r3, r1, r3
 800aefc:	4413      	add	r3, r2
 800aefe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	4614      	mov	r4, r2
 800af06:	461d      	mov	r5, r3
 800af08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800af12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	68b9      	ldr	r1, [r7, #8]
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f000 f81f 	bl	800af60 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2201      	movs	r2, #1
 800af28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	2201      	movs	r2, #1
 800af2e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2200      	movs	r2, #0
 800af36:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bdb0      	pop	{r4, r5, r7, pc}

0800af44 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800af52:	b2db      	uxtb	r3, r3
}
 800af54:	4618      	mov	r0, r3
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800af60:	b480      	push	{r7}
 800af62:	b089      	sub	sp, #36	@ 0x24
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	685a      	ldr	r2, [r3, #4]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	0c1b      	lsrs	r3, r3, #16
 800af78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af7c:	4413      	add	r3, r2
 800af7e:	041b      	lsls	r3, r3, #16
 800af80:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	461a      	mov	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	01db      	lsls	r3, r3, #7
 800af8c:	4413      	add	r3, r2
 800af8e:	3384      	adds	r3, #132	@ 0x84
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	6812      	ldr	r2, [r2, #0]
 800af96:	4611      	mov	r1, r2
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	01d2      	lsls	r2, r2, #7
 800af9c:	440a      	add	r2, r1
 800af9e:	3284      	adds	r2, #132	@ 0x84
 800afa0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800afa4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	0c1b      	lsrs	r3, r3, #16
 800afb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800afb6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800afb8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4619      	mov	r1, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	01db      	lsls	r3, r3, #7
 800afc4:	440b      	add	r3, r1
 800afc6:	3384      	adds	r3, #132	@ 0x84
 800afc8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800afce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	68da      	ldr	r2, [r3, #12]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	68db      	ldr	r3, [r3, #12]
 800afda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afde:	4413      	add	r3, r2
 800afe0:	041b      	lsls	r3, r3, #16
 800afe2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	461a      	mov	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	01db      	lsls	r3, r3, #7
 800afee:	4413      	add	r3, r2
 800aff0:	3384      	adds	r3, #132	@ 0x84
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	6812      	ldr	r2, [r2, #0]
 800aff8:	4611      	mov	r1, r2
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	01d2      	lsls	r2, r2, #7
 800affe:	440a      	add	r2, r1
 800b000:	3284      	adds	r2, #132	@ 0x84
 800b002:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800b006:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	689a      	ldr	r2, [r3, #8]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b016:	4413      	add	r3, r2
 800b018:	1c5a      	adds	r2, r3, #1
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4619      	mov	r1, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	01db      	lsls	r3, r3, #7
 800b024:	440b      	add	r3, r1
 800b026:	3384      	adds	r3, #132	@ 0x84
 800b028:	4619      	mov	r1, r3
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	461a      	mov	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	01db      	lsls	r3, r3, #7
 800b03a:	4413      	add	r3, r2
 800b03c:	3384      	adds	r3, #132	@ 0x84
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	6812      	ldr	r2, [r2, #0]
 800b044:	4611      	mov	r1, r2
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	01d2      	lsls	r2, r2, #7
 800b04a:	440a      	add	r2, r1
 800b04c:	3284      	adds	r2, #132	@ 0x84
 800b04e:	f023 0307 	bic.w	r3, r3, #7
 800b052:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	461a      	mov	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	01db      	lsls	r3, r3, #7
 800b05e:	4413      	add	r3, r2
 800b060:	3384      	adds	r3, #132	@ 0x84
 800b062:	461a      	mov	r2, r3
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b070:	021b      	lsls	r3, r3, #8
 800b072:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b07a:	041b      	lsls	r3, r3, #16
 800b07c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	061b      	lsls	r3, r3, #24
 800b084:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	461a      	mov	r2, r3
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	01db      	lsls	r3, r3, #7
 800b090:	4413      	add	r3, r2
 800b092:	3384      	adds	r3, #132	@ 0x84
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	461a      	mov	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	01db      	lsls	r3, r3, #7
 800b0a0:	4413      	add	r3, r2
 800b0a2:	3384      	adds	r3, #132	@ 0x84
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	431a      	orrs	r2, r3
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	431a      	orrs	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4619      	mov	r1, r3
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	01db      	lsls	r3, r3, #7
 800b0c4:	440b      	add	r3, r1
 800b0c6:	3384      	adds	r3, #132	@ 0x84
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	01db      	lsls	r3, r3, #7
 800b0da:	4413      	add	r3, r2
 800b0dc:	3384      	adds	r3, #132	@ 0x84
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	6812      	ldr	r2, [r2, #0]
 800b0e4:	4611      	mov	r1, r2
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	01d2      	lsls	r2, r2, #7
 800b0ea:	440a      	add	r2, r1
 800b0ec:	3284      	adds	r2, #132	@ 0x84
 800b0ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b0f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	01db      	lsls	r3, r3, #7
 800b0fe:	4413      	add	r3, r2
 800b100:	3384      	adds	r3, #132	@ 0x84
 800b102:	461a      	mov	r2, r3
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	695b      	ldr	r3, [r3, #20]
 800b108:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	461a      	mov	r2, r3
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	01db      	lsls	r3, r3, #7
 800b114:	4413      	add	r3, r2
 800b116:	3384      	adds	r3, #132	@ 0x84
 800b118:	69da      	ldr	r2, [r3, #28]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4619      	mov	r1, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	01db      	lsls	r3, r3, #7
 800b124:	440b      	add	r3, r1
 800b126:	3384      	adds	r3, #132	@ 0x84
 800b128:	4619      	mov	r1, r3
 800b12a:	4b58      	ldr	r3, [pc, #352]	@ (800b28c <LTDC_SetConfig+0x32c>)
 800b12c:	4013      	ands	r3, r2
 800b12e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	69da      	ldr	r2, [r3, #28]
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	6a1b      	ldr	r3, [r3, #32]
 800b138:	68f9      	ldr	r1, [r7, #12]
 800b13a:	6809      	ldr	r1, [r1, #0]
 800b13c:	4608      	mov	r0, r1
 800b13e:	6879      	ldr	r1, [r7, #4]
 800b140:	01c9      	lsls	r1, r1, #7
 800b142:	4401      	add	r1, r0
 800b144:	3184      	adds	r1, #132	@ 0x84
 800b146:	4313      	orrs	r3, r2
 800b148:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	461a      	mov	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	01db      	lsls	r3, r3, #7
 800b154:	4413      	add	r3, r2
 800b156:	3384      	adds	r3, #132	@ 0x84
 800b158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	01db      	lsls	r3, r3, #7
 800b164:	4413      	add	r3, r2
 800b166:	3384      	adds	r3, #132	@ 0x84
 800b168:	461a      	mov	r2, r3
 800b16a:	2300      	movs	r3, #0
 800b16c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	461a      	mov	r2, r3
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	01db      	lsls	r3, r3, #7
 800b178:	4413      	add	r3, r2
 800b17a:	3384      	adds	r3, #132	@ 0x84
 800b17c:	461a      	mov	r2, r3
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b182:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	691b      	ldr	r3, [r3, #16]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d102      	bne.n	800b192 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800b18c:	2304      	movs	r3, #4
 800b18e:	61fb      	str	r3, [r7, #28]
 800b190:	e01b      	b.n	800b1ca <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d102      	bne.n	800b1a0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800b19a:	2303      	movs	r3, #3
 800b19c:	61fb      	str	r3, [r7, #28]
 800b19e:	e014      	b.n	800b1ca <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	d00b      	beq.n	800b1c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d007      	beq.n	800b1c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d003      	beq.n	800b1c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800b1bc:	2b07      	cmp	r3, #7
 800b1be:	d102      	bne.n	800b1c6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	61fb      	str	r3, [r7, #28]
 800b1c4:	e001      	b.n	800b1ca <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	01db      	lsls	r3, r3, #7
 800b1d4:	4413      	add	r3, r2
 800b1d6:	3384      	adds	r3, #132	@ 0x84
 800b1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	6812      	ldr	r2, [r2, #0]
 800b1de:	4611      	mov	r1, r2
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	01d2      	lsls	r2, r2, #7
 800b1e4:	440a      	add	r2, r1
 800b1e6:	3284      	adds	r2, #132	@ 0x84
 800b1e8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800b1ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f2:	69fa      	ldr	r2, [r7, #28]
 800b1f4:	fb02 f303 	mul.w	r3, r2, r3
 800b1f8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	6859      	ldr	r1, [r3, #4]
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	1acb      	subs	r3, r1, r3
 800b204:	69f9      	ldr	r1, [r7, #28]
 800b206:	fb01 f303 	mul.w	r3, r1, r3
 800b20a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800b20c:	68f9      	ldr	r1, [r7, #12]
 800b20e:	6809      	ldr	r1, [r1, #0]
 800b210:	4608      	mov	r0, r1
 800b212:	6879      	ldr	r1, [r7, #4]
 800b214:	01c9      	lsls	r1, r1, #7
 800b216:	4401      	add	r1, r0
 800b218:	3184      	adds	r1, #132	@ 0x84
 800b21a:	4313      	orrs	r3, r2
 800b21c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	461a      	mov	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	01db      	lsls	r3, r3, #7
 800b228:	4413      	add	r3, r2
 800b22a:	3384      	adds	r3, #132	@ 0x84
 800b22c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4619      	mov	r1, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	01db      	lsls	r3, r3, #7
 800b238:	440b      	add	r3, r1
 800b23a:	3384      	adds	r3, #132	@ 0x84
 800b23c:	4619      	mov	r1, r3
 800b23e:	4b14      	ldr	r3, [pc, #80]	@ (800b290 <LTDC_SetConfig+0x330>)
 800b240:	4013      	ands	r3, r2
 800b242:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	461a      	mov	r2, r3
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	01db      	lsls	r3, r3, #7
 800b24e:	4413      	add	r3, r2
 800b250:	3384      	adds	r3, #132	@ 0x84
 800b252:	461a      	mov	r2, r3
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b258:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	461a      	mov	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	01db      	lsls	r3, r3, #7
 800b264:	4413      	add	r3, r2
 800b266:	3384      	adds	r3, #132	@ 0x84
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	6812      	ldr	r2, [r2, #0]
 800b26e:	4611      	mov	r1, r2
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	01d2      	lsls	r2, r2, #7
 800b274:	440a      	add	r2, r1
 800b276:	3284      	adds	r2, #132	@ 0x84
 800b278:	f043 0301 	orr.w	r3, r3, #1
 800b27c:	6013      	str	r3, [r2, #0]
}
 800b27e:	bf00      	nop
 800b280:	3724      	adds	r7, #36	@ 0x24
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	bf00      	nop
 800b28c:	fffff8f8 	.word	0xfffff8f8
 800b290:	fffff800 	.word	0xfffff800

0800b294 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b294:	b480      	push	{r7}
 800b296:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b298:	4b05      	ldr	r3, [pc, #20]	@ (800b2b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a04      	ldr	r2, [pc, #16]	@ (800b2b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b29e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b2a2:	6013      	str	r3, [r2, #0]
}
 800b2a4:	bf00      	nop
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	40007000 	.word	0x40007000

0800b2b4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b085      	sub	sp, #20
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
 800b2bc:	460b      	mov	r3, r1
 800b2be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR1;
 800b2c4:	4b16      	ldr	r3, [pc, #88]	@ (800b320 <HAL_PWR_EnterSTOPMode+0x6c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDS bits */
  tmpreg &= (uint32_t)~(PWR_CR1_PDDS | PWR_CR1_LPDS);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f023 0303 	bic.w	r3, r3, #3
 800b2d0:	60fb      	str	r3, [r7, #12]

  /* Set LPDS, MRLVDS and LPLVDS bits according to Regulator value */
  tmpreg |= Regulator;
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  PWR->CR1 = tmpreg;
 800b2da:	4a11      	ldr	r2, [pc, #68]	@ (800b320 <HAL_PWR_EnterSTOPMode+0x6c>)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800b2e0:	4b10      	ldr	r3, [pc, #64]	@ (800b324 <HAL_PWR_EnterSTOPMode+0x70>)
 800b2e2:	691b      	ldr	r3, [r3, #16]
 800b2e4:	4a0f      	ldr	r2, [pc, #60]	@ (800b324 <HAL_PWR_EnterSTOPMode+0x70>)
 800b2e6:	f043 0304 	orr.w	r3, r3, #4
 800b2ea:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b2ec:	f3bf 8f4f 	dsb	sy
}
 800b2f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b2f2:	f3bf 8f6f 	isb	sy
}
 800b2f6:	bf00      	nop
  /* Ensure that all instructions done before entering STOP mode */
  __DSB();
  __ISB();

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800b2f8:	78fb      	ldrb	r3, [r7, #3]
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d101      	bne.n	800b302 <HAL_PWR_EnterSTOPMode+0x4e>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 800b2fe:	bf30      	wfi
 800b300:	e002      	b.n	800b308 <HAL_PWR_EnterSTOPMode+0x54>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800b302:	bf40      	sev
    __WFE();
 800b304:	bf20      	wfe
    __WFE();
 800b306:	bf20      	wfe
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800b308:	4b06      	ldr	r3, [pc, #24]	@ (800b324 <HAL_PWR_EnterSTOPMode+0x70>)
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	4a05      	ldr	r2, [pc, #20]	@ (800b324 <HAL_PWR_EnterSTOPMode+0x70>)
 800b30e:	f023 0304 	bic.w	r3, r3, #4
 800b312:	6113      	str	r3, [r2, #16]
}
 800b314:	bf00      	nop
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	40007000 	.word	0x40007000
 800b324:	e000ed00 	.word	0xe000ed00

0800b328 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800b32e:	2300      	movs	r3, #0
 800b330:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b332:	4b23      	ldr	r3, [pc, #140]	@ (800b3c0 <HAL_PWREx_EnableOverDrive+0x98>)
 800b334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b336:	4a22      	ldr	r2, [pc, #136]	@ (800b3c0 <HAL_PWREx_EnableOverDrive+0x98>)
 800b338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b33c:	6413      	str	r3, [r2, #64]	@ 0x40
 800b33e:	4b20      	ldr	r3, [pc, #128]	@ (800b3c0 <HAL_PWREx_EnableOverDrive+0x98>)
 800b340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b346:	603b      	str	r3, [r7, #0]
 800b348:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b34a:	4b1e      	ldr	r3, [pc, #120]	@ (800b3c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a1d      	ldr	r2, [pc, #116]	@ (800b3c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b354:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b356:	f7fc ff83 	bl	8008260 <HAL_GetTick>
 800b35a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b35c:	e009      	b.n	800b372 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b35e:	f7fc ff7f 	bl	8008260 <HAL_GetTick>
 800b362:	4602      	mov	r2, r0
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b36c:	d901      	bls.n	800b372 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800b36e:	2303      	movs	r3, #3
 800b370:	e022      	b.n	800b3b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b372:	4b14      	ldr	r3, [pc, #80]	@ (800b3c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b37a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b37e:	d1ee      	bne.n	800b35e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b380:	4b10      	ldr	r3, [pc, #64]	@ (800b3c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a0f      	ldr	r2, [pc, #60]	@ (800b3c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b38a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b38c:	f7fc ff68 	bl	8008260 <HAL_GetTick>
 800b390:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b392:	e009      	b.n	800b3a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b394:	f7fc ff64 	bl	8008260 <HAL_GetTick>
 800b398:	4602      	mov	r2, r0
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b3a2:	d901      	bls.n	800b3a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e007      	b.n	800b3b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b3a8:	4b06      	ldr	r3, [pc, #24]	@ (800b3c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b3b4:	d1ee      	bne.n	800b394 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800b3b6:	2300      	movs	r3, #0
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	40023800 	.word	0x40023800
 800b3c4:	40007000 	.word	0x40007000

0800b3c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d101      	bne.n	800b3de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e291      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 0301 	and.w	r3, r3, #1
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	f000 8087 	beq.w	800b4fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b3ec:	4b96      	ldr	r3, [pc, #600]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b3ee:	689b      	ldr	r3, [r3, #8]
 800b3f0:	f003 030c 	and.w	r3, r3, #12
 800b3f4:	2b04      	cmp	r3, #4
 800b3f6:	d00c      	beq.n	800b412 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b3f8:	4b93      	ldr	r3, [pc, #588]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b3fa:	689b      	ldr	r3, [r3, #8]
 800b3fc:	f003 030c 	and.w	r3, r3, #12
 800b400:	2b08      	cmp	r3, #8
 800b402:	d112      	bne.n	800b42a <HAL_RCC_OscConfig+0x62>
 800b404:	4b90      	ldr	r3, [pc, #576]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b40c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b410:	d10b      	bne.n	800b42a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b412:	4b8d      	ldr	r3, [pc, #564]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d06c      	beq.n	800b4f8 <HAL_RCC_OscConfig+0x130>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d168      	bne.n	800b4f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	e26b      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b432:	d106      	bne.n	800b442 <HAL_RCC_OscConfig+0x7a>
 800b434:	4b84      	ldr	r3, [pc, #528]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a83      	ldr	r2, [pc, #524]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b43a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b43e:	6013      	str	r3, [r2, #0]
 800b440:	e02e      	b.n	800b4a0 <HAL_RCC_OscConfig+0xd8>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10c      	bne.n	800b464 <HAL_RCC_OscConfig+0x9c>
 800b44a:	4b7f      	ldr	r3, [pc, #508]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a7e      	ldr	r2, [pc, #504]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b450:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b454:	6013      	str	r3, [r2, #0]
 800b456:	4b7c      	ldr	r3, [pc, #496]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a7b      	ldr	r2, [pc, #492]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b45c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b460:	6013      	str	r3, [r2, #0]
 800b462:	e01d      	b.n	800b4a0 <HAL_RCC_OscConfig+0xd8>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b46c:	d10c      	bne.n	800b488 <HAL_RCC_OscConfig+0xc0>
 800b46e:	4b76      	ldr	r3, [pc, #472]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a75      	ldr	r2, [pc, #468]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b474:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b478:	6013      	str	r3, [r2, #0]
 800b47a:	4b73      	ldr	r3, [pc, #460]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a72      	ldr	r2, [pc, #456]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b480:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b484:	6013      	str	r3, [r2, #0]
 800b486:	e00b      	b.n	800b4a0 <HAL_RCC_OscConfig+0xd8>
 800b488:	4b6f      	ldr	r3, [pc, #444]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a6e      	ldr	r2, [pc, #440]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b48e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	4b6c      	ldr	r3, [pc, #432]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a6b      	ldr	r2, [pc, #428]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b49a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b49e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d013      	beq.n	800b4d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4a8:	f7fc feda 	bl	8008260 <HAL_GetTick>
 800b4ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4ae:	e008      	b.n	800b4c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4b0:	f7fc fed6 	bl	8008260 <HAL_GetTick>
 800b4b4:	4602      	mov	r2, r0
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	1ad3      	subs	r3, r2, r3
 800b4ba:	2b64      	cmp	r3, #100	@ 0x64
 800b4bc:	d901      	bls.n	800b4c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	e21f      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4c2:	4b61      	ldr	r3, [pc, #388]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d0f0      	beq.n	800b4b0 <HAL_RCC_OscConfig+0xe8>
 800b4ce:	e014      	b.n	800b4fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4d0:	f7fc fec6 	bl	8008260 <HAL_GetTick>
 800b4d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b4d6:	e008      	b.n	800b4ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4d8:	f7fc fec2 	bl	8008260 <HAL_GetTick>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	2b64      	cmp	r3, #100	@ 0x64
 800b4e4:	d901      	bls.n	800b4ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	e20b      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b4ea:	4b57      	ldr	r3, [pc, #348]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1f0      	bne.n	800b4d8 <HAL_RCC_OscConfig+0x110>
 800b4f6:	e000      	b.n	800b4fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b4f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 0302 	and.w	r3, r3, #2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d069      	beq.n	800b5da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b506:	4b50      	ldr	r3, [pc, #320]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	f003 030c 	and.w	r3, r3, #12
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00b      	beq.n	800b52a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b512:	4b4d      	ldr	r3, [pc, #308]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	f003 030c 	and.w	r3, r3, #12
 800b51a:	2b08      	cmp	r3, #8
 800b51c:	d11c      	bne.n	800b558 <HAL_RCC_OscConfig+0x190>
 800b51e:	4b4a      	ldr	r3, [pc, #296]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b526:	2b00      	cmp	r3, #0
 800b528:	d116      	bne.n	800b558 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b52a:	4b47      	ldr	r3, [pc, #284]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 0302 	and.w	r3, r3, #2
 800b532:	2b00      	cmp	r3, #0
 800b534:	d005      	beq.n	800b542 <HAL_RCC_OscConfig+0x17a>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d001      	beq.n	800b542 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	e1df      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b542:	4b41      	ldr	r3, [pc, #260]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	691b      	ldr	r3, [r3, #16]
 800b54e:	00db      	lsls	r3, r3, #3
 800b550:	493d      	ldr	r1, [pc, #244]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b552:	4313      	orrs	r3, r2
 800b554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b556:	e040      	b.n	800b5da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d023      	beq.n	800b5a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b560:	4b39      	ldr	r3, [pc, #228]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a38      	ldr	r2, [pc, #224]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b566:	f043 0301 	orr.w	r3, r3, #1
 800b56a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b56c:	f7fc fe78 	bl	8008260 <HAL_GetTick>
 800b570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b572:	e008      	b.n	800b586 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b574:	f7fc fe74 	bl	8008260 <HAL_GetTick>
 800b578:	4602      	mov	r2, r0
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d901      	bls.n	800b586 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e1bd      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b586:	4b30      	ldr	r3, [pc, #192]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 0302 	and.w	r3, r3, #2
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d0f0      	beq.n	800b574 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b592:	4b2d      	ldr	r3, [pc, #180]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	00db      	lsls	r3, r3, #3
 800b5a0:	4929      	ldr	r1, [pc, #164]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	600b      	str	r3, [r1, #0]
 800b5a6:	e018      	b.n	800b5da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b5a8:	4b27      	ldr	r3, [pc, #156]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a26      	ldr	r2, [pc, #152]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b5ae:	f023 0301 	bic.w	r3, r3, #1
 800b5b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5b4:	f7fc fe54 	bl	8008260 <HAL_GetTick>
 800b5b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b5ba:	e008      	b.n	800b5ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5bc:	f7fc fe50 	bl	8008260 <HAL_GetTick>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d901      	bls.n	800b5ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e199      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b5ce:	4b1e      	ldr	r3, [pc, #120]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 0302 	and.w	r3, r3, #2
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1f0      	bne.n	800b5bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f003 0308 	and.w	r3, r3, #8
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d038      	beq.n	800b658 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	695b      	ldr	r3, [r3, #20]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d019      	beq.n	800b622 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b5ee:	4b16      	ldr	r3, [pc, #88]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b5f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5f2:	4a15      	ldr	r2, [pc, #84]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b5f4:	f043 0301 	orr.w	r3, r3, #1
 800b5f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5fa:	f7fc fe31 	bl	8008260 <HAL_GetTick>
 800b5fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b600:	e008      	b.n	800b614 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b602:	f7fc fe2d 	bl	8008260 <HAL_GetTick>
 800b606:	4602      	mov	r2, r0
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	1ad3      	subs	r3, r2, r3
 800b60c:	2b02      	cmp	r3, #2
 800b60e:	d901      	bls.n	800b614 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b610:	2303      	movs	r3, #3
 800b612:	e176      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b614:	4b0c      	ldr	r3, [pc, #48]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b618:	f003 0302 	and.w	r3, r3, #2
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d0f0      	beq.n	800b602 <HAL_RCC_OscConfig+0x23a>
 800b620:	e01a      	b.n	800b658 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b622:	4b09      	ldr	r3, [pc, #36]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b626:	4a08      	ldr	r2, [pc, #32]	@ (800b648 <HAL_RCC_OscConfig+0x280>)
 800b628:	f023 0301 	bic.w	r3, r3, #1
 800b62c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b62e:	f7fc fe17 	bl	8008260 <HAL_GetTick>
 800b632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b634:	e00a      	b.n	800b64c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b636:	f7fc fe13 	bl	8008260 <HAL_GetTick>
 800b63a:	4602      	mov	r2, r0
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	2b02      	cmp	r3, #2
 800b642:	d903      	bls.n	800b64c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	e15c      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
 800b648:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b64c:	4b91      	ldr	r3, [pc, #580]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b64e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b650:	f003 0302 	and.w	r3, r3, #2
 800b654:	2b00      	cmp	r3, #0
 800b656:	d1ee      	bne.n	800b636 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 0304 	and.w	r3, r3, #4
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 80a4 	beq.w	800b7ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b666:	4b8b      	ldr	r3, [pc, #556]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b66a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10d      	bne.n	800b68e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800b672:	4b88      	ldr	r3, [pc, #544]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b676:	4a87      	ldr	r2, [pc, #540]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b67c:	6413      	str	r3, [r2, #64]	@ 0x40
 800b67e:	4b85      	ldr	r3, [pc, #532]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b686:	60bb      	str	r3, [r7, #8]
 800b688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b68a:	2301      	movs	r3, #1
 800b68c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b68e:	4b82      	ldr	r3, [pc, #520]	@ (800b898 <HAL_RCC_OscConfig+0x4d0>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b696:	2b00      	cmp	r3, #0
 800b698:	d118      	bne.n	800b6cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800b69a:	4b7f      	ldr	r3, [pc, #508]	@ (800b898 <HAL_RCC_OscConfig+0x4d0>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a7e      	ldr	r2, [pc, #504]	@ (800b898 <HAL_RCC_OscConfig+0x4d0>)
 800b6a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b6a6:	f7fc fddb 	bl	8008260 <HAL_GetTick>
 800b6aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b6ac:	e008      	b.n	800b6c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6ae:	f7fc fdd7 	bl	8008260 <HAL_GetTick>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	1ad3      	subs	r3, r2, r3
 800b6b8:	2b64      	cmp	r3, #100	@ 0x64
 800b6ba:	d901      	bls.n	800b6c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	e120      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b6c0:	4b75      	ldr	r3, [pc, #468]	@ (800b898 <HAL_RCC_OscConfig+0x4d0>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d0f0      	beq.n	800b6ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d106      	bne.n	800b6e2 <HAL_RCC_OscConfig+0x31a>
 800b6d4:	4b6f      	ldr	r3, [pc, #444]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b6d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6d8:	4a6e      	ldr	r2, [pc, #440]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b6da:	f043 0301 	orr.w	r3, r3, #1
 800b6de:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6e0:	e02d      	b.n	800b73e <HAL_RCC_OscConfig+0x376>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10c      	bne.n	800b704 <HAL_RCC_OscConfig+0x33c>
 800b6ea:	4b6a      	ldr	r3, [pc, #424]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b6ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6ee:	4a69      	ldr	r2, [pc, #420]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b6f0:	f023 0301 	bic.w	r3, r3, #1
 800b6f4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6f6:	4b67      	ldr	r3, [pc, #412]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b6f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6fa:	4a66      	ldr	r2, [pc, #408]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b6fc:	f023 0304 	bic.w	r3, r3, #4
 800b700:	6713      	str	r3, [r2, #112]	@ 0x70
 800b702:	e01c      	b.n	800b73e <HAL_RCC_OscConfig+0x376>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	2b05      	cmp	r3, #5
 800b70a:	d10c      	bne.n	800b726 <HAL_RCC_OscConfig+0x35e>
 800b70c:	4b61      	ldr	r3, [pc, #388]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b70e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b710:	4a60      	ldr	r2, [pc, #384]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b712:	f043 0304 	orr.w	r3, r3, #4
 800b716:	6713      	str	r3, [r2, #112]	@ 0x70
 800b718:	4b5e      	ldr	r3, [pc, #376]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b71a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b71c:	4a5d      	ldr	r2, [pc, #372]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b71e:	f043 0301 	orr.w	r3, r3, #1
 800b722:	6713      	str	r3, [r2, #112]	@ 0x70
 800b724:	e00b      	b.n	800b73e <HAL_RCC_OscConfig+0x376>
 800b726:	4b5b      	ldr	r3, [pc, #364]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b72a:	4a5a      	ldr	r2, [pc, #360]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b72c:	f023 0301 	bic.w	r3, r3, #1
 800b730:	6713      	str	r3, [r2, #112]	@ 0x70
 800b732:	4b58      	ldr	r3, [pc, #352]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b736:	4a57      	ldr	r2, [pc, #348]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b738:	f023 0304 	bic.w	r3, r3, #4
 800b73c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d015      	beq.n	800b772 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b746:	f7fc fd8b 	bl	8008260 <HAL_GetTick>
 800b74a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b74c:	e00a      	b.n	800b764 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b74e:	f7fc fd87 	bl	8008260 <HAL_GetTick>
 800b752:	4602      	mov	r2, r0
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d901      	bls.n	800b764 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b760:	2303      	movs	r3, #3
 800b762:	e0ce      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b764:	4b4b      	ldr	r3, [pc, #300]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b768:	f003 0302 	and.w	r3, r3, #2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d0ee      	beq.n	800b74e <HAL_RCC_OscConfig+0x386>
 800b770:	e014      	b.n	800b79c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b772:	f7fc fd75 	bl	8008260 <HAL_GetTick>
 800b776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b778:	e00a      	b.n	800b790 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b77a:	f7fc fd71 	bl	8008260 <HAL_GetTick>
 800b77e:	4602      	mov	r2, r0
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	1ad3      	subs	r3, r2, r3
 800b784:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b788:	4293      	cmp	r3, r2
 800b78a:	d901      	bls.n	800b790 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b78c:	2303      	movs	r3, #3
 800b78e:	e0b8      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b790:	4b40      	ldr	r3, [pc, #256]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b794:	f003 0302 	and.w	r3, r3, #2
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d1ee      	bne.n	800b77a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b79c:	7dfb      	ldrb	r3, [r7, #23]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d105      	bne.n	800b7ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7a2:	4b3c      	ldr	r3, [pc, #240]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b7a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7a6:	4a3b      	ldr	r2, [pc, #236]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b7a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b7ac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	699b      	ldr	r3, [r3, #24]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	f000 80a4 	beq.w	800b900 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b7b8:	4b36      	ldr	r3, [pc, #216]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	f003 030c 	and.w	r3, r3, #12
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	d06b      	beq.n	800b89c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d149      	bne.n	800b860 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7cc:	4b31      	ldr	r3, [pc, #196]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a30      	ldr	r2, [pc, #192]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b7d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b7d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7d8:	f7fc fd42 	bl	8008260 <HAL_GetTick>
 800b7dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7de:	e008      	b.n	800b7f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7e0:	f7fc fd3e 	bl	8008260 <HAL_GetTick>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d901      	bls.n	800b7f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e087      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7f2:	4b28      	ldr	r3, [pc, #160]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d1f0      	bne.n	800b7e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	69da      	ldr	r2, [r3, #28]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6a1b      	ldr	r3, [r3, #32]
 800b806:	431a      	orrs	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b80c:	019b      	lsls	r3, r3, #6
 800b80e:	431a      	orrs	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b814:	085b      	lsrs	r3, r3, #1
 800b816:	3b01      	subs	r3, #1
 800b818:	041b      	lsls	r3, r3, #16
 800b81a:	431a      	orrs	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b820:	061b      	lsls	r3, r3, #24
 800b822:	4313      	orrs	r3, r2
 800b824:	4a1b      	ldr	r2, [pc, #108]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b826:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b82a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b82c:	4b19      	ldr	r3, [pc, #100]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a18      	ldr	r2, [pc, #96]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b836:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b838:	f7fc fd12 	bl	8008260 <HAL_GetTick>
 800b83c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b83e:	e008      	b.n	800b852 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b840:	f7fc fd0e 	bl	8008260 <HAL_GetTick>
 800b844:	4602      	mov	r2, r0
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	2b02      	cmp	r3, #2
 800b84c:	d901      	bls.n	800b852 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b84e:	2303      	movs	r3, #3
 800b850:	e057      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b852:	4b10      	ldr	r3, [pc, #64]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d0f0      	beq.n	800b840 <HAL_RCC_OscConfig+0x478>
 800b85e:	e04f      	b.n	800b900 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b860:	4b0c      	ldr	r3, [pc, #48]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a0b      	ldr	r2, [pc, #44]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b866:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b86a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b86c:	f7fc fcf8 	bl	8008260 <HAL_GetTick>
 800b870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b872:	e008      	b.n	800b886 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b874:	f7fc fcf4 	bl	8008260 <HAL_GetTick>
 800b878:	4602      	mov	r2, r0
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d901      	bls.n	800b886 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b882:	2303      	movs	r3, #3
 800b884:	e03d      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b886:	4b03      	ldr	r3, [pc, #12]	@ (800b894 <HAL_RCC_OscConfig+0x4cc>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d1f0      	bne.n	800b874 <HAL_RCC_OscConfig+0x4ac>
 800b892:	e035      	b.n	800b900 <HAL_RCC_OscConfig+0x538>
 800b894:	40023800 	.word	0x40023800
 800b898:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b89c:	4b1b      	ldr	r3, [pc, #108]	@ (800b90c <HAL_RCC_OscConfig+0x544>)
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d028      	beq.n	800b8fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d121      	bne.n	800b8fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d11a      	bne.n	800b8fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b8d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d111      	bne.n	800b8fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8e2:	085b      	lsrs	r3, r3, #1
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b8e8:	429a      	cmp	r2, r3
 800b8ea:	d107      	bne.n	800b8fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d001      	beq.n	800b900 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e000      	b.n	800b902 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3718      	adds	r7, #24
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	40023800 	.word	0x40023800

0800b910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d101      	bne.n	800b928 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	e0d0      	b.n	800baca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b928:	4b6a      	ldr	r3, [pc, #424]	@ (800bad4 <HAL_RCC_ClockConfig+0x1c4>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f003 030f 	and.w	r3, r3, #15
 800b930:	683a      	ldr	r2, [r7, #0]
 800b932:	429a      	cmp	r2, r3
 800b934:	d910      	bls.n	800b958 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b936:	4b67      	ldr	r3, [pc, #412]	@ (800bad4 <HAL_RCC_ClockConfig+0x1c4>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f023 020f 	bic.w	r2, r3, #15
 800b93e:	4965      	ldr	r1, [pc, #404]	@ (800bad4 <HAL_RCC_ClockConfig+0x1c4>)
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	4313      	orrs	r3, r2
 800b944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b946:	4b63      	ldr	r3, [pc, #396]	@ (800bad4 <HAL_RCC_ClockConfig+0x1c4>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f003 030f 	and.w	r3, r3, #15
 800b94e:	683a      	ldr	r2, [r7, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d001      	beq.n	800b958 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e0b8      	b.n	800baca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 0302 	and.w	r3, r3, #2
 800b960:	2b00      	cmp	r3, #0
 800b962:	d020      	beq.n	800b9a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 0304 	and.w	r3, r3, #4
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d005      	beq.n	800b97c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b970:	4b59      	ldr	r3, [pc, #356]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	4a58      	ldr	r2, [pc, #352]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800b976:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b97a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 0308 	and.w	r3, r3, #8
 800b984:	2b00      	cmp	r3, #0
 800b986:	d005      	beq.n	800b994 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b988:	4b53      	ldr	r3, [pc, #332]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	4a52      	ldr	r2, [pc, #328]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800b98e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b992:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b994:	4b50      	ldr	r3, [pc, #320]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	494d      	ldr	r1, [pc, #308]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 0301 	and.w	r3, r3, #1
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d040      	beq.n	800ba34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d107      	bne.n	800b9ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9ba:	4b47      	ldr	r3, [pc, #284]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d115      	bne.n	800b9f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e07f      	b.n	800baca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d107      	bne.n	800b9e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9d2:	4b41      	ldr	r3, [pc, #260]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d109      	bne.n	800b9f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e073      	b.n	800baca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9e2:	4b3d      	ldr	r3, [pc, #244]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0302 	and.w	r3, r3, #2
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e06b      	b.n	800baca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b9f2:	4b39      	ldr	r3, [pc, #228]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	f023 0203 	bic.w	r2, r3, #3
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	4936      	ldr	r1, [pc, #216]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba00:	4313      	orrs	r3, r2
 800ba02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba04:	f7fc fc2c 	bl	8008260 <HAL_GetTick>
 800ba08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba0a:	e00a      	b.n	800ba22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba0c:	f7fc fc28 	bl	8008260 <HAL_GetTick>
 800ba10:	4602      	mov	r2, r0
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d901      	bls.n	800ba22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	e053      	b.n	800baca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba22:	4b2d      	ldr	r3, [pc, #180]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	f003 020c 	and.w	r2, r3, #12
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d1eb      	bne.n	800ba0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ba34:	4b27      	ldr	r3, [pc, #156]	@ (800bad4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f003 030f 	and.w	r3, r3, #15
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d210      	bcs.n	800ba64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba42:	4b24      	ldr	r3, [pc, #144]	@ (800bad4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f023 020f 	bic.w	r2, r3, #15
 800ba4a:	4922      	ldr	r1, [pc, #136]	@ (800bad4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	4313      	orrs	r3, r2
 800ba50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba52:	4b20      	ldr	r3, [pc, #128]	@ (800bad4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	f003 030f 	and.w	r3, r3, #15
 800ba5a:	683a      	ldr	r2, [r7, #0]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d001      	beq.n	800ba64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e032      	b.n	800baca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0304 	and.w	r3, r3, #4
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d008      	beq.n	800ba82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ba70:	4b19      	ldr	r3, [pc, #100]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	4916      	ldr	r1, [pc, #88]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f003 0308 	and.w	r3, r3, #8
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d009      	beq.n	800baa2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ba8e:	4b12      	ldr	r3, [pc, #72]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	691b      	ldr	r3, [r3, #16]
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	490e      	ldr	r1, [pc, #56]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800baa2:	f000 f821 	bl	800bae8 <HAL_RCC_GetSysClockFreq>
 800baa6:	4602      	mov	r2, r0
 800baa8:	4b0b      	ldr	r3, [pc, #44]	@ (800bad8 <HAL_RCC_ClockConfig+0x1c8>)
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	091b      	lsrs	r3, r3, #4
 800baae:	f003 030f 	and.w	r3, r3, #15
 800bab2:	490a      	ldr	r1, [pc, #40]	@ (800badc <HAL_RCC_ClockConfig+0x1cc>)
 800bab4:	5ccb      	ldrb	r3, [r1, r3]
 800bab6:	fa22 f303 	lsr.w	r3, r2, r3
 800baba:	4a09      	ldr	r2, [pc, #36]	@ (800bae0 <HAL_RCC_ClockConfig+0x1d0>)
 800babc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800babe:	4b09      	ldr	r3, [pc, #36]	@ (800bae4 <HAL_RCC_ClockConfig+0x1d4>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fc fb88 	bl	80081d8 <HAL_InitTick>

  return HAL_OK;
 800bac8:	2300      	movs	r3, #0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	40023c00 	.word	0x40023c00
 800bad8:	40023800 	.word	0x40023800
 800badc:	08017360 	.word	0x08017360
 800bae0:	20004ed0 	.word	0x20004ed0
 800bae4:	20004f20 	.word	0x20004f20

0800bae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800baec:	b090      	sub	sp, #64	@ 0x40
 800baee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800baf0:	2300      	movs	r3, #0
 800baf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800baf4:	2300      	movs	r3, #0
 800baf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800baf8:	2300      	movs	r3, #0
 800bafa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bb00:	4b59      	ldr	r3, [pc, #356]	@ (800bc68 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f003 030c 	and.w	r3, r3, #12
 800bb08:	2b08      	cmp	r3, #8
 800bb0a:	d00d      	beq.n	800bb28 <HAL_RCC_GetSysClockFreq+0x40>
 800bb0c:	2b08      	cmp	r3, #8
 800bb0e:	f200 80a1 	bhi.w	800bc54 <HAL_RCC_GetSysClockFreq+0x16c>
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d002      	beq.n	800bb1c <HAL_RCC_GetSysClockFreq+0x34>
 800bb16:	2b04      	cmp	r3, #4
 800bb18:	d003      	beq.n	800bb22 <HAL_RCC_GetSysClockFreq+0x3a>
 800bb1a:	e09b      	b.n	800bc54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bb1c:	4b53      	ldr	r3, [pc, #332]	@ (800bc6c <HAL_RCC_GetSysClockFreq+0x184>)
 800bb1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bb20:	e09b      	b.n	800bc5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bb22:	4b53      	ldr	r3, [pc, #332]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x188>)
 800bb24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bb26:	e098      	b.n	800bc5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bb28:	4b4f      	ldr	r3, [pc, #316]	@ (800bc68 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb30:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800bb32:	4b4d      	ldr	r3, [pc, #308]	@ (800bc68 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb34:	685b      	ldr	r3, [r3, #4]
 800bb36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d028      	beq.n	800bb90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb3e:	4b4a      	ldr	r3, [pc, #296]	@ (800bc68 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb40:	685b      	ldr	r3, [r3, #4]
 800bb42:	099b      	lsrs	r3, r3, #6
 800bb44:	2200      	movs	r2, #0
 800bb46:	623b      	str	r3, [r7, #32]
 800bb48:	627a      	str	r2, [r7, #36]	@ 0x24
 800bb4a:	6a3b      	ldr	r3, [r7, #32]
 800bb4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800bb50:	2100      	movs	r1, #0
 800bb52:	4b47      	ldr	r3, [pc, #284]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x188>)
 800bb54:	fb03 f201 	mul.w	r2, r3, r1
 800bb58:	2300      	movs	r3, #0
 800bb5a:	fb00 f303 	mul.w	r3, r0, r3
 800bb5e:	4413      	add	r3, r2
 800bb60:	4a43      	ldr	r2, [pc, #268]	@ (800bc70 <HAL_RCC_GetSysClockFreq+0x188>)
 800bb62:	fba0 1202 	umull	r1, r2, r0, r2
 800bb66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bb68:	460a      	mov	r2, r1
 800bb6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800bb6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb6e:	4413      	add	r3, r2
 800bb70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb74:	2200      	movs	r2, #0
 800bb76:	61bb      	str	r3, [r7, #24]
 800bb78:	61fa      	str	r2, [r7, #28]
 800bb7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800bb82:	f7f5 f881 	bl	8000c88 <__aeabi_uldivmod>
 800bb86:	4602      	mov	r2, r0
 800bb88:	460b      	mov	r3, r1
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb8e:	e053      	b.n	800bc38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bb90:	4b35      	ldr	r3, [pc, #212]	@ (800bc68 <HAL_RCC_GetSysClockFreq+0x180>)
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	099b      	lsrs	r3, r3, #6
 800bb96:	2200      	movs	r2, #0
 800bb98:	613b      	str	r3, [r7, #16]
 800bb9a:	617a      	str	r2, [r7, #20]
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800bba2:	f04f 0b00 	mov.w	fp, #0
 800bba6:	4652      	mov	r2, sl
 800bba8:	465b      	mov	r3, fp
 800bbaa:	f04f 0000 	mov.w	r0, #0
 800bbae:	f04f 0100 	mov.w	r1, #0
 800bbb2:	0159      	lsls	r1, r3, #5
 800bbb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bbb8:	0150      	lsls	r0, r2, #5
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	ebb2 080a 	subs.w	r8, r2, sl
 800bbc2:	eb63 090b 	sbc.w	r9, r3, fp
 800bbc6:	f04f 0200 	mov.w	r2, #0
 800bbca:	f04f 0300 	mov.w	r3, #0
 800bbce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800bbd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800bbd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800bbda:	ebb2 0408 	subs.w	r4, r2, r8
 800bbde:	eb63 0509 	sbc.w	r5, r3, r9
 800bbe2:	f04f 0200 	mov.w	r2, #0
 800bbe6:	f04f 0300 	mov.w	r3, #0
 800bbea:	00eb      	lsls	r3, r5, #3
 800bbec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bbf0:	00e2      	lsls	r2, r4, #3
 800bbf2:	4614      	mov	r4, r2
 800bbf4:	461d      	mov	r5, r3
 800bbf6:	eb14 030a 	adds.w	r3, r4, sl
 800bbfa:	603b      	str	r3, [r7, #0]
 800bbfc:	eb45 030b 	adc.w	r3, r5, fp
 800bc00:	607b      	str	r3, [r7, #4]
 800bc02:	f04f 0200 	mov.w	r2, #0
 800bc06:	f04f 0300 	mov.w	r3, #0
 800bc0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800bc0e:	4629      	mov	r1, r5
 800bc10:	028b      	lsls	r3, r1, #10
 800bc12:	4621      	mov	r1, r4
 800bc14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bc18:	4621      	mov	r1, r4
 800bc1a:	028a      	lsls	r2, r1, #10
 800bc1c:	4610      	mov	r0, r2
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc22:	2200      	movs	r2, #0
 800bc24:	60bb      	str	r3, [r7, #8]
 800bc26:	60fa      	str	r2, [r7, #12]
 800bc28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc2c:	f7f5 f82c 	bl	8000c88 <__aeabi_uldivmod>
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	4613      	mov	r3, r2
 800bc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bc38:	4b0b      	ldr	r3, [pc, #44]	@ (800bc68 <HAL_RCC_GetSysClockFreq+0x180>)
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	0c1b      	lsrs	r3, r3, #16
 800bc3e:	f003 0303 	and.w	r3, r3, #3
 800bc42:	3301      	adds	r3, #1
 800bc44:	005b      	lsls	r3, r3, #1
 800bc46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800bc48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bc52:	e002      	b.n	800bc5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bc54:	4b05      	ldr	r3, [pc, #20]	@ (800bc6c <HAL_RCC_GetSysClockFreq+0x184>)
 800bc56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800bc58:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bc5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3740      	adds	r7, #64	@ 0x40
 800bc60:	46bd      	mov	sp, r7
 800bc62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc66:	bf00      	nop
 800bc68:	40023800 	.word	0x40023800
 800bc6c:	00f42400 	.word	0x00f42400
 800bc70:	017d7840 	.word	0x017d7840

0800bc74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc74:	b480      	push	{r7}
 800bc76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc78:	4b03      	ldr	r3, [pc, #12]	@ (800bc88 <HAL_RCC_GetHCLKFreq+0x14>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop
 800bc88:	20004ed0 	.word	0x20004ed0

0800bc8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bc90:	f7ff fff0 	bl	800bc74 <HAL_RCC_GetHCLKFreq>
 800bc94:	4602      	mov	r2, r0
 800bc96:	4b05      	ldr	r3, [pc, #20]	@ (800bcac <HAL_RCC_GetPCLK1Freq+0x20>)
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	0a9b      	lsrs	r3, r3, #10
 800bc9c:	f003 0307 	and.w	r3, r3, #7
 800bca0:	4903      	ldr	r1, [pc, #12]	@ (800bcb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bca2:	5ccb      	ldrb	r3, [r1, r3]
 800bca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	40023800 	.word	0x40023800
 800bcb0:	08017370 	.word	0x08017370

0800bcb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bcb8:	f7ff ffdc 	bl	800bc74 <HAL_RCC_GetHCLKFreq>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	4b05      	ldr	r3, [pc, #20]	@ (800bcd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bcc0:	689b      	ldr	r3, [r3, #8]
 800bcc2:	0b5b      	lsrs	r3, r3, #13
 800bcc4:	f003 0307 	and.w	r3, r3, #7
 800bcc8:	4903      	ldr	r1, [pc, #12]	@ (800bcd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bcca:	5ccb      	ldrb	r3, [r1, r3]
 800bccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	40023800 	.word	0x40023800
 800bcd8:	08017370 	.word	0x08017370

0800bcdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b088      	sub	sp, #32
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f003 0301 	and.w	r3, r3, #1
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d012      	beq.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bd04:	4b69      	ldr	r3, [pc, #420]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	4a68      	ldr	r2, [pc, #416]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd0a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bd0e:	6093      	str	r3, [r2, #8]
 800bd10:	4b66      	ldr	r3, [pc, #408]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd12:	689a      	ldr	r2, [r3, #8]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd18:	4964      	ldr	r1, [pc, #400]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d101      	bne.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800bd26:	2301      	movs	r3, #1
 800bd28:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d017      	beq.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bd36:	4b5d      	ldr	r3, [pc, #372]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd3c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd44:	4959      	ldr	r1, [pc, #356]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd46:	4313      	orrs	r3, r2
 800bd48:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd50:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bd54:	d101      	bne.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800bd56:	2301      	movs	r3, #1
 800bd58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d101      	bne.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800bd62:	2301      	movs	r3, #1
 800bd64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d017      	beq.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bd72:	4b4e      	ldr	r3, [pc, #312]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd80:	494a      	ldr	r1, [pc, #296]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bd82:	4313      	orrs	r3, r2
 800bd84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd90:	d101      	bne.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800bd92:	2301      	movs	r3, #1
 800bd94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d001      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800bdae:	2301      	movs	r3, #1
 800bdb0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f003 0320 	and.w	r3, r3, #32
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	f000 808b 	beq.w	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bdc0:	4b3a      	ldr	r3, [pc, #232]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdc4:	4a39      	ldr	r2, [pc, #228]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bdca:	6413      	str	r3, [r2, #64]	@ 0x40
 800bdcc:	4b37      	ldr	r3, [pc, #220]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bdce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdd4:	60bb      	str	r3, [r7, #8]
 800bdd6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800bdd8:	4b35      	ldr	r3, [pc, #212]	@ (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a34      	ldr	r2, [pc, #208]	@ (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800bdde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bde2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bde4:	f7fc fa3c 	bl	8008260 <HAL_GetTick>
 800bde8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bdea:	e008      	b.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bdec:	f7fc fa38 	bl	8008260 <HAL_GetTick>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	2b64      	cmp	r3, #100	@ 0x64
 800bdf8:	d901      	bls.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	e357      	b.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800bdfe:	4b2c      	ldr	r3, [pc, #176]	@ (800beb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be06:	2b00      	cmp	r3, #0
 800be08:	d0f0      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800be0a:	4b28      	ldr	r3, [pc, #160]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be12:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d035      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be22:	693a      	ldr	r2, [r7, #16]
 800be24:	429a      	cmp	r2, r3
 800be26:	d02e      	beq.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be28:	4b20      	ldr	r3, [pc, #128]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be30:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800be32:	4b1e      	ldr	r3, [pc, #120]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be36:	4a1d      	ldr	r2, [pc, #116]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be3c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800be3e:	4b1b      	ldr	r3, [pc, #108]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be42:	4a1a      	ldr	r2, [pc, #104]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800be4a:	4a18      	ldr	r2, [pc, #96]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800be50:	4b16      	ldr	r3, [pc, #88]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be54:	f003 0301 	and.w	r3, r3, #1
 800be58:	2b01      	cmp	r3, #1
 800be5a:	d114      	bne.n	800be86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be5c:	f7fc fa00 	bl	8008260 <HAL_GetTick>
 800be60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be62:	e00a      	b.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be64:	f7fc f9fc 	bl	8008260 <HAL_GetTick>
 800be68:	4602      	mov	r2, r0
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be72:	4293      	cmp	r3, r2
 800be74:	d901      	bls.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800be76:	2303      	movs	r3, #3
 800be78:	e319      	b.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be7a:	4b0c      	ldr	r3, [pc, #48]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be7e:	f003 0302 	and.w	r3, r3, #2
 800be82:	2b00      	cmp	r3, #0
 800be84:	d0ee      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be92:	d111      	bne.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800be94:	4b05      	ldr	r3, [pc, #20]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800bea0:	4b04      	ldr	r3, [pc, #16]	@ (800beb4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800bea2:	400b      	ands	r3, r1
 800bea4:	4901      	ldr	r1, [pc, #4]	@ (800beac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800bea6:	4313      	orrs	r3, r2
 800bea8:	608b      	str	r3, [r1, #8]
 800beaa:	e00b      	b.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800beac:	40023800 	.word	0x40023800
 800beb0:	40007000 	.word	0x40007000
 800beb4:	0ffffcff 	.word	0x0ffffcff
 800beb8:	4baa      	ldr	r3, [pc, #680]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800beba:	689b      	ldr	r3, [r3, #8]
 800bebc:	4aa9      	ldr	r2, [pc, #676]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bebe:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800bec2:	6093      	str	r3, [r2, #8]
 800bec4:	4ba7      	ldr	r3, [pc, #668]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bec6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800becc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bed0:	49a4      	ldr	r1, [pc, #656]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bed2:	4313      	orrs	r3, r2
 800bed4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	f003 0310 	and.w	r3, r3, #16
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d010      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bee2:	4ba0      	ldr	r3, [pc, #640]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bee8:	4a9e      	ldr	r2, [pc, #632]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800beea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800beee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800bef2:	4b9c      	ldr	r3, [pc, #624]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bef4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800befc:	4999      	ldr	r1, [pc, #612]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800befe:	4313      	orrs	r3, r2
 800bf00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00a      	beq.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bf10:	4b94      	ldr	r3, [pc, #592]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf16:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bf1e:	4991      	ldr	r1, [pc, #580]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf20:	4313      	orrs	r3, r2
 800bf22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00a      	beq.n	800bf48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bf32:	4b8c      	ldr	r3, [pc, #560]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf38:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bf40:	4988      	ldr	r1, [pc, #544]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf42:	4313      	orrs	r3, r2
 800bf44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00a      	beq.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bf54:	4b83      	ldr	r3, [pc, #524]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf62:	4980      	ldr	r1, [pc, #512]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf64:	4313      	orrs	r3, r2
 800bf66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00a      	beq.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bf76:	4b7b      	ldr	r3, [pc, #492]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf84:	4977      	ldr	r1, [pc, #476]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf86:	4313      	orrs	r3, r2
 800bf88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d00a      	beq.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bf98:	4b72      	ldr	r3, [pc, #456]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bf9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf9e:	f023 0203 	bic.w	r2, r3, #3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfa6:	496f      	ldr	r1, [pc, #444]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d00a      	beq.n	800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bfba:	4b6a      	ldr	r3, [pc, #424]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfc0:	f023 020c 	bic.w	r2, r3, #12
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfc8:	4966      	ldr	r1, [pc, #408]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d00a      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bfdc:	4b61      	ldr	r3, [pc, #388]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfe2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bfea:	495e      	ldr	r1, [pc, #376]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800bfec:	4313      	orrs	r3, r2
 800bfee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d00a      	beq.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bffe:	4b59      	ldr	r3, [pc, #356]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c004:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c00c:	4955      	ldr	r1, [pc, #340]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c00e:	4313      	orrs	r3, r2
 800c010:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00a      	beq.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c020:	4b50      	ldr	r3, [pc, #320]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c026:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c02e:	494d      	ldr	r1, [pc, #308]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c030:	4313      	orrs	r3, r2
 800c032:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00a      	beq.n	800c058 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c042:	4b48      	ldr	r3, [pc, #288]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c048:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c050:	4944      	ldr	r1, [pc, #272]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c052:	4313      	orrs	r3, r2
 800c054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c060:	2b00      	cmp	r3, #0
 800c062:	d00a      	beq.n	800c07a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c064:	4b3f      	ldr	r3, [pc, #252]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c06a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c072:	493c      	ldr	r1, [pc, #240]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c074:	4313      	orrs	r3, r2
 800c076:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00a      	beq.n	800c09c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c086:	4b37      	ldr	r3, [pc, #220]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c08c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c094:	4933      	ldr	r1, [pc, #204]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c096:	4313      	orrs	r3, r2
 800c098:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00a      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c0a8:	4b2e      	ldr	r3, [pc, #184]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c0b6:	492b      	ldr	r1, [pc, #172]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d011      	beq.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c0ca:	4b26      	ldr	r3, [pc, #152]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0d0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0d8:	4922      	ldr	r1, [pc, #136]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c0e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c0e8:	d101      	bne.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f003 0308 	and.w	r3, r3, #8
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d001      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00a      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c10a:	4b16      	ldr	r3, [pc, #88]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c110:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c118:	4912      	ldr	r1, [pc, #72]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c11a:	4313      	orrs	r3, r2
 800c11c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00b      	beq.n	800c144 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c12c:	4b0d      	ldr	r3, [pc, #52]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c12e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c132:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c13c:	4909      	ldr	r1, [pc, #36]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c13e:	4313      	orrs	r3, r2
 800c140:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	2b01      	cmp	r3, #1
 800c148:	d006      	beq.n	800c158 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c152:	2b00      	cmp	r3, #0
 800c154:	f000 80d9 	beq.w	800c30a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c158:	4b02      	ldr	r3, [pc, #8]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	4a01      	ldr	r2, [pc, #4]	@ (800c164 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800c15e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c162:	e001      	b.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800c164:	40023800 	.word	0x40023800
 800c168:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c16a:	f7fc f879 	bl	8008260 <HAL_GetTick>
 800c16e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c170:	e008      	b.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c172:	f7fc f875 	bl	8008260 <HAL_GetTick>
 800c176:	4602      	mov	r2, r0
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	1ad3      	subs	r3, r2, r3
 800c17c:	2b64      	cmp	r3, #100	@ 0x64
 800c17e:	d901      	bls.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c180:	2303      	movs	r3, #3
 800c182:	e194      	b.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c184:	4b6c      	ldr	r3, [pc, #432]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d1f0      	bne.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d021      	beq.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d11d      	bne.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c1a4:	4b64      	ldr	r3, [pc, #400]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1aa:	0c1b      	lsrs	r3, r3, #16
 800c1ac:	f003 0303 	and.w	r3, r3, #3
 800c1b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c1b2:	4b61      	ldr	r3, [pc, #388]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c1b8:	0e1b      	lsrs	r3, r3, #24
 800c1ba:	f003 030f 	and.w	r3, r3, #15
 800c1be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	019a      	lsls	r2, r3, #6
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	041b      	lsls	r3, r3, #16
 800c1ca:	431a      	orrs	r2, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	061b      	lsls	r3, r3, #24
 800c1d0:	431a      	orrs	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	071b      	lsls	r3, r3, #28
 800c1d8:	4957      	ldr	r1, [pc, #348]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d004      	beq.n	800c1f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1f4:	d00a      	beq.n	800c20c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d02e      	beq.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c206:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c20a:	d129      	bne.n	800c260 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c20c:	4b4a      	ldr	r3, [pc, #296]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c20e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c212:	0c1b      	lsrs	r3, r3, #16
 800c214:	f003 0303 	and.w	r3, r3, #3
 800c218:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c21a:	4b47      	ldr	r3, [pc, #284]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c21c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c220:	0f1b      	lsrs	r3, r3, #28
 800c222:	f003 0307 	and.w	r3, r3, #7
 800c226:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	019a      	lsls	r2, r3, #6
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	041b      	lsls	r3, r3, #16
 800c232:	431a      	orrs	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	061b      	lsls	r3, r3, #24
 800c23a:	431a      	orrs	r2, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	071b      	lsls	r3, r3, #28
 800c240:	493d      	ldr	r1, [pc, #244]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c242:	4313      	orrs	r3, r2
 800c244:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c248:	4b3b      	ldr	r3, [pc, #236]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c24a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c24e:	f023 021f 	bic.w	r2, r3, #31
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c256:	3b01      	subs	r3, #1
 800c258:	4937      	ldr	r1, [pc, #220]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c25a:	4313      	orrs	r3, r2
 800c25c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d01d      	beq.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c26c:	4b32      	ldr	r3, [pc, #200]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c26e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c272:	0e1b      	lsrs	r3, r3, #24
 800c274:	f003 030f 	and.w	r3, r3, #15
 800c278:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c27a:	4b2f      	ldr	r3, [pc, #188]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c27c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c280:	0f1b      	lsrs	r3, r3, #28
 800c282:	f003 0307 	and.w	r3, r3, #7
 800c286:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	019a      	lsls	r2, r3, #6
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	041b      	lsls	r3, r3, #16
 800c294:	431a      	orrs	r2, r3
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	061b      	lsls	r3, r3, #24
 800c29a:	431a      	orrs	r2, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	071b      	lsls	r3, r3, #28
 800c2a0:	4925      	ldr	r1, [pc, #148]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d011      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	019a      	lsls	r2, r3, #6
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	041b      	lsls	r3, r3, #16
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	061b      	lsls	r3, r3, #24
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	071b      	lsls	r3, r3, #28
 800c2d0:	4919      	ldr	r1, [pc, #100]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c2d8:	4b17      	ldr	r3, [pc, #92]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a16      	ldr	r2, [pc, #88]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c2de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c2e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2e4:	f7fb ffbc 	bl	8008260 <HAL_GetTick>
 800c2e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c2ea:	e008      	b.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c2ec:	f7fb ffb8 	bl	8008260 <HAL_GetTick>
 800c2f0:	4602      	mov	r2, r0
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	1ad3      	subs	r3, r2, r3
 800c2f6:	2b64      	cmp	r3, #100	@ 0x64
 800c2f8:	d901      	bls.n	800c2fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c2fa:	2303      	movs	r3, #3
 800c2fc:	e0d7      	b.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c2fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0f0      	beq.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	f040 80cd 	bne.w	800c4ac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c312:	4b09      	ldr	r3, [pc, #36]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4a08      	ldr	r2, [pc, #32]	@ (800c338 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800c318:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c31c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c31e:	f7fb ff9f 	bl	8008260 <HAL_GetTick>
 800c322:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c324:	e00a      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c326:	f7fb ff9b 	bl	8008260 <HAL_GetTick>
 800c32a:	4602      	mov	r2, r0
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	1ad3      	subs	r3, r2, r3
 800c330:	2b64      	cmp	r3, #100	@ 0x64
 800c332:	d903      	bls.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c334:	2303      	movs	r3, #3
 800c336:	e0ba      	b.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800c338:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c33c:	4b5e      	ldr	r3, [pc, #376]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c344:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c348:	d0ed      	beq.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c352:	2b00      	cmp	r3, #0
 800c354:	d003      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d009      	beq.n	800c372 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c366:	2b00      	cmp	r3, #0
 800c368:	d02e      	beq.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d12a      	bne.n	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c372:	4b51      	ldr	r3, [pc, #324]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c378:	0c1b      	lsrs	r3, r3, #16
 800c37a:	f003 0303 	and.w	r3, r3, #3
 800c37e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c380:	4b4d      	ldr	r3, [pc, #308]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c382:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c386:	0f1b      	lsrs	r3, r3, #28
 800c388:	f003 0307 	and.w	r3, r3, #7
 800c38c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	695b      	ldr	r3, [r3, #20]
 800c392:	019a      	lsls	r2, r3, #6
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	041b      	lsls	r3, r3, #16
 800c398:	431a      	orrs	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	061b      	lsls	r3, r3, #24
 800c3a0:	431a      	orrs	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	071b      	lsls	r3, r3, #28
 800c3a6:	4944      	ldr	r1, [pc, #272]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c3ae:	4b42      	ldr	r3, [pc, #264]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c3b4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	021b      	lsls	r3, r3, #8
 800c3c0:	493d      	ldr	r1, [pc, #244]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d022      	beq.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c3d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3dc:	d11d      	bne.n	800c41a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c3de:	4b36      	ldr	r3, [pc, #216]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3e4:	0e1b      	lsrs	r3, r3, #24
 800c3e6:	f003 030f 	and.w	r3, r3, #15
 800c3ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c3ec:	4b32      	ldr	r3, [pc, #200]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c3ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3f2:	0f1b      	lsrs	r3, r3, #28
 800c3f4:	f003 0307 	and.w	r3, r3, #7
 800c3f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	695b      	ldr	r3, [r3, #20]
 800c3fe:	019a      	lsls	r2, r3, #6
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6a1b      	ldr	r3, [r3, #32]
 800c404:	041b      	lsls	r3, r3, #16
 800c406:	431a      	orrs	r2, r3
 800c408:	693b      	ldr	r3, [r7, #16]
 800c40a:	061b      	lsls	r3, r3, #24
 800c40c:	431a      	orrs	r2, r3
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	071b      	lsls	r3, r3, #28
 800c412:	4929      	ldr	r1, [pc, #164]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c414:	4313      	orrs	r3, r2
 800c416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 0308 	and.w	r3, r3, #8
 800c422:	2b00      	cmp	r3, #0
 800c424:	d028      	beq.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c426:	4b24      	ldr	r3, [pc, #144]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c42c:	0e1b      	lsrs	r3, r3, #24
 800c42e:	f003 030f 	and.w	r3, r3, #15
 800c432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c434:	4b20      	ldr	r3, [pc, #128]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c43a:	0c1b      	lsrs	r3, r3, #16
 800c43c:	f003 0303 	and.w	r3, r3, #3
 800c440:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	019a      	lsls	r2, r3, #6
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	041b      	lsls	r3, r3, #16
 800c44c:	431a      	orrs	r2, r3
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	061b      	lsls	r3, r3, #24
 800c452:	431a      	orrs	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	69db      	ldr	r3, [r3, #28]
 800c458:	071b      	lsls	r3, r3, #28
 800c45a:	4917      	ldr	r1, [pc, #92]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c45c:	4313      	orrs	r3, r2
 800c45e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c462:	4b15      	ldr	r3, [pc, #84]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c468:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c470:	4911      	ldr	r1, [pc, #68]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c472:	4313      	orrs	r3, r2
 800c474:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c478:	4b0f      	ldr	r3, [pc, #60]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a0e      	ldr	r2, [pc, #56]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c47e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c484:	f7fb feec 	bl	8008260 <HAL_GetTick>
 800c488:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c48a:	e008      	b.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c48c:	f7fb fee8 	bl	8008260 <HAL_GetTick>
 800c490:	4602      	mov	r2, r0
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	1ad3      	subs	r3, r2, r3
 800c496:	2b64      	cmp	r3, #100	@ 0x64
 800c498:	d901      	bls.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c49a:	2303      	movs	r3, #3
 800c49c:	e007      	b.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c49e:	4b06      	ldr	r3, [pc, #24]	@ (800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c4aa:	d1ef      	bne.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3720      	adds	r7, #32
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	40023800 	.word	0x40023800

0800c4bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e071      	b.n	800c5b6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	7f5b      	ldrb	r3, [r3, #29]
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d105      	bne.n	800c4e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7f8 fcde 	bl	8004ea4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	f003 0310 	and.w	r3, r3, #16
 800c4f8:	2b10      	cmp	r3, #16
 800c4fa:	d053      	beq.n	800c5a4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	22ca      	movs	r2, #202	@ 0xca
 800c502:	625a      	str	r2, [r3, #36]	@ 0x24
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2253      	movs	r2, #83	@ 0x53
 800c50a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fb75 	bl	800cbfc <RTC_EnterInitMode>
 800c512:	4603      	mov	r3, r0
 800c514:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800c516:	7bfb      	ldrb	r3, [r7, #15]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d12a      	bne.n	800c572 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	6899      	ldr	r1, [r3, #8]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	4b26      	ldr	r3, [pc, #152]	@ (800c5c0 <HAL_RTC_Init+0x104>)
 800c528:	400b      	ands	r3, r1
 800c52a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	6899      	ldr	r1, [r3, #8]
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	685a      	ldr	r2, [r3, #4]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	431a      	orrs	r2, r3
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	695b      	ldr	r3, [r3, #20]
 800c540:	431a      	orrs	r2, r3
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	430a      	orrs	r2, r1
 800c548:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	68d2      	ldr	r2, [r2, #12]
 800c552:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	6919      	ldr	r1, [r3, #16]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	041a      	lsls	r2, r3, #16
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	430a      	orrs	r2, r1
 800c566:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f000 fb7e 	bl	800cc6a <RTC_ExitInitMode>
 800c56e:	4603      	mov	r3, r0
 800c570:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800c572:	7bfb      	ldrb	r3, [r7, #15]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d110      	bne.n	800c59a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f022 0208 	bic.w	r2, r2, #8
 800c586:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	699a      	ldr	r2, [r3, #24]
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	430a      	orrs	r2, r1
 800c598:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	22ff      	movs	r2, #255	@ 0xff
 800c5a0:	625a      	str	r2, [r3, #36]	@ 0x24
 800c5a2:	e001      	b.n	800c5a8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d102      	bne.n	800c5b4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800c5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	ff8fffbf 	.word	0xff8fffbf

0800c5c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c5c4:	b590      	push	{r4, r7, lr}
 800c5c6:	b087      	sub	sp, #28
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	7f1b      	ldrb	r3, [r3, #28]
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d101      	bne.n	800c5e0 <HAL_RTC_SetTime+0x1c>
 800c5dc:	2302      	movs	r3, #2
 800c5de:	e085      	b.n	800c6ec <HAL_RTC_SetTime+0x128>
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2202      	movs	r2, #2
 800c5ea:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d126      	bne.n	800c640 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d102      	bne.n	800c606 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2200      	movs	r2, #0
 800c604:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	4618      	mov	r0, r3
 800c60c:	f000 fb52 	bl	800ccb4 <RTC_ByteToBcd2>
 800c610:	4603      	mov	r3, r0
 800c612:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	785b      	ldrb	r3, [r3, #1]
 800c618:	4618      	mov	r0, r3
 800c61a:	f000 fb4b 	bl	800ccb4 <RTC_ByteToBcd2>
 800c61e:	4603      	mov	r3, r0
 800c620:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c622:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	789b      	ldrb	r3, [r3, #2]
 800c628:	4618      	mov	r0, r3
 800c62a:	f000 fb43 	bl	800ccb4 <RTC_ByteToBcd2>
 800c62e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c630:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	78db      	ldrb	r3, [r3, #3]
 800c638:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c63a:	4313      	orrs	r3, r2
 800c63c:	617b      	str	r3, [r7, #20]
 800c63e:	e018      	b.n	800c672 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d102      	bne.n	800c654 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	2200      	movs	r2, #0
 800c652:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	785b      	ldrb	r3, [r3, #1]
 800c65e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c660:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c662:	68ba      	ldr	r2, [r7, #8]
 800c664:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c666:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	78db      	ldrb	r3, [r3, #3]
 800c66c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c66e:	4313      	orrs	r3, r2
 800c670:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	22ca      	movs	r2, #202	@ 0xca
 800c678:	625a      	str	r2, [r3, #36]	@ 0x24
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2253      	movs	r2, #83	@ 0x53
 800c680:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c682:	68f8      	ldr	r0, [r7, #12]
 800c684:	f000 faba 	bl	800cbfc <RTC_EnterInitMode>
 800c688:	4603      	mov	r3, r0
 800c68a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c68c:	7cfb      	ldrb	r3, [r7, #19]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d11e      	bne.n	800c6d0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	6979      	ldr	r1, [r7, #20]
 800c698:	4b16      	ldr	r3, [pc, #88]	@ (800c6f4 <HAL_RTC_SetTime+0x130>)
 800c69a:	400b      	ands	r3, r1
 800c69c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	689a      	ldr	r2, [r3, #8]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c6ac:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	6899      	ldr	r1, [r3, #8]
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	68da      	ldr	r2, [r3, #12]
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	431a      	orrs	r2, r3
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f000 facf 	bl	800cc6a <RTC_ExitInitMode>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c6d0:	7cfb      	ldrb	r3, [r7, #19]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d102      	bne.n	800c6dc <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	22ff      	movs	r2, #255	@ 0xff
 800c6e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	771a      	strb	r2, [r3, #28]

  return status;
 800c6ea:	7cfb      	ldrb	r3, [r7, #19]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	371c      	adds	r7, #28
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd90      	pop	{r4, r7, pc}
 800c6f4:	007f7f7f 	.word	0x007f7f7f

0800c6f8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b086      	sub	sp, #24
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c704:	2300      	movs	r3, #0
 800c706:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	691b      	ldr	r3, [r3, #16]
 800c718:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	681a      	ldr	r2, [r3, #0]
 800c726:	4b22      	ldr	r3, [pc, #136]	@ (800c7b0 <HAL_RTC_GetTime+0xb8>)
 800c728:	4013      	ands	r3, r2
 800c72a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	0c1b      	lsrs	r3, r3, #16
 800c730:	b2db      	uxtb	r3, r3
 800c732:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c736:	b2da      	uxtb	r2, r3
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	0a1b      	lsrs	r3, r3, #8
 800c740:	b2db      	uxtb	r3, r3
 800c742:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c746:	b2da      	uxtb	r2, r3
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c754:	b2da      	uxtb	r2, r3
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	0d9b      	lsrs	r3, r3, #22
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	f003 0301 	and.w	r3, r3, #1
 800c764:	b2da      	uxtb	r2, r3
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d11a      	bne.n	800c7a6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	4618      	mov	r0, r3
 800c776:	f000 fabb 	bl	800ccf0 <RTC_Bcd2ToByte>
 800c77a:	4603      	mov	r3, r0
 800c77c:	461a      	mov	r2, r3
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	785b      	ldrb	r3, [r3, #1]
 800c786:	4618      	mov	r0, r3
 800c788:	f000 fab2 	bl	800ccf0 <RTC_Bcd2ToByte>
 800c78c:	4603      	mov	r3, r0
 800c78e:	461a      	mov	r2, r3
 800c790:	68bb      	ldr	r3, [r7, #8]
 800c792:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	789b      	ldrb	r3, [r3, #2]
 800c798:	4618      	mov	r0, r3
 800c79a:	f000 faa9 	bl	800ccf0 <RTC_Bcd2ToByte>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c7a6:	2300      	movs	r3, #0
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	007f7f7f 	.word	0x007f7f7f

0800c7b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c7b4:	b590      	push	{r4, r7, lr}
 800c7b6:	b087      	sub	sp, #28
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	7f1b      	ldrb	r3, [r3, #28]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d101      	bne.n	800c7d0 <HAL_RTC_SetDate+0x1c>
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	e06f      	b.n	800c8b0 <HAL_RTC_SetDate+0xfc>
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2202      	movs	r2, #2
 800c7da:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10e      	bne.n	800c800 <HAL_RTC_SetDate+0x4c>
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	785b      	ldrb	r3, [r3, #1]
 800c7e6:	f003 0310 	and.w	r3, r3, #16
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d008      	beq.n	800c800 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	785b      	ldrb	r3, [r3, #1]
 800c7f2:	f023 0310 	bic.w	r3, r3, #16
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	330a      	adds	r3, #10
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d11c      	bne.n	800c840 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	78db      	ldrb	r3, [r3, #3]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f000 fa52 	bl	800ccb4 <RTC_ByteToBcd2>
 800c810:	4603      	mov	r3, r0
 800c812:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	785b      	ldrb	r3, [r3, #1]
 800c818:	4618      	mov	r0, r3
 800c81a:	f000 fa4b 	bl	800ccb4 <RTC_ByteToBcd2>
 800c81e:	4603      	mov	r3, r0
 800c820:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c822:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	789b      	ldrb	r3, [r3, #2]
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 fa43 	bl	800ccb4 <RTC_ByteToBcd2>
 800c82e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c830:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c83a:	4313      	orrs	r3, r2
 800c83c:	617b      	str	r3, [r7, #20]
 800c83e:	e00e      	b.n	800c85e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	78db      	ldrb	r3, [r3, #3]
 800c844:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	785b      	ldrb	r3, [r3, #1]
 800c84a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c84c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c852:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c85a:	4313      	orrs	r3, r2
 800c85c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	22ca      	movs	r2, #202	@ 0xca
 800c864:	625a      	str	r2, [r3, #36]	@ 0x24
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	2253      	movs	r2, #83	@ 0x53
 800c86c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c86e:	68f8      	ldr	r0, [r7, #12]
 800c870:	f000 f9c4 	bl	800cbfc <RTC_EnterInitMode>
 800c874:	4603      	mov	r3, r0
 800c876:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c878:	7cfb      	ldrb	r3, [r7, #19]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d10a      	bne.n	800c894 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	6979      	ldr	r1, [r7, #20]
 800c884:	4b0c      	ldr	r3, [pc, #48]	@ (800c8b8 <HAL_RTC_SetDate+0x104>)
 800c886:	400b      	ands	r3, r1
 800c888:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c88a:	68f8      	ldr	r0, [r7, #12]
 800c88c:	f000 f9ed 	bl	800cc6a <RTC_ExitInitMode>
 800c890:	4603      	mov	r3, r0
 800c892:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c894:	7cfb      	ldrb	r3, [r7, #19]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d102      	bne.n	800c8a0 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2201      	movs	r2, #1
 800c89e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	22ff      	movs	r2, #255	@ 0xff
 800c8a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	771a      	strb	r2, [r3, #28]

  return status;
 800c8ae:	7cfb      	ldrb	r3, [r7, #19]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	371c      	adds	r7, #28
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd90      	pop	{r4, r7, pc}
 800c8b8:	00ffff3f 	.word	0x00ffff3f

0800c8bc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b086      	sub	sp, #24
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685a      	ldr	r2, [r3, #4]
 800c8d2:	4b21      	ldr	r3, [pc, #132]	@ (800c958 <HAL_RTC_GetDate+0x9c>)
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	0c1b      	lsrs	r3, r3, #16
 800c8dc:	b2da      	uxtb	r2, r3
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	0a1b      	lsrs	r3, r3, #8
 800c8e6:	b2db      	uxtb	r3, r3
 800c8e8:	f003 031f 	and.w	r3, r3, #31
 800c8ec:	b2da      	uxtb	r2, r3
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	0b5b      	lsrs	r3, r3, #13
 800c904:	b2db      	uxtb	r3, r3
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d11a      	bne.n	800c94c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	78db      	ldrb	r3, [r3, #3]
 800c91a:	4618      	mov	r0, r3
 800c91c:	f000 f9e8 	bl	800ccf0 <RTC_Bcd2ToByte>
 800c920:	4603      	mov	r3, r0
 800c922:	461a      	mov	r2, r3
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	785b      	ldrb	r3, [r3, #1]
 800c92c:	4618      	mov	r0, r3
 800c92e:	f000 f9df 	bl	800ccf0 <RTC_Bcd2ToByte>
 800c932:	4603      	mov	r3, r0
 800c934:	461a      	mov	r2, r3
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	789b      	ldrb	r3, [r3, #2]
 800c93e:	4618      	mov	r0, r3
 800c940:	f000 f9d6 	bl	800ccf0 <RTC_Bcd2ToByte>
 800c944:	4603      	mov	r3, r0
 800c946:	461a      	mov	r2, r3
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3718      	adds	r7, #24
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	00ffff3f 	.word	0x00ffff3f

0800c95c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c95c:	b590      	push	{r4, r7, lr}
 800c95e:	b089      	sub	sp, #36	@ 0x24
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800c968:	2300      	movs	r3, #0
 800c96a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800c96c:	2300      	movs	r3, #0
 800c96e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800c970:	2300      	movs	r3, #0
 800c972:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	7f1b      	ldrb	r3, [r3, #28]
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d101      	bne.n	800c980 <HAL_RTC_SetAlarm+0x24>
 800c97c:	2302      	movs	r3, #2
 800c97e:	e113      	b.n	800cba8 <HAL_RTC_SetAlarm+0x24c>
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2201      	movs	r2, #1
 800c984:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2202      	movs	r2, #2
 800c98a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d137      	bne.n	800ca02 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d102      	bne.n	800c9a6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f982 	bl	800ccb4 <RTC_ByteToBcd2>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	785b      	ldrb	r3, [r3, #1]
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f000 f97b 	bl	800ccb4 <RTC_ByteToBcd2>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c9c2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	789b      	ldrb	r3, [r3, #2]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f000 f973 	bl	800ccb4 <RTC_ByteToBcd2>
 800c9ce:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c9d0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	78db      	ldrb	r3, [r3, #3]
 800c9d8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c9da:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 f965 	bl	800ccb4 <RTC_ByteToBcd2>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800c9ee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c9f6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c9fc:	4313      	orrs	r3, r2
 800c9fe:	61fb      	str	r3, [r7, #28]
 800ca00:	e023      	b.n	800ca4a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d102      	bne.n	800ca16 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	2200      	movs	r2, #0
 800ca14:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	785b      	ldrb	r3, [r3, #1]
 800ca20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ca22:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ca24:	68ba      	ldr	r2, [r7, #8]
 800ca26:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800ca28:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	78db      	ldrb	r3, [r3, #3]
 800ca2e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800ca30:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ca38:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800ca3a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800ca40:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800ca46:	4313      	orrs	r3, r2
 800ca48:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800ca52:	4313      	orrs	r3, r2
 800ca54:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	22ca      	movs	r2, #202	@ 0xca
 800ca5c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2253      	movs	r2, #83	@ 0x53
 800ca64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca6e:	d148      	bne.n	800cb02 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	689a      	ldr	r2, [r3, #8]
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca7e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	689a      	ldr	r2, [r3, #8]
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ca8e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	b2da      	uxtb	r2, r3
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800caa0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800caa2:	f7fb fbdd 	bl	8008260 <HAL_GetTick>
 800caa6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800caa8:	e013      	b.n	800cad2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800caaa:	f7fb fbd9 	bl	8008260 <HAL_GetTick>
 800caae:	4602      	mov	r2, r0
 800cab0:	69bb      	ldr	r3, [r7, #24]
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cab8:	d90b      	bls.n	800cad2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	22ff      	movs	r2, #255	@ 0xff
 800cac0:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2203      	movs	r2, #3
 800cac6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2200      	movs	r2, #0
 800cacc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cace:	2303      	movs	r3, #3
 800cad0:	e06a      	b.n	800cba8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	f003 0301 	and.w	r3, r3, #1
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d0e4      	beq.n	800caaa <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	69fa      	ldr	r2, [r7, #28]
 800cae6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	697a      	ldr	r2, [r7, #20]
 800caee:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	689a      	ldr	r2, [r3, #8]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cafe:	609a      	str	r2, [r3, #8]
 800cb00:	e047      	b.n	800cb92 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	689a      	ldr	r2, [r3, #8]
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800cb10:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	689a      	ldr	r2, [r3, #8]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cb20:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800cb32:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb34:	f7fb fb94 	bl	8008260 <HAL_GetTick>
 800cb38:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800cb3a:	e013      	b.n	800cb64 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb3c:	f7fb fb90 	bl	8008260 <HAL_GetTick>
 800cb40:	4602      	mov	r2, r0
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	1ad3      	subs	r3, r2, r3
 800cb46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cb4a:	d90b      	bls.n	800cb64 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	22ff      	movs	r2, #255	@ 0xff
 800cb52:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2203      	movs	r2, #3
 800cb58:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cb60:	2303      	movs	r3, #3
 800cb62:	e021      	b.n	800cba8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	f003 0302 	and.w	r3, r3, #2
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d0e4      	beq.n	800cb3c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	69fa      	ldr	r2, [r7, #28]
 800cb78:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	697a      	ldr	r2, [r7, #20]
 800cb80:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	689a      	ldr	r2, [r3, #8]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cb90:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	22ff      	movs	r2, #255	@ 0xff
 800cb98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3724      	adds	r7, #36	@ 0x24
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd90      	pop	{r4, r7, pc}

0800cbb0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a0d      	ldr	r2, [pc, #52]	@ (800cbf8 <HAL_RTC_WaitForSynchro+0x48>)
 800cbc2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cbc4:	f7fb fb4c 	bl	8008260 <HAL_GetTick>
 800cbc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cbca:	e009      	b.n	800cbe0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cbcc:	f7fb fb48 	bl	8008260 <HAL_GetTick>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cbda:	d901      	bls.n	800cbe0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	e007      	b.n	800cbf0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	f003 0320 	and.w	r3, r3, #32
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d0ee      	beq.n	800cbcc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800cbee:	2300      	movs	r3, #0
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	0001ff5f 	.word	0x0001ff5f

0800cbfc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cc04:	2300      	movs	r3, #0
 800cc06:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d122      	bne.n	800cc60 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	68da      	ldr	r2, [r3, #12]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cc28:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cc2a:	f7fb fb19 	bl	8008260 <HAL_GetTick>
 800cc2e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cc30:	e00c      	b.n	800cc4c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cc32:	f7fb fb15 	bl	8008260 <HAL_GetTick>
 800cc36:	4602      	mov	r2, r0
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	1ad3      	subs	r3, r2, r3
 800cc3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc40:	d904      	bls.n	800cc4c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2204      	movs	r2, #4
 800cc46:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d102      	bne.n	800cc60 <RTC_EnterInitMode+0x64>
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d1e8      	bne.n	800cc32 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b084      	sub	sp, #16
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	68da      	ldr	r2, [r3, #12]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc84:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	f003 0320 	and.w	r3, r3, #32
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10a      	bne.n	800ccaa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7ff ff8b 	bl	800cbb0 <HAL_RTC_WaitForSynchro>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d004      	beq.n	800ccaa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2204      	movs	r2, #4
 800cca4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cca6:	2301      	movs	r3, #1
 800cca8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ccaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800ccc2:	e005      	b.n	800ccd0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800ccca:	79fb      	ldrb	r3, [r7, #7]
 800cccc:	3b0a      	subs	r3, #10
 800ccce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800ccd0:	79fb      	ldrb	r3, [r7, #7]
 800ccd2:	2b09      	cmp	r3, #9
 800ccd4:	d8f6      	bhi.n	800ccc4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	b2db      	uxtb	r3, r3
 800ccda:	011b      	lsls	r3, r3, #4
 800ccdc:	b2da      	uxtb	r2, r3
 800ccde:	79fb      	ldrb	r3, [r7, #7]
 800cce0:	4313      	orrs	r3, r2
 800cce2:	b2db      	uxtb	r3, r3
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3714      	adds	r7, #20
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800ccfe:	79fb      	ldrb	r3, [r7, #7]
 800cd00:	091b      	lsrs	r3, r3, #4
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	461a      	mov	r2, r3
 800cd06:	4613      	mov	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	4413      	add	r3, r2
 800cd0c:	005b      	lsls	r3, r3, #1
 800cd0e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	b2da      	uxtb	r2, r3
 800cd14:	79fb      	ldrb	r3, [r7, #7]
 800cd16:	f003 030f 	and.w	r3, r3, #15
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	4413      	add	r3, r2
 800cd1e:	b2db      	uxtb	r3, r3
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3714      	adds	r7, #20
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b087      	sub	sp, #28
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800cd38:	4b5a      	ldr	r3, [pc, #360]	@ (800cea4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	4a5a      	ldr	r2, [pc, #360]	@ (800cea8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cd3e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd42:	0adb      	lsrs	r3, r3, #11
 800cd44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cd48:	fb02 f303 	mul.w	r3, r2, r3
 800cd4c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	7f1b      	ldrb	r3, [r3, #28]
 800cd52:	2b01      	cmp	r3, #1
 800cd54:	d101      	bne.n	800cd5a <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800cd56:	2302      	movs	r3, #2
 800cd58:	e09d      	b.n	800ce96 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2201      	movs	r2, #1
 800cd5e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2202      	movs	r2, #2
 800cd64:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	22ca      	movs	r2, #202	@ 0xca
 800cd6c:	625a      	str	r2, [r3, #36]	@ 0x24
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	2253      	movs	r2, #83	@ 0x53
 800cd74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d018      	beq.n	800cdb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	3b01      	subs	r3, #1
 800cd88:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d10b      	bne.n	800cda8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	22ff      	movs	r2, #255	@ 0xff
 800cd96:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2203      	movs	r2, #3
 800cd9c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e076      	b.n	800ce96 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	f003 0304 	and.w	r3, r3, #4
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d1e6      	bne.n	800cd84 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	689a      	ldr	r2, [r3, #8]
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cdc4:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800cdd6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800cdd8:	4b32      	ldr	r3, [pc, #200]	@ (800cea4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a32      	ldr	r2, [pc, #200]	@ (800cea8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800cdde:	fba2 2303 	umull	r2, r3, r2, r3
 800cde2:	0adb      	lsrs	r3, r3, #11
 800cde4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cde8:	fb02 f303 	mul.w	r3, r2, r3
 800cdec:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10b      	bne.n	800ce12 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	22ff      	movs	r2, #255	@ 0xff
 800ce00:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2203      	movs	r2, #3
 800ce06:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	e041      	b.n	800ce96 <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	f003 0304 	and.w	r3, r3, #4
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d0e6      	beq.n	800cdee <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	689a      	ldr	r2, [r3, #8]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f022 0207 	bic.w	r2, r2, #7
 800ce2e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	6899      	ldr	r1, [r3, #8]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	687a      	ldr	r2, [r7, #4]
 800ce3c:	430a      	orrs	r2, r1
 800ce3e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	68ba      	ldr	r2, [r7, #8]
 800ce46:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800ce48:	4b18      	ldr	r3, [pc, #96]	@ (800ceac <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a17      	ldr	r2, [pc, #92]	@ (800ceac <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800ce4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ce52:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800ce54:	4b15      	ldr	r3, [pc, #84]	@ (800ceac <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	4a14      	ldr	r2, [pc, #80]	@ (800ceac <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800ce5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ce5e:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	689a      	ldr	r2, [r3, #8]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ce6e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	689a      	ldr	r2, [r3, #8]
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ce7e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	22ff      	movs	r2, #255	@ 0xff
 800ce86:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2200      	movs	r2, #0
 800ce92:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	371c      	adds	r7, #28
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr
 800cea2:	bf00      	nop
 800cea4:	20004ed0 	.word	0x20004ed0
 800cea8:	10624dd3 	.word	0x10624dd3
 800ceac:	40013c00 	.word	0x40013c00

0800ceb0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b082      	sub	sp, #8
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800ceb8:	4b0e      	ldr	r3, [pc, #56]	@ (800cef4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800ceba:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800cebe:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00b      	beq.n	800cee6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800cede:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 f809 	bl	800cef8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2201      	movs	r2, #1
 800ceea:	775a      	strb	r2, [r3, #29]
}
 800ceec:	bf00      	nop
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	40013c00 	.word	0x40013c00

0800cef8 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800cf00:	bf00      	nop
 800cf02:	370c      	adds	r7, #12
 800cf04:	46bd      	mov	sp, r7
 800cf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0a:	4770      	bx	lr

0800cf0c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e022      	b.n	800cf64 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800cf24:	b2db      	uxtb	r3, r3
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d105      	bne.n	800cf36 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	f7f8 f80d 	bl	8004f50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2203      	movs	r2, #3
 800cf3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f000 f814 	bl	800cf6c <HAL_SD_InitCard>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d001      	beq.n	800cf4e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e00a      	b.n	800cf64 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cf62:	2300      	movs	r3, #0
}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf6c:	b5b0      	push	{r4, r5, r7, lr}
 800cf6e:	b08e      	sub	sp, #56	@ 0x38
 800cf70:	af04      	add	r7, sp, #16
 800cf72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cf74:	2300      	movs	r3, #0
 800cf76:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cf80:	2300      	movs	r3, #0
 800cf82:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cf84:	2300      	movs	r3, #0
 800cf86:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800cf88:	2376      	movs	r3, #118	@ 0x76
 800cf8a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681d      	ldr	r5, [r3, #0]
 800cf90:	466c      	mov	r4, sp
 800cf92:	f107 0314 	add.w	r3, r7, #20
 800cf96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf9e:	f107 0308 	add.w	r3, r7, #8
 800cfa2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	f003 f86d 	bl	8010084 <SDMMC_Init>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800cfb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d001      	beq.n	800cfbc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e059      	b.n	800d070 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	685a      	ldr	r2, [r3, #4]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cfca:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f003 f8a1 	bl	8010118 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	685a      	ldr	r2, [r3, #4]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cfe4:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800cfe6:	2002      	movs	r0, #2
 800cfe8:	f7fb f946 	bl	8008278 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 ff59 	bl	800dea4 <SD_PowerON>
 800cff2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cff4:	6a3b      	ldr	r3, [r7, #32]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00b      	beq.n	800d012 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d006:	6a3b      	ldr	r3, [r7, #32]
 800d008:	431a      	orrs	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d00e:	2301      	movs	r3, #1
 800d010:	e02e      	b.n	800d070 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 fe78 	bl	800dd08 <SD_InitCard>
 800d018:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d01a:	6a3b      	ldr	r3, [r7, #32]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00b      	beq.n	800d038 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2201      	movs	r2, #1
 800d024:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d02c:	6a3b      	ldr	r3, [r7, #32]
 800d02e:	431a      	orrs	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d034:	2301      	movs	r3, #1
 800d036:	e01b      	b.n	800d070 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d040:	4618      	mov	r0, r3
 800d042:	f003 f8fb 	bl	801023c <SDMMC_CmdBlockLength>
 800d046:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d048:	6a3b      	ldr	r3, [r7, #32]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d00f      	beq.n	800d06e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	4a09      	ldr	r2, [pc, #36]	@ (800d078 <HAL_SD_InitCard+0x10c>)
 800d054:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d05a:	6a3b      	ldr	r3, [r7, #32]
 800d05c:	431a      	orrs	r2, r3
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2201      	movs	r2, #1
 800d066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e000      	b.n	800d070 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3728      	adds	r7, #40	@ 0x28
 800d074:	46bd      	mov	sp, r7
 800d076:	bdb0      	pop	{r4, r5, r7, pc}
 800d078:	004005ff 	.word	0x004005ff

0800d07c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b08c      	sub	sp, #48	@ 0x30
 800d080:	af00      	add	r7, sp, #0
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
 800d088:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d107      	bne.n	800d0a4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d098:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e0c3      	b.n	800d22c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	f040 80bc 	bne.w	800d22a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d0b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	441a      	add	r2, r3
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d907      	bls.n	800d0d6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0ca:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d0d2:	2301      	movs	r3, #1
 800d0d4:	e0aa      	b.n	800d22c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2203      	movs	r2, #3
 800d0da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 800d0f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0fa:	4a4e      	ldr	r2, [pc, #312]	@ (800d234 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d0fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d102:	4a4d      	ldr	r2, [pc, #308]	@ (800d238 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d104:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d10a:	2200      	movs	r2, #0
 800d10c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d112:	2200      	movs	r2, #0
 800d114:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d126:	689a      	ldr	r2, [r3, #8]
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	430a      	orrs	r2, r1
 800d130:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	3380      	adds	r3, #128	@ 0x80
 800d13c:	4619      	mov	r1, r3
 800d13e:	68ba      	ldr	r2, [r7, #8]
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	025b      	lsls	r3, r3, #9
 800d144:	089b      	lsrs	r3, r3, #2
 800d146:	f7fb ff07 	bl	8008f58 <HAL_DMA_Start_IT>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d017      	beq.n	800d180 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800d15e:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a35      	ldr	r2, [pc, #212]	@ (800d23c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d166:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d16c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e055      	b.n	800d22c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f042 0208 	orr.w	r2, r2, #8
 800d18e:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d194:	2b01      	cmp	r3, #1
 800d196:	d002      	beq.n	800d19e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800d198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19a:	025b      	lsls	r3, r3, #9
 800d19c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d19e:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	025b      	lsls	r3, r3, #9
 800d1a8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d1aa:	2390      	movs	r3, #144	@ 0x90
 800d1ac:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d1ae:	2302      	movs	r3, #2
 800d1b0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f107 0210 	add.w	r2, r7, #16
 800d1c2:	4611      	mov	r1, r2
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f003 f80d 	bl	80101e4 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d90a      	bls.n	800d1e6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2282      	movs	r2, #130	@ 0x82
 800d1d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f003 f871 	bl	80102c4 <SDMMC_CmdReadMultiBlock>
 800d1e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d1e4:	e009      	b.n	800d1fa <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2281      	movs	r2, #129	@ 0x81
 800d1ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f003 f844 	bl	8010280 <SDMMC_CmdReadSingleBlock>
 800d1f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d012      	beq.n	800d226 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a0d      	ldr	r2, [pc, #52]	@ (800d23c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d206:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d20e:	431a      	orrs	r2, r3
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2201      	movs	r2, #1
 800d218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	2200      	movs	r2, #0
 800d220:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800d222:	2301      	movs	r3, #1
 800d224:	e002      	b.n	800d22c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	e000      	b.n	800d22c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800d22a:	2302      	movs	r3, #2
  }
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3730      	adds	r7, #48	@ 0x30
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	0800db17 	.word	0x0800db17
 800d238:	0800db89 	.word	0x0800db89
 800d23c:	004005ff 	.word	0x004005ff

0800d240 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b08c      	sub	sp, #48	@ 0x30
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
 800d24c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d107      	bne.n	800d268 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d25c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	e0c6      	b.n	800d3f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b01      	cmp	r3, #1
 800d272:	f040 80bf 	bne.w	800d3f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2200      	movs	r2, #0
 800d27a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d27c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	441a      	add	r2, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d286:	429a      	cmp	r2, r3
 800d288:	d907      	bls.n	800d29a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d28e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	e0ad      	b.n	800d3f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2203      	movs	r2, #3
 800d29e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f042 021a 	orr.w	r2, r2, #26
 800d2b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2be:	4a50      	ldr	r2, [pc, #320]	@ (800d400 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d2c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2c6:	4a4f      	ldr	r2, [pc, #316]	@ (800d404 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800d2c8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2d6:	2b01      	cmp	r3, #1
 800d2d8:	d002      	beq.n	800d2e0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2dc:	025b      	lsls	r3, r3, #9
 800d2de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d90a      	bls.n	800d2fc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	22a0      	movs	r2, #160	@ 0xa0
 800d2ea:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f003 f82a 	bl	801034c <SDMMC_CmdWriteMultiBlock>
 800d2f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800d2fa:	e009      	b.n	800d310 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2290      	movs	r2, #144	@ 0x90
 800d300:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d308:	4618      	mov	r0, r3
 800d30a:	f002 fffd 	bl	8010308 <SDMMC_CmdWriteSingleBlock>
 800d30e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d312:	2b00      	cmp	r3, #0
 800d314:	d012      	beq.n	800d33c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	4a3b      	ldr	r2, [pc, #236]	@ (800d408 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d31c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d324:	431a      	orrs	r2, r3
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	2201      	movs	r2, #1
 800d32e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	2200      	movs	r2, #0
 800d336:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	e05c      	b.n	800d3f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f042 0208 	orr.w	r2, r2, #8
 800d34a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d350:	2240      	movs	r2, #64	@ 0x40
 800d352:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d364:	689a      	ldr	r2, [r3, #8]
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	430a      	orrs	r2, r1
 800d36e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d374:	68b9      	ldr	r1, [r7, #8]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	3380      	adds	r3, #128	@ 0x80
 800d37c:	461a      	mov	r2, r3
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	025b      	lsls	r3, r3, #9
 800d382:	089b      	lsrs	r3, r3, #2
 800d384:	f7fb fde8 	bl	8008f58 <HAL_DMA_Start_IT>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d01a      	beq.n	800d3c4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f022 021a 	bic.w	r2, r2, #26
 800d39c:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	4a19      	ldr	r2, [pc, #100]	@ (800d408 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d3a4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e018      	b.n	800d3f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d3c8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	025b      	lsls	r3, r3, #9
 800d3ce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d3d0:	2390      	movs	r3, #144	@ 0x90
 800d3d2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f107 0210 	add.w	r2, r7, #16
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f002 fefa 	bl	80101e4 <SDMMC_ConfigData>

      return HAL_OK;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	e000      	b.n	800d3f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d3f4:	2302      	movs	r3, #2
  }
}
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	3730      	adds	r7, #48	@ 0x30
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	bd80      	pop	{r7, pc}
 800d3fe:	bf00      	nop
 800d400:	0800daed 	.word	0x0800daed
 800d404:	0800db89 	.word	0x0800db89
 800d408:	004005ff 	.word	0x004005ff

0800d40c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d418:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d420:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d424:	2b00      	cmp	r3, #0
 800d426:	d008      	beq.n	800d43a <HAL_SD_IRQHandler+0x2e>
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	f003 0308 	and.w	r3, r3, #8
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d003      	beq.n	800d43a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 fdec 	bl	800e010 <SD_Read_IT>
 800d438:	e15a      	b.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d444:	2b00      	cmp	r3, #0
 800d446:	f000 808d 	beq.w	800d564 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d452:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681a      	ldr	r2, [r3, #0]
 800d45e:	4b9a      	ldr	r3, [pc, #616]	@ (800d6c8 <HAL_SD_IRQHandler+0x2bc>)
 800d460:	400b      	ands	r3, r1
 800d462:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f022 0201 	bic.w	r2, r2, #1
 800d472:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f003 0308 	and.w	r3, r3, #8
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d039      	beq.n	800d4f2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f003 0302 	and.w	r3, r3, #2
 800d484:	2b00      	cmp	r3, #0
 800d486:	d104      	bne.n	800d492 <HAL_SD_IRQHandler+0x86>
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f003 0320 	and.w	r3, r3, #32
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d011      	beq.n	800d4b6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4618      	mov	r0, r3
 800d498:	f002 ff7a 	bl	8010390 <SDMMC_CmdStopTransfer>
 800d49c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d49e:	68bb      	ldr	r3, [r7, #8]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d008      	beq.n	800d4b6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	431a      	orrs	r2, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 f921 	bl	800d6f8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d4be:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f003 0301 	and.w	r3, r3, #1
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d104      	bne.n	800d4e2 <HAL_SD_IRQHandler+0xd6>
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	f003 0302 	and.w	r3, r3, #2
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f003 ff14 	bl	8011310 <HAL_SD_RxCpltCallback>
 800d4e8:	e102      	b.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f003 ff06 	bl	80112fc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d4f0:	e0fe      	b.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	f000 80f9 	beq.w	800d6f0 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f003 0320 	and.w	r3, r3, #32
 800d504:	2b00      	cmp	r3, #0
 800d506:	d011      	beq.n	800d52c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4618      	mov	r0, r3
 800d50e:	f002 ff3f 	bl	8010390 <SDMMC_CmdStopTransfer>
 800d512:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d008      	beq.n	800d52c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	431a      	orrs	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 f8e6 	bl	800d6f8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f003 0301 	and.w	r3, r3, #1
 800d532:	2b00      	cmp	r3, #0
 800d534:	f040 80dc 	bne.w	800d6f0 <HAL_SD_IRQHandler+0x2e4>
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	f003 0302 	and.w	r3, r3, #2
 800d53e:	2b00      	cmp	r3, #0
 800d540:	f040 80d6 	bne.w	800d6f0 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f022 0208 	bic.w	r2, r2, #8
 800d552:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2201      	movs	r2, #1
 800d558:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f003 fecd 	bl	80112fc <HAL_SD_TxCpltCallback>
}
 800d562:	e0c5      	b.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d56a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d008      	beq.n	800d584 <HAL_SD_IRQHandler+0x178>
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	f003 0308 	and.w	r3, r3, #8
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d003      	beq.n	800d584 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 fd98 	bl	800e0b2 <SD_Write_IT>
 800d582:	e0b5      	b.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d58a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f000 80ae 	beq.w	800d6f0 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d59a:	f003 0302 	and.w	r3, r3, #2
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d005      	beq.n	800d5ae <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5a6:	f043 0202 	orr.w	r2, r3, #2
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5b4:	f003 0308 	and.w	r3, r3, #8
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d005      	beq.n	800d5c8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5c0:	f043 0208 	orr.w	r2, r3, #8
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5ce:	f003 0320 	and.w	r3, r3, #32
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d005      	beq.n	800d5e2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5da:	f043 0220 	orr.w	r2, r3, #32
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5e8:	f003 0310 	and.w	r3, r3, #16
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d005      	beq.n	800d5fc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5f4:	f043 0210 	orr.w	r2, r3, #16
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d604:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800d614:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4618      	mov	r0, r3
 800d61c:	f002 feb8 	bl	8010390 <SDMMC_CmdStopTransfer>
 800d620:	4602      	mov	r2, r0
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d626:	431a      	orrs	r2, r3
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f003 0308 	and.w	r3, r3, #8
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00a      	beq.n	800d64c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2201      	movs	r2, #1
 800d63a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2200      	movs	r2, #0
 800d642:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 f857 	bl	800d6f8 <HAL_SD_ErrorCallback>
}
 800d64a:	e051      	b.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d652:	2b00      	cmp	r3, #0
 800d654:	d04c      	beq.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f003 0310 	and.w	r3, r3, #16
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d104      	bne.n	800d66a <HAL_SD_IRQHandler+0x25e>
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	f003 0320 	and.w	r3, r3, #32
 800d666:	2b00      	cmp	r3, #0
 800d668:	d011      	beq.n	800d68e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d66e:	4a17      	ldr	r2, [pc, #92]	@ (800d6cc <HAL_SD_IRQHandler+0x2c0>)
 800d670:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d676:	4618      	mov	r0, r3
 800d678:	f7fb fcce 	bl	8009018 <HAL_DMA_Abort_IT>
 800d67c:	4603      	mov	r3, r0
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d036      	beq.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d686:	4618      	mov	r0, r3
 800d688:	f000 fad0 	bl	800dc2c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d68c:	e030      	b.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f003 0301 	and.w	r3, r3, #1
 800d694:	2b00      	cmp	r3, #0
 800d696:	d104      	bne.n	800d6a2 <HAL_SD_IRQHandler+0x296>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f003 0302 	and.w	r3, r3, #2
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d018      	beq.n	800d6d4 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6a6:	4a0a      	ldr	r2, [pc, #40]	@ (800d6d0 <HAL_SD_IRQHandler+0x2c4>)
 800d6a8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fb fcb2 	bl	8009018 <HAL_DMA_Abort_IT>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d01a      	beq.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f000 faeb 	bl	800dc9a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d6c4:	e014      	b.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
 800d6c6:	bf00      	nop
 800d6c8:	ffff3ec5 	.word	0xffff3ec5
 800d6cc:	0800dc2d 	.word	0x0800dc2d
 800d6d0:	0800dc9b 	.word	0x0800dc9b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f003 fdfd 	bl	80112e8 <HAL_SD_AbortCallback>
}
 800d6ee:	e7ff      	b.n	800d6f0 <HAL_SD_IRQHandler+0x2e4>
 800d6f0:	bf00      	nop
 800d6f2:	3710      	adds	r7, #16
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b083      	sub	sp, #12
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d700:	bf00      	nop
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr

0800d70c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d71a:	0f9b      	lsrs	r3, r3, #30
 800d71c:	b2da      	uxtb	r2, r3
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d726:	0e9b      	lsrs	r3, r3, #26
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	f003 030f 	and.w	r3, r3, #15
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d738:	0e1b      	lsrs	r3, r3, #24
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	f003 0303 	and.w	r3, r3, #3
 800d740:	b2da      	uxtb	r2, r3
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d74a:	0c1b      	lsrs	r3, r3, #16
 800d74c:	b2da      	uxtb	r2, r3
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d756:	0a1b      	lsrs	r3, r3, #8
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d762:	b2da      	uxtb	r2, r3
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d76c:	0d1b      	lsrs	r3, r3, #20
 800d76e:	b29a      	uxth	r2, r3
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d778:	0c1b      	lsrs	r3, r3, #16
 800d77a:	b2db      	uxtb	r3, r3
 800d77c:	f003 030f 	and.w	r3, r3, #15
 800d780:	b2da      	uxtb	r2, r3
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d78a:	0bdb      	lsrs	r3, r3, #15
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	f003 0301 	and.w	r3, r3, #1
 800d792:	b2da      	uxtb	r2, r3
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d79c:	0b9b      	lsrs	r3, r3, #14
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	f003 0301 	and.w	r3, r3, #1
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7ae:	0b5b      	lsrs	r3, r3, #13
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	f003 0301 	and.w	r3, r3, #1
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7c0:	0b1b      	lsrs	r3, r3, #12
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d163      	bne.n	800d8a4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d7e0:	009a      	lsls	r2, r3, #2
 800d7e2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d7ec:	0f92      	lsrs	r2, r2, #30
 800d7ee:	431a      	orrs	r2, r3
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7f8:	0edb      	lsrs	r3, r3, #27
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	f003 0307 	and.w	r3, r3, #7
 800d800:	b2da      	uxtb	r2, r3
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d80a:	0e1b      	lsrs	r3, r3, #24
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	f003 0307 	and.w	r3, r3, #7
 800d812:	b2da      	uxtb	r2, r3
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d81c:	0d5b      	lsrs	r3, r3, #21
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	f003 0307 	and.w	r3, r3, #7
 800d824:	b2da      	uxtb	r2, r3
 800d826:	683b      	ldr	r3, [r7, #0]
 800d828:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d82e:	0c9b      	lsrs	r3, r3, #18
 800d830:	b2db      	uxtb	r3, r3
 800d832:	f003 0307 	and.w	r3, r3, #7
 800d836:	b2da      	uxtb	r2, r3
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d840:	0bdb      	lsrs	r3, r3, #15
 800d842:	b2db      	uxtb	r3, r3
 800d844:	f003 0307 	and.w	r3, r3, #7
 800d848:	b2da      	uxtb	r2, r3
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	1c5a      	adds	r2, r3, #1
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	7e1b      	ldrb	r3, [r3, #24]
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	f003 0307 	and.w	r3, r3, #7
 800d862:	3302      	adds	r3, #2
 800d864:	2201      	movs	r2, #1
 800d866:	fa02 f303 	lsl.w	r3, r2, r3
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d86e:	fb03 f202 	mul.w	r2, r3, r2
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	7a1b      	ldrb	r3, [r3, #8]
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	f003 030f 	and.w	r3, r3, #15
 800d880:	2201      	movs	r2, #1
 800d882:	409a      	lsls	r2, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d890:	0a52      	lsrs	r2, r2, #9
 800d892:	fb03 f202 	mul.w	r2, r3, r2
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8a0:	661a      	str	r2, [r3, #96]	@ 0x60
 800d8a2:	e031      	b.n	800d908 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d11d      	bne.n	800d8e8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d8b0:	041b      	lsls	r3, r3, #16
 800d8b2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8ba:	0c1b      	lsrs	r3, r3, #16
 800d8bc:	431a      	orrs	r2, r3
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	029a      	lsls	r2, r3, #10
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d8dc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	661a      	str	r2, [r3, #96]	@ 0x60
 800d8e6:	e00f      	b.n	800d908 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a58      	ldr	r2, [pc, #352]	@ (800da50 <HAL_SD_GetCardCSD+0x344>)
 800d8ee:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d904:	2301      	movs	r3, #1
 800d906:	e09d      	b.n	800da44 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d90c:	0b9b      	lsrs	r3, r3, #14
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	f003 0301 	and.w	r3, r3, #1
 800d914:	b2da      	uxtb	r2, r3
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d91e:	09db      	lsrs	r3, r3, #7
 800d920:	b2db      	uxtb	r3, r3
 800d922:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d926:	b2da      	uxtb	r2, r3
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d930:	b2db      	uxtb	r3, r3
 800d932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d936:	b2da      	uxtb	r2, r3
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d940:	0fdb      	lsrs	r3, r3, #31
 800d942:	b2da      	uxtb	r2, r3
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d94c:	0f5b      	lsrs	r3, r3, #29
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	f003 0303 	and.w	r3, r3, #3
 800d954:	b2da      	uxtb	r2, r3
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d95e:	0e9b      	lsrs	r3, r3, #26
 800d960:	b2db      	uxtb	r3, r3
 800d962:	f003 0307 	and.w	r3, r3, #7
 800d966:	b2da      	uxtb	r2, r3
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d970:	0d9b      	lsrs	r3, r3, #22
 800d972:	b2db      	uxtb	r3, r3
 800d974:	f003 030f 	and.w	r3, r3, #15
 800d978:	b2da      	uxtb	r2, r3
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d982:	0d5b      	lsrs	r3, r3, #21
 800d984:	b2db      	uxtb	r3, r3
 800d986:	f003 0301 	and.w	r3, r3, #1
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	2200      	movs	r2, #0
 800d996:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d99e:	0c1b      	lsrs	r3, r3, #16
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	f003 0301 	and.w	r3, r3, #1
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9b2:	0bdb      	lsrs	r3, r3, #15
 800d9b4:	b2db      	uxtb	r3, r3
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9c6:	0b9b      	lsrs	r3, r3, #14
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	f003 0301 	and.w	r3, r3, #1
 800d9ce:	b2da      	uxtb	r2, r3
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9da:	0b5b      	lsrs	r3, r3, #13
 800d9dc:	b2db      	uxtb	r3, r3
 800d9de:	f003 0301 	and.w	r3, r3, #1
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9ee:	0b1b      	lsrs	r3, r3, #12
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	f003 0301 	and.w	r3, r3, #1
 800d9f6:	b2da      	uxtb	r2, r3
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da02:	0a9b      	lsrs	r3, r3, #10
 800da04:	b2db      	uxtb	r3, r3
 800da06:	f003 0303 	and.w	r3, r3, #3
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da16:	0a1b      	lsrs	r3, r3, #8
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	f003 0303 	and.w	r3, r3, #3
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da2a:	085b      	lsrs	r3, r3, #1
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da32:	b2da      	uxtb	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	2201      	movs	r2, #1
 800da3e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	004005ff 	.word	0x004005ff

0800da54 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b086      	sub	sp, #24
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dab4:	2300      	movs	r3, #0
 800dab6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dab8:	f107 030c 	add.w	r3, r7, #12
 800dabc:	4619      	mov	r1, r3
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 fa7e 	bl	800dfc0 <SD_SendStatus>
 800dac4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d005      	beq.n	800dad8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	431a      	orrs	r2, r3
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	0a5b      	lsrs	r3, r3, #9
 800dadc:	f003 030f 	and.w	r3, r3, #15
 800dae0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dae2:	693b      	ldr	r3, [r7, #16]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3718      	adds	r7, #24
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800daec:	b480      	push	{r7}
 800daee:	b085      	sub	sp, #20
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daf8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800db08:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800db0a:	bf00      	nop
 800db0c:	3714      	adds	r7, #20
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr

0800db16 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b084      	sub	sp, #16
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db22:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db28:	2b82      	cmp	r3, #130	@ 0x82
 800db2a:	d111      	bne.n	800db50 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4618      	mov	r0, r3
 800db32:	f002 fc2d 	bl	8010390 <SDMMC_CmdStopTransfer>
 800db36:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d008      	beq.n	800db50 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	431a      	orrs	r2, r3
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800db4a:	68f8      	ldr	r0, [r7, #12]
 800db4c:	f7ff fdd4 	bl	800d6f8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f022 0208 	bic.w	r2, r2, #8
 800db5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f240 523a 	movw	r2, #1338	@ 0x53a
 800db68:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2201      	movs	r2, #1
 800db6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800db78:	68f8      	ldr	r0, [r7, #12]
 800db7a:	f003 fbc9 	bl	8011310 <HAL_SD_RxCpltCallback>
#endif
}
 800db7e:	bf00      	nop
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
	...

0800db88 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db94:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f7fb fbea 	bl	8009370 <HAL_DMA_GetError>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	d03e      	beq.n	800dc20 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dba8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dbb0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d002      	beq.n	800dbbe <SD_DMAError+0x36>
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	d12d      	bne.n	800dc1a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	4a19      	ldr	r2, [pc, #100]	@ (800dc28 <SD_DMAError+0xa0>)
 800dbc4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800dbd4:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbda:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800dbe2:	6978      	ldr	r0, [r7, #20]
 800dbe4:	f7ff ff62 	bl	800daac <HAL_SD_GetCardState>
 800dbe8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	2b06      	cmp	r3, #6
 800dbee:	d002      	beq.n	800dbf6 <SD_DMAError+0x6e>
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	2b05      	cmp	r3, #5
 800dbf4:	d10a      	bne.n	800dc0c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f002 fbc8 	bl	8010390 <SDMMC_CmdStopTransfer>
 800dc00:	4602      	mov	r2, r0
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc06:	431a      	orrs	r2, r3
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	2200      	movs	r2, #0
 800dc18:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dc1a:	6978      	ldr	r0, [r7, #20]
 800dc1c:	f7ff fd6c 	bl	800d6f8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dc20:	bf00      	nop
 800dc22:	3718      	adds	r7, #24
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	004005ff 	.word	0x004005ff

0800dc2c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b084      	sub	sp, #16
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc38:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800dc42:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dc44:	68f8      	ldr	r0, [r7, #12]
 800dc46:	f7ff ff31 	bl	800daac <HAL_SD_GetCardState>
 800dc4a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2201      	movs	r2, #1
 800dc50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2200      	movs	r2, #0
 800dc58:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	2b06      	cmp	r3, #6
 800dc5e:	d002      	beq.n	800dc66 <SD_DMATxAbort+0x3a>
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	2b05      	cmp	r3, #5
 800dc64:	d10a      	bne.n	800dc7c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f002 fb90 	bl	8010390 <SDMMC_CmdStopTransfer>
 800dc70:	4602      	mov	r2, r0
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc76:	431a      	orrs	r2, r3
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d103      	bne.n	800dc8c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f003 fb2f 	bl	80112e8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dc8a:	e002      	b.n	800dc92 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dc8c:	68f8      	ldr	r0, [r7, #12]
 800dc8e:	f7ff fd33 	bl	800d6f8 <HAL_SD_ErrorCallback>
}
 800dc92:	bf00      	nop
 800dc94:	3710      	adds	r7, #16
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd80      	pop	{r7, pc}

0800dc9a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800dc9a:	b580      	push	{r7, lr}
 800dc9c:	b084      	sub	sp, #16
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dca6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	f240 523a 	movw	r2, #1338	@ 0x53a
 800dcb0:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f7ff fefa 	bl	800daac <HAL_SD_GetCardState>
 800dcb8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2201      	movs	r2, #1
 800dcbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	2b06      	cmp	r3, #6
 800dccc:	d002      	beq.n	800dcd4 <SD_DMARxAbort+0x3a>
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	2b05      	cmp	r3, #5
 800dcd2:	d10a      	bne.n	800dcea <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f002 fb59 	bl	8010390 <SDMMC_CmdStopTransfer>
 800dcde:	4602      	mov	r2, r0
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dce4:	431a      	orrs	r2, r3
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d103      	bne.n	800dcfa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f003 faf8 	bl	80112e8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dcf8:	e002      	b.n	800dd00 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dcfa:	68f8      	ldr	r0, [r7, #12]
 800dcfc:	f7ff fcfc 	bl	800d6f8 <HAL_SD_ErrorCallback>
}
 800dd00:	bf00      	nop
 800dd02:	3710      	adds	r7, #16
 800dd04:	46bd      	mov	sp, r7
 800dd06:	bd80      	pop	{r7, pc}

0800dd08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dd08:	b5b0      	push	{r4, r5, r7, lr}
 800dd0a:	b094      	sub	sp, #80	@ 0x50
 800dd0c:	af04      	add	r7, sp, #16
 800dd0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dd10:	2301      	movs	r3, #1
 800dd12:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f002 fa0b 	bl	8010134 <SDMMC_GetPowerState>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d102      	bne.n	800dd2a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd24:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800dd28:	e0b8      	b.n	800de9c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd2e:	2b03      	cmp	r3, #3
 800dd30:	d02f      	beq.n	800dd92 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4618      	mov	r0, r3
 800dd38:	f002 fbf2 	bl	8010520 <SDMMC_CmdSendCID>
 800dd3c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d001      	beq.n	800dd48 <SD_InitCard+0x40>
    {
      return errorstate;
 800dd44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd46:	e0a9      	b.n	800de9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2100      	movs	r1, #0
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f002 fa35 	bl	80101be <SDMMC_GetResponse>
 800dd54:	4602      	mov	r2, r0
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2104      	movs	r1, #4
 800dd60:	4618      	mov	r0, r3
 800dd62:	f002 fa2c 	bl	80101be <SDMMC_GetResponse>
 800dd66:	4602      	mov	r2, r0
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2108      	movs	r1, #8
 800dd72:	4618      	mov	r0, r3
 800dd74:	f002 fa23 	bl	80101be <SDMMC_GetResponse>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	210c      	movs	r1, #12
 800dd84:	4618      	mov	r0, r3
 800dd86:	f002 fa1a 	bl	80101be <SDMMC_GetResponse>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd96:	2b03      	cmp	r3, #3
 800dd98:	d00d      	beq.n	800ddb6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	f107 020e 	add.w	r2, r7, #14
 800dda2:	4611      	mov	r1, r2
 800dda4:	4618      	mov	r0, r3
 800dda6:	f002 fbf8 	bl	801059a <SDMMC_CmdSetRelAdd>
 800ddaa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d001      	beq.n	800ddb6 <SD_InitCard+0xae>
    {
      return errorstate;
 800ddb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddb4:	e072      	b.n	800de9c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddba:	2b03      	cmp	r3, #3
 800ddbc:	d036      	beq.n	800de2c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ddbe:	89fb      	ldrh	r3, [r7, #14]
 800ddc0:	461a      	mov	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ddce:	041b      	lsls	r3, r3, #16
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	4610      	mov	r0, r2
 800ddd4:	f002 fbc2 	bl	801055c <SDMMC_CmdSendCSD>
 800ddd8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d001      	beq.n	800dde4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800dde0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dde2:	e05b      	b.n	800de9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2100      	movs	r1, #0
 800ddea:	4618      	mov	r0, r3
 800ddec:	f002 f9e7 	bl	80101be <SDMMC_GetResponse>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2104      	movs	r1, #4
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f002 f9de 	bl	80101be <SDMMC_GetResponse>
 800de02:	4602      	mov	r2, r0
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2108      	movs	r1, #8
 800de0e:	4618      	mov	r0, r3
 800de10:	f002 f9d5 	bl	80101be <SDMMC_GetResponse>
 800de14:	4602      	mov	r2, r0
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	210c      	movs	r1, #12
 800de20:	4618      	mov	r0, r3
 800de22:	f002 f9cc 	bl	80101be <SDMMC_GetResponse>
 800de26:	4602      	mov	r2, r0
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2104      	movs	r1, #4
 800de32:	4618      	mov	r0, r3
 800de34:	f002 f9c3 	bl	80101be <SDMMC_GetResponse>
 800de38:	4603      	mov	r3, r0
 800de3a:	0d1a      	lsrs	r2, r3, #20
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800de40:	f107 0310 	add.w	r3, r7, #16
 800de44:	4619      	mov	r1, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f7ff fc60 	bl	800d70c <HAL_SD_GetCardCSD>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d002      	beq.n	800de58 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de52:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800de56:	e021      	b.n	800de9c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6819      	ldr	r1, [r3, #0]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de60:	041b      	lsls	r3, r3, #16
 800de62:	2200      	movs	r2, #0
 800de64:	461c      	mov	r4, r3
 800de66:	4615      	mov	r5, r2
 800de68:	4622      	mov	r2, r4
 800de6a:	462b      	mov	r3, r5
 800de6c:	4608      	mov	r0, r1
 800de6e:	f002 fab1 	bl	80103d4 <SDMMC_CmdSelDesel>
 800de72:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800de74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de76:	2b00      	cmp	r3, #0
 800de78:	d001      	beq.n	800de7e <SD_InitCard+0x176>
  {
    return errorstate;
 800de7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800de7c:	e00e      	b.n	800de9c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681d      	ldr	r5, [r3, #0]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	466c      	mov	r4, sp
 800de86:	f103 0210 	add.w	r2, r3, #16
 800de8a:	ca07      	ldmia	r2, {r0, r1, r2}
 800de8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de90:	3304      	adds	r3, #4
 800de92:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de94:	4628      	mov	r0, r5
 800de96:	f002 f8f5 	bl	8010084 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800de9a:	2300      	movs	r3, #0
}
 800de9c:	4618      	mov	r0, r3
 800de9e:	3740      	adds	r7, #64	@ 0x40
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bdb0      	pop	{r4, r5, r7, pc}

0800dea4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800deac:	2300      	movs	r3, #0
 800deae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800deb0:	2300      	movs	r3, #0
 800deb2:	617b      	str	r3, [r7, #20]
 800deb4:	2300      	movs	r3, #0
 800deb6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4618      	mov	r0, r3
 800debe:	f002 faac 	bl	801041a <SDMMC_CmdGoIdleState>
 800dec2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d001      	beq.n	800dece <SD_PowerON+0x2a>
  {
    return errorstate;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	e072      	b.n	800dfb4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f002 fabf 	bl	8010456 <SDMMC_CmdOperCond>
 800ded8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00d      	beq.n	800defc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4618      	mov	r0, r3
 800deec:	f002 fa95 	bl	801041a <SDMMC_CmdGoIdleState>
 800def0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d004      	beq.n	800df02 <SD_PowerON+0x5e>
    {
      return errorstate;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	e05b      	b.n	800dfb4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2201      	movs	r2, #1
 800df00:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800df06:	2b01      	cmp	r3, #1
 800df08:	d137      	bne.n	800df7a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	2100      	movs	r1, #0
 800df10:	4618      	mov	r0, r3
 800df12:	f002 fabf 	bl	8010494 <SDMMC_CmdAppCommand>
 800df16:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d02d      	beq.n	800df7a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df1e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800df22:	e047      	b.n	800dfb4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2100      	movs	r1, #0
 800df2a:	4618      	mov	r0, r3
 800df2c:	f002 fab2 	bl	8010494 <SDMMC_CmdAppCommand>
 800df30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d001      	beq.n	800df3c <SD_PowerON+0x98>
    {
      return errorstate;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	e03b      	b.n	800dfb4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	491e      	ldr	r1, [pc, #120]	@ (800dfbc <SD_PowerON+0x118>)
 800df42:	4618      	mov	r0, r3
 800df44:	f002 fac8 	bl	80104d8 <SDMMC_CmdAppOperCommand>
 800df48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d002      	beq.n	800df56 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df50:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800df54:	e02e      	b.n	800dfb4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2100      	movs	r1, #0
 800df5c:	4618      	mov	r0, r3
 800df5e:	f002 f92e 	bl	80101be <SDMMC_GetResponse>
 800df62:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	0fdb      	lsrs	r3, r3, #31
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d101      	bne.n	800df70 <SD_PowerON+0xcc>
 800df6c:	2301      	movs	r3, #1
 800df6e:	e000      	b.n	800df72 <SD_PowerON+0xce>
 800df70:	2300      	movs	r3, #0
 800df72:	613b      	str	r3, [r7, #16]

    count++;
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	3301      	adds	r3, #1
 800df78:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800df80:	4293      	cmp	r3, r2
 800df82:	d802      	bhi.n	800df8a <SD_PowerON+0xe6>
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d0cc      	beq.n	800df24 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800df90:	4293      	cmp	r3, r2
 800df92:	d902      	bls.n	800df9a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800df94:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800df98:	e00c      	b.n	800dfb4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d003      	beq.n	800dfac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	645a      	str	r2, [r3, #68]	@ 0x44
 800dfaa:	e002      	b.n	800dfb2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2200      	movs	r2, #0
 800dfb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dfb2:	2300      	movs	r3, #0
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3718      	adds	r7, #24
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	c1100000 	.word	0xc1100000

0800dfc0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d102      	bne.n	800dfd6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800dfd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800dfd4:	e018      	b.n	800e008 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681a      	ldr	r2, [r3, #0]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dfde:	041b      	lsls	r3, r3, #16
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	4610      	mov	r0, r2
 800dfe4:	f002 fafa 	bl	80105dc <SDMMC_CmdSendStatus>
 800dfe8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d001      	beq.n	800dff4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	e009      	b.n	800e008 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2100      	movs	r1, #0
 800dffa:	4618      	mov	r0, r3
 800dffc:	f002 f8df 	bl	80101be <SDMMC_GetResponse>
 800e000:	4602      	mov	r2, r0
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e006:	2300      	movs	r3, #0
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3710      	adds	r7, #16
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}

0800e010 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b086      	sub	sp, #24
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e01c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e022:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d03f      	beq.n	800e0aa <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e02a:	2300      	movs	r3, #0
 800e02c:	617b      	str	r3, [r7, #20]
 800e02e:	e033      	b.n	800e098 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4618      	mov	r0, r3
 800e036:	f002 f851 	bl	80100dc <SDMMC_ReadFIFO>
 800e03a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	3301      	adds	r3, #1
 800e048:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	3b01      	subs	r3, #1
 800e04e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	0a1b      	lsrs	r3, r3, #8
 800e054:	b2da      	uxtb	r2, r3
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	3301      	adds	r3, #1
 800e05e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	3b01      	subs	r3, #1
 800e064:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e066:	68bb      	ldr	r3, [r7, #8]
 800e068:	0c1b      	lsrs	r3, r3, #16
 800e06a:	b2da      	uxtb	r2, r3
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	3301      	adds	r3, #1
 800e074:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	3b01      	subs	r3, #1
 800e07a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	0e1b      	lsrs	r3, r3, #24
 800e080:	b2da      	uxtb	r2, r3
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	3301      	adds	r3, #1
 800e08a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	3b01      	subs	r3, #1
 800e090:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	3301      	adds	r3, #1
 800e096:	617b      	str	r3, [r7, #20]
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	2b07      	cmp	r3, #7
 800e09c:	d9c8      	bls.n	800e030 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	693a      	ldr	r2, [r7, #16]
 800e0a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800e0aa:	bf00      	nop
 800e0ac:	3718      	adds	r7, #24
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b086      	sub	sp, #24
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a1b      	ldr	r3, [r3, #32]
 800e0be:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e0c4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e0c6:	693b      	ldr	r3, [r7, #16]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d043      	beq.n	800e154 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	617b      	str	r3, [r7, #20]
 800e0d0:	e037      	b.n	800e142 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	3301      	adds	r3, #1
 800e0dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	021a      	lsls	r2, r3, #8
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	3b01      	subs	r3, #1
 800e0fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	781b      	ldrb	r3, [r3, #0]
 800e100:	041a      	lsls	r2, r3, #16
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	4313      	orrs	r3, r2
 800e106:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	3301      	adds	r3, #1
 800e10c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	3b01      	subs	r3, #1
 800e112:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	061a      	lsls	r2, r3, #24
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	4313      	orrs	r3, r2
 800e11e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	3301      	adds	r3, #1
 800e124:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	3b01      	subs	r3, #1
 800e12a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	f107 0208 	add.w	r2, r7, #8
 800e134:	4611      	mov	r1, r2
 800e136:	4618      	mov	r0, r3
 800e138:	f001 ffdd 	bl	80100f6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	3301      	adds	r3, #1
 800e140:	617b      	str	r3, [r7, #20]
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	2b07      	cmp	r3, #7
 800e146:	d9c4      	bls.n	800e0d2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	693a      	ldr	r2, [r7, #16]
 800e152:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800e154:	bf00      	nop
 800e156:	3718      	adds	r7, #24
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}

0800e15c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d101      	bne.n	800e170 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800e16c:	2301      	movs	r3, #1
 800e16e:	e025      	b.n	800e1bc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e176:	b2db      	uxtb	r3, r3
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d106      	bne.n	800e18a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f7f5 f9c7 	bl	8003518 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2202      	movs	r2, #2
 800e18e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681a      	ldr	r2, [r3, #0]
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	3304      	adds	r3, #4
 800e19a:	4619      	mov	r1, r3
 800e19c:	4610      	mov	r0, r2
 800e19e:	f001 fe6f 	bl	800fe80 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6818      	ldr	r0, [r3, #0]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	6839      	ldr	r1, [r7, #0]
 800e1ae:	f001 fec3 	bl	800ff38 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800e1ba:	2300      	movs	r3, #0
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	3708      	adds	r7, #8
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	bd80      	pop	{r7, pc}

0800e1c4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b086      	sub	sp, #24
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	60f8      	str	r0, [r7, #12]
 800e1cc:	60b9      	str	r1, [r7, #8]
 800e1ce:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e1d6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800e1d8:	7dfb      	ldrb	r3, [r7, #23]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d101      	bne.n	800e1e2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800e1de:	2302      	movs	r3, #2
 800e1e0:	e021      	b.n	800e226 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800e1e2:	7dfb      	ldrb	r3, [r7, #23]
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d002      	beq.n	800e1ee <HAL_SDRAM_SendCommand+0x2a>
 800e1e8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ea:	2b05      	cmp	r3, #5
 800e1ec:	d118      	bne.n	800e220 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	2202      	movs	r2, #2
 800e1f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	68b9      	ldr	r1, [r7, #8]
 800e1fe:	4618      	mov	r0, r3
 800e200:	f001 ff04 	bl	801000c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2b02      	cmp	r3, #2
 800e20a:	d104      	bne.n	800e216 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2205      	movs	r2, #5
 800e210:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e214:	e006      	b.n	800e224 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2201      	movs	r2, #1
 800e21a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800e21e:	e001      	b.n	800e224 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	e000      	b.n	800e226 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800e224:	2300      	movs	r3, #0
}
 800e226:	4618      	mov	r0, r3
 800e228:	3718      	adds	r7, #24
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}

0800e22e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800e22e:	b580      	push	{r7, lr}
 800e230:	b082      	sub	sp, #8
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
 800e236:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b02      	cmp	r3, #2
 800e242:	d101      	bne.n	800e248 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800e244:	2302      	movs	r3, #2
 800e246:	e016      	b.n	800e276 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b01      	cmp	r3, #1
 800e252:	d10f      	bne.n	800e274 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2202      	movs	r2, #2
 800e258:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	4618      	mov	r0, r3
 800e264:	f001 fef6 	bl	8010054 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2201      	movs	r2, #1
 800e26c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	e000      	b.n	800e276 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800e274:	2301      	movs	r3, #1
}
 800e276:	4618      	mov	r0, r3
 800e278:	3708      	adds	r7, #8
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bd80      	pop	{r7, pc}

0800e27e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e27e:	b580      	push	{r7, lr}
 800e280:	b082      	sub	sp, #8
 800e282:	af00      	add	r7, sp, #0
 800e284:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d101      	bne.n	800e290 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e28c:	2301      	movs	r3, #1
 800e28e:	e049      	b.n	800e324 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e296:	b2db      	uxtb	r3, r3
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d106      	bne.n	800e2aa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7f7 fb79 	bl	800599c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2202      	movs	r2, #2
 800e2ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	3304      	adds	r3, #4
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	4610      	mov	r0, r2
 800e2be:	f000 fd1f 	bl	800ed00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2201      	movs	r2, #1
 800e306:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2201      	movs	r2, #1
 800e316:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	4618      	mov	r0, r3
 800e326:	3708      	adds	r7, #8
 800e328:	46bd      	mov	sp, r7
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d001      	beq.n	800e344 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e340:	2301      	movs	r3, #1
 800e342:	e04c      	b.n	800e3de <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2202      	movs	r2, #2
 800e348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a26      	ldr	r2, [pc, #152]	@ (800e3ec <HAL_TIM_Base_Start+0xc0>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d022      	beq.n	800e39c <HAL_TIM_Base_Start+0x70>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e35e:	d01d      	beq.n	800e39c <HAL_TIM_Base_Start+0x70>
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	4a22      	ldr	r2, [pc, #136]	@ (800e3f0 <HAL_TIM_Base_Start+0xc4>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d018      	beq.n	800e39c <HAL_TIM_Base_Start+0x70>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	4a21      	ldr	r2, [pc, #132]	@ (800e3f4 <HAL_TIM_Base_Start+0xc8>)
 800e370:	4293      	cmp	r3, r2
 800e372:	d013      	beq.n	800e39c <HAL_TIM_Base_Start+0x70>
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	4a1f      	ldr	r2, [pc, #124]	@ (800e3f8 <HAL_TIM_Base_Start+0xcc>)
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d00e      	beq.n	800e39c <HAL_TIM_Base_Start+0x70>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	4a1e      	ldr	r2, [pc, #120]	@ (800e3fc <HAL_TIM_Base_Start+0xd0>)
 800e384:	4293      	cmp	r3, r2
 800e386:	d009      	beq.n	800e39c <HAL_TIM_Base_Start+0x70>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4a1c      	ldr	r2, [pc, #112]	@ (800e400 <HAL_TIM_Base_Start+0xd4>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d004      	beq.n	800e39c <HAL_TIM_Base_Start+0x70>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4a1b      	ldr	r2, [pc, #108]	@ (800e404 <HAL_TIM_Base_Start+0xd8>)
 800e398:	4293      	cmp	r3, r2
 800e39a:	d115      	bne.n	800e3c8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	689a      	ldr	r2, [r3, #8]
 800e3a2:	4b19      	ldr	r3, [pc, #100]	@ (800e408 <HAL_TIM_Base_Start+0xdc>)
 800e3a4:	4013      	ands	r3, r2
 800e3a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2b06      	cmp	r3, #6
 800e3ac:	d015      	beq.n	800e3da <HAL_TIM_Base_Start+0xae>
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3b4:	d011      	beq.n	800e3da <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f042 0201 	orr.w	r2, r2, #1
 800e3c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3c6:	e008      	b.n	800e3da <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	f042 0201 	orr.w	r2, r2, #1
 800e3d6:	601a      	str	r2, [r3, #0]
 800e3d8:	e000      	b.n	800e3dc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3714      	adds	r7, #20
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr
 800e3ea:	bf00      	nop
 800e3ec:	40010000 	.word	0x40010000
 800e3f0:	40000400 	.word	0x40000400
 800e3f4:	40000800 	.word	0x40000800
 800e3f8:	40000c00 	.word	0x40000c00
 800e3fc:	40010400 	.word	0x40010400
 800e400:	40014000 	.word	0x40014000
 800e404:	40001800 	.word	0x40001800
 800e408:	00010007 	.word	0x00010007

0800e40c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b083      	sub	sp, #12
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	6a1a      	ldr	r2, [r3, #32]
 800e41a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e41e:	4013      	ands	r3, r2
 800e420:	2b00      	cmp	r3, #0
 800e422:	d10f      	bne.n	800e444 <HAL_TIM_Base_Stop+0x38>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	6a1a      	ldr	r2, [r3, #32]
 800e42a:	f240 4344 	movw	r3, #1092	@ 0x444
 800e42e:	4013      	ands	r3, r2
 800e430:	2b00      	cmp	r3, #0
 800e432:	d107      	bne.n	800e444 <HAL_TIM_Base_Stop+0x38>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	f022 0201 	bic.w	r2, r2, #1
 800e442:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2201      	movs	r2, #1
 800e448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800e44c:	2300      	movs	r3, #0
}
 800e44e:	4618      	mov	r0, r3
 800e450:	370c      	adds	r7, #12
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
	...

0800e45c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e45c:	b480      	push	{r7}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d001      	beq.n	800e474 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e470:	2301      	movs	r3, #1
 800e472:	e054      	b.n	800e51e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2202      	movs	r2, #2
 800e478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	68da      	ldr	r2, [r3, #12]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	f042 0201 	orr.w	r2, r2, #1
 800e48a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4a26      	ldr	r2, [pc, #152]	@ (800e52c <HAL_TIM_Base_Start_IT+0xd0>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d022      	beq.n	800e4dc <HAL_TIM_Base_Start_IT+0x80>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e49e:	d01d      	beq.n	800e4dc <HAL_TIM_Base_Start_IT+0x80>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4a22      	ldr	r2, [pc, #136]	@ (800e530 <HAL_TIM_Base_Start_IT+0xd4>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d018      	beq.n	800e4dc <HAL_TIM_Base_Start_IT+0x80>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	4a21      	ldr	r2, [pc, #132]	@ (800e534 <HAL_TIM_Base_Start_IT+0xd8>)
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d013      	beq.n	800e4dc <HAL_TIM_Base_Start_IT+0x80>
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	4a1f      	ldr	r2, [pc, #124]	@ (800e538 <HAL_TIM_Base_Start_IT+0xdc>)
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d00e      	beq.n	800e4dc <HAL_TIM_Base_Start_IT+0x80>
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4a1e      	ldr	r2, [pc, #120]	@ (800e53c <HAL_TIM_Base_Start_IT+0xe0>)
 800e4c4:	4293      	cmp	r3, r2
 800e4c6:	d009      	beq.n	800e4dc <HAL_TIM_Base_Start_IT+0x80>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a1c      	ldr	r2, [pc, #112]	@ (800e540 <HAL_TIM_Base_Start_IT+0xe4>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d004      	beq.n	800e4dc <HAL_TIM_Base_Start_IT+0x80>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	4a1b      	ldr	r2, [pc, #108]	@ (800e544 <HAL_TIM_Base_Start_IT+0xe8>)
 800e4d8:	4293      	cmp	r3, r2
 800e4da:	d115      	bne.n	800e508 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	689a      	ldr	r2, [r3, #8]
 800e4e2:	4b19      	ldr	r3, [pc, #100]	@ (800e548 <HAL_TIM_Base_Start_IT+0xec>)
 800e4e4:	4013      	ands	r3, r2
 800e4e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2b06      	cmp	r3, #6
 800e4ec:	d015      	beq.n	800e51a <HAL_TIM_Base_Start_IT+0xbe>
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e4f4:	d011      	beq.n	800e51a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	681a      	ldr	r2, [r3, #0]
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f042 0201 	orr.w	r2, r2, #1
 800e504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e506:	e008      	b.n	800e51a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	681a      	ldr	r2, [r3, #0]
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f042 0201 	orr.w	r2, r2, #1
 800e516:	601a      	str	r2, [r3, #0]
 800e518:	e000      	b.n	800e51c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e51a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3714      	adds	r7, #20
 800e522:	46bd      	mov	sp, r7
 800e524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	40010000 	.word	0x40010000
 800e530:	40000400 	.word	0x40000400
 800e534:	40000800 	.word	0x40000800
 800e538:	40000c00 	.word	0x40000c00
 800e53c:	40010400 	.word	0x40010400
 800e540:	40014000 	.word	0x40014000
 800e544:	40001800 	.word	0x40001800
 800e548:	00010007 	.word	0x00010007

0800e54c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b083      	sub	sp, #12
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	68da      	ldr	r2, [r3, #12]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f022 0201 	bic.w	r2, r2, #1
 800e562:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6a1a      	ldr	r2, [r3, #32]
 800e56a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e56e:	4013      	ands	r3, r2
 800e570:	2b00      	cmp	r3, #0
 800e572:	d10f      	bne.n	800e594 <HAL_TIM_Base_Stop_IT+0x48>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6a1a      	ldr	r2, [r3, #32]
 800e57a:	f240 4344 	movw	r3, #1092	@ 0x444
 800e57e:	4013      	ands	r3, r2
 800e580:	2b00      	cmp	r3, #0
 800e582:	d107      	bne.n	800e594 <HAL_TIM_Base_Stop_IT+0x48>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f022 0201 	bic.w	r2, r2, #1
 800e592:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2201      	movs	r2, #1
 800e598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800e59c:	2300      	movs	r3, #0
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	370c      	adds	r7, #12
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr

0800e5aa <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b082      	sub	sp, #8
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d101      	bne.n	800e5bc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	e049      	b.n	800e650 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d106      	bne.n	800e5d6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f7f7 f997 	bl	8005904 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2202      	movs	r2, #2
 800e5da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	f000 fb89 	bl	800ed00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2201      	movs	r2, #1
 800e5fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	2201      	movs	r2, #1
 800e602:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	2201      	movs	r2, #1
 800e60a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2201      	movs	r2, #1
 800e612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	2201      	movs	r2, #1
 800e61a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	2201      	movs	r2, #1
 800e622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2201      	movs	r2, #1
 800e62a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2201      	movs	r2, #1
 800e63a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	2201      	movs	r2, #1
 800e642:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e64e:	2300      	movs	r3, #0
}
 800e650:	4618      	mov	r0, r3
 800e652:	3708      	adds	r7, #8
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}

0800e658 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e662:	2300      	movs	r3, #0
 800e664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d104      	bne.n	800e676 <HAL_TIM_IC_Start_IT+0x1e>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e672:	b2db      	uxtb	r3, r3
 800e674:	e023      	b.n	800e6be <HAL_TIM_IC_Start_IT+0x66>
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	2b04      	cmp	r3, #4
 800e67a:	d104      	bne.n	800e686 <HAL_TIM_IC_Start_IT+0x2e>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e682:	b2db      	uxtb	r3, r3
 800e684:	e01b      	b.n	800e6be <HAL_TIM_IC_Start_IT+0x66>
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	2b08      	cmp	r3, #8
 800e68a:	d104      	bne.n	800e696 <HAL_TIM_IC_Start_IT+0x3e>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e692:	b2db      	uxtb	r3, r3
 800e694:	e013      	b.n	800e6be <HAL_TIM_IC_Start_IT+0x66>
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	2b0c      	cmp	r3, #12
 800e69a:	d104      	bne.n	800e6a6 <HAL_TIM_IC_Start_IT+0x4e>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e6a2:	b2db      	uxtb	r3, r3
 800e6a4:	e00b      	b.n	800e6be <HAL_TIM_IC_Start_IT+0x66>
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	2b10      	cmp	r3, #16
 800e6aa:	d104      	bne.n	800e6b6 <HAL_TIM_IC_Start_IT+0x5e>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e6b2:	b2db      	uxtb	r3, r3
 800e6b4:	e003      	b.n	800e6be <HAL_TIM_IC_Start_IT+0x66>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d104      	bne.n	800e6d0 <HAL_TIM_IC_Start_IT+0x78>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	e013      	b.n	800e6f8 <HAL_TIM_IC_Start_IT+0xa0>
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	2b04      	cmp	r3, #4
 800e6d4:	d104      	bne.n	800e6e0 <HAL_TIM_IC_Start_IT+0x88>
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	e00b      	b.n	800e6f8 <HAL_TIM_IC_Start_IT+0xa0>
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	2b08      	cmp	r3, #8
 800e6e4:	d104      	bne.n	800e6f0 <HAL_TIM_IC_Start_IT+0x98>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	e003      	b.n	800e6f8 <HAL_TIM_IC_Start_IT+0xa0>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800e6f6:	b2db      	uxtb	r3, r3
 800e6f8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800e6fa:	7bbb      	ldrb	r3, [r7, #14]
 800e6fc:	2b01      	cmp	r3, #1
 800e6fe:	d102      	bne.n	800e706 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800e700:	7b7b      	ldrb	r3, [r7, #13]
 800e702:	2b01      	cmp	r3, #1
 800e704:	d001      	beq.n	800e70a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800e706:	2301      	movs	r3, #1
 800e708:	e0e2      	b.n	800e8d0 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d104      	bne.n	800e71a <HAL_TIM_IC_Start_IT+0xc2>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2202      	movs	r2, #2
 800e714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e718:	e023      	b.n	800e762 <HAL_TIM_IC_Start_IT+0x10a>
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	2b04      	cmp	r3, #4
 800e71e:	d104      	bne.n	800e72a <HAL_TIM_IC_Start_IT+0xd2>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2202      	movs	r2, #2
 800e724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e728:	e01b      	b.n	800e762 <HAL_TIM_IC_Start_IT+0x10a>
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	2b08      	cmp	r3, #8
 800e72e:	d104      	bne.n	800e73a <HAL_TIM_IC_Start_IT+0xe2>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2202      	movs	r2, #2
 800e734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e738:	e013      	b.n	800e762 <HAL_TIM_IC_Start_IT+0x10a>
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	2b0c      	cmp	r3, #12
 800e73e:	d104      	bne.n	800e74a <HAL_TIM_IC_Start_IT+0xf2>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2202      	movs	r2, #2
 800e744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e748:	e00b      	b.n	800e762 <HAL_TIM_IC_Start_IT+0x10a>
 800e74a:	683b      	ldr	r3, [r7, #0]
 800e74c:	2b10      	cmp	r3, #16
 800e74e:	d104      	bne.n	800e75a <HAL_TIM_IC_Start_IT+0x102>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2202      	movs	r2, #2
 800e754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e758:	e003      	b.n	800e762 <HAL_TIM_IC_Start_IT+0x10a>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2202      	movs	r2, #2
 800e75e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d104      	bne.n	800e772 <HAL_TIM_IC_Start_IT+0x11a>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2202      	movs	r2, #2
 800e76c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e770:	e013      	b.n	800e79a <HAL_TIM_IC_Start_IT+0x142>
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	2b04      	cmp	r3, #4
 800e776:	d104      	bne.n	800e782 <HAL_TIM_IC_Start_IT+0x12a>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2202      	movs	r2, #2
 800e77c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e780:	e00b      	b.n	800e79a <HAL_TIM_IC_Start_IT+0x142>
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	2b08      	cmp	r3, #8
 800e786:	d104      	bne.n	800e792 <HAL_TIM_IC_Start_IT+0x13a>
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2202      	movs	r2, #2
 800e78c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e790:	e003      	b.n	800e79a <HAL_TIM_IC_Start_IT+0x142>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2202      	movs	r2, #2
 800e796:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2b0c      	cmp	r3, #12
 800e79e:	d841      	bhi.n	800e824 <HAL_TIM_IC_Start_IT+0x1cc>
 800e7a0:	a201      	add	r2, pc, #4	@ (adr r2, 800e7a8 <HAL_TIM_IC_Start_IT+0x150>)
 800e7a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a6:	bf00      	nop
 800e7a8:	0800e7dd 	.word	0x0800e7dd
 800e7ac:	0800e825 	.word	0x0800e825
 800e7b0:	0800e825 	.word	0x0800e825
 800e7b4:	0800e825 	.word	0x0800e825
 800e7b8:	0800e7ef 	.word	0x0800e7ef
 800e7bc:	0800e825 	.word	0x0800e825
 800e7c0:	0800e825 	.word	0x0800e825
 800e7c4:	0800e825 	.word	0x0800e825
 800e7c8:	0800e801 	.word	0x0800e801
 800e7cc:	0800e825 	.word	0x0800e825
 800e7d0:	0800e825 	.word	0x0800e825
 800e7d4:	0800e825 	.word	0x0800e825
 800e7d8:	0800e813 	.word	0x0800e813
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	68da      	ldr	r2, [r3, #12]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	f042 0202 	orr.w	r2, r2, #2
 800e7ea:	60da      	str	r2, [r3, #12]
      break;
 800e7ec:	e01d      	b.n	800e82a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	68da      	ldr	r2, [r3, #12]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f042 0204 	orr.w	r2, r2, #4
 800e7fc:	60da      	str	r2, [r3, #12]
      break;
 800e7fe:	e014      	b.n	800e82a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	68da      	ldr	r2, [r3, #12]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	f042 0208 	orr.w	r2, r2, #8
 800e80e:	60da      	str	r2, [r3, #12]
      break;
 800e810:	e00b      	b.n	800e82a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	68da      	ldr	r2, [r3, #12]
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f042 0210 	orr.w	r2, r2, #16
 800e820:	60da      	str	r2, [r3, #12]
      break;
 800e822:	e002      	b.n	800e82a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800e824:	2301      	movs	r3, #1
 800e826:	73fb      	strb	r3, [r7, #15]
      break;
 800e828:	bf00      	nop
  }

  if (status == HAL_OK)
 800e82a:	7bfb      	ldrb	r3, [r7, #15]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d14e      	bne.n	800e8ce <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	2201      	movs	r2, #1
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	4618      	mov	r0, r3
 800e83a:	f000 fd4a 	bl	800f2d2 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4a25      	ldr	r2, [pc, #148]	@ (800e8d8 <HAL_TIM_IC_Start_IT+0x280>)
 800e844:	4293      	cmp	r3, r2
 800e846:	d022      	beq.n	800e88e <HAL_TIM_IC_Start_IT+0x236>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e850:	d01d      	beq.n	800e88e <HAL_TIM_IC_Start_IT+0x236>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a21      	ldr	r2, [pc, #132]	@ (800e8dc <HAL_TIM_IC_Start_IT+0x284>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d018      	beq.n	800e88e <HAL_TIM_IC_Start_IT+0x236>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a1f      	ldr	r2, [pc, #124]	@ (800e8e0 <HAL_TIM_IC_Start_IT+0x288>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d013      	beq.n	800e88e <HAL_TIM_IC_Start_IT+0x236>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4a1e      	ldr	r2, [pc, #120]	@ (800e8e4 <HAL_TIM_IC_Start_IT+0x28c>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d00e      	beq.n	800e88e <HAL_TIM_IC_Start_IT+0x236>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4a1c      	ldr	r2, [pc, #112]	@ (800e8e8 <HAL_TIM_IC_Start_IT+0x290>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d009      	beq.n	800e88e <HAL_TIM_IC_Start_IT+0x236>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4a1b      	ldr	r2, [pc, #108]	@ (800e8ec <HAL_TIM_IC_Start_IT+0x294>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d004      	beq.n	800e88e <HAL_TIM_IC_Start_IT+0x236>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a19      	ldr	r2, [pc, #100]	@ (800e8f0 <HAL_TIM_IC_Start_IT+0x298>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d115      	bne.n	800e8ba <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	689a      	ldr	r2, [r3, #8]
 800e894:	4b17      	ldr	r3, [pc, #92]	@ (800e8f4 <HAL_TIM_IC_Start_IT+0x29c>)
 800e896:	4013      	ands	r3, r2
 800e898:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	2b06      	cmp	r3, #6
 800e89e:	d015      	beq.n	800e8cc <HAL_TIM_IC_Start_IT+0x274>
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e8a6:	d011      	beq.n	800e8cc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f042 0201 	orr.w	r2, r2, #1
 800e8b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8b8:	e008      	b.n	800e8cc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	f042 0201 	orr.w	r2, r2, #1
 800e8c8:	601a      	str	r2, [r3, #0]
 800e8ca:	e000      	b.n	800e8ce <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8cc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3710      	adds	r7, #16
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	40010000 	.word	0x40010000
 800e8dc:	40000400 	.word	0x40000400
 800e8e0:	40000800 	.word	0x40000800
 800e8e4:	40000c00 	.word	0x40000c00
 800e8e8:	40010400 	.word	0x40010400
 800e8ec:	40014000 	.word	0x40014000
 800e8f0:	40001800 	.word	0x40001800
 800e8f4:	00010007 	.word	0x00010007

0800e8f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	68db      	ldr	r3, [r3, #12]
 800e906:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	691b      	ldr	r3, [r3, #16]
 800e90e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	f003 0302 	and.w	r3, r3, #2
 800e916:	2b00      	cmp	r3, #0
 800e918:	d020      	beq.n	800e95c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	f003 0302 	and.w	r3, r3, #2
 800e920:	2b00      	cmp	r3, #0
 800e922:	d01b      	beq.n	800e95c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	f06f 0202 	mvn.w	r2, #2
 800e92c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2201      	movs	r2, #1
 800e932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	f003 0303 	and.w	r3, r3, #3
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d003      	beq.n	800e94a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7f4 fbf4 	bl	8003130 <HAL_TIM_IC_CaptureCallback>
 800e948:	e005      	b.n	800e956 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f000 f9b9 	bl	800ecc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e950:	6878      	ldr	r0, [r7, #4]
 800e952:	f000 f9c0 	bl	800ecd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	2200      	movs	r2, #0
 800e95a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	f003 0304 	and.w	r3, r3, #4
 800e962:	2b00      	cmp	r3, #0
 800e964:	d020      	beq.n	800e9a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f003 0304 	and.w	r3, r3, #4
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d01b      	beq.n	800e9a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	f06f 0204 	mvn.w	r2, #4
 800e978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2202      	movs	r2, #2
 800e97e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	699b      	ldr	r3, [r3, #24]
 800e986:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d003      	beq.n	800e996 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7f4 fbce 	bl	8003130 <HAL_TIM_IC_CaptureCallback>
 800e994:	e005      	b.n	800e9a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e996:	6878      	ldr	r0, [r7, #4]
 800e998:	f000 f993 	bl	800ecc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 f99a 	bl	800ecd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	f003 0308 	and.w	r3, r3, #8
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d020      	beq.n	800e9f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f003 0308 	and.w	r3, r3, #8
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d01b      	beq.n	800e9f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	f06f 0208 	mvn.w	r2, #8
 800e9c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2204      	movs	r2, #4
 800e9ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	69db      	ldr	r3, [r3, #28]
 800e9d2:	f003 0303 	and.w	r3, r3, #3
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d003      	beq.n	800e9e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f7f4 fba8 	bl	8003130 <HAL_TIM_IC_CaptureCallback>
 800e9e0:	e005      	b.n	800e9ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f000 f96d 	bl	800ecc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 f974 	bl	800ecd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	f003 0310 	and.w	r3, r3, #16
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d020      	beq.n	800ea40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f003 0310 	and.w	r3, r3, #16
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d01b      	beq.n	800ea40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f06f 0210 	mvn.w	r2, #16
 800ea10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2208      	movs	r2, #8
 800ea16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	69db      	ldr	r3, [r3, #28]
 800ea1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d003      	beq.n	800ea2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7f4 fb82 	bl	8003130 <HAL_TIM_IC_CaptureCallback>
 800ea2c:	e005      	b.n	800ea3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 f947 	bl	800ecc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 f94e 	bl	800ecd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	f003 0301 	and.w	r3, r3, #1
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00c      	beq.n	800ea64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f003 0301 	and.w	r3, r3, #1
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d007      	beq.n	800ea64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f06f 0201 	mvn.w	r2, #1
 800ea5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f7f6 f8ee 	bl	8004c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d104      	bne.n	800ea78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d00c      	beq.n	800ea92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d007      	beq.n	800ea92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ea8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 fcdd 	bl	800f44c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00c      	beq.n	800eab6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d007      	beq.n	800eab6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800eaae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 fcd5 	bl	800f460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00c      	beq.n	800eada <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d007      	beq.n	800eada <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ead2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 f908 	bl	800ecea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	f003 0320 	and.w	r3, r3, #32
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d00c      	beq.n	800eafe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	f003 0320 	and.w	r3, r3, #32
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d007      	beq.n	800eafe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f06f 0220 	mvn.w	r2, #32
 800eaf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 fc9d 	bl	800f438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eafe:	bf00      	nop
 800eb00:	3710      	adds	r7, #16
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b086      	sub	sp, #24
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	60f8      	str	r0, [r7, #12]
 800eb0e:	60b9      	str	r1, [r7, #8]
 800eb10:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb12:	2300      	movs	r3, #0
 800eb14:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d101      	bne.n	800eb24 <HAL_TIM_IC_ConfigChannel+0x1e>
 800eb20:	2302      	movs	r3, #2
 800eb22:	e088      	b.n	800ec36 <HAL_TIM_IC_ConfigChannel+0x130>
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2201      	movs	r2, #1
 800eb28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d11b      	bne.n	800eb6a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800eb42:	f000 fa1d 	bl	800ef80 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	699a      	ldr	r2, [r3, #24]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f022 020c 	bic.w	r2, r2, #12
 800eb54:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	6999      	ldr	r1, [r3, #24]
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	689a      	ldr	r2, [r3, #8]
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	430a      	orrs	r2, r1
 800eb66:	619a      	str	r2, [r3, #24]
 800eb68:	e060      	b.n	800ec2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2b04      	cmp	r3, #4
 800eb6e:	d11c      	bne.n	800ebaa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800eb80:	f000 faa1 	bl	800f0c6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	699a      	ldr	r2, [r3, #24]
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800eb92:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6999      	ldr	r1, [r3, #24]
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	689b      	ldr	r3, [r3, #8]
 800eb9e:	021a      	lsls	r2, r3, #8
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	430a      	orrs	r2, r1
 800eba6:	619a      	str	r2, [r3, #24]
 800eba8:	e040      	b.n	800ec2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2b08      	cmp	r3, #8
 800ebae:	d11b      	bne.n	800ebe8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800ebc0:	f000 faee 	bl	800f1a0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	69da      	ldr	r2, [r3, #28]
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	f022 020c 	bic.w	r2, r2, #12
 800ebd2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	69d9      	ldr	r1, [r3, #28]
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	689a      	ldr	r2, [r3, #8]
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	430a      	orrs	r2, r1
 800ebe4:	61da      	str	r2, [r3, #28]
 800ebe6:	e021      	b.n	800ec2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2b0c      	cmp	r3, #12
 800ebec:	d11c      	bne.n	800ec28 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800ebfa:	68bb      	ldr	r3, [r7, #8]
 800ebfc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800ebfe:	f000 fb0b 	bl	800f218 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	69da      	ldr	r2, [r3, #28]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800ec10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	69d9      	ldr	r1, [r3, #28]
 800ec18:	68bb      	ldr	r3, [r7, #8]
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	021a      	lsls	r2, r3, #8
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	430a      	orrs	r2, r1
 800ec24:	61da      	str	r2, [r3, #28]
 800ec26:	e001      	b.n	800ec2c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ec34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3718      	adds	r7, #24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ec3e:	b580      	push	{r7, lr}
 800ec40:	b082      	sub	sp, #8
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d101      	bne.n	800ec56 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ec52:	2302      	movs	r3, #2
 800ec54:	e031      	b.n	800ecba <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2201      	movs	r2, #1
 800ec5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2202      	movs	r2, #2
 800ec62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ec66:	6839      	ldr	r1, [r7, #0]
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 f8f5 	bl	800ee58 <TIM_SlaveTimer_SetConfig>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d009      	beq.n	800ec88 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2201      	movs	r2, #1
 800ec78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	e018      	b.n	800ecba <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	68da      	ldr	r2, [r3, #12]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ec96:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	68da      	ldr	r2, [r3, #12]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800eca6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3708      	adds	r7, #8
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ecc2:	b480      	push	{r7}
 800ecc4:	b083      	sub	sp, #12
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ecca:	bf00      	nop
 800eccc:	370c      	adds	r7, #12
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd4:	4770      	bx	lr

0800ecd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ecd6:	b480      	push	{r7}
 800ecd8:	b083      	sub	sp, #12
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ecde:	bf00      	nop
 800ece0:	370c      	adds	r7, #12
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr

0800ecea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ecea:	b480      	push	{r7}
 800ecec:	b083      	sub	sp, #12
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ecf2:	bf00      	nop
 800ecf4:	370c      	adds	r7, #12
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr
	...

0800ed00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ed00:	b480      	push	{r7}
 800ed02:	b085      	sub	sp, #20
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	4a46      	ldr	r2, [pc, #280]	@ (800ee2c <TIM_Base_SetConfig+0x12c>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d013      	beq.n	800ed40 <TIM_Base_SetConfig+0x40>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed1e:	d00f      	beq.n	800ed40 <TIM_Base_SetConfig+0x40>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4a43      	ldr	r2, [pc, #268]	@ (800ee30 <TIM_Base_SetConfig+0x130>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d00b      	beq.n	800ed40 <TIM_Base_SetConfig+0x40>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	4a42      	ldr	r2, [pc, #264]	@ (800ee34 <TIM_Base_SetConfig+0x134>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d007      	beq.n	800ed40 <TIM_Base_SetConfig+0x40>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4a41      	ldr	r2, [pc, #260]	@ (800ee38 <TIM_Base_SetConfig+0x138>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d003      	beq.n	800ed40 <TIM_Base_SetConfig+0x40>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	4a40      	ldr	r2, [pc, #256]	@ (800ee3c <TIM_Base_SetConfig+0x13c>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d108      	bne.n	800ed52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	68fa      	ldr	r2, [r7, #12]
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4a35      	ldr	r2, [pc, #212]	@ (800ee2c <TIM_Base_SetConfig+0x12c>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d02b      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed60:	d027      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4a32      	ldr	r2, [pc, #200]	@ (800ee30 <TIM_Base_SetConfig+0x130>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d023      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4a31      	ldr	r2, [pc, #196]	@ (800ee34 <TIM_Base_SetConfig+0x134>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d01f      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	4a30      	ldr	r2, [pc, #192]	@ (800ee38 <TIM_Base_SetConfig+0x138>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d01b      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4a2f      	ldr	r2, [pc, #188]	@ (800ee3c <TIM_Base_SetConfig+0x13c>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d017      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4a2e      	ldr	r2, [pc, #184]	@ (800ee40 <TIM_Base_SetConfig+0x140>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d013      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	4a2d      	ldr	r2, [pc, #180]	@ (800ee44 <TIM_Base_SetConfig+0x144>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d00f      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4a2c      	ldr	r2, [pc, #176]	@ (800ee48 <TIM_Base_SetConfig+0x148>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d00b      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4a2b      	ldr	r2, [pc, #172]	@ (800ee4c <TIM_Base_SetConfig+0x14c>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d007      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4a2a      	ldr	r2, [pc, #168]	@ (800ee50 <TIM_Base_SetConfig+0x150>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d003      	beq.n	800edb2 <TIM_Base_SetConfig+0xb2>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4a29      	ldr	r2, [pc, #164]	@ (800ee54 <TIM_Base_SetConfig+0x154>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d108      	bne.n	800edc4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800edb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	68fa      	ldr	r2, [r7, #12]
 800edc0:	4313      	orrs	r3, r2
 800edc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	695b      	ldr	r3, [r3, #20]
 800edce:	4313      	orrs	r3, r2
 800edd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	689a      	ldr	r2, [r3, #8]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4a10      	ldr	r2, [pc, #64]	@ (800ee2c <TIM_Base_SetConfig+0x12c>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d003      	beq.n	800edf8 <TIM_Base_SetConfig+0xf8>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4a12      	ldr	r2, [pc, #72]	@ (800ee3c <TIM_Base_SetConfig+0x13c>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d103      	bne.n	800ee00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	691a      	ldr	r2, [r3, #16]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2201      	movs	r2, #1
 800ee04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	691b      	ldr	r3, [r3, #16]
 800ee0a:	f003 0301 	and.w	r3, r3, #1
 800ee0e:	2b01      	cmp	r3, #1
 800ee10:	d105      	bne.n	800ee1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	691b      	ldr	r3, [r3, #16]
 800ee16:	f023 0201 	bic.w	r2, r3, #1
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	611a      	str	r2, [r3, #16]
  }
}
 800ee1e:	bf00      	nop
 800ee20:	3714      	adds	r7, #20
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	40010000 	.word	0x40010000
 800ee30:	40000400 	.word	0x40000400
 800ee34:	40000800 	.word	0x40000800
 800ee38:	40000c00 	.word	0x40000c00
 800ee3c:	40010400 	.word	0x40010400
 800ee40:	40014000 	.word	0x40014000
 800ee44:	40014400 	.word	0x40014400
 800ee48:	40014800 	.word	0x40014800
 800ee4c:	40001800 	.word	0x40001800
 800ee50:	40001c00 	.word	0x40001c00
 800ee54:	40002000 	.word	0x40002000

0800ee58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ee62:	2300      	movs	r3, #0
 800ee64:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	689b      	ldr	r3, [r3, #8]
 800ee6c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee6e:	693b      	ldr	r3, [r7, #16]
 800ee70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee74:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	693a      	ldr	r2, [r7, #16]
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ee80:	693a      	ldr	r2, [r7, #16]
 800ee82:	4b3e      	ldr	r3, [pc, #248]	@ (800ef7c <TIM_SlaveTimer_SetConfig+0x124>)
 800ee84:	4013      	ands	r3, r2
 800ee86:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	693a      	ldr	r2, [r7, #16]
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	693a      	ldr	r2, [r7, #16]
 800ee98:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	685b      	ldr	r3, [r3, #4]
 800ee9e:	2b70      	cmp	r3, #112	@ 0x70
 800eea0:	d01a      	beq.n	800eed8 <TIM_SlaveTimer_SetConfig+0x80>
 800eea2:	2b70      	cmp	r3, #112	@ 0x70
 800eea4:	d860      	bhi.n	800ef68 <TIM_SlaveTimer_SetConfig+0x110>
 800eea6:	2b60      	cmp	r3, #96	@ 0x60
 800eea8:	d054      	beq.n	800ef54 <TIM_SlaveTimer_SetConfig+0xfc>
 800eeaa:	2b60      	cmp	r3, #96	@ 0x60
 800eeac:	d85c      	bhi.n	800ef68 <TIM_SlaveTimer_SetConfig+0x110>
 800eeae:	2b50      	cmp	r3, #80	@ 0x50
 800eeb0:	d046      	beq.n	800ef40 <TIM_SlaveTimer_SetConfig+0xe8>
 800eeb2:	2b50      	cmp	r3, #80	@ 0x50
 800eeb4:	d858      	bhi.n	800ef68 <TIM_SlaveTimer_SetConfig+0x110>
 800eeb6:	2b40      	cmp	r3, #64	@ 0x40
 800eeb8:	d019      	beq.n	800eeee <TIM_SlaveTimer_SetConfig+0x96>
 800eeba:	2b40      	cmp	r3, #64	@ 0x40
 800eebc:	d854      	bhi.n	800ef68 <TIM_SlaveTimer_SetConfig+0x110>
 800eebe:	2b30      	cmp	r3, #48	@ 0x30
 800eec0:	d055      	beq.n	800ef6e <TIM_SlaveTimer_SetConfig+0x116>
 800eec2:	2b30      	cmp	r3, #48	@ 0x30
 800eec4:	d850      	bhi.n	800ef68 <TIM_SlaveTimer_SetConfig+0x110>
 800eec6:	2b20      	cmp	r3, #32
 800eec8:	d051      	beq.n	800ef6e <TIM_SlaveTimer_SetConfig+0x116>
 800eeca:	2b20      	cmp	r3, #32
 800eecc:	d84c      	bhi.n	800ef68 <TIM_SlaveTimer_SetConfig+0x110>
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d04d      	beq.n	800ef6e <TIM_SlaveTimer_SetConfig+0x116>
 800eed2:	2b10      	cmp	r3, #16
 800eed4:	d04b      	beq.n	800ef6e <TIM_SlaveTimer_SetConfig+0x116>
 800eed6:	e047      	b.n	800ef68 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800eee8:	f000 f9d3 	bl	800f292 <TIM_ETR_SetConfig>
      break;
 800eeec:	e040      	b.n	800ef70 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	2b05      	cmp	r3, #5
 800eef4:	d101      	bne.n	800eefa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800eef6:	2301      	movs	r3, #1
 800eef8:	e03b      	b.n	800ef72 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	6a1b      	ldr	r3, [r3, #32]
 800ef00:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	6a1a      	ldr	r2, [r3, #32]
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	f022 0201 	bic.w	r2, r2, #1
 800ef10:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	699b      	ldr	r3, [r3, #24]
 800ef18:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ef20:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	691b      	ldr	r3, [r3, #16]
 800ef26:	011b      	lsls	r3, r3, #4
 800ef28:	68ba      	ldr	r2, [r7, #8]
 800ef2a:	4313      	orrs	r3, r2
 800ef2c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	68ba      	ldr	r2, [r7, #8]
 800ef34:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	68fa      	ldr	r2, [r7, #12]
 800ef3c:	621a      	str	r2, [r3, #32]
      break;
 800ef3e:	e017      	b.n	800ef70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef4c:	461a      	mov	r2, r3
 800ef4e:	f000 f88b 	bl	800f068 <TIM_TI1_ConfigInputStage>
      break;
 800ef52:	e00d      	b.n	800ef70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ef60:	461a      	mov	r2, r3
 800ef62:	f000 f8ed 	bl	800f140 <TIM_TI2_ConfigInputStage>
      break;
 800ef66:	e003      	b.n	800ef70 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800ef68:	2301      	movs	r3, #1
 800ef6a:	75fb      	strb	r3, [r7, #23]
      break;
 800ef6c:	e000      	b.n	800ef70 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800ef6e:	bf00      	nop
  }

  return status;
 800ef70:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3718      	adds	r7, #24
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	fffefff8 	.word	0xfffefff8

0800ef80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b087      	sub	sp, #28
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60f8      	str	r0, [r7, #12]
 800ef88:	60b9      	str	r1, [r7, #8]
 800ef8a:	607a      	str	r2, [r7, #4]
 800ef8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	6a1b      	ldr	r3, [r3, #32]
 800ef92:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	6a1b      	ldr	r3, [r3, #32]
 800ef98:	f023 0201 	bic.w	r2, r3, #1
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	699b      	ldr	r3, [r3, #24]
 800efa4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	4a28      	ldr	r2, [pc, #160]	@ (800f04c <TIM_TI1_SetConfig+0xcc>)
 800efaa:	4293      	cmp	r3, r2
 800efac:	d01b      	beq.n	800efe6 <TIM_TI1_SetConfig+0x66>
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efb4:	d017      	beq.n	800efe6 <TIM_TI1_SetConfig+0x66>
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	4a25      	ldr	r2, [pc, #148]	@ (800f050 <TIM_TI1_SetConfig+0xd0>)
 800efba:	4293      	cmp	r3, r2
 800efbc:	d013      	beq.n	800efe6 <TIM_TI1_SetConfig+0x66>
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	4a24      	ldr	r2, [pc, #144]	@ (800f054 <TIM_TI1_SetConfig+0xd4>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d00f      	beq.n	800efe6 <TIM_TI1_SetConfig+0x66>
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	4a23      	ldr	r2, [pc, #140]	@ (800f058 <TIM_TI1_SetConfig+0xd8>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d00b      	beq.n	800efe6 <TIM_TI1_SetConfig+0x66>
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	4a22      	ldr	r2, [pc, #136]	@ (800f05c <TIM_TI1_SetConfig+0xdc>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d007      	beq.n	800efe6 <TIM_TI1_SetConfig+0x66>
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	4a21      	ldr	r2, [pc, #132]	@ (800f060 <TIM_TI1_SetConfig+0xe0>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d003      	beq.n	800efe6 <TIM_TI1_SetConfig+0x66>
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	4a20      	ldr	r2, [pc, #128]	@ (800f064 <TIM_TI1_SetConfig+0xe4>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d101      	bne.n	800efea <TIM_TI1_SetConfig+0x6a>
 800efe6:	2301      	movs	r3, #1
 800efe8:	e000      	b.n	800efec <TIM_TI1_SetConfig+0x6c>
 800efea:	2300      	movs	r3, #0
 800efec:	2b00      	cmp	r3, #0
 800efee:	d008      	beq.n	800f002 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	f023 0303 	bic.w	r3, r3, #3
 800eff6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800eff8:	697a      	ldr	r2, [r7, #20]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	4313      	orrs	r3, r2
 800effe:	617b      	str	r3, [r7, #20]
 800f000:	e003      	b.n	800f00a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	f043 0301 	orr.w	r3, r3, #1
 800f008:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	011b      	lsls	r3, r3, #4
 800f016:	b2db      	uxtb	r3, r3
 800f018:	697a      	ldr	r2, [r7, #20]
 800f01a:	4313      	orrs	r3, r2
 800f01c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f01e:	693b      	ldr	r3, [r7, #16]
 800f020:	f023 030a 	bic.w	r3, r3, #10
 800f024:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	f003 030a 	and.w	r3, r3, #10
 800f02c:	693a      	ldr	r2, [r7, #16]
 800f02e:	4313      	orrs	r3, r2
 800f030:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	697a      	ldr	r2, [r7, #20]
 800f036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	693a      	ldr	r2, [r7, #16]
 800f03c:	621a      	str	r2, [r3, #32]
}
 800f03e:	bf00      	nop
 800f040:	371c      	adds	r7, #28
 800f042:	46bd      	mov	sp, r7
 800f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop
 800f04c:	40010000 	.word	0x40010000
 800f050:	40000400 	.word	0x40000400
 800f054:	40000800 	.word	0x40000800
 800f058:	40000c00 	.word	0x40000c00
 800f05c:	40010400 	.word	0x40010400
 800f060:	40014000 	.word	0x40014000
 800f064:	40001800 	.word	0x40001800

0800f068 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f068:	b480      	push	{r7}
 800f06a:	b087      	sub	sp, #28
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	6a1b      	ldr	r3, [r3, #32]
 800f078:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	6a1b      	ldr	r3, [r3, #32]
 800f07e:	f023 0201 	bic.w	r2, r3, #1
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	699b      	ldr	r3, [r3, #24]
 800f08a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f092:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	011b      	lsls	r3, r3, #4
 800f098:	693a      	ldr	r2, [r7, #16]
 800f09a:	4313      	orrs	r3, r2
 800f09c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f023 030a 	bic.w	r3, r3, #10
 800f0a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	4313      	orrs	r3, r2
 800f0ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	693a      	ldr	r2, [r7, #16]
 800f0b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	697a      	ldr	r2, [r7, #20]
 800f0b8:	621a      	str	r2, [r3, #32]
}
 800f0ba:	bf00      	nop
 800f0bc:	371c      	adds	r7, #28
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr

0800f0c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f0c6:	b480      	push	{r7}
 800f0c8:	b087      	sub	sp, #28
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	60f8      	str	r0, [r7, #12]
 800f0ce:	60b9      	str	r1, [r7, #8]
 800f0d0:	607a      	str	r2, [r7, #4]
 800f0d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6a1b      	ldr	r3, [r3, #32]
 800f0d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	6a1b      	ldr	r3, [r3, #32]
 800f0de:	f023 0210 	bic.w	r2, r3, #16
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	699b      	ldr	r3, [r3, #24]
 800f0ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f0f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	021b      	lsls	r3, r3, #8
 800f0f8:	693a      	ldr	r2, [r7, #16]
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	031b      	lsls	r3, r3, #12
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	693a      	ldr	r2, [r7, #16]
 800f10e:	4313      	orrs	r3, r2
 800f110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f118:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	011b      	lsls	r3, r3, #4
 800f11e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800f122:	697a      	ldr	r2, [r7, #20]
 800f124:	4313      	orrs	r3, r2
 800f126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	693a      	ldr	r2, [r7, #16]
 800f12c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	697a      	ldr	r2, [r7, #20]
 800f132:	621a      	str	r2, [r3, #32]
}
 800f134:	bf00      	nop
 800f136:	371c      	adds	r7, #28
 800f138:	46bd      	mov	sp, r7
 800f13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13e:	4770      	bx	lr

0800f140 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f140:	b480      	push	{r7}
 800f142:	b087      	sub	sp, #28
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	6a1b      	ldr	r3, [r3, #32]
 800f150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	6a1b      	ldr	r3, [r3, #32]
 800f156:	f023 0210 	bic.w	r2, r3, #16
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	699b      	ldr	r3, [r3, #24]
 800f162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f16a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	031b      	lsls	r3, r3, #12
 800f170:	693a      	ldr	r2, [r7, #16]
 800f172:	4313      	orrs	r3, r2
 800f174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f17c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	011b      	lsls	r3, r3, #4
 800f182:	697a      	ldr	r2, [r7, #20]
 800f184:	4313      	orrs	r3, r2
 800f186:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	693a      	ldr	r2, [r7, #16]
 800f18c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	697a      	ldr	r2, [r7, #20]
 800f192:	621a      	str	r2, [r3, #32]
}
 800f194:	bf00      	nop
 800f196:	371c      	adds	r7, #28
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr

0800f1a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b087      	sub	sp, #28
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
 800f1ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6a1b      	ldr	r3, [r3, #32]
 800f1b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	6a1b      	ldr	r3, [r3, #32]
 800f1b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	69db      	ldr	r3, [r3, #28]
 800f1c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f023 0303 	bic.w	r3, r3, #3
 800f1cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800f1ce:	693a      	ldr	r2, [r7, #16]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4313      	orrs	r3, r2
 800f1d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f1d6:	693b      	ldr	r3, [r7, #16]
 800f1d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f1dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	011b      	lsls	r3, r3, #4
 800f1e2:	b2db      	uxtb	r3, r3
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	4313      	orrs	r3, r2
 800f1e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800f1f0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f1f2:	68bb      	ldr	r3, [r7, #8]
 800f1f4:	021b      	lsls	r3, r3, #8
 800f1f6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800f1fa:	697a      	ldr	r2, [r7, #20]
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	693a      	ldr	r2, [r7, #16]
 800f204:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	697a      	ldr	r2, [r7, #20]
 800f20a:	621a      	str	r2, [r3, #32]
}
 800f20c:	bf00      	nop
 800f20e:	371c      	adds	r7, #28
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f218:	b480      	push	{r7}
 800f21a:	b087      	sub	sp, #28
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
 800f224:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	6a1b      	ldr	r3, [r3, #32]
 800f230:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	69db      	ldr	r3, [r3, #28]
 800f23c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f244:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	021b      	lsls	r3, r3, #8
 800f24a:	693a      	ldr	r2, [r7, #16]
 800f24c:	4313      	orrs	r3, r2
 800f24e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f250:	693b      	ldr	r3, [r7, #16]
 800f252:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f256:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	031b      	lsls	r3, r3, #12
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	693a      	ldr	r2, [r7, #16]
 800f260:	4313      	orrs	r3, r2
 800f262:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800f26a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	031b      	lsls	r3, r3, #12
 800f270:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800f274:	697a      	ldr	r2, [r7, #20]
 800f276:	4313      	orrs	r3, r2
 800f278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	693a      	ldr	r2, [r7, #16]
 800f27e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	697a      	ldr	r2, [r7, #20]
 800f284:	621a      	str	r2, [r3, #32]
}
 800f286:	bf00      	nop
 800f288:	371c      	adds	r7, #28
 800f28a:	46bd      	mov	sp, r7
 800f28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f290:	4770      	bx	lr

0800f292 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f292:	b480      	push	{r7}
 800f294:	b087      	sub	sp, #28
 800f296:	af00      	add	r7, sp, #0
 800f298:	60f8      	str	r0, [r7, #12]
 800f29a:	60b9      	str	r1, [r7, #8]
 800f29c:	607a      	str	r2, [r7, #4]
 800f29e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f2ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	021a      	lsls	r2, r3, #8
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	431a      	orrs	r2, r3
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	697a      	ldr	r2, [r7, #20]
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	697a      	ldr	r2, [r7, #20]
 800f2c4:	609a      	str	r2, [r3, #8]
}
 800f2c6:	bf00      	nop
 800f2c8:	371c      	adds	r7, #28
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr

0800f2d2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f2d2:	b480      	push	{r7}
 800f2d4:	b087      	sub	sp, #28
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	60f8      	str	r0, [r7, #12]
 800f2da:	60b9      	str	r1, [r7, #8]
 800f2dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	f003 031f 	and.w	r3, r3, #31
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	fa02 f303 	lsl.w	r3, r2, r3
 800f2ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6a1a      	ldr	r2, [r3, #32]
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	43db      	mvns	r3, r3
 800f2f4:	401a      	ands	r2, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	6a1a      	ldr	r2, [r3, #32]
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	f003 031f 	and.w	r3, r3, #31
 800f304:	6879      	ldr	r1, [r7, #4]
 800f306:	fa01 f303 	lsl.w	r3, r1, r3
 800f30a:	431a      	orrs	r2, r3
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	621a      	str	r2, [r3, #32]
}
 800f310:	bf00      	nop
 800f312:	371c      	adds	r7, #28
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f31c:	b480      	push	{r7}
 800f31e:	b085      	sub	sp, #20
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d101      	bne.n	800f334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f330:	2302      	movs	r3, #2
 800f332:	e06d      	b.n	800f410 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2201      	movs	r2, #1
 800f338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2202      	movs	r2, #2
 800f340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	689b      	ldr	r3, [r3, #8]
 800f352:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4a30      	ldr	r2, [pc, #192]	@ (800f41c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d004      	beq.n	800f368 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	4a2f      	ldr	r2, [pc, #188]	@ (800f420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f364:	4293      	cmp	r3, r2
 800f366:	d108      	bne.n	800f37a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f36e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	685b      	ldr	r3, [r3, #4]
 800f374:	68fa      	ldr	r2, [r7, #12]
 800f376:	4313      	orrs	r3, r2
 800f378:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f380:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	68fa      	ldr	r2, [r7, #12]
 800f388:	4313      	orrs	r3, r2
 800f38a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	68fa      	ldr	r2, [r7, #12]
 800f392:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4a20      	ldr	r2, [pc, #128]	@ (800f41c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d022      	beq.n	800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f3a6:	d01d      	beq.n	800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4a1d      	ldr	r2, [pc, #116]	@ (800f424 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d018      	beq.n	800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	4a1c      	ldr	r2, [pc, #112]	@ (800f428 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f3b8:	4293      	cmp	r3, r2
 800f3ba:	d013      	beq.n	800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a1a      	ldr	r2, [pc, #104]	@ (800f42c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d00e      	beq.n	800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4a15      	ldr	r2, [pc, #84]	@ (800f420 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f3cc:	4293      	cmp	r3, r2
 800f3ce:	d009      	beq.n	800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	4a16      	ldr	r2, [pc, #88]	@ (800f430 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d004      	beq.n	800f3e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	4a15      	ldr	r2, [pc, #84]	@ (800f434 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d10c      	bne.n	800f3fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f3ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	689b      	ldr	r3, [r3, #8]
 800f3f0:	68ba      	ldr	r2, [r7, #8]
 800f3f2:	4313      	orrs	r3, r2
 800f3f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2201      	movs	r2, #1
 800f402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2200      	movs	r2, #0
 800f40a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f40e:	2300      	movs	r3, #0
}
 800f410:	4618      	mov	r0, r3
 800f412:	3714      	adds	r7, #20
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr
 800f41c:	40010000 	.word	0x40010000
 800f420:	40010400 	.word	0x40010400
 800f424:	40000400 	.word	0x40000400
 800f428:	40000800 	.word	0x40000800
 800f42c:	40000c00 	.word	0x40000c00
 800f430:	40014000 	.word	0x40014000
 800f434:	40001800 	.word	0x40001800

0800f438 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f440:	bf00      	nop
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f454:	bf00      	nop
 800f456:	370c      	adds	r7, #12
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr

0800f460 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f460:	b480      	push	{r7}
 800f462:	b083      	sub	sp, #12
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f468:	bf00      	nop
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr

0800f474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d101      	bne.n	800f486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f482:	2301      	movs	r3, #1
 800f484:	e040      	b.n	800f508 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d106      	bne.n	800f49c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2200      	movs	r2, #0
 800f492:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f7f6 fb68 	bl	8005b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2224      	movs	r2, #36	@ 0x24
 800f4a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	681a      	ldr	r2, [r3, #0]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f022 0201 	bic.w	r2, r2, #1
 800f4b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d002      	beq.n	800f4c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f000 fb16 	bl	800faec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 f8af 	bl	800f624 <UART_SetConfig>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d101      	bne.n	800f4d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	e01b      	b.n	800f508 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	685a      	ldr	r2, [r3, #4]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f4de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	689a      	ldr	r2, [r3, #8]
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f4ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	681a      	ldr	r2, [r3, #0]
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f042 0201 	orr.w	r2, r2, #1
 800f4fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f000 fb95 	bl	800fc30 <UART_CheckIdleState>
 800f506:	4603      	mov	r3, r0
}
 800f508:	4618      	mov	r0, r3
 800f50a:	3708      	adds	r7, #8
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}

0800f510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f510:	b580      	push	{r7, lr}
 800f512:	b08a      	sub	sp, #40	@ 0x28
 800f514:	af02      	add	r7, sp, #8
 800f516:	60f8      	str	r0, [r7, #12]
 800f518:	60b9      	str	r1, [r7, #8]
 800f51a:	603b      	str	r3, [r7, #0]
 800f51c:	4613      	mov	r3, r2
 800f51e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f524:	2b20      	cmp	r3, #32
 800f526:	d177      	bne.n	800f618 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d002      	beq.n	800f534 <HAL_UART_Transmit+0x24>
 800f52e:	88fb      	ldrh	r3, [r7, #6]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d101      	bne.n	800f538 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f534:	2301      	movs	r3, #1
 800f536:	e070      	b.n	800f61a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	2200      	movs	r2, #0
 800f53c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	2221      	movs	r2, #33	@ 0x21
 800f544:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f546:	f7f8 fe8b 	bl	8008260 <HAL_GetTick>
 800f54a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	88fa      	ldrh	r2, [r7, #6]
 800f550:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	88fa      	ldrh	r2, [r7, #6]
 800f558:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	689b      	ldr	r3, [r3, #8]
 800f560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f564:	d108      	bne.n	800f578 <HAL_UART_Transmit+0x68>
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	691b      	ldr	r3, [r3, #16]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d104      	bne.n	800f578 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f56e:	2300      	movs	r3, #0
 800f570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	61bb      	str	r3, [r7, #24]
 800f576:	e003      	b.n	800f580 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f578:	68bb      	ldr	r3, [r7, #8]
 800f57a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f57c:	2300      	movs	r3, #0
 800f57e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f580:	e02f      	b.n	800f5e2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	9300      	str	r3, [sp, #0]
 800f586:	697b      	ldr	r3, [r7, #20]
 800f588:	2200      	movs	r2, #0
 800f58a:	2180      	movs	r1, #128	@ 0x80
 800f58c:	68f8      	ldr	r0, [r7, #12]
 800f58e:	f000 fba6 	bl	800fcde <UART_WaitOnFlagUntilTimeout>
 800f592:	4603      	mov	r3, r0
 800f594:	2b00      	cmp	r3, #0
 800f596:	d004      	beq.n	800f5a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2220      	movs	r2, #32
 800f59c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800f59e:	2303      	movs	r3, #3
 800f5a0:	e03b      	b.n	800f61a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d10b      	bne.n	800f5c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	881b      	ldrh	r3, [r3, #0]
 800f5ac:	461a      	mov	r2, r3
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f5b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f5b8:	69bb      	ldr	r3, [r7, #24]
 800f5ba:	3302      	adds	r3, #2
 800f5bc:	61bb      	str	r3, [r7, #24]
 800f5be:	e007      	b.n	800f5d0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	781a      	ldrb	r2, [r3, #0]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	3b01      	subs	r3, #1
 800f5da:	b29a      	uxth	r2, r3
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800f5e8:	b29b      	uxth	r3, r3
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d1c9      	bne.n	800f582 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f5ee:	683b      	ldr	r3, [r7, #0]
 800f5f0:	9300      	str	r3, [sp, #0]
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	2140      	movs	r1, #64	@ 0x40
 800f5f8:	68f8      	ldr	r0, [r7, #12]
 800f5fa:	f000 fb70 	bl	800fcde <UART_WaitOnFlagUntilTimeout>
 800f5fe:	4603      	mov	r3, r0
 800f600:	2b00      	cmp	r3, #0
 800f602:	d004      	beq.n	800f60e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	2220      	movs	r2, #32
 800f608:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800f60a:	2303      	movs	r3, #3
 800f60c:	e005      	b.n	800f61a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2220      	movs	r2, #32
 800f612:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800f614:	2300      	movs	r3, #0
 800f616:	e000      	b.n	800f61a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800f618:	2302      	movs	r3, #2
  }
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	3720      	adds	r7, #32
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
	...

0800f624 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b088      	sub	sp, #32
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f62c:	2300      	movs	r3, #0
 800f62e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	689a      	ldr	r2, [r3, #8]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	691b      	ldr	r3, [r3, #16]
 800f638:	431a      	orrs	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	695b      	ldr	r3, [r3, #20]
 800f63e:	431a      	orrs	r2, r3
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	69db      	ldr	r3, [r3, #28]
 800f644:	4313      	orrs	r3, r2
 800f646:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	681a      	ldr	r2, [r3, #0]
 800f64e:	4ba6      	ldr	r3, [pc, #664]	@ (800f8e8 <UART_SetConfig+0x2c4>)
 800f650:	4013      	ands	r3, r2
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	6812      	ldr	r2, [r2, #0]
 800f656:	6979      	ldr	r1, [r7, #20]
 800f658:	430b      	orrs	r3, r1
 800f65a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	685b      	ldr	r3, [r3, #4]
 800f662:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	68da      	ldr	r2, [r3, #12]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	430a      	orrs	r2, r1
 800f670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	699b      	ldr	r3, [r3, #24]
 800f676:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6a1b      	ldr	r3, [r3, #32]
 800f67c:	697a      	ldr	r2, [r7, #20]
 800f67e:	4313      	orrs	r3, r2
 800f680:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	689b      	ldr	r3, [r3, #8]
 800f688:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	697a      	ldr	r2, [r7, #20]
 800f692:	430a      	orrs	r2, r1
 800f694:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	4a94      	ldr	r2, [pc, #592]	@ (800f8ec <UART_SetConfig+0x2c8>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d120      	bne.n	800f6e2 <UART_SetConfig+0xbe>
 800f6a0:	4b93      	ldr	r3, [pc, #588]	@ (800f8f0 <UART_SetConfig+0x2cc>)
 800f6a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6a6:	f003 0303 	and.w	r3, r3, #3
 800f6aa:	2b03      	cmp	r3, #3
 800f6ac:	d816      	bhi.n	800f6dc <UART_SetConfig+0xb8>
 800f6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f6b4 <UART_SetConfig+0x90>)
 800f6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b4:	0800f6c5 	.word	0x0800f6c5
 800f6b8:	0800f6d1 	.word	0x0800f6d1
 800f6bc:	0800f6cb 	.word	0x0800f6cb
 800f6c0:	0800f6d7 	.word	0x0800f6d7
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	77fb      	strb	r3, [r7, #31]
 800f6c8:	e150      	b.n	800f96c <UART_SetConfig+0x348>
 800f6ca:	2302      	movs	r3, #2
 800f6cc:	77fb      	strb	r3, [r7, #31]
 800f6ce:	e14d      	b.n	800f96c <UART_SetConfig+0x348>
 800f6d0:	2304      	movs	r3, #4
 800f6d2:	77fb      	strb	r3, [r7, #31]
 800f6d4:	e14a      	b.n	800f96c <UART_SetConfig+0x348>
 800f6d6:	2308      	movs	r3, #8
 800f6d8:	77fb      	strb	r3, [r7, #31]
 800f6da:	e147      	b.n	800f96c <UART_SetConfig+0x348>
 800f6dc:	2310      	movs	r3, #16
 800f6de:	77fb      	strb	r3, [r7, #31]
 800f6e0:	e144      	b.n	800f96c <UART_SetConfig+0x348>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	4a83      	ldr	r2, [pc, #524]	@ (800f8f4 <UART_SetConfig+0x2d0>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d132      	bne.n	800f752 <UART_SetConfig+0x12e>
 800f6ec:	4b80      	ldr	r3, [pc, #512]	@ (800f8f0 <UART_SetConfig+0x2cc>)
 800f6ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6f2:	f003 030c 	and.w	r3, r3, #12
 800f6f6:	2b0c      	cmp	r3, #12
 800f6f8:	d828      	bhi.n	800f74c <UART_SetConfig+0x128>
 800f6fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f700 <UART_SetConfig+0xdc>)
 800f6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f700:	0800f735 	.word	0x0800f735
 800f704:	0800f74d 	.word	0x0800f74d
 800f708:	0800f74d 	.word	0x0800f74d
 800f70c:	0800f74d 	.word	0x0800f74d
 800f710:	0800f741 	.word	0x0800f741
 800f714:	0800f74d 	.word	0x0800f74d
 800f718:	0800f74d 	.word	0x0800f74d
 800f71c:	0800f74d 	.word	0x0800f74d
 800f720:	0800f73b 	.word	0x0800f73b
 800f724:	0800f74d 	.word	0x0800f74d
 800f728:	0800f74d 	.word	0x0800f74d
 800f72c:	0800f74d 	.word	0x0800f74d
 800f730:	0800f747 	.word	0x0800f747
 800f734:	2300      	movs	r3, #0
 800f736:	77fb      	strb	r3, [r7, #31]
 800f738:	e118      	b.n	800f96c <UART_SetConfig+0x348>
 800f73a:	2302      	movs	r3, #2
 800f73c:	77fb      	strb	r3, [r7, #31]
 800f73e:	e115      	b.n	800f96c <UART_SetConfig+0x348>
 800f740:	2304      	movs	r3, #4
 800f742:	77fb      	strb	r3, [r7, #31]
 800f744:	e112      	b.n	800f96c <UART_SetConfig+0x348>
 800f746:	2308      	movs	r3, #8
 800f748:	77fb      	strb	r3, [r7, #31]
 800f74a:	e10f      	b.n	800f96c <UART_SetConfig+0x348>
 800f74c:	2310      	movs	r3, #16
 800f74e:	77fb      	strb	r3, [r7, #31]
 800f750:	e10c      	b.n	800f96c <UART_SetConfig+0x348>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	4a68      	ldr	r2, [pc, #416]	@ (800f8f8 <UART_SetConfig+0x2d4>)
 800f758:	4293      	cmp	r3, r2
 800f75a:	d120      	bne.n	800f79e <UART_SetConfig+0x17a>
 800f75c:	4b64      	ldr	r3, [pc, #400]	@ (800f8f0 <UART_SetConfig+0x2cc>)
 800f75e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f762:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800f766:	2b30      	cmp	r3, #48	@ 0x30
 800f768:	d013      	beq.n	800f792 <UART_SetConfig+0x16e>
 800f76a:	2b30      	cmp	r3, #48	@ 0x30
 800f76c:	d814      	bhi.n	800f798 <UART_SetConfig+0x174>
 800f76e:	2b20      	cmp	r3, #32
 800f770:	d009      	beq.n	800f786 <UART_SetConfig+0x162>
 800f772:	2b20      	cmp	r3, #32
 800f774:	d810      	bhi.n	800f798 <UART_SetConfig+0x174>
 800f776:	2b00      	cmp	r3, #0
 800f778:	d002      	beq.n	800f780 <UART_SetConfig+0x15c>
 800f77a:	2b10      	cmp	r3, #16
 800f77c:	d006      	beq.n	800f78c <UART_SetConfig+0x168>
 800f77e:	e00b      	b.n	800f798 <UART_SetConfig+0x174>
 800f780:	2300      	movs	r3, #0
 800f782:	77fb      	strb	r3, [r7, #31]
 800f784:	e0f2      	b.n	800f96c <UART_SetConfig+0x348>
 800f786:	2302      	movs	r3, #2
 800f788:	77fb      	strb	r3, [r7, #31]
 800f78a:	e0ef      	b.n	800f96c <UART_SetConfig+0x348>
 800f78c:	2304      	movs	r3, #4
 800f78e:	77fb      	strb	r3, [r7, #31]
 800f790:	e0ec      	b.n	800f96c <UART_SetConfig+0x348>
 800f792:	2308      	movs	r3, #8
 800f794:	77fb      	strb	r3, [r7, #31]
 800f796:	e0e9      	b.n	800f96c <UART_SetConfig+0x348>
 800f798:	2310      	movs	r3, #16
 800f79a:	77fb      	strb	r3, [r7, #31]
 800f79c:	e0e6      	b.n	800f96c <UART_SetConfig+0x348>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	4a56      	ldr	r2, [pc, #344]	@ (800f8fc <UART_SetConfig+0x2d8>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d120      	bne.n	800f7ea <UART_SetConfig+0x1c6>
 800f7a8:	4b51      	ldr	r3, [pc, #324]	@ (800f8f0 <UART_SetConfig+0x2cc>)
 800f7aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800f7b2:	2bc0      	cmp	r3, #192	@ 0xc0
 800f7b4:	d013      	beq.n	800f7de <UART_SetConfig+0x1ba>
 800f7b6:	2bc0      	cmp	r3, #192	@ 0xc0
 800f7b8:	d814      	bhi.n	800f7e4 <UART_SetConfig+0x1c0>
 800f7ba:	2b80      	cmp	r3, #128	@ 0x80
 800f7bc:	d009      	beq.n	800f7d2 <UART_SetConfig+0x1ae>
 800f7be:	2b80      	cmp	r3, #128	@ 0x80
 800f7c0:	d810      	bhi.n	800f7e4 <UART_SetConfig+0x1c0>
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d002      	beq.n	800f7cc <UART_SetConfig+0x1a8>
 800f7c6:	2b40      	cmp	r3, #64	@ 0x40
 800f7c8:	d006      	beq.n	800f7d8 <UART_SetConfig+0x1b4>
 800f7ca:	e00b      	b.n	800f7e4 <UART_SetConfig+0x1c0>
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	77fb      	strb	r3, [r7, #31]
 800f7d0:	e0cc      	b.n	800f96c <UART_SetConfig+0x348>
 800f7d2:	2302      	movs	r3, #2
 800f7d4:	77fb      	strb	r3, [r7, #31]
 800f7d6:	e0c9      	b.n	800f96c <UART_SetConfig+0x348>
 800f7d8:	2304      	movs	r3, #4
 800f7da:	77fb      	strb	r3, [r7, #31]
 800f7dc:	e0c6      	b.n	800f96c <UART_SetConfig+0x348>
 800f7de:	2308      	movs	r3, #8
 800f7e0:	77fb      	strb	r3, [r7, #31]
 800f7e2:	e0c3      	b.n	800f96c <UART_SetConfig+0x348>
 800f7e4:	2310      	movs	r3, #16
 800f7e6:	77fb      	strb	r3, [r7, #31]
 800f7e8:	e0c0      	b.n	800f96c <UART_SetConfig+0x348>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4a44      	ldr	r2, [pc, #272]	@ (800f900 <UART_SetConfig+0x2dc>)
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d125      	bne.n	800f840 <UART_SetConfig+0x21c>
 800f7f4:	4b3e      	ldr	r3, [pc, #248]	@ (800f8f0 <UART_SetConfig+0x2cc>)
 800f7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f7fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f802:	d017      	beq.n	800f834 <UART_SetConfig+0x210>
 800f804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800f808:	d817      	bhi.n	800f83a <UART_SetConfig+0x216>
 800f80a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f80e:	d00b      	beq.n	800f828 <UART_SetConfig+0x204>
 800f810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f814:	d811      	bhi.n	800f83a <UART_SetConfig+0x216>
 800f816:	2b00      	cmp	r3, #0
 800f818:	d003      	beq.n	800f822 <UART_SetConfig+0x1fe>
 800f81a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f81e:	d006      	beq.n	800f82e <UART_SetConfig+0x20a>
 800f820:	e00b      	b.n	800f83a <UART_SetConfig+0x216>
 800f822:	2300      	movs	r3, #0
 800f824:	77fb      	strb	r3, [r7, #31]
 800f826:	e0a1      	b.n	800f96c <UART_SetConfig+0x348>
 800f828:	2302      	movs	r3, #2
 800f82a:	77fb      	strb	r3, [r7, #31]
 800f82c:	e09e      	b.n	800f96c <UART_SetConfig+0x348>
 800f82e:	2304      	movs	r3, #4
 800f830:	77fb      	strb	r3, [r7, #31]
 800f832:	e09b      	b.n	800f96c <UART_SetConfig+0x348>
 800f834:	2308      	movs	r3, #8
 800f836:	77fb      	strb	r3, [r7, #31]
 800f838:	e098      	b.n	800f96c <UART_SetConfig+0x348>
 800f83a:	2310      	movs	r3, #16
 800f83c:	77fb      	strb	r3, [r7, #31]
 800f83e:	e095      	b.n	800f96c <UART_SetConfig+0x348>
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	4a2f      	ldr	r2, [pc, #188]	@ (800f904 <UART_SetConfig+0x2e0>)
 800f846:	4293      	cmp	r3, r2
 800f848:	d125      	bne.n	800f896 <UART_SetConfig+0x272>
 800f84a:	4b29      	ldr	r3, [pc, #164]	@ (800f8f0 <UART_SetConfig+0x2cc>)
 800f84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f850:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800f854:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f858:	d017      	beq.n	800f88a <UART_SetConfig+0x266>
 800f85a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f85e:	d817      	bhi.n	800f890 <UART_SetConfig+0x26c>
 800f860:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f864:	d00b      	beq.n	800f87e <UART_SetConfig+0x25a>
 800f866:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f86a:	d811      	bhi.n	800f890 <UART_SetConfig+0x26c>
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d003      	beq.n	800f878 <UART_SetConfig+0x254>
 800f870:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f874:	d006      	beq.n	800f884 <UART_SetConfig+0x260>
 800f876:	e00b      	b.n	800f890 <UART_SetConfig+0x26c>
 800f878:	2301      	movs	r3, #1
 800f87a:	77fb      	strb	r3, [r7, #31]
 800f87c:	e076      	b.n	800f96c <UART_SetConfig+0x348>
 800f87e:	2302      	movs	r3, #2
 800f880:	77fb      	strb	r3, [r7, #31]
 800f882:	e073      	b.n	800f96c <UART_SetConfig+0x348>
 800f884:	2304      	movs	r3, #4
 800f886:	77fb      	strb	r3, [r7, #31]
 800f888:	e070      	b.n	800f96c <UART_SetConfig+0x348>
 800f88a:	2308      	movs	r3, #8
 800f88c:	77fb      	strb	r3, [r7, #31]
 800f88e:	e06d      	b.n	800f96c <UART_SetConfig+0x348>
 800f890:	2310      	movs	r3, #16
 800f892:	77fb      	strb	r3, [r7, #31]
 800f894:	e06a      	b.n	800f96c <UART_SetConfig+0x348>
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4a1b      	ldr	r2, [pc, #108]	@ (800f908 <UART_SetConfig+0x2e4>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d138      	bne.n	800f912 <UART_SetConfig+0x2ee>
 800f8a0:	4b13      	ldr	r3, [pc, #76]	@ (800f8f0 <UART_SetConfig+0x2cc>)
 800f8a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8a6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800f8aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f8ae:	d017      	beq.n	800f8e0 <UART_SetConfig+0x2bc>
 800f8b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800f8b4:	d82a      	bhi.n	800f90c <UART_SetConfig+0x2e8>
 800f8b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f8ba:	d00b      	beq.n	800f8d4 <UART_SetConfig+0x2b0>
 800f8bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f8c0:	d824      	bhi.n	800f90c <UART_SetConfig+0x2e8>
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d003      	beq.n	800f8ce <UART_SetConfig+0x2aa>
 800f8c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f8ca:	d006      	beq.n	800f8da <UART_SetConfig+0x2b6>
 800f8cc:	e01e      	b.n	800f90c <UART_SetConfig+0x2e8>
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	77fb      	strb	r3, [r7, #31]
 800f8d2:	e04b      	b.n	800f96c <UART_SetConfig+0x348>
 800f8d4:	2302      	movs	r3, #2
 800f8d6:	77fb      	strb	r3, [r7, #31]
 800f8d8:	e048      	b.n	800f96c <UART_SetConfig+0x348>
 800f8da:	2304      	movs	r3, #4
 800f8dc:	77fb      	strb	r3, [r7, #31]
 800f8de:	e045      	b.n	800f96c <UART_SetConfig+0x348>
 800f8e0:	2308      	movs	r3, #8
 800f8e2:	77fb      	strb	r3, [r7, #31]
 800f8e4:	e042      	b.n	800f96c <UART_SetConfig+0x348>
 800f8e6:	bf00      	nop
 800f8e8:	efff69f3 	.word	0xefff69f3
 800f8ec:	40011000 	.word	0x40011000
 800f8f0:	40023800 	.word	0x40023800
 800f8f4:	40004400 	.word	0x40004400
 800f8f8:	40004800 	.word	0x40004800
 800f8fc:	40004c00 	.word	0x40004c00
 800f900:	40005000 	.word	0x40005000
 800f904:	40011400 	.word	0x40011400
 800f908:	40007800 	.word	0x40007800
 800f90c:	2310      	movs	r3, #16
 800f90e:	77fb      	strb	r3, [r7, #31]
 800f910:	e02c      	b.n	800f96c <UART_SetConfig+0x348>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	4a72      	ldr	r2, [pc, #456]	@ (800fae0 <UART_SetConfig+0x4bc>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d125      	bne.n	800f968 <UART_SetConfig+0x344>
 800f91c:	4b71      	ldr	r3, [pc, #452]	@ (800fae4 <UART_SetConfig+0x4c0>)
 800f91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f922:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800f926:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f92a:	d017      	beq.n	800f95c <UART_SetConfig+0x338>
 800f92c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f930:	d817      	bhi.n	800f962 <UART_SetConfig+0x33e>
 800f932:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f936:	d00b      	beq.n	800f950 <UART_SetConfig+0x32c>
 800f938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f93c:	d811      	bhi.n	800f962 <UART_SetConfig+0x33e>
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d003      	beq.n	800f94a <UART_SetConfig+0x326>
 800f942:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f946:	d006      	beq.n	800f956 <UART_SetConfig+0x332>
 800f948:	e00b      	b.n	800f962 <UART_SetConfig+0x33e>
 800f94a:	2300      	movs	r3, #0
 800f94c:	77fb      	strb	r3, [r7, #31]
 800f94e:	e00d      	b.n	800f96c <UART_SetConfig+0x348>
 800f950:	2302      	movs	r3, #2
 800f952:	77fb      	strb	r3, [r7, #31]
 800f954:	e00a      	b.n	800f96c <UART_SetConfig+0x348>
 800f956:	2304      	movs	r3, #4
 800f958:	77fb      	strb	r3, [r7, #31]
 800f95a:	e007      	b.n	800f96c <UART_SetConfig+0x348>
 800f95c:	2308      	movs	r3, #8
 800f95e:	77fb      	strb	r3, [r7, #31]
 800f960:	e004      	b.n	800f96c <UART_SetConfig+0x348>
 800f962:	2310      	movs	r3, #16
 800f964:	77fb      	strb	r3, [r7, #31]
 800f966:	e001      	b.n	800f96c <UART_SetConfig+0x348>
 800f968:	2310      	movs	r3, #16
 800f96a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	69db      	ldr	r3, [r3, #28]
 800f970:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f974:	d15b      	bne.n	800fa2e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800f976:	7ffb      	ldrb	r3, [r7, #31]
 800f978:	2b08      	cmp	r3, #8
 800f97a:	d828      	bhi.n	800f9ce <UART_SetConfig+0x3aa>
 800f97c:	a201      	add	r2, pc, #4	@ (adr r2, 800f984 <UART_SetConfig+0x360>)
 800f97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f982:	bf00      	nop
 800f984:	0800f9a9 	.word	0x0800f9a9
 800f988:	0800f9b1 	.word	0x0800f9b1
 800f98c:	0800f9b9 	.word	0x0800f9b9
 800f990:	0800f9cf 	.word	0x0800f9cf
 800f994:	0800f9bf 	.word	0x0800f9bf
 800f998:	0800f9cf 	.word	0x0800f9cf
 800f99c:	0800f9cf 	.word	0x0800f9cf
 800f9a0:	0800f9cf 	.word	0x0800f9cf
 800f9a4:	0800f9c7 	.word	0x0800f9c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9a8:	f7fc f970 	bl	800bc8c <HAL_RCC_GetPCLK1Freq>
 800f9ac:	61b8      	str	r0, [r7, #24]
        break;
 800f9ae:	e013      	b.n	800f9d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f9b0:	f7fc f980 	bl	800bcb4 <HAL_RCC_GetPCLK2Freq>
 800f9b4:	61b8      	str	r0, [r7, #24]
        break;
 800f9b6:	e00f      	b.n	800f9d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f9b8:	4b4b      	ldr	r3, [pc, #300]	@ (800fae8 <UART_SetConfig+0x4c4>)
 800f9ba:	61bb      	str	r3, [r7, #24]
        break;
 800f9bc:	e00c      	b.n	800f9d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f9be:	f7fc f893 	bl	800bae8 <HAL_RCC_GetSysClockFreq>
 800f9c2:	61b8      	str	r0, [r7, #24]
        break;
 800f9c4:	e008      	b.n	800f9d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f9c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f9ca:	61bb      	str	r3, [r7, #24]
        break;
 800f9cc:	e004      	b.n	800f9d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	77bb      	strb	r3, [r7, #30]
        break;
 800f9d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d074      	beq.n	800fac8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f9de:	69bb      	ldr	r3, [r7, #24]
 800f9e0:	005a      	lsls	r2, r3, #1
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	085b      	lsrs	r3, r3, #1
 800f9e8:	441a      	add	r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	685b      	ldr	r3, [r3, #4]
 800f9ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f9f4:	693b      	ldr	r3, [r7, #16]
 800f9f6:	2b0f      	cmp	r3, #15
 800f9f8:	d916      	bls.n	800fa28 <UART_SetConfig+0x404>
 800f9fa:	693b      	ldr	r3, [r7, #16]
 800f9fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa00:	d212      	bcs.n	800fa28 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fa02:	693b      	ldr	r3, [r7, #16]
 800fa04:	b29b      	uxth	r3, r3
 800fa06:	f023 030f 	bic.w	r3, r3, #15
 800fa0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	085b      	lsrs	r3, r3, #1
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	f003 0307 	and.w	r3, r3, #7
 800fa16:	b29a      	uxth	r2, r3
 800fa18:	89fb      	ldrh	r3, [r7, #14]
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	89fa      	ldrh	r2, [r7, #14]
 800fa24:	60da      	str	r2, [r3, #12]
 800fa26:	e04f      	b.n	800fac8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fa28:	2301      	movs	r3, #1
 800fa2a:	77bb      	strb	r3, [r7, #30]
 800fa2c:	e04c      	b.n	800fac8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fa2e:	7ffb      	ldrb	r3, [r7, #31]
 800fa30:	2b08      	cmp	r3, #8
 800fa32:	d828      	bhi.n	800fa86 <UART_SetConfig+0x462>
 800fa34:	a201      	add	r2, pc, #4	@ (adr r2, 800fa3c <UART_SetConfig+0x418>)
 800fa36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa3a:	bf00      	nop
 800fa3c:	0800fa61 	.word	0x0800fa61
 800fa40:	0800fa69 	.word	0x0800fa69
 800fa44:	0800fa71 	.word	0x0800fa71
 800fa48:	0800fa87 	.word	0x0800fa87
 800fa4c:	0800fa77 	.word	0x0800fa77
 800fa50:	0800fa87 	.word	0x0800fa87
 800fa54:	0800fa87 	.word	0x0800fa87
 800fa58:	0800fa87 	.word	0x0800fa87
 800fa5c:	0800fa7f 	.word	0x0800fa7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fa60:	f7fc f914 	bl	800bc8c <HAL_RCC_GetPCLK1Freq>
 800fa64:	61b8      	str	r0, [r7, #24]
        break;
 800fa66:	e013      	b.n	800fa90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fa68:	f7fc f924 	bl	800bcb4 <HAL_RCC_GetPCLK2Freq>
 800fa6c:	61b8      	str	r0, [r7, #24]
        break;
 800fa6e:	e00f      	b.n	800fa90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fa70:	4b1d      	ldr	r3, [pc, #116]	@ (800fae8 <UART_SetConfig+0x4c4>)
 800fa72:	61bb      	str	r3, [r7, #24]
        break;
 800fa74:	e00c      	b.n	800fa90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fa76:	f7fc f837 	bl	800bae8 <HAL_RCC_GetSysClockFreq>
 800fa7a:	61b8      	str	r0, [r7, #24]
        break;
 800fa7c:	e008      	b.n	800fa90 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fa82:	61bb      	str	r3, [r7, #24]
        break;
 800fa84:	e004      	b.n	800fa90 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800fa86:	2300      	movs	r3, #0
 800fa88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	77bb      	strb	r3, [r7, #30]
        break;
 800fa8e:	bf00      	nop
    }

    if (pclk != 0U)
 800fa90:	69bb      	ldr	r3, [r7, #24]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d018      	beq.n	800fac8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	085a      	lsrs	r2, r3, #1
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	441a      	add	r2, r3
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800faa8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800faaa:	693b      	ldr	r3, [r7, #16]
 800faac:	2b0f      	cmp	r3, #15
 800faae:	d909      	bls.n	800fac4 <UART_SetConfig+0x4a0>
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fab6:	d205      	bcs.n	800fac4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	b29a      	uxth	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	60da      	str	r2, [r3, #12]
 800fac2:	e001      	b.n	800fac8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800fac4:	2301      	movs	r3, #1
 800fac6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2200      	movs	r2, #0
 800fad2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800fad4:	7fbb      	ldrb	r3, [r7, #30]
}
 800fad6:	4618      	mov	r0, r3
 800fad8:	3720      	adds	r7, #32
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	40007c00 	.word	0x40007c00
 800fae4:	40023800 	.word	0x40023800
 800fae8:	00f42400 	.word	0x00f42400

0800faec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800faf8:	f003 0308 	and.w	r3, r3, #8
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d00a      	beq.n	800fb16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	430a      	orrs	r2, r1
 800fb14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb1a:	f003 0301 	and.w	r3, r3, #1
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d00a      	beq.n	800fb38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	430a      	orrs	r2, r1
 800fb36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb3c:	f003 0302 	and.w	r3, r3, #2
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d00a      	beq.n	800fb5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	685b      	ldr	r3, [r3, #4]
 800fb4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	430a      	orrs	r2, r1
 800fb58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb5e:	f003 0304 	and.w	r3, r3, #4
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00a      	beq.n	800fb7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	685b      	ldr	r3, [r3, #4]
 800fb6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	430a      	orrs	r2, r1
 800fb7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb80:	f003 0310 	and.w	r3, r3, #16
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00a      	beq.n	800fb9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	689b      	ldr	r3, [r3, #8]
 800fb8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	430a      	orrs	r2, r1
 800fb9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fba2:	f003 0320 	and.w	r3, r3, #32
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00a      	beq.n	800fbc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	689b      	ldr	r3, [r3, #8]
 800fbb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	430a      	orrs	r2, r1
 800fbbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d01a      	beq.n	800fc02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	430a      	orrs	r2, r1
 800fbe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fbe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800fbea:	d10a      	bne.n	800fc02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	430a      	orrs	r2, r1
 800fc00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d00a      	beq.n	800fc24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	685b      	ldr	r3, [r3, #4]
 800fc14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	430a      	orrs	r2, r1
 800fc22:	605a      	str	r2, [r3, #4]
  }
}
 800fc24:	bf00      	nop
 800fc26:	370c      	adds	r7, #12
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr

0800fc30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b08c      	sub	sp, #48	@ 0x30
 800fc34:	af02      	add	r7, sp, #8
 800fc36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fc40:	f7f8 fb0e 	bl	8008260 <HAL_GetTick>
 800fc44:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	f003 0308 	and.w	r3, r3, #8
 800fc50:	2b08      	cmp	r3, #8
 800fc52:	d12e      	bne.n	800fcb2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800fc58:	9300      	str	r3, [sp, #0]
 800fc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 f83b 	bl	800fcde <UART_WaitOnFlagUntilTimeout>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d021      	beq.n	800fcb2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc74:	693b      	ldr	r3, [r7, #16]
 800fc76:	e853 3f00 	ldrex	r3, [r3]
 800fc7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc82:	623b      	str	r3, [r7, #32]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	461a      	mov	r2, r3
 800fc8a:	6a3b      	ldr	r3, [r7, #32]
 800fc8c:	61fb      	str	r3, [r7, #28]
 800fc8e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc90:	69b9      	ldr	r1, [r7, #24]
 800fc92:	69fa      	ldr	r2, [r7, #28]
 800fc94:	e841 2300 	strex	r3, r2, [r1]
 800fc98:	617b      	str	r3, [r7, #20]
   return(result);
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1e6      	bne.n	800fc6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2220      	movs	r2, #32
 800fca4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fcae:	2303      	movs	r3, #3
 800fcb0:	e011      	b.n	800fcd6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2220      	movs	r2, #32
 800fcb6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2220      	movs	r2, #32
 800fcbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800fcd4:	2300      	movs	r3, #0
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3728      	adds	r7, #40	@ 0x28
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}

0800fcde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fcde:	b580      	push	{r7, lr}
 800fce0:	b084      	sub	sp, #16
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	60f8      	str	r0, [r7, #12]
 800fce6:	60b9      	str	r1, [r7, #8]
 800fce8:	603b      	str	r3, [r7, #0]
 800fcea:	4613      	mov	r3, r2
 800fcec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fcee:	e04f      	b.n	800fd90 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcf6:	d04b      	beq.n	800fd90 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fcf8:	f7f8 fab2 	bl	8008260 <HAL_GetTick>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	1ad3      	subs	r3, r2, r3
 800fd02:	69ba      	ldr	r2, [r7, #24]
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d302      	bcc.n	800fd0e <UART_WaitOnFlagUntilTimeout+0x30>
 800fd08:	69bb      	ldr	r3, [r7, #24]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d101      	bne.n	800fd12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fd0e:	2303      	movs	r3, #3
 800fd10:	e04e      	b.n	800fdb0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f003 0304 	and.w	r3, r3, #4
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d037      	beq.n	800fd90 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	2b80      	cmp	r3, #128	@ 0x80
 800fd24:	d034      	beq.n	800fd90 <UART_WaitOnFlagUntilTimeout+0xb2>
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	2b40      	cmp	r3, #64	@ 0x40
 800fd2a:	d031      	beq.n	800fd90 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	69db      	ldr	r3, [r3, #28]
 800fd32:	f003 0308 	and.w	r3, r3, #8
 800fd36:	2b08      	cmp	r3, #8
 800fd38:	d110      	bne.n	800fd5c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	2208      	movs	r2, #8
 800fd40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd42:	68f8      	ldr	r0, [r7, #12]
 800fd44:	f000 f838 	bl	800fdb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2208      	movs	r2, #8
 800fd4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	2200      	movs	r2, #0
 800fd54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800fd58:	2301      	movs	r3, #1
 800fd5a:	e029      	b.n	800fdb0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	69db      	ldr	r3, [r3, #28]
 800fd62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fd66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fd6a:	d111      	bne.n	800fd90 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800fd74:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd76:	68f8      	ldr	r0, [r7, #12]
 800fd78:	f000 f81e 	bl	800fdb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	2220      	movs	r2, #32
 800fd80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	2200      	movs	r2, #0
 800fd88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800fd8c:	2303      	movs	r3, #3
 800fd8e:	e00f      	b.n	800fdb0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	69da      	ldr	r2, [r3, #28]
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	4013      	ands	r3, r2
 800fd9a:	68ba      	ldr	r2, [r7, #8]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	bf0c      	ite	eq
 800fda0:	2301      	moveq	r3, #1
 800fda2:	2300      	movne	r3, #0
 800fda4:	b2db      	uxtb	r3, r3
 800fda6:	461a      	mov	r2, r3
 800fda8:	79fb      	ldrb	r3, [r7, #7]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d0a0      	beq.n	800fcf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fdae:	2300      	movs	r3, #0
}
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	3710      	adds	r7, #16
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fdb8:	b480      	push	{r7}
 800fdba:	b095      	sub	sp, #84	@ 0x54
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fdc8:	e853 3f00 	ldrex	r3, [r3]
 800fdcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fdce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fdd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	461a      	mov	r2, r3
 800fddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fdde:	643b      	str	r3, [r7, #64]	@ 0x40
 800fde0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fde4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fde6:	e841 2300 	strex	r3, r2, [r1]
 800fdea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fdec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1e6      	bne.n	800fdc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	3308      	adds	r3, #8
 800fdf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdfa:	6a3b      	ldr	r3, [r7, #32]
 800fdfc:	e853 3f00 	ldrex	r3, [r3]
 800fe00:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe02:	69fb      	ldr	r3, [r7, #28]
 800fe04:	f023 0301 	bic.w	r3, r3, #1
 800fe08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	3308      	adds	r3, #8
 800fe10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fe12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fe14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fe18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fe1a:	e841 2300 	strex	r3, r2, [r1]
 800fe1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fe20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d1e5      	bne.n	800fdf2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	d118      	bne.n	800fe60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	e853 3f00 	ldrex	r3, [r3]
 800fe3a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	f023 0310 	bic.w	r3, r3, #16
 800fe42:	647b      	str	r3, [r7, #68]	@ 0x44
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	461a      	mov	r2, r3
 800fe4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe4c:	61bb      	str	r3, [r7, #24]
 800fe4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe50:	6979      	ldr	r1, [r7, #20]
 800fe52:	69ba      	ldr	r2, [r7, #24]
 800fe54:	e841 2300 	strex	r3, r2, [r1]
 800fe58:	613b      	str	r3, [r7, #16]
   return(result);
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1e6      	bne.n	800fe2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2220      	movs	r2, #32
 800fe64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	2200      	movs	r2, #0
 800fe72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800fe74:	bf00      	nop
 800fe76:	3754      	adds	r7, #84	@ 0x54
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d121      	bne.n	800fed6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	681a      	ldr	r2, [r3, #0]
 800fe96:	4b27      	ldr	r3, [pc, #156]	@ (800ff34 <FMC_SDRAM_Init+0xb4>)
 800fe98:	4013      	ands	r3, r2
 800fe9a:	683a      	ldr	r2, [r7, #0]
 800fe9c:	6851      	ldr	r1, [r2, #4]
 800fe9e:	683a      	ldr	r2, [r7, #0]
 800fea0:	6892      	ldr	r2, [r2, #8]
 800fea2:	4311      	orrs	r1, r2
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	68d2      	ldr	r2, [r2, #12]
 800fea8:	4311      	orrs	r1, r2
 800feaa:	683a      	ldr	r2, [r7, #0]
 800feac:	6912      	ldr	r2, [r2, #16]
 800feae:	4311      	orrs	r1, r2
 800feb0:	683a      	ldr	r2, [r7, #0]
 800feb2:	6952      	ldr	r2, [r2, #20]
 800feb4:	4311      	orrs	r1, r2
 800feb6:	683a      	ldr	r2, [r7, #0]
 800feb8:	6992      	ldr	r2, [r2, #24]
 800feba:	4311      	orrs	r1, r2
 800febc:	683a      	ldr	r2, [r7, #0]
 800febe:	69d2      	ldr	r2, [r2, #28]
 800fec0:	4311      	orrs	r1, r2
 800fec2:	683a      	ldr	r2, [r7, #0]
 800fec4:	6a12      	ldr	r2, [r2, #32]
 800fec6:	4311      	orrs	r1, r2
 800fec8:	683a      	ldr	r2, [r7, #0]
 800feca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800fecc:	430a      	orrs	r2, r1
 800fece:	431a      	orrs	r2, r3
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	601a      	str	r2, [r3, #0]
 800fed4:	e026      	b.n	800ff24 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	69d9      	ldr	r1, [r3, #28]
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	6a1b      	ldr	r3, [r3, #32]
 800fee6:	4319      	orrs	r1, r3
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feec:	430b      	orrs	r3, r1
 800feee:	431a      	orrs	r2, r3
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	685a      	ldr	r2, [r3, #4]
 800fef8:	4b0e      	ldr	r3, [pc, #56]	@ (800ff34 <FMC_SDRAM_Init+0xb4>)
 800fefa:	4013      	ands	r3, r2
 800fefc:	683a      	ldr	r2, [r7, #0]
 800fefe:	6851      	ldr	r1, [r2, #4]
 800ff00:	683a      	ldr	r2, [r7, #0]
 800ff02:	6892      	ldr	r2, [r2, #8]
 800ff04:	4311      	orrs	r1, r2
 800ff06:	683a      	ldr	r2, [r7, #0]
 800ff08:	68d2      	ldr	r2, [r2, #12]
 800ff0a:	4311      	orrs	r1, r2
 800ff0c:	683a      	ldr	r2, [r7, #0]
 800ff0e:	6912      	ldr	r2, [r2, #16]
 800ff10:	4311      	orrs	r1, r2
 800ff12:	683a      	ldr	r2, [r7, #0]
 800ff14:	6952      	ldr	r2, [r2, #20]
 800ff16:	4311      	orrs	r1, r2
 800ff18:	683a      	ldr	r2, [r7, #0]
 800ff1a:	6992      	ldr	r2, [r2, #24]
 800ff1c:	430a      	orrs	r2, r1
 800ff1e:	431a      	orrs	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ff24:	2300      	movs	r3, #0
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	370c      	adds	r7, #12
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop
 800ff34:	ffff8000 	.word	0xffff8000

0800ff38 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b085      	sub	sp, #20
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d128      	bne.n	800ff9c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	689b      	ldr	r3, [r3, #8]
 800ff4e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	1e59      	subs	r1, r3, #1
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	685b      	ldr	r3, [r3, #4]
 800ff5c:	3b01      	subs	r3, #1
 800ff5e:	011b      	lsls	r3, r3, #4
 800ff60:	4319      	orrs	r1, r3
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	689b      	ldr	r3, [r3, #8]
 800ff66:	3b01      	subs	r3, #1
 800ff68:	021b      	lsls	r3, r3, #8
 800ff6a:	4319      	orrs	r1, r3
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	3b01      	subs	r3, #1
 800ff72:	031b      	lsls	r3, r3, #12
 800ff74:	4319      	orrs	r1, r3
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	691b      	ldr	r3, [r3, #16]
 800ff7a:	3b01      	subs	r3, #1
 800ff7c:	041b      	lsls	r3, r3, #16
 800ff7e:	4319      	orrs	r1, r3
 800ff80:	68bb      	ldr	r3, [r7, #8]
 800ff82:	695b      	ldr	r3, [r3, #20]
 800ff84:	3b01      	subs	r3, #1
 800ff86:	051b      	lsls	r3, r3, #20
 800ff88:	4319      	orrs	r1, r3
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	699b      	ldr	r3, [r3, #24]
 800ff8e:	3b01      	subs	r3, #1
 800ff90:	061b      	lsls	r3, r3, #24
 800ff92:	430b      	orrs	r3, r1
 800ff94:	431a      	orrs	r2, r3
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	609a      	str	r2, [r3, #8]
 800ff9a:	e02d      	b.n	800fff8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	689a      	ldr	r2, [r3, #8]
 800ffa0:	4b19      	ldr	r3, [pc, #100]	@ (8010008 <FMC_SDRAM_Timing_Init+0xd0>)
 800ffa2:	4013      	ands	r3, r2
 800ffa4:	68ba      	ldr	r2, [r7, #8]
 800ffa6:	68d2      	ldr	r2, [r2, #12]
 800ffa8:	3a01      	subs	r2, #1
 800ffaa:	0311      	lsls	r1, r2, #12
 800ffac:	68ba      	ldr	r2, [r7, #8]
 800ffae:	6952      	ldr	r2, [r2, #20]
 800ffb0:	3a01      	subs	r2, #1
 800ffb2:	0512      	lsls	r2, r2, #20
 800ffb4:	430a      	orrs	r2, r1
 800ffb6:	431a      	orrs	r2, r3
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	1e59      	subs	r1, r3, #1
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	685b      	ldr	r3, [r3, #4]
 800ffce:	3b01      	subs	r3, #1
 800ffd0:	011b      	lsls	r3, r3, #4
 800ffd2:	4319      	orrs	r1, r3
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	689b      	ldr	r3, [r3, #8]
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	021b      	lsls	r3, r3, #8
 800ffdc:	4319      	orrs	r1, r3
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	691b      	ldr	r3, [r3, #16]
 800ffe2:	3b01      	subs	r3, #1
 800ffe4:	041b      	lsls	r3, r3, #16
 800ffe6:	4319      	orrs	r1, r3
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	699b      	ldr	r3, [r3, #24]
 800ffec:	3b01      	subs	r3, #1
 800ffee:	061b      	lsls	r3, r3, #24
 800fff0:	430b      	orrs	r3, r1
 800fff2:	431a      	orrs	r2, r3
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800fff8:	2300      	movs	r3, #0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3714      	adds	r7, #20
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop
 8010008:	ff0f0fff 	.word	0xff0f0fff

0801000c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 801000c:	b480      	push	{r7}
 801000e:	b085      	sub	sp, #20
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	691a      	ldr	r2, [r3, #16]
 801001c:	4b0c      	ldr	r3, [pc, #48]	@ (8010050 <FMC_SDRAM_SendCommand+0x44>)
 801001e:	4013      	ands	r3, r2
 8010020:	68ba      	ldr	r2, [r7, #8]
 8010022:	6811      	ldr	r1, [r2, #0]
 8010024:	68ba      	ldr	r2, [r7, #8]
 8010026:	6852      	ldr	r2, [r2, #4]
 8010028:	4311      	orrs	r1, r2
 801002a:	68ba      	ldr	r2, [r7, #8]
 801002c:	6892      	ldr	r2, [r2, #8]
 801002e:	3a01      	subs	r2, #1
 8010030:	0152      	lsls	r2, r2, #5
 8010032:	4311      	orrs	r1, r2
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	68d2      	ldr	r2, [r2, #12]
 8010038:	0252      	lsls	r2, r2, #9
 801003a:	430a      	orrs	r2, r1
 801003c:	431a      	orrs	r2, r3
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8010042:	2300      	movs	r3, #0
}
 8010044:	4618      	mov	r0, r3
 8010046:	3714      	adds	r7, #20
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr
 8010050:	ffc00000 	.word	0xffc00000

08010054 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8010054:	b480      	push	{r7}
 8010056:	b083      	sub	sp, #12
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	695a      	ldr	r2, [r3, #20]
 8010062:	4b07      	ldr	r3, [pc, #28]	@ (8010080 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8010064:	4013      	ands	r3, r2
 8010066:	683a      	ldr	r2, [r7, #0]
 8010068:	0052      	lsls	r2, r2, #1
 801006a:	431a      	orrs	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8010070:	2300      	movs	r3, #0
}
 8010072:	4618      	mov	r0, r3
 8010074:	370c      	adds	r7, #12
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	ffffc001 	.word	0xffffc001

08010084 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010084:	b084      	sub	sp, #16
 8010086:	b480      	push	{r7}
 8010088:	b085      	sub	sp, #20
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
 801008e:	f107 001c 	add.w	r0, r7, #28
 8010092:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010096:	2300      	movs	r3, #0
 8010098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 801009a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 801009c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801009e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80100a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80100a2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80100a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80100a6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80100a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80100aa:	431a      	orrs	r2, r3
             Init.ClockDiv
 80100ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80100ae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	4313      	orrs	r3, r2
 80100b4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	685a      	ldr	r2, [r3, #4]
 80100ba:	4b07      	ldr	r3, [pc, #28]	@ (80100d8 <SDMMC_Init+0x54>)
 80100bc:	4013      	ands	r3, r2
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	431a      	orrs	r2, r3
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80100c6:	2300      	movs	r3, #0
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3714      	adds	r7, #20
 80100cc:	46bd      	mov	sp, r7
 80100ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d2:	b004      	add	sp, #16
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	ffff8100 	.word	0xffff8100

080100dc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	370c      	adds	r7, #12
 80100ee:	46bd      	mov	sp, r7
 80100f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f4:	4770      	bx	lr

080100f6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80100f6:	b480      	push	{r7}
 80100f8:	b083      	sub	sp, #12
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
 80100fe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8010100:	683b      	ldr	r3, [r7, #0]
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 801010a:	2300      	movs	r3, #0
}
 801010c:	4618      	mov	r0, r3
 801010e:	370c      	adds	r7, #12
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2203      	movs	r2, #3
 8010124:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010126:	2300      	movs	r3, #0
}
 8010128:	4618      	mov	r0, r3
 801012a:	370c      	adds	r7, #12
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8010134:	b480      	push	{r7}
 8010136:	b083      	sub	sp, #12
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f003 0303 	and.w	r3, r3, #3
}
 8010144:	4618      	mov	r0, r3
 8010146:	370c      	adds	r7, #12
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr

08010150 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010150:	b480      	push	{r7}
 8010152:	b085      	sub	sp, #20
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
 8010158:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801015a:	2300      	movs	r3, #0
 801015c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801016e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010170:	683b      	ldr	r3, [r7, #0]
 8010172:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010174:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801017a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801017c:	68fa      	ldr	r2, [r7, #12]
 801017e:	4313      	orrs	r3, r2
 8010180:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	68da      	ldr	r2, [r3, #12]
 8010186:	4b06      	ldr	r3, [pc, #24]	@ (80101a0 <SDMMC_SendCommand+0x50>)
 8010188:	4013      	ands	r3, r2
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	431a      	orrs	r2, r3
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010192:	2300      	movs	r3, #0
}
 8010194:	4618      	mov	r0, r3
 8010196:	3714      	adds	r7, #20
 8010198:	46bd      	mov	sp, r7
 801019a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019e:	4770      	bx	lr
 80101a0:	fffff000 	.word	0xfffff000

080101a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80101a4:	b480      	push	{r7}
 80101a6:	b083      	sub	sp, #12
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	691b      	ldr	r3, [r3, #16]
 80101b0:	b2db      	uxtb	r3, r3
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	370c      	adds	r7, #12
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr

080101be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80101be:	b480      	push	{r7}
 80101c0:	b085      	sub	sp, #20
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
 80101c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	3314      	adds	r3, #20
 80101cc:	461a      	mov	r2, r3
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	4413      	add	r3, r2
 80101d2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	681b      	ldr	r3, [r3, #0]
}  
 80101d8:	4618      	mov	r0, r3
 80101da:	3714      	adds	r7, #20
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr

080101e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80101e4:	b480      	push	{r7}
 80101e6:	b085      	sub	sp, #20
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80101ee:	2300      	movs	r3, #0
 80101f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	681a      	ldr	r2, [r3, #0]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	685a      	ldr	r2, [r3, #4]
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010202:	683b      	ldr	r3, [r7, #0]
 8010204:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801020a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 801020c:	683b      	ldr	r3, [r7, #0]
 801020e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010210:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010216:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	4313      	orrs	r3, r2
 801021c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010222:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	431a      	orrs	r2, r3
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 801022e:	2300      	movs	r3, #0

}
 8010230:	4618      	mov	r0, r3
 8010232:	3714      	adds	r7, #20
 8010234:	46bd      	mov	sp, r7
 8010236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023a:	4770      	bx	lr

0801023c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b088      	sub	sp, #32
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801024a:	2310      	movs	r3, #16
 801024c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801024e:	2340      	movs	r3, #64	@ 0x40
 8010250:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010252:	2300      	movs	r3, #0
 8010254:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010256:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801025a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801025c:	f107 0308 	add.w	r3, r7, #8
 8010260:	4619      	mov	r1, r3
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f7ff ff74 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8010268:	f241 3288 	movw	r2, #5000	@ 0x1388
 801026c:	2110      	movs	r1, #16
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 f9d6 	bl	8010620 <SDMMC_GetCmdResp1>
 8010274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010276:	69fb      	ldr	r3, [r7, #28]
}
 8010278:	4618      	mov	r0, r3
 801027a:	3720      	adds	r7, #32
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b088      	sub	sp, #32
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801028e:	2311      	movs	r3, #17
 8010290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010292:	2340      	movs	r3, #64	@ 0x40
 8010294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010296:	2300      	movs	r3, #0
 8010298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801029a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801029e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102a0:	f107 0308 	add.w	r3, r7, #8
 80102a4:	4619      	mov	r1, r3
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f7ff ff52 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80102ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102b0:	2111      	movs	r1, #17
 80102b2:	6878      	ldr	r0, [r7, #4]
 80102b4:	f000 f9b4 	bl	8010620 <SDMMC_GetCmdResp1>
 80102b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102ba:	69fb      	ldr	r3, [r7, #28]
}
 80102bc:	4618      	mov	r0, r3
 80102be:	3720      	adds	r7, #32
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b088      	sub	sp, #32
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80102d2:	2312      	movs	r3, #18
 80102d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80102d6:	2340      	movs	r3, #64	@ 0x40
 80102d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80102da:	2300      	movs	r3, #0
 80102dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80102de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80102e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80102e4:	f107 0308 	add.w	r3, r7, #8
 80102e8:	4619      	mov	r1, r3
 80102ea:	6878      	ldr	r0, [r7, #4]
 80102ec:	f7ff ff30 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80102f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80102f4:	2112      	movs	r1, #18
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f000 f992 	bl	8010620 <SDMMC_GetCmdResp1>
 80102fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102fe:	69fb      	ldr	r3, [r7, #28]
}
 8010300:	4618      	mov	r0, r3
 8010302:	3720      	adds	r7, #32
 8010304:	46bd      	mov	sp, r7
 8010306:	bd80      	pop	{r7, pc}

08010308 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b088      	sub	sp, #32
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010316:	2318      	movs	r3, #24
 8010318:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801031a:	2340      	movs	r3, #64	@ 0x40
 801031c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801031e:	2300      	movs	r3, #0
 8010320:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010322:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010326:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010328:	f107 0308 	add.w	r3, r7, #8
 801032c:	4619      	mov	r1, r3
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f7ff ff0e 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010338:	2118      	movs	r1, #24
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f000 f970 	bl	8010620 <SDMMC_GetCmdResp1>
 8010340:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010342:	69fb      	ldr	r3, [r7, #28]
}
 8010344:	4618      	mov	r0, r3
 8010346:	3720      	adds	r7, #32
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b088      	sub	sp, #32
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801035a:	2319      	movs	r3, #25
 801035c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801035e:	2340      	movs	r3, #64	@ 0x40
 8010360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010362:	2300      	movs	r3, #0
 8010364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801036a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801036c:	f107 0308 	add.w	r3, r7, #8
 8010370:	4619      	mov	r1, r3
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f7ff feec 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010378:	f241 3288 	movw	r2, #5000	@ 0x1388
 801037c:	2119      	movs	r1, #25
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f000 f94e 	bl	8010620 <SDMMC_GetCmdResp1>
 8010384:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010386:	69fb      	ldr	r3, [r7, #28]
}
 8010388:	4618      	mov	r0, r3
 801038a:	3720      	adds	r7, #32
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b088      	sub	sp, #32
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010398:	2300      	movs	r3, #0
 801039a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 801039c:	230c      	movs	r3, #12
 801039e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103a0:	2340      	movs	r3, #64	@ 0x40
 80103a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103a4:	2300      	movs	r3, #0
 80103a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80103ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103ae:	f107 0308 	add.w	r3, r7, #8
 80103b2:	4619      	mov	r1, r3
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7ff fecb 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80103ba:	4a05      	ldr	r2, [pc, #20]	@ (80103d0 <SDMMC_CmdStopTransfer+0x40>)
 80103bc:	210c      	movs	r1, #12
 80103be:	6878      	ldr	r0, [r7, #4]
 80103c0:	f000 f92e 	bl	8010620 <SDMMC_GetCmdResp1>
 80103c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103c6:	69fb      	ldr	r3, [r7, #28]
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3720      	adds	r7, #32
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	05f5e100 	.word	0x05f5e100

080103d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b08a      	sub	sp, #40	@ 0x28
 80103d8:	af00      	add	r7, sp, #0
 80103da:	60f8      	str	r0, [r7, #12]
 80103dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80103e4:	2307      	movs	r3, #7
 80103e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103e8:	2340      	movs	r3, #64	@ 0x40
 80103ea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103ec:	2300      	movs	r3, #0
 80103ee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80103f4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103f6:	f107 0310 	add.w	r3, r7, #16
 80103fa:	4619      	mov	r1, r3
 80103fc:	68f8      	ldr	r0, [r7, #12]
 80103fe:	f7ff fea7 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010406:	2107      	movs	r1, #7
 8010408:	68f8      	ldr	r0, [r7, #12]
 801040a:	f000 f909 	bl	8010620 <SDMMC_GetCmdResp1>
 801040e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8010410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010412:	4618      	mov	r0, r3
 8010414:	3728      	adds	r7, #40	@ 0x28
 8010416:	46bd      	mov	sp, r7
 8010418:	bd80      	pop	{r7, pc}

0801041a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801041a:	b580      	push	{r7, lr}
 801041c:	b088      	sub	sp, #32
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010422:	2300      	movs	r3, #0
 8010424:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010426:	2300      	movs	r3, #0
 8010428:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801042a:	2300      	movs	r3, #0
 801042c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801042e:	2300      	movs	r3, #0
 8010430:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010432:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010436:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010438:	f107 0308 	add.w	r3, r7, #8
 801043c:	4619      	mov	r1, r3
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f7ff fe86 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f000 fb23 	bl	8010a90 <SDMMC_GetCmdError>
 801044a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801044c:	69fb      	ldr	r3, [r7, #28]
}
 801044e:	4618      	mov	r0, r3
 8010450:	3720      	adds	r7, #32
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}

08010456 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010456:	b580      	push	{r7, lr}
 8010458:	b088      	sub	sp, #32
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801045e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8010462:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010464:	2308      	movs	r3, #8
 8010466:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010468:	2340      	movs	r3, #64	@ 0x40
 801046a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801046c:	2300      	movs	r3, #0
 801046e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010470:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010474:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010476:	f107 0308 	add.w	r3, r7, #8
 801047a:	4619      	mov	r1, r3
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f7ff fe67 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010482:	6878      	ldr	r0, [r7, #4]
 8010484:	f000 fab6 	bl	80109f4 <SDMMC_GetCmdResp7>
 8010488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801048a:	69fb      	ldr	r3, [r7, #28]
}
 801048c:	4618      	mov	r0, r3
 801048e:	3720      	adds	r7, #32
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b088      	sub	sp, #32
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80104a2:	2337      	movs	r3, #55	@ 0x37
 80104a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104a6:	2340      	movs	r3, #64	@ 0x40
 80104a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104aa:	2300      	movs	r3, #0
 80104ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80104b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104b4:	f107 0308 	add.w	r3, r7, #8
 80104b8:	4619      	mov	r1, r3
 80104ba:	6878      	ldr	r0, [r7, #4]
 80104bc:	f7ff fe48 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80104c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80104c4:	2137      	movs	r1, #55	@ 0x37
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f000 f8aa 	bl	8010620 <SDMMC_GetCmdResp1>
 80104cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104ce:	69fb      	ldr	r3, [r7, #28]
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3720      	adds	r7, #32
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b088      	sub	sp, #32
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80104e2:	683a      	ldr	r2, [r7, #0]
 80104e4:	4b0d      	ldr	r3, [pc, #52]	@ (801051c <SDMMC_CmdAppOperCommand+0x44>)
 80104e6:	4313      	orrs	r3, r2
 80104e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80104ea:	2329      	movs	r3, #41	@ 0x29
 80104ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104ee:	2340      	movs	r3, #64	@ 0x40
 80104f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104f2:	2300      	movs	r3, #0
 80104f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80104fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104fc:	f107 0308 	add.w	r3, r7, #8
 8010500:	4619      	mov	r1, r3
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f7ff fe24 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f000 f9bf 	bl	801088c <SDMMC_GetCmdResp3>
 801050e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010510:	69fb      	ldr	r3, [r7, #28]
}
 8010512:	4618      	mov	r0, r3
 8010514:	3720      	adds	r7, #32
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	80100000 	.word	0x80100000

08010520 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b088      	sub	sp, #32
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010528:	2300      	movs	r3, #0
 801052a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801052c:	2302      	movs	r3, #2
 801052e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010530:	23c0      	movs	r3, #192	@ 0xc0
 8010532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010534:	2300      	movs	r3, #0
 8010536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010538:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801053c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801053e:	f107 0308 	add.w	r3, r7, #8
 8010542:	4619      	mov	r1, r3
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f7ff fe03 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f000 f956 	bl	80107fc <SDMMC_GetCmdResp2>
 8010550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010552:	69fb      	ldr	r3, [r7, #28]
}
 8010554:	4618      	mov	r0, r3
 8010556:	3720      	adds	r7, #32
 8010558:	46bd      	mov	sp, r7
 801055a:	bd80      	pop	{r7, pc}

0801055c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b088      	sub	sp, #32
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801056a:	2309      	movs	r3, #9
 801056c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 801056e:	23c0      	movs	r3, #192	@ 0xc0
 8010570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010572:	2300      	movs	r3, #0
 8010574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801057a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801057c:	f107 0308 	add.w	r3, r7, #8
 8010580:	4619      	mov	r1, r3
 8010582:	6878      	ldr	r0, [r7, #4]
 8010584:	f7ff fde4 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010588:	6878      	ldr	r0, [r7, #4]
 801058a:	f000 f937 	bl	80107fc <SDMMC_GetCmdResp2>
 801058e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010590:	69fb      	ldr	r3, [r7, #28]
}
 8010592:	4618      	mov	r0, r3
 8010594:	3720      	adds	r7, #32
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 801059a:	b580      	push	{r7, lr}
 801059c:	b088      	sub	sp, #32
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80105a4:	2300      	movs	r3, #0
 80105a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80105a8:	2303      	movs	r3, #3
 80105aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105ac:	2340      	movs	r3, #64	@ 0x40
 80105ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105b0:	2300      	movs	r3, #0
 80105b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105ba:	f107 0308 	add.w	r3, r7, #8
 80105be:	4619      	mov	r1, r3
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f7ff fdc5 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80105c6:	683a      	ldr	r2, [r7, #0]
 80105c8:	2103      	movs	r1, #3
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 f99c 	bl	8010908 <SDMMC_GetCmdResp6>
 80105d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105d2:	69fb      	ldr	r3, [r7, #28]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3720      	adds	r7, #32
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b088      	sub	sp, #32
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80105ea:	230d      	movs	r3, #13
 80105ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105ee:	2340      	movs	r3, #64	@ 0x40
 80105f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105f2:	2300      	movs	r3, #0
 80105f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105fc:	f107 0308 	add.w	r3, r7, #8
 8010600:	4619      	mov	r1, r3
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f7ff fda4 	bl	8010150 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010608:	f241 3288 	movw	r2, #5000	@ 0x1388
 801060c:	210d      	movs	r1, #13
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 f806 	bl	8010620 <SDMMC_GetCmdResp1>
 8010614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010616:	69fb      	ldr	r3, [r7, #28]
}
 8010618:	4618      	mov	r0, r3
 801061a:	3720      	adds	r7, #32
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}

08010620 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b088      	sub	sp, #32
 8010624:	af00      	add	r7, sp, #0
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	460b      	mov	r3, r1
 801062a:	607a      	str	r2, [r7, #4]
 801062c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801062e:	4b70      	ldr	r3, [pc, #448]	@ (80107f0 <SDMMC_GetCmdResp1+0x1d0>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	4a70      	ldr	r2, [pc, #448]	@ (80107f4 <SDMMC_GetCmdResp1+0x1d4>)
 8010634:	fba2 2303 	umull	r2, r3, r2, r3
 8010638:	0a5a      	lsrs	r2, r3, #9
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	fb02 f303 	mul.w	r3, r2, r3
 8010640:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010642:	69fb      	ldr	r3, [r7, #28]
 8010644:	1e5a      	subs	r2, r3, #1
 8010646:	61fa      	str	r2, [r7, #28]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d102      	bne.n	8010652 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801064c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010650:	e0c9      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010656:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010658:	69bb      	ldr	r3, [r7, #24]
 801065a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 801065e:	2b00      	cmp	r3, #0
 8010660:	d0ef      	beq.n	8010642 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010668:	2b00      	cmp	r3, #0
 801066a:	d1ea      	bne.n	8010642 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010670:	f003 0304 	and.w	r3, r3, #4
 8010674:	2b00      	cmp	r3, #0
 8010676:	d004      	beq.n	8010682 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	2204      	movs	r2, #4
 801067c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801067e:	2304      	movs	r3, #4
 8010680:	e0b1      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010686:	f003 0301 	and.w	r3, r3, #1
 801068a:	2b00      	cmp	r3, #0
 801068c:	d004      	beq.n	8010698 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2201      	movs	r2, #1
 8010692:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010694:	2301      	movs	r3, #1
 8010696:	e0a6      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	22c5      	movs	r2, #197	@ 0xc5
 801069c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801069e:	68f8      	ldr	r0, [r7, #12]
 80106a0:	f7ff fd80 	bl	80101a4 <SDMMC_GetCommandResponse>
 80106a4:	4603      	mov	r3, r0
 80106a6:	461a      	mov	r2, r3
 80106a8:	7afb      	ldrb	r3, [r7, #11]
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d001      	beq.n	80106b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80106ae:	2301      	movs	r3, #1
 80106b0:	e099      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80106b2:	2100      	movs	r1, #0
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	f7ff fd82 	bl	80101be <SDMMC_GetResponse>
 80106ba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80106bc:	697a      	ldr	r2, [r7, #20]
 80106be:	4b4e      	ldr	r3, [pc, #312]	@ (80107f8 <SDMMC_GetCmdResp1+0x1d8>)
 80106c0:	4013      	ands	r3, r2
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d101      	bne.n	80106ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80106c6:	2300      	movs	r3, #0
 80106c8:	e08d      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	da02      	bge.n	80106d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80106d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80106d4:	e087      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d001      	beq.n	80106e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80106e0:	2340      	movs	r3, #64	@ 0x40
 80106e2:	e080      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d001      	beq.n	80106f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80106ee:	2380      	movs	r3, #128	@ 0x80
 80106f0:	e079      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d002      	beq.n	8010702 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80106fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010700:	e071      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8010708:	2b00      	cmp	r3, #0
 801070a:	d002      	beq.n	8010712 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801070c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010710:	e069      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010718:	2b00      	cmp	r3, #0
 801071a:	d002      	beq.n	8010722 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801071c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010720:	e061      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010728:	2b00      	cmp	r3, #0
 801072a:	d002      	beq.n	8010732 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801072c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010730:	e059      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010738:	2b00      	cmp	r3, #0
 801073a:	d002      	beq.n	8010742 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010740:	e051      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010748:	2b00      	cmp	r3, #0
 801074a:	d002      	beq.n	8010752 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801074c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010750:	e049      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010758:	2b00      	cmp	r3, #0
 801075a:	d002      	beq.n	8010762 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801075c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8010760:	e041      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010768:	2b00      	cmp	r3, #0
 801076a:	d002      	beq.n	8010772 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801076c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010770:	e039      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010778:	2b00      	cmp	r3, #0
 801077a:	d002      	beq.n	8010782 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801077c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8010780:	e031      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010788:	2b00      	cmp	r3, #0
 801078a:	d002      	beq.n	8010792 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801078c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8010790:	e029      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010798:	2b00      	cmp	r3, #0
 801079a:	d002      	beq.n	80107a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801079c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80107a0:	e021      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d002      	beq.n	80107b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80107ac:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80107b0:	e019      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d002      	beq.n	80107c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80107bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80107c0:	e011      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d002      	beq.n	80107d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80107cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80107d0:	e009      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	f003 0308 	and.w	r3, r3, #8
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d002      	beq.n	80107e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80107dc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80107e0:	e001      	b.n	80107e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80107e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3720      	adds	r7, #32
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}
 80107ee:	bf00      	nop
 80107f0:	20004ed0 	.word	0x20004ed0
 80107f4:	10624dd3 	.word	0x10624dd3
 80107f8:	fdffe008 	.word	0xfdffe008

080107fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80107fc:	b480      	push	{r7}
 80107fe:	b085      	sub	sp, #20
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010804:	4b1f      	ldr	r3, [pc, #124]	@ (8010884 <SDMMC_GetCmdResp2+0x88>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4a1f      	ldr	r2, [pc, #124]	@ (8010888 <SDMMC_GetCmdResp2+0x8c>)
 801080a:	fba2 2303 	umull	r2, r3, r2, r3
 801080e:	0a5b      	lsrs	r3, r3, #9
 8010810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010814:	fb02 f303 	mul.w	r3, r2, r3
 8010818:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	1e5a      	subs	r2, r3, #1
 801081e:	60fa      	str	r2, [r7, #12]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d102      	bne.n	801082a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010824:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010828:	e026      	b.n	8010878 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801082e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010836:	2b00      	cmp	r3, #0
 8010838:	d0ef      	beq.n	801081a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801083a:	68bb      	ldr	r3, [r7, #8]
 801083c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1ea      	bne.n	801081a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010848:	f003 0304 	and.w	r3, r3, #4
 801084c:	2b00      	cmp	r3, #0
 801084e:	d004      	beq.n	801085a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2204      	movs	r2, #4
 8010854:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010856:	2304      	movs	r3, #4
 8010858:	e00e      	b.n	8010878 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801085e:	f003 0301 	and.w	r3, r3, #1
 8010862:	2b00      	cmp	r3, #0
 8010864:	d004      	beq.n	8010870 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2201      	movs	r2, #1
 801086a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801086c:	2301      	movs	r3, #1
 801086e:	e003      	b.n	8010878 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	22c5      	movs	r2, #197	@ 0xc5
 8010874:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8010876:	2300      	movs	r3, #0
}
 8010878:	4618      	mov	r0, r3
 801087a:	3714      	adds	r7, #20
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr
 8010884:	20004ed0 	.word	0x20004ed0
 8010888:	10624dd3 	.word	0x10624dd3

0801088c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801088c:	b480      	push	{r7}
 801088e:	b085      	sub	sp, #20
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010894:	4b1a      	ldr	r3, [pc, #104]	@ (8010900 <SDMMC_GetCmdResp3+0x74>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4a1a      	ldr	r2, [pc, #104]	@ (8010904 <SDMMC_GetCmdResp3+0x78>)
 801089a:	fba2 2303 	umull	r2, r3, r2, r3
 801089e:	0a5b      	lsrs	r3, r3, #9
 80108a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80108a4:	fb02 f303 	mul.w	r3, r2, r3
 80108a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	1e5a      	subs	r2, r3, #1
 80108ae:	60fa      	str	r2, [r7, #12]
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d102      	bne.n	80108ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80108b8:	e01b      	b.n	80108f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d0ef      	beq.n	80108aa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d1ea      	bne.n	80108aa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108d8:	f003 0304 	and.w	r3, r3, #4
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d004      	beq.n	80108ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2204      	movs	r2, #4
 80108e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108e6:	2304      	movs	r3, #4
 80108e8:	e003      	b.n	80108f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	22c5      	movs	r2, #197	@ 0xc5
 80108ee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80108f0:	2300      	movs	r3, #0
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3714      	adds	r7, #20
 80108f6:	46bd      	mov	sp, r7
 80108f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fc:	4770      	bx	lr
 80108fe:	bf00      	nop
 8010900:	20004ed0 	.word	0x20004ed0
 8010904:	10624dd3 	.word	0x10624dd3

08010908 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b088      	sub	sp, #32
 801090c:	af00      	add	r7, sp, #0
 801090e:	60f8      	str	r0, [r7, #12]
 8010910:	460b      	mov	r3, r1
 8010912:	607a      	str	r2, [r7, #4]
 8010914:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010916:	4b35      	ldr	r3, [pc, #212]	@ (80109ec <SDMMC_GetCmdResp6+0xe4>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	4a35      	ldr	r2, [pc, #212]	@ (80109f0 <SDMMC_GetCmdResp6+0xe8>)
 801091c:	fba2 2303 	umull	r2, r3, r2, r3
 8010920:	0a5b      	lsrs	r3, r3, #9
 8010922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010926:	fb02 f303 	mul.w	r3, r2, r3
 801092a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801092c:	69fb      	ldr	r3, [r7, #28]
 801092e:	1e5a      	subs	r2, r3, #1
 8010930:	61fa      	str	r2, [r7, #28]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d102      	bne.n	801093c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010936:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 801093a:	e052      	b.n	80109e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010940:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010942:	69bb      	ldr	r3, [r7, #24]
 8010944:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010948:	2b00      	cmp	r3, #0
 801094a:	d0ef      	beq.n	801092c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801094c:	69bb      	ldr	r3, [r7, #24]
 801094e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010952:	2b00      	cmp	r3, #0
 8010954:	d1ea      	bne.n	801092c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801095a:	f003 0304 	and.w	r3, r3, #4
 801095e:	2b00      	cmp	r3, #0
 8010960:	d004      	beq.n	801096c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	2204      	movs	r2, #4
 8010966:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010968:	2304      	movs	r3, #4
 801096a:	e03a      	b.n	80109e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010970:	f003 0301 	and.w	r3, r3, #1
 8010974:	2b00      	cmp	r3, #0
 8010976:	d004      	beq.n	8010982 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	2201      	movs	r2, #1
 801097c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801097e:	2301      	movs	r3, #1
 8010980:	e02f      	b.n	80109e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010982:	68f8      	ldr	r0, [r7, #12]
 8010984:	f7ff fc0e 	bl	80101a4 <SDMMC_GetCommandResponse>
 8010988:	4603      	mov	r3, r0
 801098a:	461a      	mov	r2, r3
 801098c:	7afb      	ldrb	r3, [r7, #11]
 801098e:	4293      	cmp	r3, r2
 8010990:	d001      	beq.n	8010996 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010992:	2301      	movs	r3, #1
 8010994:	e025      	b.n	80109e2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	22c5      	movs	r2, #197	@ 0xc5
 801099a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 801099c:	2100      	movs	r1, #0
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f7ff fc0d 	bl	80101be <SDMMC_GetResponse>
 80109a4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d106      	bne.n	80109be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80109b0:	697b      	ldr	r3, [r7, #20]
 80109b2:	0c1b      	lsrs	r3, r3, #16
 80109b4:	b29a      	uxth	r2, r3
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80109ba:	2300      	movs	r3, #0
 80109bc:	e011      	b.n	80109e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d002      	beq.n	80109ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80109c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80109cc:	e009      	b.n	80109e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80109ce:	697b      	ldr	r3, [r7, #20]
 80109d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d002      	beq.n	80109de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80109d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80109dc:	e001      	b.n	80109e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80109de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3720      	adds	r7, #32
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop
 80109ec:	20004ed0 	.word	0x20004ed0
 80109f0:	10624dd3 	.word	0x10624dd3

080109f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80109f4:	b480      	push	{r7}
 80109f6:	b085      	sub	sp, #20
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80109fc:	4b22      	ldr	r3, [pc, #136]	@ (8010a88 <SDMMC_GetCmdResp7+0x94>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4a22      	ldr	r2, [pc, #136]	@ (8010a8c <SDMMC_GetCmdResp7+0x98>)
 8010a02:	fba2 2303 	umull	r2, r3, r2, r3
 8010a06:	0a5b      	lsrs	r3, r3, #9
 8010a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010a0c:	fb02 f303 	mul.w	r3, r2, r3
 8010a10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	1e5a      	subs	r2, r3, #1
 8010a16:	60fa      	str	r2, [r7, #12]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d102      	bne.n	8010a22 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010a1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010a20:	e02c      	b.n	8010a7c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d0ef      	beq.n	8010a12 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d1ea      	bne.n	8010a12 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a40:	f003 0304 	and.w	r3, r3, #4
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d004      	beq.n	8010a52 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2204      	movs	r2, #4
 8010a4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a4e:	2304      	movs	r3, #4
 8010a50:	e014      	b.n	8010a7c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a56:	f003 0301 	and.w	r3, r3, #1
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d004      	beq.n	8010a68 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2201      	movs	r2, #1
 8010a62:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a64:	2301      	movs	r3, #1
 8010a66:	e009      	b.n	8010a7c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d002      	beq.n	8010a7a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2240      	movs	r2, #64	@ 0x40
 8010a78:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010a7a:	2300      	movs	r3, #0
  
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3714      	adds	r7, #20
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr
 8010a88:	20004ed0 	.word	0x20004ed0
 8010a8c:	10624dd3 	.word	0x10624dd3

08010a90 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b085      	sub	sp, #20
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a98:	4b11      	ldr	r3, [pc, #68]	@ (8010ae0 <SDMMC_GetCmdError+0x50>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	4a11      	ldr	r2, [pc, #68]	@ (8010ae4 <SDMMC_GetCmdError+0x54>)
 8010a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8010aa2:	0a5b      	lsrs	r3, r3, #9
 8010aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010aa8:	fb02 f303 	mul.w	r3, r2, r3
 8010aac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	1e5a      	subs	r2, r3, #1
 8010ab2:	60fa      	str	r2, [r7, #12]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d102      	bne.n	8010abe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ab8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010abc:	e009      	b.n	8010ad2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d0f1      	beq.n	8010aae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	22c5      	movs	r2, #197	@ 0xc5
 8010ace:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8010ad0:	2300      	movs	r3, #0
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3714      	adds	r7, #20
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010adc:	4770      	bx	lr
 8010ade:	bf00      	nop
 8010ae0:	20004ed0 	.word	0x20004ed0
 8010ae4:	10624dd3 	.word	0x10624dd3

08010ae8 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8010ae8:	b590      	push	{r4, r7, lr}
 8010aea:	b087      	sub	sp, #28
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	607a      	str	r2, [r7, #4]
 8010af2:	461a      	mov	r2, r3
 8010af4:	460b      	mov	r3, r1
 8010af6:	72fb      	strb	r3, [r7, #11]
 8010af8:	4613      	mov	r3, r2
 8010afa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d102      	bne.n	8010b08 <hts221_read_reg+0x20>
 8010b02:	f04f 33ff 	mov.w	r3, #4294967295
 8010b06:	e009      	b.n	8010b1c <hts221_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	685c      	ldr	r4, [r3, #4]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	68d8      	ldr	r0, [r3, #12]
 8010b10:	893b      	ldrh	r3, [r7, #8]
 8010b12:	7af9      	ldrb	r1, [r7, #11]
 8010b14:	687a      	ldr	r2, [r7, #4]
 8010b16:	47a0      	blx	r4
 8010b18:	6178      	str	r0, [r7, #20]

  return ret;
 8010b1a:	697b      	ldr	r3, [r7, #20]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	371c      	adds	r7, #28
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd90      	pop	{r4, r7, pc}

08010b24 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8010b24:	b590      	push	{r4, r7, lr}
 8010b26:	b087      	sub	sp, #28
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	607a      	str	r2, [r7, #4]
 8010b2e:	461a      	mov	r2, r3
 8010b30:	460b      	mov	r3, r1
 8010b32:	72fb      	strb	r3, [r7, #11]
 8010b34:	4613      	mov	r3, r2
 8010b36:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d102      	bne.n	8010b44 <hts221_write_reg+0x20>
 8010b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8010b42:	e009      	b.n	8010b58 <hts221_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	681c      	ldr	r4, [r3, #0]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	68d8      	ldr	r0, [r3, #12]
 8010b4c:	893b      	ldrh	r3, [r7, #8]
 8010b4e:	7af9      	ldrb	r1, [r7, #11]
 8010b50:	687a      	ldr	r2, [r7, #4]
 8010b52:	47a0      	blx	r4
 8010b54:	6178      	str	r0, [r7, #20]

  return ret;
 8010b56:	697b      	ldr	r3, [r7, #20]
}
 8010b58:	4618      	mov	r0, r3
 8010b5a:	371c      	adds	r7, #28
 8010b5c:	46bd      	mov	sp, r7
 8010b5e:	bd90      	pop	{r4, r7, pc}

08010b60 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(const stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	460b      	mov	r3, r1
 8010b6a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8010b6c:	f107 0208 	add.w	r2, r7, #8
 8010b70:	2301      	movs	r3, #1
 8010b72:	2120      	movs	r1, #32
 8010b74:	6878      	ldr	r0, [r7, #4]
 8010b76:	f7ff ffb7 	bl	8010ae8 <hts221_read_reg>
 8010b7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d10f      	bne.n	8010ba2 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8010b82:	78fb      	ldrb	r3, [r7, #3]
 8010b84:	f003 0303 	and.w	r3, r3, #3
 8010b88:	b2da      	uxtb	r2, r3
 8010b8a:	7a3b      	ldrb	r3, [r7, #8]
 8010b8c:	f362 0301 	bfi	r3, r2, #0, #2
 8010b90:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8010b92:	f107 0208 	add.w	r2, r7, #8
 8010b96:	2301      	movs	r3, #1
 8010b98:	2120      	movs	r1, #32
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f7ff ffc2 	bl	8010b24 <hts221_write_reg>
 8010ba0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3710      	adds	r7, #16
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}

08010bac <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b084      	sub	sp, #16
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
 8010bb4:	460b      	mov	r3, r1
 8010bb6:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8010bb8:	f107 0208 	add.w	r2, r7, #8
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	2120      	movs	r1, #32
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f7ff ff91 	bl	8010ae8 <hts221_read_reg>
 8010bc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d10f      	bne.n	8010bee <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8010bce:	78fb      	ldrb	r3, [r7, #3]
 8010bd0:	f003 0301 	and.w	r3, r3, #1
 8010bd4:	b2da      	uxtb	r2, r3
 8010bd6:	7a3b      	ldrb	r3, [r7, #8]
 8010bd8:	f362 0382 	bfi	r3, r2, #2, #1
 8010bdc:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8010bde:	f107 0208 	add.w	r2, r7, #8
 8010be2:	2301      	movs	r3, #1
 8010be4:	2120      	movs	r1, #32
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f7ff ff9c 	bl	8010b24 <hts221_write_reg>
 8010bec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8010bee:	68fb      	ldr	r3, [r7, #12]
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3710      	adds	r7, #16
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8010bf8:	b580      	push	{r7, lr}
 8010bfa:	b084      	sub	sp, #16
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 8010c02:	f107 0208 	add.w	r2, r7, #8
 8010c06:	2302      	movs	r3, #2
 8010c08:	2128      	movs	r1, #40	@ 0x28
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f7ff ff6c 	bl	8010ae8 <hts221_read_reg>
 8010c10:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8010c12:	7a7b      	ldrb	r3, [r7, #9]
 8010c14:	b21a      	sxth	r2, r3
 8010c16:	683b      	ldr	r3, [r7, #0]
 8010c18:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8010c1a:	683b      	ldr	r3, [r7, #0]
 8010c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c20:	b29b      	uxth	r3, r3
 8010c22:	021b      	lsls	r3, r3, #8
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	7a3a      	ldrb	r2, [r7, #8]
 8010c28:	4413      	add	r3, r2
 8010c2a:	b29b      	uxth	r3, r3
 8010c2c:	b21a      	sxth	r2, r3
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	801a      	strh	r2, [r3, #0]

  return ret;
 8010c32:	68fb      	ldr	r3, [r7, #12]
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 8010c46:	f107 0208 	add.w	r2, r7, #8
 8010c4a:	2302      	movs	r3, #2
 8010c4c:	212a      	movs	r1, #42	@ 0x2a
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f7ff ff4a 	bl	8010ae8 <hts221_read_reg>
 8010c54:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8010c56:	7a7b      	ldrb	r3, [r7, #9]
 8010c58:	b21a      	sxth	r2, r3
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010c64:	b29b      	uxth	r3, r3
 8010c66:	021b      	lsls	r3, r3, #8
 8010c68:	b29b      	uxth	r3, r3
 8010c6a:	7a3a      	ldrb	r2, [r7, #8]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	b29b      	uxth	r3, r3
 8010c70:	b21a      	sxth	r2, r3
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	801a      	strh	r2, [r3, #0]

  return ret;
 8010c76:	68fb      	ldr	r3, [r7, #12]
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3710      	adds	r7, #16
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b084      	sub	sp, #16
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	683a      	ldr	r2, [r7, #0]
 8010c8e:	210f      	movs	r1, #15
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f7ff ff29 	bl	8010ae8 <hts221_read_reg>
 8010c96:	60f8      	str	r0, [r7, #12]

  return ret;
 8010c98:	68fb      	ldr	r3, [r7, #12]
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	3710      	adds	r7, #16
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd80      	pop	{r7, pc}

08010ca2 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8010ca2:	b580      	push	{r7, lr}
 8010ca4:	b084      	sub	sp, #16
 8010ca6:	af00      	add	r7, sp, #0
 8010ca8:	6078      	str	r0, [r7, #4]
 8010caa:	460b      	mov	r3, r1
 8010cac:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8010cae:	f107 0208 	add.w	r2, r7, #8
 8010cb2:	2301      	movs	r3, #1
 8010cb4:	2120      	movs	r1, #32
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f7ff ff16 	bl	8010ae8 <hts221_read_reg>
 8010cbc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d10f      	bne.n	8010ce4 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 8010cc4:	78fb      	ldrb	r3, [r7, #3]
 8010cc6:	f003 0301 	and.w	r3, r3, #1
 8010cca:	b2da      	uxtb	r2, r3
 8010ccc:	7a3b      	ldrb	r3, [r7, #8]
 8010cce:	f362 13c7 	bfi	r3, r2, #7, #1
 8010cd2:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8010cd4:	f107 0208 	add.w	r2, r7, #8
 8010cd8:	2301      	movs	r3, #1
 8010cda:	2120      	movs	r1, #32
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f7ff ff21 	bl	8010b24 <hts221_write_reg>
 8010ce2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3710      	adds	r7, #16
 8010cea:	46bd      	mov	sp, r7
 8010cec:	bd80      	pop	{r7, pc}

08010cee <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(const stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 8010cee:	b580      	push	{r7, lr}
 8010cf0:	b084      	sub	sp, #16
 8010cf2:	af00      	add	r7, sp, #0
 8010cf4:	6078      	str	r0, [r7, #4]
 8010cf6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) val, 1);
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	683a      	ldr	r2, [r7, #0]
 8010cfc:	2127      	movs	r1, #39	@ 0x27
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f7ff fef2 	bl	8010ae8 <hts221_read_reg>
 8010d04:	60f8      	str	r0, [r7, #12]

  return ret;
 8010d06:	68fb      	ldr	r3, [r7, #12]
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3710      	adds	r7, #16
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
 8010d18:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8010d1a:	f107 020b 	add.w	r2, r7, #11
 8010d1e:	2301      	movs	r3, #1
 8010d20:	2130      	movs	r1, #48	@ 0x30
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f7ff fee0 	bl	8010ae8 <hts221_read_reg>
 8010d28:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8010d2a:	7afb      	ldrb	r3, [r7, #11]
 8010d2c:	ee07 3a90 	vmov	s15, r3
 8010d30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010d34:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010d38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8010d42:	68fb      	ldr	r3, [r7, #12]
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	3710      	adds	r7, #16
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b084      	sub	sp, #16
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 8010d56:	f107 020b 	add.w	r2, r7, #11
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	2131      	movs	r1, #49	@ 0x31
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7ff fec2 	bl	8010ae8 <hts221_read_reg>
 8010d64:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8010d66:	7afb      	ldrb	r3, [r7, #11]
 8010d68:	ee07 3a90 	vmov	s15, r3
 8010d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010d70:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3710      	adds	r7, #16
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b086      	sub	sp, #24
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 8010d92:	f107 020f 	add.w	r2, r7, #15
 8010d96:	2301      	movs	r3, #1
 8010d98:	2132      	movs	r1, #50	@ 0x32
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f7ff fea4 	bl	8010ae8 <hts221_read_reg>
 8010da0:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d11b      	bne.n	8010de0 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8010da8:	f107 0210 	add.w	r2, r7, #16
 8010dac:	2301      	movs	r3, #1
 8010dae:	2135      	movs	r1, #53	@ 0x35
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f7ff fe99 	bl	8010ae8 <hts221_read_reg>
 8010db6:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 8010db8:	7c3b      	ldrb	r3, [r7, #16]
 8010dba:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010dbe:	b2db      	uxtb	r3, r3
 8010dc0:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8010dc2:	7cfb      	ldrb	r3, [r7, #19]
 8010dc4:	021b      	lsls	r3, r3, #8
 8010dc6:	7bfa      	ldrb	r2, [r7, #15]
 8010dc8:	4413      	add	r3, r2
 8010dca:	ee07 3a90 	vmov	s15, r3
 8010dce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010dd2:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8010dd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8010de0:	697b      	ldr	r3, [r7, #20]
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	3718      	adds	r7, #24
 8010de6:	46bd      	mov	sp, r7
 8010de8:	bd80      	pop	{r7, pc}

08010dea <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010dea:	b580      	push	{r7, lr}
 8010dec:	b086      	sub	sp, #24
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
 8010df2:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 8010df4:	f107 020f 	add.w	r2, r7, #15
 8010df8:	2301      	movs	r3, #1
 8010dfa:	2133      	movs	r1, #51	@ 0x33
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7ff fe73 	bl	8010ae8 <hts221_read_reg>
 8010e02:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d11b      	bne.n	8010e42 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8010e0a:	f107 0210 	add.w	r2, r7, #16
 8010e0e:	2301      	movs	r3, #1
 8010e10:	2135      	movs	r1, #53	@ 0x35
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f7ff fe68 	bl	8010ae8 <hts221_read_reg>
 8010e18:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8010e1a:	7c3b      	ldrb	r3, [r7, #16]
 8010e1c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010e20:	b2db      	uxtb	r3, r3
 8010e22:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8010e24:	7cfb      	ldrb	r3, [r7, #19]
 8010e26:	021b      	lsls	r3, r3, #8
 8010e28:	7bfa      	ldrb	r2, [r7, #15]
 8010e2a:	4413      	add	r3, r2
 8010e2c:	ee07 3a90 	vmov	s15, r3
 8010e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010e34:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8010e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8010e42:	697b      	ldr	r3, [r7, #20]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3718      	adds	r7, #24
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b084      	sub	sp, #16
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8010e56:	f107 0208 	add.w	r2, r7, #8
 8010e5a:	2302      	movs	r3, #2
 8010e5c:	2136      	movs	r1, #54	@ 0x36
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f7ff fe42 	bl	8010ae8 <hts221_read_reg>
 8010e64:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8010e66:	7a7b      	ldrb	r3, [r7, #9]
 8010e68:	021b      	lsls	r3, r3, #8
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	7a3a      	ldrb	r2, [r7, #8]
 8010e6e:	4413      	add	r3, r2
 8010e70:	b29b      	uxth	r3, r3
 8010e72:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8010e74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010e78:	ee07 3a90 	vmov	s15, r3
 8010e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010e80:	683b      	ldr	r3, [r7, #0]
 8010e82:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8010e86:	68fb      	ldr	r3, [r7, #12]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3710      	adds	r7, #16
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8010e9a:	f107 0208 	add.w	r2, r7, #8
 8010e9e:	2302      	movs	r3, #2
 8010ea0:	213a      	movs	r1, #58	@ 0x3a
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f7ff fe20 	bl	8010ae8 <hts221_read_reg>
 8010ea8:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8010eaa:	7a7b      	ldrb	r3, [r7, #9]
 8010eac:	021b      	lsls	r3, r3, #8
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	7a3a      	ldrb	r2, [r7, #8]
 8010eb2:	4413      	add	r3, r2
 8010eb4:	b29b      	uxth	r3, r3
 8010eb6:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8010eb8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010ebc:	ee07 3a90 	vmov	s15, r3
 8010ec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8010eca:	68fb      	ldr	r3, [r7, #12]
}
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3710      	adds	r7, #16
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b084      	sub	sp, #16
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8010ede:	f107 0208 	add.w	r2, r7, #8
 8010ee2:	2302      	movs	r3, #2
 8010ee4:	213c      	movs	r1, #60	@ 0x3c
 8010ee6:	6878      	ldr	r0, [r7, #4]
 8010ee8:	f7ff fdfe 	bl	8010ae8 <hts221_read_reg>
 8010eec:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8010eee:	7a7b      	ldrb	r3, [r7, #9]
 8010ef0:	021b      	lsls	r3, r3, #8
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	7a3a      	ldrb	r2, [r7, #8]
 8010ef6:	4413      	add	r3, r2
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8010efc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010f00:	ee07 3a90 	vmov	s15, r3
 8010f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
}
 8010f10:	4618      	mov	r0, r3
 8010f12:	3710      	adds	r7, #16
 8010f14:	46bd      	mov	sp, r7
 8010f16:	bd80      	pop	{r7, pc}

08010f18 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b084      	sub	sp, #16
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
 8010f20:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8010f22:	f107 0208 	add.w	r2, r7, #8
 8010f26:	2302      	movs	r3, #2
 8010f28:	213e      	movs	r1, #62	@ 0x3e
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f7ff fddc 	bl	8010ae8 <hts221_read_reg>
 8010f30:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8010f32:	7a7b      	ldrb	r3, [r7, #9]
 8010f34:	021b      	lsls	r3, r3, #8
 8010f36:	b29b      	uxth	r3, r3
 8010f38:	7a3a      	ldrb	r2, [r7, #8]
 8010f3a:	4413      	add	r3, r2
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8010f40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010f44:	ee07 3a90 	vmov	s15, r3
 8010f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8010f52:	68fb      	ldr	r3, [r7, #12]
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3710      	adds	r7, #16
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8010f5c:	b590      	push	{r4, r7, lr}
 8010f5e:	b087      	sub	sp, #28
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	60f8      	str	r0, [r7, #12]
 8010f64:	607a      	str	r2, [r7, #4]
 8010f66:	461a      	mov	r2, r3
 8010f68:	460b      	mov	r3, r1
 8010f6a:	72fb      	strb	r3, [r7, #11]
 8010f6c:	4613      	mov	r3, r2
 8010f6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d102      	bne.n	8010f7c <lps22hh_read_reg+0x20>
  {
    return -1;
 8010f76:	f04f 33ff 	mov.w	r3, #4294967295
 8010f7a:	e009      	b.n	8010f90 <lps22hh_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	685c      	ldr	r4, [r3, #4]
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	68d8      	ldr	r0, [r3, #12]
 8010f84:	893b      	ldrh	r3, [r7, #8]
 8010f86:	7af9      	ldrb	r1, [r7, #11]
 8010f88:	687a      	ldr	r2, [r7, #4]
 8010f8a:	47a0      	blx	r4
 8010f8c:	6178      	str	r0, [r7, #20]

  return ret;
 8010f8e:	697b      	ldr	r3, [r7, #20]
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	371c      	adds	r7, #28
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd90      	pop	{r4, r7, pc}

08010f98 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8010f98:	b590      	push	{r4, r7, lr}
 8010f9a:	b087      	sub	sp, #28
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	607a      	str	r2, [r7, #4]
 8010fa2:	461a      	mov	r2, r3
 8010fa4:	460b      	mov	r3, r1
 8010fa6:	72fb      	strb	r3, [r7, #11]
 8010fa8:	4613      	mov	r3, r2
 8010faa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d102      	bne.n	8010fb8 <lps22hh_write_reg+0x20>
  {
    return -1;
 8010fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8010fb6:	e009      	b.n	8010fcc <lps22hh_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	681c      	ldr	r4, [r3, #0]
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	68d8      	ldr	r0, [r3, #12]
 8010fc0:	893b      	ldrh	r3, [r7, #8]
 8010fc2:	7af9      	ldrb	r1, [r7, #11]
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	47a0      	blx	r4
 8010fc8:	6178      	str	r0, [r7, #20]

  return ret;
 8010fca:	697b      	ldr	r3, [r7, #20]
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	371c      	adds	r7, #28
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd90      	pop	{r4, r7, pc}

08010fd4 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	ee07 3a90 	vmov	s15, r3
 8010fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fe6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8011000 <lps22hh_from_lsb_to_hpa+0x2c>
 8010fea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010fee:	eef0 7a66 	vmov.f32	s15, s13
}
 8010ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8010ff6:	370c      	adds	r7, #12
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffe:	4770      	bx	lr
 8011000:	49800000 	.word	0x49800000

08011004 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b084      	sub	sp, #16
 8011008:	af00      	add	r7, sp, #0
 801100a:	6078      	str	r0, [r7, #4]
 801100c:	460b      	mov	r3, r1
 801100e:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8011010:	f107 0208 	add.w	r2, r7, #8
 8011014:	2301      	movs	r3, #1
 8011016:	2110      	movs	r1, #16
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	f7ff ff9f 	bl	8010f5c <lps22hh_read_reg>
 801101e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d10f      	bne.n	8011046 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8011026:	78fb      	ldrb	r3, [r7, #3]
 8011028:	f003 0301 	and.w	r3, r3, #1
 801102c:	b2da      	uxtb	r2, r3
 801102e:	7a3b      	ldrb	r3, [r7, #8]
 8011030:	f362 0341 	bfi	r3, r2, #1, #1
 8011034:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8011036:	f107 0208 	add.w	r2, r7, #8
 801103a:	2301      	movs	r3, #1
 801103c:	2110      	movs	r1, #16
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f7ff ffaa 	bl	8010f98 <lps22hh_write_reg>
 8011044:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8011046:	68fb      	ldr	r3, [r7, #12]
}
 8011048:	4618      	mov	r0, r3
 801104a:	3710      	adds	r7, #16
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(const stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b086      	sub	sp, #24
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	460b      	mov	r3, r1
 801105a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 801105c:	f107 0210 	add.w	r2, r7, #16
 8011060:	2301      	movs	r3, #1
 8011062:	2110      	movs	r1, #16
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f7ff ff79 	bl	8010f5c <lps22hh_read_reg>
 801106a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 801106c:	697b      	ldr	r3, [r7, #20]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d107      	bne.n	8011082 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8011072:	f107 020c 	add.w	r2, r7, #12
 8011076:	2301      	movs	r3, #1
 8011078:	2111      	movs	r1, #17
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f7ff ff6e 	bl	8010f5c <lps22hh_read_reg>
 8011080:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d10f      	bne.n	80110a8 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8011088:	78fb      	ldrb	r3, [r7, #3]
 801108a:	f003 0307 	and.w	r3, r3, #7
 801108e:	b2da      	uxtb	r2, r3
 8011090:	7c3b      	ldrb	r3, [r7, #16]
 8011092:	f362 1306 	bfi	r3, r2, #4, #3
 8011096:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8011098:	f107 0210 	add.w	r2, r7, #16
 801109c:	2301      	movs	r3, #1
 801109e:	2110      	movs	r1, #16
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f7ff ff79 	bl	8010f98 <lps22hh_write_reg>
 80110a6:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80110a8:	697b      	ldr	r3, [r7, #20]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d119      	bne.n	80110e2 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80110ae:	78fb      	ldrb	r3, [r7, #3]
 80110b0:	091b      	lsrs	r3, r3, #4
 80110b2:	f003 0301 	and.w	r3, r3, #1
 80110b6:	b2da      	uxtb	r2, r3
 80110b8:	7b3b      	ldrb	r3, [r7, #12]
 80110ba:	f362 0341 	bfi	r3, r2, #1, #1
 80110be:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80110c0:	78fb      	ldrb	r3, [r7, #3]
 80110c2:	08db      	lsrs	r3, r3, #3
 80110c4:	f003 0301 	and.w	r3, r3, #1
 80110c8:	b2da      	uxtb	r2, r3
 80110ca:	7b3b      	ldrb	r3, [r7, #12]
 80110cc:	f362 0300 	bfi	r3, r2, #0, #1
 80110d0:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80110d2:	f107 020c 	add.w	r2, r7, #12
 80110d6:	2301      	movs	r3, #1
 80110d8:	2111      	movs	r1, #17
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f7ff ff5c 	bl	8010f98 <lps22hh_write_reg>
 80110e0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 80110e2:	697b      	ldr	r3, [r7, #20]
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3718      	adds	r7, #24
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 80110f6:	f107 0208 	add.w	r2, r7, #8
 80110fa:	2303      	movs	r3, #3
 80110fc:	2128      	movs	r1, #40	@ 0x28
 80110fe:	6878      	ldr	r0, [r7, #4]
 8011100:	f7ff ff2c 	bl	8010f5c <lps22hh_read_reg>
 8011104:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 8011106:	7abb      	ldrb	r3, [r7, #10]
 8011108:	461a      	mov	r2, r3
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	021b      	lsls	r3, r3, #8
 8011114:	7a7a      	ldrb	r2, [r7, #9]
 8011116:	441a      	add	r2, r3
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	021b      	lsls	r3, r3, #8
 8011122:	7a3a      	ldrb	r2, [r7, #8]
 8011124:	441a      	add	r2, r3
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 801112a:	683b      	ldr	r3, [r7, #0]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	021a      	lsls	r2, r3, #8
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	601a      	str	r2, [r3, #0]

  return ret;
 8011134:	68fb      	ldr	r3, [r7, #12]
}
 8011136:	4618      	mov	r0, r3
 8011138:	3710      	adds	r7, #16
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 801113e:	b580      	push	{r7, lr}
 8011140:	b084      	sub	sp, #16
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
 8011146:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8011148:	2301      	movs	r3, #1
 801114a:	683a      	ldr	r2, [r7, #0]
 801114c:	210f      	movs	r1, #15
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	f7ff ff04 	bl	8010f5c <lps22hh_read_reg>
 8011154:	60f8      	str	r0, [r7, #12]

  return ret;
 8011156:	68fb      	ldr	r3, [r7, #12]
}
 8011158:	4618      	mov	r0, r3
 801115a:	3710      	adds	r7, #16
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	460b      	mov	r3, r1
 801116a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 801116c:	f107 0208 	add.w	r2, r7, #8
 8011170:	2301      	movs	r3, #1
 8011172:	2111      	movs	r1, #17
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f7ff fef1 	bl	8010f5c <lps22hh_read_reg>
 801117a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d10f      	bne.n	80111a2 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 8011182:	78fb      	ldrb	r3, [r7, #3]
 8011184:	f003 0301 	and.w	r3, r3, #1
 8011188:	b2da      	uxtb	r2, r3
 801118a:	7a3b      	ldrb	r3, [r7, #8]
 801118c:	f362 0382 	bfi	r3, r2, #2, #1
 8011190:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8011192:	f107 0208 	add.w	r2, r7, #8
 8011196:	2301      	movs	r3, #1
 8011198:	2111      	movs	r1, #17
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f7ff fefc 	bl	8010f98 <lps22hh_write_reg>
 80111a0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80111a2:	68fb      	ldr	r3, [r7, #12]
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3710      	adds	r7, #16
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
 80111b4:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80111b6:	f107 0208 	add.w	r2, r7, #8
 80111ba:	2301      	movs	r3, #1
 80111bc:	2111      	movs	r1, #17
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f7ff fecc 	bl	8010f5c <lps22hh_read_reg>
 80111c4:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 80111c6:	7a3b      	ldrb	r3, [r7, #8]
 80111c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	461a      	mov	r2, r3
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	701a      	strb	r2, [r3, #0]

  return ret;
 80111d4:	68fb      	ldr	r3, [r7, #12]
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3710      	adds	r7, #16
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
	...

080111e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80111e4:	4904      	ldr	r1, [pc, #16]	@ (80111f8 <MX_FATFS_Init+0x18>)
 80111e6:	4805      	ldr	r0, [pc, #20]	@ (80111fc <MX_FATFS_Init+0x1c>)
 80111e8:	f002 fdfa 	bl	8013de0 <FATFS_LinkDriver>
 80111ec:	4603      	mov	r3, r0
 80111ee:	461a      	mov	r2, r3
 80111f0:	4b03      	ldr	r3, [pc, #12]	@ (8011200 <MX_FATFS_Init+0x20>)
 80111f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80111f4:	bf00      	nop
 80111f6:	bd80      	pop	{r7, pc}
 80111f8:	200065ac 	.word	0x200065ac
 80111fc:	0801ad64 	.word	0x0801ad64
 8011200:	200065a8 	.word	0x200065a8

08011204 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8011204:	b480      	push	{r7}
 8011206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8011208:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801120a:	4618      	mov	r0, r3
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801121a:	2300      	movs	r3, #0
 801121c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801121e:	f000 f888 	bl	8011332 <BSP_SD_IsDetected>
 8011222:	4603      	mov	r3, r0
 8011224:	2b01      	cmp	r3, #1
 8011226:	d001      	beq.n	801122c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8011228:	2302      	movs	r3, #2
 801122a:	e005      	b.n	8011238 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 801122c:	4804      	ldr	r0, [pc, #16]	@ (8011240 <BSP_SD_Init+0x2c>)
 801122e:	f7fb fe6d 	bl	800cf0c <HAL_SD_Init>
 8011232:	4603      	mov	r3, r0
 8011234:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8011236:	79fb      	ldrb	r3, [r7, #7]
}
 8011238:	4618      	mov	r0, r3
 801123a:	3708      	adds	r7, #8
 801123c:	46bd      	mov	sp, r7
 801123e:	bd80      	pop	{r7, pc}
 8011240:	20005ee8 	.word	0x20005ee8

08011244 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011244:	b580      	push	{r7, lr}
 8011246:	b086      	sub	sp, #24
 8011248:	af00      	add	r7, sp, #0
 801124a:	60f8      	str	r0, [r7, #12]
 801124c:	60b9      	str	r1, [r7, #8]
 801124e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011250:	2300      	movs	r3, #0
 8011252:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	68ba      	ldr	r2, [r7, #8]
 8011258:	68f9      	ldr	r1, [r7, #12]
 801125a:	4806      	ldr	r0, [pc, #24]	@ (8011274 <BSP_SD_ReadBlocks_DMA+0x30>)
 801125c:	f7fb ff0e 	bl	800d07c <HAL_SD_ReadBlocks_DMA>
 8011260:	4603      	mov	r3, r0
 8011262:	2b00      	cmp	r3, #0
 8011264:	d001      	beq.n	801126a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011266:	2301      	movs	r3, #1
 8011268:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801126a:	7dfb      	ldrb	r3, [r7, #23]
}
 801126c:	4618      	mov	r0, r3
 801126e:	3718      	adds	r7, #24
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}
 8011274:	20005ee8 	.word	0x20005ee8

08011278 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011278:	b580      	push	{r7, lr}
 801127a:	b086      	sub	sp, #24
 801127c:	af00      	add	r7, sp, #0
 801127e:	60f8      	str	r0, [r7, #12]
 8011280:	60b9      	str	r1, [r7, #8]
 8011282:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011284:	2300      	movs	r3, #0
 8011286:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	68ba      	ldr	r2, [r7, #8]
 801128c:	68f9      	ldr	r1, [r7, #12]
 801128e:	4806      	ldr	r0, [pc, #24]	@ (80112a8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011290:	f7fb ffd6 	bl	800d240 <HAL_SD_WriteBlocks_DMA>
 8011294:	4603      	mov	r3, r0
 8011296:	2b00      	cmp	r3, #0
 8011298:	d001      	beq.n	801129e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801129a:	2301      	movs	r3, #1
 801129c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801129e:	7dfb      	ldrb	r3, [r7, #23]
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3718      	adds	r7, #24
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}
 80112a8:	20005ee8 	.word	0x20005ee8

080112ac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80112b0:	4805      	ldr	r0, [pc, #20]	@ (80112c8 <BSP_SD_GetCardState+0x1c>)
 80112b2:	f7fc fbfb 	bl	800daac <HAL_SD_GetCardState>
 80112b6:	4603      	mov	r3, r0
 80112b8:	2b04      	cmp	r3, #4
 80112ba:	bf14      	ite	ne
 80112bc:	2301      	movne	r3, #1
 80112be:	2300      	moveq	r3, #0
 80112c0:	b2db      	uxtb	r3, r3
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	bd80      	pop	{r7, pc}
 80112c6:	bf00      	nop
 80112c8:	20005ee8 	.word	0x20005ee8

080112cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80112d4:	6879      	ldr	r1, [r7, #4]
 80112d6:	4803      	ldr	r0, [pc, #12]	@ (80112e4 <BSP_SD_GetCardInfo+0x18>)
 80112d8:	f7fc fbbc 	bl	800da54 <HAL_SD_GetCardInfo>
}
 80112dc:	bf00      	nop
 80112de:	3708      	adds	r7, #8
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}
 80112e4:	20005ee8 	.word	0x20005ee8

080112e8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80112f0:	f000 f818 	bl	8011324 <BSP_SD_AbortCallback>
}
 80112f4:	bf00      	nop
 80112f6:	3708      	adds	r7, #8
 80112f8:	46bd      	mov	sp, r7
 80112fa:	bd80      	pop	{r7, pc}

080112fc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b082      	sub	sp, #8
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011304:	f000 f9a8 	bl	8011658 <BSP_SD_WriteCpltCallback>
}
 8011308:	bf00      	nop
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011318:	f000 f9aa 	bl	8011670 <BSP_SD_ReadCpltCallback>
}
 801131c:	bf00      	nop
 801131e:	3708      	adds	r7, #8
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011324:	b480      	push	{r7}
 8011326:	af00      	add	r7, sp, #0

}
 8011328:	bf00      	nop
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr

08011332 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011332:	b580      	push	{r7, lr}
 8011334:	b082      	sub	sp, #8
 8011336:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011338:	2301      	movs	r3, #1
 801133a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801133c:	f000 f80c 	bl	8011358 <BSP_PlatformIsDetected>
 8011340:	4603      	mov	r3, r0
 8011342:	2b00      	cmp	r3, #0
 8011344:	d101      	bne.n	801134a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011346:	2300      	movs	r3, #0
 8011348:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801134a:	79fb      	ldrb	r3, [r7, #7]
 801134c:	b2db      	uxtb	r3, r3
}
 801134e:	4618      	mov	r0, r3
 8011350:	3708      	adds	r7, #8
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
	...

08011358 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011358:	b580      	push	{r7, lr}
 801135a:	b082      	sub	sp, #8
 801135c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801135e:	2301      	movs	r3, #1
 8011360:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011362:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8011366:	4806      	ldr	r0, [pc, #24]	@ (8011380 <BSP_PlatformIsDetected+0x28>)
 8011368:	f7f8 fe32 	bl	8009fd0 <HAL_GPIO_ReadPin>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d001      	beq.n	8011376 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011372:	2300      	movs	r3, #0
 8011374:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011376:	79fb      	ldrb	r3, [r7, #7]
}
 8011378:	4618      	mov	r0, r3
 801137a:	3708      	adds	r7, #8
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}
 8011380:	40020800 	.word	0x40020800

08011384 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801138c:	f7f6 ff68 	bl	8008260 <HAL_GetTick>
 8011390:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011392:	e006      	b.n	80113a2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011394:	f7ff ff8a 	bl	80112ac <BSP_SD_GetCardState>
 8011398:	4603      	mov	r3, r0
 801139a:	2b00      	cmp	r3, #0
 801139c:	d101      	bne.n	80113a2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801139e:	2300      	movs	r3, #0
 80113a0:	e009      	b.n	80113b6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80113a2:	f7f6 ff5d 	bl	8008260 <HAL_GetTick>
 80113a6:	4602      	mov	r2, r0
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	1ad3      	subs	r3, r2, r3
 80113ac:	687a      	ldr	r2, [r7, #4]
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d8f0      	bhi.n	8011394 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80113b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3710      	adds	r7, #16
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
	...

080113c0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	4603      	mov	r3, r0
 80113c8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80113ca:	4b0b      	ldr	r3, [pc, #44]	@ (80113f8 <SD_CheckStatus+0x38>)
 80113cc:	2201      	movs	r2, #1
 80113ce:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80113d0:	f7ff ff6c 	bl	80112ac <BSP_SD_GetCardState>
 80113d4:	4603      	mov	r3, r0
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d107      	bne.n	80113ea <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80113da:	4b07      	ldr	r3, [pc, #28]	@ (80113f8 <SD_CheckStatus+0x38>)
 80113dc:	781b      	ldrb	r3, [r3, #0]
 80113de:	b2db      	uxtb	r3, r3
 80113e0:	f023 0301 	bic.w	r3, r3, #1
 80113e4:	b2da      	uxtb	r2, r3
 80113e6:	4b04      	ldr	r3, [pc, #16]	@ (80113f8 <SD_CheckStatus+0x38>)
 80113e8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80113ea:	4b03      	ldr	r3, [pc, #12]	@ (80113f8 <SD_CheckStatus+0x38>)
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	b2db      	uxtb	r3, r3
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3708      	adds	r7, #8
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}
 80113f8:	20004f25 	.word	0x20004f25

080113fc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b082      	sub	sp, #8
 8011400:	af00      	add	r7, sp, #0
 8011402:	4603      	mov	r3, r0
 8011404:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011406:	f7ff ff05 	bl	8011214 <BSP_SD_Init>
 801140a:	4603      	mov	r3, r0
 801140c:	2b00      	cmp	r3, #0
 801140e:	d107      	bne.n	8011420 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011410:	79fb      	ldrb	r3, [r7, #7]
 8011412:	4618      	mov	r0, r3
 8011414:	f7ff ffd4 	bl	80113c0 <SD_CheckStatus>
 8011418:	4603      	mov	r3, r0
 801141a:	461a      	mov	r2, r3
 801141c:	4b04      	ldr	r3, [pc, #16]	@ (8011430 <SD_initialize+0x34>)
 801141e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011420:	4b03      	ldr	r3, [pc, #12]	@ (8011430 <SD_initialize+0x34>)
 8011422:	781b      	ldrb	r3, [r3, #0]
 8011424:	b2db      	uxtb	r3, r3
}
 8011426:	4618      	mov	r0, r3
 8011428:	3708      	adds	r7, #8
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	20004f25 	.word	0x20004f25

08011434 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b082      	sub	sp, #8
 8011438:	af00      	add	r7, sp, #0
 801143a:	4603      	mov	r3, r0
 801143c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801143e:	79fb      	ldrb	r3, [r7, #7]
 8011440:	4618      	mov	r0, r3
 8011442:	f7ff ffbd 	bl	80113c0 <SD_CheckStatus>
 8011446:	4603      	mov	r3, r0
}
 8011448:	4618      	mov	r0, r3
 801144a:	3708      	adds	r7, #8
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}

08011450 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b086      	sub	sp, #24
 8011454:	af00      	add	r7, sp, #0
 8011456:	60b9      	str	r1, [r7, #8]
 8011458:	607a      	str	r2, [r7, #4]
 801145a:	603b      	str	r3, [r7, #0]
 801145c:	4603      	mov	r3, r0
 801145e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011460:	2301      	movs	r3, #1
 8011462:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011464:	f247 5030 	movw	r0, #30000	@ 0x7530
 8011468:	f7ff ff8c 	bl	8011384 <SD_CheckStatusWithTimeout>
 801146c:	4603      	mov	r3, r0
 801146e:	2b00      	cmp	r3, #0
 8011470:	da01      	bge.n	8011476 <SD_read+0x26>
  {
    return res;
 8011472:	7dfb      	ldrb	r3, [r7, #23]
 8011474:	e03b      	b.n	80114ee <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011476:	683a      	ldr	r2, [r7, #0]
 8011478:	6879      	ldr	r1, [r7, #4]
 801147a:	68b8      	ldr	r0, [r7, #8]
 801147c:	f7ff fee2 	bl	8011244 <BSP_SD_ReadBlocks_DMA>
 8011480:	4603      	mov	r3, r0
 8011482:	2b00      	cmp	r3, #0
 8011484:	d132      	bne.n	80114ec <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011486:	4b1c      	ldr	r3, [pc, #112]	@ (80114f8 <SD_read+0xa8>)
 8011488:	2200      	movs	r2, #0
 801148a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801148c:	f7f6 fee8 	bl	8008260 <HAL_GetTick>
 8011490:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011492:	bf00      	nop
 8011494:	4b18      	ldr	r3, [pc, #96]	@ (80114f8 <SD_read+0xa8>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d108      	bne.n	80114ae <SD_read+0x5e>
 801149c:	f7f6 fee0 	bl	8008260 <HAL_GetTick>
 80114a0:	4602      	mov	r2, r0
 80114a2:	693b      	ldr	r3, [r7, #16]
 80114a4:	1ad3      	subs	r3, r2, r3
 80114a6:	f247 522f 	movw	r2, #29999	@ 0x752f
 80114aa:	4293      	cmp	r3, r2
 80114ac:	d9f2      	bls.n	8011494 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80114ae:	4b12      	ldr	r3, [pc, #72]	@ (80114f8 <SD_read+0xa8>)
 80114b0:	681b      	ldr	r3, [r3, #0]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d102      	bne.n	80114bc <SD_read+0x6c>
      {
        res = RES_ERROR;
 80114b6:	2301      	movs	r3, #1
 80114b8:	75fb      	strb	r3, [r7, #23]
 80114ba:	e017      	b.n	80114ec <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80114bc:	4b0e      	ldr	r3, [pc, #56]	@ (80114f8 <SD_read+0xa8>)
 80114be:	2200      	movs	r2, #0
 80114c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80114c2:	f7f6 fecd 	bl	8008260 <HAL_GetTick>
 80114c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80114c8:	e007      	b.n	80114da <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80114ca:	f7ff feef 	bl	80112ac <BSP_SD_GetCardState>
 80114ce:	4603      	mov	r3, r0
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d102      	bne.n	80114da <SD_read+0x8a>
          {
            res = RES_OK;
 80114d4:	2300      	movs	r3, #0
 80114d6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80114d8:	e008      	b.n	80114ec <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80114da:	f7f6 fec1 	bl	8008260 <HAL_GetTick>
 80114de:	4602      	mov	r2, r0
 80114e0:	693b      	ldr	r3, [r7, #16]
 80114e2:	1ad3      	subs	r3, r2, r3
 80114e4:	f247 522f 	movw	r2, #29999	@ 0x752f
 80114e8:	4293      	cmp	r3, r2
 80114ea:	d9ee      	bls.n	80114ca <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80114ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80114ee:	4618      	mov	r0, r3
 80114f0:	3718      	adds	r7, #24
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}
 80114f6:	bf00      	nop
 80114f8:	200065b4 	.word	0x200065b4

080114fc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80114fc:	b580      	push	{r7, lr}
 80114fe:	b086      	sub	sp, #24
 8011500:	af00      	add	r7, sp, #0
 8011502:	60b9      	str	r1, [r7, #8]
 8011504:	607a      	str	r2, [r7, #4]
 8011506:	603b      	str	r3, [r7, #0]
 8011508:	4603      	mov	r3, r0
 801150a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801150c:	2301      	movs	r3, #1
 801150e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011510:	4b24      	ldr	r3, [pc, #144]	@ (80115a4 <SD_write+0xa8>)
 8011512:	2200      	movs	r2, #0
 8011514:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011516:	f247 5030 	movw	r0, #30000	@ 0x7530
 801151a:	f7ff ff33 	bl	8011384 <SD_CheckStatusWithTimeout>
 801151e:	4603      	mov	r3, r0
 8011520:	2b00      	cmp	r3, #0
 8011522:	da01      	bge.n	8011528 <SD_write+0x2c>
  {
    return res;
 8011524:	7dfb      	ldrb	r3, [r7, #23]
 8011526:	e038      	b.n	801159a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011528:	683a      	ldr	r2, [r7, #0]
 801152a:	6879      	ldr	r1, [r7, #4]
 801152c:	68b8      	ldr	r0, [r7, #8]
 801152e:	f7ff fea3 	bl	8011278 <BSP_SD_WriteBlocks_DMA>
 8011532:	4603      	mov	r3, r0
 8011534:	2b00      	cmp	r3, #0
 8011536:	d12f      	bne.n	8011598 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011538:	f7f6 fe92 	bl	8008260 <HAL_GetTick>
 801153c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801153e:	bf00      	nop
 8011540:	4b18      	ldr	r3, [pc, #96]	@ (80115a4 <SD_write+0xa8>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d108      	bne.n	801155a <SD_write+0x5e>
 8011548:	f7f6 fe8a 	bl	8008260 <HAL_GetTick>
 801154c:	4602      	mov	r2, r0
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	1ad3      	subs	r3, r2, r3
 8011552:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011556:	4293      	cmp	r3, r2
 8011558:	d9f2      	bls.n	8011540 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801155a:	4b12      	ldr	r3, [pc, #72]	@ (80115a4 <SD_write+0xa8>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d102      	bne.n	8011568 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011562:	2301      	movs	r3, #1
 8011564:	75fb      	strb	r3, [r7, #23]
 8011566:	e017      	b.n	8011598 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011568:	4b0e      	ldr	r3, [pc, #56]	@ (80115a4 <SD_write+0xa8>)
 801156a:	2200      	movs	r2, #0
 801156c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801156e:	f7f6 fe77 	bl	8008260 <HAL_GetTick>
 8011572:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011574:	e007      	b.n	8011586 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011576:	f7ff fe99 	bl	80112ac <BSP_SD_GetCardState>
 801157a:	4603      	mov	r3, r0
 801157c:	2b00      	cmp	r3, #0
 801157e:	d102      	bne.n	8011586 <SD_write+0x8a>
          {
            res = RES_OK;
 8011580:	2300      	movs	r3, #0
 8011582:	75fb      	strb	r3, [r7, #23]
            break;
 8011584:	e008      	b.n	8011598 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011586:	f7f6 fe6b 	bl	8008260 <HAL_GetTick>
 801158a:	4602      	mov	r2, r0
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	1ad3      	subs	r3, r2, r3
 8011590:	f247 522f 	movw	r2, #29999	@ 0x752f
 8011594:	4293      	cmp	r3, r2
 8011596:	d9ee      	bls.n	8011576 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011598:	7dfb      	ldrb	r3, [r7, #23]
}
 801159a:	4618      	mov	r0, r3
 801159c:	3718      	adds	r7, #24
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	bf00      	nop
 80115a4:	200065b0 	.word	0x200065b0

080115a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b08c      	sub	sp, #48	@ 0x30
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	4603      	mov	r3, r0
 80115b0:	603a      	str	r2, [r7, #0]
 80115b2:	71fb      	strb	r3, [r7, #7]
 80115b4:	460b      	mov	r3, r1
 80115b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80115b8:	2301      	movs	r3, #1
 80115ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80115be:	4b25      	ldr	r3, [pc, #148]	@ (8011654 <SD_ioctl+0xac>)
 80115c0:	781b      	ldrb	r3, [r3, #0]
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	f003 0301 	and.w	r3, r3, #1
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d001      	beq.n	80115d0 <SD_ioctl+0x28>
 80115cc:	2303      	movs	r3, #3
 80115ce:	e03c      	b.n	801164a <SD_ioctl+0xa2>

  switch (cmd)
 80115d0:	79bb      	ldrb	r3, [r7, #6]
 80115d2:	2b03      	cmp	r3, #3
 80115d4:	d834      	bhi.n	8011640 <SD_ioctl+0x98>
 80115d6:	a201      	add	r2, pc, #4	@ (adr r2, 80115dc <SD_ioctl+0x34>)
 80115d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115dc:	080115ed 	.word	0x080115ed
 80115e0:	080115f5 	.word	0x080115f5
 80115e4:	0801160d 	.word	0x0801160d
 80115e8:	08011627 	.word	0x08011627
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80115ec:	2300      	movs	r3, #0
 80115ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80115f2:	e028      	b.n	8011646 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80115f4:	f107 030c 	add.w	r3, r7, #12
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7ff fe67 	bl	80112cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80115fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011604:	2300      	movs	r3, #0
 8011606:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801160a:	e01c      	b.n	8011646 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801160c:	f107 030c 	add.w	r3, r7, #12
 8011610:	4618      	mov	r0, r3
 8011612:	f7ff fe5b 	bl	80112cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011618:	b29a      	uxth	r2, r3
 801161a:	683b      	ldr	r3, [r7, #0]
 801161c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801161e:	2300      	movs	r3, #0
 8011620:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8011624:	e00f      	b.n	8011646 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011626:	f107 030c 	add.w	r3, r7, #12
 801162a:	4618      	mov	r0, r3
 801162c:	f7ff fe4e 	bl	80112cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011632:	0a5a      	lsrs	r2, r3, #9
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011638:	2300      	movs	r3, #0
 801163a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 801163e:	e002      	b.n	8011646 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011640:	2304      	movs	r3, #4
 8011642:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8011646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801164a:	4618      	mov	r0, r3
 801164c:	3730      	adds	r7, #48	@ 0x30
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	20004f25 	.word	0x20004f25

08011658 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011658:	b480      	push	{r7}
 801165a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 801165c:	4b03      	ldr	r3, [pc, #12]	@ (801166c <BSP_SD_WriteCpltCallback+0x14>)
 801165e:	2201      	movs	r2, #1
 8011660:	601a      	str	r2, [r3, #0]
}
 8011662:	bf00      	nop
 8011664:	46bd      	mov	sp, r7
 8011666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166a:	4770      	bx	lr
 801166c:	200065b0 	.word	0x200065b0

08011670 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011670:	b480      	push	{r7}
 8011672:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011674:	4b03      	ldr	r3, [pc, #12]	@ (8011684 <BSP_SD_ReadCpltCallback+0x14>)
 8011676:	2201      	movs	r2, #1
 8011678:	601a      	str	r2, [r3, #0]
}
 801167a:	bf00      	nop
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr
 8011684:	200065b4 	.word	0x200065b4

08011688 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b084      	sub	sp, #16
 801168c:	af00      	add	r7, sp, #0
 801168e:	4603      	mov	r3, r0
 8011690:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011692:	79fb      	ldrb	r3, [r7, #7]
 8011694:	4a08      	ldr	r2, [pc, #32]	@ (80116b8 <disk_status+0x30>)
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	4413      	add	r3, r2
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	685b      	ldr	r3, [r3, #4]
 801169e:	79fa      	ldrb	r2, [r7, #7]
 80116a0:	4905      	ldr	r1, [pc, #20]	@ (80116b8 <disk_status+0x30>)
 80116a2:	440a      	add	r2, r1
 80116a4:	7a12      	ldrb	r2, [r2, #8]
 80116a6:	4610      	mov	r0, r2
 80116a8:	4798      	blx	r3
 80116aa:	4603      	mov	r3, r0
 80116ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 80116ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3710      	adds	r7, #16
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	200065e0 	.word	0x200065e0

080116bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	4603      	mov	r3, r0
 80116c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80116c6:	2300      	movs	r3, #0
 80116c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80116ca:	79fb      	ldrb	r3, [r7, #7]
 80116cc:	4a0d      	ldr	r2, [pc, #52]	@ (8011704 <disk_initialize+0x48>)
 80116ce:	5cd3      	ldrb	r3, [r2, r3]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d111      	bne.n	80116f8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80116d4:	79fb      	ldrb	r3, [r7, #7]
 80116d6:	4a0b      	ldr	r2, [pc, #44]	@ (8011704 <disk_initialize+0x48>)
 80116d8:	2101      	movs	r1, #1
 80116da:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80116dc:	79fb      	ldrb	r3, [r7, #7]
 80116de:	4a09      	ldr	r2, [pc, #36]	@ (8011704 <disk_initialize+0x48>)
 80116e0:	009b      	lsls	r3, r3, #2
 80116e2:	4413      	add	r3, r2
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	79fa      	ldrb	r2, [r7, #7]
 80116ea:	4906      	ldr	r1, [pc, #24]	@ (8011704 <disk_initialize+0x48>)
 80116ec:	440a      	add	r2, r1
 80116ee:	7a12      	ldrb	r2, [r2, #8]
 80116f0:	4610      	mov	r0, r2
 80116f2:	4798      	blx	r3
 80116f4:	4603      	mov	r3, r0
 80116f6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80116f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	200065e0 	.word	0x200065e0

08011708 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011708:	b590      	push	{r4, r7, lr}
 801170a:	b087      	sub	sp, #28
 801170c:	af00      	add	r7, sp, #0
 801170e:	60b9      	str	r1, [r7, #8]
 8011710:	607a      	str	r2, [r7, #4]
 8011712:	603b      	str	r3, [r7, #0]
 8011714:	4603      	mov	r3, r0
 8011716:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011718:	7bfb      	ldrb	r3, [r7, #15]
 801171a:	4a0a      	ldr	r2, [pc, #40]	@ (8011744 <disk_read+0x3c>)
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	4413      	add	r3, r2
 8011720:	685b      	ldr	r3, [r3, #4]
 8011722:	689c      	ldr	r4, [r3, #8]
 8011724:	7bfb      	ldrb	r3, [r7, #15]
 8011726:	4a07      	ldr	r2, [pc, #28]	@ (8011744 <disk_read+0x3c>)
 8011728:	4413      	add	r3, r2
 801172a:	7a18      	ldrb	r0, [r3, #8]
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	687a      	ldr	r2, [r7, #4]
 8011730:	68b9      	ldr	r1, [r7, #8]
 8011732:	47a0      	blx	r4
 8011734:	4603      	mov	r3, r0
 8011736:	75fb      	strb	r3, [r7, #23]
  return res;
 8011738:	7dfb      	ldrb	r3, [r7, #23]
}
 801173a:	4618      	mov	r0, r3
 801173c:	371c      	adds	r7, #28
 801173e:	46bd      	mov	sp, r7
 8011740:	bd90      	pop	{r4, r7, pc}
 8011742:	bf00      	nop
 8011744:	200065e0 	.word	0x200065e0

08011748 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011748:	b590      	push	{r4, r7, lr}
 801174a:	b087      	sub	sp, #28
 801174c:	af00      	add	r7, sp, #0
 801174e:	60b9      	str	r1, [r7, #8]
 8011750:	607a      	str	r2, [r7, #4]
 8011752:	603b      	str	r3, [r7, #0]
 8011754:	4603      	mov	r3, r0
 8011756:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011758:	7bfb      	ldrb	r3, [r7, #15]
 801175a:	4a0a      	ldr	r2, [pc, #40]	@ (8011784 <disk_write+0x3c>)
 801175c:	009b      	lsls	r3, r3, #2
 801175e:	4413      	add	r3, r2
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	68dc      	ldr	r4, [r3, #12]
 8011764:	7bfb      	ldrb	r3, [r7, #15]
 8011766:	4a07      	ldr	r2, [pc, #28]	@ (8011784 <disk_write+0x3c>)
 8011768:	4413      	add	r3, r2
 801176a:	7a18      	ldrb	r0, [r3, #8]
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	687a      	ldr	r2, [r7, #4]
 8011770:	68b9      	ldr	r1, [r7, #8]
 8011772:	47a0      	blx	r4
 8011774:	4603      	mov	r3, r0
 8011776:	75fb      	strb	r3, [r7, #23]
  return res;
 8011778:	7dfb      	ldrb	r3, [r7, #23]
}
 801177a:	4618      	mov	r0, r3
 801177c:	371c      	adds	r7, #28
 801177e:	46bd      	mov	sp, r7
 8011780:	bd90      	pop	{r4, r7, pc}
 8011782:	bf00      	nop
 8011784:	200065e0 	.word	0x200065e0

08011788 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b084      	sub	sp, #16
 801178c:	af00      	add	r7, sp, #0
 801178e:	4603      	mov	r3, r0
 8011790:	603a      	str	r2, [r7, #0]
 8011792:	71fb      	strb	r3, [r7, #7]
 8011794:	460b      	mov	r3, r1
 8011796:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011798:	79fb      	ldrb	r3, [r7, #7]
 801179a:	4a09      	ldr	r2, [pc, #36]	@ (80117c0 <disk_ioctl+0x38>)
 801179c:	009b      	lsls	r3, r3, #2
 801179e:	4413      	add	r3, r2
 80117a0:	685b      	ldr	r3, [r3, #4]
 80117a2:	691b      	ldr	r3, [r3, #16]
 80117a4:	79fa      	ldrb	r2, [r7, #7]
 80117a6:	4906      	ldr	r1, [pc, #24]	@ (80117c0 <disk_ioctl+0x38>)
 80117a8:	440a      	add	r2, r1
 80117aa:	7a10      	ldrb	r0, [r2, #8]
 80117ac:	79b9      	ldrb	r1, [r7, #6]
 80117ae:	683a      	ldr	r2, [r7, #0]
 80117b0:	4798      	blx	r3
 80117b2:	4603      	mov	r3, r0
 80117b4:	73fb      	strb	r3, [r7, #15]
  return res;
 80117b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3710      	adds	r7, #16
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}
 80117c0:	200065e0 	.word	0x200065e0

080117c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80117c4:	b480      	push	{r7}
 80117c6:	b085      	sub	sp, #20
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	3301      	adds	r3, #1
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80117d4:	89fb      	ldrh	r3, [r7, #14]
 80117d6:	021b      	lsls	r3, r3, #8
 80117d8:	b21a      	sxth	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	781b      	ldrb	r3, [r3, #0]
 80117de:	b21b      	sxth	r3, r3
 80117e0:	4313      	orrs	r3, r2
 80117e2:	b21b      	sxth	r3, r3
 80117e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80117e6:	89fb      	ldrh	r3, [r7, #14]
}
 80117e8:	4618      	mov	r0, r3
 80117ea:	3714      	adds	r7, #20
 80117ec:	46bd      	mov	sp, r7
 80117ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f2:	4770      	bx	lr

080117f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80117f4:	b480      	push	{r7}
 80117f6:	b085      	sub	sp, #20
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	3303      	adds	r3, #3
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	021b      	lsls	r3, r3, #8
 8011808:	687a      	ldr	r2, [r7, #4]
 801180a:	3202      	adds	r2, #2
 801180c:	7812      	ldrb	r2, [r2, #0]
 801180e:	4313      	orrs	r3, r2
 8011810:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	021b      	lsls	r3, r3, #8
 8011816:	687a      	ldr	r2, [r7, #4]
 8011818:	3201      	adds	r2, #1
 801181a:	7812      	ldrb	r2, [r2, #0]
 801181c:	4313      	orrs	r3, r2
 801181e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	021b      	lsls	r3, r3, #8
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	7812      	ldrb	r2, [r2, #0]
 8011828:	4313      	orrs	r3, r2
 801182a:	60fb      	str	r3, [r7, #12]
	return rv;
 801182c:	68fb      	ldr	r3, [r7, #12]
}
 801182e:	4618      	mov	r0, r3
 8011830:	3714      	adds	r7, #20
 8011832:	46bd      	mov	sp, r7
 8011834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011838:	4770      	bx	lr

0801183a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801183a:	b480      	push	{r7}
 801183c:	b083      	sub	sp, #12
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]
 8011842:	460b      	mov	r3, r1
 8011844:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	1c5a      	adds	r2, r3, #1
 801184a:	607a      	str	r2, [r7, #4]
 801184c:	887a      	ldrh	r2, [r7, #2]
 801184e:	b2d2      	uxtb	r2, r2
 8011850:	701a      	strb	r2, [r3, #0]
 8011852:	887b      	ldrh	r3, [r7, #2]
 8011854:	0a1b      	lsrs	r3, r3, #8
 8011856:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	1c5a      	adds	r2, r3, #1
 801185c:	607a      	str	r2, [r7, #4]
 801185e:	887a      	ldrh	r2, [r7, #2]
 8011860:	b2d2      	uxtb	r2, r2
 8011862:	701a      	strb	r2, [r3, #0]
}
 8011864:	bf00      	nop
 8011866:	370c      	adds	r7, #12
 8011868:	46bd      	mov	sp, r7
 801186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186e:	4770      	bx	lr

08011870 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011870:	b480      	push	{r7}
 8011872:	b083      	sub	sp, #12
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	1c5a      	adds	r2, r3, #1
 801187e:	607a      	str	r2, [r7, #4]
 8011880:	683a      	ldr	r2, [r7, #0]
 8011882:	b2d2      	uxtb	r2, r2
 8011884:	701a      	strb	r2, [r3, #0]
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	0a1b      	lsrs	r3, r3, #8
 801188a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	1c5a      	adds	r2, r3, #1
 8011890:	607a      	str	r2, [r7, #4]
 8011892:	683a      	ldr	r2, [r7, #0]
 8011894:	b2d2      	uxtb	r2, r2
 8011896:	701a      	strb	r2, [r3, #0]
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	0a1b      	lsrs	r3, r3, #8
 801189c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	1c5a      	adds	r2, r3, #1
 80118a2:	607a      	str	r2, [r7, #4]
 80118a4:	683a      	ldr	r2, [r7, #0]
 80118a6:	b2d2      	uxtb	r2, r2
 80118a8:	701a      	strb	r2, [r3, #0]
 80118aa:	683b      	ldr	r3, [r7, #0]
 80118ac:	0a1b      	lsrs	r3, r3, #8
 80118ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	1c5a      	adds	r2, r3, #1
 80118b4:	607a      	str	r2, [r7, #4]
 80118b6:	683a      	ldr	r2, [r7, #0]
 80118b8:	b2d2      	uxtb	r2, r2
 80118ba:	701a      	strb	r2, [r3, #0]
}
 80118bc:	bf00      	nop
 80118be:	370c      	adds	r7, #12
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr

080118c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80118c8:	b480      	push	{r7}
 80118ca:	b087      	sub	sp, #28
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	60f8      	str	r0, [r7, #12]
 80118d0:	60b9      	str	r1, [r7, #8]
 80118d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80118d8:	68bb      	ldr	r3, [r7, #8]
 80118da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d00d      	beq.n	80118fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80118e2:	693a      	ldr	r2, [r7, #16]
 80118e4:	1c53      	adds	r3, r2, #1
 80118e6:	613b      	str	r3, [r7, #16]
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	1c59      	adds	r1, r3, #1
 80118ec:	6179      	str	r1, [r7, #20]
 80118ee:	7812      	ldrb	r2, [r2, #0]
 80118f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	3b01      	subs	r3, #1
 80118f6:	607b      	str	r3, [r7, #4]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d1f1      	bne.n	80118e2 <mem_cpy+0x1a>
	}
}
 80118fe:	bf00      	nop
 8011900:	371c      	adds	r7, #28
 8011902:	46bd      	mov	sp, r7
 8011904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011908:	4770      	bx	lr

0801190a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801190a:	b480      	push	{r7}
 801190c:	b087      	sub	sp, #28
 801190e:	af00      	add	r7, sp, #0
 8011910:	60f8      	str	r0, [r7, #12]
 8011912:	60b9      	str	r1, [r7, #8]
 8011914:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	1c5a      	adds	r2, r3, #1
 801191e:	617a      	str	r2, [r7, #20]
 8011920:	68ba      	ldr	r2, [r7, #8]
 8011922:	b2d2      	uxtb	r2, r2
 8011924:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	3b01      	subs	r3, #1
 801192a:	607b      	str	r3, [r7, #4]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d1f3      	bne.n	801191a <mem_set+0x10>
}
 8011932:	bf00      	nop
 8011934:	bf00      	nop
 8011936:	371c      	adds	r7, #28
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr

08011940 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011940:	b480      	push	{r7}
 8011942:	b089      	sub	sp, #36	@ 0x24
 8011944:	af00      	add	r7, sp, #0
 8011946:	60f8      	str	r0, [r7, #12]
 8011948:	60b9      	str	r1, [r7, #8]
 801194a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	61fb      	str	r3, [r7, #28]
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011954:	2300      	movs	r3, #0
 8011956:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011958:	69fb      	ldr	r3, [r7, #28]
 801195a:	1c5a      	adds	r2, r3, #1
 801195c:	61fa      	str	r2, [r7, #28]
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	4619      	mov	r1, r3
 8011962:	69bb      	ldr	r3, [r7, #24]
 8011964:	1c5a      	adds	r2, r3, #1
 8011966:	61ba      	str	r2, [r7, #24]
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	1acb      	subs	r3, r1, r3
 801196c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	3b01      	subs	r3, #1
 8011972:	607b      	str	r3, [r7, #4]
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d002      	beq.n	8011980 <mem_cmp+0x40>
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d0eb      	beq.n	8011958 <mem_cmp+0x18>

	return r;
 8011980:	697b      	ldr	r3, [r7, #20]
}
 8011982:	4618      	mov	r0, r3
 8011984:	3724      	adds	r7, #36	@ 0x24
 8011986:	46bd      	mov	sp, r7
 8011988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198c:	4770      	bx	lr

0801198e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801198e:	b480      	push	{r7}
 8011990:	b083      	sub	sp, #12
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]
 8011996:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011998:	e002      	b.n	80119a0 <chk_chr+0x12>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	3301      	adds	r3, #1
 801199e:	607b      	str	r3, [r7, #4]
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d005      	beq.n	80119b4 <chk_chr+0x26>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	781b      	ldrb	r3, [r3, #0]
 80119ac:	461a      	mov	r2, r3
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	4293      	cmp	r3, r2
 80119b2:	d1f2      	bne.n	801199a <chk_chr+0xc>
	return *str;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	781b      	ldrb	r3, [r3, #0]
}
 80119b8:	4618      	mov	r0, r3
 80119ba:	370c      	adds	r7, #12
 80119bc:	46bd      	mov	sp, r7
 80119be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c2:	4770      	bx	lr

080119c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b085      	sub	sp, #20
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80119ce:	2300      	movs	r3, #0
 80119d0:	60bb      	str	r3, [r7, #8]
 80119d2:	68bb      	ldr	r3, [r7, #8]
 80119d4:	60fb      	str	r3, [r7, #12]
 80119d6:	e029      	b.n	8011a2c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80119d8:	4a27      	ldr	r2, [pc, #156]	@ (8011a78 <chk_lock+0xb4>)
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	011b      	lsls	r3, r3, #4
 80119de:	4413      	add	r3, r2
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d01d      	beq.n	8011a22 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80119e6:	4a24      	ldr	r2, [pc, #144]	@ (8011a78 <chk_lock+0xb4>)
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	011b      	lsls	r3, r3, #4
 80119ec:	4413      	add	r3, r2
 80119ee:	681a      	ldr	r2, [r3, #0]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d116      	bne.n	8011a26 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80119f8:	4a1f      	ldr	r2, [pc, #124]	@ (8011a78 <chk_lock+0xb4>)
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	011b      	lsls	r3, r3, #4
 80119fe:	4413      	add	r3, r2
 8011a00:	3304      	adds	r3, #4
 8011a02:	681a      	ldr	r2, [r3, #0]
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	d10c      	bne.n	8011a26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8011a78 <chk_lock+0xb4>)
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	011b      	lsls	r3, r3, #4
 8011a12:	4413      	add	r3, r2
 8011a14:	3308      	adds	r3, #8
 8011a16:	681a      	ldr	r2, [r3, #0]
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d102      	bne.n	8011a26 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011a20:	e007      	b.n	8011a32 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011a22:	2301      	movs	r3, #1
 8011a24:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	3301      	adds	r3, #1
 8011a2a:	60fb      	str	r3, [r7, #12]
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	2b01      	cmp	r3, #1
 8011a30:	d9d2      	bls.n	80119d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2b02      	cmp	r3, #2
 8011a36:	d109      	bne.n	8011a4c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011a38:	68bb      	ldr	r3, [r7, #8]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d102      	bne.n	8011a44 <chk_lock+0x80>
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	2b02      	cmp	r3, #2
 8011a42:	d101      	bne.n	8011a48 <chk_lock+0x84>
 8011a44:	2300      	movs	r3, #0
 8011a46:	e010      	b.n	8011a6a <chk_lock+0xa6>
 8011a48:	2312      	movs	r3, #18
 8011a4a:	e00e      	b.n	8011a6a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d108      	bne.n	8011a64 <chk_lock+0xa0>
 8011a52:	4a09      	ldr	r2, [pc, #36]	@ (8011a78 <chk_lock+0xb4>)
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	011b      	lsls	r3, r3, #4
 8011a58:	4413      	add	r3, r2
 8011a5a:	330c      	adds	r3, #12
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011a62:	d101      	bne.n	8011a68 <chk_lock+0xa4>
 8011a64:	2310      	movs	r3, #16
 8011a66:	e000      	b.n	8011a6a <chk_lock+0xa6>
 8011a68:	2300      	movs	r3, #0
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3714      	adds	r7, #20
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr
 8011a76:	bf00      	nop
 8011a78:	200065c0 	.word	0x200065c0

08011a7c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b083      	sub	sp, #12
 8011a80:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011a82:	2300      	movs	r3, #0
 8011a84:	607b      	str	r3, [r7, #4]
 8011a86:	e002      	b.n	8011a8e <enq_lock+0x12>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	3301      	adds	r3, #1
 8011a8c:	607b      	str	r3, [r7, #4]
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d806      	bhi.n	8011aa2 <enq_lock+0x26>
 8011a94:	4a09      	ldr	r2, [pc, #36]	@ (8011abc <enq_lock+0x40>)
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	011b      	lsls	r3, r3, #4
 8011a9a:	4413      	add	r3, r2
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d1f2      	bne.n	8011a88 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2b02      	cmp	r3, #2
 8011aa6:	bf14      	ite	ne
 8011aa8:	2301      	movne	r3, #1
 8011aaa:	2300      	moveq	r3, #0
 8011aac:	b2db      	uxtb	r3, r3
}
 8011aae:	4618      	mov	r0, r3
 8011ab0:	370c      	adds	r7, #12
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr
 8011aba:	bf00      	nop
 8011abc:	200065c0 	.word	0x200065c0

08011ac0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b085      	sub	sp, #20
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011aca:	2300      	movs	r3, #0
 8011acc:	60fb      	str	r3, [r7, #12]
 8011ace:	e01f      	b.n	8011b10 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011ad0:	4a41      	ldr	r2, [pc, #260]	@ (8011bd8 <inc_lock+0x118>)
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	011b      	lsls	r3, r3, #4
 8011ad6:	4413      	add	r3, r2
 8011ad8:	681a      	ldr	r2, [r3, #0]
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d113      	bne.n	8011b0a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011ae2:	4a3d      	ldr	r2, [pc, #244]	@ (8011bd8 <inc_lock+0x118>)
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	011b      	lsls	r3, r3, #4
 8011ae8:	4413      	add	r3, r2
 8011aea:	3304      	adds	r3, #4
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011af2:	429a      	cmp	r2, r3
 8011af4:	d109      	bne.n	8011b0a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011af6:	4a38      	ldr	r2, [pc, #224]	@ (8011bd8 <inc_lock+0x118>)
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	011b      	lsls	r3, r3, #4
 8011afc:	4413      	add	r3, r2
 8011afe:	3308      	adds	r3, #8
 8011b00:	681a      	ldr	r2, [r3, #0]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d006      	beq.n	8011b18 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	60fb      	str	r3, [r7, #12]
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	2b01      	cmp	r3, #1
 8011b14:	d9dc      	bls.n	8011ad0 <inc_lock+0x10>
 8011b16:	e000      	b.n	8011b1a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011b18:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	2b02      	cmp	r3, #2
 8011b1e:	d132      	bne.n	8011b86 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011b20:	2300      	movs	r3, #0
 8011b22:	60fb      	str	r3, [r7, #12]
 8011b24:	e002      	b.n	8011b2c <inc_lock+0x6c>
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	3301      	adds	r3, #1
 8011b2a:	60fb      	str	r3, [r7, #12]
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	2b01      	cmp	r3, #1
 8011b30:	d806      	bhi.n	8011b40 <inc_lock+0x80>
 8011b32:	4a29      	ldr	r2, [pc, #164]	@ (8011bd8 <inc_lock+0x118>)
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	011b      	lsls	r3, r3, #4
 8011b38:	4413      	add	r3, r2
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d1f2      	bne.n	8011b26 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2b02      	cmp	r3, #2
 8011b44:	d101      	bne.n	8011b4a <inc_lock+0x8a>
 8011b46:	2300      	movs	r3, #0
 8011b48:	e040      	b.n	8011bcc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	4922      	ldr	r1, [pc, #136]	@ (8011bd8 <inc_lock+0x118>)
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	011b      	lsls	r3, r3, #4
 8011b54:	440b      	add	r3, r1
 8011b56:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	689a      	ldr	r2, [r3, #8]
 8011b5c:	491e      	ldr	r1, [pc, #120]	@ (8011bd8 <inc_lock+0x118>)
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	011b      	lsls	r3, r3, #4
 8011b62:	440b      	add	r3, r1
 8011b64:	3304      	adds	r3, #4
 8011b66:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	695a      	ldr	r2, [r3, #20]
 8011b6c:	491a      	ldr	r1, [pc, #104]	@ (8011bd8 <inc_lock+0x118>)
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	011b      	lsls	r3, r3, #4
 8011b72:	440b      	add	r3, r1
 8011b74:	3308      	adds	r3, #8
 8011b76:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011b78:	4a17      	ldr	r2, [pc, #92]	@ (8011bd8 <inc_lock+0x118>)
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	011b      	lsls	r3, r3, #4
 8011b7e:	4413      	add	r3, r2
 8011b80:	330c      	adds	r3, #12
 8011b82:	2200      	movs	r2, #0
 8011b84:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d009      	beq.n	8011ba0 <inc_lock+0xe0>
 8011b8c:	4a12      	ldr	r2, [pc, #72]	@ (8011bd8 <inc_lock+0x118>)
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	011b      	lsls	r3, r3, #4
 8011b92:	4413      	add	r3, r2
 8011b94:	330c      	adds	r3, #12
 8011b96:	881b      	ldrh	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d001      	beq.n	8011ba0 <inc_lock+0xe0>
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	e015      	b.n	8011bcc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d108      	bne.n	8011bb8 <inc_lock+0xf8>
 8011ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8011bd8 <inc_lock+0x118>)
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	011b      	lsls	r3, r3, #4
 8011bac:	4413      	add	r3, r2
 8011bae:	330c      	adds	r3, #12
 8011bb0:	881b      	ldrh	r3, [r3, #0]
 8011bb2:	3301      	adds	r3, #1
 8011bb4:	b29a      	uxth	r2, r3
 8011bb6:	e001      	b.n	8011bbc <inc_lock+0xfc>
 8011bb8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011bbc:	4906      	ldr	r1, [pc, #24]	@ (8011bd8 <inc_lock+0x118>)
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	011b      	lsls	r3, r3, #4
 8011bc2:	440b      	add	r3, r1
 8011bc4:	330c      	adds	r3, #12
 8011bc6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	3301      	adds	r3, #1
}
 8011bcc:	4618      	mov	r0, r3
 8011bce:	3714      	adds	r7, #20
 8011bd0:	46bd      	mov	sp, r7
 8011bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd6:	4770      	bx	lr
 8011bd8:	200065c0 	.word	0x200065c0

08011bdc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b085      	sub	sp, #20
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	3b01      	subs	r3, #1
 8011be8:	607b      	str	r3, [r7, #4]
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d825      	bhi.n	8011c3c <dec_lock+0x60>
		n = Files[i].ctr;
 8011bf0:	4a17      	ldr	r2, [pc, #92]	@ (8011c50 <dec_lock+0x74>)
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	011b      	lsls	r3, r3, #4
 8011bf6:	4413      	add	r3, r2
 8011bf8:	330c      	adds	r3, #12
 8011bfa:	881b      	ldrh	r3, [r3, #0]
 8011bfc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011bfe:	89fb      	ldrh	r3, [r7, #14]
 8011c00:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c04:	d101      	bne.n	8011c0a <dec_lock+0x2e>
 8011c06:	2300      	movs	r3, #0
 8011c08:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011c0a:	89fb      	ldrh	r3, [r7, #14]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d002      	beq.n	8011c16 <dec_lock+0x3a>
 8011c10:	89fb      	ldrh	r3, [r7, #14]
 8011c12:	3b01      	subs	r3, #1
 8011c14:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011c16:	4a0e      	ldr	r2, [pc, #56]	@ (8011c50 <dec_lock+0x74>)
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	011b      	lsls	r3, r3, #4
 8011c1c:	4413      	add	r3, r2
 8011c1e:	330c      	adds	r3, #12
 8011c20:	89fa      	ldrh	r2, [r7, #14]
 8011c22:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011c24:	89fb      	ldrh	r3, [r7, #14]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d105      	bne.n	8011c36 <dec_lock+0x5a>
 8011c2a:	4a09      	ldr	r2, [pc, #36]	@ (8011c50 <dec_lock+0x74>)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	011b      	lsls	r3, r3, #4
 8011c30:	4413      	add	r3, r2
 8011c32:	2200      	movs	r2, #0
 8011c34:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011c36:	2300      	movs	r3, #0
 8011c38:	737b      	strb	r3, [r7, #13]
 8011c3a:	e001      	b.n	8011c40 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011c3c:	2302      	movs	r3, #2
 8011c3e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011c40:	7b7b      	ldrb	r3, [r7, #13]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3714      	adds	r7, #20
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr
 8011c4e:	bf00      	nop
 8011c50:	200065c0 	.word	0x200065c0

08011c54 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011c54:	b480      	push	{r7}
 8011c56:	b085      	sub	sp, #20
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	60fb      	str	r3, [r7, #12]
 8011c60:	e010      	b.n	8011c84 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011c62:	4a0d      	ldr	r2, [pc, #52]	@ (8011c98 <clear_lock+0x44>)
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	011b      	lsls	r3, r3, #4
 8011c68:	4413      	add	r3, r2
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d105      	bne.n	8011c7e <clear_lock+0x2a>
 8011c72:	4a09      	ldr	r2, [pc, #36]	@ (8011c98 <clear_lock+0x44>)
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	011b      	lsls	r3, r3, #4
 8011c78:	4413      	add	r3, r2
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	3301      	adds	r3, #1
 8011c82:	60fb      	str	r3, [r7, #12]
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d9eb      	bls.n	8011c62 <clear_lock+0xe>
	}
}
 8011c8a:	bf00      	nop
 8011c8c:	bf00      	nop
 8011c8e:	3714      	adds	r7, #20
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr
 8011c98:	200065c0 	.word	0x200065c0

08011c9c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b086      	sub	sp, #24
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	78db      	ldrb	r3, [r3, #3]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d034      	beq.n	8011d1a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cb4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	7858      	ldrb	r0, [r3, #1]
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	697a      	ldr	r2, [r7, #20]
 8011cc4:	f7ff fd40 	bl	8011748 <disk_write>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d002      	beq.n	8011cd4 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011cce:	2301      	movs	r3, #1
 8011cd0:	73fb      	strb	r3, [r7, #15]
 8011cd2:	e022      	b.n	8011d1a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6a1b      	ldr	r3, [r3, #32]
 8011cde:	697a      	ldr	r2, [r7, #20]
 8011ce0:	1ad2      	subs	r2, r2, r3
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	699b      	ldr	r3, [r3, #24]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d217      	bcs.n	8011d1a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	789b      	ldrb	r3, [r3, #2]
 8011cee:	613b      	str	r3, [r7, #16]
 8011cf0:	e010      	b.n	8011d14 <sync_window+0x78>
					wsect += fs->fsize;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	699b      	ldr	r3, [r3, #24]
 8011cf6:	697a      	ldr	r2, [r7, #20]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	7858      	ldrb	r0, [r3, #1]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011d06:	2301      	movs	r3, #1
 8011d08:	697a      	ldr	r2, [r7, #20]
 8011d0a:	f7ff fd1d 	bl	8011748 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	3b01      	subs	r3, #1
 8011d12:	613b      	str	r3, [r7, #16]
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	d8eb      	bhi.n	8011cf2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3718      	adds	r7, #24
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}

08011d24 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b084      	sub	sp, #16
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
 8011d2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d36:	683a      	ldr	r2, [r7, #0]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d01b      	beq.n	8011d74 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f7ff ffad 	bl	8011c9c <sync_window>
 8011d42:	4603      	mov	r3, r0
 8011d44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011d46:	7bfb      	ldrb	r3, [r7, #15]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d113      	bne.n	8011d74 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	7858      	ldrb	r0, [r3, #1]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011d56:	2301      	movs	r3, #1
 8011d58:	683a      	ldr	r2, [r7, #0]
 8011d5a:	f7ff fcd5 	bl	8011708 <disk_read>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d004      	beq.n	8011d6e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011d64:	f04f 33ff 	mov.w	r3, #4294967295
 8011d68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	683a      	ldr	r2, [r7, #0]
 8011d72:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8011d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3710      	adds	r7, #16
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	bd80      	pop	{r7, pc}
	...

08011d80 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011d88:	6878      	ldr	r0, [r7, #4]
 8011d8a:	f7ff ff87 	bl	8011c9c <sync_window>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011d92:	7bfb      	ldrb	r3, [r7, #15]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d158      	bne.n	8011e4a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	781b      	ldrb	r3, [r3, #0]
 8011d9c:	2b03      	cmp	r3, #3
 8011d9e:	d148      	bne.n	8011e32 <sync_fs+0xb2>
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	791b      	ldrb	r3, [r3, #4]
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	d144      	bne.n	8011e32 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	3330      	adds	r3, #48	@ 0x30
 8011dac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011db0:	2100      	movs	r1, #0
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7ff fda9 	bl	801190a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	3330      	adds	r3, #48	@ 0x30
 8011dbc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011dc0:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7ff fd38 	bl	801183a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	3330      	adds	r3, #48	@ 0x30
 8011dce:	4921      	ldr	r1, [pc, #132]	@ (8011e54 <sync_fs+0xd4>)
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7ff fd4d 	bl	8011870 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	3330      	adds	r3, #48	@ 0x30
 8011dda:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011dde:	491e      	ldr	r1, [pc, #120]	@ (8011e58 <sync_fs+0xd8>)
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7ff fd45 	bl	8011870 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	3330      	adds	r3, #48	@ 0x30
 8011dea:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	691b      	ldr	r3, [r3, #16]
 8011df2:	4619      	mov	r1, r3
 8011df4:	4610      	mov	r0, r2
 8011df6:	f7ff fd3b 	bl	8011870 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	3330      	adds	r3, #48	@ 0x30
 8011dfe:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	4619      	mov	r1, r3
 8011e08:	4610      	mov	r0, r2
 8011e0a:	f7ff fd31 	bl	8011870 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	69db      	ldr	r3, [r3, #28]
 8011e12:	1c5a      	adds	r2, r3, #1
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	7858      	ldrb	r0, [r3, #1]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e26:	2301      	movs	r3, #1
 8011e28:	f7ff fc8e 	bl	8011748 <disk_write>
			fs->fsi_flag = 0;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	785b      	ldrb	r3, [r3, #1]
 8011e36:	2200      	movs	r2, #0
 8011e38:	2100      	movs	r1, #0
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	f7ff fca4 	bl	8011788 <disk_ioctl>
 8011e40:	4603      	mov	r3, r0
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d001      	beq.n	8011e4a <sync_fs+0xca>
 8011e46:	2301      	movs	r3, #1
 8011e48:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e4c:	4618      	mov	r0, r3
 8011e4e:	3710      	adds	r7, #16
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}
 8011e54:	41615252 	.word	0x41615252
 8011e58:	61417272 	.word	0x61417272

08011e5c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011e5c:	b480      	push	{r7}
 8011e5e:	b083      	sub	sp, #12
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
 8011e64:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	3b02      	subs	r3, #2
 8011e6a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	695b      	ldr	r3, [r3, #20]
 8011e70:	3b02      	subs	r3, #2
 8011e72:	683a      	ldr	r2, [r7, #0]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d301      	bcc.n	8011e7c <clust2sect+0x20>
 8011e78:	2300      	movs	r3, #0
 8011e7a:	e008      	b.n	8011e8e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	895b      	ldrh	r3, [r3, #10]
 8011e80:	461a      	mov	r2, r3
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	fb03 f202 	mul.w	r2, r3, r2
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e8c:	4413      	add	r3, r2
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	370c      	adds	r7, #12
 8011e92:	46bd      	mov	sp, r7
 8011e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e98:	4770      	bx	lr

08011e9a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011e9a:	b580      	push	{r7, lr}
 8011e9c:	b086      	sub	sp, #24
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
 8011ea2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	2b01      	cmp	r3, #1
 8011eae:	d904      	bls.n	8011eba <get_fat+0x20>
 8011eb0:	693b      	ldr	r3, [r7, #16]
 8011eb2:	695b      	ldr	r3, [r3, #20]
 8011eb4:	683a      	ldr	r2, [r7, #0]
 8011eb6:	429a      	cmp	r2, r3
 8011eb8:	d302      	bcc.n	8011ec0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011eba:	2301      	movs	r3, #1
 8011ebc:	617b      	str	r3, [r7, #20]
 8011ebe:	e08e      	b.n	8011fde <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ec4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	781b      	ldrb	r3, [r3, #0]
 8011eca:	2b03      	cmp	r3, #3
 8011ecc:	d061      	beq.n	8011f92 <get_fat+0xf8>
 8011ece:	2b03      	cmp	r3, #3
 8011ed0:	dc7b      	bgt.n	8011fca <get_fat+0x130>
 8011ed2:	2b01      	cmp	r3, #1
 8011ed4:	d002      	beq.n	8011edc <get_fat+0x42>
 8011ed6:	2b02      	cmp	r3, #2
 8011ed8:	d041      	beq.n	8011f5e <get_fat+0xc4>
 8011eda:	e076      	b.n	8011fca <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	60fb      	str	r3, [r7, #12]
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	085b      	lsrs	r3, r3, #1
 8011ee4:	68fa      	ldr	r2, [r7, #12]
 8011ee6:	4413      	add	r3, r2
 8011ee8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	6a1a      	ldr	r2, [r3, #32]
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	0a5b      	lsrs	r3, r3, #9
 8011ef2:	4413      	add	r3, r2
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	6938      	ldr	r0, [r7, #16]
 8011ef8:	f7ff ff14 	bl	8011d24 <move_window>
 8011efc:	4603      	mov	r3, r0
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d166      	bne.n	8011fd0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	1c5a      	adds	r2, r3, #1
 8011f06:	60fa      	str	r2, [r7, #12]
 8011f08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f0c:	693a      	ldr	r2, [r7, #16]
 8011f0e:	4413      	add	r3, r2
 8011f10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011f14:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	6a1a      	ldr	r2, [r3, #32]
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	0a5b      	lsrs	r3, r3, #9
 8011f1e:	4413      	add	r3, r2
 8011f20:	4619      	mov	r1, r3
 8011f22:	6938      	ldr	r0, [r7, #16]
 8011f24:	f7ff fefe 	bl	8011d24 <move_window>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d152      	bne.n	8011fd4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f34:	693a      	ldr	r2, [r7, #16]
 8011f36:	4413      	add	r3, r2
 8011f38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011f3c:	021b      	lsls	r3, r3, #8
 8011f3e:	68ba      	ldr	r2, [r7, #8]
 8011f40:	4313      	orrs	r3, r2
 8011f42:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	f003 0301 	and.w	r3, r3, #1
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d002      	beq.n	8011f54 <get_fat+0xba>
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	091b      	lsrs	r3, r3, #4
 8011f52:	e002      	b.n	8011f5a <get_fat+0xc0>
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f5a:	617b      	str	r3, [r7, #20]
			break;
 8011f5c:	e03f      	b.n	8011fde <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	6a1a      	ldr	r2, [r3, #32]
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	0a1b      	lsrs	r3, r3, #8
 8011f66:	4413      	add	r3, r2
 8011f68:	4619      	mov	r1, r3
 8011f6a:	6938      	ldr	r0, [r7, #16]
 8011f6c:	f7ff feda 	bl	8011d24 <move_window>
 8011f70:	4603      	mov	r3, r0
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d130      	bne.n	8011fd8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	005b      	lsls	r3, r3, #1
 8011f80:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011f84:	4413      	add	r3, r2
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7ff fc1c 	bl	80117c4 <ld_word>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	617b      	str	r3, [r7, #20]
			break;
 8011f90:	e025      	b.n	8011fde <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	6a1a      	ldr	r2, [r3, #32]
 8011f96:	683b      	ldr	r3, [r7, #0]
 8011f98:	09db      	lsrs	r3, r3, #7
 8011f9a:	4413      	add	r3, r2
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	6938      	ldr	r0, [r7, #16]
 8011fa0:	f7ff fec0 	bl	8011d24 <move_window>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d118      	bne.n	8011fdc <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011fb8:	4413      	add	r3, r2
 8011fba:	4618      	mov	r0, r3
 8011fbc:	f7ff fc1a 	bl	80117f4 <ld_dword>
 8011fc0:	4603      	mov	r3, r0
 8011fc2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011fc6:	617b      	str	r3, [r7, #20]
			break;
 8011fc8:	e009      	b.n	8011fde <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011fca:	2301      	movs	r3, #1
 8011fcc:	617b      	str	r3, [r7, #20]
 8011fce:	e006      	b.n	8011fde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fd0:	bf00      	nop
 8011fd2:	e004      	b.n	8011fde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fd4:	bf00      	nop
 8011fd6:	e002      	b.n	8011fde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011fd8:	bf00      	nop
 8011fda:	e000      	b.n	8011fde <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011fdc:	bf00      	nop
		}
	}

	return val;
 8011fde:	697b      	ldr	r3, [r7, #20]
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3718      	adds	r7, #24
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}

08011fe8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011fe8:	b590      	push	{r4, r7, lr}
 8011fea:	b089      	sub	sp, #36	@ 0x24
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011ff4:	2302      	movs	r3, #2
 8011ff6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	2b01      	cmp	r3, #1
 8011ffc:	f240 80d9 	bls.w	80121b2 <put_fat+0x1ca>
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	695b      	ldr	r3, [r3, #20]
 8012004:	68ba      	ldr	r2, [r7, #8]
 8012006:	429a      	cmp	r2, r3
 8012008:	f080 80d3 	bcs.w	80121b2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	2b03      	cmp	r3, #3
 8012012:	f000 8096 	beq.w	8012142 <put_fat+0x15a>
 8012016:	2b03      	cmp	r3, #3
 8012018:	f300 80cb 	bgt.w	80121b2 <put_fat+0x1ca>
 801201c:	2b01      	cmp	r3, #1
 801201e:	d002      	beq.n	8012026 <put_fat+0x3e>
 8012020:	2b02      	cmp	r3, #2
 8012022:	d06e      	beq.n	8012102 <put_fat+0x11a>
 8012024:	e0c5      	b.n	80121b2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	61bb      	str	r3, [r7, #24]
 801202a:	69bb      	ldr	r3, [r7, #24]
 801202c:	085b      	lsrs	r3, r3, #1
 801202e:	69ba      	ldr	r2, [r7, #24]
 8012030:	4413      	add	r3, r2
 8012032:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	6a1a      	ldr	r2, [r3, #32]
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	0a5b      	lsrs	r3, r3, #9
 801203c:	4413      	add	r3, r2
 801203e:	4619      	mov	r1, r3
 8012040:	68f8      	ldr	r0, [r7, #12]
 8012042:	f7ff fe6f 	bl	8011d24 <move_window>
 8012046:	4603      	mov	r3, r0
 8012048:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801204a:	7ffb      	ldrb	r3, [r7, #31]
 801204c:	2b00      	cmp	r3, #0
 801204e:	f040 80a9 	bne.w	80121a4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012058:	69bb      	ldr	r3, [r7, #24]
 801205a:	1c59      	adds	r1, r3, #1
 801205c:	61b9      	str	r1, [r7, #24]
 801205e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012062:	4413      	add	r3, r2
 8012064:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	f003 0301 	and.w	r3, r3, #1
 801206c:	2b00      	cmp	r3, #0
 801206e:	d00d      	beq.n	801208c <put_fat+0xa4>
 8012070:	697b      	ldr	r3, [r7, #20]
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	b25b      	sxtb	r3, r3
 8012076:	f003 030f 	and.w	r3, r3, #15
 801207a:	b25a      	sxtb	r2, r3
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	b2db      	uxtb	r3, r3
 8012080:	011b      	lsls	r3, r3, #4
 8012082:	b25b      	sxtb	r3, r3
 8012084:	4313      	orrs	r3, r2
 8012086:	b25b      	sxtb	r3, r3
 8012088:	b2db      	uxtb	r3, r3
 801208a:	e001      	b.n	8012090 <put_fat+0xa8>
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	b2db      	uxtb	r3, r3
 8012090:	697a      	ldr	r2, [r7, #20]
 8012092:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2201      	movs	r2, #1
 8012098:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	6a1a      	ldr	r2, [r3, #32]
 801209e:	69bb      	ldr	r3, [r7, #24]
 80120a0:	0a5b      	lsrs	r3, r3, #9
 80120a2:	4413      	add	r3, r2
 80120a4:	4619      	mov	r1, r3
 80120a6:	68f8      	ldr	r0, [r7, #12]
 80120a8:	f7ff fe3c 	bl	8011d24 <move_window>
 80120ac:	4603      	mov	r3, r0
 80120ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120b0:	7ffb      	ldrb	r3, [r7, #31]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d178      	bne.n	80121a8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80120bc:	69bb      	ldr	r3, [r7, #24]
 80120be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120c2:	4413      	add	r3, r2
 80120c4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80120c6:	68bb      	ldr	r3, [r7, #8]
 80120c8:	f003 0301 	and.w	r3, r3, #1
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d003      	beq.n	80120d8 <put_fat+0xf0>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	091b      	lsrs	r3, r3, #4
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	e00e      	b.n	80120f6 <put_fat+0x10e>
 80120d8:	697b      	ldr	r3, [r7, #20]
 80120da:	781b      	ldrb	r3, [r3, #0]
 80120dc:	b25b      	sxtb	r3, r3
 80120de:	f023 030f 	bic.w	r3, r3, #15
 80120e2:	b25a      	sxtb	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	0a1b      	lsrs	r3, r3, #8
 80120e8:	b25b      	sxtb	r3, r3
 80120ea:	f003 030f 	and.w	r3, r3, #15
 80120ee:	b25b      	sxtb	r3, r3
 80120f0:	4313      	orrs	r3, r2
 80120f2:	b25b      	sxtb	r3, r3
 80120f4:	b2db      	uxtb	r3, r3
 80120f6:	697a      	ldr	r2, [r7, #20]
 80120f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	2201      	movs	r2, #1
 80120fe:	70da      	strb	r2, [r3, #3]
			break;
 8012100:	e057      	b.n	80121b2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	6a1a      	ldr	r2, [r3, #32]
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	0a1b      	lsrs	r3, r3, #8
 801210a:	4413      	add	r3, r2
 801210c:	4619      	mov	r1, r3
 801210e:	68f8      	ldr	r0, [r7, #12]
 8012110:	f7ff fe08 	bl	8011d24 <move_window>
 8012114:	4603      	mov	r3, r0
 8012116:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012118:	7ffb      	ldrb	r3, [r7, #31]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d146      	bne.n	80121ac <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 801212c:	4413      	add	r3, r2
 801212e:	687a      	ldr	r2, [r7, #4]
 8012130:	b292      	uxth	r2, r2
 8012132:	4611      	mov	r1, r2
 8012134:	4618      	mov	r0, r3
 8012136:	f7ff fb80 	bl	801183a <st_word>
			fs->wflag = 1;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2201      	movs	r2, #1
 801213e:	70da      	strb	r2, [r3, #3]
			break;
 8012140:	e037      	b.n	80121b2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	6a1a      	ldr	r2, [r3, #32]
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	09db      	lsrs	r3, r3, #7
 801214a:	4413      	add	r3, r2
 801214c:	4619      	mov	r1, r3
 801214e:	68f8      	ldr	r0, [r7, #12]
 8012150:	f7ff fde8 	bl	8011d24 <move_window>
 8012154:	4603      	mov	r3, r0
 8012156:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012158:	7ffb      	ldrb	r3, [r7, #31]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d128      	bne.n	80121b0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	009b      	lsls	r3, r3, #2
 801216e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012172:	4413      	add	r3, r2
 8012174:	4618      	mov	r0, r3
 8012176:	f7ff fb3d 	bl	80117f4 <ld_dword>
 801217a:	4603      	mov	r3, r0
 801217c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012180:	4323      	orrs	r3, r4
 8012182:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	009b      	lsls	r3, r3, #2
 801218e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8012192:	4413      	add	r3, r2
 8012194:	6879      	ldr	r1, [r7, #4]
 8012196:	4618      	mov	r0, r3
 8012198:	f7ff fb6a 	bl	8011870 <st_dword>
			fs->wflag = 1;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2201      	movs	r2, #1
 80121a0:	70da      	strb	r2, [r3, #3]
			break;
 80121a2:	e006      	b.n	80121b2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80121a4:	bf00      	nop
 80121a6:	e004      	b.n	80121b2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80121a8:	bf00      	nop
 80121aa:	e002      	b.n	80121b2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80121ac:	bf00      	nop
 80121ae:	e000      	b.n	80121b2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80121b0:	bf00      	nop
		}
	}
	return res;
 80121b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	3724      	adds	r7, #36	@ 0x24
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd90      	pop	{r4, r7, pc}

080121bc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b088      	sub	sp, #32
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	60f8      	str	r0, [r7, #12]
 80121c4:	60b9      	str	r1, [r7, #8]
 80121c6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80121c8:	2300      	movs	r3, #0
 80121ca:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	2b01      	cmp	r3, #1
 80121d6:	d904      	bls.n	80121e2 <remove_chain+0x26>
 80121d8:	69bb      	ldr	r3, [r7, #24]
 80121da:	695b      	ldr	r3, [r3, #20]
 80121dc:	68ba      	ldr	r2, [r7, #8]
 80121de:	429a      	cmp	r2, r3
 80121e0:	d301      	bcc.n	80121e6 <remove_chain+0x2a>
 80121e2:	2302      	movs	r3, #2
 80121e4:	e04b      	b.n	801227e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d00c      	beq.n	8012206 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80121ec:	f04f 32ff 	mov.w	r2, #4294967295
 80121f0:	6879      	ldr	r1, [r7, #4]
 80121f2:	69b8      	ldr	r0, [r7, #24]
 80121f4:	f7ff fef8 	bl	8011fe8 <put_fat>
 80121f8:	4603      	mov	r3, r0
 80121fa:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80121fc:	7ffb      	ldrb	r3, [r7, #31]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d001      	beq.n	8012206 <remove_chain+0x4a>
 8012202:	7ffb      	ldrb	r3, [r7, #31]
 8012204:	e03b      	b.n	801227e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012206:	68b9      	ldr	r1, [r7, #8]
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	f7ff fe46 	bl	8011e9a <get_fat>
 801220e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d031      	beq.n	801227a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012216:	697b      	ldr	r3, [r7, #20]
 8012218:	2b01      	cmp	r3, #1
 801221a:	d101      	bne.n	8012220 <remove_chain+0x64>
 801221c:	2302      	movs	r3, #2
 801221e:	e02e      	b.n	801227e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012226:	d101      	bne.n	801222c <remove_chain+0x70>
 8012228:	2301      	movs	r3, #1
 801222a:	e028      	b.n	801227e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801222c:	2200      	movs	r2, #0
 801222e:	68b9      	ldr	r1, [r7, #8]
 8012230:	69b8      	ldr	r0, [r7, #24]
 8012232:	f7ff fed9 	bl	8011fe8 <put_fat>
 8012236:	4603      	mov	r3, r0
 8012238:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801223a:	7ffb      	ldrb	r3, [r7, #31]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d001      	beq.n	8012244 <remove_chain+0x88>
 8012240:	7ffb      	ldrb	r3, [r7, #31]
 8012242:	e01c      	b.n	801227e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	691a      	ldr	r2, [r3, #16]
 8012248:	69bb      	ldr	r3, [r7, #24]
 801224a:	695b      	ldr	r3, [r3, #20]
 801224c:	3b02      	subs	r3, #2
 801224e:	429a      	cmp	r2, r3
 8012250:	d20b      	bcs.n	801226a <remove_chain+0xae>
			fs->free_clst++;
 8012252:	69bb      	ldr	r3, [r7, #24]
 8012254:	691b      	ldr	r3, [r3, #16]
 8012256:	1c5a      	adds	r2, r3, #1
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801225c:	69bb      	ldr	r3, [r7, #24]
 801225e:	791b      	ldrb	r3, [r3, #4]
 8012260:	f043 0301 	orr.w	r3, r3, #1
 8012264:	b2da      	uxtb	r2, r3
 8012266:	69bb      	ldr	r3, [r7, #24]
 8012268:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801226e:	69bb      	ldr	r3, [r7, #24]
 8012270:	695b      	ldr	r3, [r3, #20]
 8012272:	68ba      	ldr	r2, [r7, #8]
 8012274:	429a      	cmp	r2, r3
 8012276:	d3c6      	bcc.n	8012206 <remove_chain+0x4a>
 8012278:	e000      	b.n	801227c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801227a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801227c:	2300      	movs	r3, #0
}
 801227e:	4618      	mov	r0, r3
 8012280:	3720      	adds	r7, #32
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}

08012286 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012286:	b580      	push	{r7, lr}
 8012288:	b088      	sub	sp, #32
 801228a:	af00      	add	r7, sp, #0
 801228c:	6078      	str	r0, [r7, #4]
 801228e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d10d      	bne.n	80122b8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	68db      	ldr	r3, [r3, #12]
 80122a0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80122a2:	69bb      	ldr	r3, [r7, #24]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d004      	beq.n	80122b2 <create_chain+0x2c>
 80122a8:	693b      	ldr	r3, [r7, #16]
 80122aa:	695b      	ldr	r3, [r3, #20]
 80122ac:	69ba      	ldr	r2, [r7, #24]
 80122ae:	429a      	cmp	r2, r3
 80122b0:	d31b      	bcc.n	80122ea <create_chain+0x64>
 80122b2:	2301      	movs	r3, #1
 80122b4:	61bb      	str	r3, [r7, #24]
 80122b6:	e018      	b.n	80122ea <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80122b8:	6839      	ldr	r1, [r7, #0]
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f7ff fded 	bl	8011e9a <get_fat>
 80122c0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2b01      	cmp	r3, #1
 80122c6:	d801      	bhi.n	80122cc <create_chain+0x46>
 80122c8:	2301      	movs	r3, #1
 80122ca:	e070      	b.n	80123ae <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122d2:	d101      	bne.n	80122d8 <create_chain+0x52>
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	e06a      	b.n	80123ae <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80122d8:	693b      	ldr	r3, [r7, #16]
 80122da:	695b      	ldr	r3, [r3, #20]
 80122dc:	68fa      	ldr	r2, [r7, #12]
 80122de:	429a      	cmp	r2, r3
 80122e0:	d201      	bcs.n	80122e6 <create_chain+0x60>
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	e063      	b.n	80123ae <create_chain+0x128>
		scl = clst;
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80122ea:	69bb      	ldr	r3, [r7, #24]
 80122ec:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	3301      	adds	r3, #1
 80122f2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	695b      	ldr	r3, [r3, #20]
 80122f8:	69fa      	ldr	r2, [r7, #28]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d307      	bcc.n	801230e <create_chain+0x88>
				ncl = 2;
 80122fe:	2302      	movs	r3, #2
 8012300:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012302:	69fa      	ldr	r2, [r7, #28]
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	429a      	cmp	r2, r3
 8012308:	d901      	bls.n	801230e <create_chain+0x88>
 801230a:	2300      	movs	r3, #0
 801230c:	e04f      	b.n	80123ae <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801230e:	69f9      	ldr	r1, [r7, #28]
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f7ff fdc2 	bl	8011e9a <get_fat>
 8012316:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d00e      	beq.n	801233c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	2b01      	cmp	r3, #1
 8012322:	d003      	beq.n	801232c <create_chain+0xa6>
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	f1b3 3fff 	cmp.w	r3, #4294967295
 801232a:	d101      	bne.n	8012330 <create_chain+0xaa>
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	e03e      	b.n	80123ae <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012330:	69fa      	ldr	r2, [r7, #28]
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	429a      	cmp	r2, r3
 8012336:	d1da      	bne.n	80122ee <create_chain+0x68>
 8012338:	2300      	movs	r3, #0
 801233a:	e038      	b.n	80123ae <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801233c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801233e:	f04f 32ff 	mov.w	r2, #4294967295
 8012342:	69f9      	ldr	r1, [r7, #28]
 8012344:	6938      	ldr	r0, [r7, #16]
 8012346:	f7ff fe4f 	bl	8011fe8 <put_fat>
 801234a:	4603      	mov	r3, r0
 801234c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801234e:	7dfb      	ldrb	r3, [r7, #23]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d109      	bne.n	8012368 <create_chain+0xe2>
 8012354:	683b      	ldr	r3, [r7, #0]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d006      	beq.n	8012368 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801235a:	69fa      	ldr	r2, [r7, #28]
 801235c:	6839      	ldr	r1, [r7, #0]
 801235e:	6938      	ldr	r0, [r7, #16]
 8012360:	f7ff fe42 	bl	8011fe8 <put_fat>
 8012364:	4603      	mov	r3, r0
 8012366:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012368:	7dfb      	ldrb	r3, [r7, #23]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d116      	bne.n	801239c <create_chain+0x116>
		fs->last_clst = ncl;
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	69fa      	ldr	r2, [r7, #28]
 8012372:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	691a      	ldr	r2, [r3, #16]
 8012378:	693b      	ldr	r3, [r7, #16]
 801237a:	695b      	ldr	r3, [r3, #20]
 801237c:	3b02      	subs	r3, #2
 801237e:	429a      	cmp	r2, r3
 8012380:	d804      	bhi.n	801238c <create_chain+0x106>
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	691b      	ldr	r3, [r3, #16]
 8012386:	1e5a      	subs	r2, r3, #1
 8012388:	693b      	ldr	r3, [r7, #16]
 801238a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	791b      	ldrb	r3, [r3, #4]
 8012390:	f043 0301 	orr.w	r3, r3, #1
 8012394:	b2da      	uxtb	r2, r3
 8012396:	693b      	ldr	r3, [r7, #16]
 8012398:	711a      	strb	r2, [r3, #4]
 801239a:	e007      	b.n	80123ac <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801239c:	7dfb      	ldrb	r3, [r7, #23]
 801239e:	2b01      	cmp	r3, #1
 80123a0:	d102      	bne.n	80123a8 <create_chain+0x122>
 80123a2:	f04f 33ff 	mov.w	r3, #4294967295
 80123a6:	e000      	b.n	80123aa <create_chain+0x124>
 80123a8:	2301      	movs	r3, #1
 80123aa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80123ac:	69fb      	ldr	r3, [r7, #28]
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3720      	adds	r7, #32
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}

080123b6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80123b6:	b480      	push	{r7}
 80123b8:	b087      	sub	sp, #28
 80123ba:	af00      	add	r7, sp, #0
 80123bc:	6078      	str	r0, [r7, #4]
 80123be:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123ca:	3304      	adds	r3, #4
 80123cc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	0a5b      	lsrs	r3, r3, #9
 80123d2:	68fa      	ldr	r2, [r7, #12]
 80123d4:	8952      	ldrh	r2, [r2, #10]
 80123d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80123da:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	1d1a      	adds	r2, r3, #4
 80123e0:	613a      	str	r2, [r7, #16]
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d101      	bne.n	80123f0 <clmt_clust+0x3a>
 80123ec:	2300      	movs	r3, #0
 80123ee:	e010      	b.n	8012412 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80123f0:	697a      	ldr	r2, [r7, #20]
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d307      	bcc.n	8012408 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80123f8:	697a      	ldr	r2, [r7, #20]
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	1ad3      	subs	r3, r2, r3
 80123fe:	617b      	str	r3, [r7, #20]
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	3304      	adds	r3, #4
 8012404:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012406:	e7e9      	b.n	80123dc <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8012408:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	681a      	ldr	r2, [r3, #0]
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	4413      	add	r3, r2
}
 8012412:	4618      	mov	r0, r3
 8012414:	371c      	adds	r7, #28
 8012416:	46bd      	mov	sp, r7
 8012418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241c:	4770      	bx	lr

0801241e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801241e:	b580      	push	{r7, lr}
 8012420:	b086      	sub	sp, #24
 8012422:	af00      	add	r7, sp, #0
 8012424:	6078      	str	r0, [r7, #4]
 8012426:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012434:	d204      	bcs.n	8012440 <dir_sdi+0x22>
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	f003 031f 	and.w	r3, r3, #31
 801243c:	2b00      	cmp	r3, #0
 801243e:	d001      	beq.n	8012444 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012440:	2302      	movs	r3, #2
 8012442:	e063      	b.n	801250c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	683a      	ldr	r2, [r7, #0]
 8012448:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	689b      	ldr	r3, [r3, #8]
 801244e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d106      	bne.n	8012464 <dir_sdi+0x46>
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	781b      	ldrb	r3, [r3, #0]
 801245a:	2b02      	cmp	r3, #2
 801245c:	d902      	bls.n	8012464 <dir_sdi+0x46>
		clst = fs->dirbase;
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012462:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012464:	697b      	ldr	r3, [r7, #20]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d10c      	bne.n	8012484 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	095b      	lsrs	r3, r3, #5
 801246e:	693a      	ldr	r2, [r7, #16]
 8012470:	8912      	ldrh	r2, [r2, #8]
 8012472:	4293      	cmp	r3, r2
 8012474:	d301      	bcc.n	801247a <dir_sdi+0x5c>
 8012476:	2302      	movs	r3, #2
 8012478:	e048      	b.n	801250c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	61da      	str	r2, [r3, #28]
 8012482:	e029      	b.n	80124d8 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012484:	693b      	ldr	r3, [r7, #16]
 8012486:	895b      	ldrh	r3, [r3, #10]
 8012488:	025b      	lsls	r3, r3, #9
 801248a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801248c:	e019      	b.n	80124c2 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	6979      	ldr	r1, [r7, #20]
 8012492:	4618      	mov	r0, r3
 8012494:	f7ff fd01 	bl	8011e9a <get_fat>
 8012498:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801249a:	697b      	ldr	r3, [r7, #20]
 801249c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124a0:	d101      	bne.n	80124a6 <dir_sdi+0x88>
 80124a2:	2301      	movs	r3, #1
 80124a4:	e032      	b.n	801250c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	2b01      	cmp	r3, #1
 80124aa:	d904      	bls.n	80124b6 <dir_sdi+0x98>
 80124ac:	693b      	ldr	r3, [r7, #16]
 80124ae:	695b      	ldr	r3, [r3, #20]
 80124b0:	697a      	ldr	r2, [r7, #20]
 80124b2:	429a      	cmp	r2, r3
 80124b4:	d301      	bcc.n	80124ba <dir_sdi+0x9c>
 80124b6:	2302      	movs	r3, #2
 80124b8:	e028      	b.n	801250c <dir_sdi+0xee>
			ofs -= csz;
 80124ba:	683a      	ldr	r2, [r7, #0]
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	1ad3      	subs	r3, r2, r3
 80124c0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80124c2:	683a      	ldr	r2, [r7, #0]
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d2e1      	bcs.n	801248e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80124ca:	6979      	ldr	r1, [r7, #20]
 80124cc:	6938      	ldr	r0, [r7, #16]
 80124ce:	f7ff fcc5 	bl	8011e5c <clust2sect>
 80124d2:	4602      	mov	r2, r0
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	697a      	ldr	r2, [r7, #20]
 80124dc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	69db      	ldr	r3, [r3, #28]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d101      	bne.n	80124ea <dir_sdi+0xcc>
 80124e6:	2302      	movs	r3, #2
 80124e8:	e010      	b.n	801250c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	69da      	ldr	r2, [r3, #28]
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	0a5b      	lsrs	r3, r3, #9
 80124f2:	441a      	add	r2, r3
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80124fe:	683b      	ldr	r3, [r7, #0]
 8012500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012504:	441a      	add	r2, r3
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801250a:	2300      	movs	r3, #0
}
 801250c:	4618      	mov	r0, r3
 801250e:	3718      	adds	r7, #24
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}

08012514 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b086      	sub	sp, #24
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
 801251c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	695b      	ldr	r3, [r3, #20]
 8012528:	3320      	adds	r3, #32
 801252a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	69db      	ldr	r3, [r3, #28]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d003      	beq.n	801253c <dir_next+0x28>
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801253a:	d301      	bcc.n	8012540 <dir_next+0x2c>
 801253c:	2304      	movs	r3, #4
 801253e:	e0aa      	b.n	8012696 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012546:	2b00      	cmp	r3, #0
 8012548:	f040 8098 	bne.w	801267c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	69db      	ldr	r3, [r3, #28]
 8012550:	1c5a      	adds	r2, r3, #1
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	699b      	ldr	r3, [r3, #24]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d10b      	bne.n	8012576 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	095b      	lsrs	r3, r3, #5
 8012562:	68fa      	ldr	r2, [r7, #12]
 8012564:	8912      	ldrh	r2, [r2, #8]
 8012566:	4293      	cmp	r3, r2
 8012568:	f0c0 8088 	bcc.w	801267c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2200      	movs	r2, #0
 8012570:	61da      	str	r2, [r3, #28]
 8012572:	2304      	movs	r3, #4
 8012574:	e08f      	b.n	8012696 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	0a5b      	lsrs	r3, r3, #9
 801257a:	68fa      	ldr	r2, [r7, #12]
 801257c:	8952      	ldrh	r2, [r2, #10]
 801257e:	3a01      	subs	r2, #1
 8012580:	4013      	ands	r3, r2
 8012582:	2b00      	cmp	r3, #0
 8012584:	d17a      	bne.n	801267c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012586:	687a      	ldr	r2, [r7, #4]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	699b      	ldr	r3, [r3, #24]
 801258c:	4619      	mov	r1, r3
 801258e:	4610      	mov	r0, r2
 8012590:	f7ff fc83 	bl	8011e9a <get_fat>
 8012594:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012596:	697b      	ldr	r3, [r7, #20]
 8012598:	2b01      	cmp	r3, #1
 801259a:	d801      	bhi.n	80125a0 <dir_next+0x8c>
 801259c:	2302      	movs	r3, #2
 801259e:	e07a      	b.n	8012696 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125a6:	d101      	bne.n	80125ac <dir_next+0x98>
 80125a8:	2301      	movs	r3, #1
 80125aa:	e074      	b.n	8012696 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	695b      	ldr	r3, [r3, #20]
 80125b0:	697a      	ldr	r2, [r7, #20]
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d358      	bcc.n	8012668 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80125b6:	683b      	ldr	r3, [r7, #0]
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d104      	bne.n	80125c6 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	2200      	movs	r2, #0
 80125c0:	61da      	str	r2, [r3, #28]
 80125c2:	2304      	movs	r3, #4
 80125c4:	e067      	b.n	8012696 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80125c6:	687a      	ldr	r2, [r7, #4]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	699b      	ldr	r3, [r3, #24]
 80125cc:	4619      	mov	r1, r3
 80125ce:	4610      	mov	r0, r2
 80125d0:	f7ff fe59 	bl	8012286 <create_chain>
 80125d4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80125d6:	697b      	ldr	r3, [r7, #20]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d101      	bne.n	80125e0 <dir_next+0xcc>
 80125dc:	2307      	movs	r3, #7
 80125de:	e05a      	b.n	8012696 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	2b01      	cmp	r3, #1
 80125e4:	d101      	bne.n	80125ea <dir_next+0xd6>
 80125e6:	2302      	movs	r3, #2
 80125e8:	e055      	b.n	8012696 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80125ea:	697b      	ldr	r3, [r7, #20]
 80125ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125f0:	d101      	bne.n	80125f6 <dir_next+0xe2>
 80125f2:	2301      	movs	r3, #1
 80125f4:	e04f      	b.n	8012696 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80125f6:	68f8      	ldr	r0, [r7, #12]
 80125f8:	f7ff fb50 	bl	8011c9c <sync_window>
 80125fc:	4603      	mov	r3, r0
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d001      	beq.n	8012606 <dir_next+0xf2>
 8012602:	2301      	movs	r3, #1
 8012604:	e047      	b.n	8012696 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	3330      	adds	r3, #48	@ 0x30
 801260a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801260e:	2100      	movs	r1, #0
 8012610:	4618      	mov	r0, r3
 8012612:	f7ff f97a 	bl	801190a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012616:	2300      	movs	r3, #0
 8012618:	613b      	str	r3, [r7, #16]
 801261a:	6979      	ldr	r1, [r7, #20]
 801261c:	68f8      	ldr	r0, [r7, #12]
 801261e:	f7ff fc1d 	bl	8011e5c <clust2sect>
 8012622:	4602      	mov	r2, r0
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012628:	e012      	b.n	8012650 <dir_next+0x13c>
						fs->wflag = 1;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	2201      	movs	r2, #1
 801262e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f7ff fb33 	bl	8011c9c <sync_window>
 8012636:	4603      	mov	r3, r0
 8012638:	2b00      	cmp	r3, #0
 801263a:	d001      	beq.n	8012640 <dir_next+0x12c>
 801263c:	2301      	movs	r3, #1
 801263e:	e02a      	b.n	8012696 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012640:	693b      	ldr	r3, [r7, #16]
 8012642:	3301      	adds	r3, #1
 8012644:	613b      	str	r3, [r7, #16]
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801264a:	1c5a      	adds	r2, r3, #1
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	895b      	ldrh	r3, [r3, #10]
 8012654:	461a      	mov	r2, r3
 8012656:	693b      	ldr	r3, [r7, #16]
 8012658:	4293      	cmp	r3, r2
 801265a:	d3e6      	bcc.n	801262a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801265c:	68fb      	ldr	r3, [r7, #12]
 801265e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012660:	693b      	ldr	r3, [r7, #16]
 8012662:	1ad2      	subs	r2, r2, r3
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	697a      	ldr	r2, [r7, #20]
 801266c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801266e:	6979      	ldr	r1, [r7, #20]
 8012670:	68f8      	ldr	r0, [r7, #12]
 8012672:	f7ff fbf3 	bl	8011e5c <clust2sect>
 8012676:	4602      	mov	r2, r0
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	68ba      	ldr	r2, [r7, #8]
 8012680:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801268e:	441a      	add	r2, r3
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012694:	2300      	movs	r3, #0
}
 8012696:	4618      	mov	r0, r3
 8012698:	3718      	adds	r7, #24
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}

0801269e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801269e:	b580      	push	{r7, lr}
 80126a0:	b086      	sub	sp, #24
 80126a2:	af00      	add	r7, sp, #0
 80126a4:	6078      	str	r0, [r7, #4]
 80126a6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80126ae:	2100      	movs	r1, #0
 80126b0:	6878      	ldr	r0, [r7, #4]
 80126b2:	f7ff feb4 	bl	801241e <dir_sdi>
 80126b6:	4603      	mov	r3, r0
 80126b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80126ba:	7dfb      	ldrb	r3, [r7, #23]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d12b      	bne.n	8012718 <dir_alloc+0x7a>
		n = 0;
 80126c0:	2300      	movs	r3, #0
 80126c2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	69db      	ldr	r3, [r3, #28]
 80126c8:	4619      	mov	r1, r3
 80126ca:	68f8      	ldr	r0, [r7, #12]
 80126cc:	f7ff fb2a 	bl	8011d24 <move_window>
 80126d0:	4603      	mov	r3, r0
 80126d2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80126d4:	7dfb      	ldrb	r3, [r7, #23]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d11d      	bne.n	8012716 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6a1b      	ldr	r3, [r3, #32]
 80126de:	781b      	ldrb	r3, [r3, #0]
 80126e0:	2be5      	cmp	r3, #229	@ 0xe5
 80126e2:	d004      	beq.n	80126ee <dir_alloc+0x50>
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	6a1b      	ldr	r3, [r3, #32]
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d107      	bne.n	80126fe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	3301      	adds	r3, #1
 80126f2:	613b      	str	r3, [r7, #16]
 80126f4:	693a      	ldr	r2, [r7, #16]
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d102      	bne.n	8012702 <dir_alloc+0x64>
 80126fc:	e00c      	b.n	8012718 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80126fe:	2300      	movs	r3, #0
 8012700:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012702:	2101      	movs	r1, #1
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f7ff ff05 	bl	8012514 <dir_next>
 801270a:	4603      	mov	r3, r0
 801270c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801270e:	7dfb      	ldrb	r3, [r7, #23]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d0d7      	beq.n	80126c4 <dir_alloc+0x26>
 8012714:	e000      	b.n	8012718 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012716:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012718:	7dfb      	ldrb	r3, [r7, #23]
 801271a:	2b04      	cmp	r3, #4
 801271c:	d101      	bne.n	8012722 <dir_alloc+0x84>
 801271e:	2307      	movs	r3, #7
 8012720:	75fb      	strb	r3, [r7, #23]
	return res;
 8012722:	7dfb      	ldrb	r3, [r7, #23]
}
 8012724:	4618      	mov	r0, r3
 8012726:	3718      	adds	r7, #24
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	331a      	adds	r3, #26
 801273a:	4618      	mov	r0, r3
 801273c:	f7ff f842 	bl	80117c4 <ld_word>
 8012740:	4603      	mov	r3, r0
 8012742:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	2b03      	cmp	r3, #3
 801274a:	d109      	bne.n	8012760 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801274c:	683b      	ldr	r3, [r7, #0]
 801274e:	3314      	adds	r3, #20
 8012750:	4618      	mov	r0, r3
 8012752:	f7ff f837 	bl	80117c4 <ld_word>
 8012756:	4603      	mov	r3, r0
 8012758:	041b      	lsls	r3, r3, #16
 801275a:	68fa      	ldr	r2, [r7, #12]
 801275c:	4313      	orrs	r3, r2
 801275e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012760:	68fb      	ldr	r3, [r7, #12]
}
 8012762:	4618      	mov	r0, r3
 8012764:	3710      	adds	r7, #16
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801276a:	b580      	push	{r7, lr}
 801276c:	b084      	sub	sp, #16
 801276e:	af00      	add	r7, sp, #0
 8012770:	60f8      	str	r0, [r7, #12]
 8012772:	60b9      	str	r1, [r7, #8]
 8012774:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012776:	68bb      	ldr	r3, [r7, #8]
 8012778:	331a      	adds	r3, #26
 801277a:	687a      	ldr	r2, [r7, #4]
 801277c:	b292      	uxth	r2, r2
 801277e:	4611      	mov	r1, r2
 8012780:	4618      	mov	r0, r3
 8012782:	f7ff f85a 	bl	801183a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	2b03      	cmp	r3, #3
 801278c:	d109      	bne.n	80127a2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	f103 0214 	add.w	r2, r3, #20
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	0c1b      	lsrs	r3, r3, #16
 8012798:	b29b      	uxth	r3, r3
 801279a:	4619      	mov	r1, r3
 801279c:	4610      	mov	r0, r2
 801279e:	f7ff f84c 	bl	801183a <st_word>
	}
}
 80127a2:	bf00      	nop
 80127a4:	3710      	adds	r7, #16
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}

080127aa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80127aa:	b580      	push	{r7, lr}
 80127ac:	b086      	sub	sp, #24
 80127ae:	af00      	add	r7, sp, #0
 80127b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80127b8:	2100      	movs	r1, #0
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f7ff fe2f 	bl	801241e <dir_sdi>
 80127c0:	4603      	mov	r3, r0
 80127c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80127c4:	7dfb      	ldrb	r3, [r7, #23]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d001      	beq.n	80127ce <dir_find+0x24>
 80127ca:	7dfb      	ldrb	r3, [r7, #23]
 80127cc:	e03e      	b.n	801284c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	69db      	ldr	r3, [r3, #28]
 80127d2:	4619      	mov	r1, r3
 80127d4:	6938      	ldr	r0, [r7, #16]
 80127d6:	f7ff faa5 	bl	8011d24 <move_window>
 80127da:	4603      	mov	r3, r0
 80127dc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80127de:	7dfb      	ldrb	r3, [r7, #23]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d12f      	bne.n	8012844 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	6a1b      	ldr	r3, [r3, #32]
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80127ec:	7bfb      	ldrb	r3, [r7, #15]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d102      	bne.n	80127f8 <dir_find+0x4e>
 80127f2:	2304      	movs	r3, #4
 80127f4:	75fb      	strb	r3, [r7, #23]
 80127f6:	e028      	b.n	801284a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6a1b      	ldr	r3, [r3, #32]
 80127fc:	330b      	adds	r3, #11
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012804:	b2da      	uxtb	r2, r3
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6a1b      	ldr	r3, [r3, #32]
 801280e:	330b      	adds	r3, #11
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	f003 0308 	and.w	r3, r3, #8
 8012816:	2b00      	cmp	r3, #0
 8012818:	d10a      	bne.n	8012830 <dir_find+0x86>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6a18      	ldr	r0, [r3, #32]
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	3324      	adds	r3, #36	@ 0x24
 8012822:	220b      	movs	r2, #11
 8012824:	4619      	mov	r1, r3
 8012826:	f7ff f88b 	bl	8011940 <mem_cmp>
 801282a:	4603      	mov	r3, r0
 801282c:	2b00      	cmp	r3, #0
 801282e:	d00b      	beq.n	8012848 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012830:	2100      	movs	r1, #0
 8012832:	6878      	ldr	r0, [r7, #4]
 8012834:	f7ff fe6e 	bl	8012514 <dir_next>
 8012838:	4603      	mov	r3, r0
 801283a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801283c:	7dfb      	ldrb	r3, [r7, #23]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d0c5      	beq.n	80127ce <dir_find+0x24>
 8012842:	e002      	b.n	801284a <dir_find+0xa0>
		if (res != FR_OK) break;
 8012844:	bf00      	nop
 8012846:	e000      	b.n	801284a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012848:	bf00      	nop

	return res;
 801284a:	7dfb      	ldrb	r3, [r7, #23]
}
 801284c:	4618      	mov	r0, r3
 801284e:	3718      	adds	r7, #24
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b084      	sub	sp, #16
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012862:	2101      	movs	r1, #1
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f7ff ff1a 	bl	801269e <dir_alloc>
 801286a:	4603      	mov	r3, r0
 801286c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801286e:	7bfb      	ldrb	r3, [r7, #15]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d11c      	bne.n	80128ae <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	69db      	ldr	r3, [r3, #28]
 8012878:	4619      	mov	r1, r3
 801287a:	68b8      	ldr	r0, [r7, #8]
 801287c:	f7ff fa52 	bl	8011d24 <move_window>
 8012880:	4603      	mov	r3, r0
 8012882:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012884:	7bfb      	ldrb	r3, [r7, #15]
 8012886:	2b00      	cmp	r3, #0
 8012888:	d111      	bne.n	80128ae <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	6a1b      	ldr	r3, [r3, #32]
 801288e:	2220      	movs	r2, #32
 8012890:	2100      	movs	r1, #0
 8012892:	4618      	mov	r0, r3
 8012894:	f7ff f839 	bl	801190a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	6a18      	ldr	r0, [r3, #32]
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	3324      	adds	r3, #36	@ 0x24
 80128a0:	220b      	movs	r2, #11
 80128a2:	4619      	mov	r1, r3
 80128a4:	f7ff f810 	bl	80118c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	2201      	movs	r2, #1
 80128ac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80128ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3710      	adds	r7, #16
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}

080128b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b088      	sub	sp, #32
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
 80128c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	60fb      	str	r3, [r7, #12]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	3324      	adds	r3, #36	@ 0x24
 80128cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80128ce:	220b      	movs	r2, #11
 80128d0:	2120      	movs	r1, #32
 80128d2:	68b8      	ldr	r0, [r7, #8]
 80128d4:	f7ff f819 	bl	801190a <mem_set>
	si = i = 0; ni = 8;
 80128d8:	2300      	movs	r3, #0
 80128da:	613b      	str	r3, [r7, #16]
 80128dc:	693b      	ldr	r3, [r7, #16]
 80128de:	61fb      	str	r3, [r7, #28]
 80128e0:	2308      	movs	r3, #8
 80128e2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80128e4:	69fb      	ldr	r3, [r7, #28]
 80128e6:	1c5a      	adds	r2, r3, #1
 80128e8:	61fa      	str	r2, [r7, #28]
 80128ea:	68fa      	ldr	r2, [r7, #12]
 80128ec:	4413      	add	r3, r2
 80128ee:	781b      	ldrb	r3, [r3, #0]
 80128f0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80128f2:	7efb      	ldrb	r3, [r7, #27]
 80128f4:	2b20      	cmp	r3, #32
 80128f6:	d94e      	bls.n	8012996 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80128f8:	7efb      	ldrb	r3, [r7, #27]
 80128fa:	2b2f      	cmp	r3, #47	@ 0x2f
 80128fc:	d006      	beq.n	801290c <create_name+0x54>
 80128fe:	7efb      	ldrb	r3, [r7, #27]
 8012900:	2b5c      	cmp	r3, #92	@ 0x5c
 8012902:	d110      	bne.n	8012926 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012904:	e002      	b.n	801290c <create_name+0x54>
 8012906:	69fb      	ldr	r3, [r7, #28]
 8012908:	3301      	adds	r3, #1
 801290a:	61fb      	str	r3, [r7, #28]
 801290c:	68fa      	ldr	r2, [r7, #12]
 801290e:	69fb      	ldr	r3, [r7, #28]
 8012910:	4413      	add	r3, r2
 8012912:	781b      	ldrb	r3, [r3, #0]
 8012914:	2b2f      	cmp	r3, #47	@ 0x2f
 8012916:	d0f6      	beq.n	8012906 <create_name+0x4e>
 8012918:	68fa      	ldr	r2, [r7, #12]
 801291a:	69fb      	ldr	r3, [r7, #28]
 801291c:	4413      	add	r3, r2
 801291e:	781b      	ldrb	r3, [r3, #0]
 8012920:	2b5c      	cmp	r3, #92	@ 0x5c
 8012922:	d0f0      	beq.n	8012906 <create_name+0x4e>
			break;
 8012924:	e038      	b.n	8012998 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012926:	7efb      	ldrb	r3, [r7, #27]
 8012928:	2b2e      	cmp	r3, #46	@ 0x2e
 801292a:	d003      	beq.n	8012934 <create_name+0x7c>
 801292c:	693a      	ldr	r2, [r7, #16]
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	429a      	cmp	r2, r3
 8012932:	d30c      	bcc.n	801294e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	2b0b      	cmp	r3, #11
 8012938:	d002      	beq.n	8012940 <create_name+0x88>
 801293a:	7efb      	ldrb	r3, [r7, #27]
 801293c:	2b2e      	cmp	r3, #46	@ 0x2e
 801293e:	d001      	beq.n	8012944 <create_name+0x8c>
 8012940:	2306      	movs	r3, #6
 8012942:	e044      	b.n	80129ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8012944:	2308      	movs	r3, #8
 8012946:	613b      	str	r3, [r7, #16]
 8012948:	230b      	movs	r3, #11
 801294a:	617b      	str	r3, [r7, #20]
			continue;
 801294c:	e022      	b.n	8012994 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801294e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012952:	2b00      	cmp	r3, #0
 8012954:	da04      	bge.n	8012960 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012956:	7efb      	ldrb	r3, [r7, #27]
 8012958:	3b80      	subs	r3, #128	@ 0x80
 801295a:	4a1f      	ldr	r2, [pc, #124]	@ (80129d8 <create_name+0x120>)
 801295c:	5cd3      	ldrb	r3, [r2, r3]
 801295e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012960:	7efb      	ldrb	r3, [r7, #27]
 8012962:	4619      	mov	r1, r3
 8012964:	481d      	ldr	r0, [pc, #116]	@ (80129dc <create_name+0x124>)
 8012966:	f7ff f812 	bl	801198e <chk_chr>
 801296a:	4603      	mov	r3, r0
 801296c:	2b00      	cmp	r3, #0
 801296e:	d001      	beq.n	8012974 <create_name+0xbc>
 8012970:	2306      	movs	r3, #6
 8012972:	e02c      	b.n	80129ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012974:	7efb      	ldrb	r3, [r7, #27]
 8012976:	2b60      	cmp	r3, #96	@ 0x60
 8012978:	d905      	bls.n	8012986 <create_name+0xce>
 801297a:	7efb      	ldrb	r3, [r7, #27]
 801297c:	2b7a      	cmp	r3, #122	@ 0x7a
 801297e:	d802      	bhi.n	8012986 <create_name+0xce>
 8012980:	7efb      	ldrb	r3, [r7, #27]
 8012982:	3b20      	subs	r3, #32
 8012984:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	1c5a      	adds	r2, r3, #1
 801298a:	613a      	str	r2, [r7, #16]
 801298c:	68ba      	ldr	r2, [r7, #8]
 801298e:	4413      	add	r3, r2
 8012990:	7efa      	ldrb	r2, [r7, #27]
 8012992:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012994:	e7a6      	b.n	80128e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012996:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012998:	68fa      	ldr	r2, [r7, #12]
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	441a      	add	r2, r3
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d101      	bne.n	80129ac <create_name+0xf4>
 80129a8:	2306      	movs	r3, #6
 80129aa:	e010      	b.n	80129ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	2be5      	cmp	r3, #229	@ 0xe5
 80129b2:	d102      	bne.n	80129ba <create_name+0x102>
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	2205      	movs	r2, #5
 80129b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80129ba:	7efb      	ldrb	r3, [r7, #27]
 80129bc:	2b20      	cmp	r3, #32
 80129be:	d801      	bhi.n	80129c4 <create_name+0x10c>
 80129c0:	2204      	movs	r2, #4
 80129c2:	e000      	b.n	80129c6 <create_name+0x10e>
 80129c4:	2200      	movs	r2, #0
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	330b      	adds	r3, #11
 80129ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80129cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	3720      	adds	r7, #32
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}
 80129d6:	bf00      	nop
 80129d8:	0801ad78 	.word	0x0801ad78
 80129dc:	080172dc 	.word	0x080172dc

080129e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b086      	sub	sp, #24
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80129ee:	693b      	ldr	r3, [r7, #16]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80129f4:	e002      	b.n	80129fc <follow_path+0x1c>
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	3301      	adds	r3, #1
 80129fa:	603b      	str	r3, [r7, #0]
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	2b2f      	cmp	r3, #47	@ 0x2f
 8012a02:	d0f8      	beq.n	80129f6 <follow_path+0x16>
 8012a04:	683b      	ldr	r3, [r7, #0]
 8012a06:	781b      	ldrb	r3, [r3, #0]
 8012a08:	2b5c      	cmp	r3, #92	@ 0x5c
 8012a0a:	d0f4      	beq.n	80129f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	2200      	movs	r2, #0
 8012a10:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	2b1f      	cmp	r3, #31
 8012a18:	d80a      	bhi.n	8012a30 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2280      	movs	r2, #128	@ 0x80
 8012a1e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8012a22:	2100      	movs	r1, #0
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f7ff fcfa 	bl	801241e <dir_sdi>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	75fb      	strb	r3, [r7, #23]
 8012a2e:	e043      	b.n	8012ab8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012a30:	463b      	mov	r3, r7
 8012a32:	4619      	mov	r1, r3
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f7ff ff3f 	bl	80128b8 <create_name>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012a3e:	7dfb      	ldrb	r3, [r7, #23]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d134      	bne.n	8012aae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f7ff feb0 	bl	80127aa <dir_find>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012a54:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012a56:	7dfb      	ldrb	r3, [r7, #23]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d00a      	beq.n	8012a72 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012a5c:	7dfb      	ldrb	r3, [r7, #23]
 8012a5e:	2b04      	cmp	r3, #4
 8012a60:	d127      	bne.n	8012ab2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012a62:	7afb      	ldrb	r3, [r7, #11]
 8012a64:	f003 0304 	and.w	r3, r3, #4
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d122      	bne.n	8012ab2 <follow_path+0xd2>
 8012a6c:	2305      	movs	r3, #5
 8012a6e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012a70:	e01f      	b.n	8012ab2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012a72:	7afb      	ldrb	r3, [r7, #11]
 8012a74:	f003 0304 	and.w	r3, r3, #4
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d11c      	bne.n	8012ab6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	799b      	ldrb	r3, [r3, #6]
 8012a80:	f003 0310 	and.w	r3, r3, #16
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d102      	bne.n	8012a8e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012a88:	2305      	movs	r3, #5
 8012a8a:	75fb      	strb	r3, [r7, #23]
 8012a8c:	e014      	b.n	8012ab8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	695b      	ldr	r3, [r3, #20]
 8012a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a9c:	4413      	add	r3, r2
 8012a9e:	4619      	mov	r1, r3
 8012aa0:	68f8      	ldr	r0, [r7, #12]
 8012aa2:	f7ff fe43 	bl	801272c <ld_clust>
 8012aa6:	4602      	mov	r2, r0
 8012aa8:	693b      	ldr	r3, [r7, #16]
 8012aaa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012aac:	e7c0      	b.n	8012a30 <follow_path+0x50>
			if (res != FR_OK) break;
 8012aae:	bf00      	nop
 8012ab0:	e002      	b.n	8012ab8 <follow_path+0xd8>
				break;
 8012ab2:	bf00      	nop
 8012ab4:	e000      	b.n	8012ab8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012ab6:	bf00      	nop
			}
		}
	}

	return res;
 8012ab8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012aba:	4618      	mov	r0, r3
 8012abc:	3718      	adds	r7, #24
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}

08012ac2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012ac2:	b480      	push	{r7}
 8012ac4:	b087      	sub	sp, #28
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012aca:	f04f 33ff 	mov.w	r3, #4294967295
 8012ace:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d031      	beq.n	8012b3c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	617b      	str	r3, [r7, #20]
 8012ade:	e002      	b.n	8012ae6 <get_ldnumber+0x24>
 8012ae0:	697b      	ldr	r3, [r7, #20]
 8012ae2:	3301      	adds	r3, #1
 8012ae4:	617b      	str	r3, [r7, #20]
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	2b20      	cmp	r3, #32
 8012aec:	d903      	bls.n	8012af6 <get_ldnumber+0x34>
 8012aee:	697b      	ldr	r3, [r7, #20]
 8012af0:	781b      	ldrb	r3, [r3, #0]
 8012af2:	2b3a      	cmp	r3, #58	@ 0x3a
 8012af4:	d1f4      	bne.n	8012ae0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	2b3a      	cmp	r3, #58	@ 0x3a
 8012afc:	d11c      	bne.n	8012b38 <get_ldnumber+0x76>
			tp = *path;
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	1c5a      	adds	r2, r3, #1
 8012b08:	60fa      	str	r2, [r7, #12]
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	3b30      	subs	r3, #48	@ 0x30
 8012b0e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	2b09      	cmp	r3, #9
 8012b14:	d80e      	bhi.n	8012b34 <get_ldnumber+0x72>
 8012b16:	68fa      	ldr	r2, [r7, #12]
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	429a      	cmp	r2, r3
 8012b1c:	d10a      	bne.n	8012b34 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d107      	bne.n	8012b34 <get_ldnumber+0x72>
					vol = (int)i;
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	617b      	str	r3, [r7, #20]
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	697a      	ldr	r2, [r7, #20]
 8012b32:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	e002      	b.n	8012b3e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012b38:	2300      	movs	r3, #0
 8012b3a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012b3c:	693b      	ldr	r3, [r7, #16]
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	371c      	adds	r7, #28
 8012b42:	46bd      	mov	sp, r7
 8012b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b48:	4770      	bx	lr
	...

08012b4c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b082      	sub	sp, #8
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
 8012b54:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2200      	movs	r2, #0
 8012b5a:	70da      	strb	r2, [r3, #3]
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8012b62:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012b64:	6839      	ldr	r1, [r7, #0]
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f7ff f8dc 	bl	8011d24 <move_window>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d001      	beq.n	8012b76 <check_fs+0x2a>
 8012b72:	2304      	movs	r3, #4
 8012b74:	e038      	b.n	8012be8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	3330      	adds	r3, #48	@ 0x30
 8012b7a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012b7e:	4618      	mov	r0, r3
 8012b80:	f7fe fe20 	bl	80117c4 <ld_word>
 8012b84:	4603      	mov	r3, r0
 8012b86:	461a      	mov	r2, r3
 8012b88:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d001      	beq.n	8012b94 <check_fs+0x48>
 8012b90:	2303      	movs	r3, #3
 8012b92:	e029      	b.n	8012be8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012b9a:	2be9      	cmp	r3, #233	@ 0xe9
 8012b9c:	d009      	beq.n	8012bb2 <check_fs+0x66>
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012ba4:	2beb      	cmp	r3, #235	@ 0xeb
 8012ba6:	d11e      	bne.n	8012be6 <check_fs+0x9a>
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8012bae:	2b90      	cmp	r3, #144	@ 0x90
 8012bb0:	d119      	bne.n	8012be6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	3330      	adds	r3, #48	@ 0x30
 8012bb6:	3336      	adds	r3, #54	@ 0x36
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f7fe fe1b 	bl	80117f4 <ld_dword>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8012bf0 <check_fs+0xa4>)
 8012bc6:	4293      	cmp	r3, r2
 8012bc8:	d101      	bne.n	8012bce <check_fs+0x82>
 8012bca:	2300      	movs	r3, #0
 8012bcc:	e00c      	b.n	8012be8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	3330      	adds	r3, #48	@ 0x30
 8012bd2:	3352      	adds	r3, #82	@ 0x52
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7fe fe0d 	bl	80117f4 <ld_dword>
 8012bda:	4603      	mov	r3, r0
 8012bdc:	4a05      	ldr	r2, [pc, #20]	@ (8012bf4 <check_fs+0xa8>)
 8012bde:	4293      	cmp	r3, r2
 8012be0:	d101      	bne.n	8012be6 <check_fs+0x9a>
 8012be2:	2300      	movs	r3, #0
 8012be4:	e000      	b.n	8012be8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012be6:	2302      	movs	r3, #2
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	3708      	adds	r7, #8
 8012bec:	46bd      	mov	sp, r7
 8012bee:	bd80      	pop	{r7, pc}
 8012bf0:	00544146 	.word	0x00544146
 8012bf4:	33544146 	.word	0x33544146

08012bf8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b096      	sub	sp, #88	@ 0x58
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	60f8      	str	r0, [r7, #12]
 8012c00:	60b9      	str	r1, [r7, #8]
 8012c02:	4613      	mov	r3, r2
 8012c04:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012c06:	68bb      	ldr	r3, [r7, #8]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012c0c:	68f8      	ldr	r0, [r7, #12]
 8012c0e:	f7ff ff58 	bl	8012ac2 <get_ldnumber>
 8012c12:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	da01      	bge.n	8012c1e <find_volume+0x26>
 8012c1a:	230b      	movs	r3, #11
 8012c1c:	e22d      	b.n	801307a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012c1e:	4aa1      	ldr	r2, [pc, #644]	@ (8012ea4 <find_volume+0x2ac>)
 8012c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c26:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d101      	bne.n	8012c32 <find_volume+0x3a>
 8012c2e:	230c      	movs	r3, #12
 8012c30:	e223      	b.n	801307a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012c36:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012c38:	79fb      	ldrb	r3, [r7, #7]
 8012c3a:	f023 0301 	bic.w	r3, r3, #1
 8012c3e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c42:	781b      	ldrb	r3, [r3, #0]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d01a      	beq.n	8012c7e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c4a:	785b      	ldrb	r3, [r3, #1]
 8012c4c:	4618      	mov	r0, r3
 8012c4e:	f7fe fd1b 	bl	8011688 <disk_status>
 8012c52:	4603      	mov	r3, r0
 8012c54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012c58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012c5c:	f003 0301 	and.w	r3, r3, #1
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d10c      	bne.n	8012c7e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012c64:	79fb      	ldrb	r3, [r7, #7]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d007      	beq.n	8012c7a <find_volume+0x82>
 8012c6a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012c6e:	f003 0304 	and.w	r3, r3, #4
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d001      	beq.n	8012c7a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012c76:	230a      	movs	r3, #10
 8012c78:	e1ff      	b.n	801307a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	e1fd      	b.n	801307a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c80:	2200      	movs	r2, #0
 8012c82:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012c84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c86:	b2da      	uxtb	r2, r3
 8012c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c8a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c8e:	785b      	ldrb	r3, [r3, #1]
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7fe fd13 	bl	80116bc <disk_initialize>
 8012c96:	4603      	mov	r3, r0
 8012c98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012c9c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012ca0:	f003 0301 	and.w	r3, r3, #1
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d001      	beq.n	8012cac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012ca8:	2303      	movs	r3, #3
 8012caa:	e1e6      	b.n	801307a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012cac:	79fb      	ldrb	r3, [r7, #7]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d007      	beq.n	8012cc2 <find_volume+0xca>
 8012cb2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012cb6:	f003 0304 	and.w	r3, r3, #4
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d001      	beq.n	8012cc2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012cbe:	230a      	movs	r3, #10
 8012cc0:	e1db      	b.n	801307a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012cc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012cc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012cca:	f7ff ff3f 	bl	8012b4c <check_fs>
 8012cce:	4603      	mov	r3, r0
 8012cd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012cd8:	2b02      	cmp	r3, #2
 8012cda:	d149      	bne.n	8012d70 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012cdc:	2300      	movs	r3, #0
 8012cde:	643b      	str	r3, [r7, #64]	@ 0x40
 8012ce0:	e01e      	b.n	8012d20 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ce4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012ce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012cea:	011b      	lsls	r3, r3, #4
 8012cec:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012cf0:	4413      	add	r3, r2
 8012cf2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cf6:	3304      	adds	r3, #4
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d006      	beq.n	8012d0c <find_volume+0x114>
 8012cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d00:	3308      	adds	r3, #8
 8012d02:	4618      	mov	r0, r3
 8012d04:	f7fe fd76 	bl	80117f4 <ld_dword>
 8012d08:	4602      	mov	r2, r0
 8012d0a:	e000      	b.n	8012d0e <find_volume+0x116>
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	3358      	adds	r3, #88	@ 0x58
 8012d14:	443b      	add	r3, r7
 8012d16:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d1c:	3301      	adds	r3, #1
 8012d1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d22:	2b03      	cmp	r3, #3
 8012d24:	d9dd      	bls.n	8012ce2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012d26:	2300      	movs	r3, #0
 8012d28:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8012d2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d002      	beq.n	8012d36 <find_volume+0x13e>
 8012d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d32:	3b01      	subs	r3, #1
 8012d34:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012d36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d38:	009b      	lsls	r3, r3, #2
 8012d3a:	3358      	adds	r3, #88	@ 0x58
 8012d3c:	443b      	add	r3, r7
 8012d3e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012d42:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012d44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d005      	beq.n	8012d56 <find_volume+0x15e>
 8012d4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012d4c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012d4e:	f7ff fefd 	bl	8012b4c <check_fs>
 8012d52:	4603      	mov	r3, r0
 8012d54:	e000      	b.n	8012d58 <find_volume+0x160>
 8012d56:	2303      	movs	r3, #3
 8012d58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012d5c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012d60:	2b01      	cmp	r3, #1
 8012d62:	d905      	bls.n	8012d70 <find_volume+0x178>
 8012d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d66:	3301      	adds	r3, #1
 8012d68:	643b      	str	r3, [r7, #64]	@ 0x40
 8012d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012d6c:	2b03      	cmp	r3, #3
 8012d6e:	d9e2      	bls.n	8012d36 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012d70:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012d74:	2b04      	cmp	r3, #4
 8012d76:	d101      	bne.n	8012d7c <find_volume+0x184>
 8012d78:	2301      	movs	r3, #1
 8012d7a:	e17e      	b.n	801307a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d901      	bls.n	8012d88 <find_volume+0x190>
 8012d84:	230d      	movs	r3, #13
 8012d86:	e178      	b.n	801307a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d8a:	3330      	adds	r3, #48	@ 0x30
 8012d8c:	330b      	adds	r3, #11
 8012d8e:	4618      	mov	r0, r3
 8012d90:	f7fe fd18 	bl	80117c4 <ld_word>
 8012d94:	4603      	mov	r3, r0
 8012d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012d9a:	d001      	beq.n	8012da0 <find_volume+0x1a8>
 8012d9c:	230d      	movs	r3, #13
 8012d9e:	e16c      	b.n	801307a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012da2:	3330      	adds	r3, #48	@ 0x30
 8012da4:	3316      	adds	r3, #22
 8012da6:	4618      	mov	r0, r3
 8012da8:	f7fe fd0c 	bl	80117c4 <ld_word>
 8012dac:	4603      	mov	r3, r0
 8012dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012db0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d106      	bne.n	8012dc4 <find_volume+0x1cc>
 8012db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012db8:	3330      	adds	r3, #48	@ 0x30
 8012dba:	3324      	adds	r3, #36	@ 0x24
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7fe fd19 	bl	80117f4 <ld_dword>
 8012dc2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8012dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012dc8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dcc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8012dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dd2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dd6:	789b      	ldrb	r3, [r3, #2]
 8012dd8:	2b01      	cmp	r3, #1
 8012dda:	d005      	beq.n	8012de8 <find_volume+0x1f0>
 8012ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dde:	789b      	ldrb	r3, [r3, #2]
 8012de0:	2b02      	cmp	r3, #2
 8012de2:	d001      	beq.n	8012de8 <find_volume+0x1f0>
 8012de4:	230d      	movs	r3, #13
 8012de6:	e148      	b.n	801307a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012dea:	789b      	ldrb	r3, [r3, #2]
 8012dec:	461a      	mov	r2, r3
 8012dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012df0:	fb02 f303 	mul.w	r3, r2, r3
 8012df4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e00:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e04:	895b      	ldrh	r3, [r3, #10]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d008      	beq.n	8012e1c <find_volume+0x224>
 8012e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e0c:	895b      	ldrh	r3, [r3, #10]
 8012e0e:	461a      	mov	r2, r3
 8012e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e12:	895b      	ldrh	r3, [r3, #10]
 8012e14:	3b01      	subs	r3, #1
 8012e16:	4013      	ands	r3, r2
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d001      	beq.n	8012e20 <find_volume+0x228>
 8012e1c:	230d      	movs	r3, #13
 8012e1e:	e12c      	b.n	801307a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e22:	3330      	adds	r3, #48	@ 0x30
 8012e24:	3311      	adds	r3, #17
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7fe fccc 	bl	80117c4 <ld_word>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	461a      	mov	r2, r3
 8012e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e32:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e36:	891b      	ldrh	r3, [r3, #8]
 8012e38:	f003 030f 	and.w	r3, r3, #15
 8012e3c:	b29b      	uxth	r3, r3
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d001      	beq.n	8012e46 <find_volume+0x24e>
 8012e42:	230d      	movs	r3, #13
 8012e44:	e119      	b.n	801307a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e48:	3330      	adds	r3, #48	@ 0x30
 8012e4a:	3313      	adds	r3, #19
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7fe fcb9 	bl	80117c4 <ld_word>
 8012e52:	4603      	mov	r3, r0
 8012e54:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d106      	bne.n	8012e6a <find_volume+0x272>
 8012e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e5e:	3330      	adds	r3, #48	@ 0x30
 8012e60:	3320      	adds	r3, #32
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7fe fcc6 	bl	80117f4 <ld_dword>
 8012e68:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e6c:	3330      	adds	r3, #48	@ 0x30
 8012e6e:	330e      	adds	r3, #14
 8012e70:	4618      	mov	r0, r3
 8012e72:	f7fe fca7 	bl	80117c4 <ld_word>
 8012e76:	4603      	mov	r3, r0
 8012e78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012e7a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d101      	bne.n	8012e84 <find_volume+0x28c>
 8012e80:	230d      	movs	r3, #13
 8012e82:	e0fa      	b.n	801307a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012e84:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e88:	4413      	add	r3, r2
 8012e8a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012e8c:	8912      	ldrh	r2, [r2, #8]
 8012e8e:	0912      	lsrs	r2, r2, #4
 8012e90:	b292      	uxth	r2, r2
 8012e92:	4413      	add	r3, r2
 8012e94:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012e96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d204      	bcs.n	8012ea8 <find_volume+0x2b0>
 8012e9e:	230d      	movs	r3, #13
 8012ea0:	e0eb      	b.n	801307a <find_volume+0x482>
 8012ea2:	bf00      	nop
 8012ea4:	200065b8 	.word	0x200065b8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012ea8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eac:	1ad3      	subs	r3, r2, r3
 8012eae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012eb0:	8952      	ldrh	r2, [r2, #10]
 8012eb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8012eb6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d101      	bne.n	8012ec2 <find_volume+0x2ca>
 8012ebe:	230d      	movs	r3, #13
 8012ec0:	e0db      	b.n	801307a <find_volume+0x482>
		fmt = FS_FAT32;
 8012ec2:	2303      	movs	r3, #3
 8012ec4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eca:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	d802      	bhi.n	8012ed8 <find_volume+0x2e0>
 8012ed2:	2302      	movs	r3, #2
 8012ed4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eda:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012ede:	4293      	cmp	r3, r2
 8012ee0:	d802      	bhi.n	8012ee8 <find_volume+0x2f0>
 8012ee2:	2301      	movs	r3, #1
 8012ee4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eea:	1c9a      	adds	r2, r3, #2
 8012eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012eee:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ef2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012ef4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012ef6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012ef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012efa:	441a      	add	r2, r3
 8012efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012efe:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012f00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f04:	441a      	add	r2, r3
 8012f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f08:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8012f0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012f0e:	2b03      	cmp	r3, #3
 8012f10:	d11e      	bne.n	8012f50 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f14:	3330      	adds	r3, #48	@ 0x30
 8012f16:	332a      	adds	r3, #42	@ 0x2a
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7fe fc53 	bl	80117c4 <ld_word>
 8012f1e:	4603      	mov	r3, r0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d001      	beq.n	8012f28 <find_volume+0x330>
 8012f24:	230d      	movs	r3, #13
 8012f26:	e0a8      	b.n	801307a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f2a:	891b      	ldrh	r3, [r3, #8]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d001      	beq.n	8012f34 <find_volume+0x33c>
 8012f30:	230d      	movs	r3, #13
 8012f32:	e0a2      	b.n	801307a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f36:	3330      	adds	r3, #48	@ 0x30
 8012f38:	332c      	adds	r3, #44	@ 0x2c
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7fe fc5a 	bl	80117f4 <ld_dword>
 8012f40:	4602      	mov	r2, r0
 8012f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f44:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f48:	695b      	ldr	r3, [r3, #20]
 8012f4a:	009b      	lsls	r3, r3, #2
 8012f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8012f4e:	e01f      	b.n	8012f90 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f52:	891b      	ldrh	r3, [r3, #8]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d101      	bne.n	8012f5c <find_volume+0x364>
 8012f58:	230d      	movs	r3, #13
 8012f5a:	e08e      	b.n	801307a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f5e:	6a1a      	ldr	r2, [r3, #32]
 8012f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f62:	441a      	add	r2, r3
 8012f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f66:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012f68:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012f6c:	2b02      	cmp	r3, #2
 8012f6e:	d103      	bne.n	8012f78 <find_volume+0x380>
 8012f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f72:	695b      	ldr	r3, [r3, #20]
 8012f74:	005b      	lsls	r3, r3, #1
 8012f76:	e00a      	b.n	8012f8e <find_volume+0x396>
 8012f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f7a:	695a      	ldr	r2, [r3, #20]
 8012f7c:	4613      	mov	r3, r2
 8012f7e:	005b      	lsls	r3, r3, #1
 8012f80:	4413      	add	r3, r2
 8012f82:	085a      	lsrs	r2, r3, #1
 8012f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f86:	695b      	ldr	r3, [r3, #20]
 8012f88:	f003 0301 	and.w	r3, r3, #1
 8012f8c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012f8e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012f92:	699a      	ldr	r2, [r3, #24]
 8012f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f96:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8012f9a:	0a5b      	lsrs	r3, r3, #9
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	d201      	bcs.n	8012fa4 <find_volume+0x3ac>
 8012fa0:	230d      	movs	r3, #13
 8012fa2:	e06a      	b.n	801307a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8012faa:	611a      	str	r2, [r3, #16]
 8012fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fae:	691a      	ldr	r2, [r3, #16]
 8012fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fb2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8012fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fb6:	2280      	movs	r2, #128	@ 0x80
 8012fb8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012fba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012fbe:	2b03      	cmp	r3, #3
 8012fc0:	d149      	bne.n	8013056 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fc4:	3330      	adds	r3, #48	@ 0x30
 8012fc6:	3330      	adds	r3, #48	@ 0x30
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f7fe fbfb 	bl	80117c4 <ld_word>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	2b01      	cmp	r3, #1
 8012fd2:	d140      	bne.n	8013056 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012fd6:	3301      	adds	r3, #1
 8012fd8:	4619      	mov	r1, r3
 8012fda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012fdc:	f7fe fea2 	bl	8011d24 <move_window>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d137      	bne.n	8013056 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8012fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fe8:	2200      	movs	r2, #0
 8012fea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fee:	3330      	adds	r3, #48	@ 0x30
 8012ff0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	f7fe fbe5 	bl	80117c4 <ld_word>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	461a      	mov	r2, r3
 8012ffe:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013002:	429a      	cmp	r2, r3
 8013004:	d127      	bne.n	8013056 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013008:	3330      	adds	r3, #48	@ 0x30
 801300a:	4618      	mov	r0, r3
 801300c:	f7fe fbf2 	bl	80117f4 <ld_dword>
 8013010:	4603      	mov	r3, r0
 8013012:	4a1c      	ldr	r2, [pc, #112]	@ (8013084 <find_volume+0x48c>)
 8013014:	4293      	cmp	r3, r2
 8013016:	d11e      	bne.n	8013056 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801301a:	3330      	adds	r3, #48	@ 0x30
 801301c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013020:	4618      	mov	r0, r3
 8013022:	f7fe fbe7 	bl	80117f4 <ld_dword>
 8013026:	4603      	mov	r3, r0
 8013028:	4a17      	ldr	r2, [pc, #92]	@ (8013088 <find_volume+0x490>)
 801302a:	4293      	cmp	r3, r2
 801302c:	d113      	bne.n	8013056 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801302e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013030:	3330      	adds	r3, #48	@ 0x30
 8013032:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013036:	4618      	mov	r0, r3
 8013038:	f7fe fbdc 	bl	80117f4 <ld_dword>
 801303c:	4602      	mov	r2, r0
 801303e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013040:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013044:	3330      	adds	r3, #48	@ 0x30
 8013046:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 801304a:	4618      	mov	r0, r3
 801304c:	f7fe fbd2 	bl	80117f4 <ld_dword>
 8013050:	4602      	mov	r2, r0
 8013052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013054:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013058:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 801305c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801305e:	4b0b      	ldr	r3, [pc, #44]	@ (801308c <find_volume+0x494>)
 8013060:	881b      	ldrh	r3, [r3, #0]
 8013062:	3301      	adds	r3, #1
 8013064:	b29a      	uxth	r2, r3
 8013066:	4b09      	ldr	r3, [pc, #36]	@ (801308c <find_volume+0x494>)
 8013068:	801a      	strh	r2, [r3, #0]
 801306a:	4b08      	ldr	r3, [pc, #32]	@ (801308c <find_volume+0x494>)
 801306c:	881a      	ldrh	r2, [r3, #0]
 801306e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013070:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013072:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013074:	f7fe fdee 	bl	8011c54 <clear_lock>
#endif
	return FR_OK;
 8013078:	2300      	movs	r3, #0
}
 801307a:	4618      	mov	r0, r3
 801307c:	3758      	adds	r7, #88	@ 0x58
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
 8013082:	bf00      	nop
 8013084:	41615252 	.word	0x41615252
 8013088:	61417272 	.word	0x61417272
 801308c:	200065bc 	.word	0x200065bc

08013090 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b084      	sub	sp, #16
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
 8013098:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801309a:	2309      	movs	r3, #9
 801309c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d01c      	beq.n	80130de <validate+0x4e>
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d018      	beq.n	80130de <validate+0x4e>
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d013      	beq.n	80130de <validate+0x4e>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	889a      	ldrh	r2, [r3, #4]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	88db      	ldrh	r3, [r3, #6]
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d10c      	bne.n	80130de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	785b      	ldrb	r3, [r3, #1]
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7fe fadc 	bl	8011688 <disk_status>
 80130d0:	4603      	mov	r3, r0
 80130d2:	f003 0301 	and.w	r3, r3, #1
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d101      	bne.n	80130de <validate+0x4e>
			res = FR_OK;
 80130da:	2300      	movs	r3, #0
 80130dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80130de:	7bfb      	ldrb	r3, [r7, #15]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d102      	bne.n	80130ea <validate+0x5a>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	e000      	b.n	80130ec <validate+0x5c>
 80130ea:	2300      	movs	r3, #0
 80130ec:	683a      	ldr	r2, [r7, #0]
 80130ee:	6013      	str	r3, [r2, #0]
	return res;
 80130f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80130f2:	4618      	mov	r0, r3
 80130f4:	3710      	adds	r7, #16
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}
	...

080130fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b088      	sub	sp, #32
 8013100:	af00      	add	r7, sp, #0
 8013102:	60f8      	str	r0, [r7, #12]
 8013104:	60b9      	str	r1, [r7, #8]
 8013106:	4613      	mov	r3, r2
 8013108:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801310e:	f107 0310 	add.w	r3, r7, #16
 8013112:	4618      	mov	r0, r3
 8013114:	f7ff fcd5 	bl	8012ac2 <get_ldnumber>
 8013118:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801311a:	69fb      	ldr	r3, [r7, #28]
 801311c:	2b00      	cmp	r3, #0
 801311e:	da01      	bge.n	8013124 <f_mount+0x28>
 8013120:	230b      	movs	r3, #11
 8013122:	e02b      	b.n	801317c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013124:	4a17      	ldr	r2, [pc, #92]	@ (8013184 <f_mount+0x88>)
 8013126:	69fb      	ldr	r3, [r7, #28]
 8013128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801312c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801312e:	69bb      	ldr	r3, [r7, #24]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d005      	beq.n	8013140 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013134:	69b8      	ldr	r0, [r7, #24]
 8013136:	f7fe fd8d 	bl	8011c54 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801313a:	69bb      	ldr	r3, [r7, #24]
 801313c:	2200      	movs	r2, #0
 801313e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	2b00      	cmp	r3, #0
 8013144:	d002      	beq.n	801314c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	2200      	movs	r2, #0
 801314a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801314c:	68fa      	ldr	r2, [r7, #12]
 801314e:	490d      	ldr	r1, [pc, #52]	@ (8013184 <f_mount+0x88>)
 8013150:	69fb      	ldr	r3, [r7, #28]
 8013152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	2b00      	cmp	r3, #0
 801315a:	d002      	beq.n	8013162 <f_mount+0x66>
 801315c:	79fb      	ldrb	r3, [r7, #7]
 801315e:	2b01      	cmp	r3, #1
 8013160:	d001      	beq.n	8013166 <f_mount+0x6a>
 8013162:	2300      	movs	r3, #0
 8013164:	e00a      	b.n	801317c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013166:	f107 010c 	add.w	r1, r7, #12
 801316a:	f107 0308 	add.w	r3, r7, #8
 801316e:	2200      	movs	r2, #0
 8013170:	4618      	mov	r0, r3
 8013172:	f7ff fd41 	bl	8012bf8 <find_volume>
 8013176:	4603      	mov	r3, r0
 8013178:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801317a:	7dfb      	ldrb	r3, [r7, #23]
}
 801317c:	4618      	mov	r0, r3
 801317e:	3720      	adds	r7, #32
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	200065b8 	.word	0x200065b8

08013188 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	b098      	sub	sp, #96	@ 0x60
 801318c:	af00      	add	r7, sp, #0
 801318e:	60f8      	str	r0, [r7, #12]
 8013190:	60b9      	str	r1, [r7, #8]
 8013192:	4613      	mov	r3, r2
 8013194:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d101      	bne.n	80131a0 <f_open+0x18>
 801319c:	2309      	movs	r3, #9
 801319e:	e1a9      	b.n	80134f4 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80131a0:	79fb      	ldrb	r3, [r7, #7]
 80131a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80131a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80131a8:	79fa      	ldrb	r2, [r7, #7]
 80131aa:	f107 0110 	add.w	r1, r7, #16
 80131ae:	f107 0308 	add.w	r3, r7, #8
 80131b2:	4618      	mov	r0, r3
 80131b4:	f7ff fd20 	bl	8012bf8 <find_volume>
 80131b8:	4603      	mov	r3, r0
 80131ba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80131be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	f040 818d 	bne.w	80134e2 <f_open+0x35a>
		dj.obj.fs = fs;
 80131c8:	693b      	ldr	r3, [r7, #16]
 80131ca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80131cc:	68ba      	ldr	r2, [r7, #8]
 80131ce:	f107 0314 	add.w	r3, r7, #20
 80131d2:	4611      	mov	r1, r2
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7ff fc03 	bl	80129e0 <follow_path>
 80131da:	4603      	mov	r3, r0
 80131dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80131e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d118      	bne.n	801321a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80131e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80131ec:	b25b      	sxtb	r3, r3
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	da03      	bge.n	80131fa <f_open+0x72>
				res = FR_INVALID_NAME;
 80131f2:	2306      	movs	r3, #6
 80131f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80131f8:	e00f      	b.n	801321a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80131fa:	79fb      	ldrb	r3, [r7, #7]
 80131fc:	2b01      	cmp	r3, #1
 80131fe:	bf8c      	ite	hi
 8013200:	2301      	movhi	r3, #1
 8013202:	2300      	movls	r3, #0
 8013204:	b2db      	uxtb	r3, r3
 8013206:	461a      	mov	r2, r3
 8013208:	f107 0314 	add.w	r3, r7, #20
 801320c:	4611      	mov	r1, r2
 801320e:	4618      	mov	r0, r3
 8013210:	f7fe fbd8 	bl	80119c4 <chk_lock>
 8013214:	4603      	mov	r3, r0
 8013216:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801321a:	79fb      	ldrb	r3, [r7, #7]
 801321c:	f003 031c 	and.w	r3, r3, #28
 8013220:	2b00      	cmp	r3, #0
 8013222:	d07f      	beq.n	8013324 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8013224:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013228:	2b00      	cmp	r3, #0
 801322a:	d017      	beq.n	801325c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801322c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013230:	2b04      	cmp	r3, #4
 8013232:	d10e      	bne.n	8013252 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013234:	f7fe fc22 	bl	8011a7c <enq_lock>
 8013238:	4603      	mov	r3, r0
 801323a:	2b00      	cmp	r3, #0
 801323c:	d006      	beq.n	801324c <f_open+0xc4>
 801323e:	f107 0314 	add.w	r3, r7, #20
 8013242:	4618      	mov	r0, r3
 8013244:	f7ff fb06 	bl	8012854 <dir_register>
 8013248:	4603      	mov	r3, r0
 801324a:	e000      	b.n	801324e <f_open+0xc6>
 801324c:	2312      	movs	r3, #18
 801324e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013252:	79fb      	ldrb	r3, [r7, #7]
 8013254:	f043 0308 	orr.w	r3, r3, #8
 8013258:	71fb      	strb	r3, [r7, #7]
 801325a:	e010      	b.n	801327e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801325c:	7ebb      	ldrb	r3, [r7, #26]
 801325e:	f003 0311 	and.w	r3, r3, #17
 8013262:	2b00      	cmp	r3, #0
 8013264:	d003      	beq.n	801326e <f_open+0xe6>
					res = FR_DENIED;
 8013266:	2307      	movs	r3, #7
 8013268:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801326c:	e007      	b.n	801327e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801326e:	79fb      	ldrb	r3, [r7, #7]
 8013270:	f003 0304 	and.w	r3, r3, #4
 8013274:	2b00      	cmp	r3, #0
 8013276:	d002      	beq.n	801327e <f_open+0xf6>
 8013278:	2308      	movs	r3, #8
 801327a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801327e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013282:	2b00      	cmp	r3, #0
 8013284:	d168      	bne.n	8013358 <f_open+0x1d0>
 8013286:	79fb      	ldrb	r3, [r7, #7]
 8013288:	f003 0308 	and.w	r3, r3, #8
 801328c:	2b00      	cmp	r3, #0
 801328e:	d063      	beq.n	8013358 <f_open+0x1d0>
				dw = GET_FATTIME();
 8013290:	f7fd ffb8 	bl	8011204 <get_fattime>
 8013294:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013298:	330e      	adds	r3, #14
 801329a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801329c:	4618      	mov	r0, r3
 801329e:	f7fe fae7 	bl	8011870 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80132a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132a4:	3316      	adds	r3, #22
 80132a6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fe fae1 	bl	8011870 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80132ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132b0:	330b      	adds	r3, #11
 80132b2:	2220      	movs	r2, #32
 80132b4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80132ba:	4611      	mov	r1, r2
 80132bc:	4618      	mov	r0, r3
 80132be:	f7ff fa35 	bl	801272c <ld_clust>
 80132c2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80132c4:	693b      	ldr	r3, [r7, #16]
 80132c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80132c8:	2200      	movs	r2, #0
 80132ca:	4618      	mov	r0, r3
 80132cc:	f7ff fa4d 	bl	801276a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80132d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132d2:	331c      	adds	r3, #28
 80132d4:	2100      	movs	r1, #0
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7fe faca 	bl	8011870 <st_dword>
					fs->wflag = 1;
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	2201      	movs	r2, #1
 80132e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80132e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d037      	beq.n	8013358 <f_open+0x1d0>
						dw = fs->winsect;
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132ec:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80132ee:	f107 0314 	add.w	r3, r7, #20
 80132f2:	2200      	movs	r2, #0
 80132f4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80132f6:	4618      	mov	r0, r3
 80132f8:	f7fe ff60 	bl	80121bc <remove_chain>
 80132fc:	4603      	mov	r3, r0
 80132fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8013302:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013306:	2b00      	cmp	r3, #0
 8013308:	d126      	bne.n	8013358 <f_open+0x1d0>
							res = move_window(fs, dw);
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801330e:	4618      	mov	r0, r3
 8013310:	f7fe fd08 	bl	8011d24 <move_window>
 8013314:	4603      	mov	r3, r0
 8013316:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801331e:	3a01      	subs	r2, #1
 8013320:	60da      	str	r2, [r3, #12]
 8013322:	e019      	b.n	8013358 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013324:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013328:	2b00      	cmp	r3, #0
 801332a:	d115      	bne.n	8013358 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801332c:	7ebb      	ldrb	r3, [r7, #26]
 801332e:	f003 0310 	and.w	r3, r3, #16
 8013332:	2b00      	cmp	r3, #0
 8013334:	d003      	beq.n	801333e <f_open+0x1b6>
					res = FR_NO_FILE;
 8013336:	2304      	movs	r3, #4
 8013338:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801333c:	e00c      	b.n	8013358 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801333e:	79fb      	ldrb	r3, [r7, #7]
 8013340:	f003 0302 	and.w	r3, r3, #2
 8013344:	2b00      	cmp	r3, #0
 8013346:	d007      	beq.n	8013358 <f_open+0x1d0>
 8013348:	7ebb      	ldrb	r3, [r7, #26]
 801334a:	f003 0301 	and.w	r3, r3, #1
 801334e:	2b00      	cmp	r3, #0
 8013350:	d002      	beq.n	8013358 <f_open+0x1d0>
						res = FR_DENIED;
 8013352:	2307      	movs	r3, #7
 8013354:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8013358:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801335c:	2b00      	cmp	r3, #0
 801335e:	d126      	bne.n	80133ae <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013360:	79fb      	ldrb	r3, [r7, #7]
 8013362:	f003 0308 	and.w	r3, r3, #8
 8013366:	2b00      	cmp	r3, #0
 8013368:	d003      	beq.n	8013372 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 801336a:	79fb      	ldrb	r3, [r7, #7]
 801336c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013370:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 801337a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013380:	79fb      	ldrb	r3, [r7, #7]
 8013382:	2b01      	cmp	r3, #1
 8013384:	bf8c      	ite	hi
 8013386:	2301      	movhi	r3, #1
 8013388:	2300      	movls	r3, #0
 801338a:	b2db      	uxtb	r3, r3
 801338c:	461a      	mov	r2, r3
 801338e:	f107 0314 	add.w	r3, r7, #20
 8013392:	4611      	mov	r1, r2
 8013394:	4618      	mov	r0, r3
 8013396:	f7fe fb93 	bl	8011ac0 <inc_lock>
 801339a:	4602      	mov	r2, r0
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	691b      	ldr	r3, [r3, #16]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d102      	bne.n	80133ae <f_open+0x226>
 80133a8:	2302      	movs	r3, #2
 80133aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80133ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	f040 8095 	bne.w	80134e2 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80133b8:	693b      	ldr	r3, [r7, #16]
 80133ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80133bc:	4611      	mov	r1, r2
 80133be:	4618      	mov	r0, r3
 80133c0:	f7ff f9b4 	bl	801272c <ld_clust>
 80133c4:	4602      	mov	r2, r0
 80133c6:	68fb      	ldr	r3, [r7, #12]
 80133c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80133ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133cc:	331c      	adds	r3, #28
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fe fa10 	bl	80117f4 <ld_dword>
 80133d4:	4602      	mov	r2, r0
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	2200      	movs	r2, #0
 80133de:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80133e0:	693a      	ldr	r2, [r7, #16]
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	88da      	ldrh	r2, [r3, #6]
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	79fa      	ldrb	r2, [r7, #7]
 80133f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2200      	movs	r2, #0
 80133f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	2200      	movs	r2, #0
 80133fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	2200      	movs	r2, #0
 8013404:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	3330      	adds	r3, #48	@ 0x30
 801340a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801340e:	2100      	movs	r1, #0
 8013410:	4618      	mov	r0, r3
 8013412:	f7fe fa7a 	bl	801190a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013416:	79fb      	ldrb	r3, [r7, #7]
 8013418:	f003 0320 	and.w	r3, r3, #32
 801341c:	2b00      	cmp	r3, #0
 801341e:	d060      	beq.n	80134e2 <f_open+0x35a>
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	68db      	ldr	r3, [r3, #12]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d05c      	beq.n	80134e2 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	68da      	ldr	r2, [r3, #12]
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	895b      	ldrh	r3, [r3, #10]
 8013434:	025b      	lsls	r3, r3, #9
 8013436:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	689b      	ldr	r3, [r3, #8]
 801343c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	68db      	ldr	r3, [r3, #12]
 8013442:	657b      	str	r3, [r7, #84]	@ 0x54
 8013444:	e016      	b.n	8013474 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801344a:	4618      	mov	r0, r3
 801344c:	f7fe fd25 	bl	8011e9a <get_fat>
 8013450:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013452:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013454:	2b01      	cmp	r3, #1
 8013456:	d802      	bhi.n	801345e <f_open+0x2d6>
 8013458:	2302      	movs	r3, #2
 801345a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801345e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013464:	d102      	bne.n	801346c <f_open+0x2e4>
 8013466:	2301      	movs	r3, #1
 8013468:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801346c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801346e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	657b      	str	r3, [r7, #84]	@ 0x54
 8013474:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013478:	2b00      	cmp	r3, #0
 801347a:	d103      	bne.n	8013484 <f_open+0x2fc>
 801347c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801347e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013480:	429a      	cmp	r2, r3
 8013482:	d8e0      	bhi.n	8013446 <f_open+0x2be>
				}
				fp->clust = clst;
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013488:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801348a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801348e:	2b00      	cmp	r3, #0
 8013490:	d127      	bne.n	80134e2 <f_open+0x35a>
 8013492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013498:	2b00      	cmp	r3, #0
 801349a:	d022      	beq.n	80134e2 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7fe fcdb 	bl	8011e5c <clust2sect>
 80134a6:	6478      	str	r0, [r7, #68]	@ 0x44
 80134a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d103      	bne.n	80134b6 <f_open+0x32e>
						res = FR_INT_ERR;
 80134ae:	2302      	movs	r3, #2
 80134b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80134b4:	e015      	b.n	80134e2 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80134b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80134b8:	0a5a      	lsrs	r2, r3, #9
 80134ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80134bc:	441a      	add	r2, r3
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80134c2:	693b      	ldr	r3, [r7, #16]
 80134c4:	7858      	ldrb	r0, [r3, #1]
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	6a1a      	ldr	r2, [r3, #32]
 80134d0:	2301      	movs	r3, #1
 80134d2:	f7fe f919 	bl	8011708 <disk_read>
 80134d6:	4603      	mov	r3, r0
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d002      	beq.n	80134e2 <f_open+0x35a>
 80134dc:	2301      	movs	r3, #1
 80134de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80134e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d002      	beq.n	80134f0 <f_open+0x368>
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	2200      	movs	r2, #0
 80134ee:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80134f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80134f4:	4618      	mov	r0, r3
 80134f6:	3760      	adds	r7, #96	@ 0x60
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}

080134fc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b08c      	sub	sp, #48	@ 0x30
 8013500:	af00      	add	r7, sp, #0
 8013502:	60f8      	str	r0, [r7, #12]
 8013504:	60b9      	str	r1, [r7, #8]
 8013506:	607a      	str	r2, [r7, #4]
 8013508:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	2200      	movs	r2, #0
 8013512:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f107 0210 	add.w	r2, r7, #16
 801351a:	4611      	mov	r1, r2
 801351c:	4618      	mov	r0, r3
 801351e:	f7ff fdb7 	bl	8013090 <validate>
 8013522:	4603      	mov	r3, r0
 8013524:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013528:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801352c:	2b00      	cmp	r3, #0
 801352e:	d107      	bne.n	8013540 <f_write+0x44>
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	7d5b      	ldrb	r3, [r3, #21]
 8013534:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8013538:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801353c:	2b00      	cmp	r3, #0
 801353e:	d002      	beq.n	8013546 <f_write+0x4a>
 8013540:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013544:	e14b      	b.n	80137de <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	7d1b      	ldrb	r3, [r3, #20]
 801354a:	f003 0302 	and.w	r3, r3, #2
 801354e:	2b00      	cmp	r3, #0
 8013550:	d101      	bne.n	8013556 <f_write+0x5a>
 8013552:	2307      	movs	r3, #7
 8013554:	e143      	b.n	80137de <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	699a      	ldr	r2, [r3, #24]
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	441a      	add	r2, r3
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	699b      	ldr	r3, [r3, #24]
 8013562:	429a      	cmp	r2, r3
 8013564:	f080 812d 	bcs.w	80137c2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	699b      	ldr	r3, [r3, #24]
 801356c:	43db      	mvns	r3, r3
 801356e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013570:	e127      	b.n	80137c2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	699b      	ldr	r3, [r3, #24]
 8013576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801357a:	2b00      	cmp	r3, #0
 801357c:	f040 80e3 	bne.w	8013746 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	699b      	ldr	r3, [r3, #24]
 8013584:	0a5b      	lsrs	r3, r3, #9
 8013586:	693a      	ldr	r2, [r7, #16]
 8013588:	8952      	ldrh	r2, [r2, #10]
 801358a:	3a01      	subs	r2, #1
 801358c:	4013      	ands	r3, r2
 801358e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013590:	69bb      	ldr	r3, [r7, #24]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d143      	bne.n	801361e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	699b      	ldr	r3, [r3, #24]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d10c      	bne.n	80135b8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801359e:	68fb      	ldr	r3, [r7, #12]
 80135a0:	689b      	ldr	r3, [r3, #8]
 80135a2:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80135a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d11a      	bne.n	80135e0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	2100      	movs	r1, #0
 80135ae:	4618      	mov	r0, r3
 80135b0:	f7fe fe69 	bl	8012286 <create_chain>
 80135b4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80135b6:	e013      	b.n	80135e0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d007      	beq.n	80135d0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	699b      	ldr	r3, [r3, #24]
 80135c4:	4619      	mov	r1, r3
 80135c6:	68f8      	ldr	r0, [r7, #12]
 80135c8:	f7fe fef5 	bl	80123b6 <clmt_clust>
 80135cc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80135ce:	e007      	b.n	80135e0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80135d0:	68fa      	ldr	r2, [r7, #12]
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	69db      	ldr	r3, [r3, #28]
 80135d6:	4619      	mov	r1, r3
 80135d8:	4610      	mov	r0, r2
 80135da:	f7fe fe54 	bl	8012286 <create_chain>
 80135de:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80135e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	f000 80f2 	beq.w	80137cc <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80135e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135ea:	2b01      	cmp	r3, #1
 80135ec:	d104      	bne.n	80135f8 <f_write+0xfc>
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2202      	movs	r2, #2
 80135f2:	755a      	strb	r2, [r3, #21]
 80135f4:	2302      	movs	r3, #2
 80135f6:	e0f2      	b.n	80137de <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80135f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135fe:	d104      	bne.n	801360a <f_write+0x10e>
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	2201      	movs	r2, #1
 8013604:	755a      	strb	r2, [r3, #21]
 8013606:	2301      	movs	r3, #1
 8013608:	e0e9      	b.n	80137de <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801360e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	689b      	ldr	r3, [r3, #8]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d102      	bne.n	801361e <f_write+0x122>
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801361c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	7d1b      	ldrb	r3, [r3, #20]
 8013622:	b25b      	sxtb	r3, r3
 8013624:	2b00      	cmp	r3, #0
 8013626:	da18      	bge.n	801365a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	7858      	ldrb	r0, [r3, #1]
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	6a1a      	ldr	r2, [r3, #32]
 8013636:	2301      	movs	r3, #1
 8013638:	f7fe f886 	bl	8011748 <disk_write>
 801363c:	4603      	mov	r3, r0
 801363e:	2b00      	cmp	r3, #0
 8013640:	d004      	beq.n	801364c <f_write+0x150>
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	2201      	movs	r2, #1
 8013646:	755a      	strb	r2, [r3, #21]
 8013648:	2301      	movs	r3, #1
 801364a:	e0c8      	b.n	80137de <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	7d1b      	ldrb	r3, [r3, #20]
 8013650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013654:	b2da      	uxtb	r2, r3
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801365a:	693a      	ldr	r2, [r7, #16]
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	69db      	ldr	r3, [r3, #28]
 8013660:	4619      	mov	r1, r3
 8013662:	4610      	mov	r0, r2
 8013664:	f7fe fbfa 	bl	8011e5c <clust2sect>
 8013668:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d104      	bne.n	801367a <f_write+0x17e>
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2202      	movs	r2, #2
 8013674:	755a      	strb	r2, [r3, #21]
 8013676:	2302      	movs	r3, #2
 8013678:	e0b1      	b.n	80137de <f_write+0x2e2>
			sect += csect;
 801367a:	697a      	ldr	r2, [r7, #20]
 801367c:	69bb      	ldr	r3, [r7, #24]
 801367e:	4413      	add	r3, r2
 8013680:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	0a5b      	lsrs	r3, r3, #9
 8013686:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013688:	6a3b      	ldr	r3, [r7, #32]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d03c      	beq.n	8013708 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801368e:	69ba      	ldr	r2, [r7, #24]
 8013690:	6a3b      	ldr	r3, [r7, #32]
 8013692:	4413      	add	r3, r2
 8013694:	693a      	ldr	r2, [r7, #16]
 8013696:	8952      	ldrh	r2, [r2, #10]
 8013698:	4293      	cmp	r3, r2
 801369a:	d905      	bls.n	80136a8 <f_write+0x1ac>
					cc = fs->csize - csect;
 801369c:	693b      	ldr	r3, [r7, #16]
 801369e:	895b      	ldrh	r3, [r3, #10]
 80136a0:	461a      	mov	r2, r3
 80136a2:	69bb      	ldr	r3, [r7, #24]
 80136a4:	1ad3      	subs	r3, r2, r3
 80136a6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80136a8:	693b      	ldr	r3, [r7, #16]
 80136aa:	7858      	ldrb	r0, [r3, #1]
 80136ac:	6a3b      	ldr	r3, [r7, #32]
 80136ae:	697a      	ldr	r2, [r7, #20]
 80136b0:	69f9      	ldr	r1, [r7, #28]
 80136b2:	f7fe f849 	bl	8011748 <disk_write>
 80136b6:	4603      	mov	r3, r0
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d004      	beq.n	80136c6 <f_write+0x1ca>
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	2201      	movs	r2, #1
 80136c0:	755a      	strb	r2, [r3, #21]
 80136c2:	2301      	movs	r3, #1
 80136c4:	e08b      	b.n	80137de <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	6a1a      	ldr	r2, [r3, #32]
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	1ad3      	subs	r3, r2, r3
 80136ce:	6a3a      	ldr	r2, [r7, #32]
 80136d0:	429a      	cmp	r2, r3
 80136d2:	d915      	bls.n	8013700 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	6a1a      	ldr	r2, [r3, #32]
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	1ad3      	subs	r3, r2, r3
 80136e2:	025b      	lsls	r3, r3, #9
 80136e4:	69fa      	ldr	r2, [r7, #28]
 80136e6:	4413      	add	r3, r2
 80136e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80136ec:	4619      	mov	r1, r3
 80136ee:	f7fe f8eb 	bl	80118c8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	7d1b      	ldrb	r3, [r3, #20]
 80136f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80136fa:	b2da      	uxtb	r2, r3
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013700:	6a3b      	ldr	r3, [r7, #32]
 8013702:	025b      	lsls	r3, r3, #9
 8013704:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013706:	e03f      	b.n	8013788 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	6a1b      	ldr	r3, [r3, #32]
 801370c:	697a      	ldr	r2, [r7, #20]
 801370e:	429a      	cmp	r2, r3
 8013710:	d016      	beq.n	8013740 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	699a      	ldr	r2, [r3, #24]
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801371a:	429a      	cmp	r2, r3
 801371c:	d210      	bcs.n	8013740 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	7858      	ldrb	r0, [r3, #1]
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013728:	2301      	movs	r3, #1
 801372a:	697a      	ldr	r2, [r7, #20]
 801372c:	f7fd ffec 	bl	8011708 <disk_read>
 8013730:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013732:	2b00      	cmp	r3, #0
 8013734:	d004      	beq.n	8013740 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2201      	movs	r2, #1
 801373a:	755a      	strb	r2, [r3, #21]
 801373c:	2301      	movs	r3, #1
 801373e:	e04e      	b.n	80137de <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	697a      	ldr	r2, [r7, #20]
 8013744:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	699b      	ldr	r3, [r3, #24]
 801374a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801374e:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8013752:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	429a      	cmp	r2, r3
 801375a:	d901      	bls.n	8013760 <f_write+0x264>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	699b      	ldr	r3, [r3, #24]
 801376a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801376e:	4413      	add	r3, r2
 8013770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013772:	69f9      	ldr	r1, [r7, #28]
 8013774:	4618      	mov	r0, r3
 8013776:	f7fe f8a7 	bl	80118c8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	7d1b      	ldrb	r3, [r3, #20]
 801377e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013782:	b2da      	uxtb	r2, r3
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013788:	69fa      	ldr	r2, [r7, #28]
 801378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801378c:	4413      	add	r3, r2
 801378e:	61fb      	str	r3, [r7, #28]
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	699a      	ldr	r2, [r3, #24]
 8013794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013796:	441a      	add	r2, r3
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	619a      	str	r2, [r3, #24]
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	68da      	ldr	r2, [r3, #12]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	699b      	ldr	r3, [r3, #24]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	bf38      	it	cc
 80137a8:	461a      	movcc	r2, r3
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	60da      	str	r2, [r3, #12]
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	681a      	ldr	r2, [r3, #0]
 80137b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137b4:	441a      	add	r2, r3
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	601a      	str	r2, [r3, #0]
 80137ba:	687a      	ldr	r2, [r7, #4]
 80137bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137be:	1ad3      	subs	r3, r2, r3
 80137c0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	f47f aed4 	bne.w	8013572 <f_write+0x76>
 80137ca:	e000      	b.n	80137ce <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80137cc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	7d1b      	ldrb	r3, [r3, #20]
 80137d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137d6:	b2da      	uxtb	r2, r3
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80137dc:	2300      	movs	r3, #0
}
 80137de:	4618      	mov	r0, r3
 80137e0:	3730      	adds	r7, #48	@ 0x30
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}

080137e6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b086      	sub	sp, #24
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f107 0208 	add.w	r2, r7, #8
 80137f4:	4611      	mov	r1, r2
 80137f6:	4618      	mov	r0, r3
 80137f8:	f7ff fc4a 	bl	8013090 <validate>
 80137fc:	4603      	mov	r3, r0
 80137fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013800:	7dfb      	ldrb	r3, [r7, #23]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d168      	bne.n	80138d8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	7d1b      	ldrb	r3, [r3, #20]
 801380a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801380e:	2b00      	cmp	r3, #0
 8013810:	d062      	beq.n	80138d8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	7d1b      	ldrb	r3, [r3, #20]
 8013816:	b25b      	sxtb	r3, r3
 8013818:	2b00      	cmp	r3, #0
 801381a:	da15      	bge.n	8013848 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	7858      	ldrb	r0, [r3, #1]
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6a1a      	ldr	r2, [r3, #32]
 801382a:	2301      	movs	r3, #1
 801382c:	f7fd ff8c 	bl	8011748 <disk_write>
 8013830:	4603      	mov	r3, r0
 8013832:	2b00      	cmp	r3, #0
 8013834:	d001      	beq.n	801383a <f_sync+0x54>
 8013836:	2301      	movs	r3, #1
 8013838:	e04f      	b.n	80138da <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	7d1b      	ldrb	r3, [r3, #20]
 801383e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013842:	b2da      	uxtb	r2, r3
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013848:	f7fd fcdc 	bl	8011204 <get_fattime>
 801384c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801384e:	68ba      	ldr	r2, [r7, #8]
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013854:	4619      	mov	r1, r3
 8013856:	4610      	mov	r0, r2
 8013858:	f7fe fa64 	bl	8011d24 <move_window>
 801385c:	4603      	mov	r3, r0
 801385e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013860:	7dfb      	ldrb	r3, [r7, #23]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d138      	bne.n	80138d8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801386a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	330b      	adds	r3, #11
 8013870:	781a      	ldrb	r2, [r3, #0]
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	330b      	adds	r3, #11
 8013876:	f042 0220 	orr.w	r2, r2, #32
 801387a:	b2d2      	uxtb	r2, r2
 801387c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6818      	ldr	r0, [r3, #0]
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	689b      	ldr	r3, [r3, #8]
 8013886:	461a      	mov	r2, r3
 8013888:	68f9      	ldr	r1, [r7, #12]
 801388a:	f7fe ff6e 	bl	801276a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	f103 021c 	add.w	r2, r3, #28
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	68db      	ldr	r3, [r3, #12]
 8013898:	4619      	mov	r1, r3
 801389a:	4610      	mov	r0, r2
 801389c:	f7fd ffe8 	bl	8011870 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	3316      	adds	r3, #22
 80138a4:	6939      	ldr	r1, [r7, #16]
 80138a6:	4618      	mov	r0, r3
 80138a8:	f7fd ffe2 	bl	8011870 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	3312      	adds	r3, #18
 80138b0:	2100      	movs	r1, #0
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7fd ffc1 	bl	801183a <st_word>
					fs->wflag = 1;
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	2201      	movs	r2, #1
 80138bc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7fe fa5d 	bl	8011d80 <sync_fs>
 80138c6:	4603      	mov	r3, r0
 80138c8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	7d1b      	ldrb	r3, [r3, #20]
 80138ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80138d2:	b2da      	uxtb	r2, r3
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80138d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80138da:	4618      	mov	r0, r3
 80138dc:	3718      	adds	r7, #24
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}

080138e2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80138e2:	b580      	push	{r7, lr}
 80138e4:	b084      	sub	sp, #16
 80138e6:	af00      	add	r7, sp, #0
 80138e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7ff ff7b 	bl	80137e6 <f_sync>
 80138f0:	4603      	mov	r3, r0
 80138f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80138f4:	7bfb      	ldrb	r3, [r7, #15]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d118      	bne.n	801392c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	f107 0208 	add.w	r2, r7, #8
 8013900:	4611      	mov	r1, r2
 8013902:	4618      	mov	r0, r3
 8013904:	f7ff fbc4 	bl	8013090 <validate>
 8013908:	4603      	mov	r3, r0
 801390a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801390c:	7bfb      	ldrb	r3, [r7, #15]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d10c      	bne.n	801392c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	691b      	ldr	r3, [r3, #16]
 8013916:	4618      	mov	r0, r3
 8013918:	f7fe f960 	bl	8011bdc <dec_lock>
 801391c:	4603      	mov	r3, r0
 801391e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013920:	7bfb      	ldrb	r3, [r7, #15]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d102      	bne.n	801392c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	2200      	movs	r2, #0
 801392a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801392c:	7bfb      	ldrb	r3, [r7, #15]
}
 801392e:	4618      	mov	r0, r3
 8013930:	3710      	adds	r7, #16
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}

08013936 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013936:	b580      	push	{r7, lr}
 8013938:	b090      	sub	sp, #64	@ 0x40
 801393a:	af00      	add	r7, sp, #0
 801393c:	6078      	str	r0, [r7, #4]
 801393e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	f107 0208 	add.w	r2, r7, #8
 8013946:	4611      	mov	r1, r2
 8013948:	4618      	mov	r0, r3
 801394a:	f7ff fba1 	bl	8013090 <validate>
 801394e:	4603      	mov	r3, r0
 8013950:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013954:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013958:	2b00      	cmp	r3, #0
 801395a:	d103      	bne.n	8013964 <f_lseek+0x2e>
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	7d5b      	ldrb	r3, [r3, #21]
 8013960:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013964:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013968:	2b00      	cmp	r3, #0
 801396a:	d002      	beq.n	8013972 <f_lseek+0x3c>
 801396c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013970:	e1e6      	b.n	8013d40 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013976:	2b00      	cmp	r3, #0
 8013978:	f000 80d1 	beq.w	8013b1e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013982:	d15a      	bne.n	8013a3a <f_lseek+0x104>
			tbl = fp->cltbl;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013988:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801398c:	1d1a      	adds	r2, r3, #4
 801398e:	627a      	str	r2, [r7, #36]	@ 0x24
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	617b      	str	r3, [r7, #20]
 8013994:	2302      	movs	r3, #2
 8013996:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	689b      	ldr	r3, [r3, #8]
 801399c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d03a      	beq.n	8013a1a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80139a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139a6:	613b      	str	r3, [r7, #16]
 80139a8:	2300      	movs	r3, #0
 80139aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80139ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ae:	3302      	adds	r3, #2
 80139b0:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80139b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139b4:	60fb      	str	r3, [r7, #12]
 80139b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139b8:	3301      	adds	r3, #1
 80139ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80139c0:	4618      	mov	r0, r3
 80139c2:	f7fe fa6a 	bl	8011e9a <get_fat>
 80139c6:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80139c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ca:	2b01      	cmp	r3, #1
 80139cc:	d804      	bhi.n	80139d8 <f_lseek+0xa2>
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	2202      	movs	r2, #2
 80139d2:	755a      	strb	r2, [r3, #21]
 80139d4:	2302      	movs	r3, #2
 80139d6:	e1b3      	b.n	8013d40 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80139d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139de:	d104      	bne.n	80139ea <f_lseek+0xb4>
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	2201      	movs	r2, #1
 80139e4:	755a      	strb	r2, [r3, #21]
 80139e6:	2301      	movs	r3, #1
 80139e8:	e1aa      	b.n	8013d40 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	3301      	adds	r3, #1
 80139ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139f0:	429a      	cmp	r2, r3
 80139f2:	d0de      	beq.n	80139b2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80139f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80139f6:	697b      	ldr	r3, [r7, #20]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d809      	bhi.n	8013a10 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80139fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139fe:	1d1a      	adds	r2, r3, #4
 8013a00:	627a      	str	r2, [r7, #36]	@ 0x24
 8013a02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a04:	601a      	str	r2, [r3, #0]
 8013a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a08:	1d1a      	adds	r2, r3, #4
 8013a0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8013a0c:	693a      	ldr	r2, [r7, #16]
 8013a0e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013a10:	68bb      	ldr	r3, [r7, #8]
 8013a12:	695b      	ldr	r3, [r3, #20]
 8013a14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d3c4      	bcc.n	80139a4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a20:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013a22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d803      	bhi.n	8013a32 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	601a      	str	r2, [r3, #0]
 8013a30:	e184      	b.n	8013d3c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013a32:	2311      	movs	r3, #17
 8013a34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8013a38:	e180      	b.n	8013d3c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	68db      	ldr	r3, [r3, #12]
 8013a3e:	683a      	ldr	r2, [r7, #0]
 8013a40:	429a      	cmp	r2, r3
 8013a42:	d902      	bls.n	8013a4a <f_lseek+0x114>
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	683a      	ldr	r2, [r7, #0]
 8013a4e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013a50:	683b      	ldr	r3, [r7, #0]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	f000 8172 	beq.w	8013d3c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	3b01      	subs	r3, #1
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	6878      	ldr	r0, [r7, #4]
 8013a60:	f7fe fca9 	bl	80123b6 <clmt_clust>
 8013a64:	4602      	mov	r2, r0
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013a6a:	68ba      	ldr	r2, [r7, #8]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	69db      	ldr	r3, [r3, #28]
 8013a70:	4619      	mov	r1, r3
 8013a72:	4610      	mov	r0, r2
 8013a74:	f7fe f9f2 	bl	8011e5c <clust2sect>
 8013a78:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013a7a:	69bb      	ldr	r3, [r7, #24]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d104      	bne.n	8013a8a <f_lseek+0x154>
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	2202      	movs	r2, #2
 8013a84:	755a      	strb	r2, [r3, #21]
 8013a86:	2302      	movs	r3, #2
 8013a88:	e15a      	b.n	8013d40 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	3b01      	subs	r3, #1
 8013a8e:	0a5b      	lsrs	r3, r3, #9
 8013a90:	68ba      	ldr	r2, [r7, #8]
 8013a92:	8952      	ldrh	r2, [r2, #10]
 8013a94:	3a01      	subs	r2, #1
 8013a96:	4013      	ands	r3, r2
 8013a98:	69ba      	ldr	r2, [r7, #24]
 8013a9a:	4413      	add	r3, r2
 8013a9c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	699b      	ldr	r3, [r3, #24]
 8013aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f000 8148 	beq.w	8013d3c <f_lseek+0x406>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6a1b      	ldr	r3, [r3, #32]
 8013ab0:	69ba      	ldr	r2, [r7, #24]
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	f000 8142 	beq.w	8013d3c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	7d1b      	ldrb	r3, [r3, #20]
 8013abc:	b25b      	sxtb	r3, r3
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	da18      	bge.n	8013af4 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	7858      	ldrb	r0, [r3, #1]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	6a1a      	ldr	r2, [r3, #32]
 8013ad0:	2301      	movs	r3, #1
 8013ad2:	f7fd fe39 	bl	8011748 <disk_write>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d004      	beq.n	8013ae6 <f_lseek+0x1b0>
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	2201      	movs	r2, #1
 8013ae0:	755a      	strb	r2, [r3, #21]
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	e12c      	b.n	8013d40 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	7d1b      	ldrb	r3, [r3, #20]
 8013aea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013aee:	b2da      	uxtb	r2, r3
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013af4:	68bb      	ldr	r3, [r7, #8]
 8013af6:	7858      	ldrb	r0, [r3, #1]
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013afe:	2301      	movs	r3, #1
 8013b00:	69ba      	ldr	r2, [r7, #24]
 8013b02:	f7fd fe01 	bl	8011708 <disk_read>
 8013b06:	4603      	mov	r3, r0
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d004      	beq.n	8013b16 <f_lseek+0x1e0>
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	2201      	movs	r2, #1
 8013b10:	755a      	strb	r2, [r3, #21]
 8013b12:	2301      	movs	r3, #1
 8013b14:	e114      	b.n	8013d40 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	69ba      	ldr	r2, [r7, #24]
 8013b1a:	621a      	str	r2, [r3, #32]
 8013b1c:	e10e      	b.n	8013d3c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	68db      	ldr	r3, [r3, #12]
 8013b22:	683a      	ldr	r2, [r7, #0]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d908      	bls.n	8013b3a <f_lseek+0x204>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	7d1b      	ldrb	r3, [r3, #20]
 8013b2c:	f003 0302 	and.w	r3, r3, #2
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d102      	bne.n	8013b3a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	699b      	ldr	r3, [r3, #24]
 8013b3e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013b40:	2300      	movs	r3, #0
 8013b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013b48:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013b4a:	683b      	ldr	r3, [r7, #0]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	f000 80a7 	beq.w	8013ca0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013b52:	68bb      	ldr	r3, [r7, #8]
 8013b54:	895b      	ldrh	r3, [r3, #10]
 8013b56:	025b      	lsls	r3, r3, #9
 8013b58:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013b5a:	6a3b      	ldr	r3, [r7, #32]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d01b      	beq.n	8013b98 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013b60:	683b      	ldr	r3, [r7, #0]
 8013b62:	1e5a      	subs	r2, r3, #1
 8013b64:	69fb      	ldr	r3, [r7, #28]
 8013b66:	fbb2 f2f3 	udiv	r2, r2, r3
 8013b6a:	6a3b      	ldr	r3, [r7, #32]
 8013b6c:	1e59      	subs	r1, r3, #1
 8013b6e:	69fb      	ldr	r3, [r7, #28]
 8013b70:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d30f      	bcc.n	8013b98 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013b78:	6a3b      	ldr	r3, [r7, #32]
 8013b7a:	1e5a      	subs	r2, r3, #1
 8013b7c:	69fb      	ldr	r3, [r7, #28]
 8013b7e:	425b      	negs	r3, r3
 8013b80:	401a      	ands	r2, r3
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	699b      	ldr	r3, [r3, #24]
 8013b8a:	683a      	ldr	r2, [r7, #0]
 8013b8c:	1ad3      	subs	r3, r2, r3
 8013b8e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	69db      	ldr	r3, [r3, #28]
 8013b94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013b96:	e022      	b.n	8013bde <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	689b      	ldr	r3, [r3, #8]
 8013b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d119      	bne.n	8013bd8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2100      	movs	r1, #0
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7fe fb6c 	bl	8012286 <create_chain>
 8013bae:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bb2:	2b01      	cmp	r3, #1
 8013bb4:	d104      	bne.n	8013bc0 <f_lseek+0x28a>
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	2202      	movs	r2, #2
 8013bba:	755a      	strb	r2, [r3, #21]
 8013bbc:	2302      	movs	r3, #2
 8013bbe:	e0bf      	b.n	8013d40 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc6:	d104      	bne.n	8013bd2 <f_lseek+0x29c>
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2201      	movs	r2, #1
 8013bcc:	755a      	strb	r2, [r3, #21]
 8013bce:	2301      	movs	r3, #1
 8013bd0:	e0b6      	b.n	8013d40 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013bd6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013bdc:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d05d      	beq.n	8013ca0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8013be4:	e03a      	b.n	8013c5c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8013be6:	683a      	ldr	r2, [r7, #0]
 8013be8:	69fb      	ldr	r3, [r7, #28]
 8013bea:	1ad3      	subs	r3, r2, r3
 8013bec:	603b      	str	r3, [r7, #0]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	699a      	ldr	r2, [r3, #24]
 8013bf2:	69fb      	ldr	r3, [r7, #28]
 8013bf4:	441a      	add	r2, r3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	7d1b      	ldrb	r3, [r3, #20]
 8013bfe:	f003 0302 	and.w	r3, r3, #2
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d00b      	beq.n	8013c1e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f7fe fb3b 	bl	8012286 <create_chain>
 8013c10:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d108      	bne.n	8013c2a <f_lseek+0x2f4>
							ofs = 0; break;
 8013c18:	2300      	movs	r3, #0
 8013c1a:	603b      	str	r3, [r7, #0]
 8013c1c:	e022      	b.n	8013c64 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7fe f939 	bl	8011e9a <get_fat>
 8013c28:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c30:	d104      	bne.n	8013c3c <f_lseek+0x306>
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	2201      	movs	r2, #1
 8013c36:	755a      	strb	r2, [r3, #21]
 8013c38:	2301      	movs	r3, #1
 8013c3a:	e081      	b.n	8013d40 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d904      	bls.n	8013c4c <f_lseek+0x316>
 8013c42:	68bb      	ldr	r3, [r7, #8]
 8013c44:	695b      	ldr	r3, [r3, #20]
 8013c46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013c48:	429a      	cmp	r2, r3
 8013c4a:	d304      	bcc.n	8013c56 <f_lseek+0x320>
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2202      	movs	r2, #2
 8013c50:	755a      	strb	r2, [r3, #21]
 8013c52:	2302      	movs	r3, #2
 8013c54:	e074      	b.n	8013d40 <f_lseek+0x40a>
					fp->clust = clst;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013c5a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013c5c:	683a      	ldr	r2, [r7, #0]
 8013c5e:	69fb      	ldr	r3, [r7, #28]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d8c0      	bhi.n	8013be6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	699a      	ldr	r2, [r3, #24]
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	441a      	add	r2, r3
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d012      	beq.n	8013ca0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7fe f8ec 	bl	8011e5c <clust2sect>
 8013c84:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d104      	bne.n	8013c96 <f_lseek+0x360>
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2202      	movs	r2, #2
 8013c90:	755a      	strb	r2, [r3, #21]
 8013c92:	2302      	movs	r3, #2
 8013c94:	e054      	b.n	8013d40 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	0a5b      	lsrs	r3, r3, #9
 8013c9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013c9c:	4413      	add	r3, r2
 8013c9e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	699a      	ldr	r2, [r3, #24]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	68db      	ldr	r3, [r3, #12]
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	d90a      	bls.n	8013cc2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	699a      	ldr	r2, [r3, #24]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	7d1b      	ldrb	r3, [r3, #20]
 8013cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cbc:	b2da      	uxtb	r2, r3
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	699b      	ldr	r3, [r3, #24]
 8013cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d036      	beq.n	8013d3c <f_lseek+0x406>
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	6a1b      	ldr	r3, [r3, #32]
 8013cd2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013cd4:	429a      	cmp	r2, r3
 8013cd6:	d031      	beq.n	8013d3c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	7d1b      	ldrb	r3, [r3, #20]
 8013cdc:	b25b      	sxtb	r3, r3
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	da18      	bge.n	8013d14 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	7858      	ldrb	r0, [r3, #1]
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	6a1a      	ldr	r2, [r3, #32]
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	f7fd fd29 	bl	8011748 <disk_write>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d004      	beq.n	8013d06 <f_lseek+0x3d0>
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2201      	movs	r2, #1
 8013d00:	755a      	strb	r2, [r3, #21]
 8013d02:	2301      	movs	r3, #1
 8013d04:	e01c      	b.n	8013d40 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	7d1b      	ldrb	r3, [r3, #20]
 8013d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013d0e:	b2da      	uxtb	r2, r3
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	7858      	ldrb	r0, [r3, #1]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013d1e:	2301      	movs	r3, #1
 8013d20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d22:	f7fd fcf1 	bl	8011708 <disk_read>
 8013d26:	4603      	mov	r3, r0
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d004      	beq.n	8013d36 <f_lseek+0x400>
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2201      	movs	r2, #1
 8013d30:	755a      	strb	r2, [r3, #21]
 8013d32:	2301      	movs	r3, #1
 8013d34:	e004      	b.n	8013d40 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013d3a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013d3c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3740      	adds	r7, #64	@ 0x40
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}

08013d48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013d48:	b480      	push	{r7}
 8013d4a:	b087      	sub	sp, #28
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	60f8      	str	r0, [r7, #12]
 8013d50:	60b9      	str	r1, [r7, #8]
 8013d52:	4613      	mov	r3, r2
 8013d54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013d56:	2301      	movs	r3, #1
 8013d58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8013ddc <FATFS_LinkDriverEx+0x94>)
 8013d60:	7a5b      	ldrb	r3, [r3, #9]
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d131      	bne.n	8013dcc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013d68:	4b1c      	ldr	r3, [pc, #112]	@ (8013ddc <FATFS_LinkDriverEx+0x94>)
 8013d6a:	7a5b      	ldrb	r3, [r3, #9]
 8013d6c:	b2db      	uxtb	r3, r3
 8013d6e:	461a      	mov	r2, r3
 8013d70:	4b1a      	ldr	r3, [pc, #104]	@ (8013ddc <FATFS_LinkDriverEx+0x94>)
 8013d72:	2100      	movs	r1, #0
 8013d74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013d76:	4b19      	ldr	r3, [pc, #100]	@ (8013ddc <FATFS_LinkDriverEx+0x94>)
 8013d78:	7a5b      	ldrb	r3, [r3, #9]
 8013d7a:	b2db      	uxtb	r3, r3
 8013d7c:	4a17      	ldr	r2, [pc, #92]	@ (8013ddc <FATFS_LinkDriverEx+0x94>)
 8013d7e:	009b      	lsls	r3, r3, #2
 8013d80:	4413      	add	r3, r2
 8013d82:	68fa      	ldr	r2, [r7, #12]
 8013d84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013d86:	4b15      	ldr	r3, [pc, #84]	@ (8013ddc <FATFS_LinkDriverEx+0x94>)
 8013d88:	7a5b      	ldrb	r3, [r3, #9]
 8013d8a:	b2db      	uxtb	r3, r3
 8013d8c:	461a      	mov	r2, r3
 8013d8e:	4b13      	ldr	r3, [pc, #76]	@ (8013ddc <FATFS_LinkDriverEx+0x94>)
 8013d90:	4413      	add	r3, r2
 8013d92:	79fa      	ldrb	r2, [r7, #7]
 8013d94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013d96:	4b11      	ldr	r3, [pc, #68]	@ (8013ddc <FATFS_LinkDriverEx+0x94>)
 8013d98:	7a5b      	ldrb	r3, [r3, #9]
 8013d9a:	b2db      	uxtb	r3, r3
 8013d9c:	1c5a      	adds	r2, r3, #1
 8013d9e:	b2d1      	uxtb	r1, r2
 8013da0:	4a0e      	ldr	r2, [pc, #56]	@ (8013ddc <FATFS_LinkDriverEx+0x94>)
 8013da2:	7251      	strb	r1, [r2, #9]
 8013da4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013da6:	7dbb      	ldrb	r3, [r7, #22]
 8013da8:	3330      	adds	r3, #48	@ 0x30
 8013daa:	b2da      	uxtb	r2, r3
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	3301      	adds	r3, #1
 8013db4:	223a      	movs	r2, #58	@ 0x3a
 8013db6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	3302      	adds	r3, #2
 8013dbc:	222f      	movs	r2, #47	@ 0x2f
 8013dbe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013dc0:	68bb      	ldr	r3, [r7, #8]
 8013dc2:	3303      	adds	r3, #3
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	371c      	adds	r7, #28
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd8:	4770      	bx	lr
 8013dda:	bf00      	nop
 8013ddc:	200065e0 	.word	0x200065e0

08013de0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b082      	sub	sp, #8
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013dea:	2200      	movs	r2, #0
 8013dec:	6839      	ldr	r1, [r7, #0]
 8013dee:	6878      	ldr	r0, [r7, #4]
 8013df0:	f7ff ffaa 	bl	8013d48 <FATFS_LinkDriverEx>
 8013df4:	4603      	mov	r3, r0
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3708      	adds	r7, #8
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}

08013dfe <__cvt>:
 8013dfe:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e02:	ec57 6b10 	vmov	r6, r7, d0
 8013e06:	2f00      	cmp	r7, #0
 8013e08:	460c      	mov	r4, r1
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	463b      	mov	r3, r7
 8013e0e:	bfbb      	ittet	lt
 8013e10:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013e14:	461f      	movlt	r7, r3
 8013e16:	2300      	movge	r3, #0
 8013e18:	232d      	movlt	r3, #45	@ 0x2d
 8013e1a:	700b      	strb	r3, [r1, #0]
 8013e1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013e1e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013e22:	4691      	mov	r9, r2
 8013e24:	f023 0820 	bic.w	r8, r3, #32
 8013e28:	bfbc      	itt	lt
 8013e2a:	4632      	movlt	r2, r6
 8013e2c:	4616      	movlt	r6, r2
 8013e2e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013e32:	d005      	beq.n	8013e40 <__cvt+0x42>
 8013e34:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013e38:	d100      	bne.n	8013e3c <__cvt+0x3e>
 8013e3a:	3401      	adds	r4, #1
 8013e3c:	2102      	movs	r1, #2
 8013e3e:	e000      	b.n	8013e42 <__cvt+0x44>
 8013e40:	2103      	movs	r1, #3
 8013e42:	ab03      	add	r3, sp, #12
 8013e44:	9301      	str	r3, [sp, #4]
 8013e46:	ab02      	add	r3, sp, #8
 8013e48:	9300      	str	r3, [sp, #0]
 8013e4a:	ec47 6b10 	vmov	d0, r6, r7
 8013e4e:	4653      	mov	r3, sl
 8013e50:	4622      	mov	r2, r4
 8013e52:	f000 ff91 	bl	8014d78 <_dtoa_r>
 8013e56:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013e5a:	4605      	mov	r5, r0
 8013e5c:	d119      	bne.n	8013e92 <__cvt+0x94>
 8013e5e:	f019 0f01 	tst.w	r9, #1
 8013e62:	d00e      	beq.n	8013e82 <__cvt+0x84>
 8013e64:	eb00 0904 	add.w	r9, r0, r4
 8013e68:	2200      	movs	r2, #0
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	4639      	mov	r1, r7
 8013e70:	f7ec fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 8013e74:	b108      	cbz	r0, 8013e7a <__cvt+0x7c>
 8013e76:	f8cd 900c 	str.w	r9, [sp, #12]
 8013e7a:	2230      	movs	r2, #48	@ 0x30
 8013e7c:	9b03      	ldr	r3, [sp, #12]
 8013e7e:	454b      	cmp	r3, r9
 8013e80:	d31e      	bcc.n	8013ec0 <__cvt+0xc2>
 8013e82:	9b03      	ldr	r3, [sp, #12]
 8013e84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013e86:	1b5b      	subs	r3, r3, r5
 8013e88:	4628      	mov	r0, r5
 8013e8a:	6013      	str	r3, [r2, #0]
 8013e8c:	b004      	add	sp, #16
 8013e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e92:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013e96:	eb00 0904 	add.w	r9, r0, r4
 8013e9a:	d1e5      	bne.n	8013e68 <__cvt+0x6a>
 8013e9c:	7803      	ldrb	r3, [r0, #0]
 8013e9e:	2b30      	cmp	r3, #48	@ 0x30
 8013ea0:	d10a      	bne.n	8013eb8 <__cvt+0xba>
 8013ea2:	2200      	movs	r2, #0
 8013ea4:	2300      	movs	r3, #0
 8013ea6:	4630      	mov	r0, r6
 8013ea8:	4639      	mov	r1, r7
 8013eaa:	f7ec fe2d 	bl	8000b08 <__aeabi_dcmpeq>
 8013eae:	b918      	cbnz	r0, 8013eb8 <__cvt+0xba>
 8013eb0:	f1c4 0401 	rsb	r4, r4, #1
 8013eb4:	f8ca 4000 	str.w	r4, [sl]
 8013eb8:	f8da 3000 	ldr.w	r3, [sl]
 8013ebc:	4499      	add	r9, r3
 8013ebe:	e7d3      	b.n	8013e68 <__cvt+0x6a>
 8013ec0:	1c59      	adds	r1, r3, #1
 8013ec2:	9103      	str	r1, [sp, #12]
 8013ec4:	701a      	strb	r2, [r3, #0]
 8013ec6:	e7d9      	b.n	8013e7c <__cvt+0x7e>

08013ec8 <__exponent>:
 8013ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013eca:	2900      	cmp	r1, #0
 8013ecc:	bfba      	itte	lt
 8013ece:	4249      	neglt	r1, r1
 8013ed0:	232d      	movlt	r3, #45	@ 0x2d
 8013ed2:	232b      	movge	r3, #43	@ 0x2b
 8013ed4:	2909      	cmp	r1, #9
 8013ed6:	7002      	strb	r2, [r0, #0]
 8013ed8:	7043      	strb	r3, [r0, #1]
 8013eda:	dd29      	ble.n	8013f30 <__exponent+0x68>
 8013edc:	f10d 0307 	add.w	r3, sp, #7
 8013ee0:	461d      	mov	r5, r3
 8013ee2:	270a      	movs	r7, #10
 8013ee4:	461a      	mov	r2, r3
 8013ee6:	fbb1 f6f7 	udiv	r6, r1, r7
 8013eea:	fb07 1416 	mls	r4, r7, r6, r1
 8013eee:	3430      	adds	r4, #48	@ 0x30
 8013ef0:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013ef4:	460c      	mov	r4, r1
 8013ef6:	2c63      	cmp	r4, #99	@ 0x63
 8013ef8:	f103 33ff 	add.w	r3, r3, #4294967295
 8013efc:	4631      	mov	r1, r6
 8013efe:	dcf1      	bgt.n	8013ee4 <__exponent+0x1c>
 8013f00:	3130      	adds	r1, #48	@ 0x30
 8013f02:	1e94      	subs	r4, r2, #2
 8013f04:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013f08:	1c41      	adds	r1, r0, #1
 8013f0a:	4623      	mov	r3, r4
 8013f0c:	42ab      	cmp	r3, r5
 8013f0e:	d30a      	bcc.n	8013f26 <__exponent+0x5e>
 8013f10:	f10d 0309 	add.w	r3, sp, #9
 8013f14:	1a9b      	subs	r3, r3, r2
 8013f16:	42ac      	cmp	r4, r5
 8013f18:	bf88      	it	hi
 8013f1a:	2300      	movhi	r3, #0
 8013f1c:	3302      	adds	r3, #2
 8013f1e:	4403      	add	r3, r0
 8013f20:	1a18      	subs	r0, r3, r0
 8013f22:	b003      	add	sp, #12
 8013f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f26:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013f2a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013f2e:	e7ed      	b.n	8013f0c <__exponent+0x44>
 8013f30:	2330      	movs	r3, #48	@ 0x30
 8013f32:	3130      	adds	r1, #48	@ 0x30
 8013f34:	7083      	strb	r3, [r0, #2]
 8013f36:	70c1      	strb	r1, [r0, #3]
 8013f38:	1d03      	adds	r3, r0, #4
 8013f3a:	e7f1      	b.n	8013f20 <__exponent+0x58>

08013f3c <_printf_float>:
 8013f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f40:	b08d      	sub	sp, #52	@ 0x34
 8013f42:	460c      	mov	r4, r1
 8013f44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013f48:	4616      	mov	r6, r2
 8013f4a:	461f      	mov	r7, r3
 8013f4c:	4605      	mov	r5, r0
 8013f4e:	f000 fe13 	bl	8014b78 <_localeconv_r>
 8013f52:	6803      	ldr	r3, [r0, #0]
 8013f54:	9304      	str	r3, [sp, #16]
 8013f56:	4618      	mov	r0, r3
 8013f58:	f7ec f9aa 	bl	80002b0 <strlen>
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f60:	f8d8 3000 	ldr.w	r3, [r8]
 8013f64:	9005      	str	r0, [sp, #20]
 8013f66:	3307      	adds	r3, #7
 8013f68:	f023 0307 	bic.w	r3, r3, #7
 8013f6c:	f103 0208 	add.w	r2, r3, #8
 8013f70:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013f74:	f8d4 b000 	ldr.w	fp, [r4]
 8013f78:	f8c8 2000 	str.w	r2, [r8]
 8013f7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013f80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013f84:	9307      	str	r3, [sp, #28]
 8013f86:	f8cd 8018 	str.w	r8, [sp, #24]
 8013f8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013f8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013f92:	4b9c      	ldr	r3, [pc, #624]	@ (8014204 <_printf_float+0x2c8>)
 8013f94:	f04f 32ff 	mov.w	r2, #4294967295
 8013f98:	f7ec fde8 	bl	8000b6c <__aeabi_dcmpun>
 8013f9c:	bb70      	cbnz	r0, 8013ffc <_printf_float+0xc0>
 8013f9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013fa2:	4b98      	ldr	r3, [pc, #608]	@ (8014204 <_printf_float+0x2c8>)
 8013fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8013fa8:	f7ec fdc2 	bl	8000b30 <__aeabi_dcmple>
 8013fac:	bb30      	cbnz	r0, 8013ffc <_printf_float+0xc0>
 8013fae:	2200      	movs	r2, #0
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	4640      	mov	r0, r8
 8013fb4:	4649      	mov	r1, r9
 8013fb6:	f7ec fdb1 	bl	8000b1c <__aeabi_dcmplt>
 8013fba:	b110      	cbz	r0, 8013fc2 <_printf_float+0x86>
 8013fbc:	232d      	movs	r3, #45	@ 0x2d
 8013fbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013fc2:	4a91      	ldr	r2, [pc, #580]	@ (8014208 <_printf_float+0x2cc>)
 8013fc4:	4b91      	ldr	r3, [pc, #580]	@ (801420c <_printf_float+0x2d0>)
 8013fc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013fca:	bf94      	ite	ls
 8013fcc:	4690      	movls	r8, r2
 8013fce:	4698      	movhi	r8, r3
 8013fd0:	2303      	movs	r3, #3
 8013fd2:	6123      	str	r3, [r4, #16]
 8013fd4:	f02b 0304 	bic.w	r3, fp, #4
 8013fd8:	6023      	str	r3, [r4, #0]
 8013fda:	f04f 0900 	mov.w	r9, #0
 8013fde:	9700      	str	r7, [sp, #0]
 8013fe0:	4633      	mov	r3, r6
 8013fe2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013fe4:	4621      	mov	r1, r4
 8013fe6:	4628      	mov	r0, r5
 8013fe8:	f000 f9d2 	bl	8014390 <_printf_common>
 8013fec:	3001      	adds	r0, #1
 8013fee:	f040 808d 	bne.w	801410c <_printf_float+0x1d0>
 8013ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ff6:	b00d      	add	sp, #52	@ 0x34
 8013ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ffc:	4642      	mov	r2, r8
 8013ffe:	464b      	mov	r3, r9
 8014000:	4640      	mov	r0, r8
 8014002:	4649      	mov	r1, r9
 8014004:	f7ec fdb2 	bl	8000b6c <__aeabi_dcmpun>
 8014008:	b140      	cbz	r0, 801401c <_printf_float+0xe0>
 801400a:	464b      	mov	r3, r9
 801400c:	2b00      	cmp	r3, #0
 801400e:	bfbc      	itt	lt
 8014010:	232d      	movlt	r3, #45	@ 0x2d
 8014012:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8014016:	4a7e      	ldr	r2, [pc, #504]	@ (8014210 <_printf_float+0x2d4>)
 8014018:	4b7e      	ldr	r3, [pc, #504]	@ (8014214 <_printf_float+0x2d8>)
 801401a:	e7d4      	b.n	8013fc6 <_printf_float+0x8a>
 801401c:	6863      	ldr	r3, [r4, #4]
 801401e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8014022:	9206      	str	r2, [sp, #24]
 8014024:	1c5a      	adds	r2, r3, #1
 8014026:	d13b      	bne.n	80140a0 <_printf_float+0x164>
 8014028:	2306      	movs	r3, #6
 801402a:	6063      	str	r3, [r4, #4]
 801402c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8014030:	2300      	movs	r3, #0
 8014032:	6022      	str	r2, [r4, #0]
 8014034:	9303      	str	r3, [sp, #12]
 8014036:	ab0a      	add	r3, sp, #40	@ 0x28
 8014038:	e9cd a301 	strd	sl, r3, [sp, #4]
 801403c:	ab09      	add	r3, sp, #36	@ 0x24
 801403e:	9300      	str	r3, [sp, #0]
 8014040:	6861      	ldr	r1, [r4, #4]
 8014042:	ec49 8b10 	vmov	d0, r8, r9
 8014046:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801404a:	4628      	mov	r0, r5
 801404c:	f7ff fed7 	bl	8013dfe <__cvt>
 8014050:	9b06      	ldr	r3, [sp, #24]
 8014052:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014054:	2b47      	cmp	r3, #71	@ 0x47
 8014056:	4680      	mov	r8, r0
 8014058:	d129      	bne.n	80140ae <_printf_float+0x172>
 801405a:	1cc8      	adds	r0, r1, #3
 801405c:	db02      	blt.n	8014064 <_printf_float+0x128>
 801405e:	6863      	ldr	r3, [r4, #4]
 8014060:	4299      	cmp	r1, r3
 8014062:	dd41      	ble.n	80140e8 <_printf_float+0x1ac>
 8014064:	f1aa 0a02 	sub.w	sl, sl, #2
 8014068:	fa5f fa8a 	uxtb.w	sl, sl
 801406c:	3901      	subs	r1, #1
 801406e:	4652      	mov	r2, sl
 8014070:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8014074:	9109      	str	r1, [sp, #36]	@ 0x24
 8014076:	f7ff ff27 	bl	8013ec8 <__exponent>
 801407a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801407c:	1813      	adds	r3, r2, r0
 801407e:	2a01      	cmp	r2, #1
 8014080:	4681      	mov	r9, r0
 8014082:	6123      	str	r3, [r4, #16]
 8014084:	dc02      	bgt.n	801408c <_printf_float+0x150>
 8014086:	6822      	ldr	r2, [r4, #0]
 8014088:	07d2      	lsls	r2, r2, #31
 801408a:	d501      	bpl.n	8014090 <_printf_float+0x154>
 801408c:	3301      	adds	r3, #1
 801408e:	6123      	str	r3, [r4, #16]
 8014090:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8014094:	2b00      	cmp	r3, #0
 8014096:	d0a2      	beq.n	8013fde <_printf_float+0xa2>
 8014098:	232d      	movs	r3, #45	@ 0x2d
 801409a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801409e:	e79e      	b.n	8013fde <_printf_float+0xa2>
 80140a0:	9a06      	ldr	r2, [sp, #24]
 80140a2:	2a47      	cmp	r2, #71	@ 0x47
 80140a4:	d1c2      	bne.n	801402c <_printf_float+0xf0>
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d1c0      	bne.n	801402c <_printf_float+0xf0>
 80140aa:	2301      	movs	r3, #1
 80140ac:	e7bd      	b.n	801402a <_printf_float+0xee>
 80140ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80140b2:	d9db      	bls.n	801406c <_printf_float+0x130>
 80140b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80140b8:	d118      	bne.n	80140ec <_printf_float+0x1b0>
 80140ba:	2900      	cmp	r1, #0
 80140bc:	6863      	ldr	r3, [r4, #4]
 80140be:	dd0b      	ble.n	80140d8 <_printf_float+0x19c>
 80140c0:	6121      	str	r1, [r4, #16]
 80140c2:	b913      	cbnz	r3, 80140ca <_printf_float+0x18e>
 80140c4:	6822      	ldr	r2, [r4, #0]
 80140c6:	07d0      	lsls	r0, r2, #31
 80140c8:	d502      	bpl.n	80140d0 <_printf_float+0x194>
 80140ca:	3301      	adds	r3, #1
 80140cc:	440b      	add	r3, r1
 80140ce:	6123      	str	r3, [r4, #16]
 80140d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80140d2:	f04f 0900 	mov.w	r9, #0
 80140d6:	e7db      	b.n	8014090 <_printf_float+0x154>
 80140d8:	b913      	cbnz	r3, 80140e0 <_printf_float+0x1a4>
 80140da:	6822      	ldr	r2, [r4, #0]
 80140dc:	07d2      	lsls	r2, r2, #31
 80140de:	d501      	bpl.n	80140e4 <_printf_float+0x1a8>
 80140e0:	3302      	adds	r3, #2
 80140e2:	e7f4      	b.n	80140ce <_printf_float+0x192>
 80140e4:	2301      	movs	r3, #1
 80140e6:	e7f2      	b.n	80140ce <_printf_float+0x192>
 80140e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80140ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80140ee:	4299      	cmp	r1, r3
 80140f0:	db05      	blt.n	80140fe <_printf_float+0x1c2>
 80140f2:	6823      	ldr	r3, [r4, #0]
 80140f4:	6121      	str	r1, [r4, #16]
 80140f6:	07d8      	lsls	r0, r3, #31
 80140f8:	d5ea      	bpl.n	80140d0 <_printf_float+0x194>
 80140fa:	1c4b      	adds	r3, r1, #1
 80140fc:	e7e7      	b.n	80140ce <_printf_float+0x192>
 80140fe:	2900      	cmp	r1, #0
 8014100:	bfd4      	ite	le
 8014102:	f1c1 0202 	rsble	r2, r1, #2
 8014106:	2201      	movgt	r2, #1
 8014108:	4413      	add	r3, r2
 801410a:	e7e0      	b.n	80140ce <_printf_float+0x192>
 801410c:	6823      	ldr	r3, [r4, #0]
 801410e:	055a      	lsls	r2, r3, #21
 8014110:	d407      	bmi.n	8014122 <_printf_float+0x1e6>
 8014112:	6923      	ldr	r3, [r4, #16]
 8014114:	4642      	mov	r2, r8
 8014116:	4631      	mov	r1, r6
 8014118:	4628      	mov	r0, r5
 801411a:	47b8      	blx	r7
 801411c:	3001      	adds	r0, #1
 801411e:	d12b      	bne.n	8014178 <_printf_float+0x23c>
 8014120:	e767      	b.n	8013ff2 <_printf_float+0xb6>
 8014122:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8014126:	f240 80dd 	bls.w	80142e4 <_printf_float+0x3a8>
 801412a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801412e:	2200      	movs	r2, #0
 8014130:	2300      	movs	r3, #0
 8014132:	f7ec fce9 	bl	8000b08 <__aeabi_dcmpeq>
 8014136:	2800      	cmp	r0, #0
 8014138:	d033      	beq.n	80141a2 <_printf_float+0x266>
 801413a:	4a37      	ldr	r2, [pc, #220]	@ (8014218 <_printf_float+0x2dc>)
 801413c:	2301      	movs	r3, #1
 801413e:	4631      	mov	r1, r6
 8014140:	4628      	mov	r0, r5
 8014142:	47b8      	blx	r7
 8014144:	3001      	adds	r0, #1
 8014146:	f43f af54 	beq.w	8013ff2 <_printf_float+0xb6>
 801414a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801414e:	4543      	cmp	r3, r8
 8014150:	db02      	blt.n	8014158 <_printf_float+0x21c>
 8014152:	6823      	ldr	r3, [r4, #0]
 8014154:	07d8      	lsls	r0, r3, #31
 8014156:	d50f      	bpl.n	8014178 <_printf_float+0x23c>
 8014158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801415c:	4631      	mov	r1, r6
 801415e:	4628      	mov	r0, r5
 8014160:	47b8      	blx	r7
 8014162:	3001      	adds	r0, #1
 8014164:	f43f af45 	beq.w	8013ff2 <_printf_float+0xb6>
 8014168:	f04f 0900 	mov.w	r9, #0
 801416c:	f108 38ff 	add.w	r8, r8, #4294967295
 8014170:	f104 0a1a 	add.w	sl, r4, #26
 8014174:	45c8      	cmp	r8, r9
 8014176:	dc09      	bgt.n	801418c <_printf_float+0x250>
 8014178:	6823      	ldr	r3, [r4, #0]
 801417a:	079b      	lsls	r3, r3, #30
 801417c:	f100 8103 	bmi.w	8014386 <_printf_float+0x44a>
 8014180:	68e0      	ldr	r0, [r4, #12]
 8014182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014184:	4298      	cmp	r0, r3
 8014186:	bfb8      	it	lt
 8014188:	4618      	movlt	r0, r3
 801418a:	e734      	b.n	8013ff6 <_printf_float+0xba>
 801418c:	2301      	movs	r3, #1
 801418e:	4652      	mov	r2, sl
 8014190:	4631      	mov	r1, r6
 8014192:	4628      	mov	r0, r5
 8014194:	47b8      	blx	r7
 8014196:	3001      	adds	r0, #1
 8014198:	f43f af2b 	beq.w	8013ff2 <_printf_float+0xb6>
 801419c:	f109 0901 	add.w	r9, r9, #1
 80141a0:	e7e8      	b.n	8014174 <_printf_float+0x238>
 80141a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	dc39      	bgt.n	801421c <_printf_float+0x2e0>
 80141a8:	4a1b      	ldr	r2, [pc, #108]	@ (8014218 <_printf_float+0x2dc>)
 80141aa:	2301      	movs	r3, #1
 80141ac:	4631      	mov	r1, r6
 80141ae:	4628      	mov	r0, r5
 80141b0:	47b8      	blx	r7
 80141b2:	3001      	adds	r0, #1
 80141b4:	f43f af1d 	beq.w	8013ff2 <_printf_float+0xb6>
 80141b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80141bc:	ea59 0303 	orrs.w	r3, r9, r3
 80141c0:	d102      	bne.n	80141c8 <_printf_float+0x28c>
 80141c2:	6823      	ldr	r3, [r4, #0]
 80141c4:	07d9      	lsls	r1, r3, #31
 80141c6:	d5d7      	bpl.n	8014178 <_printf_float+0x23c>
 80141c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141cc:	4631      	mov	r1, r6
 80141ce:	4628      	mov	r0, r5
 80141d0:	47b8      	blx	r7
 80141d2:	3001      	adds	r0, #1
 80141d4:	f43f af0d 	beq.w	8013ff2 <_printf_float+0xb6>
 80141d8:	f04f 0a00 	mov.w	sl, #0
 80141dc:	f104 0b1a 	add.w	fp, r4, #26
 80141e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141e2:	425b      	negs	r3, r3
 80141e4:	4553      	cmp	r3, sl
 80141e6:	dc01      	bgt.n	80141ec <_printf_float+0x2b0>
 80141e8:	464b      	mov	r3, r9
 80141ea:	e793      	b.n	8014114 <_printf_float+0x1d8>
 80141ec:	2301      	movs	r3, #1
 80141ee:	465a      	mov	r2, fp
 80141f0:	4631      	mov	r1, r6
 80141f2:	4628      	mov	r0, r5
 80141f4:	47b8      	blx	r7
 80141f6:	3001      	adds	r0, #1
 80141f8:	f43f aefb 	beq.w	8013ff2 <_printf_float+0xb6>
 80141fc:	f10a 0a01 	add.w	sl, sl, #1
 8014200:	e7ee      	b.n	80141e0 <_printf_float+0x2a4>
 8014202:	bf00      	nop
 8014204:	7fefffff 	.word	0x7fefffff
 8014208:	0801adf8 	.word	0x0801adf8
 801420c:	0801adfc 	.word	0x0801adfc
 8014210:	0801ae00 	.word	0x0801ae00
 8014214:	0801ae04 	.word	0x0801ae04
 8014218:	0801ae08 	.word	0x0801ae08
 801421c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801421e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014222:	4553      	cmp	r3, sl
 8014224:	bfa8      	it	ge
 8014226:	4653      	movge	r3, sl
 8014228:	2b00      	cmp	r3, #0
 801422a:	4699      	mov	r9, r3
 801422c:	dc36      	bgt.n	801429c <_printf_float+0x360>
 801422e:	f04f 0b00 	mov.w	fp, #0
 8014232:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014236:	f104 021a 	add.w	r2, r4, #26
 801423a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801423c:	9306      	str	r3, [sp, #24]
 801423e:	eba3 0309 	sub.w	r3, r3, r9
 8014242:	455b      	cmp	r3, fp
 8014244:	dc31      	bgt.n	80142aa <_printf_float+0x36e>
 8014246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014248:	459a      	cmp	sl, r3
 801424a:	dc3a      	bgt.n	80142c2 <_printf_float+0x386>
 801424c:	6823      	ldr	r3, [r4, #0]
 801424e:	07da      	lsls	r2, r3, #31
 8014250:	d437      	bmi.n	80142c2 <_printf_float+0x386>
 8014252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014254:	ebaa 0903 	sub.w	r9, sl, r3
 8014258:	9b06      	ldr	r3, [sp, #24]
 801425a:	ebaa 0303 	sub.w	r3, sl, r3
 801425e:	4599      	cmp	r9, r3
 8014260:	bfa8      	it	ge
 8014262:	4699      	movge	r9, r3
 8014264:	f1b9 0f00 	cmp.w	r9, #0
 8014268:	dc33      	bgt.n	80142d2 <_printf_float+0x396>
 801426a:	f04f 0800 	mov.w	r8, #0
 801426e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014272:	f104 0b1a 	add.w	fp, r4, #26
 8014276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014278:	ebaa 0303 	sub.w	r3, sl, r3
 801427c:	eba3 0309 	sub.w	r3, r3, r9
 8014280:	4543      	cmp	r3, r8
 8014282:	f77f af79 	ble.w	8014178 <_printf_float+0x23c>
 8014286:	2301      	movs	r3, #1
 8014288:	465a      	mov	r2, fp
 801428a:	4631      	mov	r1, r6
 801428c:	4628      	mov	r0, r5
 801428e:	47b8      	blx	r7
 8014290:	3001      	adds	r0, #1
 8014292:	f43f aeae 	beq.w	8013ff2 <_printf_float+0xb6>
 8014296:	f108 0801 	add.w	r8, r8, #1
 801429a:	e7ec      	b.n	8014276 <_printf_float+0x33a>
 801429c:	4642      	mov	r2, r8
 801429e:	4631      	mov	r1, r6
 80142a0:	4628      	mov	r0, r5
 80142a2:	47b8      	blx	r7
 80142a4:	3001      	adds	r0, #1
 80142a6:	d1c2      	bne.n	801422e <_printf_float+0x2f2>
 80142a8:	e6a3      	b.n	8013ff2 <_printf_float+0xb6>
 80142aa:	2301      	movs	r3, #1
 80142ac:	4631      	mov	r1, r6
 80142ae:	4628      	mov	r0, r5
 80142b0:	9206      	str	r2, [sp, #24]
 80142b2:	47b8      	blx	r7
 80142b4:	3001      	adds	r0, #1
 80142b6:	f43f ae9c 	beq.w	8013ff2 <_printf_float+0xb6>
 80142ba:	9a06      	ldr	r2, [sp, #24]
 80142bc:	f10b 0b01 	add.w	fp, fp, #1
 80142c0:	e7bb      	b.n	801423a <_printf_float+0x2fe>
 80142c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142c6:	4631      	mov	r1, r6
 80142c8:	4628      	mov	r0, r5
 80142ca:	47b8      	blx	r7
 80142cc:	3001      	adds	r0, #1
 80142ce:	d1c0      	bne.n	8014252 <_printf_float+0x316>
 80142d0:	e68f      	b.n	8013ff2 <_printf_float+0xb6>
 80142d2:	9a06      	ldr	r2, [sp, #24]
 80142d4:	464b      	mov	r3, r9
 80142d6:	4442      	add	r2, r8
 80142d8:	4631      	mov	r1, r6
 80142da:	4628      	mov	r0, r5
 80142dc:	47b8      	blx	r7
 80142de:	3001      	adds	r0, #1
 80142e0:	d1c3      	bne.n	801426a <_printf_float+0x32e>
 80142e2:	e686      	b.n	8013ff2 <_printf_float+0xb6>
 80142e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80142e8:	f1ba 0f01 	cmp.w	sl, #1
 80142ec:	dc01      	bgt.n	80142f2 <_printf_float+0x3b6>
 80142ee:	07db      	lsls	r3, r3, #31
 80142f0:	d536      	bpl.n	8014360 <_printf_float+0x424>
 80142f2:	2301      	movs	r3, #1
 80142f4:	4642      	mov	r2, r8
 80142f6:	4631      	mov	r1, r6
 80142f8:	4628      	mov	r0, r5
 80142fa:	47b8      	blx	r7
 80142fc:	3001      	adds	r0, #1
 80142fe:	f43f ae78 	beq.w	8013ff2 <_printf_float+0xb6>
 8014302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014306:	4631      	mov	r1, r6
 8014308:	4628      	mov	r0, r5
 801430a:	47b8      	blx	r7
 801430c:	3001      	adds	r0, #1
 801430e:	f43f ae70 	beq.w	8013ff2 <_printf_float+0xb6>
 8014312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8014316:	2200      	movs	r2, #0
 8014318:	2300      	movs	r3, #0
 801431a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801431e:	f7ec fbf3 	bl	8000b08 <__aeabi_dcmpeq>
 8014322:	b9c0      	cbnz	r0, 8014356 <_printf_float+0x41a>
 8014324:	4653      	mov	r3, sl
 8014326:	f108 0201 	add.w	r2, r8, #1
 801432a:	4631      	mov	r1, r6
 801432c:	4628      	mov	r0, r5
 801432e:	47b8      	blx	r7
 8014330:	3001      	adds	r0, #1
 8014332:	d10c      	bne.n	801434e <_printf_float+0x412>
 8014334:	e65d      	b.n	8013ff2 <_printf_float+0xb6>
 8014336:	2301      	movs	r3, #1
 8014338:	465a      	mov	r2, fp
 801433a:	4631      	mov	r1, r6
 801433c:	4628      	mov	r0, r5
 801433e:	47b8      	blx	r7
 8014340:	3001      	adds	r0, #1
 8014342:	f43f ae56 	beq.w	8013ff2 <_printf_float+0xb6>
 8014346:	f108 0801 	add.w	r8, r8, #1
 801434a:	45d0      	cmp	r8, sl
 801434c:	dbf3      	blt.n	8014336 <_printf_float+0x3fa>
 801434e:	464b      	mov	r3, r9
 8014350:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8014354:	e6df      	b.n	8014116 <_printf_float+0x1da>
 8014356:	f04f 0800 	mov.w	r8, #0
 801435a:	f104 0b1a 	add.w	fp, r4, #26
 801435e:	e7f4      	b.n	801434a <_printf_float+0x40e>
 8014360:	2301      	movs	r3, #1
 8014362:	4642      	mov	r2, r8
 8014364:	e7e1      	b.n	801432a <_printf_float+0x3ee>
 8014366:	2301      	movs	r3, #1
 8014368:	464a      	mov	r2, r9
 801436a:	4631      	mov	r1, r6
 801436c:	4628      	mov	r0, r5
 801436e:	47b8      	blx	r7
 8014370:	3001      	adds	r0, #1
 8014372:	f43f ae3e 	beq.w	8013ff2 <_printf_float+0xb6>
 8014376:	f108 0801 	add.w	r8, r8, #1
 801437a:	68e3      	ldr	r3, [r4, #12]
 801437c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801437e:	1a5b      	subs	r3, r3, r1
 8014380:	4543      	cmp	r3, r8
 8014382:	dcf0      	bgt.n	8014366 <_printf_float+0x42a>
 8014384:	e6fc      	b.n	8014180 <_printf_float+0x244>
 8014386:	f04f 0800 	mov.w	r8, #0
 801438a:	f104 0919 	add.w	r9, r4, #25
 801438e:	e7f4      	b.n	801437a <_printf_float+0x43e>

08014390 <_printf_common>:
 8014390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014394:	4616      	mov	r6, r2
 8014396:	4698      	mov	r8, r3
 8014398:	688a      	ldr	r2, [r1, #8]
 801439a:	690b      	ldr	r3, [r1, #16]
 801439c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80143a0:	4293      	cmp	r3, r2
 80143a2:	bfb8      	it	lt
 80143a4:	4613      	movlt	r3, r2
 80143a6:	6033      	str	r3, [r6, #0]
 80143a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80143ac:	4607      	mov	r7, r0
 80143ae:	460c      	mov	r4, r1
 80143b0:	b10a      	cbz	r2, 80143b6 <_printf_common+0x26>
 80143b2:	3301      	adds	r3, #1
 80143b4:	6033      	str	r3, [r6, #0]
 80143b6:	6823      	ldr	r3, [r4, #0]
 80143b8:	0699      	lsls	r1, r3, #26
 80143ba:	bf42      	ittt	mi
 80143bc:	6833      	ldrmi	r3, [r6, #0]
 80143be:	3302      	addmi	r3, #2
 80143c0:	6033      	strmi	r3, [r6, #0]
 80143c2:	6825      	ldr	r5, [r4, #0]
 80143c4:	f015 0506 	ands.w	r5, r5, #6
 80143c8:	d106      	bne.n	80143d8 <_printf_common+0x48>
 80143ca:	f104 0a19 	add.w	sl, r4, #25
 80143ce:	68e3      	ldr	r3, [r4, #12]
 80143d0:	6832      	ldr	r2, [r6, #0]
 80143d2:	1a9b      	subs	r3, r3, r2
 80143d4:	42ab      	cmp	r3, r5
 80143d6:	dc26      	bgt.n	8014426 <_printf_common+0x96>
 80143d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80143dc:	6822      	ldr	r2, [r4, #0]
 80143de:	3b00      	subs	r3, #0
 80143e0:	bf18      	it	ne
 80143e2:	2301      	movne	r3, #1
 80143e4:	0692      	lsls	r2, r2, #26
 80143e6:	d42b      	bmi.n	8014440 <_printf_common+0xb0>
 80143e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80143ec:	4641      	mov	r1, r8
 80143ee:	4638      	mov	r0, r7
 80143f0:	47c8      	blx	r9
 80143f2:	3001      	adds	r0, #1
 80143f4:	d01e      	beq.n	8014434 <_printf_common+0xa4>
 80143f6:	6823      	ldr	r3, [r4, #0]
 80143f8:	6922      	ldr	r2, [r4, #16]
 80143fa:	f003 0306 	and.w	r3, r3, #6
 80143fe:	2b04      	cmp	r3, #4
 8014400:	bf02      	ittt	eq
 8014402:	68e5      	ldreq	r5, [r4, #12]
 8014404:	6833      	ldreq	r3, [r6, #0]
 8014406:	1aed      	subeq	r5, r5, r3
 8014408:	68a3      	ldr	r3, [r4, #8]
 801440a:	bf0c      	ite	eq
 801440c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014410:	2500      	movne	r5, #0
 8014412:	4293      	cmp	r3, r2
 8014414:	bfc4      	itt	gt
 8014416:	1a9b      	subgt	r3, r3, r2
 8014418:	18ed      	addgt	r5, r5, r3
 801441a:	2600      	movs	r6, #0
 801441c:	341a      	adds	r4, #26
 801441e:	42b5      	cmp	r5, r6
 8014420:	d11a      	bne.n	8014458 <_printf_common+0xc8>
 8014422:	2000      	movs	r0, #0
 8014424:	e008      	b.n	8014438 <_printf_common+0xa8>
 8014426:	2301      	movs	r3, #1
 8014428:	4652      	mov	r2, sl
 801442a:	4641      	mov	r1, r8
 801442c:	4638      	mov	r0, r7
 801442e:	47c8      	blx	r9
 8014430:	3001      	adds	r0, #1
 8014432:	d103      	bne.n	801443c <_printf_common+0xac>
 8014434:	f04f 30ff 	mov.w	r0, #4294967295
 8014438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801443c:	3501      	adds	r5, #1
 801443e:	e7c6      	b.n	80143ce <_printf_common+0x3e>
 8014440:	18e1      	adds	r1, r4, r3
 8014442:	1c5a      	adds	r2, r3, #1
 8014444:	2030      	movs	r0, #48	@ 0x30
 8014446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801444a:	4422      	add	r2, r4
 801444c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014454:	3302      	adds	r3, #2
 8014456:	e7c7      	b.n	80143e8 <_printf_common+0x58>
 8014458:	2301      	movs	r3, #1
 801445a:	4622      	mov	r2, r4
 801445c:	4641      	mov	r1, r8
 801445e:	4638      	mov	r0, r7
 8014460:	47c8      	blx	r9
 8014462:	3001      	adds	r0, #1
 8014464:	d0e6      	beq.n	8014434 <_printf_common+0xa4>
 8014466:	3601      	adds	r6, #1
 8014468:	e7d9      	b.n	801441e <_printf_common+0x8e>
	...

0801446c <_printf_i>:
 801446c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014470:	7e0f      	ldrb	r7, [r1, #24]
 8014472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014474:	2f78      	cmp	r7, #120	@ 0x78
 8014476:	4691      	mov	r9, r2
 8014478:	4680      	mov	r8, r0
 801447a:	460c      	mov	r4, r1
 801447c:	469a      	mov	sl, r3
 801447e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014482:	d807      	bhi.n	8014494 <_printf_i+0x28>
 8014484:	2f62      	cmp	r7, #98	@ 0x62
 8014486:	d80a      	bhi.n	801449e <_printf_i+0x32>
 8014488:	2f00      	cmp	r7, #0
 801448a:	f000 80d2 	beq.w	8014632 <_printf_i+0x1c6>
 801448e:	2f58      	cmp	r7, #88	@ 0x58
 8014490:	f000 80b9 	beq.w	8014606 <_printf_i+0x19a>
 8014494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801449c:	e03a      	b.n	8014514 <_printf_i+0xa8>
 801449e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80144a2:	2b15      	cmp	r3, #21
 80144a4:	d8f6      	bhi.n	8014494 <_printf_i+0x28>
 80144a6:	a101      	add	r1, pc, #4	@ (adr r1, 80144ac <_printf_i+0x40>)
 80144a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80144ac:	08014505 	.word	0x08014505
 80144b0:	08014519 	.word	0x08014519
 80144b4:	08014495 	.word	0x08014495
 80144b8:	08014495 	.word	0x08014495
 80144bc:	08014495 	.word	0x08014495
 80144c0:	08014495 	.word	0x08014495
 80144c4:	08014519 	.word	0x08014519
 80144c8:	08014495 	.word	0x08014495
 80144cc:	08014495 	.word	0x08014495
 80144d0:	08014495 	.word	0x08014495
 80144d4:	08014495 	.word	0x08014495
 80144d8:	08014619 	.word	0x08014619
 80144dc:	08014543 	.word	0x08014543
 80144e0:	080145d3 	.word	0x080145d3
 80144e4:	08014495 	.word	0x08014495
 80144e8:	08014495 	.word	0x08014495
 80144ec:	0801463b 	.word	0x0801463b
 80144f0:	08014495 	.word	0x08014495
 80144f4:	08014543 	.word	0x08014543
 80144f8:	08014495 	.word	0x08014495
 80144fc:	08014495 	.word	0x08014495
 8014500:	080145db 	.word	0x080145db
 8014504:	6833      	ldr	r3, [r6, #0]
 8014506:	1d1a      	adds	r2, r3, #4
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	6032      	str	r2, [r6, #0]
 801450c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014514:	2301      	movs	r3, #1
 8014516:	e09d      	b.n	8014654 <_printf_i+0x1e8>
 8014518:	6833      	ldr	r3, [r6, #0]
 801451a:	6820      	ldr	r0, [r4, #0]
 801451c:	1d19      	adds	r1, r3, #4
 801451e:	6031      	str	r1, [r6, #0]
 8014520:	0606      	lsls	r6, r0, #24
 8014522:	d501      	bpl.n	8014528 <_printf_i+0xbc>
 8014524:	681d      	ldr	r5, [r3, #0]
 8014526:	e003      	b.n	8014530 <_printf_i+0xc4>
 8014528:	0645      	lsls	r5, r0, #25
 801452a:	d5fb      	bpl.n	8014524 <_printf_i+0xb8>
 801452c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014530:	2d00      	cmp	r5, #0
 8014532:	da03      	bge.n	801453c <_printf_i+0xd0>
 8014534:	232d      	movs	r3, #45	@ 0x2d
 8014536:	426d      	negs	r5, r5
 8014538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801453c:	4859      	ldr	r0, [pc, #356]	@ (80146a4 <_printf_i+0x238>)
 801453e:	230a      	movs	r3, #10
 8014540:	e011      	b.n	8014566 <_printf_i+0xfa>
 8014542:	6821      	ldr	r1, [r4, #0]
 8014544:	6833      	ldr	r3, [r6, #0]
 8014546:	0608      	lsls	r0, r1, #24
 8014548:	f853 5b04 	ldr.w	r5, [r3], #4
 801454c:	d402      	bmi.n	8014554 <_printf_i+0xe8>
 801454e:	0649      	lsls	r1, r1, #25
 8014550:	bf48      	it	mi
 8014552:	b2ad      	uxthmi	r5, r5
 8014554:	2f6f      	cmp	r7, #111	@ 0x6f
 8014556:	4853      	ldr	r0, [pc, #332]	@ (80146a4 <_printf_i+0x238>)
 8014558:	6033      	str	r3, [r6, #0]
 801455a:	bf14      	ite	ne
 801455c:	230a      	movne	r3, #10
 801455e:	2308      	moveq	r3, #8
 8014560:	2100      	movs	r1, #0
 8014562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014566:	6866      	ldr	r6, [r4, #4]
 8014568:	60a6      	str	r6, [r4, #8]
 801456a:	2e00      	cmp	r6, #0
 801456c:	bfa2      	ittt	ge
 801456e:	6821      	ldrge	r1, [r4, #0]
 8014570:	f021 0104 	bicge.w	r1, r1, #4
 8014574:	6021      	strge	r1, [r4, #0]
 8014576:	b90d      	cbnz	r5, 801457c <_printf_i+0x110>
 8014578:	2e00      	cmp	r6, #0
 801457a:	d04b      	beq.n	8014614 <_printf_i+0x1a8>
 801457c:	4616      	mov	r6, r2
 801457e:	fbb5 f1f3 	udiv	r1, r5, r3
 8014582:	fb03 5711 	mls	r7, r3, r1, r5
 8014586:	5dc7      	ldrb	r7, [r0, r7]
 8014588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801458c:	462f      	mov	r7, r5
 801458e:	42bb      	cmp	r3, r7
 8014590:	460d      	mov	r5, r1
 8014592:	d9f4      	bls.n	801457e <_printf_i+0x112>
 8014594:	2b08      	cmp	r3, #8
 8014596:	d10b      	bne.n	80145b0 <_printf_i+0x144>
 8014598:	6823      	ldr	r3, [r4, #0]
 801459a:	07df      	lsls	r7, r3, #31
 801459c:	d508      	bpl.n	80145b0 <_printf_i+0x144>
 801459e:	6923      	ldr	r3, [r4, #16]
 80145a0:	6861      	ldr	r1, [r4, #4]
 80145a2:	4299      	cmp	r1, r3
 80145a4:	bfde      	ittt	le
 80145a6:	2330      	movle	r3, #48	@ 0x30
 80145a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80145ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80145b0:	1b92      	subs	r2, r2, r6
 80145b2:	6122      	str	r2, [r4, #16]
 80145b4:	f8cd a000 	str.w	sl, [sp]
 80145b8:	464b      	mov	r3, r9
 80145ba:	aa03      	add	r2, sp, #12
 80145bc:	4621      	mov	r1, r4
 80145be:	4640      	mov	r0, r8
 80145c0:	f7ff fee6 	bl	8014390 <_printf_common>
 80145c4:	3001      	adds	r0, #1
 80145c6:	d14a      	bne.n	801465e <_printf_i+0x1f2>
 80145c8:	f04f 30ff 	mov.w	r0, #4294967295
 80145cc:	b004      	add	sp, #16
 80145ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145d2:	6823      	ldr	r3, [r4, #0]
 80145d4:	f043 0320 	orr.w	r3, r3, #32
 80145d8:	6023      	str	r3, [r4, #0]
 80145da:	4833      	ldr	r0, [pc, #204]	@ (80146a8 <_printf_i+0x23c>)
 80145dc:	2778      	movs	r7, #120	@ 0x78
 80145de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80145e2:	6823      	ldr	r3, [r4, #0]
 80145e4:	6831      	ldr	r1, [r6, #0]
 80145e6:	061f      	lsls	r7, r3, #24
 80145e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80145ec:	d402      	bmi.n	80145f4 <_printf_i+0x188>
 80145ee:	065f      	lsls	r7, r3, #25
 80145f0:	bf48      	it	mi
 80145f2:	b2ad      	uxthmi	r5, r5
 80145f4:	6031      	str	r1, [r6, #0]
 80145f6:	07d9      	lsls	r1, r3, #31
 80145f8:	bf44      	itt	mi
 80145fa:	f043 0320 	orrmi.w	r3, r3, #32
 80145fe:	6023      	strmi	r3, [r4, #0]
 8014600:	b11d      	cbz	r5, 801460a <_printf_i+0x19e>
 8014602:	2310      	movs	r3, #16
 8014604:	e7ac      	b.n	8014560 <_printf_i+0xf4>
 8014606:	4827      	ldr	r0, [pc, #156]	@ (80146a4 <_printf_i+0x238>)
 8014608:	e7e9      	b.n	80145de <_printf_i+0x172>
 801460a:	6823      	ldr	r3, [r4, #0]
 801460c:	f023 0320 	bic.w	r3, r3, #32
 8014610:	6023      	str	r3, [r4, #0]
 8014612:	e7f6      	b.n	8014602 <_printf_i+0x196>
 8014614:	4616      	mov	r6, r2
 8014616:	e7bd      	b.n	8014594 <_printf_i+0x128>
 8014618:	6833      	ldr	r3, [r6, #0]
 801461a:	6825      	ldr	r5, [r4, #0]
 801461c:	6961      	ldr	r1, [r4, #20]
 801461e:	1d18      	adds	r0, r3, #4
 8014620:	6030      	str	r0, [r6, #0]
 8014622:	062e      	lsls	r6, r5, #24
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	d501      	bpl.n	801462c <_printf_i+0x1c0>
 8014628:	6019      	str	r1, [r3, #0]
 801462a:	e002      	b.n	8014632 <_printf_i+0x1c6>
 801462c:	0668      	lsls	r0, r5, #25
 801462e:	d5fb      	bpl.n	8014628 <_printf_i+0x1bc>
 8014630:	8019      	strh	r1, [r3, #0]
 8014632:	2300      	movs	r3, #0
 8014634:	6123      	str	r3, [r4, #16]
 8014636:	4616      	mov	r6, r2
 8014638:	e7bc      	b.n	80145b4 <_printf_i+0x148>
 801463a:	6833      	ldr	r3, [r6, #0]
 801463c:	1d1a      	adds	r2, r3, #4
 801463e:	6032      	str	r2, [r6, #0]
 8014640:	681e      	ldr	r6, [r3, #0]
 8014642:	6862      	ldr	r2, [r4, #4]
 8014644:	2100      	movs	r1, #0
 8014646:	4630      	mov	r0, r6
 8014648:	f7eb fde2 	bl	8000210 <memchr>
 801464c:	b108      	cbz	r0, 8014652 <_printf_i+0x1e6>
 801464e:	1b80      	subs	r0, r0, r6
 8014650:	6060      	str	r0, [r4, #4]
 8014652:	6863      	ldr	r3, [r4, #4]
 8014654:	6123      	str	r3, [r4, #16]
 8014656:	2300      	movs	r3, #0
 8014658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801465c:	e7aa      	b.n	80145b4 <_printf_i+0x148>
 801465e:	6923      	ldr	r3, [r4, #16]
 8014660:	4632      	mov	r2, r6
 8014662:	4649      	mov	r1, r9
 8014664:	4640      	mov	r0, r8
 8014666:	47d0      	blx	sl
 8014668:	3001      	adds	r0, #1
 801466a:	d0ad      	beq.n	80145c8 <_printf_i+0x15c>
 801466c:	6823      	ldr	r3, [r4, #0]
 801466e:	079b      	lsls	r3, r3, #30
 8014670:	d413      	bmi.n	801469a <_printf_i+0x22e>
 8014672:	68e0      	ldr	r0, [r4, #12]
 8014674:	9b03      	ldr	r3, [sp, #12]
 8014676:	4298      	cmp	r0, r3
 8014678:	bfb8      	it	lt
 801467a:	4618      	movlt	r0, r3
 801467c:	e7a6      	b.n	80145cc <_printf_i+0x160>
 801467e:	2301      	movs	r3, #1
 8014680:	4632      	mov	r2, r6
 8014682:	4649      	mov	r1, r9
 8014684:	4640      	mov	r0, r8
 8014686:	47d0      	blx	sl
 8014688:	3001      	adds	r0, #1
 801468a:	d09d      	beq.n	80145c8 <_printf_i+0x15c>
 801468c:	3501      	adds	r5, #1
 801468e:	68e3      	ldr	r3, [r4, #12]
 8014690:	9903      	ldr	r1, [sp, #12]
 8014692:	1a5b      	subs	r3, r3, r1
 8014694:	42ab      	cmp	r3, r5
 8014696:	dcf2      	bgt.n	801467e <_printf_i+0x212>
 8014698:	e7eb      	b.n	8014672 <_printf_i+0x206>
 801469a:	2500      	movs	r5, #0
 801469c:	f104 0619 	add.w	r6, r4, #25
 80146a0:	e7f5      	b.n	801468e <_printf_i+0x222>
 80146a2:	bf00      	nop
 80146a4:	0801ae0a 	.word	0x0801ae0a
 80146a8:	0801ae1b 	.word	0x0801ae1b

080146ac <std>:
 80146ac:	2300      	movs	r3, #0
 80146ae:	b510      	push	{r4, lr}
 80146b0:	4604      	mov	r4, r0
 80146b2:	e9c0 3300 	strd	r3, r3, [r0]
 80146b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80146ba:	6083      	str	r3, [r0, #8]
 80146bc:	8181      	strh	r1, [r0, #12]
 80146be:	6643      	str	r3, [r0, #100]	@ 0x64
 80146c0:	81c2      	strh	r2, [r0, #14]
 80146c2:	6183      	str	r3, [r0, #24]
 80146c4:	4619      	mov	r1, r3
 80146c6:	2208      	movs	r2, #8
 80146c8:	305c      	adds	r0, #92	@ 0x5c
 80146ca:	f000 fa4d 	bl	8014b68 <memset>
 80146ce:	4b0d      	ldr	r3, [pc, #52]	@ (8014704 <std+0x58>)
 80146d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80146d2:	4b0d      	ldr	r3, [pc, #52]	@ (8014708 <std+0x5c>)
 80146d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80146d6:	4b0d      	ldr	r3, [pc, #52]	@ (801470c <std+0x60>)
 80146d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80146da:	4b0d      	ldr	r3, [pc, #52]	@ (8014710 <std+0x64>)
 80146dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80146de:	4b0d      	ldr	r3, [pc, #52]	@ (8014714 <std+0x68>)
 80146e0:	6224      	str	r4, [r4, #32]
 80146e2:	429c      	cmp	r4, r3
 80146e4:	d006      	beq.n	80146f4 <std+0x48>
 80146e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80146ea:	4294      	cmp	r4, r2
 80146ec:	d002      	beq.n	80146f4 <std+0x48>
 80146ee:	33d0      	adds	r3, #208	@ 0xd0
 80146f0:	429c      	cmp	r4, r3
 80146f2:	d105      	bne.n	8014700 <std+0x54>
 80146f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80146f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146fc:	f000 bab0 	b.w	8014c60 <__retarget_lock_init_recursive>
 8014700:	bd10      	pop	{r4, pc}
 8014702:	bf00      	nop
 8014704:	080149b9 	.word	0x080149b9
 8014708:	080149db 	.word	0x080149db
 801470c:	08014a13 	.word	0x08014a13
 8014710:	08014a37 	.word	0x08014a37
 8014714:	200065ec 	.word	0x200065ec

08014718 <stdio_exit_handler>:
 8014718:	4a02      	ldr	r2, [pc, #8]	@ (8014724 <stdio_exit_handler+0xc>)
 801471a:	4903      	ldr	r1, [pc, #12]	@ (8014728 <stdio_exit_handler+0x10>)
 801471c:	4803      	ldr	r0, [pc, #12]	@ (801472c <stdio_exit_handler+0x14>)
 801471e:	f000 b869 	b.w	80147f4 <_fwalk_sglue>
 8014722:	bf00      	nop
 8014724:	20004f28 	.word	0x20004f28
 8014728:	08016841 	.word	0x08016841
 801472c:	20004f38 	.word	0x20004f38

08014730 <cleanup_stdio>:
 8014730:	6841      	ldr	r1, [r0, #4]
 8014732:	4b0c      	ldr	r3, [pc, #48]	@ (8014764 <cleanup_stdio+0x34>)
 8014734:	4299      	cmp	r1, r3
 8014736:	b510      	push	{r4, lr}
 8014738:	4604      	mov	r4, r0
 801473a:	d001      	beq.n	8014740 <cleanup_stdio+0x10>
 801473c:	f002 f880 	bl	8016840 <_fflush_r>
 8014740:	68a1      	ldr	r1, [r4, #8]
 8014742:	4b09      	ldr	r3, [pc, #36]	@ (8014768 <cleanup_stdio+0x38>)
 8014744:	4299      	cmp	r1, r3
 8014746:	d002      	beq.n	801474e <cleanup_stdio+0x1e>
 8014748:	4620      	mov	r0, r4
 801474a:	f002 f879 	bl	8016840 <_fflush_r>
 801474e:	68e1      	ldr	r1, [r4, #12]
 8014750:	4b06      	ldr	r3, [pc, #24]	@ (801476c <cleanup_stdio+0x3c>)
 8014752:	4299      	cmp	r1, r3
 8014754:	d004      	beq.n	8014760 <cleanup_stdio+0x30>
 8014756:	4620      	mov	r0, r4
 8014758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801475c:	f002 b870 	b.w	8016840 <_fflush_r>
 8014760:	bd10      	pop	{r4, pc}
 8014762:	bf00      	nop
 8014764:	200065ec 	.word	0x200065ec
 8014768:	20006654 	.word	0x20006654
 801476c:	200066bc 	.word	0x200066bc

08014770 <global_stdio_init.part.0>:
 8014770:	b510      	push	{r4, lr}
 8014772:	4b0b      	ldr	r3, [pc, #44]	@ (80147a0 <global_stdio_init.part.0+0x30>)
 8014774:	4c0b      	ldr	r4, [pc, #44]	@ (80147a4 <global_stdio_init.part.0+0x34>)
 8014776:	4a0c      	ldr	r2, [pc, #48]	@ (80147a8 <global_stdio_init.part.0+0x38>)
 8014778:	601a      	str	r2, [r3, #0]
 801477a:	4620      	mov	r0, r4
 801477c:	2200      	movs	r2, #0
 801477e:	2104      	movs	r1, #4
 8014780:	f7ff ff94 	bl	80146ac <std>
 8014784:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014788:	2201      	movs	r2, #1
 801478a:	2109      	movs	r1, #9
 801478c:	f7ff ff8e 	bl	80146ac <std>
 8014790:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014794:	2202      	movs	r2, #2
 8014796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801479a:	2112      	movs	r1, #18
 801479c:	f7ff bf86 	b.w	80146ac <std>
 80147a0:	20006724 	.word	0x20006724
 80147a4:	200065ec 	.word	0x200065ec
 80147a8:	08014719 	.word	0x08014719

080147ac <__sfp_lock_acquire>:
 80147ac:	4801      	ldr	r0, [pc, #4]	@ (80147b4 <__sfp_lock_acquire+0x8>)
 80147ae:	f000 ba58 	b.w	8014c62 <__retarget_lock_acquire_recursive>
 80147b2:	bf00      	nop
 80147b4:	2000672d 	.word	0x2000672d

080147b8 <__sfp_lock_release>:
 80147b8:	4801      	ldr	r0, [pc, #4]	@ (80147c0 <__sfp_lock_release+0x8>)
 80147ba:	f000 ba53 	b.w	8014c64 <__retarget_lock_release_recursive>
 80147be:	bf00      	nop
 80147c0:	2000672d 	.word	0x2000672d

080147c4 <__sinit>:
 80147c4:	b510      	push	{r4, lr}
 80147c6:	4604      	mov	r4, r0
 80147c8:	f7ff fff0 	bl	80147ac <__sfp_lock_acquire>
 80147cc:	6a23      	ldr	r3, [r4, #32]
 80147ce:	b11b      	cbz	r3, 80147d8 <__sinit+0x14>
 80147d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147d4:	f7ff bff0 	b.w	80147b8 <__sfp_lock_release>
 80147d8:	4b04      	ldr	r3, [pc, #16]	@ (80147ec <__sinit+0x28>)
 80147da:	6223      	str	r3, [r4, #32]
 80147dc:	4b04      	ldr	r3, [pc, #16]	@ (80147f0 <__sinit+0x2c>)
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d1f5      	bne.n	80147d0 <__sinit+0xc>
 80147e4:	f7ff ffc4 	bl	8014770 <global_stdio_init.part.0>
 80147e8:	e7f2      	b.n	80147d0 <__sinit+0xc>
 80147ea:	bf00      	nop
 80147ec:	08014731 	.word	0x08014731
 80147f0:	20006724 	.word	0x20006724

080147f4 <_fwalk_sglue>:
 80147f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80147f8:	4607      	mov	r7, r0
 80147fa:	4688      	mov	r8, r1
 80147fc:	4614      	mov	r4, r2
 80147fe:	2600      	movs	r6, #0
 8014800:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014804:	f1b9 0901 	subs.w	r9, r9, #1
 8014808:	d505      	bpl.n	8014816 <_fwalk_sglue+0x22>
 801480a:	6824      	ldr	r4, [r4, #0]
 801480c:	2c00      	cmp	r4, #0
 801480e:	d1f7      	bne.n	8014800 <_fwalk_sglue+0xc>
 8014810:	4630      	mov	r0, r6
 8014812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014816:	89ab      	ldrh	r3, [r5, #12]
 8014818:	2b01      	cmp	r3, #1
 801481a:	d907      	bls.n	801482c <_fwalk_sglue+0x38>
 801481c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014820:	3301      	adds	r3, #1
 8014822:	d003      	beq.n	801482c <_fwalk_sglue+0x38>
 8014824:	4629      	mov	r1, r5
 8014826:	4638      	mov	r0, r7
 8014828:	47c0      	blx	r8
 801482a:	4306      	orrs	r6, r0
 801482c:	3568      	adds	r5, #104	@ 0x68
 801482e:	e7e9      	b.n	8014804 <_fwalk_sglue+0x10>

08014830 <iprintf>:
 8014830:	b40f      	push	{r0, r1, r2, r3}
 8014832:	b507      	push	{r0, r1, r2, lr}
 8014834:	4906      	ldr	r1, [pc, #24]	@ (8014850 <iprintf+0x20>)
 8014836:	ab04      	add	r3, sp, #16
 8014838:	6808      	ldr	r0, [r1, #0]
 801483a:	f853 2b04 	ldr.w	r2, [r3], #4
 801483e:	6881      	ldr	r1, [r0, #8]
 8014840:	9301      	str	r3, [sp, #4]
 8014842:	f001 fe61 	bl	8016508 <_vfiprintf_r>
 8014846:	b003      	add	sp, #12
 8014848:	f85d eb04 	ldr.w	lr, [sp], #4
 801484c:	b004      	add	sp, #16
 801484e:	4770      	bx	lr
 8014850:	20004f34 	.word	0x20004f34

08014854 <_puts_r>:
 8014854:	6a03      	ldr	r3, [r0, #32]
 8014856:	b570      	push	{r4, r5, r6, lr}
 8014858:	6884      	ldr	r4, [r0, #8]
 801485a:	4605      	mov	r5, r0
 801485c:	460e      	mov	r6, r1
 801485e:	b90b      	cbnz	r3, 8014864 <_puts_r+0x10>
 8014860:	f7ff ffb0 	bl	80147c4 <__sinit>
 8014864:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014866:	07db      	lsls	r3, r3, #31
 8014868:	d405      	bmi.n	8014876 <_puts_r+0x22>
 801486a:	89a3      	ldrh	r3, [r4, #12]
 801486c:	0598      	lsls	r0, r3, #22
 801486e:	d402      	bmi.n	8014876 <_puts_r+0x22>
 8014870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014872:	f000 f9f6 	bl	8014c62 <__retarget_lock_acquire_recursive>
 8014876:	89a3      	ldrh	r3, [r4, #12]
 8014878:	0719      	lsls	r1, r3, #28
 801487a:	d502      	bpl.n	8014882 <_puts_r+0x2e>
 801487c:	6923      	ldr	r3, [r4, #16]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d135      	bne.n	80148ee <_puts_r+0x9a>
 8014882:	4621      	mov	r1, r4
 8014884:	4628      	mov	r0, r5
 8014886:	f000 f919 	bl	8014abc <__swsetup_r>
 801488a:	b380      	cbz	r0, 80148ee <_puts_r+0x9a>
 801488c:	f04f 35ff 	mov.w	r5, #4294967295
 8014890:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014892:	07da      	lsls	r2, r3, #31
 8014894:	d405      	bmi.n	80148a2 <_puts_r+0x4e>
 8014896:	89a3      	ldrh	r3, [r4, #12]
 8014898:	059b      	lsls	r3, r3, #22
 801489a:	d402      	bmi.n	80148a2 <_puts_r+0x4e>
 801489c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801489e:	f000 f9e1 	bl	8014c64 <__retarget_lock_release_recursive>
 80148a2:	4628      	mov	r0, r5
 80148a4:	bd70      	pop	{r4, r5, r6, pc}
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	da04      	bge.n	80148b4 <_puts_r+0x60>
 80148aa:	69a2      	ldr	r2, [r4, #24]
 80148ac:	429a      	cmp	r2, r3
 80148ae:	dc17      	bgt.n	80148e0 <_puts_r+0x8c>
 80148b0:	290a      	cmp	r1, #10
 80148b2:	d015      	beq.n	80148e0 <_puts_r+0x8c>
 80148b4:	6823      	ldr	r3, [r4, #0]
 80148b6:	1c5a      	adds	r2, r3, #1
 80148b8:	6022      	str	r2, [r4, #0]
 80148ba:	7019      	strb	r1, [r3, #0]
 80148bc:	68a3      	ldr	r3, [r4, #8]
 80148be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80148c2:	3b01      	subs	r3, #1
 80148c4:	60a3      	str	r3, [r4, #8]
 80148c6:	2900      	cmp	r1, #0
 80148c8:	d1ed      	bne.n	80148a6 <_puts_r+0x52>
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	da11      	bge.n	80148f2 <_puts_r+0x9e>
 80148ce:	4622      	mov	r2, r4
 80148d0:	210a      	movs	r1, #10
 80148d2:	4628      	mov	r0, r5
 80148d4:	f000 f8b3 	bl	8014a3e <__swbuf_r>
 80148d8:	3001      	adds	r0, #1
 80148da:	d0d7      	beq.n	801488c <_puts_r+0x38>
 80148dc:	250a      	movs	r5, #10
 80148de:	e7d7      	b.n	8014890 <_puts_r+0x3c>
 80148e0:	4622      	mov	r2, r4
 80148e2:	4628      	mov	r0, r5
 80148e4:	f000 f8ab 	bl	8014a3e <__swbuf_r>
 80148e8:	3001      	adds	r0, #1
 80148ea:	d1e7      	bne.n	80148bc <_puts_r+0x68>
 80148ec:	e7ce      	b.n	801488c <_puts_r+0x38>
 80148ee:	3e01      	subs	r6, #1
 80148f0:	e7e4      	b.n	80148bc <_puts_r+0x68>
 80148f2:	6823      	ldr	r3, [r4, #0]
 80148f4:	1c5a      	adds	r2, r3, #1
 80148f6:	6022      	str	r2, [r4, #0]
 80148f8:	220a      	movs	r2, #10
 80148fa:	701a      	strb	r2, [r3, #0]
 80148fc:	e7ee      	b.n	80148dc <_puts_r+0x88>
	...

08014900 <puts>:
 8014900:	4b02      	ldr	r3, [pc, #8]	@ (801490c <puts+0xc>)
 8014902:	4601      	mov	r1, r0
 8014904:	6818      	ldr	r0, [r3, #0]
 8014906:	f7ff bfa5 	b.w	8014854 <_puts_r>
 801490a:	bf00      	nop
 801490c:	20004f34 	.word	0x20004f34

08014910 <sniprintf>:
 8014910:	b40c      	push	{r2, r3}
 8014912:	b530      	push	{r4, r5, lr}
 8014914:	4b17      	ldr	r3, [pc, #92]	@ (8014974 <sniprintf+0x64>)
 8014916:	1e0c      	subs	r4, r1, #0
 8014918:	681d      	ldr	r5, [r3, #0]
 801491a:	b09d      	sub	sp, #116	@ 0x74
 801491c:	da08      	bge.n	8014930 <sniprintf+0x20>
 801491e:	238b      	movs	r3, #139	@ 0x8b
 8014920:	602b      	str	r3, [r5, #0]
 8014922:	f04f 30ff 	mov.w	r0, #4294967295
 8014926:	b01d      	add	sp, #116	@ 0x74
 8014928:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801492c:	b002      	add	sp, #8
 801492e:	4770      	bx	lr
 8014930:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8014934:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014938:	bf14      	ite	ne
 801493a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801493e:	4623      	moveq	r3, r4
 8014940:	9304      	str	r3, [sp, #16]
 8014942:	9307      	str	r3, [sp, #28]
 8014944:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014948:	9002      	str	r0, [sp, #8]
 801494a:	9006      	str	r0, [sp, #24]
 801494c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014950:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8014952:	ab21      	add	r3, sp, #132	@ 0x84
 8014954:	a902      	add	r1, sp, #8
 8014956:	4628      	mov	r0, r5
 8014958:	9301      	str	r3, [sp, #4]
 801495a:	f001 fcaf 	bl	80162bc <_svfiprintf_r>
 801495e:	1c43      	adds	r3, r0, #1
 8014960:	bfbc      	itt	lt
 8014962:	238b      	movlt	r3, #139	@ 0x8b
 8014964:	602b      	strlt	r3, [r5, #0]
 8014966:	2c00      	cmp	r4, #0
 8014968:	d0dd      	beq.n	8014926 <sniprintf+0x16>
 801496a:	9b02      	ldr	r3, [sp, #8]
 801496c:	2200      	movs	r2, #0
 801496e:	701a      	strb	r2, [r3, #0]
 8014970:	e7d9      	b.n	8014926 <sniprintf+0x16>
 8014972:	bf00      	nop
 8014974:	20004f34 	.word	0x20004f34

08014978 <siprintf>:
 8014978:	b40e      	push	{r1, r2, r3}
 801497a:	b500      	push	{lr}
 801497c:	b09c      	sub	sp, #112	@ 0x70
 801497e:	ab1d      	add	r3, sp, #116	@ 0x74
 8014980:	9002      	str	r0, [sp, #8]
 8014982:	9006      	str	r0, [sp, #24]
 8014984:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014988:	4809      	ldr	r0, [pc, #36]	@ (80149b0 <siprintf+0x38>)
 801498a:	9107      	str	r1, [sp, #28]
 801498c:	9104      	str	r1, [sp, #16]
 801498e:	4909      	ldr	r1, [pc, #36]	@ (80149b4 <siprintf+0x3c>)
 8014990:	f853 2b04 	ldr.w	r2, [r3], #4
 8014994:	9105      	str	r1, [sp, #20]
 8014996:	6800      	ldr	r0, [r0, #0]
 8014998:	9301      	str	r3, [sp, #4]
 801499a:	a902      	add	r1, sp, #8
 801499c:	f001 fc8e 	bl	80162bc <_svfiprintf_r>
 80149a0:	9b02      	ldr	r3, [sp, #8]
 80149a2:	2200      	movs	r2, #0
 80149a4:	701a      	strb	r2, [r3, #0]
 80149a6:	b01c      	add	sp, #112	@ 0x70
 80149a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80149ac:	b003      	add	sp, #12
 80149ae:	4770      	bx	lr
 80149b0:	20004f34 	.word	0x20004f34
 80149b4:	ffff0208 	.word	0xffff0208

080149b8 <__sread>:
 80149b8:	b510      	push	{r4, lr}
 80149ba:	460c      	mov	r4, r1
 80149bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149c0:	f000 f900 	bl	8014bc4 <_read_r>
 80149c4:	2800      	cmp	r0, #0
 80149c6:	bfab      	itete	ge
 80149c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80149ca:	89a3      	ldrhlt	r3, [r4, #12]
 80149cc:	181b      	addge	r3, r3, r0
 80149ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80149d2:	bfac      	ite	ge
 80149d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80149d6:	81a3      	strhlt	r3, [r4, #12]
 80149d8:	bd10      	pop	{r4, pc}

080149da <__swrite>:
 80149da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149de:	461f      	mov	r7, r3
 80149e0:	898b      	ldrh	r3, [r1, #12]
 80149e2:	05db      	lsls	r3, r3, #23
 80149e4:	4605      	mov	r5, r0
 80149e6:	460c      	mov	r4, r1
 80149e8:	4616      	mov	r6, r2
 80149ea:	d505      	bpl.n	80149f8 <__swrite+0x1e>
 80149ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149f0:	2302      	movs	r3, #2
 80149f2:	2200      	movs	r2, #0
 80149f4:	f000 f8d4 	bl	8014ba0 <_lseek_r>
 80149f8:	89a3      	ldrh	r3, [r4, #12]
 80149fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014a02:	81a3      	strh	r3, [r4, #12]
 8014a04:	4632      	mov	r2, r6
 8014a06:	463b      	mov	r3, r7
 8014a08:	4628      	mov	r0, r5
 8014a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a0e:	f000 b8eb 	b.w	8014be8 <_write_r>

08014a12 <__sseek>:
 8014a12:	b510      	push	{r4, lr}
 8014a14:	460c      	mov	r4, r1
 8014a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a1a:	f000 f8c1 	bl	8014ba0 <_lseek_r>
 8014a1e:	1c43      	adds	r3, r0, #1
 8014a20:	89a3      	ldrh	r3, [r4, #12]
 8014a22:	bf15      	itete	ne
 8014a24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014a26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014a2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014a2e:	81a3      	strheq	r3, [r4, #12]
 8014a30:	bf18      	it	ne
 8014a32:	81a3      	strhne	r3, [r4, #12]
 8014a34:	bd10      	pop	{r4, pc}

08014a36 <__sclose>:
 8014a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a3a:	f000 b8a1 	b.w	8014b80 <_close_r>

08014a3e <__swbuf_r>:
 8014a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a40:	460e      	mov	r6, r1
 8014a42:	4614      	mov	r4, r2
 8014a44:	4605      	mov	r5, r0
 8014a46:	b118      	cbz	r0, 8014a50 <__swbuf_r+0x12>
 8014a48:	6a03      	ldr	r3, [r0, #32]
 8014a4a:	b90b      	cbnz	r3, 8014a50 <__swbuf_r+0x12>
 8014a4c:	f7ff feba 	bl	80147c4 <__sinit>
 8014a50:	69a3      	ldr	r3, [r4, #24]
 8014a52:	60a3      	str	r3, [r4, #8]
 8014a54:	89a3      	ldrh	r3, [r4, #12]
 8014a56:	071a      	lsls	r2, r3, #28
 8014a58:	d501      	bpl.n	8014a5e <__swbuf_r+0x20>
 8014a5a:	6923      	ldr	r3, [r4, #16]
 8014a5c:	b943      	cbnz	r3, 8014a70 <__swbuf_r+0x32>
 8014a5e:	4621      	mov	r1, r4
 8014a60:	4628      	mov	r0, r5
 8014a62:	f000 f82b 	bl	8014abc <__swsetup_r>
 8014a66:	b118      	cbz	r0, 8014a70 <__swbuf_r+0x32>
 8014a68:	f04f 37ff 	mov.w	r7, #4294967295
 8014a6c:	4638      	mov	r0, r7
 8014a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a70:	6823      	ldr	r3, [r4, #0]
 8014a72:	6922      	ldr	r2, [r4, #16]
 8014a74:	1a98      	subs	r0, r3, r2
 8014a76:	6963      	ldr	r3, [r4, #20]
 8014a78:	b2f6      	uxtb	r6, r6
 8014a7a:	4283      	cmp	r3, r0
 8014a7c:	4637      	mov	r7, r6
 8014a7e:	dc05      	bgt.n	8014a8c <__swbuf_r+0x4e>
 8014a80:	4621      	mov	r1, r4
 8014a82:	4628      	mov	r0, r5
 8014a84:	f001 fedc 	bl	8016840 <_fflush_r>
 8014a88:	2800      	cmp	r0, #0
 8014a8a:	d1ed      	bne.n	8014a68 <__swbuf_r+0x2a>
 8014a8c:	68a3      	ldr	r3, [r4, #8]
 8014a8e:	3b01      	subs	r3, #1
 8014a90:	60a3      	str	r3, [r4, #8]
 8014a92:	6823      	ldr	r3, [r4, #0]
 8014a94:	1c5a      	adds	r2, r3, #1
 8014a96:	6022      	str	r2, [r4, #0]
 8014a98:	701e      	strb	r6, [r3, #0]
 8014a9a:	6962      	ldr	r2, [r4, #20]
 8014a9c:	1c43      	adds	r3, r0, #1
 8014a9e:	429a      	cmp	r2, r3
 8014aa0:	d004      	beq.n	8014aac <__swbuf_r+0x6e>
 8014aa2:	89a3      	ldrh	r3, [r4, #12]
 8014aa4:	07db      	lsls	r3, r3, #31
 8014aa6:	d5e1      	bpl.n	8014a6c <__swbuf_r+0x2e>
 8014aa8:	2e0a      	cmp	r6, #10
 8014aaa:	d1df      	bne.n	8014a6c <__swbuf_r+0x2e>
 8014aac:	4621      	mov	r1, r4
 8014aae:	4628      	mov	r0, r5
 8014ab0:	f001 fec6 	bl	8016840 <_fflush_r>
 8014ab4:	2800      	cmp	r0, #0
 8014ab6:	d0d9      	beq.n	8014a6c <__swbuf_r+0x2e>
 8014ab8:	e7d6      	b.n	8014a68 <__swbuf_r+0x2a>
	...

08014abc <__swsetup_r>:
 8014abc:	b538      	push	{r3, r4, r5, lr}
 8014abe:	4b29      	ldr	r3, [pc, #164]	@ (8014b64 <__swsetup_r+0xa8>)
 8014ac0:	4605      	mov	r5, r0
 8014ac2:	6818      	ldr	r0, [r3, #0]
 8014ac4:	460c      	mov	r4, r1
 8014ac6:	b118      	cbz	r0, 8014ad0 <__swsetup_r+0x14>
 8014ac8:	6a03      	ldr	r3, [r0, #32]
 8014aca:	b90b      	cbnz	r3, 8014ad0 <__swsetup_r+0x14>
 8014acc:	f7ff fe7a 	bl	80147c4 <__sinit>
 8014ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ad4:	0719      	lsls	r1, r3, #28
 8014ad6:	d422      	bmi.n	8014b1e <__swsetup_r+0x62>
 8014ad8:	06da      	lsls	r2, r3, #27
 8014ada:	d407      	bmi.n	8014aec <__swsetup_r+0x30>
 8014adc:	2209      	movs	r2, #9
 8014ade:	602a      	str	r2, [r5, #0]
 8014ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ae4:	81a3      	strh	r3, [r4, #12]
 8014ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8014aea:	e033      	b.n	8014b54 <__swsetup_r+0x98>
 8014aec:	0758      	lsls	r0, r3, #29
 8014aee:	d512      	bpl.n	8014b16 <__swsetup_r+0x5a>
 8014af0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014af2:	b141      	cbz	r1, 8014b06 <__swsetup_r+0x4a>
 8014af4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014af8:	4299      	cmp	r1, r3
 8014afa:	d002      	beq.n	8014b02 <__swsetup_r+0x46>
 8014afc:	4628      	mov	r0, r5
 8014afe:	f000 feff 	bl	8015900 <_free_r>
 8014b02:	2300      	movs	r3, #0
 8014b04:	6363      	str	r3, [r4, #52]	@ 0x34
 8014b06:	89a3      	ldrh	r3, [r4, #12]
 8014b08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014b0c:	81a3      	strh	r3, [r4, #12]
 8014b0e:	2300      	movs	r3, #0
 8014b10:	6063      	str	r3, [r4, #4]
 8014b12:	6923      	ldr	r3, [r4, #16]
 8014b14:	6023      	str	r3, [r4, #0]
 8014b16:	89a3      	ldrh	r3, [r4, #12]
 8014b18:	f043 0308 	orr.w	r3, r3, #8
 8014b1c:	81a3      	strh	r3, [r4, #12]
 8014b1e:	6923      	ldr	r3, [r4, #16]
 8014b20:	b94b      	cbnz	r3, 8014b36 <__swsetup_r+0x7a>
 8014b22:	89a3      	ldrh	r3, [r4, #12]
 8014b24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014b2c:	d003      	beq.n	8014b36 <__swsetup_r+0x7a>
 8014b2e:	4621      	mov	r1, r4
 8014b30:	4628      	mov	r0, r5
 8014b32:	f001 fed3 	bl	80168dc <__smakebuf_r>
 8014b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b3a:	f013 0201 	ands.w	r2, r3, #1
 8014b3e:	d00a      	beq.n	8014b56 <__swsetup_r+0x9a>
 8014b40:	2200      	movs	r2, #0
 8014b42:	60a2      	str	r2, [r4, #8]
 8014b44:	6962      	ldr	r2, [r4, #20]
 8014b46:	4252      	negs	r2, r2
 8014b48:	61a2      	str	r2, [r4, #24]
 8014b4a:	6922      	ldr	r2, [r4, #16]
 8014b4c:	b942      	cbnz	r2, 8014b60 <__swsetup_r+0xa4>
 8014b4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014b52:	d1c5      	bne.n	8014ae0 <__swsetup_r+0x24>
 8014b54:	bd38      	pop	{r3, r4, r5, pc}
 8014b56:	0799      	lsls	r1, r3, #30
 8014b58:	bf58      	it	pl
 8014b5a:	6962      	ldrpl	r2, [r4, #20]
 8014b5c:	60a2      	str	r2, [r4, #8]
 8014b5e:	e7f4      	b.n	8014b4a <__swsetup_r+0x8e>
 8014b60:	2000      	movs	r0, #0
 8014b62:	e7f7      	b.n	8014b54 <__swsetup_r+0x98>
 8014b64:	20004f34 	.word	0x20004f34

08014b68 <memset>:
 8014b68:	4402      	add	r2, r0
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	4293      	cmp	r3, r2
 8014b6e:	d100      	bne.n	8014b72 <memset+0xa>
 8014b70:	4770      	bx	lr
 8014b72:	f803 1b01 	strb.w	r1, [r3], #1
 8014b76:	e7f9      	b.n	8014b6c <memset+0x4>

08014b78 <_localeconv_r>:
 8014b78:	4800      	ldr	r0, [pc, #0]	@ (8014b7c <_localeconv_r+0x4>)
 8014b7a:	4770      	bx	lr
 8014b7c:	20005074 	.word	0x20005074

08014b80 <_close_r>:
 8014b80:	b538      	push	{r3, r4, r5, lr}
 8014b82:	4d06      	ldr	r5, [pc, #24]	@ (8014b9c <_close_r+0x1c>)
 8014b84:	2300      	movs	r3, #0
 8014b86:	4604      	mov	r4, r0
 8014b88:	4608      	mov	r0, r1
 8014b8a:	602b      	str	r3, [r5, #0]
 8014b8c:	f7f0 fc2a 	bl	80053e4 <_close>
 8014b90:	1c43      	adds	r3, r0, #1
 8014b92:	d102      	bne.n	8014b9a <_close_r+0x1a>
 8014b94:	682b      	ldr	r3, [r5, #0]
 8014b96:	b103      	cbz	r3, 8014b9a <_close_r+0x1a>
 8014b98:	6023      	str	r3, [r4, #0]
 8014b9a:	bd38      	pop	{r3, r4, r5, pc}
 8014b9c:	20006728 	.word	0x20006728

08014ba0 <_lseek_r>:
 8014ba0:	b538      	push	{r3, r4, r5, lr}
 8014ba2:	4d07      	ldr	r5, [pc, #28]	@ (8014bc0 <_lseek_r+0x20>)
 8014ba4:	4604      	mov	r4, r0
 8014ba6:	4608      	mov	r0, r1
 8014ba8:	4611      	mov	r1, r2
 8014baa:	2200      	movs	r2, #0
 8014bac:	602a      	str	r2, [r5, #0]
 8014bae:	461a      	mov	r2, r3
 8014bb0:	f7f0 fc3f 	bl	8005432 <_lseek>
 8014bb4:	1c43      	adds	r3, r0, #1
 8014bb6:	d102      	bne.n	8014bbe <_lseek_r+0x1e>
 8014bb8:	682b      	ldr	r3, [r5, #0]
 8014bba:	b103      	cbz	r3, 8014bbe <_lseek_r+0x1e>
 8014bbc:	6023      	str	r3, [r4, #0]
 8014bbe:	bd38      	pop	{r3, r4, r5, pc}
 8014bc0:	20006728 	.word	0x20006728

08014bc4 <_read_r>:
 8014bc4:	b538      	push	{r3, r4, r5, lr}
 8014bc6:	4d07      	ldr	r5, [pc, #28]	@ (8014be4 <_read_r+0x20>)
 8014bc8:	4604      	mov	r4, r0
 8014bca:	4608      	mov	r0, r1
 8014bcc:	4611      	mov	r1, r2
 8014bce:	2200      	movs	r2, #0
 8014bd0:	602a      	str	r2, [r5, #0]
 8014bd2:	461a      	mov	r2, r3
 8014bd4:	f7f0 fbcd 	bl	8005372 <_read>
 8014bd8:	1c43      	adds	r3, r0, #1
 8014bda:	d102      	bne.n	8014be2 <_read_r+0x1e>
 8014bdc:	682b      	ldr	r3, [r5, #0]
 8014bde:	b103      	cbz	r3, 8014be2 <_read_r+0x1e>
 8014be0:	6023      	str	r3, [r4, #0]
 8014be2:	bd38      	pop	{r3, r4, r5, pc}
 8014be4:	20006728 	.word	0x20006728

08014be8 <_write_r>:
 8014be8:	b538      	push	{r3, r4, r5, lr}
 8014bea:	4d07      	ldr	r5, [pc, #28]	@ (8014c08 <_write_r+0x20>)
 8014bec:	4604      	mov	r4, r0
 8014bee:	4608      	mov	r0, r1
 8014bf0:	4611      	mov	r1, r2
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	602a      	str	r2, [r5, #0]
 8014bf6:	461a      	mov	r2, r3
 8014bf8:	f7f0 fbd8 	bl	80053ac <_write>
 8014bfc:	1c43      	adds	r3, r0, #1
 8014bfe:	d102      	bne.n	8014c06 <_write_r+0x1e>
 8014c00:	682b      	ldr	r3, [r5, #0]
 8014c02:	b103      	cbz	r3, 8014c06 <_write_r+0x1e>
 8014c04:	6023      	str	r3, [r4, #0]
 8014c06:	bd38      	pop	{r3, r4, r5, pc}
 8014c08:	20006728 	.word	0x20006728

08014c0c <__errno>:
 8014c0c:	4b01      	ldr	r3, [pc, #4]	@ (8014c14 <__errno+0x8>)
 8014c0e:	6818      	ldr	r0, [r3, #0]
 8014c10:	4770      	bx	lr
 8014c12:	bf00      	nop
 8014c14:	20004f34 	.word	0x20004f34

08014c18 <__libc_init_array>:
 8014c18:	b570      	push	{r4, r5, r6, lr}
 8014c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8014c50 <__libc_init_array+0x38>)
 8014c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8014c54 <__libc_init_array+0x3c>)
 8014c1e:	1b64      	subs	r4, r4, r5
 8014c20:	10a4      	asrs	r4, r4, #2
 8014c22:	2600      	movs	r6, #0
 8014c24:	42a6      	cmp	r6, r4
 8014c26:	d109      	bne.n	8014c3c <__libc_init_array+0x24>
 8014c28:	4d0b      	ldr	r5, [pc, #44]	@ (8014c58 <__libc_init_array+0x40>)
 8014c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8014c5c <__libc_init_array+0x44>)
 8014c2c:	f001 ffd2 	bl	8016bd4 <_init>
 8014c30:	1b64      	subs	r4, r4, r5
 8014c32:	10a4      	asrs	r4, r4, #2
 8014c34:	2600      	movs	r6, #0
 8014c36:	42a6      	cmp	r6, r4
 8014c38:	d105      	bne.n	8014c46 <__libc_init_array+0x2e>
 8014c3a:	bd70      	pop	{r4, r5, r6, pc}
 8014c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c40:	4798      	blx	r3
 8014c42:	3601      	adds	r6, #1
 8014c44:	e7ee      	b.n	8014c24 <__libc_init_array+0xc>
 8014c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8014c4a:	4798      	blx	r3
 8014c4c:	3601      	adds	r6, #1
 8014c4e:	e7f2      	b.n	8014c36 <__libc_init_array+0x1e>
 8014c50:	0801b170 	.word	0x0801b170
 8014c54:	0801b170 	.word	0x0801b170
 8014c58:	0801b170 	.word	0x0801b170
 8014c5c:	0801b174 	.word	0x0801b174

08014c60 <__retarget_lock_init_recursive>:
 8014c60:	4770      	bx	lr

08014c62 <__retarget_lock_acquire_recursive>:
 8014c62:	4770      	bx	lr

08014c64 <__retarget_lock_release_recursive>:
 8014c64:	4770      	bx	lr

08014c66 <quorem>:
 8014c66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c6a:	6903      	ldr	r3, [r0, #16]
 8014c6c:	690c      	ldr	r4, [r1, #16]
 8014c6e:	42a3      	cmp	r3, r4
 8014c70:	4607      	mov	r7, r0
 8014c72:	db7e      	blt.n	8014d72 <quorem+0x10c>
 8014c74:	3c01      	subs	r4, #1
 8014c76:	f101 0814 	add.w	r8, r1, #20
 8014c7a:	00a3      	lsls	r3, r4, #2
 8014c7c:	f100 0514 	add.w	r5, r0, #20
 8014c80:	9300      	str	r3, [sp, #0]
 8014c82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c86:	9301      	str	r3, [sp, #4]
 8014c88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014c8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c90:	3301      	adds	r3, #1
 8014c92:	429a      	cmp	r2, r3
 8014c94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014c98:	fbb2 f6f3 	udiv	r6, r2, r3
 8014c9c:	d32e      	bcc.n	8014cfc <quorem+0x96>
 8014c9e:	f04f 0a00 	mov.w	sl, #0
 8014ca2:	46c4      	mov	ip, r8
 8014ca4:	46ae      	mov	lr, r5
 8014ca6:	46d3      	mov	fp, sl
 8014ca8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014cac:	b298      	uxth	r0, r3
 8014cae:	fb06 a000 	mla	r0, r6, r0, sl
 8014cb2:	0c02      	lsrs	r2, r0, #16
 8014cb4:	0c1b      	lsrs	r3, r3, #16
 8014cb6:	fb06 2303 	mla	r3, r6, r3, r2
 8014cba:	f8de 2000 	ldr.w	r2, [lr]
 8014cbe:	b280      	uxth	r0, r0
 8014cc0:	b292      	uxth	r2, r2
 8014cc2:	1a12      	subs	r2, r2, r0
 8014cc4:	445a      	add	r2, fp
 8014cc6:	f8de 0000 	ldr.w	r0, [lr]
 8014cca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014cce:	b29b      	uxth	r3, r3
 8014cd0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014cd4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014cd8:	b292      	uxth	r2, r2
 8014cda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014cde:	45e1      	cmp	r9, ip
 8014ce0:	f84e 2b04 	str.w	r2, [lr], #4
 8014ce4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014ce8:	d2de      	bcs.n	8014ca8 <quorem+0x42>
 8014cea:	9b00      	ldr	r3, [sp, #0]
 8014cec:	58eb      	ldr	r3, [r5, r3]
 8014cee:	b92b      	cbnz	r3, 8014cfc <quorem+0x96>
 8014cf0:	9b01      	ldr	r3, [sp, #4]
 8014cf2:	3b04      	subs	r3, #4
 8014cf4:	429d      	cmp	r5, r3
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	d32f      	bcc.n	8014d5a <quorem+0xf4>
 8014cfa:	613c      	str	r4, [r7, #16]
 8014cfc:	4638      	mov	r0, r7
 8014cfe:	f001 f979 	bl	8015ff4 <__mcmp>
 8014d02:	2800      	cmp	r0, #0
 8014d04:	db25      	blt.n	8014d52 <quorem+0xec>
 8014d06:	4629      	mov	r1, r5
 8014d08:	2000      	movs	r0, #0
 8014d0a:	f858 2b04 	ldr.w	r2, [r8], #4
 8014d0e:	f8d1 c000 	ldr.w	ip, [r1]
 8014d12:	fa1f fe82 	uxth.w	lr, r2
 8014d16:	fa1f f38c 	uxth.w	r3, ip
 8014d1a:	eba3 030e 	sub.w	r3, r3, lr
 8014d1e:	4403      	add	r3, r0
 8014d20:	0c12      	lsrs	r2, r2, #16
 8014d22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014d26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d30:	45c1      	cmp	r9, r8
 8014d32:	f841 3b04 	str.w	r3, [r1], #4
 8014d36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014d3a:	d2e6      	bcs.n	8014d0a <quorem+0xa4>
 8014d3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d44:	b922      	cbnz	r2, 8014d50 <quorem+0xea>
 8014d46:	3b04      	subs	r3, #4
 8014d48:	429d      	cmp	r5, r3
 8014d4a:	461a      	mov	r2, r3
 8014d4c:	d30b      	bcc.n	8014d66 <quorem+0x100>
 8014d4e:	613c      	str	r4, [r7, #16]
 8014d50:	3601      	adds	r6, #1
 8014d52:	4630      	mov	r0, r6
 8014d54:	b003      	add	sp, #12
 8014d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5a:	6812      	ldr	r2, [r2, #0]
 8014d5c:	3b04      	subs	r3, #4
 8014d5e:	2a00      	cmp	r2, #0
 8014d60:	d1cb      	bne.n	8014cfa <quorem+0x94>
 8014d62:	3c01      	subs	r4, #1
 8014d64:	e7c6      	b.n	8014cf4 <quorem+0x8e>
 8014d66:	6812      	ldr	r2, [r2, #0]
 8014d68:	3b04      	subs	r3, #4
 8014d6a:	2a00      	cmp	r2, #0
 8014d6c:	d1ef      	bne.n	8014d4e <quorem+0xe8>
 8014d6e:	3c01      	subs	r4, #1
 8014d70:	e7ea      	b.n	8014d48 <quorem+0xe2>
 8014d72:	2000      	movs	r0, #0
 8014d74:	e7ee      	b.n	8014d54 <quorem+0xee>
	...

08014d78 <_dtoa_r>:
 8014d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d7c:	69c7      	ldr	r7, [r0, #28]
 8014d7e:	b099      	sub	sp, #100	@ 0x64
 8014d80:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014d84:	ec55 4b10 	vmov	r4, r5, d0
 8014d88:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014d8a:	9109      	str	r1, [sp, #36]	@ 0x24
 8014d8c:	4683      	mov	fp, r0
 8014d8e:	920e      	str	r2, [sp, #56]	@ 0x38
 8014d90:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014d92:	b97f      	cbnz	r7, 8014db4 <_dtoa_r+0x3c>
 8014d94:	2010      	movs	r0, #16
 8014d96:	f000 fdfd 	bl	8015994 <malloc>
 8014d9a:	4602      	mov	r2, r0
 8014d9c:	f8cb 001c 	str.w	r0, [fp, #28]
 8014da0:	b920      	cbnz	r0, 8014dac <_dtoa_r+0x34>
 8014da2:	4ba7      	ldr	r3, [pc, #668]	@ (8015040 <_dtoa_r+0x2c8>)
 8014da4:	21ef      	movs	r1, #239	@ 0xef
 8014da6:	48a7      	ldr	r0, [pc, #668]	@ (8015044 <_dtoa_r+0x2cc>)
 8014da8:	f001 fe2e 	bl	8016a08 <__assert_func>
 8014dac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014db0:	6007      	str	r7, [r0, #0]
 8014db2:	60c7      	str	r7, [r0, #12]
 8014db4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014db8:	6819      	ldr	r1, [r3, #0]
 8014dba:	b159      	cbz	r1, 8014dd4 <_dtoa_r+0x5c>
 8014dbc:	685a      	ldr	r2, [r3, #4]
 8014dbe:	604a      	str	r2, [r1, #4]
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	4093      	lsls	r3, r2
 8014dc4:	608b      	str	r3, [r1, #8]
 8014dc6:	4658      	mov	r0, fp
 8014dc8:	f000 feda 	bl	8015b80 <_Bfree>
 8014dcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014dd0:	2200      	movs	r2, #0
 8014dd2:	601a      	str	r2, [r3, #0]
 8014dd4:	1e2b      	subs	r3, r5, #0
 8014dd6:	bfb9      	ittee	lt
 8014dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014ddc:	9303      	strlt	r3, [sp, #12]
 8014dde:	2300      	movge	r3, #0
 8014de0:	6033      	strge	r3, [r6, #0]
 8014de2:	9f03      	ldr	r7, [sp, #12]
 8014de4:	4b98      	ldr	r3, [pc, #608]	@ (8015048 <_dtoa_r+0x2d0>)
 8014de6:	bfbc      	itt	lt
 8014de8:	2201      	movlt	r2, #1
 8014dea:	6032      	strlt	r2, [r6, #0]
 8014dec:	43bb      	bics	r3, r7
 8014dee:	d112      	bne.n	8014e16 <_dtoa_r+0x9e>
 8014df0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014df2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014df6:	6013      	str	r3, [r2, #0]
 8014df8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014dfc:	4323      	orrs	r3, r4
 8014dfe:	f000 854d 	beq.w	801589c <_dtoa_r+0xb24>
 8014e02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014e04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801505c <_dtoa_r+0x2e4>
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	f000 854f 	beq.w	80158ac <_dtoa_r+0xb34>
 8014e0e:	f10a 0303 	add.w	r3, sl, #3
 8014e12:	f000 bd49 	b.w	80158a8 <_dtoa_r+0xb30>
 8014e16:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	ec51 0b17 	vmov	r0, r1, d7
 8014e20:	2300      	movs	r3, #0
 8014e22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014e26:	f7eb fe6f 	bl	8000b08 <__aeabi_dcmpeq>
 8014e2a:	4680      	mov	r8, r0
 8014e2c:	b158      	cbz	r0, 8014e46 <_dtoa_r+0xce>
 8014e2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014e30:	2301      	movs	r3, #1
 8014e32:	6013      	str	r3, [r2, #0]
 8014e34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014e36:	b113      	cbz	r3, 8014e3e <_dtoa_r+0xc6>
 8014e38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014e3a:	4b84      	ldr	r3, [pc, #528]	@ (801504c <_dtoa_r+0x2d4>)
 8014e3c:	6013      	str	r3, [r2, #0]
 8014e3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015060 <_dtoa_r+0x2e8>
 8014e42:	f000 bd33 	b.w	80158ac <_dtoa_r+0xb34>
 8014e46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014e4a:	aa16      	add	r2, sp, #88	@ 0x58
 8014e4c:	a917      	add	r1, sp, #92	@ 0x5c
 8014e4e:	4658      	mov	r0, fp
 8014e50:	f001 f980 	bl	8016154 <__d2b>
 8014e54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014e58:	4681      	mov	r9, r0
 8014e5a:	2e00      	cmp	r6, #0
 8014e5c:	d077      	beq.n	8014f4e <_dtoa_r+0x1d6>
 8014e5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014e6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014e70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014e74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014e78:	4619      	mov	r1, r3
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	4b74      	ldr	r3, [pc, #464]	@ (8015050 <_dtoa_r+0x2d8>)
 8014e7e:	f7eb fa23 	bl	80002c8 <__aeabi_dsub>
 8014e82:	a369      	add	r3, pc, #420	@ (adr r3, 8015028 <_dtoa_r+0x2b0>)
 8014e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e88:	f7eb fbd6 	bl	8000638 <__aeabi_dmul>
 8014e8c:	a368      	add	r3, pc, #416	@ (adr r3, 8015030 <_dtoa_r+0x2b8>)
 8014e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e92:	f7eb fa1b 	bl	80002cc <__adddf3>
 8014e96:	4604      	mov	r4, r0
 8014e98:	4630      	mov	r0, r6
 8014e9a:	460d      	mov	r5, r1
 8014e9c:	f7eb fb62 	bl	8000564 <__aeabi_i2d>
 8014ea0:	a365      	add	r3, pc, #404	@ (adr r3, 8015038 <_dtoa_r+0x2c0>)
 8014ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ea6:	f7eb fbc7 	bl	8000638 <__aeabi_dmul>
 8014eaa:	4602      	mov	r2, r0
 8014eac:	460b      	mov	r3, r1
 8014eae:	4620      	mov	r0, r4
 8014eb0:	4629      	mov	r1, r5
 8014eb2:	f7eb fa0b 	bl	80002cc <__adddf3>
 8014eb6:	4604      	mov	r4, r0
 8014eb8:	460d      	mov	r5, r1
 8014eba:	f7eb fe6d 	bl	8000b98 <__aeabi_d2iz>
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	4607      	mov	r7, r0
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	4620      	mov	r0, r4
 8014ec6:	4629      	mov	r1, r5
 8014ec8:	f7eb fe28 	bl	8000b1c <__aeabi_dcmplt>
 8014ecc:	b140      	cbz	r0, 8014ee0 <_dtoa_r+0x168>
 8014ece:	4638      	mov	r0, r7
 8014ed0:	f7eb fb48 	bl	8000564 <__aeabi_i2d>
 8014ed4:	4622      	mov	r2, r4
 8014ed6:	462b      	mov	r3, r5
 8014ed8:	f7eb fe16 	bl	8000b08 <__aeabi_dcmpeq>
 8014edc:	b900      	cbnz	r0, 8014ee0 <_dtoa_r+0x168>
 8014ede:	3f01      	subs	r7, #1
 8014ee0:	2f16      	cmp	r7, #22
 8014ee2:	d851      	bhi.n	8014f88 <_dtoa_r+0x210>
 8014ee4:	4b5b      	ldr	r3, [pc, #364]	@ (8015054 <_dtoa_r+0x2dc>)
 8014ee6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014ef2:	f7eb fe13 	bl	8000b1c <__aeabi_dcmplt>
 8014ef6:	2800      	cmp	r0, #0
 8014ef8:	d048      	beq.n	8014f8c <_dtoa_r+0x214>
 8014efa:	3f01      	subs	r7, #1
 8014efc:	2300      	movs	r3, #0
 8014efe:	9312      	str	r3, [sp, #72]	@ 0x48
 8014f00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014f02:	1b9b      	subs	r3, r3, r6
 8014f04:	1e5a      	subs	r2, r3, #1
 8014f06:	bf44      	itt	mi
 8014f08:	f1c3 0801 	rsbmi	r8, r3, #1
 8014f0c:	2300      	movmi	r3, #0
 8014f0e:	9208      	str	r2, [sp, #32]
 8014f10:	bf54      	ite	pl
 8014f12:	f04f 0800 	movpl.w	r8, #0
 8014f16:	9308      	strmi	r3, [sp, #32]
 8014f18:	2f00      	cmp	r7, #0
 8014f1a:	db39      	blt.n	8014f90 <_dtoa_r+0x218>
 8014f1c:	9b08      	ldr	r3, [sp, #32]
 8014f1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014f20:	443b      	add	r3, r7
 8014f22:	9308      	str	r3, [sp, #32]
 8014f24:	2300      	movs	r3, #0
 8014f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f2a:	2b09      	cmp	r3, #9
 8014f2c:	d864      	bhi.n	8014ff8 <_dtoa_r+0x280>
 8014f2e:	2b05      	cmp	r3, #5
 8014f30:	bfc4      	itt	gt
 8014f32:	3b04      	subgt	r3, #4
 8014f34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f38:	f1a3 0302 	sub.w	r3, r3, #2
 8014f3c:	bfcc      	ite	gt
 8014f3e:	2400      	movgt	r4, #0
 8014f40:	2401      	movle	r4, #1
 8014f42:	2b03      	cmp	r3, #3
 8014f44:	d863      	bhi.n	801500e <_dtoa_r+0x296>
 8014f46:	e8df f003 	tbb	[pc, r3]
 8014f4a:	372a      	.short	0x372a
 8014f4c:	5535      	.short	0x5535
 8014f4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014f52:	441e      	add	r6, r3
 8014f54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014f58:	2b20      	cmp	r3, #32
 8014f5a:	bfc1      	itttt	gt
 8014f5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014f60:	409f      	lslgt	r7, r3
 8014f62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014f66:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014f6a:	bfd6      	itet	le
 8014f6c:	f1c3 0320 	rsble	r3, r3, #32
 8014f70:	ea47 0003 	orrgt.w	r0, r7, r3
 8014f74:	fa04 f003 	lslle.w	r0, r4, r3
 8014f78:	f7eb fae4 	bl	8000544 <__aeabi_ui2d>
 8014f7c:	2201      	movs	r2, #1
 8014f7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014f82:	3e01      	subs	r6, #1
 8014f84:	9214      	str	r2, [sp, #80]	@ 0x50
 8014f86:	e777      	b.n	8014e78 <_dtoa_r+0x100>
 8014f88:	2301      	movs	r3, #1
 8014f8a:	e7b8      	b.n	8014efe <_dtoa_r+0x186>
 8014f8c:	9012      	str	r0, [sp, #72]	@ 0x48
 8014f8e:	e7b7      	b.n	8014f00 <_dtoa_r+0x188>
 8014f90:	427b      	negs	r3, r7
 8014f92:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f94:	2300      	movs	r3, #0
 8014f96:	eba8 0807 	sub.w	r8, r8, r7
 8014f9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014f9c:	e7c4      	b.n	8014f28 <_dtoa_r+0x1b0>
 8014f9e:	2300      	movs	r3, #0
 8014fa0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014fa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	dc35      	bgt.n	8015014 <_dtoa_r+0x29c>
 8014fa8:	2301      	movs	r3, #1
 8014faa:	9300      	str	r3, [sp, #0]
 8014fac:	9307      	str	r3, [sp, #28]
 8014fae:	461a      	mov	r2, r3
 8014fb0:	920e      	str	r2, [sp, #56]	@ 0x38
 8014fb2:	e00b      	b.n	8014fcc <_dtoa_r+0x254>
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	e7f3      	b.n	8014fa0 <_dtoa_r+0x228>
 8014fb8:	2300      	movs	r3, #0
 8014fba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014fbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fbe:	18fb      	adds	r3, r7, r3
 8014fc0:	9300      	str	r3, [sp, #0]
 8014fc2:	3301      	adds	r3, #1
 8014fc4:	2b01      	cmp	r3, #1
 8014fc6:	9307      	str	r3, [sp, #28]
 8014fc8:	bfb8      	it	lt
 8014fca:	2301      	movlt	r3, #1
 8014fcc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014fd0:	2100      	movs	r1, #0
 8014fd2:	2204      	movs	r2, #4
 8014fd4:	f102 0514 	add.w	r5, r2, #20
 8014fd8:	429d      	cmp	r5, r3
 8014fda:	d91f      	bls.n	801501c <_dtoa_r+0x2a4>
 8014fdc:	6041      	str	r1, [r0, #4]
 8014fde:	4658      	mov	r0, fp
 8014fe0:	f000 fd8e 	bl	8015b00 <_Balloc>
 8014fe4:	4682      	mov	sl, r0
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	d13c      	bne.n	8015064 <_dtoa_r+0x2ec>
 8014fea:	4b1b      	ldr	r3, [pc, #108]	@ (8015058 <_dtoa_r+0x2e0>)
 8014fec:	4602      	mov	r2, r0
 8014fee:	f240 11af 	movw	r1, #431	@ 0x1af
 8014ff2:	e6d8      	b.n	8014da6 <_dtoa_r+0x2e>
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	e7e0      	b.n	8014fba <_dtoa_r+0x242>
 8014ff8:	2401      	movs	r4, #1
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ffe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8015000:	f04f 33ff 	mov.w	r3, #4294967295
 8015004:	9300      	str	r3, [sp, #0]
 8015006:	9307      	str	r3, [sp, #28]
 8015008:	2200      	movs	r2, #0
 801500a:	2312      	movs	r3, #18
 801500c:	e7d0      	b.n	8014fb0 <_dtoa_r+0x238>
 801500e:	2301      	movs	r3, #1
 8015010:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015012:	e7f5      	b.n	8015000 <_dtoa_r+0x288>
 8015014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015016:	9300      	str	r3, [sp, #0]
 8015018:	9307      	str	r3, [sp, #28]
 801501a:	e7d7      	b.n	8014fcc <_dtoa_r+0x254>
 801501c:	3101      	adds	r1, #1
 801501e:	0052      	lsls	r2, r2, #1
 8015020:	e7d8      	b.n	8014fd4 <_dtoa_r+0x25c>
 8015022:	bf00      	nop
 8015024:	f3af 8000 	nop.w
 8015028:	636f4361 	.word	0x636f4361
 801502c:	3fd287a7 	.word	0x3fd287a7
 8015030:	8b60c8b3 	.word	0x8b60c8b3
 8015034:	3fc68a28 	.word	0x3fc68a28
 8015038:	509f79fb 	.word	0x509f79fb
 801503c:	3fd34413 	.word	0x3fd34413
 8015040:	0801ae39 	.word	0x0801ae39
 8015044:	0801ae50 	.word	0x0801ae50
 8015048:	7ff00000 	.word	0x7ff00000
 801504c:	0801ae09 	.word	0x0801ae09
 8015050:	3ff80000 	.word	0x3ff80000
 8015054:	0801af48 	.word	0x0801af48
 8015058:	0801aea8 	.word	0x0801aea8
 801505c:	0801ae35 	.word	0x0801ae35
 8015060:	0801ae08 	.word	0x0801ae08
 8015064:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015068:	6018      	str	r0, [r3, #0]
 801506a:	9b07      	ldr	r3, [sp, #28]
 801506c:	2b0e      	cmp	r3, #14
 801506e:	f200 80a4 	bhi.w	80151ba <_dtoa_r+0x442>
 8015072:	2c00      	cmp	r4, #0
 8015074:	f000 80a1 	beq.w	80151ba <_dtoa_r+0x442>
 8015078:	2f00      	cmp	r7, #0
 801507a:	dd33      	ble.n	80150e4 <_dtoa_r+0x36c>
 801507c:	4bad      	ldr	r3, [pc, #692]	@ (8015334 <_dtoa_r+0x5bc>)
 801507e:	f007 020f 	and.w	r2, r7, #15
 8015082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015086:	ed93 7b00 	vldr	d7, [r3]
 801508a:	05f8      	lsls	r0, r7, #23
 801508c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015090:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015094:	d516      	bpl.n	80150c4 <_dtoa_r+0x34c>
 8015096:	4ba8      	ldr	r3, [pc, #672]	@ (8015338 <_dtoa_r+0x5c0>)
 8015098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801509c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80150a0:	f7eb fbf4 	bl	800088c <__aeabi_ddiv>
 80150a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150a8:	f004 040f 	and.w	r4, r4, #15
 80150ac:	2603      	movs	r6, #3
 80150ae:	4da2      	ldr	r5, [pc, #648]	@ (8015338 <_dtoa_r+0x5c0>)
 80150b0:	b954      	cbnz	r4, 80150c8 <_dtoa_r+0x350>
 80150b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80150b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150ba:	f7eb fbe7 	bl	800088c <__aeabi_ddiv>
 80150be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150c2:	e028      	b.n	8015116 <_dtoa_r+0x39e>
 80150c4:	2602      	movs	r6, #2
 80150c6:	e7f2      	b.n	80150ae <_dtoa_r+0x336>
 80150c8:	07e1      	lsls	r1, r4, #31
 80150ca:	d508      	bpl.n	80150de <_dtoa_r+0x366>
 80150cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80150d4:	f7eb fab0 	bl	8000638 <__aeabi_dmul>
 80150d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150dc:	3601      	adds	r6, #1
 80150de:	1064      	asrs	r4, r4, #1
 80150e0:	3508      	adds	r5, #8
 80150e2:	e7e5      	b.n	80150b0 <_dtoa_r+0x338>
 80150e4:	f000 80d2 	beq.w	801528c <_dtoa_r+0x514>
 80150e8:	427c      	negs	r4, r7
 80150ea:	4b92      	ldr	r3, [pc, #584]	@ (8015334 <_dtoa_r+0x5bc>)
 80150ec:	4d92      	ldr	r5, [pc, #584]	@ (8015338 <_dtoa_r+0x5c0>)
 80150ee:	f004 020f 	and.w	r2, r4, #15
 80150f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80150f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80150fe:	f7eb fa9b 	bl	8000638 <__aeabi_dmul>
 8015102:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015106:	1124      	asrs	r4, r4, #4
 8015108:	2300      	movs	r3, #0
 801510a:	2602      	movs	r6, #2
 801510c:	2c00      	cmp	r4, #0
 801510e:	f040 80b2 	bne.w	8015276 <_dtoa_r+0x4fe>
 8015112:	2b00      	cmp	r3, #0
 8015114:	d1d3      	bne.n	80150be <_dtoa_r+0x346>
 8015116:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015118:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801511c:	2b00      	cmp	r3, #0
 801511e:	f000 80b7 	beq.w	8015290 <_dtoa_r+0x518>
 8015122:	4b86      	ldr	r3, [pc, #536]	@ (801533c <_dtoa_r+0x5c4>)
 8015124:	2200      	movs	r2, #0
 8015126:	4620      	mov	r0, r4
 8015128:	4629      	mov	r1, r5
 801512a:	f7eb fcf7 	bl	8000b1c <__aeabi_dcmplt>
 801512e:	2800      	cmp	r0, #0
 8015130:	f000 80ae 	beq.w	8015290 <_dtoa_r+0x518>
 8015134:	9b07      	ldr	r3, [sp, #28]
 8015136:	2b00      	cmp	r3, #0
 8015138:	f000 80aa 	beq.w	8015290 <_dtoa_r+0x518>
 801513c:	9b00      	ldr	r3, [sp, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	dd37      	ble.n	80151b2 <_dtoa_r+0x43a>
 8015142:	1e7b      	subs	r3, r7, #1
 8015144:	9304      	str	r3, [sp, #16]
 8015146:	4620      	mov	r0, r4
 8015148:	4b7d      	ldr	r3, [pc, #500]	@ (8015340 <_dtoa_r+0x5c8>)
 801514a:	2200      	movs	r2, #0
 801514c:	4629      	mov	r1, r5
 801514e:	f7eb fa73 	bl	8000638 <__aeabi_dmul>
 8015152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015156:	9c00      	ldr	r4, [sp, #0]
 8015158:	3601      	adds	r6, #1
 801515a:	4630      	mov	r0, r6
 801515c:	f7eb fa02 	bl	8000564 <__aeabi_i2d>
 8015160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015164:	f7eb fa68 	bl	8000638 <__aeabi_dmul>
 8015168:	4b76      	ldr	r3, [pc, #472]	@ (8015344 <_dtoa_r+0x5cc>)
 801516a:	2200      	movs	r2, #0
 801516c:	f7eb f8ae 	bl	80002cc <__adddf3>
 8015170:	4605      	mov	r5, r0
 8015172:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015176:	2c00      	cmp	r4, #0
 8015178:	f040 808d 	bne.w	8015296 <_dtoa_r+0x51e>
 801517c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015180:	4b71      	ldr	r3, [pc, #452]	@ (8015348 <_dtoa_r+0x5d0>)
 8015182:	2200      	movs	r2, #0
 8015184:	f7eb f8a0 	bl	80002c8 <__aeabi_dsub>
 8015188:	4602      	mov	r2, r0
 801518a:	460b      	mov	r3, r1
 801518c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015190:	462a      	mov	r2, r5
 8015192:	4633      	mov	r3, r6
 8015194:	f7eb fce0 	bl	8000b58 <__aeabi_dcmpgt>
 8015198:	2800      	cmp	r0, #0
 801519a:	f040 828b 	bne.w	80156b4 <_dtoa_r+0x93c>
 801519e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80151a2:	462a      	mov	r2, r5
 80151a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80151a8:	f7eb fcb8 	bl	8000b1c <__aeabi_dcmplt>
 80151ac:	2800      	cmp	r0, #0
 80151ae:	f040 8128 	bne.w	8015402 <_dtoa_r+0x68a>
 80151b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80151b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80151ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80151bc:	2b00      	cmp	r3, #0
 80151be:	f2c0 815a 	blt.w	8015476 <_dtoa_r+0x6fe>
 80151c2:	2f0e      	cmp	r7, #14
 80151c4:	f300 8157 	bgt.w	8015476 <_dtoa_r+0x6fe>
 80151c8:	4b5a      	ldr	r3, [pc, #360]	@ (8015334 <_dtoa_r+0x5bc>)
 80151ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80151ce:	ed93 7b00 	vldr	d7, [r3]
 80151d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	ed8d 7b00 	vstr	d7, [sp]
 80151da:	da03      	bge.n	80151e4 <_dtoa_r+0x46c>
 80151dc:	9b07      	ldr	r3, [sp, #28]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	f340 8101 	ble.w	80153e6 <_dtoa_r+0x66e>
 80151e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80151e8:	4656      	mov	r6, sl
 80151ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151ee:	4620      	mov	r0, r4
 80151f0:	4629      	mov	r1, r5
 80151f2:	f7eb fb4b 	bl	800088c <__aeabi_ddiv>
 80151f6:	f7eb fccf 	bl	8000b98 <__aeabi_d2iz>
 80151fa:	4680      	mov	r8, r0
 80151fc:	f7eb f9b2 	bl	8000564 <__aeabi_i2d>
 8015200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015204:	f7eb fa18 	bl	8000638 <__aeabi_dmul>
 8015208:	4602      	mov	r2, r0
 801520a:	460b      	mov	r3, r1
 801520c:	4620      	mov	r0, r4
 801520e:	4629      	mov	r1, r5
 8015210:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8015214:	f7eb f858 	bl	80002c8 <__aeabi_dsub>
 8015218:	f806 4b01 	strb.w	r4, [r6], #1
 801521c:	9d07      	ldr	r5, [sp, #28]
 801521e:	eba6 040a 	sub.w	r4, r6, sl
 8015222:	42a5      	cmp	r5, r4
 8015224:	4602      	mov	r2, r0
 8015226:	460b      	mov	r3, r1
 8015228:	f040 8117 	bne.w	801545a <_dtoa_r+0x6e2>
 801522c:	f7eb f84e 	bl	80002cc <__adddf3>
 8015230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015234:	4604      	mov	r4, r0
 8015236:	460d      	mov	r5, r1
 8015238:	f7eb fc8e 	bl	8000b58 <__aeabi_dcmpgt>
 801523c:	2800      	cmp	r0, #0
 801523e:	f040 80f9 	bne.w	8015434 <_dtoa_r+0x6bc>
 8015242:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015246:	4620      	mov	r0, r4
 8015248:	4629      	mov	r1, r5
 801524a:	f7eb fc5d 	bl	8000b08 <__aeabi_dcmpeq>
 801524e:	b118      	cbz	r0, 8015258 <_dtoa_r+0x4e0>
 8015250:	f018 0f01 	tst.w	r8, #1
 8015254:	f040 80ee 	bne.w	8015434 <_dtoa_r+0x6bc>
 8015258:	4649      	mov	r1, r9
 801525a:	4658      	mov	r0, fp
 801525c:	f000 fc90 	bl	8015b80 <_Bfree>
 8015260:	2300      	movs	r3, #0
 8015262:	7033      	strb	r3, [r6, #0]
 8015264:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015266:	3701      	adds	r7, #1
 8015268:	601f      	str	r7, [r3, #0]
 801526a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801526c:	2b00      	cmp	r3, #0
 801526e:	f000 831d 	beq.w	80158ac <_dtoa_r+0xb34>
 8015272:	601e      	str	r6, [r3, #0]
 8015274:	e31a      	b.n	80158ac <_dtoa_r+0xb34>
 8015276:	07e2      	lsls	r2, r4, #31
 8015278:	d505      	bpl.n	8015286 <_dtoa_r+0x50e>
 801527a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801527e:	f7eb f9db 	bl	8000638 <__aeabi_dmul>
 8015282:	3601      	adds	r6, #1
 8015284:	2301      	movs	r3, #1
 8015286:	1064      	asrs	r4, r4, #1
 8015288:	3508      	adds	r5, #8
 801528a:	e73f      	b.n	801510c <_dtoa_r+0x394>
 801528c:	2602      	movs	r6, #2
 801528e:	e742      	b.n	8015116 <_dtoa_r+0x39e>
 8015290:	9c07      	ldr	r4, [sp, #28]
 8015292:	9704      	str	r7, [sp, #16]
 8015294:	e761      	b.n	801515a <_dtoa_r+0x3e2>
 8015296:	4b27      	ldr	r3, [pc, #156]	@ (8015334 <_dtoa_r+0x5bc>)
 8015298:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801529a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801529e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80152a2:	4454      	add	r4, sl
 80152a4:	2900      	cmp	r1, #0
 80152a6:	d053      	beq.n	8015350 <_dtoa_r+0x5d8>
 80152a8:	4928      	ldr	r1, [pc, #160]	@ (801534c <_dtoa_r+0x5d4>)
 80152aa:	2000      	movs	r0, #0
 80152ac:	f7eb faee 	bl	800088c <__aeabi_ddiv>
 80152b0:	4633      	mov	r3, r6
 80152b2:	462a      	mov	r2, r5
 80152b4:	f7eb f808 	bl	80002c8 <__aeabi_dsub>
 80152b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80152bc:	4656      	mov	r6, sl
 80152be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152c2:	f7eb fc69 	bl	8000b98 <__aeabi_d2iz>
 80152c6:	4605      	mov	r5, r0
 80152c8:	f7eb f94c 	bl	8000564 <__aeabi_i2d>
 80152cc:	4602      	mov	r2, r0
 80152ce:	460b      	mov	r3, r1
 80152d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152d4:	f7ea fff8 	bl	80002c8 <__aeabi_dsub>
 80152d8:	3530      	adds	r5, #48	@ 0x30
 80152da:	4602      	mov	r2, r0
 80152dc:	460b      	mov	r3, r1
 80152de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80152e2:	f806 5b01 	strb.w	r5, [r6], #1
 80152e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80152ea:	f7eb fc17 	bl	8000b1c <__aeabi_dcmplt>
 80152ee:	2800      	cmp	r0, #0
 80152f0:	d171      	bne.n	80153d6 <_dtoa_r+0x65e>
 80152f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152f6:	4911      	ldr	r1, [pc, #68]	@ (801533c <_dtoa_r+0x5c4>)
 80152f8:	2000      	movs	r0, #0
 80152fa:	f7ea ffe5 	bl	80002c8 <__aeabi_dsub>
 80152fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8015302:	f7eb fc0b 	bl	8000b1c <__aeabi_dcmplt>
 8015306:	2800      	cmp	r0, #0
 8015308:	f040 8095 	bne.w	8015436 <_dtoa_r+0x6be>
 801530c:	42a6      	cmp	r6, r4
 801530e:	f43f af50 	beq.w	80151b2 <_dtoa_r+0x43a>
 8015312:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015316:	4b0a      	ldr	r3, [pc, #40]	@ (8015340 <_dtoa_r+0x5c8>)
 8015318:	2200      	movs	r2, #0
 801531a:	f7eb f98d 	bl	8000638 <__aeabi_dmul>
 801531e:	4b08      	ldr	r3, [pc, #32]	@ (8015340 <_dtoa_r+0x5c8>)
 8015320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8015324:	2200      	movs	r2, #0
 8015326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801532a:	f7eb f985 	bl	8000638 <__aeabi_dmul>
 801532e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015332:	e7c4      	b.n	80152be <_dtoa_r+0x546>
 8015334:	0801af48 	.word	0x0801af48
 8015338:	0801af20 	.word	0x0801af20
 801533c:	3ff00000 	.word	0x3ff00000
 8015340:	40240000 	.word	0x40240000
 8015344:	401c0000 	.word	0x401c0000
 8015348:	40140000 	.word	0x40140000
 801534c:	3fe00000 	.word	0x3fe00000
 8015350:	4631      	mov	r1, r6
 8015352:	4628      	mov	r0, r5
 8015354:	f7eb f970 	bl	8000638 <__aeabi_dmul>
 8015358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801535c:	9415      	str	r4, [sp, #84]	@ 0x54
 801535e:	4656      	mov	r6, sl
 8015360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015364:	f7eb fc18 	bl	8000b98 <__aeabi_d2iz>
 8015368:	4605      	mov	r5, r0
 801536a:	f7eb f8fb 	bl	8000564 <__aeabi_i2d>
 801536e:	4602      	mov	r2, r0
 8015370:	460b      	mov	r3, r1
 8015372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015376:	f7ea ffa7 	bl	80002c8 <__aeabi_dsub>
 801537a:	3530      	adds	r5, #48	@ 0x30
 801537c:	f806 5b01 	strb.w	r5, [r6], #1
 8015380:	4602      	mov	r2, r0
 8015382:	460b      	mov	r3, r1
 8015384:	42a6      	cmp	r6, r4
 8015386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801538a:	f04f 0200 	mov.w	r2, #0
 801538e:	d124      	bne.n	80153da <_dtoa_r+0x662>
 8015390:	4bac      	ldr	r3, [pc, #688]	@ (8015644 <_dtoa_r+0x8cc>)
 8015392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015396:	f7ea ff99 	bl	80002cc <__adddf3>
 801539a:	4602      	mov	r2, r0
 801539c:	460b      	mov	r3, r1
 801539e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80153a2:	f7eb fbd9 	bl	8000b58 <__aeabi_dcmpgt>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d145      	bne.n	8015436 <_dtoa_r+0x6be>
 80153aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80153ae:	49a5      	ldr	r1, [pc, #660]	@ (8015644 <_dtoa_r+0x8cc>)
 80153b0:	2000      	movs	r0, #0
 80153b2:	f7ea ff89 	bl	80002c8 <__aeabi_dsub>
 80153b6:	4602      	mov	r2, r0
 80153b8:	460b      	mov	r3, r1
 80153ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80153be:	f7eb fbad 	bl	8000b1c <__aeabi_dcmplt>
 80153c2:	2800      	cmp	r0, #0
 80153c4:	f43f aef5 	beq.w	80151b2 <_dtoa_r+0x43a>
 80153c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80153ca:	1e73      	subs	r3, r6, #1
 80153cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80153ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80153d2:	2b30      	cmp	r3, #48	@ 0x30
 80153d4:	d0f8      	beq.n	80153c8 <_dtoa_r+0x650>
 80153d6:	9f04      	ldr	r7, [sp, #16]
 80153d8:	e73e      	b.n	8015258 <_dtoa_r+0x4e0>
 80153da:	4b9b      	ldr	r3, [pc, #620]	@ (8015648 <_dtoa_r+0x8d0>)
 80153dc:	f7eb f92c 	bl	8000638 <__aeabi_dmul>
 80153e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80153e4:	e7bc      	b.n	8015360 <_dtoa_r+0x5e8>
 80153e6:	d10c      	bne.n	8015402 <_dtoa_r+0x68a>
 80153e8:	4b98      	ldr	r3, [pc, #608]	@ (801564c <_dtoa_r+0x8d4>)
 80153ea:	2200      	movs	r2, #0
 80153ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153f0:	f7eb f922 	bl	8000638 <__aeabi_dmul>
 80153f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153f8:	f7eb fba4 	bl	8000b44 <__aeabi_dcmpge>
 80153fc:	2800      	cmp	r0, #0
 80153fe:	f000 8157 	beq.w	80156b0 <_dtoa_r+0x938>
 8015402:	2400      	movs	r4, #0
 8015404:	4625      	mov	r5, r4
 8015406:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015408:	43db      	mvns	r3, r3
 801540a:	9304      	str	r3, [sp, #16]
 801540c:	4656      	mov	r6, sl
 801540e:	2700      	movs	r7, #0
 8015410:	4621      	mov	r1, r4
 8015412:	4658      	mov	r0, fp
 8015414:	f000 fbb4 	bl	8015b80 <_Bfree>
 8015418:	2d00      	cmp	r5, #0
 801541a:	d0dc      	beq.n	80153d6 <_dtoa_r+0x65e>
 801541c:	b12f      	cbz	r7, 801542a <_dtoa_r+0x6b2>
 801541e:	42af      	cmp	r7, r5
 8015420:	d003      	beq.n	801542a <_dtoa_r+0x6b2>
 8015422:	4639      	mov	r1, r7
 8015424:	4658      	mov	r0, fp
 8015426:	f000 fbab 	bl	8015b80 <_Bfree>
 801542a:	4629      	mov	r1, r5
 801542c:	4658      	mov	r0, fp
 801542e:	f000 fba7 	bl	8015b80 <_Bfree>
 8015432:	e7d0      	b.n	80153d6 <_dtoa_r+0x65e>
 8015434:	9704      	str	r7, [sp, #16]
 8015436:	4633      	mov	r3, r6
 8015438:	461e      	mov	r6, r3
 801543a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801543e:	2a39      	cmp	r2, #57	@ 0x39
 8015440:	d107      	bne.n	8015452 <_dtoa_r+0x6da>
 8015442:	459a      	cmp	sl, r3
 8015444:	d1f8      	bne.n	8015438 <_dtoa_r+0x6c0>
 8015446:	9a04      	ldr	r2, [sp, #16]
 8015448:	3201      	adds	r2, #1
 801544a:	9204      	str	r2, [sp, #16]
 801544c:	2230      	movs	r2, #48	@ 0x30
 801544e:	f88a 2000 	strb.w	r2, [sl]
 8015452:	781a      	ldrb	r2, [r3, #0]
 8015454:	3201      	adds	r2, #1
 8015456:	701a      	strb	r2, [r3, #0]
 8015458:	e7bd      	b.n	80153d6 <_dtoa_r+0x65e>
 801545a:	4b7b      	ldr	r3, [pc, #492]	@ (8015648 <_dtoa_r+0x8d0>)
 801545c:	2200      	movs	r2, #0
 801545e:	f7eb f8eb 	bl	8000638 <__aeabi_dmul>
 8015462:	2200      	movs	r2, #0
 8015464:	2300      	movs	r3, #0
 8015466:	4604      	mov	r4, r0
 8015468:	460d      	mov	r5, r1
 801546a:	f7eb fb4d 	bl	8000b08 <__aeabi_dcmpeq>
 801546e:	2800      	cmp	r0, #0
 8015470:	f43f aebb 	beq.w	80151ea <_dtoa_r+0x472>
 8015474:	e6f0      	b.n	8015258 <_dtoa_r+0x4e0>
 8015476:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015478:	2a00      	cmp	r2, #0
 801547a:	f000 80db 	beq.w	8015634 <_dtoa_r+0x8bc>
 801547e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015480:	2a01      	cmp	r2, #1
 8015482:	f300 80bf 	bgt.w	8015604 <_dtoa_r+0x88c>
 8015486:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015488:	2a00      	cmp	r2, #0
 801548a:	f000 80b7 	beq.w	80155fc <_dtoa_r+0x884>
 801548e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015492:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015494:	4646      	mov	r6, r8
 8015496:	9a08      	ldr	r2, [sp, #32]
 8015498:	2101      	movs	r1, #1
 801549a:	441a      	add	r2, r3
 801549c:	4658      	mov	r0, fp
 801549e:	4498      	add	r8, r3
 80154a0:	9208      	str	r2, [sp, #32]
 80154a2:	f000 fc21 	bl	8015ce8 <__i2b>
 80154a6:	4605      	mov	r5, r0
 80154a8:	b15e      	cbz	r6, 80154c2 <_dtoa_r+0x74a>
 80154aa:	9b08      	ldr	r3, [sp, #32]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	dd08      	ble.n	80154c2 <_dtoa_r+0x74a>
 80154b0:	42b3      	cmp	r3, r6
 80154b2:	9a08      	ldr	r2, [sp, #32]
 80154b4:	bfa8      	it	ge
 80154b6:	4633      	movge	r3, r6
 80154b8:	eba8 0803 	sub.w	r8, r8, r3
 80154bc:	1af6      	subs	r6, r6, r3
 80154be:	1ad3      	subs	r3, r2, r3
 80154c0:	9308      	str	r3, [sp, #32]
 80154c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80154c4:	b1f3      	cbz	r3, 8015504 <_dtoa_r+0x78c>
 80154c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	f000 80b7 	beq.w	801563c <_dtoa_r+0x8c4>
 80154ce:	b18c      	cbz	r4, 80154f4 <_dtoa_r+0x77c>
 80154d0:	4629      	mov	r1, r5
 80154d2:	4622      	mov	r2, r4
 80154d4:	4658      	mov	r0, fp
 80154d6:	f000 fcc7 	bl	8015e68 <__pow5mult>
 80154da:	464a      	mov	r2, r9
 80154dc:	4601      	mov	r1, r0
 80154de:	4605      	mov	r5, r0
 80154e0:	4658      	mov	r0, fp
 80154e2:	f000 fc17 	bl	8015d14 <__multiply>
 80154e6:	4649      	mov	r1, r9
 80154e8:	9004      	str	r0, [sp, #16]
 80154ea:	4658      	mov	r0, fp
 80154ec:	f000 fb48 	bl	8015b80 <_Bfree>
 80154f0:	9b04      	ldr	r3, [sp, #16]
 80154f2:	4699      	mov	r9, r3
 80154f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80154f6:	1b1a      	subs	r2, r3, r4
 80154f8:	d004      	beq.n	8015504 <_dtoa_r+0x78c>
 80154fa:	4649      	mov	r1, r9
 80154fc:	4658      	mov	r0, fp
 80154fe:	f000 fcb3 	bl	8015e68 <__pow5mult>
 8015502:	4681      	mov	r9, r0
 8015504:	2101      	movs	r1, #1
 8015506:	4658      	mov	r0, fp
 8015508:	f000 fbee 	bl	8015ce8 <__i2b>
 801550c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801550e:	4604      	mov	r4, r0
 8015510:	2b00      	cmp	r3, #0
 8015512:	f000 81cf 	beq.w	80158b4 <_dtoa_r+0xb3c>
 8015516:	461a      	mov	r2, r3
 8015518:	4601      	mov	r1, r0
 801551a:	4658      	mov	r0, fp
 801551c:	f000 fca4 	bl	8015e68 <__pow5mult>
 8015520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015522:	2b01      	cmp	r3, #1
 8015524:	4604      	mov	r4, r0
 8015526:	f300 8095 	bgt.w	8015654 <_dtoa_r+0x8dc>
 801552a:	9b02      	ldr	r3, [sp, #8]
 801552c:	2b00      	cmp	r3, #0
 801552e:	f040 8087 	bne.w	8015640 <_dtoa_r+0x8c8>
 8015532:	9b03      	ldr	r3, [sp, #12]
 8015534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015538:	2b00      	cmp	r3, #0
 801553a:	f040 8089 	bne.w	8015650 <_dtoa_r+0x8d8>
 801553e:	9b03      	ldr	r3, [sp, #12]
 8015540:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015544:	0d1b      	lsrs	r3, r3, #20
 8015546:	051b      	lsls	r3, r3, #20
 8015548:	b12b      	cbz	r3, 8015556 <_dtoa_r+0x7de>
 801554a:	9b08      	ldr	r3, [sp, #32]
 801554c:	3301      	adds	r3, #1
 801554e:	9308      	str	r3, [sp, #32]
 8015550:	f108 0801 	add.w	r8, r8, #1
 8015554:	2301      	movs	r3, #1
 8015556:	930a      	str	r3, [sp, #40]	@ 0x28
 8015558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801555a:	2b00      	cmp	r3, #0
 801555c:	f000 81b0 	beq.w	80158c0 <_dtoa_r+0xb48>
 8015560:	6923      	ldr	r3, [r4, #16]
 8015562:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015566:	6918      	ldr	r0, [r3, #16]
 8015568:	f000 fb72 	bl	8015c50 <__hi0bits>
 801556c:	f1c0 0020 	rsb	r0, r0, #32
 8015570:	9b08      	ldr	r3, [sp, #32]
 8015572:	4418      	add	r0, r3
 8015574:	f010 001f 	ands.w	r0, r0, #31
 8015578:	d077      	beq.n	801566a <_dtoa_r+0x8f2>
 801557a:	f1c0 0320 	rsb	r3, r0, #32
 801557e:	2b04      	cmp	r3, #4
 8015580:	dd6b      	ble.n	801565a <_dtoa_r+0x8e2>
 8015582:	9b08      	ldr	r3, [sp, #32]
 8015584:	f1c0 001c 	rsb	r0, r0, #28
 8015588:	4403      	add	r3, r0
 801558a:	4480      	add	r8, r0
 801558c:	4406      	add	r6, r0
 801558e:	9308      	str	r3, [sp, #32]
 8015590:	f1b8 0f00 	cmp.w	r8, #0
 8015594:	dd05      	ble.n	80155a2 <_dtoa_r+0x82a>
 8015596:	4649      	mov	r1, r9
 8015598:	4642      	mov	r2, r8
 801559a:	4658      	mov	r0, fp
 801559c:	f000 fcbe 	bl	8015f1c <__lshift>
 80155a0:	4681      	mov	r9, r0
 80155a2:	9b08      	ldr	r3, [sp, #32]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	dd05      	ble.n	80155b4 <_dtoa_r+0x83c>
 80155a8:	4621      	mov	r1, r4
 80155aa:	461a      	mov	r2, r3
 80155ac:	4658      	mov	r0, fp
 80155ae:	f000 fcb5 	bl	8015f1c <__lshift>
 80155b2:	4604      	mov	r4, r0
 80155b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d059      	beq.n	801566e <_dtoa_r+0x8f6>
 80155ba:	4621      	mov	r1, r4
 80155bc:	4648      	mov	r0, r9
 80155be:	f000 fd19 	bl	8015ff4 <__mcmp>
 80155c2:	2800      	cmp	r0, #0
 80155c4:	da53      	bge.n	801566e <_dtoa_r+0x8f6>
 80155c6:	1e7b      	subs	r3, r7, #1
 80155c8:	9304      	str	r3, [sp, #16]
 80155ca:	4649      	mov	r1, r9
 80155cc:	2300      	movs	r3, #0
 80155ce:	220a      	movs	r2, #10
 80155d0:	4658      	mov	r0, fp
 80155d2:	f000 faf7 	bl	8015bc4 <__multadd>
 80155d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80155d8:	4681      	mov	r9, r0
 80155da:	2b00      	cmp	r3, #0
 80155dc:	f000 8172 	beq.w	80158c4 <_dtoa_r+0xb4c>
 80155e0:	2300      	movs	r3, #0
 80155e2:	4629      	mov	r1, r5
 80155e4:	220a      	movs	r2, #10
 80155e6:	4658      	mov	r0, fp
 80155e8:	f000 faec 	bl	8015bc4 <__multadd>
 80155ec:	9b00      	ldr	r3, [sp, #0]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	4605      	mov	r5, r0
 80155f2:	dc67      	bgt.n	80156c4 <_dtoa_r+0x94c>
 80155f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155f6:	2b02      	cmp	r3, #2
 80155f8:	dc41      	bgt.n	801567e <_dtoa_r+0x906>
 80155fa:	e063      	b.n	80156c4 <_dtoa_r+0x94c>
 80155fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80155fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8015602:	e746      	b.n	8015492 <_dtoa_r+0x71a>
 8015604:	9b07      	ldr	r3, [sp, #28]
 8015606:	1e5c      	subs	r4, r3, #1
 8015608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801560a:	42a3      	cmp	r3, r4
 801560c:	bfbf      	itttt	lt
 801560e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8015610:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8015612:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8015614:	1ae3      	sublt	r3, r4, r3
 8015616:	bfb4      	ite	lt
 8015618:	18d2      	addlt	r2, r2, r3
 801561a:	1b1c      	subge	r4, r3, r4
 801561c:	9b07      	ldr	r3, [sp, #28]
 801561e:	bfbc      	itt	lt
 8015620:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8015622:	2400      	movlt	r4, #0
 8015624:	2b00      	cmp	r3, #0
 8015626:	bfb5      	itete	lt
 8015628:	eba8 0603 	sublt.w	r6, r8, r3
 801562c:	9b07      	ldrge	r3, [sp, #28]
 801562e:	2300      	movlt	r3, #0
 8015630:	4646      	movge	r6, r8
 8015632:	e730      	b.n	8015496 <_dtoa_r+0x71e>
 8015634:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015636:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015638:	4646      	mov	r6, r8
 801563a:	e735      	b.n	80154a8 <_dtoa_r+0x730>
 801563c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801563e:	e75c      	b.n	80154fa <_dtoa_r+0x782>
 8015640:	2300      	movs	r3, #0
 8015642:	e788      	b.n	8015556 <_dtoa_r+0x7de>
 8015644:	3fe00000 	.word	0x3fe00000
 8015648:	40240000 	.word	0x40240000
 801564c:	40140000 	.word	0x40140000
 8015650:	9b02      	ldr	r3, [sp, #8]
 8015652:	e780      	b.n	8015556 <_dtoa_r+0x7de>
 8015654:	2300      	movs	r3, #0
 8015656:	930a      	str	r3, [sp, #40]	@ 0x28
 8015658:	e782      	b.n	8015560 <_dtoa_r+0x7e8>
 801565a:	d099      	beq.n	8015590 <_dtoa_r+0x818>
 801565c:	9a08      	ldr	r2, [sp, #32]
 801565e:	331c      	adds	r3, #28
 8015660:	441a      	add	r2, r3
 8015662:	4498      	add	r8, r3
 8015664:	441e      	add	r6, r3
 8015666:	9208      	str	r2, [sp, #32]
 8015668:	e792      	b.n	8015590 <_dtoa_r+0x818>
 801566a:	4603      	mov	r3, r0
 801566c:	e7f6      	b.n	801565c <_dtoa_r+0x8e4>
 801566e:	9b07      	ldr	r3, [sp, #28]
 8015670:	9704      	str	r7, [sp, #16]
 8015672:	2b00      	cmp	r3, #0
 8015674:	dc20      	bgt.n	80156b8 <_dtoa_r+0x940>
 8015676:	9300      	str	r3, [sp, #0]
 8015678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801567a:	2b02      	cmp	r3, #2
 801567c:	dd1e      	ble.n	80156bc <_dtoa_r+0x944>
 801567e:	9b00      	ldr	r3, [sp, #0]
 8015680:	2b00      	cmp	r3, #0
 8015682:	f47f aec0 	bne.w	8015406 <_dtoa_r+0x68e>
 8015686:	4621      	mov	r1, r4
 8015688:	2205      	movs	r2, #5
 801568a:	4658      	mov	r0, fp
 801568c:	f000 fa9a 	bl	8015bc4 <__multadd>
 8015690:	4601      	mov	r1, r0
 8015692:	4604      	mov	r4, r0
 8015694:	4648      	mov	r0, r9
 8015696:	f000 fcad 	bl	8015ff4 <__mcmp>
 801569a:	2800      	cmp	r0, #0
 801569c:	f77f aeb3 	ble.w	8015406 <_dtoa_r+0x68e>
 80156a0:	4656      	mov	r6, sl
 80156a2:	2331      	movs	r3, #49	@ 0x31
 80156a4:	f806 3b01 	strb.w	r3, [r6], #1
 80156a8:	9b04      	ldr	r3, [sp, #16]
 80156aa:	3301      	adds	r3, #1
 80156ac:	9304      	str	r3, [sp, #16]
 80156ae:	e6ae      	b.n	801540e <_dtoa_r+0x696>
 80156b0:	9c07      	ldr	r4, [sp, #28]
 80156b2:	9704      	str	r7, [sp, #16]
 80156b4:	4625      	mov	r5, r4
 80156b6:	e7f3      	b.n	80156a0 <_dtoa_r+0x928>
 80156b8:	9b07      	ldr	r3, [sp, #28]
 80156ba:	9300      	str	r3, [sp, #0]
 80156bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80156be:	2b00      	cmp	r3, #0
 80156c0:	f000 8104 	beq.w	80158cc <_dtoa_r+0xb54>
 80156c4:	2e00      	cmp	r6, #0
 80156c6:	dd05      	ble.n	80156d4 <_dtoa_r+0x95c>
 80156c8:	4629      	mov	r1, r5
 80156ca:	4632      	mov	r2, r6
 80156cc:	4658      	mov	r0, fp
 80156ce:	f000 fc25 	bl	8015f1c <__lshift>
 80156d2:	4605      	mov	r5, r0
 80156d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d05a      	beq.n	8015790 <_dtoa_r+0xa18>
 80156da:	6869      	ldr	r1, [r5, #4]
 80156dc:	4658      	mov	r0, fp
 80156de:	f000 fa0f 	bl	8015b00 <_Balloc>
 80156e2:	4606      	mov	r6, r0
 80156e4:	b928      	cbnz	r0, 80156f2 <_dtoa_r+0x97a>
 80156e6:	4b84      	ldr	r3, [pc, #528]	@ (80158f8 <_dtoa_r+0xb80>)
 80156e8:	4602      	mov	r2, r0
 80156ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80156ee:	f7ff bb5a 	b.w	8014da6 <_dtoa_r+0x2e>
 80156f2:	692a      	ldr	r2, [r5, #16]
 80156f4:	3202      	adds	r2, #2
 80156f6:	0092      	lsls	r2, r2, #2
 80156f8:	f105 010c 	add.w	r1, r5, #12
 80156fc:	300c      	adds	r0, #12
 80156fe:	f001 f975 	bl	80169ec <memcpy>
 8015702:	2201      	movs	r2, #1
 8015704:	4631      	mov	r1, r6
 8015706:	4658      	mov	r0, fp
 8015708:	f000 fc08 	bl	8015f1c <__lshift>
 801570c:	f10a 0301 	add.w	r3, sl, #1
 8015710:	9307      	str	r3, [sp, #28]
 8015712:	9b00      	ldr	r3, [sp, #0]
 8015714:	4453      	add	r3, sl
 8015716:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015718:	9b02      	ldr	r3, [sp, #8]
 801571a:	f003 0301 	and.w	r3, r3, #1
 801571e:	462f      	mov	r7, r5
 8015720:	930a      	str	r3, [sp, #40]	@ 0x28
 8015722:	4605      	mov	r5, r0
 8015724:	9b07      	ldr	r3, [sp, #28]
 8015726:	4621      	mov	r1, r4
 8015728:	3b01      	subs	r3, #1
 801572a:	4648      	mov	r0, r9
 801572c:	9300      	str	r3, [sp, #0]
 801572e:	f7ff fa9a 	bl	8014c66 <quorem>
 8015732:	4639      	mov	r1, r7
 8015734:	9002      	str	r0, [sp, #8]
 8015736:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801573a:	4648      	mov	r0, r9
 801573c:	f000 fc5a 	bl	8015ff4 <__mcmp>
 8015740:	462a      	mov	r2, r5
 8015742:	9008      	str	r0, [sp, #32]
 8015744:	4621      	mov	r1, r4
 8015746:	4658      	mov	r0, fp
 8015748:	f000 fc70 	bl	801602c <__mdiff>
 801574c:	68c2      	ldr	r2, [r0, #12]
 801574e:	4606      	mov	r6, r0
 8015750:	bb02      	cbnz	r2, 8015794 <_dtoa_r+0xa1c>
 8015752:	4601      	mov	r1, r0
 8015754:	4648      	mov	r0, r9
 8015756:	f000 fc4d 	bl	8015ff4 <__mcmp>
 801575a:	4602      	mov	r2, r0
 801575c:	4631      	mov	r1, r6
 801575e:	4658      	mov	r0, fp
 8015760:	920e      	str	r2, [sp, #56]	@ 0x38
 8015762:	f000 fa0d 	bl	8015b80 <_Bfree>
 8015766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015768:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801576a:	9e07      	ldr	r6, [sp, #28]
 801576c:	ea43 0102 	orr.w	r1, r3, r2
 8015770:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015772:	4319      	orrs	r1, r3
 8015774:	d110      	bne.n	8015798 <_dtoa_r+0xa20>
 8015776:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801577a:	d029      	beq.n	80157d0 <_dtoa_r+0xa58>
 801577c:	9b08      	ldr	r3, [sp, #32]
 801577e:	2b00      	cmp	r3, #0
 8015780:	dd02      	ble.n	8015788 <_dtoa_r+0xa10>
 8015782:	9b02      	ldr	r3, [sp, #8]
 8015784:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015788:	9b00      	ldr	r3, [sp, #0]
 801578a:	f883 8000 	strb.w	r8, [r3]
 801578e:	e63f      	b.n	8015410 <_dtoa_r+0x698>
 8015790:	4628      	mov	r0, r5
 8015792:	e7bb      	b.n	801570c <_dtoa_r+0x994>
 8015794:	2201      	movs	r2, #1
 8015796:	e7e1      	b.n	801575c <_dtoa_r+0x9e4>
 8015798:	9b08      	ldr	r3, [sp, #32]
 801579a:	2b00      	cmp	r3, #0
 801579c:	db04      	blt.n	80157a8 <_dtoa_r+0xa30>
 801579e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80157a0:	430b      	orrs	r3, r1
 80157a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80157a4:	430b      	orrs	r3, r1
 80157a6:	d120      	bne.n	80157ea <_dtoa_r+0xa72>
 80157a8:	2a00      	cmp	r2, #0
 80157aa:	dded      	ble.n	8015788 <_dtoa_r+0xa10>
 80157ac:	4649      	mov	r1, r9
 80157ae:	2201      	movs	r2, #1
 80157b0:	4658      	mov	r0, fp
 80157b2:	f000 fbb3 	bl	8015f1c <__lshift>
 80157b6:	4621      	mov	r1, r4
 80157b8:	4681      	mov	r9, r0
 80157ba:	f000 fc1b 	bl	8015ff4 <__mcmp>
 80157be:	2800      	cmp	r0, #0
 80157c0:	dc03      	bgt.n	80157ca <_dtoa_r+0xa52>
 80157c2:	d1e1      	bne.n	8015788 <_dtoa_r+0xa10>
 80157c4:	f018 0f01 	tst.w	r8, #1
 80157c8:	d0de      	beq.n	8015788 <_dtoa_r+0xa10>
 80157ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80157ce:	d1d8      	bne.n	8015782 <_dtoa_r+0xa0a>
 80157d0:	9a00      	ldr	r2, [sp, #0]
 80157d2:	2339      	movs	r3, #57	@ 0x39
 80157d4:	7013      	strb	r3, [r2, #0]
 80157d6:	4633      	mov	r3, r6
 80157d8:	461e      	mov	r6, r3
 80157da:	3b01      	subs	r3, #1
 80157dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80157e0:	2a39      	cmp	r2, #57	@ 0x39
 80157e2:	d052      	beq.n	801588a <_dtoa_r+0xb12>
 80157e4:	3201      	adds	r2, #1
 80157e6:	701a      	strb	r2, [r3, #0]
 80157e8:	e612      	b.n	8015410 <_dtoa_r+0x698>
 80157ea:	2a00      	cmp	r2, #0
 80157ec:	dd07      	ble.n	80157fe <_dtoa_r+0xa86>
 80157ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80157f2:	d0ed      	beq.n	80157d0 <_dtoa_r+0xa58>
 80157f4:	9a00      	ldr	r2, [sp, #0]
 80157f6:	f108 0301 	add.w	r3, r8, #1
 80157fa:	7013      	strb	r3, [r2, #0]
 80157fc:	e608      	b.n	8015410 <_dtoa_r+0x698>
 80157fe:	9b07      	ldr	r3, [sp, #28]
 8015800:	9a07      	ldr	r2, [sp, #28]
 8015802:	f803 8c01 	strb.w	r8, [r3, #-1]
 8015806:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015808:	4293      	cmp	r3, r2
 801580a:	d028      	beq.n	801585e <_dtoa_r+0xae6>
 801580c:	4649      	mov	r1, r9
 801580e:	2300      	movs	r3, #0
 8015810:	220a      	movs	r2, #10
 8015812:	4658      	mov	r0, fp
 8015814:	f000 f9d6 	bl	8015bc4 <__multadd>
 8015818:	42af      	cmp	r7, r5
 801581a:	4681      	mov	r9, r0
 801581c:	f04f 0300 	mov.w	r3, #0
 8015820:	f04f 020a 	mov.w	r2, #10
 8015824:	4639      	mov	r1, r7
 8015826:	4658      	mov	r0, fp
 8015828:	d107      	bne.n	801583a <_dtoa_r+0xac2>
 801582a:	f000 f9cb 	bl	8015bc4 <__multadd>
 801582e:	4607      	mov	r7, r0
 8015830:	4605      	mov	r5, r0
 8015832:	9b07      	ldr	r3, [sp, #28]
 8015834:	3301      	adds	r3, #1
 8015836:	9307      	str	r3, [sp, #28]
 8015838:	e774      	b.n	8015724 <_dtoa_r+0x9ac>
 801583a:	f000 f9c3 	bl	8015bc4 <__multadd>
 801583e:	4629      	mov	r1, r5
 8015840:	4607      	mov	r7, r0
 8015842:	2300      	movs	r3, #0
 8015844:	220a      	movs	r2, #10
 8015846:	4658      	mov	r0, fp
 8015848:	f000 f9bc 	bl	8015bc4 <__multadd>
 801584c:	4605      	mov	r5, r0
 801584e:	e7f0      	b.n	8015832 <_dtoa_r+0xaba>
 8015850:	9b00      	ldr	r3, [sp, #0]
 8015852:	2b00      	cmp	r3, #0
 8015854:	bfcc      	ite	gt
 8015856:	461e      	movgt	r6, r3
 8015858:	2601      	movle	r6, #1
 801585a:	4456      	add	r6, sl
 801585c:	2700      	movs	r7, #0
 801585e:	4649      	mov	r1, r9
 8015860:	2201      	movs	r2, #1
 8015862:	4658      	mov	r0, fp
 8015864:	f000 fb5a 	bl	8015f1c <__lshift>
 8015868:	4621      	mov	r1, r4
 801586a:	4681      	mov	r9, r0
 801586c:	f000 fbc2 	bl	8015ff4 <__mcmp>
 8015870:	2800      	cmp	r0, #0
 8015872:	dcb0      	bgt.n	80157d6 <_dtoa_r+0xa5e>
 8015874:	d102      	bne.n	801587c <_dtoa_r+0xb04>
 8015876:	f018 0f01 	tst.w	r8, #1
 801587a:	d1ac      	bne.n	80157d6 <_dtoa_r+0xa5e>
 801587c:	4633      	mov	r3, r6
 801587e:	461e      	mov	r6, r3
 8015880:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015884:	2a30      	cmp	r2, #48	@ 0x30
 8015886:	d0fa      	beq.n	801587e <_dtoa_r+0xb06>
 8015888:	e5c2      	b.n	8015410 <_dtoa_r+0x698>
 801588a:	459a      	cmp	sl, r3
 801588c:	d1a4      	bne.n	80157d8 <_dtoa_r+0xa60>
 801588e:	9b04      	ldr	r3, [sp, #16]
 8015890:	3301      	adds	r3, #1
 8015892:	9304      	str	r3, [sp, #16]
 8015894:	2331      	movs	r3, #49	@ 0x31
 8015896:	f88a 3000 	strb.w	r3, [sl]
 801589a:	e5b9      	b.n	8015410 <_dtoa_r+0x698>
 801589c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801589e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80158fc <_dtoa_r+0xb84>
 80158a2:	b11b      	cbz	r3, 80158ac <_dtoa_r+0xb34>
 80158a4:	f10a 0308 	add.w	r3, sl, #8
 80158a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80158aa:	6013      	str	r3, [r2, #0]
 80158ac:	4650      	mov	r0, sl
 80158ae:	b019      	add	sp, #100	@ 0x64
 80158b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158b6:	2b01      	cmp	r3, #1
 80158b8:	f77f ae37 	ble.w	801552a <_dtoa_r+0x7b2>
 80158bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80158be:	930a      	str	r3, [sp, #40]	@ 0x28
 80158c0:	2001      	movs	r0, #1
 80158c2:	e655      	b.n	8015570 <_dtoa_r+0x7f8>
 80158c4:	9b00      	ldr	r3, [sp, #0]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	f77f aed6 	ble.w	8015678 <_dtoa_r+0x900>
 80158cc:	4656      	mov	r6, sl
 80158ce:	4621      	mov	r1, r4
 80158d0:	4648      	mov	r0, r9
 80158d2:	f7ff f9c8 	bl	8014c66 <quorem>
 80158d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80158da:	f806 8b01 	strb.w	r8, [r6], #1
 80158de:	9b00      	ldr	r3, [sp, #0]
 80158e0:	eba6 020a 	sub.w	r2, r6, sl
 80158e4:	4293      	cmp	r3, r2
 80158e6:	ddb3      	ble.n	8015850 <_dtoa_r+0xad8>
 80158e8:	4649      	mov	r1, r9
 80158ea:	2300      	movs	r3, #0
 80158ec:	220a      	movs	r2, #10
 80158ee:	4658      	mov	r0, fp
 80158f0:	f000 f968 	bl	8015bc4 <__multadd>
 80158f4:	4681      	mov	r9, r0
 80158f6:	e7ea      	b.n	80158ce <_dtoa_r+0xb56>
 80158f8:	0801aea8 	.word	0x0801aea8
 80158fc:	0801ae2c 	.word	0x0801ae2c

08015900 <_free_r>:
 8015900:	b538      	push	{r3, r4, r5, lr}
 8015902:	4605      	mov	r5, r0
 8015904:	2900      	cmp	r1, #0
 8015906:	d041      	beq.n	801598c <_free_r+0x8c>
 8015908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801590c:	1f0c      	subs	r4, r1, #4
 801590e:	2b00      	cmp	r3, #0
 8015910:	bfb8      	it	lt
 8015912:	18e4      	addlt	r4, r4, r3
 8015914:	f000 f8e8 	bl	8015ae8 <__malloc_lock>
 8015918:	4a1d      	ldr	r2, [pc, #116]	@ (8015990 <_free_r+0x90>)
 801591a:	6813      	ldr	r3, [r2, #0]
 801591c:	b933      	cbnz	r3, 801592c <_free_r+0x2c>
 801591e:	6063      	str	r3, [r4, #4]
 8015920:	6014      	str	r4, [r2, #0]
 8015922:	4628      	mov	r0, r5
 8015924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015928:	f000 b8e4 	b.w	8015af4 <__malloc_unlock>
 801592c:	42a3      	cmp	r3, r4
 801592e:	d908      	bls.n	8015942 <_free_r+0x42>
 8015930:	6820      	ldr	r0, [r4, #0]
 8015932:	1821      	adds	r1, r4, r0
 8015934:	428b      	cmp	r3, r1
 8015936:	bf01      	itttt	eq
 8015938:	6819      	ldreq	r1, [r3, #0]
 801593a:	685b      	ldreq	r3, [r3, #4]
 801593c:	1809      	addeq	r1, r1, r0
 801593e:	6021      	streq	r1, [r4, #0]
 8015940:	e7ed      	b.n	801591e <_free_r+0x1e>
 8015942:	461a      	mov	r2, r3
 8015944:	685b      	ldr	r3, [r3, #4]
 8015946:	b10b      	cbz	r3, 801594c <_free_r+0x4c>
 8015948:	42a3      	cmp	r3, r4
 801594a:	d9fa      	bls.n	8015942 <_free_r+0x42>
 801594c:	6811      	ldr	r1, [r2, #0]
 801594e:	1850      	adds	r0, r2, r1
 8015950:	42a0      	cmp	r0, r4
 8015952:	d10b      	bne.n	801596c <_free_r+0x6c>
 8015954:	6820      	ldr	r0, [r4, #0]
 8015956:	4401      	add	r1, r0
 8015958:	1850      	adds	r0, r2, r1
 801595a:	4283      	cmp	r3, r0
 801595c:	6011      	str	r1, [r2, #0]
 801595e:	d1e0      	bne.n	8015922 <_free_r+0x22>
 8015960:	6818      	ldr	r0, [r3, #0]
 8015962:	685b      	ldr	r3, [r3, #4]
 8015964:	6053      	str	r3, [r2, #4]
 8015966:	4408      	add	r0, r1
 8015968:	6010      	str	r0, [r2, #0]
 801596a:	e7da      	b.n	8015922 <_free_r+0x22>
 801596c:	d902      	bls.n	8015974 <_free_r+0x74>
 801596e:	230c      	movs	r3, #12
 8015970:	602b      	str	r3, [r5, #0]
 8015972:	e7d6      	b.n	8015922 <_free_r+0x22>
 8015974:	6820      	ldr	r0, [r4, #0]
 8015976:	1821      	adds	r1, r4, r0
 8015978:	428b      	cmp	r3, r1
 801597a:	bf04      	itt	eq
 801597c:	6819      	ldreq	r1, [r3, #0]
 801597e:	685b      	ldreq	r3, [r3, #4]
 8015980:	6063      	str	r3, [r4, #4]
 8015982:	bf04      	itt	eq
 8015984:	1809      	addeq	r1, r1, r0
 8015986:	6021      	streq	r1, [r4, #0]
 8015988:	6054      	str	r4, [r2, #4]
 801598a:	e7ca      	b.n	8015922 <_free_r+0x22>
 801598c:	bd38      	pop	{r3, r4, r5, pc}
 801598e:	bf00      	nop
 8015990:	20006734 	.word	0x20006734

08015994 <malloc>:
 8015994:	4b02      	ldr	r3, [pc, #8]	@ (80159a0 <malloc+0xc>)
 8015996:	4601      	mov	r1, r0
 8015998:	6818      	ldr	r0, [r3, #0]
 801599a:	f000 b825 	b.w	80159e8 <_malloc_r>
 801599e:	bf00      	nop
 80159a0:	20004f34 	.word	0x20004f34

080159a4 <sbrk_aligned>:
 80159a4:	b570      	push	{r4, r5, r6, lr}
 80159a6:	4e0f      	ldr	r6, [pc, #60]	@ (80159e4 <sbrk_aligned+0x40>)
 80159a8:	460c      	mov	r4, r1
 80159aa:	6831      	ldr	r1, [r6, #0]
 80159ac:	4605      	mov	r5, r0
 80159ae:	b911      	cbnz	r1, 80159b6 <sbrk_aligned+0x12>
 80159b0:	f001 f80c 	bl	80169cc <_sbrk_r>
 80159b4:	6030      	str	r0, [r6, #0]
 80159b6:	4621      	mov	r1, r4
 80159b8:	4628      	mov	r0, r5
 80159ba:	f001 f807 	bl	80169cc <_sbrk_r>
 80159be:	1c43      	adds	r3, r0, #1
 80159c0:	d103      	bne.n	80159ca <sbrk_aligned+0x26>
 80159c2:	f04f 34ff 	mov.w	r4, #4294967295
 80159c6:	4620      	mov	r0, r4
 80159c8:	bd70      	pop	{r4, r5, r6, pc}
 80159ca:	1cc4      	adds	r4, r0, #3
 80159cc:	f024 0403 	bic.w	r4, r4, #3
 80159d0:	42a0      	cmp	r0, r4
 80159d2:	d0f8      	beq.n	80159c6 <sbrk_aligned+0x22>
 80159d4:	1a21      	subs	r1, r4, r0
 80159d6:	4628      	mov	r0, r5
 80159d8:	f000 fff8 	bl	80169cc <_sbrk_r>
 80159dc:	3001      	adds	r0, #1
 80159de:	d1f2      	bne.n	80159c6 <sbrk_aligned+0x22>
 80159e0:	e7ef      	b.n	80159c2 <sbrk_aligned+0x1e>
 80159e2:	bf00      	nop
 80159e4:	20006730 	.word	0x20006730

080159e8 <_malloc_r>:
 80159e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159ec:	1ccd      	adds	r5, r1, #3
 80159ee:	f025 0503 	bic.w	r5, r5, #3
 80159f2:	3508      	adds	r5, #8
 80159f4:	2d0c      	cmp	r5, #12
 80159f6:	bf38      	it	cc
 80159f8:	250c      	movcc	r5, #12
 80159fa:	2d00      	cmp	r5, #0
 80159fc:	4606      	mov	r6, r0
 80159fe:	db01      	blt.n	8015a04 <_malloc_r+0x1c>
 8015a00:	42a9      	cmp	r1, r5
 8015a02:	d904      	bls.n	8015a0e <_malloc_r+0x26>
 8015a04:	230c      	movs	r3, #12
 8015a06:	6033      	str	r3, [r6, #0]
 8015a08:	2000      	movs	r0, #0
 8015a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015ae4 <_malloc_r+0xfc>
 8015a12:	f000 f869 	bl	8015ae8 <__malloc_lock>
 8015a16:	f8d8 3000 	ldr.w	r3, [r8]
 8015a1a:	461c      	mov	r4, r3
 8015a1c:	bb44      	cbnz	r4, 8015a70 <_malloc_r+0x88>
 8015a1e:	4629      	mov	r1, r5
 8015a20:	4630      	mov	r0, r6
 8015a22:	f7ff ffbf 	bl	80159a4 <sbrk_aligned>
 8015a26:	1c43      	adds	r3, r0, #1
 8015a28:	4604      	mov	r4, r0
 8015a2a:	d158      	bne.n	8015ade <_malloc_r+0xf6>
 8015a2c:	f8d8 4000 	ldr.w	r4, [r8]
 8015a30:	4627      	mov	r7, r4
 8015a32:	2f00      	cmp	r7, #0
 8015a34:	d143      	bne.n	8015abe <_malloc_r+0xd6>
 8015a36:	2c00      	cmp	r4, #0
 8015a38:	d04b      	beq.n	8015ad2 <_malloc_r+0xea>
 8015a3a:	6823      	ldr	r3, [r4, #0]
 8015a3c:	4639      	mov	r1, r7
 8015a3e:	4630      	mov	r0, r6
 8015a40:	eb04 0903 	add.w	r9, r4, r3
 8015a44:	f000 ffc2 	bl	80169cc <_sbrk_r>
 8015a48:	4581      	cmp	r9, r0
 8015a4a:	d142      	bne.n	8015ad2 <_malloc_r+0xea>
 8015a4c:	6821      	ldr	r1, [r4, #0]
 8015a4e:	1a6d      	subs	r5, r5, r1
 8015a50:	4629      	mov	r1, r5
 8015a52:	4630      	mov	r0, r6
 8015a54:	f7ff ffa6 	bl	80159a4 <sbrk_aligned>
 8015a58:	3001      	adds	r0, #1
 8015a5a:	d03a      	beq.n	8015ad2 <_malloc_r+0xea>
 8015a5c:	6823      	ldr	r3, [r4, #0]
 8015a5e:	442b      	add	r3, r5
 8015a60:	6023      	str	r3, [r4, #0]
 8015a62:	f8d8 3000 	ldr.w	r3, [r8]
 8015a66:	685a      	ldr	r2, [r3, #4]
 8015a68:	bb62      	cbnz	r2, 8015ac4 <_malloc_r+0xdc>
 8015a6a:	f8c8 7000 	str.w	r7, [r8]
 8015a6e:	e00f      	b.n	8015a90 <_malloc_r+0xa8>
 8015a70:	6822      	ldr	r2, [r4, #0]
 8015a72:	1b52      	subs	r2, r2, r5
 8015a74:	d420      	bmi.n	8015ab8 <_malloc_r+0xd0>
 8015a76:	2a0b      	cmp	r2, #11
 8015a78:	d917      	bls.n	8015aaa <_malloc_r+0xc2>
 8015a7a:	1961      	adds	r1, r4, r5
 8015a7c:	42a3      	cmp	r3, r4
 8015a7e:	6025      	str	r5, [r4, #0]
 8015a80:	bf18      	it	ne
 8015a82:	6059      	strne	r1, [r3, #4]
 8015a84:	6863      	ldr	r3, [r4, #4]
 8015a86:	bf08      	it	eq
 8015a88:	f8c8 1000 	streq.w	r1, [r8]
 8015a8c:	5162      	str	r2, [r4, r5]
 8015a8e:	604b      	str	r3, [r1, #4]
 8015a90:	4630      	mov	r0, r6
 8015a92:	f000 f82f 	bl	8015af4 <__malloc_unlock>
 8015a96:	f104 000b 	add.w	r0, r4, #11
 8015a9a:	1d23      	adds	r3, r4, #4
 8015a9c:	f020 0007 	bic.w	r0, r0, #7
 8015aa0:	1ac2      	subs	r2, r0, r3
 8015aa2:	bf1c      	itt	ne
 8015aa4:	1a1b      	subne	r3, r3, r0
 8015aa6:	50a3      	strne	r3, [r4, r2]
 8015aa8:	e7af      	b.n	8015a0a <_malloc_r+0x22>
 8015aaa:	6862      	ldr	r2, [r4, #4]
 8015aac:	42a3      	cmp	r3, r4
 8015aae:	bf0c      	ite	eq
 8015ab0:	f8c8 2000 	streq.w	r2, [r8]
 8015ab4:	605a      	strne	r2, [r3, #4]
 8015ab6:	e7eb      	b.n	8015a90 <_malloc_r+0xa8>
 8015ab8:	4623      	mov	r3, r4
 8015aba:	6864      	ldr	r4, [r4, #4]
 8015abc:	e7ae      	b.n	8015a1c <_malloc_r+0x34>
 8015abe:	463c      	mov	r4, r7
 8015ac0:	687f      	ldr	r7, [r7, #4]
 8015ac2:	e7b6      	b.n	8015a32 <_malloc_r+0x4a>
 8015ac4:	461a      	mov	r2, r3
 8015ac6:	685b      	ldr	r3, [r3, #4]
 8015ac8:	42a3      	cmp	r3, r4
 8015aca:	d1fb      	bne.n	8015ac4 <_malloc_r+0xdc>
 8015acc:	2300      	movs	r3, #0
 8015ace:	6053      	str	r3, [r2, #4]
 8015ad0:	e7de      	b.n	8015a90 <_malloc_r+0xa8>
 8015ad2:	230c      	movs	r3, #12
 8015ad4:	6033      	str	r3, [r6, #0]
 8015ad6:	4630      	mov	r0, r6
 8015ad8:	f000 f80c 	bl	8015af4 <__malloc_unlock>
 8015adc:	e794      	b.n	8015a08 <_malloc_r+0x20>
 8015ade:	6005      	str	r5, [r0, #0]
 8015ae0:	e7d6      	b.n	8015a90 <_malloc_r+0xa8>
 8015ae2:	bf00      	nop
 8015ae4:	20006734 	.word	0x20006734

08015ae8 <__malloc_lock>:
 8015ae8:	4801      	ldr	r0, [pc, #4]	@ (8015af0 <__malloc_lock+0x8>)
 8015aea:	f7ff b8ba 	b.w	8014c62 <__retarget_lock_acquire_recursive>
 8015aee:	bf00      	nop
 8015af0:	2000672c 	.word	0x2000672c

08015af4 <__malloc_unlock>:
 8015af4:	4801      	ldr	r0, [pc, #4]	@ (8015afc <__malloc_unlock+0x8>)
 8015af6:	f7ff b8b5 	b.w	8014c64 <__retarget_lock_release_recursive>
 8015afa:	bf00      	nop
 8015afc:	2000672c 	.word	0x2000672c

08015b00 <_Balloc>:
 8015b00:	b570      	push	{r4, r5, r6, lr}
 8015b02:	69c6      	ldr	r6, [r0, #28]
 8015b04:	4604      	mov	r4, r0
 8015b06:	460d      	mov	r5, r1
 8015b08:	b976      	cbnz	r6, 8015b28 <_Balloc+0x28>
 8015b0a:	2010      	movs	r0, #16
 8015b0c:	f7ff ff42 	bl	8015994 <malloc>
 8015b10:	4602      	mov	r2, r0
 8015b12:	61e0      	str	r0, [r4, #28]
 8015b14:	b920      	cbnz	r0, 8015b20 <_Balloc+0x20>
 8015b16:	4b18      	ldr	r3, [pc, #96]	@ (8015b78 <_Balloc+0x78>)
 8015b18:	4818      	ldr	r0, [pc, #96]	@ (8015b7c <_Balloc+0x7c>)
 8015b1a:	216b      	movs	r1, #107	@ 0x6b
 8015b1c:	f000 ff74 	bl	8016a08 <__assert_func>
 8015b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b24:	6006      	str	r6, [r0, #0]
 8015b26:	60c6      	str	r6, [r0, #12]
 8015b28:	69e6      	ldr	r6, [r4, #28]
 8015b2a:	68f3      	ldr	r3, [r6, #12]
 8015b2c:	b183      	cbz	r3, 8015b50 <_Balloc+0x50>
 8015b2e:	69e3      	ldr	r3, [r4, #28]
 8015b30:	68db      	ldr	r3, [r3, #12]
 8015b32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015b36:	b9b8      	cbnz	r0, 8015b68 <_Balloc+0x68>
 8015b38:	2101      	movs	r1, #1
 8015b3a:	fa01 f605 	lsl.w	r6, r1, r5
 8015b3e:	1d72      	adds	r2, r6, #5
 8015b40:	0092      	lsls	r2, r2, #2
 8015b42:	4620      	mov	r0, r4
 8015b44:	f000 ff7e 	bl	8016a44 <_calloc_r>
 8015b48:	b160      	cbz	r0, 8015b64 <_Balloc+0x64>
 8015b4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015b4e:	e00e      	b.n	8015b6e <_Balloc+0x6e>
 8015b50:	2221      	movs	r2, #33	@ 0x21
 8015b52:	2104      	movs	r1, #4
 8015b54:	4620      	mov	r0, r4
 8015b56:	f000 ff75 	bl	8016a44 <_calloc_r>
 8015b5a:	69e3      	ldr	r3, [r4, #28]
 8015b5c:	60f0      	str	r0, [r6, #12]
 8015b5e:	68db      	ldr	r3, [r3, #12]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d1e4      	bne.n	8015b2e <_Balloc+0x2e>
 8015b64:	2000      	movs	r0, #0
 8015b66:	bd70      	pop	{r4, r5, r6, pc}
 8015b68:	6802      	ldr	r2, [r0, #0]
 8015b6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b6e:	2300      	movs	r3, #0
 8015b70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015b74:	e7f7      	b.n	8015b66 <_Balloc+0x66>
 8015b76:	bf00      	nop
 8015b78:	0801ae39 	.word	0x0801ae39
 8015b7c:	0801aeb9 	.word	0x0801aeb9

08015b80 <_Bfree>:
 8015b80:	b570      	push	{r4, r5, r6, lr}
 8015b82:	69c6      	ldr	r6, [r0, #28]
 8015b84:	4605      	mov	r5, r0
 8015b86:	460c      	mov	r4, r1
 8015b88:	b976      	cbnz	r6, 8015ba8 <_Bfree+0x28>
 8015b8a:	2010      	movs	r0, #16
 8015b8c:	f7ff ff02 	bl	8015994 <malloc>
 8015b90:	4602      	mov	r2, r0
 8015b92:	61e8      	str	r0, [r5, #28]
 8015b94:	b920      	cbnz	r0, 8015ba0 <_Bfree+0x20>
 8015b96:	4b09      	ldr	r3, [pc, #36]	@ (8015bbc <_Bfree+0x3c>)
 8015b98:	4809      	ldr	r0, [pc, #36]	@ (8015bc0 <_Bfree+0x40>)
 8015b9a:	218f      	movs	r1, #143	@ 0x8f
 8015b9c:	f000 ff34 	bl	8016a08 <__assert_func>
 8015ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015ba4:	6006      	str	r6, [r0, #0]
 8015ba6:	60c6      	str	r6, [r0, #12]
 8015ba8:	b13c      	cbz	r4, 8015bba <_Bfree+0x3a>
 8015baa:	69eb      	ldr	r3, [r5, #28]
 8015bac:	6862      	ldr	r2, [r4, #4]
 8015bae:	68db      	ldr	r3, [r3, #12]
 8015bb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015bb4:	6021      	str	r1, [r4, #0]
 8015bb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015bba:	bd70      	pop	{r4, r5, r6, pc}
 8015bbc:	0801ae39 	.word	0x0801ae39
 8015bc0:	0801aeb9 	.word	0x0801aeb9

08015bc4 <__multadd>:
 8015bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc8:	690d      	ldr	r5, [r1, #16]
 8015bca:	4607      	mov	r7, r0
 8015bcc:	460c      	mov	r4, r1
 8015bce:	461e      	mov	r6, r3
 8015bd0:	f101 0c14 	add.w	ip, r1, #20
 8015bd4:	2000      	movs	r0, #0
 8015bd6:	f8dc 3000 	ldr.w	r3, [ip]
 8015bda:	b299      	uxth	r1, r3
 8015bdc:	fb02 6101 	mla	r1, r2, r1, r6
 8015be0:	0c1e      	lsrs	r6, r3, #16
 8015be2:	0c0b      	lsrs	r3, r1, #16
 8015be4:	fb02 3306 	mla	r3, r2, r6, r3
 8015be8:	b289      	uxth	r1, r1
 8015bea:	3001      	adds	r0, #1
 8015bec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015bf0:	4285      	cmp	r5, r0
 8015bf2:	f84c 1b04 	str.w	r1, [ip], #4
 8015bf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015bfa:	dcec      	bgt.n	8015bd6 <__multadd+0x12>
 8015bfc:	b30e      	cbz	r6, 8015c42 <__multadd+0x7e>
 8015bfe:	68a3      	ldr	r3, [r4, #8]
 8015c00:	42ab      	cmp	r3, r5
 8015c02:	dc19      	bgt.n	8015c38 <__multadd+0x74>
 8015c04:	6861      	ldr	r1, [r4, #4]
 8015c06:	4638      	mov	r0, r7
 8015c08:	3101      	adds	r1, #1
 8015c0a:	f7ff ff79 	bl	8015b00 <_Balloc>
 8015c0e:	4680      	mov	r8, r0
 8015c10:	b928      	cbnz	r0, 8015c1e <__multadd+0x5a>
 8015c12:	4602      	mov	r2, r0
 8015c14:	4b0c      	ldr	r3, [pc, #48]	@ (8015c48 <__multadd+0x84>)
 8015c16:	480d      	ldr	r0, [pc, #52]	@ (8015c4c <__multadd+0x88>)
 8015c18:	21ba      	movs	r1, #186	@ 0xba
 8015c1a:	f000 fef5 	bl	8016a08 <__assert_func>
 8015c1e:	6922      	ldr	r2, [r4, #16]
 8015c20:	3202      	adds	r2, #2
 8015c22:	f104 010c 	add.w	r1, r4, #12
 8015c26:	0092      	lsls	r2, r2, #2
 8015c28:	300c      	adds	r0, #12
 8015c2a:	f000 fedf 	bl	80169ec <memcpy>
 8015c2e:	4621      	mov	r1, r4
 8015c30:	4638      	mov	r0, r7
 8015c32:	f7ff ffa5 	bl	8015b80 <_Bfree>
 8015c36:	4644      	mov	r4, r8
 8015c38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015c3c:	3501      	adds	r5, #1
 8015c3e:	615e      	str	r6, [r3, #20]
 8015c40:	6125      	str	r5, [r4, #16]
 8015c42:	4620      	mov	r0, r4
 8015c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c48:	0801aea8 	.word	0x0801aea8
 8015c4c:	0801aeb9 	.word	0x0801aeb9

08015c50 <__hi0bits>:
 8015c50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015c54:	4603      	mov	r3, r0
 8015c56:	bf36      	itet	cc
 8015c58:	0403      	lslcc	r3, r0, #16
 8015c5a:	2000      	movcs	r0, #0
 8015c5c:	2010      	movcc	r0, #16
 8015c5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015c62:	bf3c      	itt	cc
 8015c64:	021b      	lslcc	r3, r3, #8
 8015c66:	3008      	addcc	r0, #8
 8015c68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015c6c:	bf3c      	itt	cc
 8015c6e:	011b      	lslcc	r3, r3, #4
 8015c70:	3004      	addcc	r0, #4
 8015c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015c76:	bf3c      	itt	cc
 8015c78:	009b      	lslcc	r3, r3, #2
 8015c7a:	3002      	addcc	r0, #2
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	db05      	blt.n	8015c8c <__hi0bits+0x3c>
 8015c80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015c84:	f100 0001 	add.w	r0, r0, #1
 8015c88:	bf08      	it	eq
 8015c8a:	2020      	moveq	r0, #32
 8015c8c:	4770      	bx	lr

08015c8e <__lo0bits>:
 8015c8e:	6803      	ldr	r3, [r0, #0]
 8015c90:	4602      	mov	r2, r0
 8015c92:	f013 0007 	ands.w	r0, r3, #7
 8015c96:	d00b      	beq.n	8015cb0 <__lo0bits+0x22>
 8015c98:	07d9      	lsls	r1, r3, #31
 8015c9a:	d421      	bmi.n	8015ce0 <__lo0bits+0x52>
 8015c9c:	0798      	lsls	r0, r3, #30
 8015c9e:	bf49      	itett	mi
 8015ca0:	085b      	lsrmi	r3, r3, #1
 8015ca2:	089b      	lsrpl	r3, r3, #2
 8015ca4:	2001      	movmi	r0, #1
 8015ca6:	6013      	strmi	r3, [r2, #0]
 8015ca8:	bf5c      	itt	pl
 8015caa:	6013      	strpl	r3, [r2, #0]
 8015cac:	2002      	movpl	r0, #2
 8015cae:	4770      	bx	lr
 8015cb0:	b299      	uxth	r1, r3
 8015cb2:	b909      	cbnz	r1, 8015cb8 <__lo0bits+0x2a>
 8015cb4:	0c1b      	lsrs	r3, r3, #16
 8015cb6:	2010      	movs	r0, #16
 8015cb8:	b2d9      	uxtb	r1, r3
 8015cba:	b909      	cbnz	r1, 8015cc0 <__lo0bits+0x32>
 8015cbc:	3008      	adds	r0, #8
 8015cbe:	0a1b      	lsrs	r3, r3, #8
 8015cc0:	0719      	lsls	r1, r3, #28
 8015cc2:	bf04      	itt	eq
 8015cc4:	091b      	lsreq	r3, r3, #4
 8015cc6:	3004      	addeq	r0, #4
 8015cc8:	0799      	lsls	r1, r3, #30
 8015cca:	bf04      	itt	eq
 8015ccc:	089b      	lsreq	r3, r3, #2
 8015cce:	3002      	addeq	r0, #2
 8015cd0:	07d9      	lsls	r1, r3, #31
 8015cd2:	d403      	bmi.n	8015cdc <__lo0bits+0x4e>
 8015cd4:	085b      	lsrs	r3, r3, #1
 8015cd6:	f100 0001 	add.w	r0, r0, #1
 8015cda:	d003      	beq.n	8015ce4 <__lo0bits+0x56>
 8015cdc:	6013      	str	r3, [r2, #0]
 8015cde:	4770      	bx	lr
 8015ce0:	2000      	movs	r0, #0
 8015ce2:	4770      	bx	lr
 8015ce4:	2020      	movs	r0, #32
 8015ce6:	4770      	bx	lr

08015ce8 <__i2b>:
 8015ce8:	b510      	push	{r4, lr}
 8015cea:	460c      	mov	r4, r1
 8015cec:	2101      	movs	r1, #1
 8015cee:	f7ff ff07 	bl	8015b00 <_Balloc>
 8015cf2:	4602      	mov	r2, r0
 8015cf4:	b928      	cbnz	r0, 8015d02 <__i2b+0x1a>
 8015cf6:	4b05      	ldr	r3, [pc, #20]	@ (8015d0c <__i2b+0x24>)
 8015cf8:	4805      	ldr	r0, [pc, #20]	@ (8015d10 <__i2b+0x28>)
 8015cfa:	f240 1145 	movw	r1, #325	@ 0x145
 8015cfe:	f000 fe83 	bl	8016a08 <__assert_func>
 8015d02:	2301      	movs	r3, #1
 8015d04:	6144      	str	r4, [r0, #20]
 8015d06:	6103      	str	r3, [r0, #16]
 8015d08:	bd10      	pop	{r4, pc}
 8015d0a:	bf00      	nop
 8015d0c:	0801aea8 	.word	0x0801aea8
 8015d10:	0801aeb9 	.word	0x0801aeb9

08015d14 <__multiply>:
 8015d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d18:	4614      	mov	r4, r2
 8015d1a:	690a      	ldr	r2, [r1, #16]
 8015d1c:	6923      	ldr	r3, [r4, #16]
 8015d1e:	429a      	cmp	r2, r3
 8015d20:	bfa8      	it	ge
 8015d22:	4623      	movge	r3, r4
 8015d24:	460f      	mov	r7, r1
 8015d26:	bfa4      	itt	ge
 8015d28:	460c      	movge	r4, r1
 8015d2a:	461f      	movge	r7, r3
 8015d2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015d30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015d34:	68a3      	ldr	r3, [r4, #8]
 8015d36:	6861      	ldr	r1, [r4, #4]
 8015d38:	eb0a 0609 	add.w	r6, sl, r9
 8015d3c:	42b3      	cmp	r3, r6
 8015d3e:	b085      	sub	sp, #20
 8015d40:	bfb8      	it	lt
 8015d42:	3101      	addlt	r1, #1
 8015d44:	f7ff fedc 	bl	8015b00 <_Balloc>
 8015d48:	b930      	cbnz	r0, 8015d58 <__multiply+0x44>
 8015d4a:	4602      	mov	r2, r0
 8015d4c:	4b44      	ldr	r3, [pc, #272]	@ (8015e60 <__multiply+0x14c>)
 8015d4e:	4845      	ldr	r0, [pc, #276]	@ (8015e64 <__multiply+0x150>)
 8015d50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015d54:	f000 fe58 	bl	8016a08 <__assert_func>
 8015d58:	f100 0514 	add.w	r5, r0, #20
 8015d5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015d60:	462b      	mov	r3, r5
 8015d62:	2200      	movs	r2, #0
 8015d64:	4543      	cmp	r3, r8
 8015d66:	d321      	bcc.n	8015dac <__multiply+0x98>
 8015d68:	f107 0114 	add.w	r1, r7, #20
 8015d6c:	f104 0214 	add.w	r2, r4, #20
 8015d70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015d74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015d78:	9302      	str	r3, [sp, #8]
 8015d7a:	1b13      	subs	r3, r2, r4
 8015d7c:	3b15      	subs	r3, #21
 8015d7e:	f023 0303 	bic.w	r3, r3, #3
 8015d82:	3304      	adds	r3, #4
 8015d84:	f104 0715 	add.w	r7, r4, #21
 8015d88:	42ba      	cmp	r2, r7
 8015d8a:	bf38      	it	cc
 8015d8c:	2304      	movcc	r3, #4
 8015d8e:	9301      	str	r3, [sp, #4]
 8015d90:	9b02      	ldr	r3, [sp, #8]
 8015d92:	9103      	str	r1, [sp, #12]
 8015d94:	428b      	cmp	r3, r1
 8015d96:	d80c      	bhi.n	8015db2 <__multiply+0x9e>
 8015d98:	2e00      	cmp	r6, #0
 8015d9a:	dd03      	ble.n	8015da4 <__multiply+0x90>
 8015d9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d05b      	beq.n	8015e5c <__multiply+0x148>
 8015da4:	6106      	str	r6, [r0, #16]
 8015da6:	b005      	add	sp, #20
 8015da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dac:	f843 2b04 	str.w	r2, [r3], #4
 8015db0:	e7d8      	b.n	8015d64 <__multiply+0x50>
 8015db2:	f8b1 a000 	ldrh.w	sl, [r1]
 8015db6:	f1ba 0f00 	cmp.w	sl, #0
 8015dba:	d024      	beq.n	8015e06 <__multiply+0xf2>
 8015dbc:	f104 0e14 	add.w	lr, r4, #20
 8015dc0:	46a9      	mov	r9, r5
 8015dc2:	f04f 0c00 	mov.w	ip, #0
 8015dc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015dca:	f8d9 3000 	ldr.w	r3, [r9]
 8015dce:	fa1f fb87 	uxth.w	fp, r7
 8015dd2:	b29b      	uxth	r3, r3
 8015dd4:	fb0a 330b 	mla	r3, sl, fp, r3
 8015dd8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015ddc:	f8d9 7000 	ldr.w	r7, [r9]
 8015de0:	4463      	add	r3, ip
 8015de2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015de6:	fb0a c70b 	mla	r7, sl, fp, ip
 8015dea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015dee:	b29b      	uxth	r3, r3
 8015df0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015df4:	4572      	cmp	r2, lr
 8015df6:	f849 3b04 	str.w	r3, [r9], #4
 8015dfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015dfe:	d8e2      	bhi.n	8015dc6 <__multiply+0xb2>
 8015e00:	9b01      	ldr	r3, [sp, #4]
 8015e02:	f845 c003 	str.w	ip, [r5, r3]
 8015e06:	9b03      	ldr	r3, [sp, #12]
 8015e08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015e0c:	3104      	adds	r1, #4
 8015e0e:	f1b9 0f00 	cmp.w	r9, #0
 8015e12:	d021      	beq.n	8015e58 <__multiply+0x144>
 8015e14:	682b      	ldr	r3, [r5, #0]
 8015e16:	f104 0c14 	add.w	ip, r4, #20
 8015e1a:	46ae      	mov	lr, r5
 8015e1c:	f04f 0a00 	mov.w	sl, #0
 8015e20:	f8bc b000 	ldrh.w	fp, [ip]
 8015e24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015e28:	fb09 770b 	mla	r7, r9, fp, r7
 8015e2c:	4457      	add	r7, sl
 8015e2e:	b29b      	uxth	r3, r3
 8015e30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015e34:	f84e 3b04 	str.w	r3, [lr], #4
 8015e38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015e3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015e40:	f8be 3000 	ldrh.w	r3, [lr]
 8015e44:	fb09 330a 	mla	r3, r9, sl, r3
 8015e48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015e4c:	4562      	cmp	r2, ip
 8015e4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015e52:	d8e5      	bhi.n	8015e20 <__multiply+0x10c>
 8015e54:	9f01      	ldr	r7, [sp, #4]
 8015e56:	51eb      	str	r3, [r5, r7]
 8015e58:	3504      	adds	r5, #4
 8015e5a:	e799      	b.n	8015d90 <__multiply+0x7c>
 8015e5c:	3e01      	subs	r6, #1
 8015e5e:	e79b      	b.n	8015d98 <__multiply+0x84>
 8015e60:	0801aea8 	.word	0x0801aea8
 8015e64:	0801aeb9 	.word	0x0801aeb9

08015e68 <__pow5mult>:
 8015e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e6c:	4615      	mov	r5, r2
 8015e6e:	f012 0203 	ands.w	r2, r2, #3
 8015e72:	4607      	mov	r7, r0
 8015e74:	460e      	mov	r6, r1
 8015e76:	d007      	beq.n	8015e88 <__pow5mult+0x20>
 8015e78:	4c25      	ldr	r4, [pc, #148]	@ (8015f10 <__pow5mult+0xa8>)
 8015e7a:	3a01      	subs	r2, #1
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015e82:	f7ff fe9f 	bl	8015bc4 <__multadd>
 8015e86:	4606      	mov	r6, r0
 8015e88:	10ad      	asrs	r5, r5, #2
 8015e8a:	d03d      	beq.n	8015f08 <__pow5mult+0xa0>
 8015e8c:	69fc      	ldr	r4, [r7, #28]
 8015e8e:	b97c      	cbnz	r4, 8015eb0 <__pow5mult+0x48>
 8015e90:	2010      	movs	r0, #16
 8015e92:	f7ff fd7f 	bl	8015994 <malloc>
 8015e96:	4602      	mov	r2, r0
 8015e98:	61f8      	str	r0, [r7, #28]
 8015e9a:	b928      	cbnz	r0, 8015ea8 <__pow5mult+0x40>
 8015e9c:	4b1d      	ldr	r3, [pc, #116]	@ (8015f14 <__pow5mult+0xac>)
 8015e9e:	481e      	ldr	r0, [pc, #120]	@ (8015f18 <__pow5mult+0xb0>)
 8015ea0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015ea4:	f000 fdb0 	bl	8016a08 <__assert_func>
 8015ea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015eac:	6004      	str	r4, [r0, #0]
 8015eae:	60c4      	str	r4, [r0, #12]
 8015eb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015eb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015eb8:	b94c      	cbnz	r4, 8015ece <__pow5mult+0x66>
 8015eba:	f240 2171 	movw	r1, #625	@ 0x271
 8015ebe:	4638      	mov	r0, r7
 8015ec0:	f7ff ff12 	bl	8015ce8 <__i2b>
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	f8c8 0008 	str.w	r0, [r8, #8]
 8015eca:	4604      	mov	r4, r0
 8015ecc:	6003      	str	r3, [r0, #0]
 8015ece:	f04f 0900 	mov.w	r9, #0
 8015ed2:	07eb      	lsls	r3, r5, #31
 8015ed4:	d50a      	bpl.n	8015eec <__pow5mult+0x84>
 8015ed6:	4631      	mov	r1, r6
 8015ed8:	4622      	mov	r2, r4
 8015eda:	4638      	mov	r0, r7
 8015edc:	f7ff ff1a 	bl	8015d14 <__multiply>
 8015ee0:	4631      	mov	r1, r6
 8015ee2:	4680      	mov	r8, r0
 8015ee4:	4638      	mov	r0, r7
 8015ee6:	f7ff fe4b 	bl	8015b80 <_Bfree>
 8015eea:	4646      	mov	r6, r8
 8015eec:	106d      	asrs	r5, r5, #1
 8015eee:	d00b      	beq.n	8015f08 <__pow5mult+0xa0>
 8015ef0:	6820      	ldr	r0, [r4, #0]
 8015ef2:	b938      	cbnz	r0, 8015f04 <__pow5mult+0x9c>
 8015ef4:	4622      	mov	r2, r4
 8015ef6:	4621      	mov	r1, r4
 8015ef8:	4638      	mov	r0, r7
 8015efa:	f7ff ff0b 	bl	8015d14 <__multiply>
 8015efe:	6020      	str	r0, [r4, #0]
 8015f00:	f8c0 9000 	str.w	r9, [r0]
 8015f04:	4604      	mov	r4, r0
 8015f06:	e7e4      	b.n	8015ed2 <__pow5mult+0x6a>
 8015f08:	4630      	mov	r0, r6
 8015f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f0e:	bf00      	nop
 8015f10:	0801af14 	.word	0x0801af14
 8015f14:	0801ae39 	.word	0x0801ae39
 8015f18:	0801aeb9 	.word	0x0801aeb9

08015f1c <__lshift>:
 8015f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f20:	460c      	mov	r4, r1
 8015f22:	6849      	ldr	r1, [r1, #4]
 8015f24:	6923      	ldr	r3, [r4, #16]
 8015f26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015f2a:	68a3      	ldr	r3, [r4, #8]
 8015f2c:	4607      	mov	r7, r0
 8015f2e:	4691      	mov	r9, r2
 8015f30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015f34:	f108 0601 	add.w	r6, r8, #1
 8015f38:	42b3      	cmp	r3, r6
 8015f3a:	db0b      	blt.n	8015f54 <__lshift+0x38>
 8015f3c:	4638      	mov	r0, r7
 8015f3e:	f7ff fddf 	bl	8015b00 <_Balloc>
 8015f42:	4605      	mov	r5, r0
 8015f44:	b948      	cbnz	r0, 8015f5a <__lshift+0x3e>
 8015f46:	4602      	mov	r2, r0
 8015f48:	4b28      	ldr	r3, [pc, #160]	@ (8015fec <__lshift+0xd0>)
 8015f4a:	4829      	ldr	r0, [pc, #164]	@ (8015ff0 <__lshift+0xd4>)
 8015f4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015f50:	f000 fd5a 	bl	8016a08 <__assert_func>
 8015f54:	3101      	adds	r1, #1
 8015f56:	005b      	lsls	r3, r3, #1
 8015f58:	e7ee      	b.n	8015f38 <__lshift+0x1c>
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	f100 0114 	add.w	r1, r0, #20
 8015f60:	f100 0210 	add.w	r2, r0, #16
 8015f64:	4618      	mov	r0, r3
 8015f66:	4553      	cmp	r3, sl
 8015f68:	db33      	blt.n	8015fd2 <__lshift+0xb6>
 8015f6a:	6920      	ldr	r0, [r4, #16]
 8015f6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f70:	f104 0314 	add.w	r3, r4, #20
 8015f74:	f019 091f 	ands.w	r9, r9, #31
 8015f78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015f7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015f80:	d02b      	beq.n	8015fda <__lshift+0xbe>
 8015f82:	f1c9 0e20 	rsb	lr, r9, #32
 8015f86:	468a      	mov	sl, r1
 8015f88:	2200      	movs	r2, #0
 8015f8a:	6818      	ldr	r0, [r3, #0]
 8015f8c:	fa00 f009 	lsl.w	r0, r0, r9
 8015f90:	4310      	orrs	r0, r2
 8015f92:	f84a 0b04 	str.w	r0, [sl], #4
 8015f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f9a:	459c      	cmp	ip, r3
 8015f9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8015fa0:	d8f3      	bhi.n	8015f8a <__lshift+0x6e>
 8015fa2:	ebac 0304 	sub.w	r3, ip, r4
 8015fa6:	3b15      	subs	r3, #21
 8015fa8:	f023 0303 	bic.w	r3, r3, #3
 8015fac:	3304      	adds	r3, #4
 8015fae:	f104 0015 	add.w	r0, r4, #21
 8015fb2:	4584      	cmp	ip, r0
 8015fb4:	bf38      	it	cc
 8015fb6:	2304      	movcc	r3, #4
 8015fb8:	50ca      	str	r2, [r1, r3]
 8015fba:	b10a      	cbz	r2, 8015fc0 <__lshift+0xa4>
 8015fbc:	f108 0602 	add.w	r6, r8, #2
 8015fc0:	3e01      	subs	r6, #1
 8015fc2:	4638      	mov	r0, r7
 8015fc4:	612e      	str	r6, [r5, #16]
 8015fc6:	4621      	mov	r1, r4
 8015fc8:	f7ff fdda 	bl	8015b80 <_Bfree>
 8015fcc:	4628      	mov	r0, r5
 8015fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8015fd6:	3301      	adds	r3, #1
 8015fd8:	e7c5      	b.n	8015f66 <__lshift+0x4a>
 8015fda:	3904      	subs	r1, #4
 8015fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fe0:	f841 2f04 	str.w	r2, [r1, #4]!
 8015fe4:	459c      	cmp	ip, r3
 8015fe6:	d8f9      	bhi.n	8015fdc <__lshift+0xc0>
 8015fe8:	e7ea      	b.n	8015fc0 <__lshift+0xa4>
 8015fea:	bf00      	nop
 8015fec:	0801aea8 	.word	0x0801aea8
 8015ff0:	0801aeb9 	.word	0x0801aeb9

08015ff4 <__mcmp>:
 8015ff4:	690a      	ldr	r2, [r1, #16]
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	6900      	ldr	r0, [r0, #16]
 8015ffa:	1a80      	subs	r0, r0, r2
 8015ffc:	b530      	push	{r4, r5, lr}
 8015ffe:	d10e      	bne.n	801601e <__mcmp+0x2a>
 8016000:	3314      	adds	r3, #20
 8016002:	3114      	adds	r1, #20
 8016004:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8016008:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801600c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016014:	4295      	cmp	r5, r2
 8016016:	d003      	beq.n	8016020 <__mcmp+0x2c>
 8016018:	d205      	bcs.n	8016026 <__mcmp+0x32>
 801601a:	f04f 30ff 	mov.w	r0, #4294967295
 801601e:	bd30      	pop	{r4, r5, pc}
 8016020:	42a3      	cmp	r3, r4
 8016022:	d3f3      	bcc.n	801600c <__mcmp+0x18>
 8016024:	e7fb      	b.n	801601e <__mcmp+0x2a>
 8016026:	2001      	movs	r0, #1
 8016028:	e7f9      	b.n	801601e <__mcmp+0x2a>
	...

0801602c <__mdiff>:
 801602c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016030:	4689      	mov	r9, r1
 8016032:	4606      	mov	r6, r0
 8016034:	4611      	mov	r1, r2
 8016036:	4648      	mov	r0, r9
 8016038:	4614      	mov	r4, r2
 801603a:	f7ff ffdb 	bl	8015ff4 <__mcmp>
 801603e:	1e05      	subs	r5, r0, #0
 8016040:	d112      	bne.n	8016068 <__mdiff+0x3c>
 8016042:	4629      	mov	r1, r5
 8016044:	4630      	mov	r0, r6
 8016046:	f7ff fd5b 	bl	8015b00 <_Balloc>
 801604a:	4602      	mov	r2, r0
 801604c:	b928      	cbnz	r0, 801605a <__mdiff+0x2e>
 801604e:	4b3f      	ldr	r3, [pc, #252]	@ (801614c <__mdiff+0x120>)
 8016050:	f240 2137 	movw	r1, #567	@ 0x237
 8016054:	483e      	ldr	r0, [pc, #248]	@ (8016150 <__mdiff+0x124>)
 8016056:	f000 fcd7 	bl	8016a08 <__assert_func>
 801605a:	2301      	movs	r3, #1
 801605c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016060:	4610      	mov	r0, r2
 8016062:	b003      	add	sp, #12
 8016064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016068:	bfbc      	itt	lt
 801606a:	464b      	movlt	r3, r9
 801606c:	46a1      	movlt	r9, r4
 801606e:	4630      	mov	r0, r6
 8016070:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8016074:	bfba      	itte	lt
 8016076:	461c      	movlt	r4, r3
 8016078:	2501      	movlt	r5, #1
 801607a:	2500      	movge	r5, #0
 801607c:	f7ff fd40 	bl	8015b00 <_Balloc>
 8016080:	4602      	mov	r2, r0
 8016082:	b918      	cbnz	r0, 801608c <__mdiff+0x60>
 8016084:	4b31      	ldr	r3, [pc, #196]	@ (801614c <__mdiff+0x120>)
 8016086:	f240 2145 	movw	r1, #581	@ 0x245
 801608a:	e7e3      	b.n	8016054 <__mdiff+0x28>
 801608c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8016090:	6926      	ldr	r6, [r4, #16]
 8016092:	60c5      	str	r5, [r0, #12]
 8016094:	f109 0310 	add.w	r3, r9, #16
 8016098:	f109 0514 	add.w	r5, r9, #20
 801609c:	f104 0e14 	add.w	lr, r4, #20
 80160a0:	f100 0b14 	add.w	fp, r0, #20
 80160a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80160a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80160ac:	9301      	str	r3, [sp, #4]
 80160ae:	46d9      	mov	r9, fp
 80160b0:	f04f 0c00 	mov.w	ip, #0
 80160b4:	9b01      	ldr	r3, [sp, #4]
 80160b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80160ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80160be:	9301      	str	r3, [sp, #4]
 80160c0:	fa1f f38a 	uxth.w	r3, sl
 80160c4:	4619      	mov	r1, r3
 80160c6:	b283      	uxth	r3, r0
 80160c8:	1acb      	subs	r3, r1, r3
 80160ca:	0c00      	lsrs	r0, r0, #16
 80160cc:	4463      	add	r3, ip
 80160ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80160d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80160dc:	4576      	cmp	r6, lr
 80160de:	f849 3b04 	str.w	r3, [r9], #4
 80160e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80160e6:	d8e5      	bhi.n	80160b4 <__mdiff+0x88>
 80160e8:	1b33      	subs	r3, r6, r4
 80160ea:	3b15      	subs	r3, #21
 80160ec:	f023 0303 	bic.w	r3, r3, #3
 80160f0:	3415      	adds	r4, #21
 80160f2:	3304      	adds	r3, #4
 80160f4:	42a6      	cmp	r6, r4
 80160f6:	bf38      	it	cc
 80160f8:	2304      	movcc	r3, #4
 80160fa:	441d      	add	r5, r3
 80160fc:	445b      	add	r3, fp
 80160fe:	461e      	mov	r6, r3
 8016100:	462c      	mov	r4, r5
 8016102:	4544      	cmp	r4, r8
 8016104:	d30e      	bcc.n	8016124 <__mdiff+0xf8>
 8016106:	f108 0103 	add.w	r1, r8, #3
 801610a:	1b49      	subs	r1, r1, r5
 801610c:	f021 0103 	bic.w	r1, r1, #3
 8016110:	3d03      	subs	r5, #3
 8016112:	45a8      	cmp	r8, r5
 8016114:	bf38      	it	cc
 8016116:	2100      	movcc	r1, #0
 8016118:	440b      	add	r3, r1
 801611a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801611e:	b191      	cbz	r1, 8016146 <__mdiff+0x11a>
 8016120:	6117      	str	r7, [r2, #16]
 8016122:	e79d      	b.n	8016060 <__mdiff+0x34>
 8016124:	f854 1b04 	ldr.w	r1, [r4], #4
 8016128:	46e6      	mov	lr, ip
 801612a:	0c08      	lsrs	r0, r1, #16
 801612c:	fa1c fc81 	uxtah	ip, ip, r1
 8016130:	4471      	add	r1, lr
 8016132:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8016136:	b289      	uxth	r1, r1
 8016138:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801613c:	f846 1b04 	str.w	r1, [r6], #4
 8016140:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8016144:	e7dd      	b.n	8016102 <__mdiff+0xd6>
 8016146:	3f01      	subs	r7, #1
 8016148:	e7e7      	b.n	801611a <__mdiff+0xee>
 801614a:	bf00      	nop
 801614c:	0801aea8 	.word	0x0801aea8
 8016150:	0801aeb9 	.word	0x0801aeb9

08016154 <__d2b>:
 8016154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016158:	460f      	mov	r7, r1
 801615a:	2101      	movs	r1, #1
 801615c:	ec59 8b10 	vmov	r8, r9, d0
 8016160:	4616      	mov	r6, r2
 8016162:	f7ff fccd 	bl	8015b00 <_Balloc>
 8016166:	4604      	mov	r4, r0
 8016168:	b930      	cbnz	r0, 8016178 <__d2b+0x24>
 801616a:	4602      	mov	r2, r0
 801616c:	4b23      	ldr	r3, [pc, #140]	@ (80161fc <__d2b+0xa8>)
 801616e:	4824      	ldr	r0, [pc, #144]	@ (8016200 <__d2b+0xac>)
 8016170:	f240 310f 	movw	r1, #783	@ 0x30f
 8016174:	f000 fc48 	bl	8016a08 <__assert_func>
 8016178:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801617c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016180:	b10d      	cbz	r5, 8016186 <__d2b+0x32>
 8016182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016186:	9301      	str	r3, [sp, #4]
 8016188:	f1b8 0300 	subs.w	r3, r8, #0
 801618c:	d023      	beq.n	80161d6 <__d2b+0x82>
 801618e:	4668      	mov	r0, sp
 8016190:	9300      	str	r3, [sp, #0]
 8016192:	f7ff fd7c 	bl	8015c8e <__lo0bits>
 8016196:	e9dd 1200 	ldrd	r1, r2, [sp]
 801619a:	b1d0      	cbz	r0, 80161d2 <__d2b+0x7e>
 801619c:	f1c0 0320 	rsb	r3, r0, #32
 80161a0:	fa02 f303 	lsl.w	r3, r2, r3
 80161a4:	430b      	orrs	r3, r1
 80161a6:	40c2      	lsrs	r2, r0
 80161a8:	6163      	str	r3, [r4, #20]
 80161aa:	9201      	str	r2, [sp, #4]
 80161ac:	9b01      	ldr	r3, [sp, #4]
 80161ae:	61a3      	str	r3, [r4, #24]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	bf0c      	ite	eq
 80161b4:	2201      	moveq	r2, #1
 80161b6:	2202      	movne	r2, #2
 80161b8:	6122      	str	r2, [r4, #16]
 80161ba:	b1a5      	cbz	r5, 80161e6 <__d2b+0x92>
 80161bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80161c0:	4405      	add	r5, r0
 80161c2:	603d      	str	r5, [r7, #0]
 80161c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80161c8:	6030      	str	r0, [r6, #0]
 80161ca:	4620      	mov	r0, r4
 80161cc:	b003      	add	sp, #12
 80161ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161d2:	6161      	str	r1, [r4, #20]
 80161d4:	e7ea      	b.n	80161ac <__d2b+0x58>
 80161d6:	a801      	add	r0, sp, #4
 80161d8:	f7ff fd59 	bl	8015c8e <__lo0bits>
 80161dc:	9b01      	ldr	r3, [sp, #4]
 80161de:	6163      	str	r3, [r4, #20]
 80161e0:	3020      	adds	r0, #32
 80161e2:	2201      	movs	r2, #1
 80161e4:	e7e8      	b.n	80161b8 <__d2b+0x64>
 80161e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80161ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80161ee:	6038      	str	r0, [r7, #0]
 80161f0:	6918      	ldr	r0, [r3, #16]
 80161f2:	f7ff fd2d 	bl	8015c50 <__hi0bits>
 80161f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80161fa:	e7e5      	b.n	80161c8 <__d2b+0x74>
 80161fc:	0801aea8 	.word	0x0801aea8
 8016200:	0801aeb9 	.word	0x0801aeb9

08016204 <__ssputs_r>:
 8016204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016208:	688e      	ldr	r6, [r1, #8]
 801620a:	461f      	mov	r7, r3
 801620c:	42be      	cmp	r6, r7
 801620e:	680b      	ldr	r3, [r1, #0]
 8016210:	4682      	mov	sl, r0
 8016212:	460c      	mov	r4, r1
 8016214:	4690      	mov	r8, r2
 8016216:	d82d      	bhi.n	8016274 <__ssputs_r+0x70>
 8016218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801621c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016220:	d026      	beq.n	8016270 <__ssputs_r+0x6c>
 8016222:	6965      	ldr	r5, [r4, #20]
 8016224:	6909      	ldr	r1, [r1, #16]
 8016226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801622a:	eba3 0901 	sub.w	r9, r3, r1
 801622e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016232:	1c7b      	adds	r3, r7, #1
 8016234:	444b      	add	r3, r9
 8016236:	106d      	asrs	r5, r5, #1
 8016238:	429d      	cmp	r5, r3
 801623a:	bf38      	it	cc
 801623c:	461d      	movcc	r5, r3
 801623e:	0553      	lsls	r3, r2, #21
 8016240:	d527      	bpl.n	8016292 <__ssputs_r+0x8e>
 8016242:	4629      	mov	r1, r5
 8016244:	f7ff fbd0 	bl	80159e8 <_malloc_r>
 8016248:	4606      	mov	r6, r0
 801624a:	b360      	cbz	r0, 80162a6 <__ssputs_r+0xa2>
 801624c:	6921      	ldr	r1, [r4, #16]
 801624e:	464a      	mov	r2, r9
 8016250:	f000 fbcc 	bl	80169ec <memcpy>
 8016254:	89a3      	ldrh	r3, [r4, #12]
 8016256:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801625a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801625e:	81a3      	strh	r3, [r4, #12]
 8016260:	6126      	str	r6, [r4, #16]
 8016262:	6165      	str	r5, [r4, #20]
 8016264:	444e      	add	r6, r9
 8016266:	eba5 0509 	sub.w	r5, r5, r9
 801626a:	6026      	str	r6, [r4, #0]
 801626c:	60a5      	str	r5, [r4, #8]
 801626e:	463e      	mov	r6, r7
 8016270:	42be      	cmp	r6, r7
 8016272:	d900      	bls.n	8016276 <__ssputs_r+0x72>
 8016274:	463e      	mov	r6, r7
 8016276:	6820      	ldr	r0, [r4, #0]
 8016278:	4632      	mov	r2, r6
 801627a:	4641      	mov	r1, r8
 801627c:	f000 fb6a 	bl	8016954 <memmove>
 8016280:	68a3      	ldr	r3, [r4, #8]
 8016282:	1b9b      	subs	r3, r3, r6
 8016284:	60a3      	str	r3, [r4, #8]
 8016286:	6823      	ldr	r3, [r4, #0]
 8016288:	4433      	add	r3, r6
 801628a:	6023      	str	r3, [r4, #0]
 801628c:	2000      	movs	r0, #0
 801628e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016292:	462a      	mov	r2, r5
 8016294:	f000 fbfc 	bl	8016a90 <_realloc_r>
 8016298:	4606      	mov	r6, r0
 801629a:	2800      	cmp	r0, #0
 801629c:	d1e0      	bne.n	8016260 <__ssputs_r+0x5c>
 801629e:	6921      	ldr	r1, [r4, #16]
 80162a0:	4650      	mov	r0, sl
 80162a2:	f7ff fb2d 	bl	8015900 <_free_r>
 80162a6:	230c      	movs	r3, #12
 80162a8:	f8ca 3000 	str.w	r3, [sl]
 80162ac:	89a3      	ldrh	r3, [r4, #12]
 80162ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80162b2:	81a3      	strh	r3, [r4, #12]
 80162b4:	f04f 30ff 	mov.w	r0, #4294967295
 80162b8:	e7e9      	b.n	801628e <__ssputs_r+0x8a>
	...

080162bc <_svfiprintf_r>:
 80162bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162c0:	4698      	mov	r8, r3
 80162c2:	898b      	ldrh	r3, [r1, #12]
 80162c4:	061b      	lsls	r3, r3, #24
 80162c6:	b09d      	sub	sp, #116	@ 0x74
 80162c8:	4607      	mov	r7, r0
 80162ca:	460d      	mov	r5, r1
 80162cc:	4614      	mov	r4, r2
 80162ce:	d510      	bpl.n	80162f2 <_svfiprintf_r+0x36>
 80162d0:	690b      	ldr	r3, [r1, #16]
 80162d2:	b973      	cbnz	r3, 80162f2 <_svfiprintf_r+0x36>
 80162d4:	2140      	movs	r1, #64	@ 0x40
 80162d6:	f7ff fb87 	bl	80159e8 <_malloc_r>
 80162da:	6028      	str	r0, [r5, #0]
 80162dc:	6128      	str	r0, [r5, #16]
 80162de:	b930      	cbnz	r0, 80162ee <_svfiprintf_r+0x32>
 80162e0:	230c      	movs	r3, #12
 80162e2:	603b      	str	r3, [r7, #0]
 80162e4:	f04f 30ff 	mov.w	r0, #4294967295
 80162e8:	b01d      	add	sp, #116	@ 0x74
 80162ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ee:	2340      	movs	r3, #64	@ 0x40
 80162f0:	616b      	str	r3, [r5, #20]
 80162f2:	2300      	movs	r3, #0
 80162f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80162f6:	2320      	movs	r3, #32
 80162f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80162fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8016300:	2330      	movs	r3, #48	@ 0x30
 8016302:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80164a0 <_svfiprintf_r+0x1e4>
 8016306:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801630a:	f04f 0901 	mov.w	r9, #1
 801630e:	4623      	mov	r3, r4
 8016310:	469a      	mov	sl, r3
 8016312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016316:	b10a      	cbz	r2, 801631c <_svfiprintf_r+0x60>
 8016318:	2a25      	cmp	r2, #37	@ 0x25
 801631a:	d1f9      	bne.n	8016310 <_svfiprintf_r+0x54>
 801631c:	ebba 0b04 	subs.w	fp, sl, r4
 8016320:	d00b      	beq.n	801633a <_svfiprintf_r+0x7e>
 8016322:	465b      	mov	r3, fp
 8016324:	4622      	mov	r2, r4
 8016326:	4629      	mov	r1, r5
 8016328:	4638      	mov	r0, r7
 801632a:	f7ff ff6b 	bl	8016204 <__ssputs_r>
 801632e:	3001      	adds	r0, #1
 8016330:	f000 80a7 	beq.w	8016482 <_svfiprintf_r+0x1c6>
 8016334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016336:	445a      	add	r2, fp
 8016338:	9209      	str	r2, [sp, #36]	@ 0x24
 801633a:	f89a 3000 	ldrb.w	r3, [sl]
 801633e:	2b00      	cmp	r3, #0
 8016340:	f000 809f 	beq.w	8016482 <_svfiprintf_r+0x1c6>
 8016344:	2300      	movs	r3, #0
 8016346:	f04f 32ff 	mov.w	r2, #4294967295
 801634a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801634e:	f10a 0a01 	add.w	sl, sl, #1
 8016352:	9304      	str	r3, [sp, #16]
 8016354:	9307      	str	r3, [sp, #28]
 8016356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801635a:	931a      	str	r3, [sp, #104]	@ 0x68
 801635c:	4654      	mov	r4, sl
 801635e:	2205      	movs	r2, #5
 8016360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016364:	484e      	ldr	r0, [pc, #312]	@ (80164a0 <_svfiprintf_r+0x1e4>)
 8016366:	f7e9 ff53 	bl	8000210 <memchr>
 801636a:	9a04      	ldr	r2, [sp, #16]
 801636c:	b9d8      	cbnz	r0, 80163a6 <_svfiprintf_r+0xea>
 801636e:	06d0      	lsls	r0, r2, #27
 8016370:	bf44      	itt	mi
 8016372:	2320      	movmi	r3, #32
 8016374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016378:	0711      	lsls	r1, r2, #28
 801637a:	bf44      	itt	mi
 801637c:	232b      	movmi	r3, #43	@ 0x2b
 801637e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016382:	f89a 3000 	ldrb.w	r3, [sl]
 8016386:	2b2a      	cmp	r3, #42	@ 0x2a
 8016388:	d015      	beq.n	80163b6 <_svfiprintf_r+0xfa>
 801638a:	9a07      	ldr	r2, [sp, #28]
 801638c:	4654      	mov	r4, sl
 801638e:	2000      	movs	r0, #0
 8016390:	f04f 0c0a 	mov.w	ip, #10
 8016394:	4621      	mov	r1, r4
 8016396:	f811 3b01 	ldrb.w	r3, [r1], #1
 801639a:	3b30      	subs	r3, #48	@ 0x30
 801639c:	2b09      	cmp	r3, #9
 801639e:	d94b      	bls.n	8016438 <_svfiprintf_r+0x17c>
 80163a0:	b1b0      	cbz	r0, 80163d0 <_svfiprintf_r+0x114>
 80163a2:	9207      	str	r2, [sp, #28]
 80163a4:	e014      	b.n	80163d0 <_svfiprintf_r+0x114>
 80163a6:	eba0 0308 	sub.w	r3, r0, r8
 80163aa:	fa09 f303 	lsl.w	r3, r9, r3
 80163ae:	4313      	orrs	r3, r2
 80163b0:	9304      	str	r3, [sp, #16]
 80163b2:	46a2      	mov	sl, r4
 80163b4:	e7d2      	b.n	801635c <_svfiprintf_r+0xa0>
 80163b6:	9b03      	ldr	r3, [sp, #12]
 80163b8:	1d19      	adds	r1, r3, #4
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	9103      	str	r1, [sp, #12]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	bfbb      	ittet	lt
 80163c2:	425b      	neglt	r3, r3
 80163c4:	f042 0202 	orrlt.w	r2, r2, #2
 80163c8:	9307      	strge	r3, [sp, #28]
 80163ca:	9307      	strlt	r3, [sp, #28]
 80163cc:	bfb8      	it	lt
 80163ce:	9204      	strlt	r2, [sp, #16]
 80163d0:	7823      	ldrb	r3, [r4, #0]
 80163d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80163d4:	d10a      	bne.n	80163ec <_svfiprintf_r+0x130>
 80163d6:	7863      	ldrb	r3, [r4, #1]
 80163d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80163da:	d132      	bne.n	8016442 <_svfiprintf_r+0x186>
 80163dc:	9b03      	ldr	r3, [sp, #12]
 80163de:	1d1a      	adds	r2, r3, #4
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	9203      	str	r2, [sp, #12]
 80163e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80163e8:	3402      	adds	r4, #2
 80163ea:	9305      	str	r3, [sp, #20]
 80163ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80164b0 <_svfiprintf_r+0x1f4>
 80163f0:	7821      	ldrb	r1, [r4, #0]
 80163f2:	2203      	movs	r2, #3
 80163f4:	4650      	mov	r0, sl
 80163f6:	f7e9 ff0b 	bl	8000210 <memchr>
 80163fa:	b138      	cbz	r0, 801640c <_svfiprintf_r+0x150>
 80163fc:	9b04      	ldr	r3, [sp, #16]
 80163fe:	eba0 000a 	sub.w	r0, r0, sl
 8016402:	2240      	movs	r2, #64	@ 0x40
 8016404:	4082      	lsls	r2, r0
 8016406:	4313      	orrs	r3, r2
 8016408:	3401      	adds	r4, #1
 801640a:	9304      	str	r3, [sp, #16]
 801640c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016410:	4824      	ldr	r0, [pc, #144]	@ (80164a4 <_svfiprintf_r+0x1e8>)
 8016412:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016416:	2206      	movs	r2, #6
 8016418:	f7e9 fefa 	bl	8000210 <memchr>
 801641c:	2800      	cmp	r0, #0
 801641e:	d036      	beq.n	801648e <_svfiprintf_r+0x1d2>
 8016420:	4b21      	ldr	r3, [pc, #132]	@ (80164a8 <_svfiprintf_r+0x1ec>)
 8016422:	bb1b      	cbnz	r3, 801646c <_svfiprintf_r+0x1b0>
 8016424:	9b03      	ldr	r3, [sp, #12]
 8016426:	3307      	adds	r3, #7
 8016428:	f023 0307 	bic.w	r3, r3, #7
 801642c:	3308      	adds	r3, #8
 801642e:	9303      	str	r3, [sp, #12]
 8016430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016432:	4433      	add	r3, r6
 8016434:	9309      	str	r3, [sp, #36]	@ 0x24
 8016436:	e76a      	b.n	801630e <_svfiprintf_r+0x52>
 8016438:	fb0c 3202 	mla	r2, ip, r2, r3
 801643c:	460c      	mov	r4, r1
 801643e:	2001      	movs	r0, #1
 8016440:	e7a8      	b.n	8016394 <_svfiprintf_r+0xd8>
 8016442:	2300      	movs	r3, #0
 8016444:	3401      	adds	r4, #1
 8016446:	9305      	str	r3, [sp, #20]
 8016448:	4619      	mov	r1, r3
 801644a:	f04f 0c0a 	mov.w	ip, #10
 801644e:	4620      	mov	r0, r4
 8016450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016454:	3a30      	subs	r2, #48	@ 0x30
 8016456:	2a09      	cmp	r2, #9
 8016458:	d903      	bls.n	8016462 <_svfiprintf_r+0x1a6>
 801645a:	2b00      	cmp	r3, #0
 801645c:	d0c6      	beq.n	80163ec <_svfiprintf_r+0x130>
 801645e:	9105      	str	r1, [sp, #20]
 8016460:	e7c4      	b.n	80163ec <_svfiprintf_r+0x130>
 8016462:	fb0c 2101 	mla	r1, ip, r1, r2
 8016466:	4604      	mov	r4, r0
 8016468:	2301      	movs	r3, #1
 801646a:	e7f0      	b.n	801644e <_svfiprintf_r+0x192>
 801646c:	ab03      	add	r3, sp, #12
 801646e:	9300      	str	r3, [sp, #0]
 8016470:	462a      	mov	r2, r5
 8016472:	4b0e      	ldr	r3, [pc, #56]	@ (80164ac <_svfiprintf_r+0x1f0>)
 8016474:	a904      	add	r1, sp, #16
 8016476:	4638      	mov	r0, r7
 8016478:	f7fd fd60 	bl	8013f3c <_printf_float>
 801647c:	1c42      	adds	r2, r0, #1
 801647e:	4606      	mov	r6, r0
 8016480:	d1d6      	bne.n	8016430 <_svfiprintf_r+0x174>
 8016482:	89ab      	ldrh	r3, [r5, #12]
 8016484:	065b      	lsls	r3, r3, #25
 8016486:	f53f af2d 	bmi.w	80162e4 <_svfiprintf_r+0x28>
 801648a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801648c:	e72c      	b.n	80162e8 <_svfiprintf_r+0x2c>
 801648e:	ab03      	add	r3, sp, #12
 8016490:	9300      	str	r3, [sp, #0]
 8016492:	462a      	mov	r2, r5
 8016494:	4b05      	ldr	r3, [pc, #20]	@ (80164ac <_svfiprintf_r+0x1f0>)
 8016496:	a904      	add	r1, sp, #16
 8016498:	4638      	mov	r0, r7
 801649a:	f7fd ffe7 	bl	801446c <_printf_i>
 801649e:	e7ed      	b.n	801647c <_svfiprintf_r+0x1c0>
 80164a0:	0801b010 	.word	0x0801b010
 80164a4:	0801b01a 	.word	0x0801b01a
 80164a8:	08013f3d 	.word	0x08013f3d
 80164ac:	08016205 	.word	0x08016205
 80164b0:	0801b016 	.word	0x0801b016

080164b4 <__sfputc_r>:
 80164b4:	6893      	ldr	r3, [r2, #8]
 80164b6:	3b01      	subs	r3, #1
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	b410      	push	{r4}
 80164bc:	6093      	str	r3, [r2, #8]
 80164be:	da08      	bge.n	80164d2 <__sfputc_r+0x1e>
 80164c0:	6994      	ldr	r4, [r2, #24]
 80164c2:	42a3      	cmp	r3, r4
 80164c4:	db01      	blt.n	80164ca <__sfputc_r+0x16>
 80164c6:	290a      	cmp	r1, #10
 80164c8:	d103      	bne.n	80164d2 <__sfputc_r+0x1e>
 80164ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164ce:	f7fe bab6 	b.w	8014a3e <__swbuf_r>
 80164d2:	6813      	ldr	r3, [r2, #0]
 80164d4:	1c58      	adds	r0, r3, #1
 80164d6:	6010      	str	r0, [r2, #0]
 80164d8:	7019      	strb	r1, [r3, #0]
 80164da:	4608      	mov	r0, r1
 80164dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164e0:	4770      	bx	lr

080164e2 <__sfputs_r>:
 80164e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164e4:	4606      	mov	r6, r0
 80164e6:	460f      	mov	r7, r1
 80164e8:	4614      	mov	r4, r2
 80164ea:	18d5      	adds	r5, r2, r3
 80164ec:	42ac      	cmp	r4, r5
 80164ee:	d101      	bne.n	80164f4 <__sfputs_r+0x12>
 80164f0:	2000      	movs	r0, #0
 80164f2:	e007      	b.n	8016504 <__sfputs_r+0x22>
 80164f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164f8:	463a      	mov	r2, r7
 80164fa:	4630      	mov	r0, r6
 80164fc:	f7ff ffda 	bl	80164b4 <__sfputc_r>
 8016500:	1c43      	adds	r3, r0, #1
 8016502:	d1f3      	bne.n	80164ec <__sfputs_r+0xa>
 8016504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016508 <_vfiprintf_r>:
 8016508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801650c:	460d      	mov	r5, r1
 801650e:	b09d      	sub	sp, #116	@ 0x74
 8016510:	4614      	mov	r4, r2
 8016512:	4698      	mov	r8, r3
 8016514:	4606      	mov	r6, r0
 8016516:	b118      	cbz	r0, 8016520 <_vfiprintf_r+0x18>
 8016518:	6a03      	ldr	r3, [r0, #32]
 801651a:	b90b      	cbnz	r3, 8016520 <_vfiprintf_r+0x18>
 801651c:	f7fe f952 	bl	80147c4 <__sinit>
 8016520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016522:	07d9      	lsls	r1, r3, #31
 8016524:	d405      	bmi.n	8016532 <_vfiprintf_r+0x2a>
 8016526:	89ab      	ldrh	r3, [r5, #12]
 8016528:	059a      	lsls	r2, r3, #22
 801652a:	d402      	bmi.n	8016532 <_vfiprintf_r+0x2a>
 801652c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801652e:	f7fe fb98 	bl	8014c62 <__retarget_lock_acquire_recursive>
 8016532:	89ab      	ldrh	r3, [r5, #12]
 8016534:	071b      	lsls	r3, r3, #28
 8016536:	d501      	bpl.n	801653c <_vfiprintf_r+0x34>
 8016538:	692b      	ldr	r3, [r5, #16]
 801653a:	b99b      	cbnz	r3, 8016564 <_vfiprintf_r+0x5c>
 801653c:	4629      	mov	r1, r5
 801653e:	4630      	mov	r0, r6
 8016540:	f7fe fabc 	bl	8014abc <__swsetup_r>
 8016544:	b170      	cbz	r0, 8016564 <_vfiprintf_r+0x5c>
 8016546:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016548:	07dc      	lsls	r4, r3, #31
 801654a:	d504      	bpl.n	8016556 <_vfiprintf_r+0x4e>
 801654c:	f04f 30ff 	mov.w	r0, #4294967295
 8016550:	b01d      	add	sp, #116	@ 0x74
 8016552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016556:	89ab      	ldrh	r3, [r5, #12]
 8016558:	0598      	lsls	r0, r3, #22
 801655a:	d4f7      	bmi.n	801654c <_vfiprintf_r+0x44>
 801655c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801655e:	f7fe fb81 	bl	8014c64 <__retarget_lock_release_recursive>
 8016562:	e7f3      	b.n	801654c <_vfiprintf_r+0x44>
 8016564:	2300      	movs	r3, #0
 8016566:	9309      	str	r3, [sp, #36]	@ 0x24
 8016568:	2320      	movs	r3, #32
 801656a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801656e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016572:	2330      	movs	r3, #48	@ 0x30
 8016574:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016724 <_vfiprintf_r+0x21c>
 8016578:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801657c:	f04f 0901 	mov.w	r9, #1
 8016580:	4623      	mov	r3, r4
 8016582:	469a      	mov	sl, r3
 8016584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016588:	b10a      	cbz	r2, 801658e <_vfiprintf_r+0x86>
 801658a:	2a25      	cmp	r2, #37	@ 0x25
 801658c:	d1f9      	bne.n	8016582 <_vfiprintf_r+0x7a>
 801658e:	ebba 0b04 	subs.w	fp, sl, r4
 8016592:	d00b      	beq.n	80165ac <_vfiprintf_r+0xa4>
 8016594:	465b      	mov	r3, fp
 8016596:	4622      	mov	r2, r4
 8016598:	4629      	mov	r1, r5
 801659a:	4630      	mov	r0, r6
 801659c:	f7ff ffa1 	bl	80164e2 <__sfputs_r>
 80165a0:	3001      	adds	r0, #1
 80165a2:	f000 80a7 	beq.w	80166f4 <_vfiprintf_r+0x1ec>
 80165a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80165a8:	445a      	add	r2, fp
 80165aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80165ac:	f89a 3000 	ldrb.w	r3, [sl]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	f000 809f 	beq.w	80166f4 <_vfiprintf_r+0x1ec>
 80165b6:	2300      	movs	r3, #0
 80165b8:	f04f 32ff 	mov.w	r2, #4294967295
 80165bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165c0:	f10a 0a01 	add.w	sl, sl, #1
 80165c4:	9304      	str	r3, [sp, #16]
 80165c6:	9307      	str	r3, [sp, #28]
 80165c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80165cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80165ce:	4654      	mov	r4, sl
 80165d0:	2205      	movs	r2, #5
 80165d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165d6:	4853      	ldr	r0, [pc, #332]	@ (8016724 <_vfiprintf_r+0x21c>)
 80165d8:	f7e9 fe1a 	bl	8000210 <memchr>
 80165dc:	9a04      	ldr	r2, [sp, #16]
 80165de:	b9d8      	cbnz	r0, 8016618 <_vfiprintf_r+0x110>
 80165e0:	06d1      	lsls	r1, r2, #27
 80165e2:	bf44      	itt	mi
 80165e4:	2320      	movmi	r3, #32
 80165e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80165ea:	0713      	lsls	r3, r2, #28
 80165ec:	bf44      	itt	mi
 80165ee:	232b      	movmi	r3, #43	@ 0x2b
 80165f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80165f4:	f89a 3000 	ldrb.w	r3, [sl]
 80165f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80165fa:	d015      	beq.n	8016628 <_vfiprintf_r+0x120>
 80165fc:	9a07      	ldr	r2, [sp, #28]
 80165fe:	4654      	mov	r4, sl
 8016600:	2000      	movs	r0, #0
 8016602:	f04f 0c0a 	mov.w	ip, #10
 8016606:	4621      	mov	r1, r4
 8016608:	f811 3b01 	ldrb.w	r3, [r1], #1
 801660c:	3b30      	subs	r3, #48	@ 0x30
 801660e:	2b09      	cmp	r3, #9
 8016610:	d94b      	bls.n	80166aa <_vfiprintf_r+0x1a2>
 8016612:	b1b0      	cbz	r0, 8016642 <_vfiprintf_r+0x13a>
 8016614:	9207      	str	r2, [sp, #28]
 8016616:	e014      	b.n	8016642 <_vfiprintf_r+0x13a>
 8016618:	eba0 0308 	sub.w	r3, r0, r8
 801661c:	fa09 f303 	lsl.w	r3, r9, r3
 8016620:	4313      	orrs	r3, r2
 8016622:	9304      	str	r3, [sp, #16]
 8016624:	46a2      	mov	sl, r4
 8016626:	e7d2      	b.n	80165ce <_vfiprintf_r+0xc6>
 8016628:	9b03      	ldr	r3, [sp, #12]
 801662a:	1d19      	adds	r1, r3, #4
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	9103      	str	r1, [sp, #12]
 8016630:	2b00      	cmp	r3, #0
 8016632:	bfbb      	ittet	lt
 8016634:	425b      	neglt	r3, r3
 8016636:	f042 0202 	orrlt.w	r2, r2, #2
 801663a:	9307      	strge	r3, [sp, #28]
 801663c:	9307      	strlt	r3, [sp, #28]
 801663e:	bfb8      	it	lt
 8016640:	9204      	strlt	r2, [sp, #16]
 8016642:	7823      	ldrb	r3, [r4, #0]
 8016644:	2b2e      	cmp	r3, #46	@ 0x2e
 8016646:	d10a      	bne.n	801665e <_vfiprintf_r+0x156>
 8016648:	7863      	ldrb	r3, [r4, #1]
 801664a:	2b2a      	cmp	r3, #42	@ 0x2a
 801664c:	d132      	bne.n	80166b4 <_vfiprintf_r+0x1ac>
 801664e:	9b03      	ldr	r3, [sp, #12]
 8016650:	1d1a      	adds	r2, r3, #4
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	9203      	str	r2, [sp, #12]
 8016656:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801665a:	3402      	adds	r4, #2
 801665c:	9305      	str	r3, [sp, #20]
 801665e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016734 <_vfiprintf_r+0x22c>
 8016662:	7821      	ldrb	r1, [r4, #0]
 8016664:	2203      	movs	r2, #3
 8016666:	4650      	mov	r0, sl
 8016668:	f7e9 fdd2 	bl	8000210 <memchr>
 801666c:	b138      	cbz	r0, 801667e <_vfiprintf_r+0x176>
 801666e:	9b04      	ldr	r3, [sp, #16]
 8016670:	eba0 000a 	sub.w	r0, r0, sl
 8016674:	2240      	movs	r2, #64	@ 0x40
 8016676:	4082      	lsls	r2, r0
 8016678:	4313      	orrs	r3, r2
 801667a:	3401      	adds	r4, #1
 801667c:	9304      	str	r3, [sp, #16]
 801667e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016682:	4829      	ldr	r0, [pc, #164]	@ (8016728 <_vfiprintf_r+0x220>)
 8016684:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016688:	2206      	movs	r2, #6
 801668a:	f7e9 fdc1 	bl	8000210 <memchr>
 801668e:	2800      	cmp	r0, #0
 8016690:	d03f      	beq.n	8016712 <_vfiprintf_r+0x20a>
 8016692:	4b26      	ldr	r3, [pc, #152]	@ (801672c <_vfiprintf_r+0x224>)
 8016694:	bb1b      	cbnz	r3, 80166de <_vfiprintf_r+0x1d6>
 8016696:	9b03      	ldr	r3, [sp, #12]
 8016698:	3307      	adds	r3, #7
 801669a:	f023 0307 	bic.w	r3, r3, #7
 801669e:	3308      	adds	r3, #8
 80166a0:	9303      	str	r3, [sp, #12]
 80166a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166a4:	443b      	add	r3, r7
 80166a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80166a8:	e76a      	b.n	8016580 <_vfiprintf_r+0x78>
 80166aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80166ae:	460c      	mov	r4, r1
 80166b0:	2001      	movs	r0, #1
 80166b2:	e7a8      	b.n	8016606 <_vfiprintf_r+0xfe>
 80166b4:	2300      	movs	r3, #0
 80166b6:	3401      	adds	r4, #1
 80166b8:	9305      	str	r3, [sp, #20]
 80166ba:	4619      	mov	r1, r3
 80166bc:	f04f 0c0a 	mov.w	ip, #10
 80166c0:	4620      	mov	r0, r4
 80166c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166c6:	3a30      	subs	r2, #48	@ 0x30
 80166c8:	2a09      	cmp	r2, #9
 80166ca:	d903      	bls.n	80166d4 <_vfiprintf_r+0x1cc>
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d0c6      	beq.n	801665e <_vfiprintf_r+0x156>
 80166d0:	9105      	str	r1, [sp, #20]
 80166d2:	e7c4      	b.n	801665e <_vfiprintf_r+0x156>
 80166d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80166d8:	4604      	mov	r4, r0
 80166da:	2301      	movs	r3, #1
 80166dc:	e7f0      	b.n	80166c0 <_vfiprintf_r+0x1b8>
 80166de:	ab03      	add	r3, sp, #12
 80166e0:	9300      	str	r3, [sp, #0]
 80166e2:	462a      	mov	r2, r5
 80166e4:	4b12      	ldr	r3, [pc, #72]	@ (8016730 <_vfiprintf_r+0x228>)
 80166e6:	a904      	add	r1, sp, #16
 80166e8:	4630      	mov	r0, r6
 80166ea:	f7fd fc27 	bl	8013f3c <_printf_float>
 80166ee:	4607      	mov	r7, r0
 80166f0:	1c78      	adds	r0, r7, #1
 80166f2:	d1d6      	bne.n	80166a2 <_vfiprintf_r+0x19a>
 80166f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80166f6:	07d9      	lsls	r1, r3, #31
 80166f8:	d405      	bmi.n	8016706 <_vfiprintf_r+0x1fe>
 80166fa:	89ab      	ldrh	r3, [r5, #12]
 80166fc:	059a      	lsls	r2, r3, #22
 80166fe:	d402      	bmi.n	8016706 <_vfiprintf_r+0x1fe>
 8016700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016702:	f7fe faaf 	bl	8014c64 <__retarget_lock_release_recursive>
 8016706:	89ab      	ldrh	r3, [r5, #12]
 8016708:	065b      	lsls	r3, r3, #25
 801670a:	f53f af1f 	bmi.w	801654c <_vfiprintf_r+0x44>
 801670e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016710:	e71e      	b.n	8016550 <_vfiprintf_r+0x48>
 8016712:	ab03      	add	r3, sp, #12
 8016714:	9300      	str	r3, [sp, #0]
 8016716:	462a      	mov	r2, r5
 8016718:	4b05      	ldr	r3, [pc, #20]	@ (8016730 <_vfiprintf_r+0x228>)
 801671a:	a904      	add	r1, sp, #16
 801671c:	4630      	mov	r0, r6
 801671e:	f7fd fea5 	bl	801446c <_printf_i>
 8016722:	e7e4      	b.n	80166ee <_vfiprintf_r+0x1e6>
 8016724:	0801b010 	.word	0x0801b010
 8016728:	0801b01a 	.word	0x0801b01a
 801672c:	08013f3d 	.word	0x08013f3d
 8016730:	080164e3 	.word	0x080164e3
 8016734:	0801b016 	.word	0x0801b016

08016738 <__sflush_r>:
 8016738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801673c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016740:	0716      	lsls	r6, r2, #28
 8016742:	4605      	mov	r5, r0
 8016744:	460c      	mov	r4, r1
 8016746:	d454      	bmi.n	80167f2 <__sflush_r+0xba>
 8016748:	684b      	ldr	r3, [r1, #4]
 801674a:	2b00      	cmp	r3, #0
 801674c:	dc02      	bgt.n	8016754 <__sflush_r+0x1c>
 801674e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016750:	2b00      	cmp	r3, #0
 8016752:	dd48      	ble.n	80167e6 <__sflush_r+0xae>
 8016754:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016756:	2e00      	cmp	r6, #0
 8016758:	d045      	beq.n	80167e6 <__sflush_r+0xae>
 801675a:	2300      	movs	r3, #0
 801675c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016760:	682f      	ldr	r7, [r5, #0]
 8016762:	6a21      	ldr	r1, [r4, #32]
 8016764:	602b      	str	r3, [r5, #0]
 8016766:	d030      	beq.n	80167ca <__sflush_r+0x92>
 8016768:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801676a:	89a3      	ldrh	r3, [r4, #12]
 801676c:	0759      	lsls	r1, r3, #29
 801676e:	d505      	bpl.n	801677c <__sflush_r+0x44>
 8016770:	6863      	ldr	r3, [r4, #4]
 8016772:	1ad2      	subs	r2, r2, r3
 8016774:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8016776:	b10b      	cbz	r3, 801677c <__sflush_r+0x44>
 8016778:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801677a:	1ad2      	subs	r2, r2, r3
 801677c:	2300      	movs	r3, #0
 801677e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016780:	6a21      	ldr	r1, [r4, #32]
 8016782:	4628      	mov	r0, r5
 8016784:	47b0      	blx	r6
 8016786:	1c43      	adds	r3, r0, #1
 8016788:	89a3      	ldrh	r3, [r4, #12]
 801678a:	d106      	bne.n	801679a <__sflush_r+0x62>
 801678c:	6829      	ldr	r1, [r5, #0]
 801678e:	291d      	cmp	r1, #29
 8016790:	d82b      	bhi.n	80167ea <__sflush_r+0xb2>
 8016792:	4a2a      	ldr	r2, [pc, #168]	@ (801683c <__sflush_r+0x104>)
 8016794:	410a      	asrs	r2, r1
 8016796:	07d6      	lsls	r6, r2, #31
 8016798:	d427      	bmi.n	80167ea <__sflush_r+0xb2>
 801679a:	2200      	movs	r2, #0
 801679c:	6062      	str	r2, [r4, #4]
 801679e:	04d9      	lsls	r1, r3, #19
 80167a0:	6922      	ldr	r2, [r4, #16]
 80167a2:	6022      	str	r2, [r4, #0]
 80167a4:	d504      	bpl.n	80167b0 <__sflush_r+0x78>
 80167a6:	1c42      	adds	r2, r0, #1
 80167a8:	d101      	bne.n	80167ae <__sflush_r+0x76>
 80167aa:	682b      	ldr	r3, [r5, #0]
 80167ac:	b903      	cbnz	r3, 80167b0 <__sflush_r+0x78>
 80167ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80167b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80167b2:	602f      	str	r7, [r5, #0]
 80167b4:	b1b9      	cbz	r1, 80167e6 <__sflush_r+0xae>
 80167b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80167ba:	4299      	cmp	r1, r3
 80167bc:	d002      	beq.n	80167c4 <__sflush_r+0x8c>
 80167be:	4628      	mov	r0, r5
 80167c0:	f7ff f89e 	bl	8015900 <_free_r>
 80167c4:	2300      	movs	r3, #0
 80167c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80167c8:	e00d      	b.n	80167e6 <__sflush_r+0xae>
 80167ca:	2301      	movs	r3, #1
 80167cc:	4628      	mov	r0, r5
 80167ce:	47b0      	blx	r6
 80167d0:	4602      	mov	r2, r0
 80167d2:	1c50      	adds	r0, r2, #1
 80167d4:	d1c9      	bne.n	801676a <__sflush_r+0x32>
 80167d6:	682b      	ldr	r3, [r5, #0]
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d0c6      	beq.n	801676a <__sflush_r+0x32>
 80167dc:	2b1d      	cmp	r3, #29
 80167de:	d001      	beq.n	80167e4 <__sflush_r+0xac>
 80167e0:	2b16      	cmp	r3, #22
 80167e2:	d11e      	bne.n	8016822 <__sflush_r+0xea>
 80167e4:	602f      	str	r7, [r5, #0]
 80167e6:	2000      	movs	r0, #0
 80167e8:	e022      	b.n	8016830 <__sflush_r+0xf8>
 80167ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80167ee:	b21b      	sxth	r3, r3
 80167f0:	e01b      	b.n	801682a <__sflush_r+0xf2>
 80167f2:	690f      	ldr	r7, [r1, #16]
 80167f4:	2f00      	cmp	r7, #0
 80167f6:	d0f6      	beq.n	80167e6 <__sflush_r+0xae>
 80167f8:	0793      	lsls	r3, r2, #30
 80167fa:	680e      	ldr	r6, [r1, #0]
 80167fc:	bf08      	it	eq
 80167fe:	694b      	ldreq	r3, [r1, #20]
 8016800:	600f      	str	r7, [r1, #0]
 8016802:	bf18      	it	ne
 8016804:	2300      	movne	r3, #0
 8016806:	eba6 0807 	sub.w	r8, r6, r7
 801680a:	608b      	str	r3, [r1, #8]
 801680c:	f1b8 0f00 	cmp.w	r8, #0
 8016810:	dde9      	ble.n	80167e6 <__sflush_r+0xae>
 8016812:	6a21      	ldr	r1, [r4, #32]
 8016814:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016816:	4643      	mov	r3, r8
 8016818:	463a      	mov	r2, r7
 801681a:	4628      	mov	r0, r5
 801681c:	47b0      	blx	r6
 801681e:	2800      	cmp	r0, #0
 8016820:	dc08      	bgt.n	8016834 <__sflush_r+0xfc>
 8016822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801682a:	81a3      	strh	r3, [r4, #12]
 801682c:	f04f 30ff 	mov.w	r0, #4294967295
 8016830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016834:	4407      	add	r7, r0
 8016836:	eba8 0800 	sub.w	r8, r8, r0
 801683a:	e7e7      	b.n	801680c <__sflush_r+0xd4>
 801683c:	dfbffffe 	.word	0xdfbffffe

08016840 <_fflush_r>:
 8016840:	b538      	push	{r3, r4, r5, lr}
 8016842:	690b      	ldr	r3, [r1, #16]
 8016844:	4605      	mov	r5, r0
 8016846:	460c      	mov	r4, r1
 8016848:	b913      	cbnz	r3, 8016850 <_fflush_r+0x10>
 801684a:	2500      	movs	r5, #0
 801684c:	4628      	mov	r0, r5
 801684e:	bd38      	pop	{r3, r4, r5, pc}
 8016850:	b118      	cbz	r0, 801685a <_fflush_r+0x1a>
 8016852:	6a03      	ldr	r3, [r0, #32]
 8016854:	b90b      	cbnz	r3, 801685a <_fflush_r+0x1a>
 8016856:	f7fd ffb5 	bl	80147c4 <__sinit>
 801685a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d0f3      	beq.n	801684a <_fflush_r+0xa>
 8016862:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016864:	07d0      	lsls	r0, r2, #31
 8016866:	d404      	bmi.n	8016872 <_fflush_r+0x32>
 8016868:	0599      	lsls	r1, r3, #22
 801686a:	d402      	bmi.n	8016872 <_fflush_r+0x32>
 801686c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801686e:	f7fe f9f8 	bl	8014c62 <__retarget_lock_acquire_recursive>
 8016872:	4628      	mov	r0, r5
 8016874:	4621      	mov	r1, r4
 8016876:	f7ff ff5f 	bl	8016738 <__sflush_r>
 801687a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801687c:	07da      	lsls	r2, r3, #31
 801687e:	4605      	mov	r5, r0
 8016880:	d4e4      	bmi.n	801684c <_fflush_r+0xc>
 8016882:	89a3      	ldrh	r3, [r4, #12]
 8016884:	059b      	lsls	r3, r3, #22
 8016886:	d4e1      	bmi.n	801684c <_fflush_r+0xc>
 8016888:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801688a:	f7fe f9eb 	bl	8014c64 <__retarget_lock_release_recursive>
 801688e:	e7dd      	b.n	801684c <_fflush_r+0xc>

08016890 <__swhatbuf_r>:
 8016890:	b570      	push	{r4, r5, r6, lr}
 8016892:	460c      	mov	r4, r1
 8016894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016898:	2900      	cmp	r1, #0
 801689a:	b096      	sub	sp, #88	@ 0x58
 801689c:	4615      	mov	r5, r2
 801689e:	461e      	mov	r6, r3
 80168a0:	da0d      	bge.n	80168be <__swhatbuf_r+0x2e>
 80168a2:	89a3      	ldrh	r3, [r4, #12]
 80168a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80168a8:	f04f 0100 	mov.w	r1, #0
 80168ac:	bf14      	ite	ne
 80168ae:	2340      	movne	r3, #64	@ 0x40
 80168b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80168b4:	2000      	movs	r0, #0
 80168b6:	6031      	str	r1, [r6, #0]
 80168b8:	602b      	str	r3, [r5, #0]
 80168ba:	b016      	add	sp, #88	@ 0x58
 80168bc:	bd70      	pop	{r4, r5, r6, pc}
 80168be:	466a      	mov	r2, sp
 80168c0:	f000 f862 	bl	8016988 <_fstat_r>
 80168c4:	2800      	cmp	r0, #0
 80168c6:	dbec      	blt.n	80168a2 <__swhatbuf_r+0x12>
 80168c8:	9901      	ldr	r1, [sp, #4]
 80168ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80168ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80168d2:	4259      	negs	r1, r3
 80168d4:	4159      	adcs	r1, r3
 80168d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80168da:	e7eb      	b.n	80168b4 <__swhatbuf_r+0x24>

080168dc <__smakebuf_r>:
 80168dc:	898b      	ldrh	r3, [r1, #12]
 80168de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80168e0:	079d      	lsls	r5, r3, #30
 80168e2:	4606      	mov	r6, r0
 80168e4:	460c      	mov	r4, r1
 80168e6:	d507      	bpl.n	80168f8 <__smakebuf_r+0x1c>
 80168e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80168ec:	6023      	str	r3, [r4, #0]
 80168ee:	6123      	str	r3, [r4, #16]
 80168f0:	2301      	movs	r3, #1
 80168f2:	6163      	str	r3, [r4, #20]
 80168f4:	b003      	add	sp, #12
 80168f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168f8:	ab01      	add	r3, sp, #4
 80168fa:	466a      	mov	r2, sp
 80168fc:	f7ff ffc8 	bl	8016890 <__swhatbuf_r>
 8016900:	9f00      	ldr	r7, [sp, #0]
 8016902:	4605      	mov	r5, r0
 8016904:	4639      	mov	r1, r7
 8016906:	4630      	mov	r0, r6
 8016908:	f7ff f86e 	bl	80159e8 <_malloc_r>
 801690c:	b948      	cbnz	r0, 8016922 <__smakebuf_r+0x46>
 801690e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016912:	059a      	lsls	r2, r3, #22
 8016914:	d4ee      	bmi.n	80168f4 <__smakebuf_r+0x18>
 8016916:	f023 0303 	bic.w	r3, r3, #3
 801691a:	f043 0302 	orr.w	r3, r3, #2
 801691e:	81a3      	strh	r3, [r4, #12]
 8016920:	e7e2      	b.n	80168e8 <__smakebuf_r+0xc>
 8016922:	89a3      	ldrh	r3, [r4, #12]
 8016924:	6020      	str	r0, [r4, #0]
 8016926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801692a:	81a3      	strh	r3, [r4, #12]
 801692c:	9b01      	ldr	r3, [sp, #4]
 801692e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016932:	b15b      	cbz	r3, 801694c <__smakebuf_r+0x70>
 8016934:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016938:	4630      	mov	r0, r6
 801693a:	f000 f837 	bl	80169ac <_isatty_r>
 801693e:	b128      	cbz	r0, 801694c <__smakebuf_r+0x70>
 8016940:	89a3      	ldrh	r3, [r4, #12]
 8016942:	f023 0303 	bic.w	r3, r3, #3
 8016946:	f043 0301 	orr.w	r3, r3, #1
 801694a:	81a3      	strh	r3, [r4, #12]
 801694c:	89a3      	ldrh	r3, [r4, #12]
 801694e:	431d      	orrs	r5, r3
 8016950:	81a5      	strh	r5, [r4, #12]
 8016952:	e7cf      	b.n	80168f4 <__smakebuf_r+0x18>

08016954 <memmove>:
 8016954:	4288      	cmp	r0, r1
 8016956:	b510      	push	{r4, lr}
 8016958:	eb01 0402 	add.w	r4, r1, r2
 801695c:	d902      	bls.n	8016964 <memmove+0x10>
 801695e:	4284      	cmp	r4, r0
 8016960:	4623      	mov	r3, r4
 8016962:	d807      	bhi.n	8016974 <memmove+0x20>
 8016964:	1e43      	subs	r3, r0, #1
 8016966:	42a1      	cmp	r1, r4
 8016968:	d008      	beq.n	801697c <memmove+0x28>
 801696a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801696e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016972:	e7f8      	b.n	8016966 <memmove+0x12>
 8016974:	4402      	add	r2, r0
 8016976:	4601      	mov	r1, r0
 8016978:	428a      	cmp	r2, r1
 801697a:	d100      	bne.n	801697e <memmove+0x2a>
 801697c:	bd10      	pop	{r4, pc}
 801697e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016982:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016986:	e7f7      	b.n	8016978 <memmove+0x24>

08016988 <_fstat_r>:
 8016988:	b538      	push	{r3, r4, r5, lr}
 801698a:	4d07      	ldr	r5, [pc, #28]	@ (80169a8 <_fstat_r+0x20>)
 801698c:	2300      	movs	r3, #0
 801698e:	4604      	mov	r4, r0
 8016990:	4608      	mov	r0, r1
 8016992:	4611      	mov	r1, r2
 8016994:	602b      	str	r3, [r5, #0]
 8016996:	f7ee fd31 	bl	80053fc <_fstat>
 801699a:	1c43      	adds	r3, r0, #1
 801699c:	d102      	bne.n	80169a4 <_fstat_r+0x1c>
 801699e:	682b      	ldr	r3, [r5, #0]
 80169a0:	b103      	cbz	r3, 80169a4 <_fstat_r+0x1c>
 80169a2:	6023      	str	r3, [r4, #0]
 80169a4:	bd38      	pop	{r3, r4, r5, pc}
 80169a6:	bf00      	nop
 80169a8:	20006728 	.word	0x20006728

080169ac <_isatty_r>:
 80169ac:	b538      	push	{r3, r4, r5, lr}
 80169ae:	4d06      	ldr	r5, [pc, #24]	@ (80169c8 <_isatty_r+0x1c>)
 80169b0:	2300      	movs	r3, #0
 80169b2:	4604      	mov	r4, r0
 80169b4:	4608      	mov	r0, r1
 80169b6:	602b      	str	r3, [r5, #0]
 80169b8:	f7ee fd30 	bl	800541c <_isatty>
 80169bc:	1c43      	adds	r3, r0, #1
 80169be:	d102      	bne.n	80169c6 <_isatty_r+0x1a>
 80169c0:	682b      	ldr	r3, [r5, #0]
 80169c2:	b103      	cbz	r3, 80169c6 <_isatty_r+0x1a>
 80169c4:	6023      	str	r3, [r4, #0]
 80169c6:	bd38      	pop	{r3, r4, r5, pc}
 80169c8:	20006728 	.word	0x20006728

080169cc <_sbrk_r>:
 80169cc:	b538      	push	{r3, r4, r5, lr}
 80169ce:	4d06      	ldr	r5, [pc, #24]	@ (80169e8 <_sbrk_r+0x1c>)
 80169d0:	2300      	movs	r3, #0
 80169d2:	4604      	mov	r4, r0
 80169d4:	4608      	mov	r0, r1
 80169d6:	602b      	str	r3, [r5, #0]
 80169d8:	f7ee fd38 	bl	800544c <_sbrk>
 80169dc:	1c43      	adds	r3, r0, #1
 80169de:	d102      	bne.n	80169e6 <_sbrk_r+0x1a>
 80169e0:	682b      	ldr	r3, [r5, #0]
 80169e2:	b103      	cbz	r3, 80169e6 <_sbrk_r+0x1a>
 80169e4:	6023      	str	r3, [r4, #0]
 80169e6:	bd38      	pop	{r3, r4, r5, pc}
 80169e8:	20006728 	.word	0x20006728

080169ec <memcpy>:
 80169ec:	440a      	add	r2, r1
 80169ee:	4291      	cmp	r1, r2
 80169f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80169f4:	d100      	bne.n	80169f8 <memcpy+0xc>
 80169f6:	4770      	bx	lr
 80169f8:	b510      	push	{r4, lr}
 80169fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80169fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a02:	4291      	cmp	r1, r2
 8016a04:	d1f9      	bne.n	80169fa <memcpy+0xe>
 8016a06:	bd10      	pop	{r4, pc}

08016a08 <__assert_func>:
 8016a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a0a:	4614      	mov	r4, r2
 8016a0c:	461a      	mov	r2, r3
 8016a0e:	4b09      	ldr	r3, [pc, #36]	@ (8016a34 <__assert_func+0x2c>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	4605      	mov	r5, r0
 8016a14:	68d8      	ldr	r0, [r3, #12]
 8016a16:	b954      	cbnz	r4, 8016a2e <__assert_func+0x26>
 8016a18:	4b07      	ldr	r3, [pc, #28]	@ (8016a38 <__assert_func+0x30>)
 8016a1a:	461c      	mov	r4, r3
 8016a1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016a20:	9100      	str	r1, [sp, #0]
 8016a22:	462b      	mov	r3, r5
 8016a24:	4905      	ldr	r1, [pc, #20]	@ (8016a3c <__assert_func+0x34>)
 8016a26:	f000 f86f 	bl	8016b08 <fiprintf>
 8016a2a:	f000 f87f 	bl	8016b2c <abort>
 8016a2e:	4b04      	ldr	r3, [pc, #16]	@ (8016a40 <__assert_func+0x38>)
 8016a30:	e7f4      	b.n	8016a1c <__assert_func+0x14>
 8016a32:	bf00      	nop
 8016a34:	20004f34 	.word	0x20004f34
 8016a38:	0801b066 	.word	0x0801b066
 8016a3c:	0801b038 	.word	0x0801b038
 8016a40:	0801b02b 	.word	0x0801b02b

08016a44 <_calloc_r>:
 8016a44:	b570      	push	{r4, r5, r6, lr}
 8016a46:	fba1 5402 	umull	r5, r4, r1, r2
 8016a4a:	b93c      	cbnz	r4, 8016a5c <_calloc_r+0x18>
 8016a4c:	4629      	mov	r1, r5
 8016a4e:	f7fe ffcb 	bl	80159e8 <_malloc_r>
 8016a52:	4606      	mov	r6, r0
 8016a54:	b928      	cbnz	r0, 8016a62 <_calloc_r+0x1e>
 8016a56:	2600      	movs	r6, #0
 8016a58:	4630      	mov	r0, r6
 8016a5a:	bd70      	pop	{r4, r5, r6, pc}
 8016a5c:	220c      	movs	r2, #12
 8016a5e:	6002      	str	r2, [r0, #0]
 8016a60:	e7f9      	b.n	8016a56 <_calloc_r+0x12>
 8016a62:	462a      	mov	r2, r5
 8016a64:	4621      	mov	r1, r4
 8016a66:	f7fe f87f 	bl	8014b68 <memset>
 8016a6a:	e7f5      	b.n	8016a58 <_calloc_r+0x14>

08016a6c <__ascii_mbtowc>:
 8016a6c:	b082      	sub	sp, #8
 8016a6e:	b901      	cbnz	r1, 8016a72 <__ascii_mbtowc+0x6>
 8016a70:	a901      	add	r1, sp, #4
 8016a72:	b142      	cbz	r2, 8016a86 <__ascii_mbtowc+0x1a>
 8016a74:	b14b      	cbz	r3, 8016a8a <__ascii_mbtowc+0x1e>
 8016a76:	7813      	ldrb	r3, [r2, #0]
 8016a78:	600b      	str	r3, [r1, #0]
 8016a7a:	7812      	ldrb	r2, [r2, #0]
 8016a7c:	1e10      	subs	r0, r2, #0
 8016a7e:	bf18      	it	ne
 8016a80:	2001      	movne	r0, #1
 8016a82:	b002      	add	sp, #8
 8016a84:	4770      	bx	lr
 8016a86:	4610      	mov	r0, r2
 8016a88:	e7fb      	b.n	8016a82 <__ascii_mbtowc+0x16>
 8016a8a:	f06f 0001 	mvn.w	r0, #1
 8016a8e:	e7f8      	b.n	8016a82 <__ascii_mbtowc+0x16>

08016a90 <_realloc_r>:
 8016a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a94:	4680      	mov	r8, r0
 8016a96:	4615      	mov	r5, r2
 8016a98:	460c      	mov	r4, r1
 8016a9a:	b921      	cbnz	r1, 8016aa6 <_realloc_r+0x16>
 8016a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016aa0:	4611      	mov	r1, r2
 8016aa2:	f7fe bfa1 	b.w	80159e8 <_malloc_r>
 8016aa6:	b92a      	cbnz	r2, 8016ab4 <_realloc_r+0x24>
 8016aa8:	f7fe ff2a 	bl	8015900 <_free_r>
 8016aac:	2400      	movs	r4, #0
 8016aae:	4620      	mov	r0, r4
 8016ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ab4:	f000 f841 	bl	8016b3a <_malloc_usable_size_r>
 8016ab8:	4285      	cmp	r5, r0
 8016aba:	4606      	mov	r6, r0
 8016abc:	d802      	bhi.n	8016ac4 <_realloc_r+0x34>
 8016abe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016ac2:	d8f4      	bhi.n	8016aae <_realloc_r+0x1e>
 8016ac4:	4629      	mov	r1, r5
 8016ac6:	4640      	mov	r0, r8
 8016ac8:	f7fe ff8e 	bl	80159e8 <_malloc_r>
 8016acc:	4607      	mov	r7, r0
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	d0ec      	beq.n	8016aac <_realloc_r+0x1c>
 8016ad2:	42b5      	cmp	r5, r6
 8016ad4:	462a      	mov	r2, r5
 8016ad6:	4621      	mov	r1, r4
 8016ad8:	bf28      	it	cs
 8016ada:	4632      	movcs	r2, r6
 8016adc:	f7ff ff86 	bl	80169ec <memcpy>
 8016ae0:	4621      	mov	r1, r4
 8016ae2:	4640      	mov	r0, r8
 8016ae4:	f7fe ff0c 	bl	8015900 <_free_r>
 8016ae8:	463c      	mov	r4, r7
 8016aea:	e7e0      	b.n	8016aae <_realloc_r+0x1e>

08016aec <__ascii_wctomb>:
 8016aec:	4603      	mov	r3, r0
 8016aee:	4608      	mov	r0, r1
 8016af0:	b141      	cbz	r1, 8016b04 <__ascii_wctomb+0x18>
 8016af2:	2aff      	cmp	r2, #255	@ 0xff
 8016af4:	d904      	bls.n	8016b00 <__ascii_wctomb+0x14>
 8016af6:	228a      	movs	r2, #138	@ 0x8a
 8016af8:	601a      	str	r2, [r3, #0]
 8016afa:	f04f 30ff 	mov.w	r0, #4294967295
 8016afe:	4770      	bx	lr
 8016b00:	700a      	strb	r2, [r1, #0]
 8016b02:	2001      	movs	r0, #1
 8016b04:	4770      	bx	lr
	...

08016b08 <fiprintf>:
 8016b08:	b40e      	push	{r1, r2, r3}
 8016b0a:	b503      	push	{r0, r1, lr}
 8016b0c:	4601      	mov	r1, r0
 8016b0e:	ab03      	add	r3, sp, #12
 8016b10:	4805      	ldr	r0, [pc, #20]	@ (8016b28 <fiprintf+0x20>)
 8016b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b16:	6800      	ldr	r0, [r0, #0]
 8016b18:	9301      	str	r3, [sp, #4]
 8016b1a:	f7ff fcf5 	bl	8016508 <_vfiprintf_r>
 8016b1e:	b002      	add	sp, #8
 8016b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b24:	b003      	add	sp, #12
 8016b26:	4770      	bx	lr
 8016b28:	20004f34 	.word	0x20004f34

08016b2c <abort>:
 8016b2c:	b508      	push	{r3, lr}
 8016b2e:	2006      	movs	r0, #6
 8016b30:	f000 f834 	bl	8016b9c <raise>
 8016b34:	2001      	movs	r0, #1
 8016b36:	f7ee fc11 	bl	800535c <_exit>

08016b3a <_malloc_usable_size_r>:
 8016b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b3e:	1f18      	subs	r0, r3, #4
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	bfbc      	itt	lt
 8016b44:	580b      	ldrlt	r3, [r1, r0]
 8016b46:	18c0      	addlt	r0, r0, r3
 8016b48:	4770      	bx	lr

08016b4a <_raise_r>:
 8016b4a:	291f      	cmp	r1, #31
 8016b4c:	b538      	push	{r3, r4, r5, lr}
 8016b4e:	4605      	mov	r5, r0
 8016b50:	460c      	mov	r4, r1
 8016b52:	d904      	bls.n	8016b5e <_raise_r+0x14>
 8016b54:	2316      	movs	r3, #22
 8016b56:	6003      	str	r3, [r0, #0]
 8016b58:	f04f 30ff 	mov.w	r0, #4294967295
 8016b5c:	bd38      	pop	{r3, r4, r5, pc}
 8016b5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016b60:	b112      	cbz	r2, 8016b68 <_raise_r+0x1e>
 8016b62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016b66:	b94b      	cbnz	r3, 8016b7c <_raise_r+0x32>
 8016b68:	4628      	mov	r0, r5
 8016b6a:	f000 f831 	bl	8016bd0 <_getpid_r>
 8016b6e:	4622      	mov	r2, r4
 8016b70:	4601      	mov	r1, r0
 8016b72:	4628      	mov	r0, r5
 8016b74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b78:	f000 b818 	b.w	8016bac <_kill_r>
 8016b7c:	2b01      	cmp	r3, #1
 8016b7e:	d00a      	beq.n	8016b96 <_raise_r+0x4c>
 8016b80:	1c59      	adds	r1, r3, #1
 8016b82:	d103      	bne.n	8016b8c <_raise_r+0x42>
 8016b84:	2316      	movs	r3, #22
 8016b86:	6003      	str	r3, [r0, #0]
 8016b88:	2001      	movs	r0, #1
 8016b8a:	e7e7      	b.n	8016b5c <_raise_r+0x12>
 8016b8c:	2100      	movs	r1, #0
 8016b8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8016b92:	4620      	mov	r0, r4
 8016b94:	4798      	blx	r3
 8016b96:	2000      	movs	r0, #0
 8016b98:	e7e0      	b.n	8016b5c <_raise_r+0x12>
	...

08016b9c <raise>:
 8016b9c:	4b02      	ldr	r3, [pc, #8]	@ (8016ba8 <raise+0xc>)
 8016b9e:	4601      	mov	r1, r0
 8016ba0:	6818      	ldr	r0, [r3, #0]
 8016ba2:	f7ff bfd2 	b.w	8016b4a <_raise_r>
 8016ba6:	bf00      	nop
 8016ba8:	20004f34 	.word	0x20004f34

08016bac <_kill_r>:
 8016bac:	b538      	push	{r3, r4, r5, lr}
 8016bae:	4d07      	ldr	r5, [pc, #28]	@ (8016bcc <_kill_r+0x20>)
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	4604      	mov	r4, r0
 8016bb4:	4608      	mov	r0, r1
 8016bb6:	4611      	mov	r1, r2
 8016bb8:	602b      	str	r3, [r5, #0]
 8016bba:	f7ee fbbf 	bl	800533c <_kill>
 8016bbe:	1c43      	adds	r3, r0, #1
 8016bc0:	d102      	bne.n	8016bc8 <_kill_r+0x1c>
 8016bc2:	682b      	ldr	r3, [r5, #0]
 8016bc4:	b103      	cbz	r3, 8016bc8 <_kill_r+0x1c>
 8016bc6:	6023      	str	r3, [r4, #0]
 8016bc8:	bd38      	pop	{r3, r4, r5, pc}
 8016bca:	bf00      	nop
 8016bcc:	20006728 	.word	0x20006728

08016bd0 <_getpid_r>:
 8016bd0:	f7ee bbac 	b.w	800532c <_getpid>

08016bd4 <_init>:
 8016bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bd6:	bf00      	nop
 8016bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016bda:	bc08      	pop	{r3}
 8016bdc:	469e      	mov	lr, r3
 8016bde:	4770      	bx	lr

08016be0 <_fini>:
 8016be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016be2:	bf00      	nop
 8016be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016be6:	bc08      	pop	{r3}
 8016be8:	469e      	mov	lr, r3
 8016bea:	4770      	bx	lr
