
bsp_graphic_f746g_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a84  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004198  08012c58  08012c58  00013c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016df0  08016df0  0001d0f0  2**0
                  CONTENTS
  4 .ARM          00000008  08016df0  08016df0  00017df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .qspi         00000000  90000000  90000000  0001d0f0  2**0
                  CONTENTS
  6 .preinit_array 00000000  08016df8  08016df8  0001d0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08016df8  08016df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08016dfc  08016dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000050f0  20000000  08016e00  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001240  200050f0  0801bef0  0001d0f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20006330  0801bef0  0001d330  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001d0f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000321a6  00000000  00000000  0001d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007653  00000000  00000000  0004f2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000028e0  00000000  00000000  00056920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001f41  00000000  00000000  00059200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031cd9  00000000  00000000  0005b141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037bda  00000000  00000000  0008ce1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011338a  00000000  00000000  000c49f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001d7d7e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000badc  00000000  00000000  001d7dc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001e38a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200050f0 	.word	0x200050f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012c3c 	.word	0x08012c3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200050f4 	.word	0x200050f4
 800020c:	08012c3c 	.word	0x08012c3c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <getRTCTimeStr>:
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
const char* joursSemaine[] = {"Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"};


void getRTCTimeStr(char* timeStr) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    // Lecture de l'heure
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f80:	2200      	movs	r2, #0
 8000f82:	490b      	ldr	r1, [pc, #44]	@ (8000fb0 <getRTCTimeStr+0x38>)
 8000f84:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <getRTCTimeStr+0x3c>)
 8000f86:	f00a fb6f 	bl	800b668 <HAL_RTC_GetTime>
    // Lecture de la date (obligatoire pour débloquer les registres)
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	490a      	ldr	r1, [pc, #40]	@ (8000fb8 <getRTCTimeStr+0x40>)
 8000f8e:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <getRTCTimeStr+0x3c>)
 8000f90:	f00a fc4c 	bl	800b82c <HAL_RTC_GetDate>

    // Format: "HH:MM"
    sprintf(timeStr, "%02d:%02d", sTime.Hours, sTime.Minutes);
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <getRTCTimeStr+0x38>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <getRTCTimeStr+0x38>)
 8000f9c:	785b      	ldrb	r3, [r3, #1]
 8000f9e:	4907      	ldr	r1, [pc, #28]	@ (8000fbc <getRTCTimeStr+0x44>)
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f00f fd1d 	bl	80109e0 <siprintf>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000510c 	.word	0x2000510c
 8000fb4:	20005c94 	.word	0x20005c94
 8000fb8:	20005120 	.word	0x20005120
 8000fbc:	08012c9c 	.word	0x08012c9c

08000fc0 <get_current_time_in_seconds>:
    //printf("Heure actuelle: %02d:%02d, Minutes depuis minuit: %lu\n", sTime.Hours, sTime.Minutes, minutes);

    return minutes;
}

uint32_t get_current_time_in_seconds(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    return HAL_GetTick() / 1000; // Convertir le temps système en secondes
 8000fc4:	f006 fb84 	bl	80076d0 <HAL_GetTick>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a03      	ldr	r2, [pc, #12]	@ (8000fd8 <get_current_time_in_seconds+0x18>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	099b      	lsrs	r3, r3, #6
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	10624dd3 	.word	0x10624dd3

08000fdc <date_Heure>:

//date et heure sur l'interface
// ===== En-tête avec la date =====
void date_Heure(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
	char dateStr[20];
	char timeStr[6];

	//date en en-tete
    BSP_LCD_SetFont(&Font16);
 8000fe2:	480e      	ldr	r0, [pc, #56]	@ (800101c <date_Heure+0x40>)
 8000fe4:	f004 fe9e 	bl	8005d24 <BSP_LCD_SetFont>
    getRTCDateStr(dateStr);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 fd11 	bl	8003a14 <getRTCDateStr>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)dateStr, CENTER_MODE);
 8000ff2:	f107 020c 	add.w	r2, r7, #12
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	210a      	movs	r1, #10
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f004 ff18 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Heure au centre
	//BSP_LCD_SetFont(&Font16);
	getRTCTimeStr(timeStr);
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffb8 	bl	8000f78 <getRTCTimeStr>
	BSP_LCD_DisplayStringAt(0, 250, (uint8_t*)timeStr, CENTER_MODE);
 8001008:	1d3a      	adds	r2, r7, #4
 800100a:	2301      	movs	r3, #1
 800100c:	21fa      	movs	r1, #250	@ 0xfa
 800100e:	2000      	movs	r0, #0
 8001010:	f004 ff0e 	bl	8005e30 <BSP_LCD_DisplayStringAt>
}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20004f0c 	.word	0x20004f0c

08001020 <drawMenuPage>:

/**
 * @brief Dessine la page menu principale
 */
void drawMenuPage(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0


    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f004 fe96 	bl	8005d58 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800102c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001030:	f004 fe46 	bl	8005cc0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f004 fe5a 	bl	8005cf0 <BSP_LCD_SetBackColor>

    // ===== Section Gauche =====
    // Zone conteneur gauche
    BSP_LCD_DrawRect(40, 60, 180, 160);
 800103c:	23a0      	movs	r3, #160	@ 0xa0
 800103e:	22b4      	movs	r2, #180	@ 0xb4
 8001040:	213c      	movs	r1, #60	@ 0x3c
 8001042:	2028      	movs	r0, #40	@ 0x28
 8001044:	f005 f948 	bl	80062d8 <BSP_LCD_DrawRect>

    // Température
    BSP_LCD_DrawBitmap(50, 70, (uint8_t *)temp_icon_bmp);
 8001048:	4a2f      	ldr	r2, [pc, #188]	@ (8001108 <drawMenuPage+0xe8>)
 800104a:	2146      	movs	r1, #70	@ 0x46
 800104c:	2032      	movs	r0, #50	@ 0x32
 800104e:	f005 faa7 	bl	80065a0 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font12);
 8001052:	482e      	ldr	r0, [pc, #184]	@ (800110c <drawMenuPage+0xec>)
 8001054:	f004 fe66 	bl	8005d24 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(92, 80, (uint8_t*)"Temperature", LEFT_MODE);
 8001058:	2303      	movs	r3, #3
 800105a:	4a2d      	ldr	r2, [pc, #180]	@ (8001110 <drawMenuPage+0xf0>)
 800105c:	2150      	movs	r1, #80	@ 0x50
 800105e:	205c      	movs	r0, #92	@ 0x5c
 8001060:	f004 fee6 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Humidité
    BSP_LCD_DrawBitmap(50, 122, (uint8_t *)cloud_icon_bmp);
 8001064:	4a2b      	ldr	r2, [pc, #172]	@ (8001114 <drawMenuPage+0xf4>)
 8001066:	217a      	movs	r1, #122	@ 0x7a
 8001068:	2032      	movs	r0, #50	@ 0x32
 800106a:	f005 fa99 	bl	80065a0 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(92, 132, (uint8_t*)"Humidite", LEFT_MODE);
 800106e:	2303      	movs	r3, #3
 8001070:	4a29      	ldr	r2, [pc, #164]	@ (8001118 <drawMenuPage+0xf8>)
 8001072:	2184      	movs	r1, #132	@ 0x84
 8001074:	205c      	movs	r0, #92	@ 0x5c
 8001076:	f004 fedb 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Pluie
    BSP_LCD_DrawBitmap(50, 174, (uint8_t *)rain_icon_bmp);
 800107a:	4a28      	ldr	r2, [pc, #160]	@ (800111c <drawMenuPage+0xfc>)
 800107c:	21ae      	movs	r1, #174	@ 0xae
 800107e:	2032      	movs	r0, #50	@ 0x32
 8001080:	f005 fa8e 	bl	80065a0 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(92, 184, (uint8_t*)"Pluie", LEFT_MODE);
 8001084:	2303      	movs	r3, #3
 8001086:	4a26      	ldr	r2, [pc, #152]	@ (8001120 <drawMenuPage+0x100>)
 8001088:	21b8      	movs	r1, #184	@ 0xb8
 800108a:	205c      	movs	r0, #92	@ 0x5c
 800108c:	f004 fed0 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // ===== Section Droite =====
    // Zone conteneur droite
    BSP_LCD_DrawRect(260, 60, 180, 160);
 8001090:	23a0      	movs	r3, #160	@ 0xa0
 8001092:	22b4      	movs	r2, #180	@ 0xb4
 8001094:	213c      	movs	r1, #60	@ 0x3c
 8001096:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800109a:	f005 f91d 	bl	80062d8 <BSP_LCD_DrawRect>

    // Vent
    BSP_LCD_DrawBitmap(270, 70, (uint8_t *)wind_icon_bmp);
 800109e:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <drawMenuPage+0x104>)
 80010a0:	2146      	movs	r1, #70	@ 0x46
 80010a2:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010a6:	f005 fa7b 	bl	80065a0 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 80, (uint8_t*)"Vent", LEFT_MODE);
 80010aa:	2303      	movs	r3, #3
 80010ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001128 <drawMenuPage+0x108>)
 80010ae:	2150      	movs	r1, #80	@ 0x50
 80010b0:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80010b4:	f004 febc 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Direction
    BSP_LCD_DrawBitmap(270, 122, (uint8_t *)direction_icon_bmp);
 80010b8:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <drawMenuPage+0x10c>)
 80010ba:	217a      	movs	r1, #122	@ 0x7a
 80010bc:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010c0:	f005 fa6e 	bl	80065a0 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 132, (uint8_t*)"Direction", LEFT_MODE);
 80010c4:	2303      	movs	r3, #3
 80010c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001130 <drawMenuPage+0x110>)
 80010c8:	2184      	movs	r1, #132	@ 0x84
 80010ca:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80010ce:	f004 feaf 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Pression
    BSP_LCD_DrawBitmap(270, 174, (uint8_t *)pressure_icon_bmp);
 80010d2:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <drawMenuPage+0x114>)
 80010d4:	21ae      	movs	r1, #174	@ 0xae
 80010d6:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010da:	f005 fa61 	bl	80065a0 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 184, (uint8_t*)"Pression", LEFT_MODE);
 80010de:	2303      	movs	r3, #3
 80010e0:	4a15      	ldr	r2, [pc, #84]	@ (8001138 <drawMenuPage+0x118>)
 80010e2:	21b8      	movs	r1, #184	@ 0xb8
 80010e4:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80010e8:	f004 fea2 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // ===== Barre inférieure =====

    // Icône info à gauche
    BSP_LCD_DrawBitmap(18, 235, (uint8_t *)infos_icon_bmp);
 80010ec:	4a13      	ldr	r2, [pc, #76]	@ (800113c <drawMenuPage+0x11c>)
 80010ee:	21eb      	movs	r1, #235	@ 0xeb
 80010f0:	2012      	movs	r0, #18
 80010f2:	f005 fa55 	bl	80065a0 <BSP_LCD_DrawBitmap>


    // Icône paramètres à droite
    BSP_LCD_DrawBitmap(438, 235, (uint8_t *)setting_icon_bmp);
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <drawMenuPage+0x120>)
 80010f8:	21eb      	movs	r1, #235	@ 0xeb
 80010fa:	f44f 70db 	mov.w	r0, #438	@ 0x1b6
 80010fe:	f005 fa4f 	bl	80065a0 <BSP_LCD_DrawBitmap>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20002c48 	.word	0x20002c48
 800110c:	20004f14 	.word	0x20004f14
 8001110:	08012ca8 	.word	0x08012ca8
 8001114:	20000000 	.word	0x20000000
 8001118:	08012cb4 	.word	0x08012cb4
 800111c:	20001eb0 	.word	0x20001eb0
 8001120:	08012cc0 	.word	0x08012cc0
 8001124:	200034d4 	.word	0x200034d4
 8001128:	08012cc8 	.word	0x08012cc8
 800112c:	2000088c 	.word	0x2000088c
 8001130:	08012cd0 	.word	0x08012cd0
 8001134:	20001624 	.word	0x20001624
 8001138:	08012cdc 	.word	0x08012cdc
 800113c:	20001118 	.word	0x20001118
 8001140:	2000273c 	.word	0x2000273c

08001144 <drawCreditsPage>:

/**
 * @brief Dessine la page Crédits
 */
void drawCreditsPage(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0


    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f004 fe04 	bl	8005d58 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001150:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001154:	f004 fdb4 	bl	8005cc0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f004 fdc8 	bl	8005cf0 <BSP_LCD_SetBackColor>


    // Icône retour
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001160:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <drawCreditsPage+0x68>)
 8001162:	210a      	movs	r1, #10
 8001164:	200a      	movs	r0, #10
 8001166:	f005 fa1b 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // ===== Titre explicatif =====
    BSP_LCD_SetFont(&Font16);
 800116a:	4811      	ldr	r0, [pc, #68]	@ (80011b0 <drawCreditsPage+0x6c>)
 800116c:	f004 fdda 	bl	8005d24 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"Cette station Meteo a ete realisee par :", CENTER_MODE);
 8001170:	2301      	movs	r3, #1
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <drawCreditsPage+0x70>)
 8001174:	2150      	movs	r1, #80	@ 0x50
 8001176:	2000      	movs	r0, #0
 8001178:	f004 fe5a 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // ===== Liste des développeurs =====
    BSP_LCD_SetFont(&Font16);  // Police plus grande pour les noms
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <drawCreditsPage+0x6c>)
 800117e:	f004 fdd1 	bl	8005d24 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t*)"Maxime MORET", CENTER_MODE);
 8001182:	2301      	movs	r3, #1
 8001184:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <drawCreditsPage+0x74>)
 8001186:	2182      	movs	r1, #130	@ 0x82
 8001188:	2000      	movs	r0, #0
 800118a:	f004 fe51 	bl	8005e30 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 160, (uint8_t*)"Tristan GROUSSARD", CENTER_MODE);
 800118e:	2301      	movs	r3, #1
 8001190:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <drawCreditsPage+0x78>)
 8001192:	21a0      	movs	r1, #160	@ 0xa0
 8001194:	2000      	movs	r0, #0
 8001196:	f004 fe4b 	bl	8005e30 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 190, (uint8_t*)"Koundeme Nobel DJESSOU", CENTER_MODE);
 800119a:	2301      	movs	r3, #1
 800119c:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <drawCreditsPage+0x7c>)
 800119e:	21be      	movs	r1, #190	@ 0xbe
 80011a0:	2000      	movs	r0, #0
 80011a2:	f004 fe45 	bl	8005e30 <BSP_LCD_DisplayStringAt>

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20003d60 	.word	0x20003d60
 80011b0:	20004f0c 	.word	0x20004f0c
 80011b4:	08012ce8 	.word	0x08012ce8
 80011b8:	08012d14 	.word	0x08012d14
 80011bc:	08012d24 	.word	0x08012d24
 80011c0:	08012d38 	.word	0x08012d38

080011c4 <drawTempHumidRainPage>:

/**
 * @brief Dessine la page 1
 */
void drawTempHumidRainPage(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
    //char tempStr[10];
    //char humidStr[10];
    char rainStr[10];

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
 80011ce:	f004 fdc3 	bl	8005d58 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011d2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80011d6:	f004 fd73 	bl	8005cc0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011da:	f04f 30ff 	mov.w	r0, #4294967295
 80011de:	f004 fd87 	bl	8005cf0 <BSP_LCD_SetBackColor>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80011e2:	4a3a      	ldr	r2, [pc, #232]	@ (80012cc <drawTempHumidRainPage+0x108>)
 80011e4:	210a      	movs	r1, #10
 80011e6:	200a      	movs	r0, #10
 80011e8:	f005 f9da 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // ===== Les trois carrés de mesures =====
    // Carrés de 120x120 pixels avec espacement de 30 pixels
    // Position Y centrée verticalement
    volatile const uint16_t squareSize = 120;
 80011ec:	2378      	movs	r3, #120	@ 0x78
 80011ee:	817b      	strh	r3, [r7, #10]
    volatile const uint16_t spacing = 30;
 80011f0:	231e      	movs	r3, #30
 80011f2:	813b      	strh	r3, [r7, #8]
    volatile const uint16_t startX = 40;
 80011f4:	2328      	movs	r3, #40	@ 0x28
 80011f6:	80fb      	strh	r3, [r7, #6]
    volatile const uint16_t startY = 80;  // Ajusté pour centrer verticalement
 80011f8:	2350      	movs	r3, #80	@ 0x50
 80011fa:	80bb      	strh	r3, [r7, #4]

    // Carré température
    BSP_LCD_DrawRect(startX, startY, squareSize, squareSize);
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	b298      	uxth	r0, r3
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	b299      	uxth	r1, r3
 8001204:	897b      	ldrh	r3, [r7, #10]
 8001206:	b29a      	uxth	r2, r3
 8001208:	897b      	ldrh	r3, [r7, #10]
 800120a:	b29b      	uxth	r3, r3
 800120c:	f005 f864 	bl	80062d8 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 20, startY + 20, (uint8_t *)temp_icon_bmp);
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	b29b      	uxth	r3, r3
 8001214:	3314      	adds	r3, #20
 8001216:	4618      	mov	r0, r3
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	b29b      	uxth	r3, r3
 800121c:	3314      	adds	r3, #20
 800121e:	4a2c      	ldr	r2, [pc, #176]	@ (80012d0 <drawTempHumidRainPage+0x10c>)
 8001220:	4619      	mov	r1, r3
 8001222:	f005 f9bd 	bl	80065a0 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font20);
 8001226:	482b      	ldr	r0, [pc, #172]	@ (80012d4 <drawTempHumidRainPage+0x110>)
 8001228:	f004 fd7c 	bl	8005d24 <BSP_LCD_SetFont>
    //sprintf(tempStr, "15deg");
    //BSP_LCD_DisplayStringAt(startX + 20, startY + 70, (uint8_t*)tempStr, LEFT_MODE);

    // Carré humidité
    BSP_LCD_DrawRect(startX + squareSize + spacing, startY, squareSize, squareSize);
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	b29a      	uxth	r2, r3
 8001230:	897b      	ldrh	r3, [r7, #10]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4413      	add	r3, r2
 8001236:	b29a      	uxth	r2, r3
 8001238:	893b      	ldrh	r3, [r7, #8]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b298      	uxth	r0, r3
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	b299      	uxth	r1, r3
 8001244:	897b      	ldrh	r3, [r7, #10]
 8001246:	b29a      	uxth	r2, r3
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	b29b      	uxth	r3, r3
 800124c:	f005 f844 	bl	80062d8 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + squareSize + spacing + 20, startY + 20, (uint8_t *)cloud_icon_bmp);
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	b29b      	uxth	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	897b      	ldrh	r3, [r7, #10]
 8001258:	b29b      	uxth	r3, r3
 800125a:	4413      	add	r3, r2
 800125c:	893a      	ldrh	r2, [r7, #8]
 800125e:	b292      	uxth	r2, r2
 8001260:	4413      	add	r3, r2
 8001262:	3314      	adds	r3, #20
 8001264:	4618      	mov	r0, r3
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	b29b      	uxth	r3, r3
 800126a:	3314      	adds	r3, #20
 800126c:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <drawTempHumidRainPage+0x114>)
 800126e:	4619      	mov	r1, r3
 8001270:	f005 f996 	bl	80065a0 <BSP_LCD_DrawBitmap>
    //sprintf(humidStr, "65%%");
    //BSP_LCD_DisplayStringAt(startX + squareSize + spacing + 20, startY + 70, (uint8_t*)humidStr, LEFT_MODE);

    // Carré pluviométrie
    BSP_LCD_DrawRect(startX + 2 * (squareSize + spacing), startY, squareSize, squareSize);
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	b29a      	uxth	r2, r3
 8001278:	893b      	ldrh	r3, [r7, #8]
 800127a:	b29b      	uxth	r3, r3
 800127c:	4413      	add	r3, r2
 800127e:	b29b      	uxth	r3, r3
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	b29a      	uxth	r2, r3
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4413      	add	r3, r2
 800128a:	b298      	uxth	r0, r3
 800128c:	88bb      	ldrh	r3, [r7, #4]
 800128e:	b299      	uxth	r1, r3
 8001290:	897b      	ldrh	r3, [r7, #10]
 8001292:	b29a      	uxth	r2, r3
 8001294:	897b      	ldrh	r3, [r7, #10]
 8001296:	b29b      	uxth	r3, r3
 8001298:	f005 f81e 	bl	80062d8 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 2 * (squareSize + spacing) + 20, startY + 20, (uint8_t *)rain_icon_bmp);
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	893b      	ldrh	r3, [r7, #8]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	440b      	add	r3, r1
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	3314      	adds	r3, #20
 80012b4:	4618      	mov	r0, r3
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	3314      	adds	r3, #20
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <drawTempHumidRainPage+0x118>)
 80012be:	4619      	mov	r1, r3
 80012c0:	f005 f96e 	bl	80065a0 <BSP_LCD_DrawBitmap>
    //sprintf(rainStr, "100 mm");
    //BSP_LCD_DisplayStringAt(startX + 2 * (squareSize + spacing) + 20, startY + 70, (uint8_t*)rainStr, LEFT_MODE);


}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20003d60 	.word	0x20003d60
 80012d0:	20002c48 	.word	0x20002c48
 80012d4:	20004f04 	.word	0x20004f04
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20001eb0 	.word	0x20001eb0

080012e0 <drawWindDirPressurePage>:

/**
 * @brief Dessine la page 2
 */

void drawWindDirPressurePage(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	@ 0x30
 80012e4:	af00      	add	r7, sp, #0
    char windStr[10];
    char dirStr[10];
    char pressureStr[10];

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80012e6:	f04f 30ff 	mov.w	r0, #4294967295
 80012ea:	f004 fd35 	bl	8005d58 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80012ee:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80012f2:	f004 fce5 	bl	8005cc0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80012f6:	f04f 30ff 	mov.w	r0, #4294967295
 80012fa:	f004 fcf9 	bl	8005cf0 <BSP_LCD_SetBackColor>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80012fe:	4a37      	ldr	r2, [pc, #220]	@ (80013dc <drawWindDirPressurePage+0xfc>)
 8001300:	210a      	movs	r1, #10
 8001302:	200a      	movs	r0, #10
 8001304:	f005 f94c 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // ===== Les trois carrés de mesures =====
    // Carrés de 120x120 pixels avec espacement de 30 pixels
    const uint16_t squareSize = 120;
 8001308:	2378      	movs	r3, #120	@ 0x78
 800130a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    const uint16_t spacing = 30;
 800130c:	231e      	movs	r3, #30
 800130e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    const uint16_t startX = 40;
 8001310:	2328      	movs	r3, #40	@ 0x28
 8001312:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const uint16_t startY = 80;  // Ajusté pour centrer verticalement
 8001314:	2350      	movs	r3, #80	@ 0x50
 8001316:	853b      	strh	r3, [r7, #40]	@ 0x28

    // Carré vitesse du vent
    BSP_LCD_DrawRect(startX, startY, squareSize, squareSize);
 8001318:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800131a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800131c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800131e:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 8001320:	f004 ffda 	bl	80062d8 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 20, startY + 20, (uint8_t *)wind_icon_bmp);
 8001324:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001326:	3314      	adds	r3, #20
 8001328:	4618      	mov	r0, r3
 800132a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800132c:	3314      	adds	r3, #20
 800132e:	4a2c      	ldr	r2, [pc, #176]	@ (80013e0 <drawWindDirPressurePage+0x100>)
 8001330:	4619      	mov	r1, r3
 8001332:	f005 f935 	bl	80065a0 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font20);
 8001336:	482b      	ldr	r0, [pc, #172]	@ (80013e4 <drawWindDirPressurePage+0x104>)
 8001338:	f004 fcf4 	bl	8005d24 <BSP_LCD_SetFont>
    sprintf(windStr, "30\nkm/h");
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4929      	ldr	r1, [pc, #164]	@ (80013e8 <drawWindDirPressurePage+0x108>)
 8001342:	4618      	mov	r0, r3
 8001344:	f00f fb4c 	bl	80109e0 <siprintf>
    BSP_LCD_DisplayStringAt(startX + 20, startY + 60, (uint8_t*)windStr, LEFT_MODE);
 8001348:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800134a:	3314      	adds	r3, #20
 800134c:	b298      	uxth	r0, r3
 800134e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001350:	333c      	adds	r3, #60	@ 0x3c
 8001352:	b299      	uxth	r1, r3
 8001354:	f107 021c 	add.w	r2, r7, #28
 8001358:	2303      	movs	r3, #3
 800135a:	f004 fd69 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Carré direction du vent
    BSP_LCD_DrawRect(startX + squareSize + spacing, startY, squareSize, squareSize);
 800135e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001360:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001362:	4413      	add	r3, r2
 8001364:	b29a      	uxth	r2, r3
 8001366:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001368:	4413      	add	r3, r2
 800136a:	b298      	uxth	r0, r3
 800136c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800136e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001370:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001372:	f004 ffb1 	bl	80062d8 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + squareSize + spacing + 20, startY + 20, (uint8_t *)direction_icon_bmp);
 8001376:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001378:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800137a:	441a      	add	r2, r3
 800137c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800137e:	4413      	add	r3, r2
 8001380:	3314      	adds	r3, #20
 8001382:	4618      	mov	r0, r3
 8001384:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001386:	3314      	adds	r3, #20
 8001388:	4a18      	ldr	r2, [pc, #96]	@ (80013ec <drawWindDirPressurePage+0x10c>)
 800138a:	4619      	mov	r1, r3
 800138c:	f005 f908 	bl	80065a0 <BSP_LCD_DrawBitmap>
    //sprintf(dirStr, "65%%");
    //BSP_LCD_DisplayStringAt(startX + squareSize + spacing + 20, startY + 70, (uint8_t*)dirStr, LEFT_MODE);

    // Carré pression
    BSP_LCD_DrawRect(startX + 2 * (squareSize + spacing), startY, squareSize, squareSize);
 8001390:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001392:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	b29a      	uxth	r2, r3
 800139c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800139e:	4413      	add	r3, r2
 80013a0:	b298      	uxth	r0, r3
 80013a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80013a6:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80013a8:	f004 ff96 	bl	80062d8 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 2 * (squareSize + spacing) + 20, startY + 20, (uint8_t *)pressure_icon_bmp);
 80013ac:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80013ae:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80013b0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80013b2:	440b      	add	r3, r1
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	3314      	adds	r3, #20
 80013ba:	4618      	mov	r0, r3
 80013bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80013be:	3314      	adds	r3, #20
 80013c0:	4a0b      	ldr	r2, [pc, #44]	@ (80013f0 <drawWindDirPressurePage+0x110>)
 80013c2:	4619      	mov	r1, r3
 80013c4:	f005 f8ec 	bl	80065a0 <BSP_LCD_DrawBitmap>
    sprintf(pressureStr, "50\nbar");
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	490a      	ldr	r1, [pc, #40]	@ (80013f4 <drawWindDirPressurePage+0x114>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00f fb07 	bl	80109e0 <siprintf>
    //BSP_LCD_DisplayStringAt(startX + 2 * (squareSize + spacing) + 20, startY + 60, (uint8_t*)pressureStr, LEFT_MODE);
}
 80013d2:	bf00      	nop
 80013d4:	3730      	adds	r7, #48	@ 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20003d60 	.word	0x20003d60
 80013e0:	200034d4 	.word	0x200034d4
 80013e4:	20004f04 	.word	0x20004f04
 80013e8:	08012d50 	.word	0x08012d50
 80013ec:	2000088c 	.word	0x2000088c
 80013f0:	20001624 	.word	0x20001624
 80013f4:	08012d58 	.word	0x08012d58

080013f8 <drawSettingsPage>:
 * @brief Dessine la page de réglage date/heure
 */
/**
 * @brief Dessine la page de réglage date/heure
 */
void drawSettingsPage(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af02      	add	r7, sp, #8
    char buffer[20];
    const uint16_t buttonSize = 30;      // Taille des boutons +/-
 80013fe:	231e      	movs	r3, #30
 8001400:	83fb      	strh	r3, [r7, #30]
    const uint16_t valueWidth = 60;      // Largeur zone valeur
 8001402:	233c      	movs	r3, #60	@ 0x3c
 8001404:	83bb      	strh	r3, [r7, #28]
    const uint16_t spacing = 30;         // Espacement entre les éléments
 8001406:	231e      	movs	r3, #30
 8001408:	837b      	strh	r3, [r7, #26]

    // Lire les valeurs actuelles de la RTC
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800140a:	2200      	movs	r2, #0
 800140c:	499e      	ldr	r1, [pc, #632]	@ (8001688 <drawSettingsPage+0x290>)
 800140e:	489f      	ldr	r0, [pc, #636]	@ (800168c <drawSettingsPage+0x294>)
 8001410:	f00a f92a 	bl	800b668 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001414:	2200      	movs	r2, #0
 8001416:	499e      	ldr	r1, [pc, #632]	@ (8001690 <drawSettingsPage+0x298>)
 8001418:	489c      	ldr	r0, [pc, #624]	@ (800168c <drawSettingsPage+0x294>)
 800141a:	f00a fa07 	bl	800b82c <HAL_RTC_GetDate>

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800141e:	f04f 30ff 	mov.w	r0, #4294967295
 8001422:	f004 fc99 	bl	8005d58 <BSP_LCD_Clear>

    // Icône retour
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001426:	4a9b      	ldr	r2, [pc, #620]	@ (8001694 <drawSettingsPage+0x29c>)
 8001428:	210a      	movs	r1, #10
 800142a:	200a      	movs	r0, #10
 800142c:	f005 f8b8 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // Configuration texte
    BSP_LCD_SetFont(&Font16);
 8001430:	4899      	ldr	r0, [pc, #612]	@ (8001698 <drawSettingsPage+0x2a0>)
 8001432:	f004 fc77 	bl	8005d24 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001436:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800143a:	f004 fc41 	bl	8005cc0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800143e:	f04f 30ff 	mov.w	r0, #4294967295
 8001442:	f004 fc55 	bl	8005cf0 <BSP_LCD_SetBackColor>

    // Section Date
    BSP_LCD_DisplayStringAt(40, 80, (uint8_t*)"Date", LEFT_MODE);
 8001446:	2303      	movs	r3, #3
 8001448:	4a94      	ldr	r2, [pc, #592]	@ (800169c <drawSettingsPage+0x2a4>)
 800144a:	2150      	movs	r1, #80	@ 0x50
 800144c:	2028      	movs	r0, #40	@ 0x28
 800144e:	f004 fcef 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Positions horizontales pour les colonnes de réglage
    const uint16_t col1 = 150;  // Jour
 8001452:	2396      	movs	r3, #150	@ 0x96
 8001454:	833b      	strh	r3, [r7, #24]
    const uint16_t col2 = col1 + valueWidth + spacing;  // Mois
 8001456:	8b3a      	ldrh	r2, [r7, #24]
 8001458:	8bbb      	ldrh	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	b29a      	uxth	r2, r3
 800145e:	8b7b      	ldrh	r3, [r7, #26]
 8001460:	4413      	add	r3, r2
 8001462:	82fb      	strh	r3, [r7, #22]
    const uint16_t col3 = col2 + valueWidth + spacing;  // Année
 8001464:	8afa      	ldrh	r2, [r7, #22]
 8001466:	8bbb      	ldrh	r3, [r7, #28]
 8001468:	4413      	add	r3, r2
 800146a:	b29a      	uxth	r2, r3
 800146c:	8b7b      	ldrh	r3, [r7, #26]
 800146e:	4413      	add	r3, r2
 8001470:	82bb      	strh	r3, [r7, #20]

    // Afficher la date actuelle en haut
    sprintf(buffer, "%02d/%02d/%04d", sDate.Date, sDate.Month, 2000 + sDate.Year);
 8001472:	4b87      	ldr	r3, [pc, #540]	@ (8001690 <drawSettingsPage+0x298>)
 8001474:	789b      	ldrb	r3, [r3, #2]
 8001476:	461a      	mov	r2, r3
 8001478:	4b85      	ldr	r3, [pc, #532]	@ (8001690 <drawSettingsPage+0x298>)
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	4619      	mov	r1, r3
 800147e:	4b84      	ldr	r3, [pc, #528]	@ (8001690 <drawSettingsPage+0x298>)
 8001480:	78db      	ldrb	r3, [r3, #3]
 8001482:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001486:	4638      	mov	r0, r7
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	460b      	mov	r3, r1
 800148c:	4984      	ldr	r1, [pc, #528]	@ (80016a0 <drawSettingsPage+0x2a8>)
 800148e:	f00f faa7 	bl	80109e0 <siprintf>
    BSP_LCD_DisplayStringAt(0, 15, (uint8_t*)buffer, CENTER_MODE);
 8001492:	463a      	mov	r2, r7
 8001494:	2301      	movs	r3, #1
 8001496:	210f      	movs	r1, #15
 8001498:	2000      	movs	r0, #0
 800149a:	f004 fcc9 	bl	8005e30 <BSP_LCD_DisplayStringAt>

// Boutons et valeurs pour le jour
	BSP_LCD_DrawRect(col1, 40, buttonSize, buttonSize);  // Bouton +
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	8bfa      	ldrh	r2, [r7, #30]
 80014a2:	8b38      	ldrh	r0, [r7, #24]
 80014a4:	2128      	movs	r1, #40	@ 0x28
 80014a6:	f004 ff17 	bl	80062d8 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col1 + 10, 50, (uint8_t*)"+", LEFT_MODE);
 80014aa:	8b3b      	ldrh	r3, [r7, #24]
 80014ac:	330a      	adds	r3, #10
 80014ae:	b298      	uxth	r0, r3
 80014b0:	2303      	movs	r3, #3
 80014b2:	4a7c      	ldr	r2, [pc, #496]	@ (80016a4 <drawSettingsPage+0x2ac>)
 80014b4:	2132      	movs	r1, #50	@ 0x32
 80014b6:	f004 fcbb 	bl	8005e30 <BSP_LCD_DisplayStringAt>
	sprintf(buffer, "%02d", sDate.Date);
 80014ba:	4b75      	ldr	r3, [pc, #468]	@ (8001690 <drawSettingsPage+0x298>)
 80014bc:	789b      	ldrb	r3, [r3, #2]
 80014be:	461a      	mov	r2, r3
 80014c0:	463b      	mov	r3, r7
 80014c2:	4979      	ldr	r1, [pc, #484]	@ (80016a8 <drawSettingsPage+0x2b0>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00f fa8b 	bl	80109e0 <siprintf>
	BSP_LCD_DisplayStringAt(col1 + 5, 85, (uint8_t*)buffer, LEFT_MODE);
 80014ca:	8b3b      	ldrh	r3, [r7, #24]
 80014cc:	3305      	adds	r3, #5
 80014ce:	b298      	uxth	r0, r3
 80014d0:	463a      	mov	r2, r7
 80014d2:	2303      	movs	r3, #3
 80014d4:	2155      	movs	r1, #85	@ 0x55
 80014d6:	f004 fcab 	bl	8005e30 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(col1, 105, buttonSize, buttonSize);  // Bouton -
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	8bfa      	ldrh	r2, [r7, #30]
 80014de:	8b38      	ldrh	r0, [r7, #24]
 80014e0:	2169      	movs	r1, #105	@ 0x69
 80014e2:	f004 fef9 	bl	80062d8 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col1 + 10, 115, (uint8_t*)"-", LEFT_MODE);
 80014e6:	8b3b      	ldrh	r3, [r7, #24]
 80014e8:	330a      	adds	r3, #10
 80014ea:	b298      	uxth	r0, r3
 80014ec:	2303      	movs	r3, #3
 80014ee:	4a6f      	ldr	r2, [pc, #444]	@ (80016ac <drawSettingsPage+0x2b4>)
 80014f0:	2173      	movs	r1, #115	@ 0x73
 80014f2:	f004 fc9d 	bl	8005e30 <BSP_LCD_DisplayStringAt>

	// Boutons et valeurs pour le mois
	BSP_LCD_DrawRect(col2, 40, buttonSize, buttonSize);
 80014f6:	8bfb      	ldrh	r3, [r7, #30]
 80014f8:	8bfa      	ldrh	r2, [r7, #30]
 80014fa:	8af8      	ldrh	r0, [r7, #22]
 80014fc:	2128      	movs	r1, #40	@ 0x28
 80014fe:	f004 feeb 	bl	80062d8 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col2 + 10, 50, (uint8_t*)"+", LEFT_MODE);
 8001502:	8afb      	ldrh	r3, [r7, #22]
 8001504:	330a      	adds	r3, #10
 8001506:	b298      	uxth	r0, r3
 8001508:	2303      	movs	r3, #3
 800150a:	4a66      	ldr	r2, [pc, #408]	@ (80016a4 <drawSettingsPage+0x2ac>)
 800150c:	2132      	movs	r1, #50	@ 0x32
 800150e:	f004 fc8f 	bl	8005e30 <BSP_LCD_DisplayStringAt>
	sprintf(buffer, "%02d", sDate.Month);
 8001512:	4b5f      	ldr	r3, [pc, #380]	@ (8001690 <drawSettingsPage+0x298>)
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	461a      	mov	r2, r3
 8001518:	463b      	mov	r3, r7
 800151a:	4963      	ldr	r1, [pc, #396]	@ (80016a8 <drawSettingsPage+0x2b0>)
 800151c:	4618      	mov	r0, r3
 800151e:	f00f fa5f 	bl	80109e0 <siprintf>
	BSP_LCD_DisplayStringAt(col2 + 5, 85, (uint8_t*)buffer, LEFT_MODE);
 8001522:	8afb      	ldrh	r3, [r7, #22]
 8001524:	3305      	adds	r3, #5
 8001526:	b298      	uxth	r0, r3
 8001528:	463a      	mov	r2, r7
 800152a:	2303      	movs	r3, #3
 800152c:	2155      	movs	r1, #85	@ 0x55
 800152e:	f004 fc7f 	bl	8005e30 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(col2, 105, buttonSize, buttonSize);  // Bouton -
 8001532:	8bfb      	ldrh	r3, [r7, #30]
 8001534:	8bfa      	ldrh	r2, [r7, #30]
 8001536:	8af8      	ldrh	r0, [r7, #22]
 8001538:	2169      	movs	r1, #105	@ 0x69
 800153a:	f004 fecd 	bl	80062d8 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col2 + 10, 115, (uint8_t*)"-", LEFT_MODE);
 800153e:	8afb      	ldrh	r3, [r7, #22]
 8001540:	330a      	adds	r3, #10
 8001542:	b298      	uxth	r0, r3
 8001544:	2303      	movs	r3, #3
 8001546:	4a59      	ldr	r2, [pc, #356]	@ (80016ac <drawSettingsPage+0x2b4>)
 8001548:	2173      	movs	r1, #115	@ 0x73
 800154a:	f004 fc71 	bl	8005e30 <BSP_LCD_DisplayStringAt>

	// Boutons et valeurs pour l'année
	BSP_LCD_DrawRect(col3, 40, buttonSize, buttonSize);
 800154e:	8bfb      	ldrh	r3, [r7, #30]
 8001550:	8bfa      	ldrh	r2, [r7, #30]
 8001552:	8ab8      	ldrh	r0, [r7, #20]
 8001554:	2128      	movs	r1, #40	@ 0x28
 8001556:	f004 febf 	bl	80062d8 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col3 + 10, 50, (uint8_t*)"+", LEFT_MODE);
 800155a:	8abb      	ldrh	r3, [r7, #20]
 800155c:	330a      	adds	r3, #10
 800155e:	b298      	uxth	r0, r3
 8001560:	2303      	movs	r3, #3
 8001562:	4a50      	ldr	r2, [pc, #320]	@ (80016a4 <drawSettingsPage+0x2ac>)
 8001564:	2132      	movs	r1, #50	@ 0x32
 8001566:	f004 fc63 	bl	8005e30 <BSP_LCD_DisplayStringAt>
	sprintf(buffer, "20%02d", sDate.Year);
 800156a:	4b49      	ldr	r3, [pc, #292]	@ (8001690 <drawSettingsPage+0x298>)
 800156c:	78db      	ldrb	r3, [r3, #3]
 800156e:	461a      	mov	r2, r3
 8001570:	463b      	mov	r3, r7
 8001572:	494f      	ldr	r1, [pc, #316]	@ (80016b0 <drawSettingsPage+0x2b8>)
 8001574:	4618      	mov	r0, r3
 8001576:	f00f fa33 	bl	80109e0 <siprintf>
	BSP_LCD_DisplayStringAt(col3 - 5, 85, (uint8_t*)buffer, LEFT_MODE);
 800157a:	8abb      	ldrh	r3, [r7, #20]
 800157c:	3b05      	subs	r3, #5
 800157e:	b298      	uxth	r0, r3
 8001580:	463a      	mov	r2, r7
 8001582:	2303      	movs	r3, #3
 8001584:	2155      	movs	r1, #85	@ 0x55
 8001586:	f004 fc53 	bl	8005e30 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(col3, 105, buttonSize, buttonSize);  // Bouton -
 800158a:	8bfb      	ldrh	r3, [r7, #30]
 800158c:	8bfa      	ldrh	r2, [r7, #30]
 800158e:	8ab8      	ldrh	r0, [r7, #20]
 8001590:	2169      	movs	r1, #105	@ 0x69
 8001592:	f004 fea1 	bl	80062d8 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col3 + 10, 115, (uint8_t*)"-", LEFT_MODE);
 8001596:	8abb      	ldrh	r3, [r7, #20]
 8001598:	330a      	adds	r3, #10
 800159a:	b298      	uxth	r0, r3
 800159c:	2303      	movs	r3, #3
 800159e:	4a43      	ldr	r2, [pc, #268]	@ (80016ac <drawSettingsPage+0x2b4>)
 80015a0:	2173      	movs	r1, #115	@ 0x73
 80015a2:	f004 fc45 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Section Heure (déplacée vers le haut)
    BSP_LCD_DisplayStringAt(40, 160, (uint8_t*)"Heure", LEFT_MODE);
 80015a6:	2303      	movs	r3, #3
 80015a8:	4a42      	ldr	r2, [pc, #264]	@ (80016b4 <drawSettingsPage+0x2bc>)
 80015aa:	21a0      	movs	r1, #160	@ 0xa0
 80015ac:	2028      	movs	r0, #40	@ 0x28
 80015ae:	f004 fc3f 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Boutons et valeurs pour les heures (déplacés vers le haut)
    BSP_LCD_DrawRect(col1, 140, buttonSize, buttonSize);  // Bouton +
 80015b2:	8bfb      	ldrh	r3, [r7, #30]
 80015b4:	8bfa      	ldrh	r2, [r7, #30]
 80015b6:	8b38      	ldrh	r0, [r7, #24]
 80015b8:	218c      	movs	r1, #140	@ 0x8c
 80015ba:	f004 fe8d 	bl	80062d8 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col1 + 10, 145, (uint8_t*)"+", LEFT_MODE);
 80015be:	8b3b      	ldrh	r3, [r7, #24]
 80015c0:	330a      	adds	r3, #10
 80015c2:	b298      	uxth	r0, r3
 80015c4:	2303      	movs	r3, #3
 80015c6:	4a37      	ldr	r2, [pc, #220]	@ (80016a4 <drawSettingsPage+0x2ac>)
 80015c8:	2191      	movs	r1, #145	@ 0x91
 80015ca:	f004 fc31 	bl	8005e30 <BSP_LCD_DisplayStringAt>
    sprintf(buffer, "%02d", sTime.Hours);
 80015ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <drawSettingsPage+0x290>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	463b      	mov	r3, r7
 80015d6:	4934      	ldr	r1, [pc, #208]	@ (80016a8 <drawSettingsPage+0x2b0>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f00f fa01 	bl	80109e0 <siprintf>
    BSP_LCD_DisplayStringAt(col1 + 5, 180, (uint8_t*)buffer, LEFT_MODE);
 80015de:	8b3b      	ldrh	r3, [r7, #24]
 80015e0:	3305      	adds	r3, #5
 80015e2:	b298      	uxth	r0, r3
 80015e4:	463a      	mov	r2, r7
 80015e6:	2303      	movs	r3, #3
 80015e8:	21b4      	movs	r1, #180	@ 0xb4
 80015ea:	f004 fc21 	bl	8005e30 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(col1, 200, buttonSize, buttonSize);  // Bouton -
 80015ee:	8bfb      	ldrh	r3, [r7, #30]
 80015f0:	8bfa      	ldrh	r2, [r7, #30]
 80015f2:	8b38      	ldrh	r0, [r7, #24]
 80015f4:	21c8      	movs	r1, #200	@ 0xc8
 80015f6:	f004 fe6f 	bl	80062d8 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col1 + 10, 205, (uint8_t*)"-", LEFT_MODE);
 80015fa:	8b3b      	ldrh	r3, [r7, #24]
 80015fc:	330a      	adds	r3, #10
 80015fe:	b298      	uxth	r0, r3
 8001600:	2303      	movs	r3, #3
 8001602:	4a2a      	ldr	r2, [pc, #168]	@ (80016ac <drawSettingsPage+0x2b4>)
 8001604:	21cd      	movs	r1, #205	@ 0xcd
 8001606:	f004 fc13 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Boutons et valeurs pour les minutes (déplacés vers le haut)
    BSP_LCD_DrawRect(col2, 140, buttonSize, buttonSize);
 800160a:	8bfb      	ldrh	r3, [r7, #30]
 800160c:	8bfa      	ldrh	r2, [r7, #30]
 800160e:	8af8      	ldrh	r0, [r7, #22]
 8001610:	218c      	movs	r1, #140	@ 0x8c
 8001612:	f004 fe61 	bl	80062d8 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col2 + 10, 145, (uint8_t*)"+", LEFT_MODE);
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	330a      	adds	r3, #10
 800161a:	b298      	uxth	r0, r3
 800161c:	2303      	movs	r3, #3
 800161e:	4a21      	ldr	r2, [pc, #132]	@ (80016a4 <drawSettingsPage+0x2ac>)
 8001620:	2191      	movs	r1, #145	@ 0x91
 8001622:	f004 fc05 	bl	8005e30 <BSP_LCD_DisplayStringAt>
    sprintf(buffer, "%02d", sTime.Minutes);
 8001626:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <drawSettingsPage+0x290>)
 8001628:	785b      	ldrb	r3, [r3, #1]
 800162a:	461a      	mov	r2, r3
 800162c:	463b      	mov	r3, r7
 800162e:	491e      	ldr	r1, [pc, #120]	@ (80016a8 <drawSettingsPage+0x2b0>)
 8001630:	4618      	mov	r0, r3
 8001632:	f00f f9d5 	bl	80109e0 <siprintf>
    BSP_LCD_DisplayStringAt(col2 + 5, 180, (uint8_t*)buffer, LEFT_MODE);
 8001636:	8afb      	ldrh	r3, [r7, #22]
 8001638:	3305      	adds	r3, #5
 800163a:	b298      	uxth	r0, r3
 800163c:	463a      	mov	r2, r7
 800163e:	2303      	movs	r3, #3
 8001640:	21b4      	movs	r1, #180	@ 0xb4
 8001642:	f004 fbf5 	bl	8005e30 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(col2, 200, buttonSize, buttonSize);
 8001646:	8bfb      	ldrh	r3, [r7, #30]
 8001648:	8bfa      	ldrh	r2, [r7, #30]
 800164a:	8af8      	ldrh	r0, [r7, #22]
 800164c:	21c8      	movs	r1, #200	@ 0xc8
 800164e:	f004 fe43 	bl	80062d8 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col2 + 10, 205, (uint8_t*)"-", LEFT_MODE);
 8001652:	8afb      	ldrh	r3, [r7, #22]
 8001654:	330a      	adds	r3, #10
 8001656:	b298      	uxth	r0, r3
 8001658:	2303      	movs	r3, #3
 800165a:	4a14      	ldr	r2, [pc, #80]	@ (80016ac <drawSettingsPage+0x2b4>)
 800165c:	21cd      	movs	r1, #205	@ 0xcd
 800165e:	f004 fbe7 	bl	8005e30 <BSP_LCD_DisplayStringAt>


    // Bouton Valider
    BSP_LCD_DrawRect(340, 220, 100, 30);
 8001662:	231e      	movs	r3, #30
 8001664:	2264      	movs	r2, #100	@ 0x64
 8001666:	21dc      	movs	r1, #220	@ 0xdc
 8001668:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 800166c:	f004 fe34 	bl	80062d8 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(350, 225, (uint8_t*)"Valider",LEFT_MODE);
 8001670:	2303      	movs	r3, #3
 8001672:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <drawSettingsPage+0x2c0>)
 8001674:	21e1      	movs	r1, #225	@ 0xe1
 8001676:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800167a:	f004 fbd9 	bl	8005e30 <BSP_LCD_DisplayStringAt>

}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000510c 	.word	0x2000510c
 800168c:	20005c94 	.word	0x20005c94
 8001690:	20005120 	.word	0x20005120
 8001694:	20003d60 	.word	0x20003d60
 8001698:	20004f0c 	.word	0x20004f0c
 800169c:	08012d60 	.word	0x08012d60
 80016a0:	08012d68 	.word	0x08012d68
 80016a4:	08012d78 	.word	0x08012d78
 80016a8:	08012d7c 	.word	0x08012d7c
 80016ac:	08012d84 	.word	0x08012d84
 80016b0:	08012d88 	.word	0x08012d88
 80016b4:	08012d90 	.word	0x08012d90
 80016b8:	08012d98 	.word	0x08012d98

080016bc <drawTempHumGraphPage>:

void drawTempHumGraphPage(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80016c2:	f04f 30ff 	mov.w	r0, #4294967295
 80016c6:	f004 fb47 	bl	8005d58 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80016ca:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80016ce:	f004 faf7 	bl	8005cc0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80016d2:	f04f 30ff 	mov.w	r0, #4294967295
 80016d6:	f004 fb0b 	bl	8005cf0 <BSP_LCD_SetBackColor>

    // ===== En-tête =====
    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80016da:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <drawTempHumGraphPage+0x7c>)
 80016dc:	210a      	movs	r1, #10
 80016de:	200a      	movs	r0, #10
 80016e0:	f004 ff5e 	bl	80065a0 <BSP_LCD_DrawBitmap>



    // ===== Lignes verticales de séparation =====
    const uint16_t lineStartY = 60;
 80016e4:	233c      	movs	r3, #60	@ 0x3c
 80016e6:	80fb      	strh	r3, [r7, #6]
    const uint16_t lineHeight = 180;
 80016e8:	23b4      	movs	r3, #180	@ 0xb4
 80016ea:	80bb      	strh	r3, [r7, #4]

    // Première ligne verticale (1/3 de l'écran)
    BSP_LCD_DrawVLine(480/3, lineStartY, lineHeight);
 80016ec:	88ba      	ldrh	r2, [r7, #4]
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4619      	mov	r1, r3
 80016f2:	20a0      	movs	r0, #160	@ 0xa0
 80016f4:	f004 fcc2 	bl	800607c <BSP_LCD_DrawVLine>

    // Deuxième ligne verticale (2/3 de l'écran)
    BSP_LCD_DrawVLine(2*480/3, lineStartY, lineHeight);
 80016f8:	88ba      	ldrh	r2, [r7, #4]
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8001702:	f004 fcbb 	bl	800607c <BSP_LCD_DrawVLine>

    // ===== Icônes en haut de chaque colonne =====
    const uint16_t iconY = 60;
 8001706:	233c      	movs	r3, #60	@ 0x3c
 8001708:	807b      	strh	r3, [r7, #2]

    // Colonne 1 (horloge)
    BSP_LCD_DrawBitmap(480/6 - 16, iconY, (uint8_t *)clock_icon_bmp);
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	4a0b      	ldr	r2, [pc, #44]	@ (800173c <drawTempHumGraphPage+0x80>)
 800170e:	4619      	mov	r1, r3
 8001710:	2040      	movs	r0, #64	@ 0x40
 8001712:	f004 ff45 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // Colonne 2 (thermomètre)
    BSP_LCD_DrawBitmap(480/2 - 16, iconY, (uint8_t *)temp_icon_bmp);
 8001716:	887b      	ldrh	r3, [r7, #2]
 8001718:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <drawTempHumGraphPage+0x84>)
 800171a:	4619      	mov	r1, r3
 800171c:	20e0      	movs	r0, #224	@ 0xe0
 800171e:	f004 ff3f 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // Colonne 3 (gouttes)
    BSP_LCD_DrawBitmap(5*480/6 - 16, iconY, (uint8_t *)rain_icon_bmp);
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <drawTempHumGraphPage+0x88>)
 8001726:	4619      	mov	r1, r3
 8001728:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800172c:	f004 ff38 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // ===== Zone pour les graphiques =====
    // TODO: Ajouter les graphiques dans chaque colonne


}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20003d60 	.word	0x20003d60
 800173c:	200045ec 	.word	0x200045ec
 8001740:	20002c48 	.word	0x20002c48
 8001744:	20001eb0 	.word	0x20001eb0

08001748 <drawRainPressGraphPage>:

void drawRainPressGraphPage(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800174e:	f04f 30ff 	mov.w	r0, #4294967295
 8001752:	f004 fb01 	bl	8005d58 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001756:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800175a:	f004 fab1 	bl	8005cc0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800175e:	f04f 30ff 	mov.w	r0, #4294967295
 8001762:	f004 fac5 	bl	8005cf0 <BSP_LCD_SetBackColor>

    // ===== En-tête =====
    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001766:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <drawRainPressGraphPage+0x7c>)
 8001768:	210a      	movs	r1, #10
 800176a:	200a      	movs	r0, #10
 800176c:	f004 ff18 	bl	80065a0 <BSP_LCD_DrawBitmap>


    // ===== Lignes verticales de séparation =====
    const uint16_t lineStartY = 60;
 8001770:	233c      	movs	r3, #60	@ 0x3c
 8001772:	80fb      	strh	r3, [r7, #6]
    const uint16_t lineHeight = 180;
 8001774:	23b4      	movs	r3, #180	@ 0xb4
 8001776:	80bb      	strh	r3, [r7, #4]

    // Première ligne verticale (1/3 de l'écran)
    BSP_LCD_DrawVLine(480/3, lineStartY, lineHeight);
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	4619      	mov	r1, r3
 800177e:	20a0      	movs	r0, #160	@ 0xa0
 8001780:	f004 fc7c 	bl	800607c <BSP_LCD_DrawVLine>

    // Deuxième ligne verticale (2/3 de l'écran)
    BSP_LCD_DrawVLine(2*480/3, lineStartY, lineHeight);
 8001784:	88ba      	ldrh	r2, [r7, #4]
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800178e:	f004 fc75 	bl	800607c <BSP_LCD_DrawVLine>

    // ===== Icônes en haut de chaque colonne =====
    const uint16_t iconY = 60;
 8001792:	233c      	movs	r3, #60	@ 0x3c
 8001794:	807b      	strh	r3, [r7, #2]

    // Colonne 1 (horloge)
    BSP_LCD_DrawBitmap(480/6 - 16, iconY, (uint8_t *)clock_icon_bmp);
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	4a0b      	ldr	r2, [pc, #44]	@ (80017c8 <drawRainPressGraphPage+0x80>)
 800179a:	4619      	mov	r1, r3
 800179c:	2040      	movs	r0, #64	@ 0x40
 800179e:	f004 feff 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // Colonne 2 (thermomètre)
    BSP_LCD_DrawBitmap(480/2 - 16, iconY, (uint8_t *)temp_icon_bmp);
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <drawRainPressGraphPage+0x84>)
 80017a6:	4619      	mov	r1, r3
 80017a8:	20e0      	movs	r0, #224	@ 0xe0
 80017aa:	f004 fef9 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // Colonne 3 (gouttes)
    BSP_LCD_DrawBitmap(5*480/6 - 16, iconY, (uint8_t *)rain_icon_bmp);
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <drawRainPressGraphPage+0x88>)
 80017b2:	4619      	mov	r1, r3
 80017b4:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80017b8:	f004 fef2 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // ===== Zone pour les graphiques =====
    // TODO: Ajouter les graphiques dans chaque colonne

}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20003d60 	.word	0x20003d60
 80017c8:	200045ec 	.word	0x200045ec
 80017cc:	20002c48 	.word	0x20002c48
 80017d0:	20001eb0 	.word	0x20001eb0

080017d4 <draw_temperature_graph>:
volatile int current_point = 0;




void draw_temperature_graph(float *temps, uint32_t *times, int num_points) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b096      	sub	sp, #88	@ 0x58
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
    int offsetY = 20; // Décalage vers le bas
 80017e0:	2314      	movs	r3, #20
 80017e2:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Effacer l'écran
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f004 fa6a 	bl	8005cc0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, 480, 275); // Effacer l'écran (fond blanc)
 80017ec:	f240 1313 	movw	r3, #275	@ 0x113
 80017f0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2000      	movs	r0, #0
 80017f8:	f004 ff84 	bl	8006704 <BSP_LCD_FillRect>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80017fc:	4a9b      	ldr	r2, [pc, #620]	@ (8001a6c <draw_temperature_graph+0x298>)
 80017fe:	210a      	movs	r1, #10
 8001800:	200a      	movs	r0, #10
 8001802:	f004 fecd 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // Couleur des axes
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001806:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800180a:	f004 fa59 	bl	8005cc0 <BSP_LCD_SetTextColor>

    // Ajouter un titre
    BSP_LCD_SetFont(&Font16); // Police pour le titre
 800180e:	4898      	ldr	r0, [pc, #608]	@ (8001a70 <draw_temperature_graph+0x29c>)
 8001810:	f004 fa88 	bl	8005d24 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10 + offsetY, (uint8_t *)"Temperature", CENTER_MODE);
 8001814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001816:	b29b      	uxth	r3, r3
 8001818:	330a      	adds	r3, #10
 800181a:	b299      	uxth	r1, r3
 800181c:	2301      	movs	r3, #1
 800181e:	4a95      	ldr	r2, [pc, #596]	@ (8001a74 <draw_temperature_graph+0x2a0>)
 8001820:	2000      	movs	r0, #0
 8001822:	f004 fb05 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Dessiner les axes
    BSP_LCD_DrawLine(80, 200 + offsetY, 400, 200 + offsetY); // Axe X (horizontal)
 8001826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001828:	b29b      	uxth	r3, r3
 800182a:	33c8      	adds	r3, #200	@ 0xc8
 800182c:	b299      	uxth	r1, r3
 800182e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001830:	b29b      	uxth	r3, r3
 8001832:	33c8      	adds	r3, #200	@ 0xc8
 8001834:	b29b      	uxth	r3, r3
 8001836:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800183a:	2050      	movs	r0, #80	@ 0x50
 800183c:	f004 fc80 	bl	8006140 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(80, 200 + offsetY, 80, 50 + offsetY);   // Axe Y (vertical)
 8001840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001842:	b29b      	uxth	r3, r3
 8001844:	33c8      	adds	r3, #200	@ 0xc8
 8001846:	b299      	uxth	r1, r3
 8001848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800184a:	b29b      	uxth	r3, r3
 800184c:	3332      	adds	r3, #50	@ 0x32
 800184e:	b29b      	uxth	r3, r3
 8001850:	2250      	movs	r2, #80	@ 0x50
 8001852:	2050      	movs	r0, #80	@ 0x50
 8001854:	f004 fc74 	bl	8006140 <BSP_LCD_DrawLine>

    // Ajouter des noms aux axes
    BSP_LCD_SetFont(&Font16); // Police pour les axes
 8001858:	4885      	ldr	r0, [pc, #532]	@ (8001a70 <draw_temperature_graph+0x29c>)
 800185a:	f004 fa63 	bl	8005d24 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(190, 210 + offsetY, (uint8_t *)"Time(min)", CENTER_MODE); // Nom de l'axe X
 800185e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001860:	b29b      	uxth	r3, r3
 8001862:	33d2      	adds	r3, #210	@ 0xd2
 8001864:	b299      	uxth	r1, r3
 8001866:	2301      	movs	r3, #1
 8001868:	4a83      	ldr	r2, [pc, #524]	@ (8001a78 <draw_temperature_graph+0x2a4>)
 800186a:	20be      	movs	r0, #190	@ 0xbe
 800186c:	f004 fae0 	bl	8005e30 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(25, 30 + offsetY, (uint8_t *)"Temp(C)", LEFT_MODE);           // Nom de l'axe Y
 8001870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001872:	b29b      	uxth	r3, r3
 8001874:	331e      	adds	r3, #30
 8001876:	b299      	uxth	r1, r3
 8001878:	2303      	movs	r3, #3
 800187a:	4a80      	ldr	r2, [pc, #512]	@ (8001a7c <draw_temperature_graph+0x2a8>)
 800187c:	2019      	movs	r0, #25
 800187e:	f004 fad7 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Ajouter des graduations sur l'axe Y (température de 0°C à 50°C)
    for (int i = 0; i <= 5; i++) {
 8001882:	2300      	movs	r3, #0
 8001884:	657b      	str	r3, [r7, #84]	@ 0x54
 8001886:	e02a      	b.n	80018de <draw_temperature_graph+0x10a>
        int y = 200 + offsetY - (i * 30); // Espacement uniforme entre graduations (30 px)
 8001888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800188a:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 800188e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001890:	4613      	mov	r3, r2
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	440b      	add	r3, r1
 800189a:	62bb      	str	r3, [r7, #40]	@ 0x28
        char label[10];
        sprintf(label, "%d", i * 10); // Température (0°C à 50°C par pas de 10°C)
 800189c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	461a      	mov	r2, r3
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4974      	ldr	r1, [pc, #464]	@ (8001a80 <draw_temperature_graph+0x2ac>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00f f896 	bl	80109e0 <siprintf>
        BSP_LCD_DisplayStringAt(50, y - 5, (uint8_t *)label, LEFT_MODE);
 80018b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b05      	subs	r3, #5
 80018ba:	b299      	uxth	r1, r3
 80018bc:	f107 021c 	add.w	r2, r7, #28
 80018c0:	2303      	movs	r3, #3
 80018c2:	2032      	movs	r0, #50	@ 0x32
 80018c4:	f004 fab4 	bl	8005e30 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(75, y, 80, y); // Petite graduation
 80018c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ca:	b299      	uxth	r1, r3
 80018cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2250      	movs	r2, #80	@ 0x50
 80018d2:	204b      	movs	r0, #75	@ 0x4b
 80018d4:	f004 fc34 	bl	8006140 <BSP_LCD_DrawLine>
    for (int i = 0; i <= 5; i++) {
 80018d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018da:	3301      	adds	r3, #1
 80018dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80018de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	ddd1      	ble.n	8001888 <draw_temperature_graph+0xb4>
    }

    // Ajouter des graduations sur l'axe X (temps)
    for (int i = 0; i < num_points; i++) {
 80018e4:	2300      	movs	r3, #0
 80018e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80018e8:	e02f      	b.n	800194a <draw_temperature_graph+0x176>
        int x = 80 + (i * 30); // Position X des graduations
 80018ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80018ec:	4613      	mov	r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	3350      	adds	r3, #80	@ 0x50
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        char label[10];
        sprintf(label, "%lu", times[i]); // Afficher le temps en secondes
 80018f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	4413      	add	r3, r2
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	495f      	ldr	r1, [pc, #380]	@ (8001a84 <draw_temperature_graph+0x2b0>)
 8001908:	4618      	mov	r0, r3
 800190a:	f00f f869 	bl	80109e0 <siprintf>
        BSP_LCD_DisplayStringAt(x - 20, 210 + offsetY, (uint8_t *)label, LEFT_MODE);
 800190e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001910:	b29b      	uxth	r3, r3
 8001912:	3b14      	subs	r3, #20
 8001914:	b298      	uxth	r0, r3
 8001916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001918:	b29b      	uxth	r3, r3
 800191a:	33d2      	adds	r3, #210	@ 0xd2
 800191c:	b299      	uxth	r1, r3
 800191e:	f107 0210 	add.w	r2, r7, #16
 8001922:	2303      	movs	r3, #3
 8001924:	f004 fa84 	bl	8005e30 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(x, 200 + offsetY, x, 195 + offsetY); // Petite graduation
 8001928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192a:	b298      	uxth	r0, r3
 800192c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800192e:	b29b      	uxth	r3, r3
 8001930:	33c8      	adds	r3, #200	@ 0xc8
 8001932:	b299      	uxth	r1, r3
 8001934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001936:	b29a      	uxth	r2, r3
 8001938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800193a:	b29b      	uxth	r3, r3
 800193c:	33c3      	adds	r3, #195	@ 0xc3
 800193e:	b29b      	uxth	r3, r3
 8001940:	f004 fbfe 	bl	8006140 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points; i++) {
 8001944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001946:	3301      	adds	r3, #1
 8001948:	653b      	str	r3, [r7, #80]	@ 0x50
 800194a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	dbcb      	blt.n	80018ea <draw_temperature_graph+0x116>
    }

    // Tracer les points et relier par des lignes
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001952:	484d      	ldr	r0, [pc, #308]	@ (8001a88 <draw_temperature_graph+0x2b4>)
 8001954:	f004 f9b4 	bl	8005cc0 <BSP_LCD_SetTextColor>

    for (int i = 0; i < num_points - 1; i++) {
 8001958:	2300      	movs	r3, #0
 800195a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800195c:	e052      	b.n	8001a04 <draw_temperature_graph+0x230>
        // Coordonnées du point courant
        int x1 = 80 + (i * 30);
 800195e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	3350      	adds	r3, #80	@ 0x50
 800196a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int y1 = 200 + offsetY - ((temps[i] - 0) * 3); // Adapter l'échelle pour la plage 0°C-50°C (3 px par °C)
 800196c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800196e:	33c8      	adds	r3, #200	@ 0xc8
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001988:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800198c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001994:	ee17 3a90 	vmov	r3, s15
 8001998:	63bb      	str	r3, [r7, #56]	@ 0x38

        // Coordonnées du point suivant
        int x2 = 80 + ((i + 1) * 30);
 800199a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	4613      	mov	r3, r2
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	3350      	adds	r3, #80	@ 0x50
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
        int y2 = 200 + offsetY - ((temps[i + 1] - 0) * 3);
 80019aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019ac:	33c8      	adds	r3, #200	@ 0xc8
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019b8:	3301      	adds	r3, #1
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80019c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d4:	ee17 3a90 	vmov	r3, s15
 80019d8:	633b      	str	r3, [r7, #48]	@ 0x30

        // Tracer le point et la ligne
        BSP_LCD_FillCircle(x1, y1, 2); // Cercle pour le point
 80019da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019dc:	b29b      	uxth	r3, r3
 80019de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019e0:	b291      	uxth	r1, r2
 80019e2:	2202      	movs	r2, #2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 ff07 	bl	80067f8 <BSP_LCD_FillCircle>
        BSP_LCD_DrawLine(x1, y1, x2, y2); // Ligne entre les points
 80019ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ec:	b298      	uxth	r0, r3
 80019ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f0:	b299      	uxth	r1, r3
 80019f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f004 fba1 	bl	8006140 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points - 1; i++) {
 80019fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a00:	3301      	adds	r3, #1
 8001a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dba7      	blt.n	800195e <draw_temperature_graph+0x18a>
    }

    // Dernier point
    int last_x = 80 + ((num_points - 1) * 30);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	4613      	mov	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	3350      	adds	r3, #80	@ 0x50
 8001a1c:	647b      	str	r3, [r7, #68]	@ 0x44
    int last_y = 200 + offsetY - ((temps[num_points - 1] - 0) * 3);
 8001a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a20:	33c8      	adds	r3, #200	@ 0xc8
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001a40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4c:	ee17 3a90 	vmov	r3, s15
 8001a50:	643b      	str	r3, [r7, #64]	@ 0x40
    BSP_LCD_FillCircle(last_x, last_y, 2); // Point final
 8001a52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a58:	b291      	uxth	r1, r2
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f004 fecb 	bl	80067f8 <BSP_LCD_FillCircle>
}
 8001a62:	bf00      	nop
 8001a64:	3758      	adds	r7, #88	@ 0x58
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20003d60 	.word	0x20003d60
 8001a70:	20004f0c 	.word	0x20004f0c
 8001a74:	08012ca8 	.word	0x08012ca8
 8001a78:	08012da0 	.word	0x08012da0
 8001a7c:	08012dac 	.word	0x08012dac
 8001a80:	08012db4 	.word	0x08012db4
 8001a84:	08012db8 	.word	0x08012db8
 8001a88:	ff0000ff 	.word	0xff0000ff

08001a8c <update_temperature_graph>:


void update_temperature_graph(float new_temp, uint32_t current_time) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a96:	6038      	str	r0, [r7, #0]
    // Ajouter la nouvelle température et l'heure au tableau
    if (current_point < MAX_POINTS) {
 8001a98:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <update_temperature_graph+0x98>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b09      	cmp	r3, #9
 8001a9e:	dc12      	bgt.n	8001ac6 <update_temperature_graph+0x3a>
        temps[current_point] = new_temp;
 8001aa0:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <update_temperature_graph+0x98>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a20      	ldr	r2, [pc, #128]	@ (8001b28 <update_temperature_graph+0x9c>)
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	601a      	str	r2, [r3, #0]
        times[current_point] = current_time;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <update_temperature_graph+0x98>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	491e      	ldr	r1, [pc, #120]	@ (8001b2c <update_temperature_graph+0xa0>)
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        current_point++;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <update_temperature_graph+0x98>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a18      	ldr	r2, [pc, #96]	@ (8001b24 <update_temperature_graph+0x98>)
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e022      	b.n	8001b0c <update_temperature_graph+0x80>
    } else {
        // Décaler les données vers la gauche pour ajouter le nouveau point
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e016      	b.n	8001afa <update_temperature_graph+0x6e>
            temps[i] = temps[i + 1];
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4a15      	ldr	r2, [pc, #84]	@ (8001b28 <update_temperature_graph+0x9c>)
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4913      	ldr	r1, [pc, #76]	@ (8001b28 <update_temperature_graph+0x9c>)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	601a      	str	r2, [r3, #0]
            times[i] = times[i + 1];
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <update_temperature_graph+0xa0>)
 8001ae8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001aec:	490f      	ldr	r1, [pc, #60]	@ (8001b2c <update_temperature_graph+0xa0>)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3301      	adds	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	dde5      	ble.n	8001acc <update_temperature_graph+0x40>
        }
        temps[MAX_POINTS - 1] = new_temp;
 8001b00:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <update_temperature_graph+0x9c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6253      	str	r3, [r2, #36]	@ 0x24
        times[MAX_POINTS - 1] = current_time;
 8001b06:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <update_temperature_graph+0xa0>)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	6253      	str	r3, [r2, #36]	@ 0x24
    }
    draw_temperature_graph(temps, times, current_point);
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <update_temperature_graph+0x98>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4906      	ldr	r1, [pc, #24]	@ (8001b2c <update_temperature_graph+0xa0>)
 8001b14:	4804      	ldr	r0, [pc, #16]	@ (8001b28 <update_temperature_graph+0x9c>)
 8001b16:	f7ff fe5d 	bl	80017d4 <draw_temperature_graph>

}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20005174 	.word	0x20005174
 8001b28:	20005124 	.word	0x20005124
 8001b2c:	2000514c 	.word	0x2000514c

08001b30 <draw_humidity_graph>:
float humidities[MAX_POINTS];
uint32_t times[MAX_POINTS];



void draw_humidity_graph(float *humidities, uint32_t *times, int num_points) {
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b096      	sub	sp, #88	@ 0x58
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
    int offsetY = 20; // Décalage vers le bas
 8001b3c:	2314      	movs	r3, #20
 8001b3e:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Effacer l'écran
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f004 f8bc 	bl	8005cc0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, 480, 275); // Effacer l'écran (fond blanc)
 8001b48:	f240 1313 	movw	r3, #275	@ 0x113
 8001b4c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2000      	movs	r0, #0
 8001b54:	f004 fdd6 	bl	8006704 <BSP_LCD_FillRect>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001b58:	4aa5      	ldr	r2, [pc, #660]	@ (8001df0 <draw_humidity_graph+0x2c0>)
 8001b5a:	210a      	movs	r1, #10
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f004 fd1f 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // Couleur des axes
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b62:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001b66:	f004 f8ab 	bl	8005cc0 <BSP_LCD_SetTextColor>

    // Ajouter un titre
    BSP_LCD_SetFont(&Font16); // Police pour le titre
 8001b6a:	48a2      	ldr	r0, [pc, #648]	@ (8001df4 <draw_humidity_graph+0x2c4>)
 8001b6c:	f004 f8da 	bl	8005d24 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10 + offsetY, (uint8_t *)"Humidity", CENTER_MODE);
 8001b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	330a      	adds	r3, #10
 8001b76:	b299      	uxth	r1, r3
 8001b78:	2301      	movs	r3, #1
 8001b7a:	4a9f      	ldr	r2, [pc, #636]	@ (8001df8 <draw_humidity_graph+0x2c8>)
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f004 f957 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Dessiner les axes
    BSP_LCD_DrawLine(80, 200 + offsetY, 400, 200 + offsetY); // Axe X (horizontal)
 8001b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	33c8      	adds	r3, #200	@ 0xc8
 8001b88:	b299      	uxth	r1, r3
 8001b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	33c8      	adds	r3, #200	@ 0xc8
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001b96:	2050      	movs	r0, #80	@ 0x50
 8001b98:	f004 fad2 	bl	8006140 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(80, 200 + offsetY, 80, 50 + offsetY);   // Axe Y (vertical)
 8001b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	33c8      	adds	r3, #200	@ 0xc8
 8001ba2:	b299      	uxth	r1, r3
 8001ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3332      	adds	r3, #50	@ 0x32
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2250      	movs	r2, #80	@ 0x50
 8001bae:	2050      	movs	r0, #80	@ 0x50
 8001bb0:	f004 fac6 	bl	8006140 <BSP_LCD_DrawLine>

    // Ajouter des noms aux axes
    BSP_LCD_SetFont(&Font16); // Police pour les axes
 8001bb4:	488f      	ldr	r0, [pc, #572]	@ (8001df4 <draw_humidity_graph+0x2c4>)
 8001bb6:	f004 f8b5 	bl	8005d24 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(190, 210 + offsetY, (uint8_t *)"Time(min)", CENTER_MODE); // Nom de l'axe X
 8001bba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	33d2      	adds	r3, #210	@ 0xd2
 8001bc0:	b299      	uxth	r1, r3
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	4a8d      	ldr	r2, [pc, #564]	@ (8001dfc <draw_humidity_graph+0x2cc>)
 8001bc6:	20be      	movs	r0, #190	@ 0xbe
 8001bc8:	f004 f932 	bl	8005e30 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(25, 30 + offsetY, (uint8_t *)"Humidity(%)", LEFT_MODE);    // Nom de l'axe Y
 8001bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	331e      	adds	r3, #30
 8001bd2:	b299      	uxth	r1, r3
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	4a8a      	ldr	r2, [pc, #552]	@ (8001e00 <draw_humidity_graph+0x2d0>)
 8001bd8:	2019      	movs	r0, #25
 8001bda:	f004 f929 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Ajouter des graduations sur l'axe Y (humidité de 0% à 100%)
    for (int i = 0; i <= 5; i++) {
 8001bde:	2300      	movs	r3, #0
 8001be0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001be2:	e02a      	b.n	8001c3a <draw_humidity_graph+0x10a>
        int y = 200 + offsetY - (i * 30); // Espacement uniforme entre graduations (30 px)
 8001be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001be6:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8001bea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001bec:	4613      	mov	r3, r2
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	440b      	add	r3, r1
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
        char label[10];
        sprintf(label, "%d", i * 20); // Humidité (0% à 100% par pas de 20%)
 8001bf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	461a      	mov	r2, r3
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	497e      	ldr	r1, [pc, #504]	@ (8001e04 <draw_humidity_graph+0x2d4>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f00e fee8 	bl	80109e0 <siprintf>
        BSP_LCD_DisplayStringAt(50, y - 5, (uint8_t *)label, LEFT_MODE);
 8001c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b05      	subs	r3, #5
 8001c16:	b299      	uxth	r1, r3
 8001c18:	f107 021c 	add.w	r2, r7, #28
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	2032      	movs	r0, #50	@ 0x32
 8001c20:	f004 f906 	bl	8005e30 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(75, y, 80, y); // Petite graduation
 8001c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c26:	b299      	uxth	r1, r3
 8001c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2250      	movs	r2, #80	@ 0x50
 8001c2e:	204b      	movs	r0, #75	@ 0x4b
 8001c30:	f004 fa86 	bl	8006140 <BSP_LCD_DrawLine>
    for (int i = 0; i <= 5; i++) {
 8001c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c36:	3301      	adds	r3, #1
 8001c38:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	ddd1      	ble.n	8001be4 <draw_humidity_graph+0xb4>
    }

    // Ajouter des graduations sur l'axe X (temps)
    for (int i = 0; i < num_points; i++) {
 8001c40:	2300      	movs	r3, #0
 8001c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c44:	e02f      	b.n	8001ca6 <draw_humidity_graph+0x176>
		int x = 80 + (i * 30); // Position X des graduations
 8001c46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c48:	4613      	mov	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	3350      	adds	r3, #80	@ 0x50
 8001c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
		char label[10];
		sprintf(label, "%lu", times[i]); // Afficher le temps en secondes
 8001c54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4969      	ldr	r1, [pc, #420]	@ (8001e08 <draw_humidity_graph+0x2d8>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f00e febb 	bl	80109e0 <siprintf>
		BSP_LCD_DisplayStringAt(x - 20, 210 + offsetY, (uint8_t *)label, LEFT_MODE);
 8001c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b14      	subs	r3, #20
 8001c70:	b298      	uxth	r0, r3
 8001c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	33d2      	adds	r3, #210	@ 0xd2
 8001c78:	b299      	uxth	r1, r3
 8001c7a:	f107 0210 	add.w	r2, r7, #16
 8001c7e:	2303      	movs	r3, #3
 8001c80:	f004 f8d6 	bl	8005e30 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DrawLine(x, 200 + offsetY, x, 195 + offsetY); // Petite graduation
 8001c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c86:	b298      	uxth	r0, r3
 8001c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	33c8      	adds	r3, #200	@ 0xc8
 8001c8e:	b299      	uxth	r1, r3
 8001c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	33c3      	adds	r3, #195	@ 0xc3
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	f004 fa50 	bl	8006140 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points; i++) {
 8001ca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ca6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dbcb      	blt.n	8001c46 <draw_humidity_graph+0x116>
	}

    // Tracer les points et relier par des lignes
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001cae:	4857      	ldr	r0, [pc, #348]	@ (8001e0c <draw_humidity_graph+0x2dc>)
 8001cb0:	f004 f806 	bl	8005cc0 <BSP_LCD_SetTextColor>

    for (int i = 0; i < num_points - 1; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cb8:	e068      	b.n	8001d8c <draw_humidity_graph+0x25c>
        // Coordonnées du point courant
        int x1 = 80 + (i * 30);
 8001cba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	3350      	adds	r3, #80	@ 0x50
 8001cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int y1 = 200 + offsetY - ((humidities[i] - 0) * 1.5); // Adapter l'échelle pour l'humidité (2 px par %)
 8001cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cca:	33c8      	adds	r3, #200	@ 0xc8
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc49 	bl	8000564 <__aeabi_i2d>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	460d      	mov	r5, r1
 8001cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc51 	bl	8000588 <__aeabi_f2d>
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b49      	ldr	r3, [pc, #292]	@ (8001e10 <draw_humidity_graph+0x2e0>)
 8001cec:	f7fe fca4 	bl	8000638 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe fae6 	bl	80002c8 <__aeabi_dsub>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe ff48 	bl	8000b98 <__aeabi_d2iz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38

        // Coordonnées du point suivant
        int x2 = 80 + ((i + 1) * 30);
 8001d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	4613      	mov	r3, r2
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	3350      	adds	r3, #80	@ 0x50
 8001d1a:	637b      	str	r3, [r7, #52]	@ 0x34
        int y2 = 200 + offsetY - ((humidities[i + 1] - 0) * 1.5);
 8001d1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d1e:	33c8      	adds	r3, #200	@ 0xc8
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fc1f 	bl	8000564 <__aeabi_i2d>
 8001d26:	4604      	mov	r4, r0
 8001d28:	460d      	mov	r5, r1
 8001d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc26 	bl	8000588 <__aeabi_f2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b33      	ldr	r3, [pc, #204]	@ (8001e10 <draw_humidity_graph+0x2e0>)
 8001d42:	f7fe fc79 	bl	8000638 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f7fe fabb 	bl	80002c8 <__aeabi_dsub>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe ff1d 	bl	8000b98 <__aeabi_d2iz>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	633b      	str	r3, [r7, #48]	@ 0x30

        // Tracer le point et la ligne
        BSP_LCD_FillCircle(x1, y1, 2); // Cercle pour le point
 8001d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d68:	b291      	uxth	r1, r2
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f004 fd43 	bl	80067f8 <BSP_LCD_FillCircle>
        BSP_LCD_DrawLine(x1, y1, x2, y2); // Ligne entre les points
 8001d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d74:	b298      	uxth	r0, r3
 8001d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f004 f9dd 	bl	8006140 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points - 1; i++) {
 8001d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d88:	3301      	adds	r3, #1
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d92:	429a      	cmp	r2, r3
 8001d94:	db91      	blt.n	8001cba <draw_humidity_graph+0x18a>
    }

    // Dernier point
    int last_x = 80 + ((num_points - 1) * 30);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	1e5a      	subs	r2, r3, #1
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	3350      	adds	r3, #80	@ 0x50
 8001da4:	647b      	str	r3, [r7, #68]	@ 0x44
    int last_y = 200 + offsetY - ((humidities[num_points - 1] - 0) * 2);
 8001da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da8:	33c8      	adds	r3, #200	@ 0xc8
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd0:	ee17 3a90 	vmov	r3, s15
 8001dd4:	643b      	str	r3, [r7, #64]	@ 0x40
    BSP_LCD_FillCircle(last_x, last_y, 2); // Point final
 8001dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ddc:	b291      	uxth	r1, r2
 8001dde:	2202      	movs	r2, #2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fd09 	bl	80067f8 <BSP_LCD_FillCircle>
}
 8001de6:	bf00      	nop
 8001de8:	3758      	adds	r7, #88	@ 0x58
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bdb0      	pop	{r4, r5, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20003d60 	.word	0x20003d60
 8001df4:	20004f0c 	.word	0x20004f0c
 8001df8:	08012dbc 	.word	0x08012dbc
 8001dfc:	08012da0 	.word	0x08012da0
 8001e00:	08012dc8 	.word	0x08012dc8
 8001e04:	08012db4 	.word	0x08012db4
 8001e08:	08012db8 	.word	0x08012db8
 8001e0c:	ff0000ff 	.word	0xff0000ff
 8001e10:	3ff80000 	.word	0x3ff80000

08001e14 <update_humidity_graph>:


void update_humidity_graph(float humidity, uint32_t current_time) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e1e:	6038      	str	r0, [r7, #0]
    // Ajouter la nouvelle humidité et l'heure dans le tableau
    if (current_point < MAX_POINTS) {
 8001e20:	4b22      	ldr	r3, [pc, #136]	@ (8001eac <update_humidity_graph+0x98>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	dc12      	bgt.n	8001e4e <update_humidity_graph+0x3a>
        humidities[current_point] = humidity;
 8001e28:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <update_humidity_graph+0x98>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a20      	ldr	r2, [pc, #128]	@ (8001eb0 <update_humidity_graph+0x9c>)
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	601a      	str	r2, [r3, #0]
        times[current_point] = current_time;
 8001e36:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <update_humidity_graph+0x98>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	491e      	ldr	r1, [pc, #120]	@ (8001eb4 <update_humidity_graph+0xa0>)
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        current_point++;
 8001e42:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <update_humidity_graph+0x98>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	4a18      	ldr	r2, [pc, #96]	@ (8001eac <update_humidity_graph+0x98>)
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e022      	b.n	8001e94 <update_humidity_graph+0x80>
    } else {
        // Déplacer tous les points pour faire de la place au nouveau point
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e016      	b.n	8001e82 <update_humidity_graph+0x6e>
            humidities[i] = humidities[i + 1];
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3301      	adds	r3, #1
 8001e58:	4a15      	ldr	r2, [pc, #84]	@ (8001eb0 <update_humidity_graph+0x9c>)
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4913      	ldr	r1, [pc, #76]	@ (8001eb0 <update_humidity_graph+0x9c>)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	601a      	str	r2, [r3, #0]
            times[i] = times[i + 1];
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <update_humidity_graph+0xa0>)
 8001e70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e74:	490f      	ldr	r1, [pc, #60]	@ (8001eb4 <update_humidity_graph+0xa0>)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	dde5      	ble.n	8001e54 <update_humidity_graph+0x40>
        }
        humidities[MAX_POINTS - 1] = humidity;
 8001e88:	4a09      	ldr	r2, [pc, #36]	@ (8001eb0 <update_humidity_graph+0x9c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6253      	str	r3, [r2, #36]	@ 0x24
        times[MAX_POINTS - 1] = current_time;
 8001e8e:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <update_humidity_graph+0xa0>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    // Redessiner le graphique avec les nouvelles données
    draw_humidity_graph(humidities, times, current_point);
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <update_humidity_graph+0x98>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4906      	ldr	r1, [pc, #24]	@ (8001eb4 <update_humidity_graph+0xa0>)
 8001e9c:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <update_humidity_graph+0x9c>)
 8001e9e:	f7ff fe47 	bl	8001b30 <draw_humidity_graph>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20005174 	.word	0x20005174
 8001eb0:	20005178 	.word	0x20005178
 8001eb4:	2000514c 	.word	0x2000514c

08001eb8 <draw_pressure_graph>:

#define MAX_POINTS 10
float pressures[MAX_POINTS];
uint32_t times[MAX_POINTS];

void draw_pressure_graph(float *pressures, uint32_t *times, int num_points) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b096      	sub	sp, #88	@ 0x58
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
    int offsetY = 20; // Décalage vers le bas
 8001ec4:	2314      	movs	r3, #20
 8001ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Effacer l'écran
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f003 fef8 	bl	8005cc0 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, 480, 275); // Effacer l'écran (fond blanc)
 8001ed0:	f240 1313 	movw	r3, #275	@ 0x113
 8001ed4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2000      	movs	r0, #0
 8001edc:	f004 fc12 	bl	8006704 <BSP_LCD_FillRect>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001ee0:	4a57      	ldr	r2, [pc, #348]	@ (8002040 <draw_pressure_graph+0x188>)
 8001ee2:	210a      	movs	r1, #10
 8001ee4:	200a      	movs	r0, #10
 8001ee6:	f004 fb5b 	bl	80065a0 <BSP_LCD_DrawBitmap>

    // Couleur des axes
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001eea:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001eee:	f003 fee7 	bl	8005cc0 <BSP_LCD_SetTextColor>

    // Ajouter un titre
    BSP_LCD_SetFont(&Font16); // Police pour le titre
 8001ef2:	4854      	ldr	r0, [pc, #336]	@ (8002044 <draw_pressure_graph+0x18c>)
 8001ef4:	f003 ff16 	bl	8005d24 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10 + offsetY, (uint8_t *)"Pressure", CENTER_MODE);
 8001ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	330a      	adds	r3, #10
 8001efe:	b299      	uxth	r1, r3
 8001f00:	2301      	movs	r3, #1
 8001f02:	4a51      	ldr	r2, [pc, #324]	@ (8002048 <draw_pressure_graph+0x190>)
 8001f04:	2000      	movs	r0, #0
 8001f06:	f003 ff93 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Dessiner les axes
    BSP_LCD_DrawLine(80, 200 + offsetY, 400, 200 + offsetY); // Axe X (horizontal)
 8001f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	33c8      	adds	r3, #200	@ 0xc8
 8001f10:	b299      	uxth	r1, r3
 8001f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	33c8      	adds	r3, #200	@ 0xc8
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001f1e:	2050      	movs	r0, #80	@ 0x50
 8001f20:	f004 f90e 	bl	8006140 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(80, 200 + offsetY, 80, 50 + offsetY);   // Axe Y (vertical)
 8001f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	33c8      	adds	r3, #200	@ 0xc8
 8001f2a:	b299      	uxth	r1, r3
 8001f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3332      	adds	r3, #50	@ 0x32
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2250      	movs	r2, #80	@ 0x50
 8001f36:	2050      	movs	r0, #80	@ 0x50
 8001f38:	f004 f902 	bl	8006140 <BSP_LCD_DrawLine>

    // Ajouter des noms aux axes
    BSP_LCD_SetFont(&Font16); // Police pour les axes
 8001f3c:	4841      	ldr	r0, [pc, #260]	@ (8002044 <draw_pressure_graph+0x18c>)
 8001f3e:	f003 fef1 	bl	8005d24 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(190, 210 + offsetY, (uint8_t *)"Time(sec)", CENTER_MODE); // Nom de l'axe X
 8001f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	33d2      	adds	r3, #210	@ 0xd2
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	4a3f      	ldr	r2, [pc, #252]	@ (800204c <draw_pressure_graph+0x194>)
 8001f4e:	20be      	movs	r0, #190	@ 0xbe
 8001f50:	f003 ff6e 	bl	8005e30 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(25, 30 + offsetY, (uint8_t *)"Pressure(hPa)", LEFT_MODE); // Nom de l'axe Y
 8001f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	331e      	adds	r3, #30
 8001f5a:	b299      	uxth	r1, r3
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	@ (8002050 <draw_pressure_graph+0x198>)
 8001f60:	2019      	movs	r0, #25
 8001f62:	f003 ff65 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    // Ajouter des graduations sur l'axe Y (pression de 0 à 1200 hPa)
    for (int i = 0; i <= 6; i++) {
 8001f66:	2300      	movs	r3, #0
 8001f68:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f6a:	e028      	b.n	8001fbe <draw_pressure_graph+0x106>
        int y = 200 + offsetY - (i * 25); // Espacement uniforme entre graduations (25 px)
 8001f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f6e:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8001f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f74:	f06f 0118 	mvn.w	r1, #24
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
        char label[10];
        sprintf(label, "%d", i * 200); // Pression (0 à 1200 hPa par pas de 200 hPa)
 8001f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f82:	22c8      	movs	r2, #200	@ 0xc8
 8001f84:	fb03 f202 	mul.w	r2, r3, r2
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4931      	ldr	r1, [pc, #196]	@ (8002054 <draw_pressure_graph+0x19c>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f00e fd26 	bl	80109e0 <siprintf>
        BSP_LCD_DisplayStringAt(50, y - 5, (uint8_t *)label, LEFT_MODE);
 8001f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b05      	subs	r3, #5
 8001f9a:	b299      	uxth	r1, r3
 8001f9c:	f107 021c 	add.w	r2, r7, #28
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	2032      	movs	r0, #50	@ 0x32
 8001fa4:	f003 ff44 	bl	8005e30 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(75, y, 80, y); // Petite graduation
 8001fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001faa:	b299      	uxth	r1, r3
 8001fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2250      	movs	r2, #80	@ 0x50
 8001fb2:	204b      	movs	r0, #75	@ 0x4b
 8001fb4:	f004 f8c4 	bl	8006140 <BSP_LCD_DrawLine>
    for (int i = 0; i <= 6; i++) {
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fba:	3301      	adds	r3, #1
 8001fbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc0:	2b06      	cmp	r3, #6
 8001fc2:	ddd3      	ble.n	8001f6c <draw_pressure_graph+0xb4>
    }

    // Ajouter des graduations sur l'axe X (temps)
    for (int i = 0; i < num_points; i++) {
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fc8:	e02f      	b.n	800202a <draw_pressure_graph+0x172>
        int x = 80 + (i * 30); // Position X des graduations
 8001fca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	3350      	adds	r3, #80	@ 0x50
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        char label[10];
        sprintf(label, "%lu", times[i]); // Afficher le temps en secondes
 8001fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	4413      	add	r3, r2
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	491c      	ldr	r1, [pc, #112]	@ (8002058 <draw_pressure_graph+0x1a0>)
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f00e fcf9 	bl	80109e0 <siprintf>
        BSP_LCD_DisplayStringAt(x - 20, 210 + offsetY, (uint8_t *)label, LEFT_MODE);
 8001fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b14      	subs	r3, #20
 8001ff4:	b298      	uxth	r0, r3
 8001ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	33d2      	adds	r3, #210	@ 0xd2
 8001ffc:	b299      	uxth	r1, r3
 8001ffe:	f107 0210 	add.w	r2, r7, #16
 8002002:	2303      	movs	r3, #3
 8002004:	f003 ff14 	bl	8005e30 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(x, 200 + offsetY, x, 195 + offsetY); // Petite graduation
 8002008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200a:	b298      	uxth	r0, r3
 800200c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800200e:	b29b      	uxth	r3, r3
 8002010:	33c8      	adds	r3, #200	@ 0xc8
 8002012:	b299      	uxth	r1, r3
 8002014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002016:	b29a      	uxth	r2, r3
 8002018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800201a:	b29b      	uxth	r3, r3
 800201c:	33c3      	adds	r3, #195	@ 0xc3
 800201e:	b29b      	uxth	r3, r3
 8002020:	f004 f88e 	bl	8006140 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points; i++) {
 8002024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002026:	3301      	adds	r3, #1
 8002028:	653b      	str	r3, [r7, #80]	@ 0x50
 800202a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	dbcb      	blt.n	8001fca <draw_pressure_graph+0x112>
    }

    // Tracer les points et relier par des lignes
    BSP_LCD_SetTextColor(LCD_COLOR_RED); // Utilisation d'une couleur rouge pour le graphique de pression
 8002032:	480a      	ldr	r0, [pc, #40]	@ (800205c <draw_pressure_graph+0x1a4>)
 8002034:	f003 fe44 	bl	8005cc0 <BSP_LCD_SetTextColor>

    // Ajuster l'échelle de la pression pour l'affichage (0 à 1200 hPa)
    for (int i = 0; i < num_points - 1; i++) {
 8002038:	2300      	movs	r3, #0
 800203a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800203c:	e08f      	b.n	800215e <draw_pressure_graph+0x2a6>
 800203e:	bf00      	nop
 8002040:	20003d60 	.word	0x20003d60
 8002044:	20004f0c 	.word	0x20004f0c
 8002048:	08012dd4 	.word	0x08012dd4
 800204c:	08012de0 	.word	0x08012de0
 8002050:	08012dec 	.word	0x08012dec
 8002054:	08012db4 	.word	0x08012db4
 8002058:	08012db8 	.word	0x08012db8
 800205c:	ffff0000 	.word	0xffff0000
 8002060:	43160000 	.word	0x43160000
 8002064:	44960000 	.word	0x44960000
        // Coordonnées du point courant
        int x1 = 80 + (i * 30);
 8002068:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	3350      	adds	r3, #80	@ 0x50
 8002074:	637b      	str	r3, [r7, #52]	@ 0x34
        int y1 = 200 + offsetY - (pressures[i] * 150 / 1200); // Calcul de l'échelle pour la pression
 8002076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002078:	33c8      	adds	r3, #200	@ 0xc8
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002082:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4413      	add	r3, r2
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ed5f 6a0c 	vldr	s13, [pc, #-48]	@ 8002060 <draw_pressure_graph+0x1a8>
 8002092:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002096:	ed1f 6a0d 	vldr	s12, [pc, #-52]	@ 8002064 <draw_pressure_graph+0x1ac>
 800209a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800209e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a6:	ee17 3a90 	vmov	r3, s15
 80020aa:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Vérification des coordonnées y1
        if (y1 < 50 + offsetY) y1 = 50 + offsetY; // Limiter à l'axe Y bas
 80020ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ae:	3331      	adds	r3, #49	@ 0x31
 80020b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020b2:	429a      	cmp	r2, r3
 80020b4:	dc02      	bgt.n	80020bc <draw_pressure_graph+0x204>
 80020b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020b8:	3332      	adds	r3, #50	@ 0x32
 80020ba:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (y1 > 200 + offsetY) y1 = 200 + offsetY; // Limiter à l'axe Y haut
 80020bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020be:	33c8      	adds	r3, #200	@ 0xc8
 80020c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dd02      	ble.n	80020cc <draw_pressure_graph+0x214>
 80020c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020c8:	33c8      	adds	r3, #200	@ 0xc8
 80020ca:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Coordonnées du point suivant
        int x2 = 80 + ((i + 1) * 30);
 80020cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	3350      	adds	r3, #80	@ 0x50
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
        int y2 = 200 + offsetY - (pressures[i + 1] * 150 / 1200);
 80020dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020de:	33c8      	adds	r3, #200	@ 0xc8
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020ea:	3301      	adds	r3, #1
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	ed5f 6a26 	vldr	s13, [pc, #-152]	@ 8002060 <draw_pressure_graph+0x1a8>
 80020fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020fe:	ed1f 6a27 	vldr	s12, [pc, #-156]	@ 8002064 <draw_pressure_graph+0x1ac>
 8002102:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800210a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210e:	ee17 3a90 	vmov	r3, s15
 8002112:	647b      	str	r3, [r7, #68]	@ 0x44

        // Vérification des coordonnées y2
        if (y2 < 50 + offsetY) y2 = 50 + offsetY; // Limiter à l'axe Y bas
 8002114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002116:	3331      	adds	r3, #49	@ 0x31
 8002118:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800211a:	429a      	cmp	r2, r3
 800211c:	dc02      	bgt.n	8002124 <draw_pressure_graph+0x26c>
 800211e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002120:	3332      	adds	r3, #50	@ 0x32
 8002122:	647b      	str	r3, [r7, #68]	@ 0x44
        if (y2 > 200 + offsetY) y2 = 200 + offsetY; // Limiter à l'axe Y haut
 8002124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002126:	33c8      	adds	r3, #200	@ 0xc8
 8002128:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800212a:	429a      	cmp	r2, r3
 800212c:	dd02      	ble.n	8002134 <draw_pressure_graph+0x27c>
 800212e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002130:	33c8      	adds	r3, #200	@ 0xc8
 8002132:	647b      	str	r3, [r7, #68]	@ 0x44

        // Tracer le point et la ligne
        BSP_LCD_FillCircle(x1, y1, 2); // Cercle pour le point
 8002134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002136:	b29b      	uxth	r3, r3
 8002138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800213a:	b291      	uxth	r1, r2
 800213c:	2202      	movs	r2, #2
 800213e:	4618      	mov	r0, r3
 8002140:	f004 fb5a 	bl	80067f8 <BSP_LCD_FillCircle>
        BSP_LCD_DrawLine(x1, y1, x2, y2); // Ligne entre les points
 8002144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002146:	b298      	uxth	r0, r3
 8002148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800214a:	b299      	uxth	r1, r3
 800214c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214e:	b29a      	uxth	r2, r3
 8002150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002152:	b29b      	uxth	r3, r3
 8002154:	f003 fff4 	bl	8006140 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points - 1; i++) {
 8002158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800215a:	3301      	adds	r3, #1
 800215c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3b01      	subs	r3, #1
 8002162:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002164:	429a      	cmp	r2, r3
 8002166:	f6ff af7f 	blt.w	8002068 <draw_pressure_graph+0x1b0>
    }

    // Dernier point
    int last_x = 80 + ((num_points - 1) * 30);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	3350      	adds	r3, #80	@ 0x50
 8002178:	63bb      	str	r3, [r7, #56]	@ 0x38
    int last_y = 200 + offsetY - (pressures[num_points - 1] * 150 / 1200);
 800217a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217c:	33c8      	adds	r3, #200	@ 0xc8
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ed5f 6a4f 	vldr	s13, [pc, #-316]	@ 8002060 <draw_pressure_graph+0x1a8>
 800219c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021a0:	ed1f 6a50 	vldr	s12, [pc, #-320]	@ 8002064 <draw_pressure_graph+0x1ac>
 80021a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b0:	ee17 3a90 	vmov	r3, s15
 80021b4:	643b      	str	r3, [r7, #64]	@ 0x40

    // Vérification de la position du dernier point
    if (last_y < 50 + offsetY) last_y = 50 + offsetY;
 80021b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021b8:	3331      	adds	r3, #49	@ 0x31
 80021ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021bc:	429a      	cmp	r2, r3
 80021be:	dc02      	bgt.n	80021c6 <draw_pressure_graph+0x30e>
 80021c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c2:	3332      	adds	r3, #50	@ 0x32
 80021c4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (last_y > 200 + offsetY) last_y = 200 + offsetY;
 80021c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c8:	33c8      	adds	r3, #200	@ 0xc8
 80021ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021cc:	429a      	cmp	r2, r3
 80021ce:	dd02      	ble.n	80021d6 <draw_pressure_graph+0x31e>
 80021d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d2:	33c8      	adds	r3, #200	@ 0xc8
 80021d4:	643b      	str	r3, [r7, #64]	@ 0x40

    BSP_LCD_FillCircle(last_x, last_y, 2); // Point final
 80021d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d8:	b29b      	uxth	r3, r3
 80021da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021dc:	b291      	uxth	r1, r2
 80021de:	2202      	movs	r2, #2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f004 fb09 	bl	80067f8 <BSP_LCD_FillCircle>
}
 80021e6:	bf00      	nop
 80021e8:	3758      	adds	r7, #88	@ 0x58
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop

080021f0 <update_pressure_graph>:


void update_pressure_graph(float pressure, uint32_t current_time) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80021fa:	6038      	str	r0, [r7, #0]
    // Ajouter la nouvelle pression et l'heure dans le tableau
    if (current_point < MAX_POINTS) {
 80021fc:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <update_pressure_graph+0x98>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b09      	cmp	r3, #9
 8002202:	dc12      	bgt.n	800222a <update_pressure_graph+0x3a>
        pressures[current_point] = pressure;
 8002204:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <update_pressure_graph+0x98>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a20      	ldr	r2, [pc, #128]	@ (800228c <update_pressure_graph+0x9c>)
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]
        times[current_point] = current_time;
 8002212:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <update_pressure_graph+0x98>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	491e      	ldr	r1, [pc, #120]	@ (8002290 <update_pressure_graph+0xa0>)
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        current_point++;
 800221e:	4b1a      	ldr	r3, [pc, #104]	@ (8002288 <update_pressure_graph+0x98>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <update_pressure_graph+0x98>)
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e022      	b.n	8002270 <update_pressure_graph+0x80>
    } else {
        // Déplacer tous les points pour faire de la place au nouveau point
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e016      	b.n	800225e <update_pressure_graph+0x6e>
            pressures[i] = pressures[i + 1];
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3301      	adds	r3, #1
 8002234:	4a15      	ldr	r2, [pc, #84]	@ (800228c <update_pressure_graph+0x9c>)
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4913      	ldr	r1, [pc, #76]	@ (800228c <update_pressure_graph+0x9c>)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	601a      	str	r2, [r3, #0]
            times[i] = times[i + 1];
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3301      	adds	r3, #1
 800224a:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <update_pressure_graph+0xa0>)
 800224c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002250:	490f      	ldr	r1, [pc, #60]	@ (8002290 <update_pressure_graph+0xa0>)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3301      	adds	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b08      	cmp	r3, #8
 8002262:	dde5      	ble.n	8002230 <update_pressure_graph+0x40>
        }
        pressures[MAX_POINTS - 1] = pressure;
 8002264:	4a09      	ldr	r2, [pc, #36]	@ (800228c <update_pressure_graph+0x9c>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6253      	str	r3, [r2, #36]	@ 0x24
        times[MAX_POINTS - 1] = current_time;
 800226a:	4a09      	ldr	r2, [pc, #36]	@ (8002290 <update_pressure_graph+0xa0>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    // Redessiner le graphique avec les nouvelles données
    draw_pressure_graph(pressures, times, current_point);
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <update_pressure_graph+0x98>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4906      	ldr	r1, [pc, #24]	@ (8002290 <update_pressure_graph+0xa0>)
 8002278:	4804      	ldr	r0, [pc, #16]	@ (800228c <update_pressure_graph+0x9c>)
 800227a:	f7ff fe1d 	bl	8001eb8 <draw_pressure_graph>
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20005174 	.word	0x20005174
 800228c:	200051a0 	.word	0x200051a0
 8002290:	2000514c 	.word	0x2000514c

08002294 <linear_interpolation>:
static int32_t platform_write_hts221(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len);
static int32_t platform_read_hts221(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len);
static void platform_delay_hts221(uint32_t ms);

float linear_interpolation(lin_t *lin, int16_t x)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80022ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80022cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
								   (lin->x0 * lin->y1)))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	ed93 6a00 	vldr	s12, [r3]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80022dc:	ee66 7a27 	vmul.f32	s15, s12, s15
return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 80022e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022e4:	ee37 7a27 	vadd.f32	s14, s14, s15
	   / (lin->x1 - lin->x0);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022fc:	eef0 7a66 	vmov.f32	s15, s13
}
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <init_HumTemp>:


void init_HumTemp(void) {
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
    dev_ctx1.write_reg = platform_write_hts221;
 8002314:	4b23      	ldr	r3, [pc, #140]	@ (80023a4 <init_HumTemp+0x94>)
 8002316:	4a24      	ldr	r2, [pc, #144]	@ (80023a8 <init_HumTemp+0x98>)
 8002318:	601a      	str	r2, [r3, #0]
    dev_ctx1.read_reg = platform_read_hts221;
 800231a:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <init_HumTemp+0x94>)
 800231c:	4a23      	ldr	r2, [pc, #140]	@ (80023ac <init_HumTemp+0x9c>)
 800231e:	605a      	str	r2, [r3, #4]
    dev_ctx1.mdelay = platform_delay_hts221;
 8002320:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <init_HumTemp+0x94>)
 8002322:	4a23      	ldr	r2, [pc, #140]	@ (80023b0 <init_HumTemp+0xa0>)
 8002324:	609a      	str	r2, [r3, #8]
    dev_ctx1.handle = &SENSOR_BUS;
 8002326:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <init_HumTemp+0x94>)
 8002328:	4a22      	ldr	r2, [pc, #136]	@ (80023b4 <init_HumTemp+0xa4>)
 800232a:	60da      	str	r2, [r3, #12]

    whoamI = 0;
 800232c:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <init_HumTemp+0xa8>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
    hts221_device_id_get(&dev_ctx1, &whoamI);
 8002332:	4921      	ldr	r1, [pc, #132]	@ (80023b8 <init_HumTemp+0xa8>)
 8002334:	481b      	ldr	r0, [pc, #108]	@ (80023a4 <init_HumTemp+0x94>)
 8002336:	f00d f8fb 	bl	800f530 <hts221_device_id_get>

    if ( whoamI != HTS221_ID )
 800233a:	4b1f      	ldr	r3, [pc, #124]	@ (80023b8 <init_HumTemp+0xa8>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2bbc      	cmp	r3, #188	@ 0xbc
 8002340:	d001      	beq.n	8002346 <init_HumTemp+0x36>
       while (1);
 8002342:	bf00      	nop
 8002344:	e7fd      	b.n	8002342 <init_HumTemp+0x32>

    hts221_hum_adc_point_0_get(&dev_ctx1, &lin_hum.x0);
 8002346:	491d      	ldr	r1, [pc, #116]	@ (80023bc <init_HumTemp+0xac>)
 8002348:	4816      	ldr	r0, [pc, #88]	@ (80023a4 <init_HumTemp+0x94>)
 800234a:	f00d f9d7 	bl	800f6fc <hts221_hum_adc_point_0_get>
    hts221_hum_rh_point_0_get(&dev_ctx1, &lin_hum.y0);
 800234e:	491c      	ldr	r1, [pc, #112]	@ (80023c0 <init_HumTemp+0xb0>)
 8002350:	4814      	ldr	r0, [pc, #80]	@ (80023a4 <init_HumTemp+0x94>)
 8002352:	f00d f935 	bl	800f5c0 <hts221_hum_rh_point_0_get>
    hts221_hum_adc_point_1_get(&dev_ctx1, &lin_hum.x1);
 8002356:	491b      	ldr	r1, [pc, #108]	@ (80023c4 <init_HumTemp+0xb4>)
 8002358:	4812      	ldr	r0, [pc, #72]	@ (80023a4 <init_HumTemp+0x94>)
 800235a:	f00d f9f1 	bl	800f740 <hts221_hum_adc_point_1_get>
    hts221_hum_rh_point_1_get(&dev_ctx1, &lin_hum.y1);
 800235e:	491a      	ldr	r1, [pc, #104]	@ (80023c8 <init_HumTemp+0xb8>)
 8002360:	4810      	ldr	r0, [pc, #64]	@ (80023a4 <init_HumTemp+0x94>)
 8002362:	f00d f94b 	bl	800f5fc <hts221_hum_rh_point_1_get>

    hts221_temp_adc_point_0_get(&dev_ctx1, &lin_temp.x0);
 8002366:	4919      	ldr	r1, [pc, #100]	@ (80023cc <init_HumTemp+0xbc>)
 8002368:	480e      	ldr	r0, [pc, #56]	@ (80023a4 <init_HumTemp+0x94>)
 800236a:	f00d fa0b 	bl	800f784 <hts221_temp_adc_point_0_get>
    hts221_temp_deg_point_0_get(&dev_ctx1, &lin_temp.y0);
 800236e:	4918      	ldr	r1, [pc, #96]	@ (80023d0 <init_HumTemp+0xc0>)
 8002370:	480c      	ldr	r0, [pc, #48]	@ (80023a4 <init_HumTemp+0x94>)
 8002372:	f00d f961 	bl	800f638 <hts221_temp_deg_point_0_get>
    hts221_temp_adc_point_1_get(&dev_ctx1, &lin_temp.x1);
 8002376:	4917      	ldr	r1, [pc, #92]	@ (80023d4 <init_HumTemp+0xc4>)
 8002378:	480a      	ldr	r0, [pc, #40]	@ (80023a4 <init_HumTemp+0x94>)
 800237a:	f00d fa25 	bl	800f7c8 <hts221_temp_adc_point_1_get>
    hts221_temp_deg_point_1_get(&dev_ctx1, &lin_temp.y1);
 800237e:	4916      	ldr	r1, [pc, #88]	@ (80023d8 <init_HumTemp+0xc8>)
 8002380:	4808      	ldr	r0, [pc, #32]	@ (80023a4 <init_HumTemp+0x94>)
 8002382:	f00d f98a 	bl	800f69a <hts221_temp_deg_point_1_get>

    hts221_block_data_update_set(&dev_ctx1, PROPERTY_ENABLE);
 8002386:	2101      	movs	r1, #1
 8002388:	4806      	ldr	r0, [pc, #24]	@ (80023a4 <init_HumTemp+0x94>)
 800238a:	f00d f867 	bl	800f45c <hts221_block_data_update_set>
    hts221_data_rate_set(&dev_ctx1, HTS221_ODR_1Hz);
 800238e:	2101      	movs	r1, #1
 8002390:	4804      	ldr	r0, [pc, #16]	@ (80023a4 <init_HumTemp+0x94>)
 8002392:	f00d f83d 	bl	800f410 <hts221_data_rate_set>
    hts221_power_on_set(&dev_ctx1, PROPERTY_ENABLE);
 8002396:	2101      	movs	r1, #1
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <init_HumTemp+0x94>)
 800239a:	f00d f8da 	bl	800f552 <hts221_power_on_set>

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200055c0 	.word	0x200055c0
 80023a8:	08002645 	.word	0x08002645
 80023ac:	08002687 	.word	0x08002687
 80023b0:	080026c9 	.word	0x080026c9
 80023b4:	20005ae0 	.word	0x20005ae0
 80023b8:	200051d4 	.word	0x200051d4
 80023bc:	200055d0 	.word	0x200055d0
 80023c0:	200055d4 	.word	0x200055d4
 80023c4:	200055d8 	.word	0x200055d8
 80023c8:	200055dc 	.word	0x200055dc
 80023cc:	200055e0 	.word	0x200055e0
 80023d0:	200055e4 	.word	0x200055e4
 80023d4:	200055e8 	.word	0x200055e8
 80023d8:	200055ec 	.word	0x200055ec

080023dc <valeur_Hum>:


void valeur_Hum(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af02      	add	r7, sp, #8
	hts221_reg_t reg1;
	hts221_status_get(&dev_ctx1, &reg1.status_reg);
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	482d      	ldr	r0, [pc, #180]	@ (800249c <valeur_Hum+0xc0>)
 80023e8:	f00d f8d9 	bl	800f59e <hts221_status_get>
    if (reg1.status_reg.h_da) {
 80023ec:	793b      	ldrb	r3, [r7, #4]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d04d      	beq.n	8002494 <valeur_Hum+0xb8>
        memset(&data_raw_humidity, 0x00, sizeof(int16_t));
 80023f8:	4b29      	ldr	r3, [pc, #164]	@ (80024a0 <valeur_Hum+0xc4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	801a      	strh	r2, [r3, #0]
        hts221_humidity_raw_get(&dev_ctx1, &data_raw_humidity);
 80023fe:	4928      	ldr	r1, [pc, #160]	@ (80024a0 <valeur_Hum+0xc4>)
 8002400:	4826      	ldr	r0, [pc, #152]	@ (800249c <valeur_Hum+0xc0>)
 8002402:	f00d f851 	bl	800f4a8 <hts221_humidity_raw_get>
        humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 8002406:	4b26      	ldr	r3, [pc, #152]	@ (80024a0 <valeur_Hum+0xc4>)
 8002408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240c:	4619      	mov	r1, r3
 800240e:	4825      	ldr	r0, [pc, #148]	@ (80024a4 <valeur_Hum+0xc8>)
 8002410:	f7ff ff40 	bl	8002294 <linear_interpolation>
 8002414:	eef0 7a40 	vmov.f32	s15, s0
 8002418:	4b23      	ldr	r3, [pc, #140]	@ (80024a8 <valeur_Hum+0xcc>)
 800241a:	edc3 7a00 	vstr	s15, [r3]

        if (humidity_perc < 0) {
 800241e:	4b22      	ldr	r3, [pc, #136]	@ (80024a8 <valeur_Hum+0xcc>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	d503      	bpl.n	8002436 <valeur_Hum+0x5a>
            humidity_perc = 0;
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <valeur_Hum+0xcc>)
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
        }
        if (humidity_perc > 100) {
 8002436:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <valeur_Hum+0xcc>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80024ac <valeur_Hum+0xd0>
 8002440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	dd02      	ble.n	8002450 <valeur_Hum+0x74>
            humidity_perc = 100;
 800244a:	4b17      	ldr	r3, [pc, #92]	@ (80024a8 <valeur_Hum+0xcc>)
 800244c:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <valeur_Hum+0xd4>)
 800244e:	601a      	str	r2, [r3, #0]
        }

        snprintf((char *)tx_buffer, sizeof(tx_buffer), "%3.2f %%", humidity_perc);
 8002450:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <valeur_Hum+0xcc>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f897 	bl	8000588 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	e9cd 2300 	strd	r2, r3, [sp]
 8002462:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <valeur_Hum+0xd8>)
 8002464:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002468:	4813      	ldr	r0, [pc, #76]	@ (80024b8 <valeur_Hum+0xdc>)
 800246a:	f00e fa85 	bl	8010978 <sniprintf>
        //printf((char const *)tx_buffer);
        BSP_LCD_SetFont(&Font16);
 800246e:	4813      	ldr	r0, [pc, #76]	@ (80024bc <valeur_Hum+0xe0>)
 8002470:	f003 fc58 	bl	8005d24 <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(startX + squareSize + spacing + 20, startY + 70, (uint8_t*)tx_buffer, LEFT_MODE);
 8002474:	2228      	movs	r2, #40	@ 0x28
 8002476:	2378      	movs	r3, #120	@ 0x78
 8002478:	4413      	add	r3, r2
 800247a:	b29b      	uxth	r3, r3
 800247c:	221e      	movs	r2, #30
 800247e:	4413      	add	r3, r2
 8002480:	b29b      	uxth	r3, r3
 8002482:	3314      	adds	r3, #20
 8002484:	b298      	uxth	r0, r3
 8002486:	2350      	movs	r3, #80	@ 0x50
 8002488:	3346      	adds	r3, #70	@ 0x46
 800248a:	b299      	uxth	r1, r3
 800248c:	2303      	movs	r3, #3
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <valeur_Hum+0xdc>)
 8002490:	f003 fcce 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200055c0 	.word	0x200055c0
 80024a0:	200051c8 	.word	0x200051c8
 80024a4:	200055d0 	.word	0x200055d0
 80024a8:	200051cc 	.word	0x200051cc
 80024ac:	42c80000 	.word	0x42c80000
 80024b0:	42c80000 	.word	0x42c80000
 80024b4:	08012dfc 	.word	0x08012dfc
 80024b8:	200051d8 	.word	0x200051d8
 80024bc:	20004f0c 	.word	0x20004f0c

080024c0 <valeur_TempH>:


// Fonction principale pour lire les données et les afficher
void valeur_TempH(void){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af02      	add	r7, sp, #8

	hts221_reg_t reg1;
	hts221_status_get(&dev_ctx1, &reg1.status_reg);
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	4619      	mov	r1, r3
 80024ca:	481e      	ldr	r0, [pc, #120]	@ (8002544 <valeur_TempH+0x84>)
 80024cc:	f00d f867 	bl	800f59e <hts221_status_get>
    if (reg1.status_reg.t_da) {
 80024d0:	793b      	ldrb	r3, [r7, #4]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d02e      	beq.n	800253a <valeur_TempH+0x7a>
        memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80024dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002548 <valeur_TempH+0x88>)
 80024de:	2200      	movs	r2, #0
 80024e0:	801a      	strh	r2, [r3, #0]
        hts221_temperature_raw_get(&dev_ctx1, &data_raw_temperature);
 80024e2:	4919      	ldr	r1, [pc, #100]	@ (8002548 <valeur_TempH+0x88>)
 80024e4:	4817      	ldr	r0, [pc, #92]	@ (8002544 <valeur_TempH+0x84>)
 80024e6:	f00d f801 	bl	800f4ec <hts221_temperature_raw_get>
        temperature_degC = linear_interpolation(&lin_temp, data_raw_temperature);
 80024ea:	4b17      	ldr	r3, [pc, #92]	@ (8002548 <valeur_TempH+0x88>)
 80024ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f0:	4619      	mov	r1, r3
 80024f2:	4816      	ldr	r0, [pc, #88]	@ (800254c <valeur_TempH+0x8c>)
 80024f4:	f7ff fece 	bl	8002294 <linear_interpolation>
 80024f8:	eef0 7a40 	vmov.f32	s15, s0
 80024fc:	4b14      	ldr	r3, [pc, #80]	@ (8002550 <valeur_TempH+0x90>)
 80024fe:	edc3 7a00 	vstr	s15, [r3]
        snprintf((char *)tx_buffer, sizeof(tx_buffer), "%6.2f deg", temperature_degC);
 8002502:	4b13      	ldr	r3, [pc, #76]	@ (8002550 <valeur_TempH+0x90>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe f83e 	bl	8000588 <__aeabi_f2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	e9cd 2300 	strd	r2, r3, [sp]
 8002514:	4a0f      	ldr	r2, [pc, #60]	@ (8002554 <valeur_TempH+0x94>)
 8002516:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800251a:	480f      	ldr	r0, [pc, #60]	@ (8002558 <valeur_TempH+0x98>)
 800251c:	f00e fa2c 	bl	8010978 <sniprintf>
        //printf((char const *)tx_buffer);
        BSP_LCD_SetFont(&Font16);
 8002520:	480e      	ldr	r0, [pc, #56]	@ (800255c <valeur_TempH+0x9c>)
 8002522:	f003 fbff 	bl	8005d24 <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(startX+2, startY + 70, (uint8_t*)tx_buffer, LEFT_MODE);
 8002526:	2328      	movs	r3, #40	@ 0x28
 8002528:	3302      	adds	r3, #2
 800252a:	b298      	uxth	r0, r3
 800252c:	2350      	movs	r3, #80	@ 0x50
 800252e:	3346      	adds	r3, #70	@ 0x46
 8002530:	b299      	uxth	r1, r3
 8002532:	2303      	movs	r3, #3
 8002534:	4a08      	ldr	r2, [pc, #32]	@ (8002558 <valeur_TempH+0x98>)
 8002536:	f003 fc7b 	bl	8005e30 <BSP_LCD_DisplayStringAt>
    }
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200055c0 	.word	0x200055c0
 8002548:	200051ca 	.word	0x200051ca
 800254c:	200055e0 	.word	0x200055e0
 8002550:	200051d0 	.word	0x200051d0
 8002554:	08012e08 	.word	0x08012e08
 8002558:	200051d8 	.word	0x200051d8
 800255c:	20004f0c 	.word	0x20004f0c

08002560 <valeur_graph_TempH>:

extern float temperatures[MAX_POINTS]; // Tableau pour stocker les températures
extern uint8_t temp_index;
extern int current_point;

void valeur_graph_TempH(void) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
    hts221_reg_t reg1;
    hts221_status_get(&dev_ctx1, &reg1.status_reg);
 8002566:	463b      	mov	r3, r7
 8002568:	4619      	mov	r1, r3
 800256a:	4815      	ldr	r0, [pc, #84]	@ (80025c0 <valeur_graph_TempH+0x60>)
 800256c:	f00d f817 	bl	800f59e <hts221_status_get>

    if (reg1.status_reg.t_da) {
 8002570:	783b      	ldrb	r3, [r7, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01d      	beq.n	80025b8 <valeur_graph_TempH+0x58>
        // Lire la température brute du capteur
        memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <valeur_graph_TempH+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	801a      	strh	r2, [r3, #0]
        hts221_temperature_raw_get(&dev_ctx1, &data_raw_temperature);
 8002582:	4910      	ldr	r1, [pc, #64]	@ (80025c4 <valeur_graph_TempH+0x64>)
 8002584:	480e      	ldr	r0, [pc, #56]	@ (80025c0 <valeur_graph_TempH+0x60>)
 8002586:	f00c ffb1 	bl	800f4ec <hts221_temperature_raw_get>

        // Convertir la valeur brute en °C
        temperature_degC = linear_interpolation(&lin_temp, data_raw_temperature);
 800258a:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <valeur_graph_TempH+0x64>)
 800258c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002590:	4619      	mov	r1, r3
 8002592:	480d      	ldr	r0, [pc, #52]	@ (80025c8 <valeur_graph_TempH+0x68>)
 8002594:	f7ff fe7e 	bl	8002294 <linear_interpolation>
 8002598:	eef0 7a40 	vmov.f32	s15, s0
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <valeur_graph_TempH+0x6c>)
 800259e:	edc3 7a00 	vstr	s15, [r3]

        // Obtenir l'heure actuelle en secondes depuis le début (ou autre base temporelle)
        uint32_t current_time = get_current_time_in_seconds();
 80025a2:	f7fe fd0d 	bl	8000fc0 <get_current_time_in_seconds>
 80025a6:	6078      	str	r0, [r7, #4]

        // Ajouter la nouvelle valeur et mettre à jour le graphique
        update_temperature_graph(temperature_degC, current_time);
 80025a8:	4b08      	ldr	r3, [pc, #32]	@ (80025cc <valeur_graph_TempH+0x6c>)
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	eeb0 0a67 	vmov.f32	s0, s15
 80025b4:	f7ff fa6a 	bl	8001a8c <update_temperature_graph>

        // Rafraîchir le graphique s'il est affiché
        //draw_temperature_graph(temperature_degC, current_time, current_point);
    }
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	200055c0 	.word	0x200055c0
 80025c4:	200051ca 	.word	0x200051ca
 80025c8:	200055e0 	.word	0x200055e0
 80025cc:	200051d0 	.word	0x200051d0

080025d0 <value_humidity_graph>:

void value_humidity_graph(void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0

        hts221_reg_t reg1;
		hts221_status_get(&dev_ctx1, &reg1.status_reg);
 80025d6:	463b      	mov	r3, r7
 80025d8:	4619      	mov	r1, r3
 80025da:	4816      	ldr	r0, [pc, #88]	@ (8002634 <value_humidity_graph+0x64>)
 80025dc:	f00c ffdf 	bl	800f59e <hts221_status_get>
		if (reg1.status_reg.h_da) {
 80025e0:	783b      	ldrb	r3, [r7, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01f      	beq.n	800262c <value_humidity_graph+0x5c>
			memset(&data_raw_humidity, 0x00, sizeof(int16_t));
 80025ec:	4b12      	ldr	r3, [pc, #72]	@ (8002638 <value_humidity_graph+0x68>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	801a      	strh	r2, [r3, #0]
			hts221_humidity_raw_get(&dev_ctx1, &data_raw_humidity);
 80025f2:	4911      	ldr	r1, [pc, #68]	@ (8002638 <value_humidity_graph+0x68>)
 80025f4:	480f      	ldr	r0, [pc, #60]	@ (8002634 <value_humidity_graph+0x64>)
 80025f6:	f00c ff57 	bl	800f4a8 <hts221_humidity_raw_get>
			humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 80025fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002638 <value_humidity_graph+0x68>)
 80025fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002600:	4619      	mov	r1, r3
 8002602:	480e      	ldr	r0, [pc, #56]	@ (800263c <value_humidity_graph+0x6c>)
 8002604:	f7ff fe46 	bl	8002294 <linear_interpolation>
 8002608:	eef0 7a40 	vmov.f32	s15, s0
 800260c:	4b0c      	ldr	r3, [pc, #48]	@ (8002640 <value_humidity_graph+0x70>)
 800260e:	edc3 7a00 	vstr	s15, [r3]

			// Récupérer l'heure actuelle en minutes
			int32_t current_time = get_current_time_in_seconds();
 8002612:	f7fe fcd5 	bl	8000fc0 <get_current_time_in_seconds>
 8002616:	4603      	mov	r3, r0
 8002618:	607b      	str	r3, [r7, #4]
			// Ajouter les données
			update_humidity_graph(humidity_perc, current_time);
 800261a:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <value_humidity_graph+0x70>)
 800261c:	edd3 7a00 	vldr	s15, [r3]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4618      	mov	r0, r3
 8002624:	eeb0 0a67 	vmov.f32	s0, s15
 8002628:	f7ff fbf4 	bl	8001e14 <update_humidity_graph>
        }
}
 800262c:	bf00      	nop
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	200055c0 	.word	0x200055c0
 8002638:	200051c8 	.word	0x200051c8
 800263c:	200055d0 	.word	0x200055d0
 8002640:	200051cc 	.word	0x200051cc

08002644 <platform_write_hts221>:



static int32_t platform_write_hts221(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af04      	add	r7, sp, #16
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	607a      	str	r2, [r7, #4]
 800264e:	461a      	mov	r2, r3
 8002650:	460b      	mov	r3, r1
 8002652:	72fb      	strb	r3, [r7, #11]
 8002654:	4613      	mov	r3, r2
 8002656:	813b      	strh	r3, [r7, #8]
	  reg |= 0x80;
 8002658:	7afb      	ldrb	r3, [r7, #11]
 800265a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800265e:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg,
 8002660:	7afb      	ldrb	r3, [r7, #11]
 8002662:	b29a      	uxth	r2, r3
 8002664:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002668:	9302      	str	r3, [sp, #8]
 800266a:	893b      	ldrh	r3, [r7, #8]
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2301      	movs	r3, #1
 8002674:	21bf      	movs	r1, #191	@ 0xbf
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f006 fdb2 	bl	80091e0 <HAL_I2C_Mem_Write>
	                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	  return 0;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <platform_read_hts221>:

static int32_t platform_read_hts221(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8002686:	b580      	push	{r7, lr}
 8002688:	b088      	sub	sp, #32
 800268a:	af04      	add	r7, sp, #16
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	461a      	mov	r2, r3
 8002692:	460b      	mov	r3, r1
 8002694:	72fb      	strb	r3, [r7, #11]
 8002696:	4613      	mov	r3, r2
 8002698:	813b      	strh	r3, [r7, #8]
	  reg |= 0x80;
 800269a:	7afb      	ldrb	r3, [r7, #11]
 800269c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026a0:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg,
 80026a2:	7afb      	ldrb	r3, [r7, #11]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026aa:	9302      	str	r3, [sp, #8]
 80026ac:	893b      	ldrh	r3, [r7, #8]
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2301      	movs	r3, #1
 80026b6:	21bf      	movs	r1, #191	@ 0xbf
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f006 fea5 	bl	8009408 <HAL_I2C_Mem_Read>
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	  return 0;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <platform_delay_hts221>:

static void platform_delay_hts221(uint32_t ms) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f005 f809 	bl	80076e8 <HAL_Delay>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <init_Pression>:
stmdev_ctx_t dev_ctx;

lps22hh_reg_t reg;


void init_Pression(void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0

    dev_ctx.write_reg = platform_write;
 80026e4:	4b18      	ldr	r3, [pc, #96]	@ (8002748 <init_Pression+0x68>)
 80026e6:	4a19      	ldr	r2, [pc, #100]	@ (800274c <init_Pression+0x6c>)
 80026e8:	601a      	str	r2, [r3, #0]
    dev_ctx.read_reg = platform_read;
 80026ea:	4b17      	ldr	r3, [pc, #92]	@ (8002748 <init_Pression+0x68>)
 80026ec:	4a18      	ldr	r2, [pc, #96]	@ (8002750 <init_Pression+0x70>)
 80026ee:	605a      	str	r2, [r3, #4]
    dev_ctx.mdelay = platform_delay;
 80026f0:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <init_Pression+0x68>)
 80026f2:	4a18      	ldr	r2, [pc, #96]	@ (8002754 <init_Pression+0x74>)
 80026f4:	609a      	str	r2, [r3, #8]
    dev_ctx.handle = &SENSOR_BUS;
 80026f6:	4b14      	ldr	r3, [pc, #80]	@ (8002748 <init_Pression+0x68>)
 80026f8:	4a17      	ldr	r2, [pc, #92]	@ (8002758 <init_Pression+0x78>)
 80026fa:	60da      	str	r2, [r3, #12]

    platform_delay(BOOT_TIME);
 80026fc:	2005      	movs	r0, #5
 80026fe:	f000 f90f 	bl	8002920 <platform_delay>

    whoamI = 0;
 8002702:	4b16      	ldr	r3, [pc, #88]	@ (800275c <init_Pression+0x7c>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
    lps22hh_device_id_get(&dev_ctx, &whoamI);
 8002708:	4914      	ldr	r1, [pc, #80]	@ (800275c <init_Pression+0x7c>)
 800270a:	480f      	ldr	r0, [pc, #60]	@ (8002748 <init_Pression+0x68>)
 800270c:	f00d f96f 	bl	800f9ee <lps22hh_device_id_get>

    if (whoamI != LPS22HH_ID) {
 8002710:	4b12      	ldr	r3, [pc, #72]	@ (800275c <init_Pression+0x7c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2bb3      	cmp	r3, #179	@ 0xb3
 8002716:	d001      	beq.n	800271c <init_Pression+0x3c>
        while (1); // Gérer l'erreur si le capteur n'est pas trouvé
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <init_Pression+0x38>
    }

    lps22hh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800271c:	2101      	movs	r1, #1
 800271e:	480a      	ldr	r0, [pc, #40]	@ (8002748 <init_Pression+0x68>)
 8002720:	f00d f976 	bl	800fa10 <lps22hh_reset_set>

    do {
        lps22hh_reset_get(&dev_ctx, &rst);
 8002724:	490e      	ldr	r1, [pc, #56]	@ (8002760 <init_Pression+0x80>)
 8002726:	4808      	ldr	r0, [pc, #32]	@ (8002748 <init_Pression+0x68>)
 8002728:	f00d f998 	bl	800fa5c <lps22hh_reset_get>
    } while (rst);
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <init_Pression+0x80>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f7      	bne.n	8002724 <init_Pression+0x44>

    lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8002734:	2101      	movs	r1, #1
 8002736:	4804      	ldr	r0, [pc, #16]	@ (8002748 <init_Pression+0x68>)
 8002738:	f00d f8bc 	bl	800f8b4 <lps22hh_block_data_update_set>
    lps22hh_data_rate_set(&dev_ctx, LPS22HH_10_Hz_LOW_NOISE);
 800273c:	2112      	movs	r1, #18
 800273e:	4802      	ldr	r0, [pc, #8]	@ (8002748 <init_Pression+0x68>)
 8002740:	f00d f8de 	bl	800f900 <lps22hh_data_rate_set>
}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200059e4 	.word	0x200059e4
 800274c:	080028ad 	.word	0x080028ad
 8002750:	080028e7 	.word	0x080028e7
 8002754:	08002921 	.word	0x08002921
 8002758:	20005ae0 	.word	0x20005ae0
 800275c:	200055f8 	.word	0x200055f8
 8002760:	200055f9 	.word	0x200055f9

08002764 <valeur_Pression>:

void valeur_Pression(void) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af02      	add	r7, sp, #8


    lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 800276a:	2301      	movs	r3, #1
 800276c:	4a21      	ldr	r2, [pc, #132]	@ (80027f4 <valeur_Pression+0x90>)
 800276e:	2127      	movs	r1, #39	@ 0x27
 8002770:	4821      	ldr	r0, [pc, #132]	@ (80027f8 <valeur_Pression+0x94>)
 8002772:	f00d f84b 	bl	800f80c <lps22hh_read_reg>

    if (reg.status.p_da) {
 8002776:	4b1f      	ldr	r3, [pc, #124]	@ (80027f4 <valeur_Pression+0x90>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d034      	beq.n	80027ee <valeur_Pression+0x8a>
        memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8002784:	4b1d      	ldr	r3, [pc, #116]	@ (80027fc <valeur_Pression+0x98>)
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
        lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 800278a:	491c      	ldr	r1, [pc, #112]	@ (80027fc <valeur_Pression+0x98>)
 800278c:	481a      	ldr	r0, [pc, #104]	@ (80027f8 <valeur_Pression+0x94>)
 800278e:	f00d f905 	bl	800f99c <lps22hh_pressure_raw_get>
        pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 8002792:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <valeur_Pression+0x98>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f00d f874 	bl	800f884 <lps22hh_from_lsb_to_hpa>
 800279c:	eef0 7a40 	vmov.f32	s15, s0
 80027a0:	4b17      	ldr	r3, [pc, #92]	@ (8002800 <valeur_Pression+0x9c>)
 80027a2:	edc3 7a00 	vstr	s15, [r3]
        snprintf((char *)tx_buffer, sizeof(tx_buffer), "%6.2f hPa", pressure_hPa);
 80027a6:	4b16      	ldr	r3, [pc, #88]	@ (8002800 <valeur_Pression+0x9c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd feec 	bl	8000588 <__aeabi_f2d>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	e9cd 2300 	strd	r2, r3, [sp]
 80027b8:	4a12      	ldr	r2, [pc, #72]	@ (8002804 <valeur_Pression+0xa0>)
 80027ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027be:	4812      	ldr	r0, [pc, #72]	@ (8002808 <valeur_Pression+0xa4>)
 80027c0:	f00e f8da 	bl	8010978 <sniprintf>
        //printf((char const *)tx_buffer);
        BSP_LCD_SetFont(&Font16);
 80027c4:	4811      	ldr	r0, [pc, #68]	@ (800280c <valeur_Pression+0xa8>)
 80027c6:	f003 faad 	bl	8005d24 <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(startXP+2 * (squareSizeP + spacingP) + 20, startYP + 60, (uint8_t*)tx_buffer, LEFT_MODE);
 80027ca:	2278      	movs	r2, #120	@ 0x78
 80027cc:	2317      	movs	r3, #23
 80027ce:	4413      	add	r3, r2
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2228      	movs	r2, #40	@ 0x28
 80027d8:	4413      	add	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	3314      	adds	r3, #20
 80027de:	b298      	uxth	r0, r3
 80027e0:	2350      	movs	r3, #80	@ 0x50
 80027e2:	333c      	adds	r3, #60	@ 0x3c
 80027e4:	b299      	uxth	r1, r3
 80027e6:	2303      	movs	r3, #3
 80027e8:	4a07      	ldr	r2, [pc, #28]	@ (8002808 <valeur_Pression+0xa4>)
 80027ea:	f003 fb21 	bl	8005e30 <BSP_LCD_DisplayStringAt>

    }
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	200059f4 	.word	0x200059f4
 80027f8:	200059e4 	.word	0x200059e4
 80027fc:	200055f0 	.word	0x200055f0
 8002800:	200055f4 	.word	0x200055f4
 8002804:	08012e14 	.word	0x08012e14
 8002808:	200055fc 	.word	0x200055fc
 800280c:	20004f0c 	.word	0x20004f0c

08002810 <valeur_Pression_graph>:


void valeur_Pression_graph(void) {
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0


    lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8002816:	2301      	movs	r3, #1
 8002818:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <valeur_Pression_graph+0x60>)
 800281a:	2127      	movs	r1, #39	@ 0x27
 800281c:	4815      	ldr	r0, [pc, #84]	@ (8002874 <valeur_Pression_graph+0x64>)
 800281e:	f00c fff5 	bl	800f80c <lps22hh_read_reg>

    if (reg.status.p_da) {
 8002822:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <valeur_Pression_graph+0x60>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b00      	cmp	r3, #0
 800282e:	d01b      	beq.n	8002868 <valeur_Pression_graph+0x58>
        memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 8002830:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <valeur_Pression_graph+0x68>)
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
        lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8002836:	4910      	ldr	r1, [pc, #64]	@ (8002878 <valeur_Pression_graph+0x68>)
 8002838:	480e      	ldr	r0, [pc, #56]	@ (8002874 <valeur_Pression_graph+0x64>)
 800283a:	f00d f8af 	bl	800f99c <lps22hh_pressure_raw_get>
        pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 800283e:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <valeur_Pression_graph+0x68>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f00d f81e 	bl	800f884 <lps22hh_from_lsb_to_hpa>
 8002848:	eef0 7a40 	vmov.f32	s15, s0
 800284c:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <valeur_Pression_graph+0x6c>)
 800284e:	edc3 7a00 	vstr	s15, [r3]

        uint32_t current_time = get_current_time_in_seconds();
 8002852:	f7fe fbb5 	bl	8000fc0 <get_current_time_in_seconds>
 8002856:	6078      	str	r0, [r7, #4]

        update_pressure_graph(pressure_hPa, current_time);
 8002858:	4b08      	ldr	r3, [pc, #32]	@ (800287c <valeur_Pression_graph+0x6c>)
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	eeb0 0a67 	vmov.f32	s0, s15
 8002864:	f7ff fcc4 	bl	80021f0 <update_pressure_graph>

    }
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	200059f4 	.word	0x200059f4
 8002874:	200059e4 	.word	0x200059e4
 8002878:	200055f0 	.word	0x200055f0
 800287c:	200055f4 	.word	0x200055f4

08002880 <manage_pressure_graph>:

void manage_pressure_graph() {
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
    static uint32_t last_second = 0;  // Dernière seconde enregistrée
    uint32_t current_second = get_current_time_in_seconds(); // Récupérer l'heure en secondes
 8002886:	f7fe fb9b 	bl	8000fc0 <get_current_time_in_seconds>
 800288a:	6078      	str	r0, [r7, #4]

    // Si une seconde s'est écoulée, mettre à jour le graphique
    if (current_second != last_second) {
 800288c:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <manage_pressure_graph+0x28>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	d004      	beq.n	80028a0 <manage_pressure_graph+0x20>
        last_second = current_second; // Mettre à jour la dernière seconde enregistrée
 8002896:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <manage_pressure_graph+0x28>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6013      	str	r3, [r2, #0]
        valeur_Pression_graph(); // Lire la pression et mettre à jour le graphique
 800289c:	f7ff ffb8 	bl	8002810 <valeur_Pression_graph>
    }
}
 80028a0:	bf00      	nop
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200059f8 	.word	0x200059f8

080028ac <platform_write>:

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b088      	sub	sp, #32
 80028b0:	af04      	add	r7, sp, #16
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	461a      	mov	r2, r3
 80028b8:	460b      	mov	r3, r1
 80028ba:	72fb      	strb	r3, [r7, #11]
 80028bc:	4613      	mov	r3, r2
 80028be:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000);
 80028c0:	7afb      	ldrb	r3, [r7, #11]
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028c8:	9302      	str	r3, [sp, #8]
 80028ca:	893b      	ldrh	r3, [r7, #8]
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	2301      	movs	r3, #1
 80028d4:	21bb      	movs	r1, #187	@ 0xbb
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f006 fc82 	bl	80091e0 <HAL_I2C_Mem_Write>
    return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b088      	sub	sp, #32
 80028ea:	af04      	add	r7, sp, #16
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	461a      	mov	r2, r3
 80028f2:	460b      	mov	r3, r1
 80028f4:	72fb      	strb	r3, [r7, #11]
 80028f6:	4613      	mov	r3, r2
 80028f8:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 80028fa:	7afb      	ldrb	r3, [r7, #11]
 80028fc:	b29a      	uxth	r2, r3
 80028fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002902:	9302      	str	r3, [sp, #8]
 8002904:	893b      	ldrh	r3, [r7, #8]
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2301      	movs	r3, #1
 800290e:	21bb      	movs	r1, #187	@ 0xbb
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f006 fd79 	bl	8009408 <HAL_I2C_Mem_Read>
    return 0;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <platform_delay>:

static void platform_delay(uint32_t ms) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f004 fedd 	bl	80076e8 <HAL_Delay>
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <Rain_Measure_Value>:
    }
}


//revoie les mesures de pluie
void Rain_Measure_Value(){
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0

	if(flagRain){
 800293e:	4b2e      	ldr	r3, [pc, #184]	@ (80029f8 <Rain_Measure_Value+0xc0>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d050      	beq.n	80029e8 <Rain_Measure_Value+0xb0>
		  printf("raincount: %lu \r\n", rainCount);
 8002946:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <Rain_Measure_Value+0xc4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4619      	mov	r1, r3
 800294c:	482c      	ldr	r0, [pc, #176]	@ (8002a00 <Rain_Measure_Value+0xc8>)
 800294e:	f00d ffa3 	bl	8010898 <iprintf>
		  rainfallR = rainCount * VOLUME_PAR_IMPULSION;
 8002952:	4b2a      	ldr	r3, [pc, #168]	@ (80029fc <Rain_Measure_Value+0xc4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7fd fdf4 	bl	8000544 <__aeabi_ui2d>
 800295c:	a324      	add	r3, pc, #144	@ (adr r3, 80029f0 <Rain_Measure_Value+0xb8>)
 800295e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002962:	f7fd fe69 	bl	8000638 <__aeabi_dmul>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	f7fe f93b 	bl	8000be8 <__aeabi_d2f>
 8002972:	4603      	mov	r3, r0
 8002974:	4a23      	ldr	r2, [pc, #140]	@ (8002a04 <Rain_Measure_Value+0xcc>)
 8002976:	6013      	str	r3, [r2, #0]

		  printf("Volume d'eau par seconde: %.2f mm\r\n", rainfallR);
 8002978:	4b22      	ldr	r3, [pc, #136]	@ (8002a04 <Rain_Measure_Value+0xcc>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f7fd fe03 	bl	8000588 <__aeabi_f2d>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4820      	ldr	r0, [pc, #128]	@ (8002a08 <Rain_Measure_Value+0xd0>)
 8002988:	f00d ff86 	bl	8010898 <iprintf>
		  // Afficher la valeur sur l'écran LCD à une position donnée (par exemple, ligne 50, colonne 50)
		  timeElapsed = 0;
 800298c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a0c <Rain_Measure_Value+0xd4>)
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
		  flagRain=0;
 8002992:	4b19      	ldr	r3, [pc, #100]	@ (80029f8 <Rain_Measure_Value+0xc0>)
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
		  char rainfallStr[20];
		  sprintf(rainfallStr, "%.2f mm", rainfallR);
 8002998:	4b1a      	ldr	r3, [pc, #104]	@ (8002a04 <Rain_Measure_Value+0xcc>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fdf3 	bl	8000588 <__aeabi_f2d>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	1d38      	adds	r0, r7, #4
 80029a8:	4919      	ldr	r1, [pc, #100]	@ (8002a10 <Rain_Measure_Value+0xd8>)
 80029aa:	f00e f819 	bl	80109e0 <siprintf>
		  BSP_LCD_SetFont(&Font16); // Police de caractères pour l'affichage
 80029ae:	4819      	ldr	r0, [pc, #100]	@ (8002a14 <Rain_Measure_Value+0xdc>)
 80029b0:	f003 f9b8 	bl	8005d24 <BSP_LCD_SetFont>
	      BSP_LCD_DisplayStringAt(startXR + 2 * (squareSizeR + spacingR) + 20, startYR + 70, (uint8_t*)rainfallStr, LEFT_MODE);
 80029b4:	4b18      	ldr	r3, [pc, #96]	@ (8002a18 <Rain_Measure_Value+0xe0>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	4b18      	ldr	r3, [pc, #96]	@ (8002a1c <Rain_Measure_Value+0xe4>)
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	4b15      	ldr	r3, [pc, #84]	@ (8002a20 <Rain_Measure_Value+0xe8>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3314      	adds	r3, #20
 80029d4:	b298      	uxth	r0, r3
 80029d6:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <Rain_Measure_Value+0xec>)
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3346      	adds	r3, #70	@ 0x46
 80029de:	b299      	uxth	r1, r3
 80029e0:	1d3a      	adds	r2, r7, #4
 80029e2:	2303      	movs	r3, #3
 80029e4:	f003 fa24 	bl	8005e30 <BSP_LCD_DisplayStringAt>
	}



}
 80029e8:	bf00      	nop
 80029ea:	3718      	adds	r7, #24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	89a02752 	.word	0x89a02752
 80029f4:	3fd1e1b0 	.word	0x3fd1e1b0
 80029f8:	20005a01 	.word	0x20005a01
 80029fc:	200059fc 	.word	0x200059fc
 8002a00:	08012e68 	.word	0x08012e68
 8002a04:	20005a04 	.word	0x20005a04
 8002a08:	08012e7c 	.word	0x08012e7c
 8002a0c:	20005a00 	.word	0x20005a00
 8002a10:	08012ea0 	.word	0x08012ea0
 8002a14:	20004f0c 	.word	0x20004f0c
 8002a18:	20004e76 	.word	0x20004e76
 8002a1c:	20004e78 	.word	0x20004e78
 8002a20:	20004e7a 	.word	0x20004e7a
 8002a24:	20004e7c 	.word	0x20004e7c

08002a28 <HAL_GPIO_EXTI_Callback>:

//routine d'interruption pour un arret à durée paramétrable

//routine d'interruption pour comptage (PIN PA15)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin == GPIO_PIN_15){
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a38:	d107      	bne.n	8002a4a <HAL_GPIO_EXTI_Callback+0x22>
	  rainCount++;
 8002a3a:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <HAL_GPIO_EXTI_Callback+0x30>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	4a05      	ldr	r2, [pc, #20]	@ (8002a58 <HAL_GPIO_EXTI_Callback+0x30>)
 8002a42:	6013      	str	r3, [r2, #0]
	  flagRain=1;
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_GPIO_EXTI_Callback+0x34>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	200059fc 	.word	0x200059fc
 8002a5c:	20005a01 	.word	0x20005a01

08002a60 <Wind_Dir_Value>:
float voltage;
uint32_t adcValue = 0;
float R_sensor;

//retourne la direction du vent
void Wind_Dir_Value() {
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8002a66:	4876      	ldr	r0, [pc, #472]	@ (8002c40 <Wind_Dir_Value+0x1e0>)
 8002a68:	f004 fea6 	bl	80077b8 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8002a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a70:	4873      	ldr	r0, [pc, #460]	@ (8002c40 <Wind_Dir_Value+0x1e0>)
 8002a72:	f004 ffa3 	bl	80079bc <HAL_ADC_PollForConversion>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d126      	bne.n	8002aca <Wind_Dir_Value+0x6a>
        adcValue = HAL_ADC_GetValue(&hadc1);
 8002a7c:	4870      	ldr	r0, [pc, #448]	@ (8002c40 <Wind_Dir_Value+0x1e0>)
 8002a7e:	f005 f828 	bl	8007ad2 <HAL_ADC_GetValue>
 8002a82:	4603      	mov	r3, r0
 8002a84:	4a6f      	ldr	r2, [pc, #444]	@ (8002c44 <Wind_Dir_Value+0x1e4>)
 8002a86:	6013      	str	r3, [r2, #0]
        voltage = ((float)adcValue / 4095.0) * Vref;
 8002a88:	4b6e      	ldr	r3, [pc, #440]	@ (8002c44 <Wind_Dir_Value+0x1e4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	ee07 3a90 	vmov	s15, r3
 8002a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a94:	ee17 0a90 	vmov	r0, s15
 8002a98:	f7fd fd76 	bl	8000588 <__aeabi_f2d>
 8002a9c:	a364      	add	r3, pc, #400	@ (adr r3, 8002c30 <Wind_Dir_Value+0x1d0>)
 8002a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa2:	f7fd fef3 	bl	800088c <__aeabi_ddiv>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	a362      	add	r3, pc, #392	@ (adr r3, 8002c38 <Wind_Dir_Value+0x1d8>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fdc0 	bl	8000638 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f7fe f892 	bl	8000be8 <__aeabi_d2f>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4a60      	ldr	r2, [pc, #384]	@ (8002c48 <Wind_Dir_Value+0x1e8>)
 8002ac8:	6013      	str	r3, [r2, #0]
    }
    HAL_ADC_Stop(&hadc1);
 8002aca:	485d      	ldr	r0, [pc, #372]	@ (8002c40 <Wind_Dir_Value+0x1e0>)
 8002acc:	f004 ff42 	bl	8007954 <HAL_ADC_Stop>

    printf("ADC Value: %lu, Voltage: %.2f V\r\n", adcValue, voltage);
 8002ad0:	4b5c      	ldr	r3, [pc, #368]	@ (8002c44 <Wind_Dir_Value+0x1e4>)
 8002ad2:	681c      	ldr	r4, [r3, #0]
 8002ad4:	4b5c      	ldr	r3, [pc, #368]	@ (8002c48 <Wind_Dir_Value+0x1e8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fd55 	bl	8000588 <__aeabi_f2d>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4621      	mov	r1, r4
 8002ae4:	4859      	ldr	r0, [pc, #356]	@ (8002c4c <Wind_Dir_Value+0x1ec>)
 8002ae6:	f00d fed7 	bl	8010898 <iprintf>

    if (voltage > 0) {
 8002aea:	4b57      	ldr	r3, [pc, #348]	@ (8002c48 <Wind_Dir_Value+0x1e8>)
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	f340 8091 	ble.w	8002c1e <Wind_Dir_Value+0x1be>
        R_sensor = (externalResistor * (Vref / voltage)) - externalResistor;
 8002afc:	4b54      	ldr	r3, [pc, #336]	@ (8002c50 <Wind_Dir_Value+0x1f0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fd41 	bl	8000588 <__aeabi_f2d>
 8002b06:	4604      	mov	r4, r0
 8002b08:	460d      	mov	r5, r1
 8002b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002c48 <Wind_Dir_Value+0x1e8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fd3a 	bl	8000588 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	a147      	add	r1, pc, #284	@ (adr r1, 8002c38 <Wind_Dir_Value+0x1d8>)
 8002b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b1e:	f7fd feb5 	bl	800088c <__aeabi_ddiv>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4620      	mov	r0, r4
 8002b28:	4629      	mov	r1, r5
 8002b2a:	f7fd fd85 	bl	8000638 <__aeabi_dmul>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4614      	mov	r4, r2
 8002b34:	461d      	mov	r5, r3
 8002b36:	4b46      	ldr	r3, [pc, #280]	@ (8002c50 <Wind_Dir_Value+0x1f0>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7fd fd24 	bl	8000588 <__aeabi_f2d>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f7fd fbbe 	bl	80002c8 <__aeabi_dsub>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fe f848 	bl	8000be8 <__aeabi_d2f>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c54 <Wind_Dir_Value+0x1f4>)
 8002b5c:	6013      	str	r3, [r2, #0]
        printf("Resistance: %.2f ohms\r\n", R_sensor);
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c54 <Wind_Dir_Value+0x1f4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7fd fd10 	bl	8000588 <__aeabi_f2d>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	483a      	ldr	r0, [pc, #232]	@ (8002c58 <Wind_Dir_Value+0x1f8>)
 8002b6e:	f00d fe93 	bl	8010898 <iprintf>

        const char* direction = "Unknown";
 8002b72:	4b3a      	ldr	r3, [pc, #232]	@ (8002c5c <Wind_Dir_Value+0x1fc>)
 8002b74:	60fb      	str	r3, [r7, #12]
        float minDifference = 5000.0;  // Initialisation ajustée
 8002b76:	4b3a      	ldr	r3, [pc, #232]	@ (8002c60 <Wind_Dir_Value+0x200>)
 8002b78:	60bb      	str	r3, [r7, #8]

        for (int i = 0; i < NUM_POSITIONS; i++) {
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	e02e      	b.n	8002bde <Wind_Dir_Value+0x17e>
            float difference = fabs(R_sensor - resistorValues[i]);
 8002b80:	4b34      	ldr	r3, [pc, #208]	@ (8002c54 <Wind_Dir_Value+0x1f4>)
 8002b82:	ed93 7a00 	vldr	s14, [r3]
 8002b86:	4a37      	ldr	r2, [pc, #220]	@ (8002c64 <Wind_Dir_Value+0x204>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	edd3 7a00 	vldr	s15, [r3]
 8002b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b96:	eef0 7ae7 	vabs.f32	s15, s15
 8002b9a:	edc7 7a00 	vstr	s15, [r7]
            printf("Checking direction %s: Difference = %.2f ohms\r\n", directionStrings[i], difference);
 8002b9e:	4a32      	ldr	r2, [pc, #200]	@ (8002c68 <Wind_Dir_Value+0x208>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002ba6:	6838      	ldr	r0, [r7, #0]
 8002ba8:	f7fd fcee 	bl	8000588 <__aeabi_f2d>
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	482e      	ldr	r0, [pc, #184]	@ (8002c6c <Wind_Dir_Value+0x20c>)
 8002bb4:	f00d fe70 	bl	8010898 <iprintf>
            if (difference < minDifference) {
 8002bb8:	ed97 7a00 	vldr	s14, [r7]
 8002bbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc8:	d506      	bpl.n	8002bd8 <Wind_Dir_Value+0x178>
                minDifference = difference;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	60bb      	str	r3, [r7, #8]
                direction = directionStrings[i];
 8002bce:	4a26      	ldr	r2, [pc, #152]	@ (8002c68 <Wind_Dir_Value+0x208>)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd6:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < NUM_POSITIONS; i++) {
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	607b      	str	r3, [r7, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b0f      	cmp	r3, #15
 8002be2:	ddcd      	ble.n	8002b80 <Wind_Dir_Value+0x120>
            }
        }
        BSP_LCD_DisplayStringAt(startXD + squareSizeD + spacingD + 20, startYD + 70, (uint8_t*)direction, LEFT_MODE);
 8002be4:	4b22      	ldr	r3, [pc, #136]	@ (8002c70 <Wind_Dir_Value+0x210>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	4b22      	ldr	r3, [pc, #136]	@ (8002c74 <Wind_Dir_Value+0x214>)
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	4b20      	ldr	r3, [pc, #128]	@ (8002c78 <Wind_Dir_Value+0x218>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	3314      	adds	r3, #20
 8002c00:	b298      	uxth	r0, r3
 8002c02:	4b1e      	ldr	r3, [pc, #120]	@ (8002c7c <Wind_Dir_Value+0x21c>)
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3346      	adds	r3, #70	@ 0x46
 8002c0a:	b299      	uxth	r1, r3
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	f003 f90e 	bl	8005e30 <BSP_LCD_DisplayStringAt>
        printf("Detected Wind Direction: %s\r\n", direction);
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	481a      	ldr	r0, [pc, #104]	@ (8002c80 <Wind_Dir_Value+0x220>)
 8002c18:	f00d fe3e 	bl	8010898 <iprintf>
    } else {
        printf("Voltage is too low. Check sensor connections.\r\n");
    }

}
 8002c1c:	e002      	b.n	8002c24 <Wind_Dir_Value+0x1c4>
        printf("Voltage is too low. Check sensor connections.\r\n");
 8002c1e:	4819      	ldr	r0, [pc, #100]	@ (8002c84 <Wind_Dir_Value+0x224>)
 8002c20:	f00d fea2 	bl	8010968 <puts>
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002c2c:	f3af 8000 	nop.w
 8002c30:	00000000 	.word	0x00000000
 8002c34:	40affe00 	.word	0x40affe00
 8002c38:	66666666 	.word	0x66666666
 8002c3c:	400a6666 	.word	0x400a6666
 8002c40:	20005a20 	.word	0x20005a20
 8002c44:	20005a0c 	.word	0x20005a0c
 8002c48:	20005a08 	.word	0x20005a08
 8002c4c:	08012ee8 	.word	0x08012ee8
 8002c50:	20004ec8 	.word	0x20004ec8
 8002c54:	20005a10 	.word	0x20005a10
 8002c58:	08012f0c 	.word	0x08012f0c
 8002c5c:	08012f24 	.word	0x08012f24
 8002c60:	459c4000 	.word	0x459c4000
 8002c64:	08013028 	.word	0x08013028
 8002c68:	20004e88 	.word	0x20004e88
 8002c6c:	08012f2c 	.word	0x08012f2c
 8002c70:	20004e82 	.word	0x20004e82
 8002c74:	20004e7e 	.word	0x20004e7e
 8002c78:	20004e80 	.word	0x20004e80
 8002c7c:	20004e84 	.word	0x20004e84
 8002c80:	08012f5c 	.word	0x08012f5c
 8002c84:	08012f7c 	.word	0x08012f7c

08002c88 <Wind_Speed_Value>:
	HAL_TIM_Base_Start_IT(&htim6);
}

//renvoi la valeur de la vitesse du vent moyenne sur 1 minute (à appeler dans la boucle while)
void Wind_Speed_Value()
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0

	if (minute_flag) {
 8002c8e:	4b22      	ldr	r3, [pc, #136]	@ (8002d18 <Wind_Speed_Value+0x90>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d034      	beq.n	8002d02 <Wind_Speed_Value+0x7a>
			  captureDone = 0;
 8002c98:	4b20      	ldr	r3, [pc, #128]	@ (8002d1c <Wind_Speed_Value+0x94>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
		      // Si 1 minute est écoulée, afficher les impulsions
		      printf("Impulsions sur 1 minute : %lu\r\n", pulse_count);
 8002c9e:	4b20      	ldr	r3, [pc, #128]	@ (8002d20 <Wind_Speed_Value+0x98>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	481f      	ldr	r0, [pc, #124]	@ (8002d24 <Wind_Speed_Value+0x9c>)
 8002ca6:	f00d fdf7 	bl	8010898 <iprintf>
		      float vitesse_Vent = pulse_count*VITESSE_PAR_IMPULSION_PAR_SECONDE/60;
 8002caa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <Wind_Speed_Value+0x98>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fc48 	bl	8000544 <__aeabi_ui2d>
 8002cb4:	a316      	add	r3, pc, #88	@ (adr r3, 8002d10 <Wind_Speed_Value+0x88>)
 8002cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cba:	f7fd fcbd 	bl	8000638 <__aeabi_dmul>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	4b17      	ldr	r3, [pc, #92]	@ (8002d28 <Wind_Speed_Value+0xa0>)
 8002ccc:	f7fd fdde 	bl	800088c <__aeabi_ddiv>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7fd ff86 	bl	8000be8 <__aeabi_d2f>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	607b      	str	r3, [r7, #4]
		      printf("vitesse du vent: %.2f Km/h \r\n ", vitesse_Vent);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7fd fc51 	bl	8000588 <__aeabi_f2d>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	460b      	mov	r3, r1
 8002cea:	4810      	ldr	r0, [pc, #64]	@ (8002d2c <Wind_Speed_Value+0xa4>)
 8002cec:	f00d fdd4 	bl	8010898 <iprintf>
		      // Réinitialiser le computeur d'impulsions pour la prochaine minute
		      pulse_count = 0;
 8002cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8002d20 <Wind_Speed_Value+0x98>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

		      // Réinitialiser le flag pour le prochain intervalle de 1 minute
		      minute_flag = 0;
 8002cf6:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <Wind_Speed_Value+0x90>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
		      printf("Minute flag reset!\r\n"); // Vérifier que le flag est réinitialisé
 8002cfc:	480c      	ldr	r0, [pc, #48]	@ (8002d30 <Wind_Speed_Value+0xa8>)
 8002cfe:	f00d fe33 	bl	8010968 <puts>
			  }
		  //}
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	f3af 8000 	nop.w
 8002d10:	33333333 	.word	0x33333333
 8002d14:	40033333 	.word	0x40033333
 8002d18:	20005a1c 	.word	0x20005a1c
 8002d1c:	20005a14 	.word	0x20005a14
 8002d20:	20005a18 	.word	0x20005a18
 8002d24:	08012fac 	.word	0x08012fac
 8002d28:	404e0000 	.word	0x404e0000
 8002d2c:	08012fcc 	.word	0x08012fcc
 8002d30:	08012fec 	.word	0x08012fec

08002d34 <HAL_TIM_IC_CaptureCallback>:


//routine de comptage par input capture (PIN PA8)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a08      	ldr	r2, [pc, #32]	@ (8002d64 <HAL_TIM_IC_CaptureCallback+0x30>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d108      	bne.n	8002d58 <HAL_TIM_IC_CaptureCallback+0x24>
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	7f1b      	ldrb	r3, [r3, #28]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d104      	bne.n	8002d58 <HAL_TIM_IC_CaptureCallback+0x24>
      //printf("bonjour");
        pulse_count++; // Incrémenter le compteur d'impulsions
 8002d4e:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <HAL_TIM_IC_CaptureCallback+0x34>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3301      	adds	r3, #1
 8002d54:	4a04      	ldr	r2, [pc, #16]	@ (8002d68 <HAL_TIM_IC_CaptureCallback+0x34>)
 8002d56:	6013      	str	r3, [r2, #0]
        //printf("Pulse captured: %lu\r\n", pulse_count); // Ajouter imprimé pour vérification

    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40010000 	.word	0x40010000
 8002d68:	20005a18 	.word	0x20005a18

08002d6c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002d72:	463b      	mov	r3, r7
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	609a      	str	r2, [r3, #8]
 8002d7c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002d7e:	4b21      	ldr	r3, [pc, #132]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002d80:	4a21      	ldr	r2, [pc, #132]	@ (8002e08 <MX_ADC1_Init+0x9c>)
 8002d82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002d84:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002d86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002d92:	4b1c      	ldr	r3, [pc, #112]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002d98:	4b1a      	ldr	r3, [pc, #104]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d9e:	4b19      	ldr	r3, [pc, #100]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002da6:	4b17      	ldr	r3, [pc, #92]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002dac:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002dae:	4a17      	ldr	r2, [pc, #92]	@ (8002e0c <MX_ADC1_Init+0xa0>)
 8002db0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002db2:	4b14      	ldr	r3, [pc, #80]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002db8:	4b12      	ldr	r3, [pc, #72]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002dbe:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002dcc:	480d      	ldr	r0, [pc, #52]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002dce:	f004 fcaf 	bl	8007730 <HAL_ADC_Init>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002dd8:	f001 fc58 	bl	800468c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002de0:	2301      	movs	r3, #1
 8002de2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002de8:	463b      	mov	r3, r7
 8002dea:	4619      	mov	r1, r3
 8002dec:	4805      	ldr	r0, [pc, #20]	@ (8002e04 <MX_ADC1_Init+0x98>)
 8002dee:	f004 fe7d 	bl	8007aec <HAL_ADC_ConfigChannel>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d001      	beq.n	8002dfc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002df8:	f001 fc48 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20005a20 	.word	0x20005a20
 8002e08:	40012000 	.word	0x40012000
 8002e0c:	0f000001 	.word	0x0f000001

08002e10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08a      	sub	sp, #40	@ 0x28
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 0314 	add.w	r3, r7, #20
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a15      	ldr	r2, [pc, #84]	@ (8002e84 <HAL_ADC_MspInit+0x74>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d123      	bne.n	8002e7a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e32:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_ADC_MspInit+0x78>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e36:	4a14      	ldr	r2, [pc, #80]	@ (8002e88 <HAL_ADC_MspInit+0x78>)
 8002e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e3e:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_ADC_MspInit+0x78>)
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e88 <HAL_ADC_MspInit+0x78>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e88 <HAL_ADC_MspInit+0x78>)
 8002e50:	f043 0301 	orr.w	r3, r3, #1
 8002e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e56:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <HAL_ADC_MspInit+0x78>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e62:	2301      	movs	r3, #1
 8002e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e66:	2303      	movs	r3, #3
 8002e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	4619      	mov	r1, r3
 8002e74:	4805      	ldr	r0, [pc, #20]	@ (8002e8c <HAL_ADC_MspInit+0x7c>)
 8002e76:	f005 fde5 	bl	8008a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e7a:	bf00      	nop
 8002e7c:	3728      	adds	r7, #40	@ 0x28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40012000 	.word	0x40012000
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40020000 	.word	0x40020000

08002e90 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8002e94:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <MX_DMA2D_Init+0x5c>)
 8002e96:	4a16      	ldr	r2, [pc, #88]	@ (8002ef0 <MX_DMA2D_Init+0x60>)
 8002e98:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8002e9a:	4b14      	ldr	r3, [pc, #80]	@ (8002eec <MX_DMA2D_Init+0x5c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8002ea0:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <MX_DMA2D_Init+0x5c>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8002ea6:	4b11      	ldr	r3, [pc, #68]	@ (8002eec <MX_DMA2D_Init+0x5c>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8002eac:	4b0f      	ldr	r3, [pc, #60]	@ (8002eec <MX_DMA2D_Init+0x5c>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <MX_DMA2D_Init+0x5c>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8002eec <MX_DMA2D_Init+0x5c>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <MX_DMA2D_Init+0x5c>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8002ec4:	4809      	ldr	r0, [pc, #36]	@ (8002eec <MX_DMA2D_Init+0x5c>)
 8002ec6:	f005 fb31 	bl	800852c <HAL_DMA2D_Init>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8002ed0:	f001 fbdc 	bl	800468c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	4805      	ldr	r0, [pc, #20]	@ (8002eec <MX_DMA2D_Init+0x5c>)
 8002ed8:	f005 fc86 	bl	80087e8 <HAL_DMA2D_ConfigLayer>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8002ee2:	f001 fbd3 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20005a68 	.word	0x20005a68
 8002ef0:	4002b000 	.word	0x4002b000

08002ef4 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0a      	ldr	r2, [pc, #40]	@ (8002f2c <HAL_DMA2D_MspInit+0x38>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d10b      	bne.n	8002f1e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f06:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <HAL_DMA2D_MspInit+0x3c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a09      	ldr	r2, [pc, #36]	@ (8002f30 <HAL_DMA2D_MspInit+0x3c>)
 8002f0c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b07      	ldr	r3, [pc, #28]	@ (8002f30 <HAL_DMA2D_MspInit+0x3c>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	4002b000 	.word	0x4002b000
 8002f30:	40023800 	.word	0x40023800

08002f34 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002f3a:	1d3b      	adds	r3, r7, #4
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	601a      	str	r2, [r3, #0]
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	60da      	str	r2, [r3, #12]
 8002f46:	611a      	str	r2, [r3, #16]
 8002f48:	615a      	str	r2, [r3, #20]
 8002f4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002f4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002fcc <MX_FMC_Init+0x98>)
 8002f50:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002f52:	4b1d      	ldr	r3, [pc, #116]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002f58:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002f60:	2204      	movs	r2, #4
 8002f62:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002f64:	4b18      	ldr	r3, [pc, #96]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002f66:	2210      	movs	r2, #16
 8002f68:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002f6a:	4b17      	ldr	r3, [pc, #92]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002f6c:	2240      	movs	r2, #64	@ 0x40
 8002f6e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002f70:	4b15      	ldr	r3, [pc, #84]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002f72:	2280      	movs	r2, #128	@ 0x80
 8002f74:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002f76:	4b14      	ldr	r3, [pc, #80]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002f82:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002f88:	4b0f      	ldr	r3, [pc, #60]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8002f8e:	2310      	movs	r3, #16
 8002f90:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8002f92:	2310      	movs	r3, #16
 8002f94:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8002f96:	2310      	movs	r3, #16
 8002f98:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8002f9a:	2310      	movs	r3, #16
 8002f9c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8002f9e:	2310      	movs	r3, #16
 8002fa0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8002fa2:	2310      	movs	r3, #16
 8002fa4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8002fa6:	2310      	movs	r3, #16
 8002fa8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	4619      	mov	r1, r3
 8002fae:	4806      	ldr	r0, [pc, #24]	@ (8002fc8 <MX_FMC_Init+0x94>)
 8002fb0:	f009 ff68 	bl	800ce84 <HAL_SDRAM_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8002fba:	f001 fb67 	bl	800468c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002fbe:	bf00      	nop
 8002fc0:	3720      	adds	r7, #32
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20005aa8 	.word	0x20005aa8
 8002fcc:	a0000140 	.word	0xa0000140

08002fd0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b086      	sub	sp, #24
 8002fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd6:	1d3b      	adds	r3, r7, #4
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002fe4:	4b33      	ldr	r3, [pc, #204]	@ (80030b4 <HAL_FMC_MspInit+0xe4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d15e      	bne.n	80030aa <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8002fec:	4b31      	ldr	r3, [pc, #196]	@ (80030b4 <HAL_FMC_MspInit+0xe4>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ff2:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <HAL_FMC_MspInit+0xe8>)
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ff6:	4a30      	ldr	r2, [pc, #192]	@ (80030b8 <HAL_FMC_MspInit+0xe8>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6393      	str	r3, [r2, #56]	@ 0x38
 8002ffe:	4b2e      	ldr	r3, [pc, #184]	@ (80030b8 <HAL_FMC_MspInit+0xe8>)
 8003000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	603b      	str	r3, [r7, #0]
 8003008:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800300a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800300e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003018:	2303      	movs	r3, #3
 800301a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800301c:	230c      	movs	r3, #12
 800301e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	4619      	mov	r1, r3
 8003024:	4825      	ldr	r0, [pc, #148]	@ (80030bc <HAL_FMC_MspInit+0xec>)
 8003026:	f005 fd0d 	bl	8008a44 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800302a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800302e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003038:	2303      	movs	r3, #3
 800303a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800303c:	230c      	movs	r3, #12
 800303e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	4619      	mov	r1, r3
 8003044:	481e      	ldr	r0, [pc, #120]	@ (80030c0 <HAL_FMC_MspInit+0xf0>)
 8003046:	f005 fcfd 	bl	8008a44 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800304a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800304e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2302      	movs	r3, #2
 8003052:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003058:	2303      	movs	r3, #3
 800305a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800305c:	230c      	movs	r3, #12
 800305e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003060:	1d3b      	adds	r3, r7, #4
 8003062:	4619      	mov	r1, r3
 8003064:	4817      	ldr	r0, [pc, #92]	@ (80030c4 <HAL_FMC_MspInit+0xf4>)
 8003066:	f005 fced 	bl	8008a44 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800306a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800306e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003078:	2303      	movs	r3, #3
 800307a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800307c:	230c      	movs	r3, #12
 800307e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	4619      	mov	r1, r3
 8003084:	4810      	ldr	r0, [pc, #64]	@ (80030c8 <HAL_FMC_MspInit+0xf8>)
 8003086:	f005 fcdd 	bl	8008a44 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 800308a:	232c      	movs	r3, #44	@ 0x2c
 800308c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800308e:	2302      	movs	r3, #2
 8003090:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003092:	2300      	movs	r3, #0
 8003094:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003096:	2303      	movs	r3, #3
 8003098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800309a:	230c      	movs	r3, #12
 800309c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	4619      	mov	r1, r3
 80030a2:	480a      	ldr	r0, [pc, #40]	@ (80030cc <HAL_FMC_MspInit+0xfc>)
 80030a4:	f005 fcce 	bl	8008a44 <HAL_GPIO_Init>
 80030a8:	e000      	b.n	80030ac <HAL_FMC_MspInit+0xdc>
    return;
 80030aa:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20005adc 	.word	0x20005adc
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40021000 	.word	0x40021000
 80030c0:	40021800 	.word	0x40021800
 80030c4:	40020c00 	.word	0x40020c00
 80030c8:	40021400 	.word	0x40021400
 80030cc:	40021c00 	.word	0x40021c00

080030d0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80030d8:	f7ff ff7a 	bl	8002fd0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80030dc:	bf00      	nop
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b090      	sub	sp, #64	@ 0x40
 80030e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	605a      	str	r2, [r3, #4]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030fa:	4b9c      	ldr	r3, [pc, #624]	@ (800336c <MX_GPIO_Init+0x288>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030fe:	4a9b      	ldr	r2, [pc, #620]	@ (800336c <MX_GPIO_Init+0x288>)
 8003100:	f043 0310 	orr.w	r3, r3, #16
 8003104:	6313      	str	r3, [r2, #48]	@ 0x30
 8003106:	4b99      	ldr	r3, [pc, #612]	@ (800336c <MX_GPIO_Init+0x288>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003112:	4b96      	ldr	r3, [pc, #600]	@ (800336c <MX_GPIO_Init+0x288>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	4a95      	ldr	r2, [pc, #596]	@ (800336c <MX_GPIO_Init+0x288>)
 8003118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800311c:	6313      	str	r3, [r2, #48]	@ 0x30
 800311e:	4b93      	ldr	r3, [pc, #588]	@ (800336c <MX_GPIO_Init+0x288>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003126:	627b      	str	r3, [r7, #36]	@ 0x24
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800312a:	4b90      	ldr	r3, [pc, #576]	@ (800336c <MX_GPIO_Init+0x288>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	4a8f      	ldr	r2, [pc, #572]	@ (800336c <MX_GPIO_Init+0x288>)
 8003130:	f043 0302 	orr.w	r3, r3, #2
 8003134:	6313      	str	r3, [r2, #48]	@ 0x30
 8003136:	4b8d      	ldr	r3, [pc, #564]	@ (800336c <MX_GPIO_Init+0x288>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	623b      	str	r3, [r7, #32]
 8003140:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003142:	4b8a      	ldr	r3, [pc, #552]	@ (800336c <MX_GPIO_Init+0x288>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003146:	4a89      	ldr	r2, [pc, #548]	@ (800336c <MX_GPIO_Init+0x288>)
 8003148:	f043 0308 	orr.w	r3, r3, #8
 800314c:	6313      	str	r3, [r2, #48]	@ 0x30
 800314e:	4b87      	ldr	r3, [pc, #540]	@ (800336c <MX_GPIO_Init+0x288>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	61fb      	str	r3, [r7, #28]
 8003158:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315a:	4b84      	ldr	r3, [pc, #528]	@ (800336c <MX_GPIO_Init+0x288>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	4a83      	ldr	r2, [pc, #524]	@ (800336c <MX_GPIO_Init+0x288>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6313      	str	r3, [r2, #48]	@ 0x30
 8003166:	4b81      	ldr	r3, [pc, #516]	@ (800336c <MX_GPIO_Init+0x288>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	61bb      	str	r3, [r7, #24]
 8003170:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003172:	4b7e      	ldr	r3, [pc, #504]	@ (800336c <MX_GPIO_Init+0x288>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	4a7d      	ldr	r2, [pc, #500]	@ (800336c <MX_GPIO_Init+0x288>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6313      	str	r3, [r2, #48]	@ 0x30
 800317e:	4b7b      	ldr	r3, [pc, #492]	@ (800336c <MX_GPIO_Init+0x288>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800318a:	4b78      	ldr	r3, [pc, #480]	@ (800336c <MX_GPIO_Init+0x288>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	4a77      	ldr	r2, [pc, #476]	@ (800336c <MX_GPIO_Init+0x288>)
 8003190:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003194:	6313      	str	r3, [r2, #48]	@ 0x30
 8003196:	4b75      	ldr	r3, [pc, #468]	@ (800336c <MX_GPIO_Init+0x288>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80031a2:	4b72      	ldr	r3, [pc, #456]	@ (800336c <MX_GPIO_Init+0x288>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a6:	4a71      	ldr	r2, [pc, #452]	@ (800336c <MX_GPIO_Init+0x288>)
 80031a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ae:	4b6f      	ldr	r3, [pc, #444]	@ (800336c <MX_GPIO_Init+0x288>)
 80031b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80031ba:	4b6c      	ldr	r3, [pc, #432]	@ (800336c <MX_GPIO_Init+0x288>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	4a6b      	ldr	r2, [pc, #428]	@ (800336c <MX_GPIO_Init+0x288>)
 80031c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031c6:	4b69      	ldr	r3, [pc, #420]	@ (800336c <MX_GPIO_Init+0x288>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031d2:	4b66      	ldr	r3, [pc, #408]	@ (800336c <MX_GPIO_Init+0x288>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	4a65      	ldr	r2, [pc, #404]	@ (800336c <MX_GPIO_Init+0x288>)
 80031d8:	f043 0320 	orr.w	r3, r3, #32
 80031dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80031de:	4b63      	ldr	r3, [pc, #396]	@ (800336c <MX_GPIO_Init+0x288>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031ea:	4b60      	ldr	r3, [pc, #384]	@ (800336c <MX_GPIO_Init+0x288>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	4a5f      	ldr	r2, [pc, #380]	@ (800336c <MX_GPIO_Init+0x288>)
 80031f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f6:	4b5d      	ldr	r3, [pc, #372]	@ (800336c <MX_GPIO_Init+0x288>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8003202:	237c      	movs	r3, #124	@ 0x7c
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003206:	2303      	movs	r3, #3
 8003208:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	2300      	movs	r3, #0
 800320c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800320e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003212:	4619      	mov	r1, r3
 8003214:	4856      	ldr	r0, [pc, #344]	@ (8003370 <MX_GPIO_Init+0x28c>)
 8003216:	f005 fc15 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG12 PG9
                           PG7 PG3 PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
 800321a:	f247 238c 	movw	r3, #29324	@ 0x728c
 800321e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003220:	2303      	movs	r3, #3
 8003222:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003224:	2300      	movs	r3, #0
 8003226:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003228:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800322c:	4619      	mov	r1, r3
 800322e:	4851      	ldr	r0, [pc, #324]	@ (8003374 <MX_GPIO_Init+0x290>)
 8003230:	f005 fc08 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB3 PB6
                           PB13 PB12 PB2 PB10
                           PB0 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_6
 8003234:	f64f 437d 	movw	r3, #64637	@ 0xfc7d
 8003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800323a:	2303      	movs	r3, #3
 800323c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003242:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003246:	4619      	mov	r1, r3
 8003248:	484b      	ldr	r0, [pc, #300]	@ (8003378 <MX_GPIO_Init+0x294>)
 800324a:	f005 fbfb 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800324e:	f643 03f0 	movw	r3, #14576	@ 0x38f0
 8003252:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003254:	2303      	movs	r3, #3
 8003256:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800325c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003260:	4619      	mov	r1, r3
 8003262:	4846      	ldr	r0, [pc, #280]	@ (800337c <MX_GPIO_Init+0x298>)
 8003264:	f005 fbee 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800326c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800326e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003272:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003274:	2301      	movs	r3, #1
 8003276:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003278:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800327c:	4619      	mov	r1, r3
 800327e:	4840      	ldr	r0, [pc, #256]	@ (8003380 <MX_GPIO_Init+0x29c>)
 8003280:	f005 fbe0 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8003284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800328a:	2303      	movs	r3, #3
 800328c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003292:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003296:	4619      	mov	r1, r3
 8003298:	483a      	ldr	r0, [pc, #232]	@ (8003384 <MX_GPIO_Init+0x2a0>)
 800329a:	f005 fbd3 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC9 PC7
                           PC6 PC3 PC0 PC1
                           PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_7
 800329e:	f640 63ff 	movw	r3, #3839	@ 0xeff
 80032a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032a4:	2303      	movs	r3, #3
 80032a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032b0:	4619      	mov	r1, r3
 80032b2:	4835      	ldr	r0, [pc, #212]	@ (8003388 <MX_GPIO_Init+0x2a4>)
 80032b4:	f005 fbc6 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI3 PI2 PI7
                           PI6 PI12 PI11 PI13
                           PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7
 80032b8:	f64b 13cc 	movw	r3, #47564	@ 0xb9cc
 80032bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_13
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032be:	2303      	movs	r3, #3
 80032c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80032c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032ca:	4619      	mov	r1, r3
 80032cc:	482f      	ldr	r0, [pc, #188]	@ (800338c <MX_GPIO_Init+0x2a8>)
 80032ce:	f005 fbb9 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80032d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032d8:	2300      	movs	r3, #0
 80032da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032e4:	4619      	mov	r1, r3
 80032e6:	4828      	ldr	r0, [pc, #160]	@ (8003388 <MX_GPIO_Init+0x2a4>)
 80032e8:	f005 fbac 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK4 PK3 PK1 PK2
                           PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2
 80032ec:	231f      	movs	r3, #31
 80032ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032f0:	2303      	movs	r3, #3
 80032f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80032f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80032fc:	4619      	mov	r1, r3
 80032fe:	4824      	ldr	r0, [pc, #144]	@ (8003390 <MX_GPIO_Init+0x2ac>)
 8003300:	f005 fba0 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA1 PA4 PA2
                           PA6 PA5 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
 8003304:	f240 437e 	movw	r3, #1150	@ 0x47e
 8003308:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800330a:	2303      	movs	r3, #3
 800330c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330e:	2300      	movs	r3, #0
 8003310:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003312:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003316:	4619      	mov	r1, r3
 8003318:	4819      	ldr	r0, [pc, #100]	@ (8003380 <MX_GPIO_Init+0x29c>)
 800331a:	f005 fb93 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH14 PH4 PH12 PH11
                           PH6 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_11
 800331e:	f645 4350 	movw	r3, #23632	@ 0x5c50
 8003322:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003324:	2303      	movs	r3, #3
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800332c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003330:	4619      	mov	r1, r3
 8003332:	4818      	ldr	r0, [pc, #96]	@ (8003394 <MX_GPIO_Init+0x2b0>)
 8003334:	f005 fb86 	bl	8008a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8003338:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 800333c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800333e:	2303      	movs	r3, #3
 8003340:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003346:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800334a:	4619      	mov	r1, r3
 800334c:	4812      	ldr	r0, [pc, #72]	@ (8003398 <MX_GPIO_Init+0x2b4>)
 800334e:	f005 fb79 	bl	8008a44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	2100      	movs	r1, #0
 8003356:	2028      	movs	r0, #40	@ 0x28
 8003358:	f004 fef3 	bl	8008142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800335c:	2028      	movs	r0, #40	@ 0x28
 800335e:	f004 ff0c 	bl	800817a <HAL_NVIC_EnableIRQ>

}
 8003362:	bf00      	nop
 8003364:	3740      	adds	r7, #64	@ 0x40
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800
 8003370:	40021000 	.word	0x40021000
 8003374:	40021800 	.word	0x40021800
 8003378:	40020400 	.word	0x40020400
 800337c:	40020c00 	.word	0x40020c00
 8003380:	40020000 	.word	0x40020000
 8003384:	40022400 	.word	0x40022400
 8003388:	40020800 	.word	0x40020800
 800338c:	40022000 	.word	0x40022000
 8003390:	40022800 	.word	0x40022800
 8003394:	40021c00 	.word	0x40021c00
 8003398:	40021400 	.word	0x40021400

0800339c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80033a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003414 <MX_I2C1_Init+0x78>)
 80033a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80033a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003418 <MX_I2C1_Init+0x7c>)
 80033aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80033ac:	4b18      	ldr	r3, [pc, #96]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033b2:	4b17      	ldr	r3, [pc, #92]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033b8:	4b15      	ldr	r3, [pc, #84]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80033be:	4b14      	ldr	r3, [pc, #80]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033c4:	4b12      	ldr	r3, [pc, #72]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ca:	4b11      	ldr	r3, [pc, #68]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033d6:	480e      	ldr	r0, [pc, #56]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033d8:	f005 fe36 	bl	8009048 <HAL_I2C_Init>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80033e2:	f001 f953 	bl	800468c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80033e6:	2100      	movs	r1, #0
 80033e8:	4809      	ldr	r0, [pc, #36]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033ea:	f006 fbf7 	bl	8009bdc <HAL_I2CEx_ConfigAnalogFilter>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80033f4:	f001 f94a 	bl	800468c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80033f8:	2100      	movs	r1, #0
 80033fa:	4805      	ldr	r0, [pc, #20]	@ (8003410 <MX_I2C1_Init+0x74>)
 80033fc:	f006 fc39 	bl	8009c72 <HAL_I2CEx_ConfigDigitalFilter>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003406:	f001 f941 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20005ae0 	.word	0x20005ae0
 8003414:	40005400 	.word	0x40005400
 8003418:	20404768 	.word	0x20404768

0800341c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003420:	4b1b      	ldr	r3, [pc, #108]	@ (8003490 <MX_I2C3_Init+0x74>)
 8003422:	4a1c      	ldr	r2, [pc, #112]	@ (8003494 <MX_I2C3_Init+0x78>)
 8003424:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8003426:	4b1a      	ldr	r3, [pc, #104]	@ (8003490 <MX_I2C3_Init+0x74>)
 8003428:	4a1b      	ldr	r2, [pc, #108]	@ (8003498 <MX_I2C3_Init+0x7c>)
 800342a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800342c:	4b18      	ldr	r3, [pc, #96]	@ (8003490 <MX_I2C3_Init+0x74>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003432:	4b17      	ldr	r3, [pc, #92]	@ (8003490 <MX_I2C3_Init+0x74>)
 8003434:	2201      	movs	r2, #1
 8003436:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003438:	4b15      	ldr	r3, [pc, #84]	@ (8003490 <MX_I2C3_Init+0x74>)
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800343e:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <MX_I2C3_Init+0x74>)
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003444:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <MX_I2C3_Init+0x74>)
 8003446:	2200      	movs	r2, #0
 8003448:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800344a:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <MX_I2C3_Init+0x74>)
 800344c:	2200      	movs	r2, #0
 800344e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003450:	4b0f      	ldr	r3, [pc, #60]	@ (8003490 <MX_I2C3_Init+0x74>)
 8003452:	2200      	movs	r2, #0
 8003454:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003456:	480e      	ldr	r0, [pc, #56]	@ (8003490 <MX_I2C3_Init+0x74>)
 8003458:	f005 fdf6 	bl	8009048 <HAL_I2C_Init>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003462:	f001 f913 	bl	800468c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003466:	2100      	movs	r1, #0
 8003468:	4809      	ldr	r0, [pc, #36]	@ (8003490 <MX_I2C3_Init+0x74>)
 800346a:	f006 fbb7 	bl	8009bdc <HAL_I2CEx_ConfigAnalogFilter>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003474:	f001 f90a 	bl	800468c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003478:	2100      	movs	r1, #0
 800347a:	4805      	ldr	r0, [pc, #20]	@ (8003490 <MX_I2C3_Init+0x74>)
 800347c:	f006 fbf9 	bl	8009c72 <HAL_I2CEx_ConfigDigitalFilter>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8003486:	f001 f901 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20005b34 	.word	0x20005b34
 8003494:	40005c00 	.word	0x40005c00
 8003498:	20404768 	.word	0x20404768

0800349c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b0ac      	sub	sp, #176	@ 0xb0
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	60da      	str	r2, [r3, #12]
 80034b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034b4:	f107 0318 	add.w	r3, r7, #24
 80034b8:	2284      	movs	r2, #132	@ 0x84
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f00d fb87 	bl	8010bd0 <memset>
  if(i2cHandle->Instance==I2C1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a44      	ldr	r2, [pc, #272]	@ (80035d8 <HAL_I2C_MspInit+0x13c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d13d      	bne.n	8003548 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80034cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80034d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80034d2:	2300      	movs	r3, #0
 80034d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034d6:	f107 0318 	add.w	r3, r7, #24
 80034da:	4618      	mov	r0, r3
 80034dc:	f007 fbb6 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80034e6:	f001 f8d1 	bl	800468c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ea:	4b3c      	ldr	r3, [pc, #240]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a3b      	ldr	r2, [pc, #236]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 80034f0:	f043 0302 	orr.w	r3, r3, #2
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b39      	ldr	r3, [pc, #228]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003502:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003506:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800350a:	2312      	movs	r3, #18
 800350c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003516:	2303      	movs	r3, #3
 8003518:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800351c:	2304      	movs	r3, #4
 800351e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003522:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003526:	4619      	mov	r1, r3
 8003528:	482d      	ldr	r0, [pc, #180]	@ (80035e0 <HAL_I2C_MspInit+0x144>)
 800352a:	f005 fa8b 	bl	8008a44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800352e:	4b2b      	ldr	r3, [pc, #172]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	4a2a      	ldr	r2, [pc, #168]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 8003534:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003538:	6413      	str	r3, [r2, #64]	@ 0x40
 800353a:	4b28      	ldr	r3, [pc, #160]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003546:	e042      	b.n	80035ce <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a25      	ldr	r2, [pc, #148]	@ (80035e4 <HAL_I2C_MspInit+0x148>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d13d      	bne.n	80035ce <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003552:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003556:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800355e:	f107 0318 	add.w	r3, r7, #24
 8003562:	4618      	mov	r0, r3
 8003564:	f007 fb72 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 800356e:	f001 f88d 	bl	800468c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003572:	4b1a      	ldr	r3, [pc, #104]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	4a19      	ldr	r2, [pc, #100]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 8003578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800357c:	6313      	str	r3, [r2, #48]	@ 0x30
 800357e:	4b17      	ldr	r3, [pc, #92]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800358a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800358e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003592:	2312      	movs	r3, #18
 8003594:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359e:	2303      	movs	r3, #3
 80035a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80035a4:	2304      	movs	r3, #4
 80035a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80035aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80035ae:	4619      	mov	r1, r3
 80035b0:	480d      	ldr	r0, [pc, #52]	@ (80035e8 <HAL_I2C_MspInit+0x14c>)
 80035b2:	f005 fa47 	bl	8008a44 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80035b6:	4b09      	ldr	r3, [pc, #36]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	4a08      	ldr	r2, [pc, #32]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 80035bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c2:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_I2C_MspInit+0x140>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
}
 80035ce:	bf00      	nop
 80035d0:	37b0      	adds	r7, #176	@ 0xb0
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	40005400 	.word	0x40005400
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40020400 	.word	0x40020400
 80035e4:	40005c00 	.word	0x40005c00
 80035e8:	40021c00 	.word	0x40021c00

080035ec <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a15      	ldr	r2, [pc, #84]	@ (8003650 <HAL_I2C_MspDeInit+0x64>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d110      	bne.n	8003620 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80035fe:	4b15      	ldr	r3, [pc, #84]	@ (8003654 <HAL_I2C_MspDeInit+0x68>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	4a14      	ldr	r2, [pc, #80]	@ (8003654 <HAL_I2C_MspDeInit+0x68>)
 8003604:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003608:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800360a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800360e:	4812      	ldr	r0, [pc, #72]	@ (8003658 <HAL_I2C_MspDeInit+0x6c>)
 8003610:	f005 fbc4 	bl	8008d9c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003614:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003618:	480f      	ldr	r0, [pc, #60]	@ (8003658 <HAL_I2C_MspDeInit+0x6c>)
 800361a:	f005 fbbf 	bl	8008d9c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800361e:	e013      	b.n	8003648 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a0d      	ldr	r2, [pc, #52]	@ (800365c <HAL_I2C_MspDeInit+0x70>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d10e      	bne.n	8003648 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800362a:	4b0a      	ldr	r3, [pc, #40]	@ (8003654 <HAL_I2C_MspDeInit+0x68>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	4a09      	ldr	r2, [pc, #36]	@ (8003654 <HAL_I2C_MspDeInit+0x68>)
 8003630:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003634:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8003636:	2180      	movs	r1, #128	@ 0x80
 8003638:	4809      	ldr	r0, [pc, #36]	@ (8003660 <HAL_I2C_MspDeInit+0x74>)
 800363a:	f005 fbaf 	bl	8008d9c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 800363e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003642:	4807      	ldr	r0, [pc, #28]	@ (8003660 <HAL_I2C_MspDeInit+0x74>)
 8003644:	f005 fbaa 	bl	8008d9c <HAL_GPIO_DeInit>
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40005400 	.word	0x40005400
 8003654:	40023800 	.word	0x40023800
 8003658:	40020400 	.word	0x40020400
 800365c:	40005c00 	.word	0x40005c00
 8003660:	40021c00 	.word	0x40021c00

08003664 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b08e      	sub	sp, #56	@ 0x38
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	2234      	movs	r2, #52	@ 0x34
 800366e:	2100      	movs	r1, #0
 8003670:	4618      	mov	r0, r3
 8003672:	f00d faad 	bl	8010bd0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003676:	4b3a      	ldr	r3, [pc, #232]	@ (8003760 <MX_LTDC_Init+0xfc>)
 8003678:	4a3a      	ldr	r2, [pc, #232]	@ (8003764 <MX_LTDC_Init+0x100>)
 800367a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800367c:	4b38      	ldr	r3, [pc, #224]	@ (8003760 <MX_LTDC_Init+0xfc>)
 800367e:	2200      	movs	r2, #0
 8003680:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003682:	4b37      	ldr	r3, [pc, #220]	@ (8003760 <MX_LTDC_Init+0xfc>)
 8003684:	2200      	movs	r2, #0
 8003686:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003688:	4b35      	ldr	r3, [pc, #212]	@ (8003760 <MX_LTDC_Init+0xfc>)
 800368a:	2200      	movs	r2, #0
 800368c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800368e:	4b34      	ldr	r3, [pc, #208]	@ (8003760 <MX_LTDC_Init+0xfc>)
 8003690:	2200      	movs	r2, #0
 8003692:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8003694:	4b32      	ldr	r3, [pc, #200]	@ (8003760 <MX_LTDC_Init+0xfc>)
 8003696:	2200      	movs	r2, #0
 8003698:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800369a:	4b31      	ldr	r3, [pc, #196]	@ (8003760 <MX_LTDC_Init+0xfc>)
 800369c:	2209      	movs	r2, #9
 800369e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 80036a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003760 <MX_LTDC_Init+0xfc>)
 80036a2:	222b      	movs	r2, #43	@ 0x2b
 80036a4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 80036a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003760 <MX_LTDC_Init+0xfc>)
 80036a8:	2215      	movs	r2, #21
 80036aa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 80036ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003760 <MX_LTDC_Init+0xfc>)
 80036ae:	f240 220b 	movw	r2, #523	@ 0x20b
 80036b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 80036b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003760 <MX_LTDC_Init+0xfc>)
 80036b6:	f240 1225 	movw	r2, #293	@ 0x125
 80036ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 531;
 80036bc:	4b28      	ldr	r3, [pc, #160]	@ (8003760 <MX_LTDC_Init+0xfc>)
 80036be:	f240 2213 	movw	r2, #531	@ 0x213
 80036c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 297;
 80036c4:	4b26      	ldr	r3, [pc, #152]	@ (8003760 <MX_LTDC_Init+0xfc>)
 80036c6:	f240 1229 	movw	r2, #297	@ 0x129
 80036ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80036cc:	4b24      	ldr	r3, [pc, #144]	@ (8003760 <MX_LTDC_Init+0xfc>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80036d4:	4b22      	ldr	r3, [pc, #136]	@ (8003760 <MX_LTDC_Init+0xfc>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80036dc:	4b20      	ldr	r3, [pc, #128]	@ (8003760 <MX_LTDC_Init+0xfc>)
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80036e4:	481e      	ldr	r0, [pc, #120]	@ (8003760 <MX_LTDC_Init+0xfc>)
 80036e6:	f006 fb11 	bl	8009d0c <HAL_LTDC_Init>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80036f0:	f000 ffcc 	bl	800468c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80036f8:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80036fc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8003702:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003706:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003708:	2302      	movs	r3, #2
 800370a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800370c:	23ff      	movs	r3, #255	@ 0xff
 800370e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003714:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003718:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800371a:	2307      	movs	r3, #7
 800371c:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8003722:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8003728:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800372c:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800372e:	2300      	movs	r3, #0
 8003730:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003740:	1d3b      	adds	r3, r7, #4
 8003742:	2200      	movs	r2, #0
 8003744:	4619      	mov	r1, r3
 8003746:	4806      	ldr	r0, [pc, #24]	@ (8003760 <MX_LTDC_Init+0xfc>)
 8003748:	f006 fbb0 	bl	8009eac <HAL_LTDC_ConfigLayer>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8003752:	f000 ff9b 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003756:	bf00      	nop
 8003758:	3738      	adds	r7, #56	@ 0x38
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20005b88 	.word	0x20005b88
 8003764:	40016800 	.word	0x40016800

08003768 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b0b0      	sub	sp, #192	@ 0xc0
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003770:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003780:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003784:	2284      	movs	r2, #132	@ 0x84
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f00d fa21 	bl	8010bd0 <memset>
  if(ltdcHandle->Instance==LTDC)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a97      	ldr	r2, [pc, #604]	@ (80039f0 <HAL_LTDC_MspInit+0x288>)
 8003794:	4293      	cmp	r3, r2
 8003796:	f040 8126 	bne.w	80039e6 <HAL_LTDC_MspInit+0x27e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800379a:	2308      	movs	r3, #8
 800379c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 800379e:	2364      	movs	r3, #100	@ 0x64
 80037a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80037a2:	2304      	movs	r3, #4
 80037a4:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80037a6:	2302      	movs	r3, #2
 80037a8:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80037aa:	2300      	movs	r3, #0
 80037ac:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80037ae:	2301      	movs	r3, #1
 80037b0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80037b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037b6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037bc:	4618      	mov	r0, r3
 80037be:	f007 fa45 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 80037c8:	f000 ff60 	bl	800468c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80037cc:	4b89      	ldr	r3, [pc, #548]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 80037ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d0:	4a88      	ldr	r2, [pc, #544]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 80037d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80037d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80037d8:	4b86      	ldr	r3, [pc, #536]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 80037da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80037e4:	4b83      	ldr	r3, [pc, #524]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 80037e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e8:	4a82      	ldr	r2, [pc, #520]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 80037ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f0:	4b80      	ldr	r3, [pc, #512]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 80037f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f8:	623b      	str	r3, [r7, #32]
 80037fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fc:	4b7d      	ldr	r3, [pc, #500]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003800:	4a7c      	ldr	r2, [pc, #496]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 8003802:	f043 0301 	orr.w	r3, r3, #1
 8003806:	6313      	str	r3, [r2, #48]	@ 0x30
 8003808:	4b7a      	ldr	r3, [pc, #488]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003814:	4b77      	ldr	r3, [pc, #476]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	4a76      	ldr	r2, [pc, #472]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 800381a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003820:	4b74      	ldr	r3, [pc, #464]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003828:	61bb      	str	r3, [r7, #24]
 800382a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800382c:	4b71      	ldr	r3, [pc, #452]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003830:	4a70      	ldr	r2, [pc, #448]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 8003832:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003836:	6313      	str	r3, [r2, #48]	@ 0x30
 8003838:	4b6e      	ldr	r3, [pc, #440]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 800383a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003844:	4b6b      	ldr	r3, [pc, #428]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	4a6a      	ldr	r2, [pc, #424]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 800384a:	f043 0308 	orr.w	r3, r3, #8
 800384e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003850:	4b68      	ldr	r3, [pc, #416]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 8003852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	613b      	str	r3, [r7, #16]
 800385a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800385c:	4b65      	ldr	r3, [pc, #404]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	4a64      	ldr	r2, [pc, #400]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 8003862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003866:	6313      	str	r3, [r2, #48]	@ 0x30
 8003868:	4b62      	ldr	r3, [pc, #392]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 800386a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800386c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003874:	4b5f      	ldr	r3, [pc, #380]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 8003876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003878:	4a5e      	ldr	r2, [pc, #376]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 800387a:	f043 0302 	orr.w	r3, r3, #2
 800387e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003880:	4b5c      	ldr	r3, [pc, #368]	@ (80039f4 <HAL_LTDC_MspInit+0x28c>)
 8003882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	68bb      	ldr	r3, [r7, #8]
    PI14     ------> LTDC_CLK
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    PB1     ------> LTDC_R6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 800388c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8003890:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003894:	2302      	movs	r3, #2
 8003896:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389a:	2300      	movs	r3, #0
 800389c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a0:	2300      	movs	r3, #0
 80038a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80038a6:	230e      	movs	r3, #14
 80038a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80038ac:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80038b0:	4619      	mov	r1, r3
 80038b2:	4851      	ldr	r0, [pc, #324]	@ (80039f8 <HAL_LTDC_MspInit+0x290>)
 80038b4:	f005 f8c6 	bl	8008a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 80038b8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80038bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c0:	2302      	movs	r3, #2
 80038c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80038d2:	230e      	movs	r3, #14
 80038d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80038dc:	4619      	mov	r1, r3
 80038de:	4847      	ldr	r0, [pc, #284]	@ (80039fc <HAL_LTDC_MspInit+0x294>)
 80038e0:	f005 f8b0 	bl	8008a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_1
 80038e4:	f244 6333 	movw	r3, #17971	@ 0x4633
 80038e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ec:	2302      	movs	r3, #2
 80038ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80038fe:	230e      	movs	r3, #14
 8003900:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003904:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003908:	4619      	mov	r1, r3
 800390a:	483d      	ldr	r0, [pc, #244]	@ (8003a00 <HAL_LTDC_MspInit+0x298>)
 800390c:	f005 f89a 	bl	8008a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8003910:	23e0      	movs	r3, #224	@ 0xe0
 8003912:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003916:	2302      	movs	r3, #2
 8003918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	2300      	movs	r3, #0
 800391e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003922:	2300      	movs	r3, #0
 8003924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003928:	230e      	movs	r3, #14
 800392a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800392e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003932:	4619      	mov	r1, r3
 8003934:	4833      	ldr	r0, [pc, #204]	@ (8003a04 <HAL_LTDC_MspInit+0x29c>)
 8003936:	f005 f885 	bl	8008a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800393a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800393e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003942:	2302      	movs	r3, #2
 8003944:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394e:	2300      	movs	r3, #0
 8003950:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003954:	2309      	movs	r3, #9
 8003956:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800395a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800395e:	4619      	mov	r1, r3
 8003960:	4825      	ldr	r0, [pc, #148]	@ (80039f8 <HAL_LTDC_MspInit+0x290>)
 8003962:	f005 f86f 	bl	8008a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003966:	2308      	movs	r3, #8
 8003968:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800397e:	230e      	movs	r3, #14
 8003980:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003984:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003988:	4619      	mov	r1, r3
 800398a:	481f      	ldr	r0, [pc, #124]	@ (8003a08 <HAL_LTDC_MspInit+0x2a0>)
 800398c:	f005 f85a 	bl	8008a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 8003990:	f44f 4322 	mov.w	r3, #41472	@ 0xa200
 8003994:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003998:	2302      	movs	r3, #2
 800399a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80039aa:	230e      	movs	r3, #14
 80039ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039b0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80039b4:	4619      	mov	r1, r3
 80039b6:	4815      	ldr	r0, [pc, #84]	@ (8003a0c <HAL_LTDC_MspInit+0x2a4>)
 80039b8:	f005 f844 	bl	8008a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80039bc:	2302      	movs	r3, #2
 80039be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c2:	2302      	movs	r3, #2
 80039c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80039d4:	2309      	movs	r3, #9
 80039d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039da:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80039de:	4619      	mov	r1, r3
 80039e0:	480b      	ldr	r0, [pc, #44]	@ (8003a10 <HAL_LTDC_MspInit+0x2a8>)
 80039e2:	f005 f82f 	bl	8008a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80039e6:	bf00      	nop
 80039e8:	37c0      	adds	r7, #192	@ 0xc0
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40016800 	.word	0x40016800
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40021800 	.word	0x40021800
 80039fc:	40020000 	.word	0x40020000
 8003a00:	40022000 	.word	0x40022000
 8003a04:	40022800 	.word	0x40022800
 8003a08:	40020c00 	.word	0x40020c00
 8003a0c:	40021c00 	.word	0x40021c00
 8003a10:	40020400 	.word	0x40020400

08003a14 <getRTCDateStr>:

/**
 * @brief Récupère la date formatée depuis la RTC
 * @param dateStr: buffer pour stocker la chaîne formatée
 */
void getRTCDateStr(char* dateStr) {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	6078      	str	r0, [r7, #4]
    // Lecture de l'heure (nécessaire avant la date)
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	490d      	ldr	r1, [pc, #52]	@ (8003a54 <getRTCDateStr+0x40>)
 8003a20:	480d      	ldr	r0, [pc, #52]	@ (8003a58 <getRTCDateStr+0x44>)
 8003a22:	f007 fe21 	bl	800b668 <HAL_RTC_GetTime>
    // Lecture de la date
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003a26:	2200      	movs	r2, #0
 8003a28:	490c      	ldr	r1, [pc, #48]	@ (8003a5c <getRTCDateStr+0x48>)
 8003a2a:	480b      	ldr	r0, [pc, #44]	@ (8003a58 <getRTCDateStr+0x44>)
 8003a2c:	f007 fefe 	bl	800b82c <HAL_RTC_GetDate>

    // Format: "Jour JJ/MM/AAAA"
    sprintf(dateStr, "%02d/%02d/20%02d",
            sDate.Date,
 8003a30:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <getRTCDateStr+0x48>)
 8003a32:	789b      	ldrb	r3, [r3, #2]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8003a34:	461a      	mov	r2, r3
            sDate.Month,
 8003a36:	4b09      	ldr	r3, [pc, #36]	@ (8003a5c <getRTCDateStr+0x48>)
 8003a38:	785b      	ldrb	r3, [r3, #1]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8003a3a:	4619      	mov	r1, r3
            sDate.Year);
 8003a3c:	4b07      	ldr	r3, [pc, #28]	@ (8003a5c <getRTCDateStr+0x48>)
 8003a3e:	78db      	ldrb	r3, [r3, #3]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	460b      	mov	r3, r1
 8003a44:	4906      	ldr	r1, [pc, #24]	@ (8003a60 <getRTCDateStr+0x4c>)
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f00c ffca 	bl	80109e0 <siprintf>
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	2000510c 	.word	0x2000510c
 8003a58:	20005c94 	.word	0x20005c94
 8003a5c:	20005120 	.word	0x20005120
 8003a60:	08013000 	.word	0x08013000

08003a64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a6a:	f003 fdd7 	bl	800761c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a6e:	f000 fd05 	bl	800447c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a72:	f7ff fb37 	bl	80030e4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 8003a76:	f7ff fa0b 	bl	8002e90 <MX_DMA2D_Init>
  MX_FMC_Init();
 8003a7a:	f7ff fa5b 	bl	8002f34 <MX_FMC_Init>
  MX_LTDC_Init();
 8003a7e:	f7ff fdf1 	bl	8003664 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8003a82:	f001 fab7 	bl	8004ff4 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8003a86:	f7ff fcc9 	bl	800341c <MX_I2C3_Init>
  MX_TIM3_Init();
 8003a8a:	f001 f949 	bl	8004d20 <MX_TIM3_Init>
  MX_RTC_Init();
 8003a8e:	f000 fe03 	bl	8004698 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8003a92:	f000 fed5 	bl	8004840 <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8003a96:	f7ff fc81 	bl	800339c <MX_I2C1_Init>
  MX_FATFS_Init();
 8003a9a:	f00b fff9 	bl	800fa90 <MX_FATFS_Init>
  MX_ADC1_Init();
 8003a9e:	f7ff f965 	bl	8002d6c <MX_ADC1_Init>
  MX_TIM1_Init();
 8003aa2:	f001 f8e3 	bl	8004c6c <MX_TIM1_Init>
  MX_TIM6_Init();
 8003aa6:	f001 f98b 	bl	8004dc0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003aaa:	f001 f9c1 	bl	8004e30 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8003aae:	f001 ffc1 	bl	8005a34 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, SDRAM_DEVICE_ADDR);
 8003ab2:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	f002 f854 	bl	8005b64 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SetLayerVisible(LTDC_ACTIVE_LAYER, ENABLE);
 8003abc:	2101      	movs	r1, #1
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f002 f8c0 	bl	8005c44 <BSP_LCD_SetLayerVisible>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003ac4:	4896      	ldr	r0, [pc, #600]	@ (8003d20 <main+0x2bc>)
 8003ac6:	f002 f92d 	bl	8005d24 <BSP_LCD_SetFont>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8003aca:	2001      	movs	r0, #1
 8003acc:	f002 f8aa 	bl	8005c24 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad4:	f002 f940 	bl	8005d58 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	f002 f908 	bl	8005cf0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003ae0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003ae4:	f002 f8ec 	bl	8005cc0 <BSP_LCD_SetTextColor>

  init_HumTemp();
 8003ae8:	f7fe fc12 	bl	8002310 <init_HumTemp>
  init_Pression();
 8003aec:	f7fe fdf8 	bl	80026e0 <init_Pression>
  //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
  TouchTimer_Init();
 8003af0:	f000 fd36 	bl	8004560 <TouchTimer_Init>
  //drawCreditsPage();
  //drawTempHumidRainPage();
  //drawWindDirPressurePage();
  //drawSettingsPage();

  int flag=0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
         //machine d' etat de l'inteface graphique
         if (needRedraw) {
 8003af8:	4b8a      	ldr	r3, [pc, #552]	@ (8003d24 <main+0x2c0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d04c      	beq.n	8003b9a <main+0x136>
             switch (flag) {
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b09      	cmp	r3, #9
 8003b04:	d849      	bhi.n	8003b9a <main+0x136>
 8003b06:	a201      	add	r2, pc, #4	@ (adr r2, 8003b0c <main+0xa8>)
 8003b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b0c:	08003b35 	.word	0x08003b35
 8003b10:	08003b41 	.word	0x08003b41
 8003b14:	08003b4d 	.word	0x08003b4d
 8003b18:	08003b59 	.word	0x08003b59
 8003b1c:	08003b65 	.word	0x08003b65
 8003b20:	08003b71 	.word	0x08003b71
 8003b24:	08003b77 	.word	0x08003b77
 8003b28:	08003b7d 	.word	0x08003b7d
 8003b2c:	08003b89 	.word	0x08003b89
 8003b30:	08003b8f 	.word	0x08003b8f
                 case 0:
                     drawMenuPage();
 8003b34:	f7fd fa74 	bl	8001020 <drawMenuPage>
                     needRedraw = 0; // Reset the redraw flag
 8003b38:	4b7a      	ldr	r3, [pc, #488]	@ (8003d24 <main+0x2c0>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
                     break;
 8003b3e:	e02c      	b.n	8003b9a <main+0x136>

                 case 1:
                	 drawTempHumidRainPage();
 8003b40:	f7fd fb40 	bl	80011c4 <drawTempHumidRainPage>
                     needRedraw = 0; // Reset the redraw flag
 8003b44:	4b77      	ldr	r3, [pc, #476]	@ (8003d24 <main+0x2c0>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	601a      	str	r2, [r3, #0]
                     break;
 8003b4a:	e026      	b.n	8003b9a <main+0x136>

                 case 2:
                      drawWindDirPressurePage();
 8003b4c:	f7fd fbc8 	bl	80012e0 <drawWindDirPressurePage>
                      needRedraw = 0; // Reset the redraw flag
 8003b50:	4b74      	ldr	r3, [pc, #464]	@ (8003d24 <main+0x2c0>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
                      break;
 8003b56:	e020      	b.n	8003b9a <main+0x136>

                 case 3:
                      drawSettingsPage();
 8003b58:	f7fd fc4e 	bl	80013f8 <drawSettingsPage>
                      needRedraw = 0; // Reset the redraw flag
 8003b5c:	4b71      	ldr	r3, [pc, #452]	@ (8003d24 <main+0x2c0>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
                      break;
 8003b62:	e01a      	b.n	8003b9a <main+0x136>

                  case 4:
                      drawCreditsPage();
 8003b64:	f7fd faee 	bl	8001144 <drawCreditsPage>
                      needRedraw = 0; // Reset the redraw flag
 8003b68:	4b6e      	ldr	r3, [pc, #440]	@ (8003d24 <main+0x2c0>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
                      break;
 8003b6e:	e014      	b.n	8003b9a <main+0x136>

                  case 5:
                	  valeur_graph_TempH();
 8003b70:	f7fe fcf6 	bl	8002560 <valeur_graph_TempH>
                      //needRedraw = 0; // Reset the redraw flag
                      break;
 8003b74:	e011      	b.n	8003b9a <main+0x136>

                  case 6:
                	  value_humidity_graph();
 8003b76:	f7fe fd2b 	bl	80025d0 <value_humidity_graph>
                      //needRedraw = 0; // Reset the redraw flag
                      break;
 8003b7a:	e00e      	b.n	8003b9a <main+0x136>

                  case 7:
                	  drawTempHumGraphPage();
 8003b7c:	f7fd fd9e 	bl	80016bc <drawTempHumGraphPage>
                      needRedraw = 0; // Reset the redraw flag
 8003b80:	4b68      	ldr	r3, [pc, #416]	@ (8003d24 <main+0x2c0>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
                      break;
 8003b86:	e008      	b.n	8003b9a <main+0x136>

                  case 8:
                	  manage_pressure_graph();
 8003b88:	f7fe fe7a 	bl	8002880 <manage_pressure_graph>
                      //needRedraw = 0; // Reset the redraw flag
                      break;
 8003b8c:	e005      	b.n	8003b9a <main+0x136>

                  case 9:
                	  drawRainPressGraphPage();
 8003b8e:	f7fd fddb 	bl	8001748 <drawRainPressGraphPage>
                      needRedraw = 0; // Reset the redraw flag
 8003b92:	4b64      	ldr	r3, [pc, #400]	@ (8003d24 <main+0x2c0>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
                      break;
 8003b98:	bf00      	nop
         /*if(I2c_Flag)
         {
			 }
			 I2c_Flag=0;
         }*/
  	  	  	 if(flag==1){
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d106      	bne.n	8003bae <main+0x14a>
  				 valeur_TempH();
 8003ba0:	f7fe fc8e 	bl	80024c0 <valeur_TempH>
  				 valeur_Hum();
 8003ba4:	f7fe fc1a 	bl	80023dc <valeur_Hum>
  				 Rain_Measure_Value();
 8003ba8:	f7fe fec6 	bl	8002938 <Rain_Measure_Value>
 8003bac:	e008      	b.n	8003bc0 <main+0x15c>
  			 }

  	  	  	 else if(flag==2){
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d105      	bne.n	8003bc0 <main+0x15c>
  				 valeur_Pression();
 8003bb4:	f7fe fdd6 	bl	8002764 <valeur_Pression>
  				 Wind_Dir_Value();
 8003bb8:	f7fe ff52 	bl	8002a60 <Wind_Dir_Value>
  				 Wind_Speed_Value();
 8003bbc:	f7ff f864 	bl	8002c88 <Wind_Speed_Value>

         }*/


         //changement d'état par interruption sur bouton du touch screen
         if (TS_State.touchDetected && !debounce) {
 8003bc0:	4b59      	ldr	r3, [pc, #356]	@ (8003d28 <main+0x2c4>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 843a 	beq.w	8004440 <main+0x9dc>
 8003bcc:	4b57      	ldr	r3, [pc, #348]	@ (8003d2c <main+0x2c8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f040 8435 	bne.w	8004440 <main+0x9dc>
        	 debounce=1;
 8003bd6:	4b55      	ldr	r3, [pc, #340]	@ (8003d2c <main+0x2c8>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
			   //hum Temp Rain button
			  if (flag == 0 && x > 40 && x < 220 && y > 60 && y < 220) {
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11a      	bne.n	8003c18 <main+0x1b4>
 8003be2:	4b53      	ldr	r3, [pc, #332]	@ (8003d30 <main+0x2cc>)
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b28      	cmp	r3, #40	@ 0x28
 8003bea:	d915      	bls.n	8003c18 <main+0x1b4>
 8003bec:	4b50      	ldr	r3, [pc, #320]	@ (8003d30 <main+0x2cc>)
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2bdb      	cmp	r3, #219	@ 0xdb
 8003bf4:	d810      	bhi.n	8003c18 <main+0x1b4>
 8003bf6:	4b4f      	ldr	r3, [pc, #316]	@ (8003d34 <main+0x2d0>)
 8003bf8:	881b      	ldrh	r3, [r3, #0]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	2b3c      	cmp	r3, #60	@ 0x3c
 8003bfe:	d90b      	bls.n	8003c18 <main+0x1b4>
 8003c00:	4b4c      	ldr	r3, [pc, #304]	@ (8003d34 <main+0x2d0>)
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2bdb      	cmp	r3, #219	@ 0xdb
 8003c08:	d806      	bhi.n	8003c18 <main+0x1b4>
				  flag = 1;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8003c0e:	4b45      	ldr	r3, [pc, #276]	@ (8003d24 <main+0x2c0>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	f000 bc13 	b.w	800443e <main+0x9da>

			  //return menu button
			  } else if ((flag == 1 || flag == 2 || flag == 3 || flag == 4) && x > 10 && x < 40 && y > 10 && y < 40) {
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d008      	beq.n	8003c30 <main+0x1cc>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d005      	beq.n	8003c30 <main+0x1cc>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d002      	beq.n	8003c30 <main+0x1cc>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d119      	bne.n	8003c64 <main+0x200>
 8003c30:	4b3f      	ldr	r3, [pc, #252]	@ (8003d30 <main+0x2cc>)
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b0a      	cmp	r3, #10
 8003c38:	d914      	bls.n	8003c64 <main+0x200>
 8003c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d30 <main+0x2cc>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b27      	cmp	r3, #39	@ 0x27
 8003c42:	d80f      	bhi.n	8003c64 <main+0x200>
 8003c44:	4b3b      	ldr	r3, [pc, #236]	@ (8003d34 <main+0x2d0>)
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b0a      	cmp	r3, #10
 8003c4c:	d90a      	bls.n	8003c64 <main+0x200>
 8003c4e:	4b39      	ldr	r3, [pc, #228]	@ (8003d34 <main+0x2d0>)
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b27      	cmp	r3, #39	@ 0x27
 8003c56:	d805      	bhi.n	8003c64 <main+0x200>
				  flag = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8003c5c:	4b31      	ldr	r3, [pc, #196]	@ (8003d24 <main+0x2c0>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e3ec      	b.n	800443e <main+0x9da>

			   //wind dir pressure button
			  } else if (flag == 0 && x > 260 && x < 440 && y > 60 && y < 220) {
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d11b      	bne.n	8003ca2 <main+0x23e>
 8003c6a:	4b31      	ldr	r3, [pc, #196]	@ (8003d30 <main+0x2cc>)
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c74:	d915      	bls.n	8003ca2 <main+0x23e>
 8003c76:	4b2e      	ldr	r3, [pc, #184]	@ (8003d30 <main+0x2cc>)
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8003c80:	d20f      	bcs.n	8003ca2 <main+0x23e>
 8003c82:	4b2c      	ldr	r3, [pc, #176]	@ (8003d34 <main+0x2d0>)
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2b3c      	cmp	r3, #60	@ 0x3c
 8003c8a:	d90a      	bls.n	8003ca2 <main+0x23e>
 8003c8c:	4b29      	ldr	r3, [pc, #164]	@ (8003d34 <main+0x2d0>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2bdb      	cmp	r3, #219	@ 0xdb
 8003c94:	d805      	bhi.n	8003ca2 <main+0x23e>
				  flag = 2;
 8003c96:	2302      	movs	r3, #2
 8003c98:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <main+0x2c0>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e3cd      	b.n	800443e <main+0x9da>

			   //setting button
			  } else if (flag == 0 && x > 438 && x < 480 && y > 235 && y < 272) {
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d11c      	bne.n	8003ce2 <main+0x27e>
 8003ca8:	4b21      	ldr	r3, [pc, #132]	@ (8003d30 <main+0x2cc>)
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	f5b3 7fdb 	cmp.w	r3, #438	@ 0x1b6
 8003cb2:	d916      	bls.n	8003ce2 <main+0x27e>
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d30 <main+0x2cc>)
 8003cb6:	881b      	ldrh	r3, [r3, #0]
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8003cbe:	d210      	bcs.n	8003ce2 <main+0x27e>
 8003cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8003d34 <main+0x2d0>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2beb      	cmp	r3, #235	@ 0xeb
 8003cc8:	d90b      	bls.n	8003ce2 <main+0x27e>
 8003cca:	4b1a      	ldr	r3, [pc, #104]	@ (8003d34 <main+0x2d0>)
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8003cd4:	d205      	bcs.n	8003ce2 <main+0x27e>
				  flag = 3;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8003cda:	4b12      	ldr	r3, [pc, #72]	@ (8003d24 <main+0x2c0>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	e3ad      	b.n	800443e <main+0x9da>

			  //credits button
			  } else if (flag == 0 && x > 18 && x < 58 && y > 235 && y < 272) {
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d127      	bne.n	8003d38 <main+0x2d4>
 8003ce8:	4b11      	ldr	r3, [pc, #68]	@ (8003d30 <main+0x2cc>)
 8003cea:	881b      	ldrh	r3, [r3, #0]
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	2b12      	cmp	r3, #18
 8003cf0:	d922      	bls.n	8003d38 <main+0x2d4>
 8003cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d30 <main+0x2cc>)
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b39      	cmp	r3, #57	@ 0x39
 8003cfa:	d81d      	bhi.n	8003d38 <main+0x2d4>
 8003cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8003d34 <main+0x2d0>)
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2beb      	cmp	r3, #235	@ 0xeb
 8003d04:	d918      	bls.n	8003d38 <main+0x2d4>
 8003d06:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <main+0x2d0>)
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8003d10:	d212      	bcs.n	8003d38 <main+0x2d4>
				  flag = 4;
 8003d12:	2304      	movs	r3, #4
 8003d14:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8003d16:	4b03      	ldr	r3, [pc, #12]	@ (8003d24 <main+0x2c0>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
 8003d1c:	e38f      	b.n	800443e <main+0x9da>
 8003d1e:	bf00      	nop
 8003d20:	20004efc 	.word	0x20004efc
 8003d24:	20004ecc 	.word	0x20004ecc
 8003d28:	20005c30 	.word	0x20005c30
 8003d2c:	20005c60 	.word	0x20005c60
 8003d30:	20005c5c 	.word	0x20005c5c
 8003d34:	20005c5e 	.word	0x20005c5e

			  //Temperature graph
			  } else if (flag == 1 && x > 40 && x < 160 && y > 80 && y < 200) {
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d119      	bne.n	8003d72 <main+0x30e>
 8003d3e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f3c <main+0x4d8>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2b28      	cmp	r3, #40	@ 0x28
 8003d46:	d914      	bls.n	8003d72 <main+0x30e>
 8003d48:	4b7c      	ldr	r3, [pc, #496]	@ (8003f3c <main+0x4d8>)
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b9f      	cmp	r3, #159	@ 0x9f
 8003d50:	d80f      	bhi.n	8003d72 <main+0x30e>
 8003d52:	4b7b      	ldr	r3, [pc, #492]	@ (8003f40 <main+0x4dc>)
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b50      	cmp	r3, #80	@ 0x50
 8003d5a:	d90a      	bls.n	8003d72 <main+0x30e>
 8003d5c:	4b78      	ldr	r3, [pc, #480]	@ (8003f40 <main+0x4dc>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d64:	d805      	bhi.n	8003d72 <main+0x30e>
				  flag = 5;
 8003d66:	2305      	movs	r3, #5
 8003d68:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8003d6a:	4b76      	ldr	r3, [pc, #472]	@ (8003f44 <main+0x4e0>)
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e365      	b.n	800443e <main+0x9da>

			  //humidity graph
         	  } else if (flag == 1 && x > 180 && x < 300 && y > 80 && y < 200){
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d11a      	bne.n	8003dae <main+0x34a>
 8003d78:	4b70      	ldr	r3, [pc, #448]	@ (8003f3c <main+0x4d8>)
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2bb4      	cmp	r3, #180	@ 0xb4
 8003d80:	d915      	bls.n	8003dae <main+0x34a>
 8003d82:	4b6e      	ldr	r3, [pc, #440]	@ (8003f3c <main+0x4d8>)
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8003d8c:	d20f      	bcs.n	8003dae <main+0x34a>
 8003d8e:	4b6c      	ldr	r3, [pc, #432]	@ (8003f40 <main+0x4dc>)
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b50      	cmp	r3, #80	@ 0x50
 8003d96:	d90a      	bls.n	8003dae <main+0x34a>
 8003d98:	4b69      	ldr	r3, [pc, #420]	@ (8003f40 <main+0x4dc>)
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003da0:	d805      	bhi.n	8003dae <main+0x34a>
         		 flag = 6;
 8003da2:	2306      	movs	r3, #6
 8003da4:	60fb      	str	r3, [r7, #12]
         		 needRedraw = 1; // Set the redraw flag
 8003da6:	4b67      	ldr	r3, [pc, #412]	@ (8003f44 <main+0x4e0>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	e347      	b.n	800443e <main+0x9da>

         	  //Rain graph
         	  } else if (flag == 1 && x > 320 && x < 440 && y > 80 && y < 200){
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d11b      	bne.n	8003dec <main+0x388>
 8003db4:	4b61      	ldr	r3, [pc, #388]	@ (8003f3c <main+0x4d8>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003dbe:	d915      	bls.n	8003dec <main+0x388>
 8003dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8003f3c <main+0x4d8>)
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8003dca:	d20f      	bcs.n	8003dec <main+0x388>
 8003dcc:	4b5c      	ldr	r3, [pc, #368]	@ (8003f40 <main+0x4dc>)
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b50      	cmp	r3, #80	@ 0x50
 8003dd4:	d90a      	bls.n	8003dec <main+0x388>
 8003dd6:	4b5a      	ldr	r3, [pc, #360]	@ (8003f40 <main+0x4dc>)
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2bc7      	cmp	r3, #199	@ 0xc7
 8003dde:	d805      	bhi.n	8003dec <main+0x388>
          		 flag = 7;
 8003de0:	2307      	movs	r3, #7
 8003de2:	60fb      	str	r3, [r7, #12]
          		 needRedraw = 1; // Set the redraw flag
 8003de4:	4b57      	ldr	r3, [pc, #348]	@ (8003f44 <main+0x4e0>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]
 8003dea:	e328      	b.n	800443e <main+0x9da>

          	  //Pressure graph
         	  } else if (flag == 2 && x > 320 && x < 440 && y > 80 && y < 200){
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d11b      	bne.n	8003e2a <main+0x3c6>
 8003df2:	4b52      	ldr	r3, [pc, #328]	@ (8003f3c <main+0x4d8>)
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003dfc:	d915      	bls.n	8003e2a <main+0x3c6>
 8003dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8003f3c <main+0x4d8>)
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8003e08:	d20f      	bcs.n	8003e2a <main+0x3c6>
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003f40 <main+0x4dc>)
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b50      	cmp	r3, #80	@ 0x50
 8003e12:	d90a      	bls.n	8003e2a <main+0x3c6>
 8003e14:	4b4a      	ldr	r3, [pc, #296]	@ (8003f40 <main+0x4dc>)
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e1c:	d805      	bhi.n	8003e2a <main+0x3c6>
				 flag = 8;
 8003e1e:	2308      	movs	r3, #8
 8003e20:	60fb      	str	r3, [r7, #12]
				 needRedraw = 1; // Set the redraw flag
 8003e22:	4b48      	ldr	r3, [pc, #288]	@ (8003f44 <main+0x4e0>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e309      	b.n	800443e <main+0x9da>

			  //Wind Graph
			  }else if (flag == 2 && x > 40 && x < 160 && y > 80 && y < 200){
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d119      	bne.n	8003e64 <main+0x400>
 8003e30:	4b42      	ldr	r3, [pc, #264]	@ (8003f3c <main+0x4d8>)
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b28      	cmp	r3, #40	@ 0x28
 8003e38:	d914      	bls.n	8003e64 <main+0x400>
 8003e3a:	4b40      	ldr	r3, [pc, #256]	@ (8003f3c <main+0x4d8>)
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b9f      	cmp	r3, #159	@ 0x9f
 8003e42:	d80f      	bhi.n	8003e64 <main+0x400>
 8003e44:	4b3e      	ldr	r3, [pc, #248]	@ (8003f40 <main+0x4dc>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b50      	cmp	r3, #80	@ 0x50
 8003e4c:	d90a      	bls.n	8003e64 <main+0x400>
 8003e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f40 <main+0x4dc>)
 8003e50:	881b      	ldrh	r3, [r3, #0]
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e56:	d805      	bhi.n	8003e64 <main+0x400>
				 flag = 9;
 8003e58:	2309      	movs	r3, #9
 8003e5a:	60fb      	str	r3, [r7, #12]
				 needRedraw = 1; // Set the redraw flag
 8003e5c:	4b39      	ldr	r3, [pc, #228]	@ (8003f44 <main+0x4e0>)
 8003e5e:	2201      	movs	r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e2ec      	b.n	800443e <main+0x9da>

			  //return data page 1 button
			  } else if ((flag == 5 || flag == 6 || flag == 7) && x > 10 && x < 40 && y > 10 && y < 40) {
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b05      	cmp	r3, #5
 8003e68:	d005      	beq.n	8003e76 <main+0x412>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2b06      	cmp	r3, #6
 8003e6e:	d002      	beq.n	8003e76 <main+0x412>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b07      	cmp	r3, #7
 8003e74:	d119      	bne.n	8003eaa <main+0x446>
 8003e76:	4b31      	ldr	r3, [pc, #196]	@ (8003f3c <main+0x4d8>)
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	2b0a      	cmp	r3, #10
 8003e7e:	d914      	bls.n	8003eaa <main+0x446>
 8003e80:	4b2e      	ldr	r3, [pc, #184]	@ (8003f3c <main+0x4d8>)
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b27      	cmp	r3, #39	@ 0x27
 8003e88:	d80f      	bhi.n	8003eaa <main+0x446>
 8003e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f40 <main+0x4dc>)
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2b0a      	cmp	r3, #10
 8003e92:	d90a      	bls.n	8003eaa <main+0x446>
 8003e94:	4b2a      	ldr	r3, [pc, #168]	@ (8003f40 <main+0x4dc>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b27      	cmp	r3, #39	@ 0x27
 8003e9c:	d805      	bhi.n	8003eaa <main+0x446>
				  flag = 1;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8003ea2:	4b28      	ldr	r3, [pc, #160]	@ (8003f44 <main+0x4e0>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	e2c9      	b.n	800443e <main+0x9da>

			  //return data page 2 button
			  } else if ((flag == 8 || flag == 9) && x > 10 && x < 40 && y > 10 && y < 40) {
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d002      	beq.n	8003eb6 <main+0x452>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	d119      	bne.n	8003eea <main+0x486>
 8003eb6:	4b21      	ldr	r3, [pc, #132]	@ (8003f3c <main+0x4d8>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b0a      	cmp	r3, #10
 8003ebe:	d914      	bls.n	8003eea <main+0x486>
 8003ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f3c <main+0x4d8>)
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b27      	cmp	r3, #39	@ 0x27
 8003ec8:	d80f      	bhi.n	8003eea <main+0x486>
 8003eca:	4b1d      	ldr	r3, [pc, #116]	@ (8003f40 <main+0x4dc>)
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	2b0a      	cmp	r3, #10
 8003ed2:	d90a      	bls.n	8003eea <main+0x486>
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8003f40 <main+0x4dc>)
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	2b27      	cmp	r3, #39	@ 0x27
 8003edc:	d805      	bhi.n	8003eea <main+0x486>
				  flag = 2;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8003ee2:	4b18      	ldr	r3, [pc, #96]	@ (8003f44 <main+0x4e0>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e2a9      	b.n	800443e <main+0x9da>
				  //Dans la partie où vous gérez les touches
			  } else if (flag == 3) {
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	f040 82b2 	bne.w	8004456 <main+0x9f2>
				      const uint16_t col1 = 150;
 8003ef2:	2396      	movs	r3, #150	@ 0x96
 8003ef4:	817b      	strh	r3, [r7, #10]
				      const uint16_t col2 = col1 + 90;
 8003ef6:	897b      	ldrh	r3, [r7, #10]
 8003ef8:	335a      	adds	r3, #90	@ 0x5a
 8003efa:	813b      	strh	r3, [r7, #8]
				      const uint16_t col3 = col2 + 90;
 8003efc:	893b      	ldrh	r3, [r7, #8]
 8003efe:	335a      	adds	r3, #90	@ 0x5a
 8003f00:	80fb      	strh	r3, [r7, #6]
				      const uint16_t buttonSize = 30;
 8003f02:	231e      	movs	r3, #30
 8003f04:	80bb      	strh	r3, [r7, #4]

				      // Bouton retour
				      if (x > 10 && x < 40 && y > 10 && y < 40) {
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <main+0x4d8>)
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2b0a      	cmp	r3, #10
 8003f0e:	d91b      	bls.n	8003f48 <main+0x4e4>
 8003f10:	4b0a      	ldr	r3, [pc, #40]	@ (8003f3c <main+0x4d8>)
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b27      	cmp	r3, #39	@ 0x27
 8003f18:	d816      	bhi.n	8003f48 <main+0x4e4>
 8003f1a:	4b09      	ldr	r3, [pc, #36]	@ (8003f40 <main+0x4dc>)
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b0a      	cmp	r3, #10
 8003f22:	d911      	bls.n	8003f48 <main+0x4e4>
 8003f24:	4b06      	ldr	r3, [pc, #24]	@ (8003f40 <main+0x4dc>)
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b27      	cmp	r3, #39	@ 0x27
 8003f2c:	d80c      	bhi.n	8003f48 <main+0x4e4>
				          flag = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
				          needRedraw = 1;
 8003f32:	4b04      	ldr	r3, [pc, #16]	@ (8003f44 <main+0x4e0>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e26f      	b.n	800441a <main+0x9b6>
 8003f3a:	bf00      	nop
 8003f3c:	20005c5c 	.word	0x20005c5c
 8003f40:	20005c5e 	.word	0x20005c5e
 8003f44:	20004ecc 	.word	0x20004ecc
				      }
				      // === Boutons Date ===
				      // Jour +
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 40 && y <= 70) {
 8003f48:	4b86      	ldr	r3, [pc, #536]	@ (8004164 <main+0x700>)
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	897a      	ldrh	r2, [r7, #10]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d832      	bhi.n	8003fba <main+0x556>
 8003f54:	4b83      	ldr	r3, [pc, #524]	@ (8004164 <main+0x700>)
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	897a      	ldrh	r2, [r7, #10]
 8003f5e:	88bb      	ldrh	r3, [r7, #4]
 8003f60:	4413      	add	r3, r2
 8003f62:	4299      	cmp	r1, r3
 8003f64:	dc29      	bgt.n	8003fba <main+0x556>
 8003f66:	4b80      	ldr	r3, [pc, #512]	@ (8004168 <main+0x704>)
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	2b27      	cmp	r3, #39	@ 0x27
 8003f6e:	d924      	bls.n	8003fba <main+0x556>
 8003f70:	4b7d      	ldr	r3, [pc, #500]	@ (8004168 <main+0x704>)
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b46      	cmp	r3, #70	@ 0x46
 8003f78:	d81f      	bhi.n	8003fba <main+0x556>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	497b      	ldr	r1, [pc, #492]	@ (800416c <main+0x708>)
 8003f7e:	487c      	ldr	r0, [pc, #496]	@ (8004170 <main+0x70c>)
 8003f80:	f007 fb72 	bl	800b668 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003f84:	2200      	movs	r2, #0
 8003f86:	497b      	ldr	r1, [pc, #492]	@ (8004174 <main+0x710>)
 8003f88:	4879      	ldr	r0, [pc, #484]	@ (8004170 <main+0x70c>)
 8003f8a:	f007 fc4f 	bl	800b82c <HAL_RTC_GetDate>
				          sDate.Date = (sDate.Date % 31) + 1;
 8003f8e:	4b79      	ldr	r3, [pc, #484]	@ (8004174 <main+0x710>)
 8003f90:	789a      	ldrb	r2, [r3, #2]
 8003f92:	4b79      	ldr	r3, [pc, #484]	@ (8004178 <main+0x714>)
 8003f94:	fba3 1302 	umull	r1, r3, r3, r2
 8003f98:	1ad1      	subs	r1, r2, r3
 8003f9a:	0849      	lsrs	r1, r1, #1
 8003f9c:	440b      	add	r3, r1
 8003f9e:	0919      	lsrs	r1, r3, #4
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	015b      	lsls	r3, r3, #5
 8003fa4:	1a5b      	subs	r3, r3, r1
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	3301      	adds	r3, #1
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	4b71      	ldr	r3, [pc, #452]	@ (8004174 <main+0x710>)
 8003fb0:	709a      	strb	r2, [r3, #2]
				          needRedraw = 1;
 8003fb2:	4b72      	ldr	r3, [pc, #456]	@ (800417c <main+0x718>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e22f      	b.n	800441a <main+0x9b6>
				      }
				      // Jour -
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 105 && y <= 135) {
 8003fba:	4b6a      	ldr	r3, [pc, #424]	@ (8004164 <main+0x700>)
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	897a      	ldrh	r2, [r7, #10]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d82c      	bhi.n	8004020 <main+0x5bc>
 8003fc6:	4b67      	ldr	r3, [pc, #412]	@ (8004164 <main+0x700>)
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	4619      	mov	r1, r3
 8003fce:	897a      	ldrh	r2, [r7, #10]
 8003fd0:	88bb      	ldrh	r3, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	4299      	cmp	r1, r3
 8003fd6:	dc23      	bgt.n	8004020 <main+0x5bc>
 8003fd8:	4b63      	ldr	r3, [pc, #396]	@ (8004168 <main+0x704>)
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	2b68      	cmp	r3, #104	@ 0x68
 8003fe0:	d91e      	bls.n	8004020 <main+0x5bc>
 8003fe2:	4b61      	ldr	r3, [pc, #388]	@ (8004168 <main+0x704>)
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b87      	cmp	r3, #135	@ 0x87
 8003fea:	d819      	bhi.n	8004020 <main+0x5bc>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003fec:	2200      	movs	r2, #0
 8003fee:	495f      	ldr	r1, [pc, #380]	@ (800416c <main+0x708>)
 8003ff0:	485f      	ldr	r0, [pc, #380]	@ (8004170 <main+0x70c>)
 8003ff2:	f007 fb39 	bl	800b668 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	495e      	ldr	r1, [pc, #376]	@ (8004174 <main+0x710>)
 8003ffa:	485d      	ldr	r0, [pc, #372]	@ (8004170 <main+0x70c>)
 8003ffc:	f007 fc16 	bl	800b82c <HAL_RTC_GetDate>
				          sDate.Date = (sDate.Date > 1) ? sDate.Date - 1 : 31;
 8004000:	4b5c      	ldr	r3, [pc, #368]	@ (8004174 <main+0x710>)
 8004002:	789b      	ldrb	r3, [r3, #2]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d904      	bls.n	8004012 <main+0x5ae>
 8004008:	4b5a      	ldr	r3, [pc, #360]	@ (8004174 <main+0x710>)
 800400a:	789b      	ldrb	r3, [r3, #2]
 800400c:	3b01      	subs	r3, #1
 800400e:	b2db      	uxtb	r3, r3
 8004010:	e000      	b.n	8004014 <main+0x5b0>
 8004012:	231f      	movs	r3, #31
 8004014:	4a57      	ldr	r2, [pc, #348]	@ (8004174 <main+0x710>)
 8004016:	7093      	strb	r3, [r2, #2]
				          needRedraw = 1;
 8004018:	4b58      	ldr	r3, [pc, #352]	@ (800417c <main+0x718>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e1fc      	b.n	800441a <main+0x9b6>
				      }
				      // Mois +
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 40 && y <= 70) {
 8004020:	4b50      	ldr	r3, [pc, #320]	@ (8004164 <main+0x700>)
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b29b      	uxth	r3, r3
 8004026:	893a      	ldrh	r2, [r7, #8]
 8004028:	429a      	cmp	r2, r3
 800402a:	d830      	bhi.n	800408e <main+0x62a>
 800402c:	4b4d      	ldr	r3, [pc, #308]	@ (8004164 <main+0x700>)
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	b29b      	uxth	r3, r3
 8004032:	4619      	mov	r1, r3
 8004034:	893a      	ldrh	r2, [r7, #8]
 8004036:	88bb      	ldrh	r3, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	4299      	cmp	r1, r3
 800403c:	dc27      	bgt.n	800408e <main+0x62a>
 800403e:	4b4a      	ldr	r3, [pc, #296]	@ (8004168 <main+0x704>)
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b27      	cmp	r3, #39	@ 0x27
 8004046:	d922      	bls.n	800408e <main+0x62a>
 8004048:	4b47      	ldr	r3, [pc, #284]	@ (8004168 <main+0x704>)
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	2b46      	cmp	r3, #70	@ 0x46
 8004050:	d81d      	bhi.n	800408e <main+0x62a>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004052:	2200      	movs	r2, #0
 8004054:	4945      	ldr	r1, [pc, #276]	@ (800416c <main+0x708>)
 8004056:	4846      	ldr	r0, [pc, #280]	@ (8004170 <main+0x70c>)
 8004058:	f007 fb06 	bl	800b668 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800405c:	2200      	movs	r2, #0
 800405e:	4945      	ldr	r1, [pc, #276]	@ (8004174 <main+0x710>)
 8004060:	4843      	ldr	r0, [pc, #268]	@ (8004170 <main+0x70c>)
 8004062:	f007 fbe3 	bl	800b82c <HAL_RTC_GetDate>
				          sDate.Month = (sDate.Month % 12) + 1;
 8004066:	4b43      	ldr	r3, [pc, #268]	@ (8004174 <main+0x710>)
 8004068:	785a      	ldrb	r2, [r3, #1]
 800406a:	4b45      	ldr	r3, [pc, #276]	@ (8004180 <main+0x71c>)
 800406c:	fba3 1302 	umull	r1, r3, r3, r2
 8004070:	08d9      	lsrs	r1, r3, #3
 8004072:	460b      	mov	r3, r1
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	440b      	add	r3, r1
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	3301      	adds	r3, #1
 8004080:	b2da      	uxtb	r2, r3
 8004082:	4b3c      	ldr	r3, [pc, #240]	@ (8004174 <main+0x710>)
 8004084:	705a      	strb	r2, [r3, #1]
				          needRedraw = 1;
 8004086:	4b3d      	ldr	r3, [pc, #244]	@ (800417c <main+0x718>)
 8004088:	2201      	movs	r2, #1
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e1c5      	b.n	800441a <main+0x9b6>
				      }
				      // Mois -
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 105 && y <= 135) {
 800408e:	4b35      	ldr	r3, [pc, #212]	@ (8004164 <main+0x700>)
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29b      	uxth	r3, r3
 8004094:	893a      	ldrh	r2, [r7, #8]
 8004096:	429a      	cmp	r2, r3
 8004098:	d82c      	bhi.n	80040f4 <main+0x690>
 800409a:	4b32      	ldr	r3, [pc, #200]	@ (8004164 <main+0x700>)
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	4619      	mov	r1, r3
 80040a2:	893a      	ldrh	r2, [r7, #8]
 80040a4:	88bb      	ldrh	r3, [r7, #4]
 80040a6:	4413      	add	r3, r2
 80040a8:	4299      	cmp	r1, r3
 80040aa:	dc23      	bgt.n	80040f4 <main+0x690>
 80040ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004168 <main+0x704>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b68      	cmp	r3, #104	@ 0x68
 80040b4:	d91e      	bls.n	80040f4 <main+0x690>
 80040b6:	4b2c      	ldr	r3, [pc, #176]	@ (8004168 <main+0x704>)
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b87      	cmp	r3, #135	@ 0x87
 80040be:	d819      	bhi.n	80040f4 <main+0x690>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80040c0:	2200      	movs	r2, #0
 80040c2:	492a      	ldr	r1, [pc, #168]	@ (800416c <main+0x708>)
 80040c4:	482a      	ldr	r0, [pc, #168]	@ (8004170 <main+0x70c>)
 80040c6:	f007 facf 	bl	800b668 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80040ca:	2200      	movs	r2, #0
 80040cc:	4929      	ldr	r1, [pc, #164]	@ (8004174 <main+0x710>)
 80040ce:	4828      	ldr	r0, [pc, #160]	@ (8004170 <main+0x70c>)
 80040d0:	f007 fbac 	bl	800b82c <HAL_RTC_GetDate>
				          sDate.Month = (sDate.Month > 1) ? sDate.Month - 1 : 12;
 80040d4:	4b27      	ldr	r3, [pc, #156]	@ (8004174 <main+0x710>)
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d904      	bls.n	80040e6 <main+0x682>
 80040dc:	4b25      	ldr	r3, [pc, #148]	@ (8004174 <main+0x710>)
 80040de:	785b      	ldrb	r3, [r3, #1]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	e000      	b.n	80040e8 <main+0x684>
 80040e6:	230c      	movs	r3, #12
 80040e8:	4a22      	ldr	r2, [pc, #136]	@ (8004174 <main+0x710>)
 80040ea:	7053      	strb	r3, [r2, #1]
				          needRedraw = 1;
 80040ec:	4b23      	ldr	r3, [pc, #140]	@ (800417c <main+0x718>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e192      	b.n	800441a <main+0x9b6>
				      }
				      // === Boutons Heure ===
				      // Heures +
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 140 && y <= 170) {
 80040f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004164 <main+0x700>)
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	897a      	ldrh	r2, [r7, #10]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d843      	bhi.n	8004188 <main+0x724>
 8004100:	4b18      	ldr	r3, [pc, #96]	@ (8004164 <main+0x700>)
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	4619      	mov	r1, r3
 8004108:	897a      	ldrh	r2, [r7, #10]
 800410a:	88bb      	ldrh	r3, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	4299      	cmp	r1, r3
 8004110:	dc3a      	bgt.n	8004188 <main+0x724>
 8004112:	4b15      	ldr	r3, [pc, #84]	@ (8004168 <main+0x704>)
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b8b      	cmp	r3, #139	@ 0x8b
 800411a:	d935      	bls.n	8004188 <main+0x724>
 800411c:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <main+0x704>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b29b      	uxth	r3, r3
 8004122:	2baa      	cmp	r3, #170	@ 0xaa
 8004124:	d830      	bhi.n	8004188 <main+0x724>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004126:	2200      	movs	r2, #0
 8004128:	4910      	ldr	r1, [pc, #64]	@ (800416c <main+0x708>)
 800412a:	4811      	ldr	r0, [pc, #68]	@ (8004170 <main+0x70c>)
 800412c:	f007 fa9c 	bl	800b668 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004130:	2200      	movs	r2, #0
 8004132:	4910      	ldr	r1, [pc, #64]	@ (8004174 <main+0x710>)
 8004134:	480e      	ldr	r0, [pc, #56]	@ (8004170 <main+0x70c>)
 8004136:	f007 fb79 	bl	800b82c <HAL_RTC_GetDate>
				          sTime.Hours = (sTime.Hours + 1) % 24;
 800413a:	4b0c      	ldr	r3, [pc, #48]	@ (800416c <main+0x708>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	4b10      	ldr	r3, [pc, #64]	@ (8004184 <main+0x720>)
 8004142:	fb83 1302 	smull	r1, r3, r3, r2
 8004146:	1099      	asrs	r1, r3, #2
 8004148:	17d3      	asrs	r3, r2, #31
 800414a:	1ac9      	subs	r1, r1, r3
 800414c:	460b      	mov	r3, r1
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	440b      	add	r3, r1
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	1ad1      	subs	r1, r2, r3
 8004156:	b2ca      	uxtb	r2, r1
 8004158:	4b04      	ldr	r3, [pc, #16]	@ (800416c <main+0x708>)
 800415a:	701a      	strb	r2, [r3, #0]
				          needRedraw = 1;
 800415c:	4b07      	ldr	r3, [pc, #28]	@ (800417c <main+0x718>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	e15a      	b.n	800441a <main+0x9b6>
 8004164:	20005c5c 	.word	0x20005c5c
 8004168:	20005c5e 	.word	0x20005c5e
 800416c:	2000510c 	.word	0x2000510c
 8004170:	20005c94 	.word	0x20005c94
 8004174:	20005120 	.word	0x20005120
 8004178:	08421085 	.word	0x08421085
 800417c:	20004ecc 	.word	0x20004ecc
 8004180:	aaaaaaab 	.word	0xaaaaaaab
 8004184:	2aaaaaab 	.word	0x2aaaaaab
				      }
				      // Heures -
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 200 && y <= 230) {
 8004188:	4b85      	ldr	r3, [pc, #532]	@ (80043a0 <main+0x93c>)
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b29b      	uxth	r3, r3
 800418e:	897a      	ldrh	r2, [r7, #10]
 8004190:	429a      	cmp	r2, r3
 8004192:	d82c      	bhi.n	80041ee <main+0x78a>
 8004194:	4b82      	ldr	r3, [pc, #520]	@ (80043a0 <main+0x93c>)
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b29b      	uxth	r3, r3
 800419a:	4619      	mov	r1, r3
 800419c:	897a      	ldrh	r2, [r7, #10]
 800419e:	88bb      	ldrh	r3, [r7, #4]
 80041a0:	4413      	add	r3, r2
 80041a2:	4299      	cmp	r1, r3
 80041a4:	dc23      	bgt.n	80041ee <main+0x78a>
 80041a6:	4b7f      	ldr	r3, [pc, #508]	@ (80043a4 <main+0x940>)
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80041ae:	d91e      	bls.n	80041ee <main+0x78a>
 80041b0:	4b7c      	ldr	r3, [pc, #496]	@ (80043a4 <main+0x940>)
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2be6      	cmp	r3, #230	@ 0xe6
 80041b8:	d819      	bhi.n	80041ee <main+0x78a>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80041ba:	2200      	movs	r2, #0
 80041bc:	497a      	ldr	r1, [pc, #488]	@ (80043a8 <main+0x944>)
 80041be:	487b      	ldr	r0, [pc, #492]	@ (80043ac <main+0x948>)
 80041c0:	f007 fa52 	bl	800b668 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80041c4:	2200      	movs	r2, #0
 80041c6:	497a      	ldr	r1, [pc, #488]	@ (80043b0 <main+0x94c>)
 80041c8:	4878      	ldr	r0, [pc, #480]	@ (80043ac <main+0x948>)
 80041ca:	f007 fb2f 	bl	800b82c <HAL_RTC_GetDate>
				          sTime.Hours = (sTime.Hours > 0) ? sTime.Hours - 1 : 23;
 80041ce:	4b76      	ldr	r3, [pc, #472]	@ (80043a8 <main+0x944>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d004      	beq.n	80041e0 <main+0x77c>
 80041d6:	4b74      	ldr	r3, [pc, #464]	@ (80043a8 <main+0x944>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	3b01      	subs	r3, #1
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	e000      	b.n	80041e2 <main+0x77e>
 80041e0:	2317      	movs	r3, #23
 80041e2:	4a71      	ldr	r2, [pc, #452]	@ (80043a8 <main+0x944>)
 80041e4:	7013      	strb	r3, [r2, #0]
				          needRedraw = 1;
 80041e6:	4b73      	ldr	r3, [pc, #460]	@ (80043b4 <main+0x950>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e115      	b.n	800441a <main+0x9b6>
				      }
				      // Minutes +
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 140 && y <= 170) {
 80041ee:	4b6c      	ldr	r3, [pc, #432]	@ (80043a0 <main+0x93c>)
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	893a      	ldrh	r2, [r7, #8]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d832      	bhi.n	8004260 <main+0x7fc>
 80041fa:	4b69      	ldr	r3, [pc, #420]	@ (80043a0 <main+0x93c>)
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	b29b      	uxth	r3, r3
 8004200:	4619      	mov	r1, r3
 8004202:	893a      	ldrh	r2, [r7, #8]
 8004204:	88bb      	ldrh	r3, [r7, #4]
 8004206:	4413      	add	r3, r2
 8004208:	4299      	cmp	r1, r3
 800420a:	dc29      	bgt.n	8004260 <main+0x7fc>
 800420c:	4b65      	ldr	r3, [pc, #404]	@ (80043a4 <main+0x940>)
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b8b      	cmp	r3, #139	@ 0x8b
 8004214:	d924      	bls.n	8004260 <main+0x7fc>
 8004216:	4b63      	ldr	r3, [pc, #396]	@ (80043a4 <main+0x940>)
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	b29b      	uxth	r3, r3
 800421c:	2baa      	cmp	r3, #170	@ 0xaa
 800421e:	d81f      	bhi.n	8004260 <main+0x7fc>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004220:	2200      	movs	r2, #0
 8004222:	4961      	ldr	r1, [pc, #388]	@ (80043a8 <main+0x944>)
 8004224:	4861      	ldr	r0, [pc, #388]	@ (80043ac <main+0x948>)
 8004226:	f007 fa1f 	bl	800b668 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800422a:	2200      	movs	r2, #0
 800422c:	4960      	ldr	r1, [pc, #384]	@ (80043b0 <main+0x94c>)
 800422e:	485f      	ldr	r0, [pc, #380]	@ (80043ac <main+0x948>)
 8004230:	f007 fafc 	bl	800b82c <HAL_RTC_GetDate>
				          sTime.Minutes = (sTime.Minutes + 1) % 60;
 8004234:	4b5c      	ldr	r3, [pc, #368]	@ (80043a8 <main+0x944>)
 8004236:	785b      	ldrb	r3, [r3, #1]
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	4b5f      	ldr	r3, [pc, #380]	@ (80043b8 <main+0x954>)
 800423c:	fb83 1302 	smull	r1, r3, r3, r2
 8004240:	4413      	add	r3, r2
 8004242:	1159      	asrs	r1, r3, #5
 8004244:	17d3      	asrs	r3, r2, #31
 8004246:	1ac9      	subs	r1, r1, r3
 8004248:	460b      	mov	r3, r1
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a5b      	subs	r3, r3, r1
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	1ad1      	subs	r1, r2, r3
 8004252:	b2ca      	uxtb	r2, r1
 8004254:	4b54      	ldr	r3, [pc, #336]	@ (80043a8 <main+0x944>)
 8004256:	705a      	strb	r2, [r3, #1]
				          needRedraw = 1;
 8004258:	4b56      	ldr	r3, [pc, #344]	@ (80043b4 <main+0x950>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e0dc      	b.n	800441a <main+0x9b6>
				      }
				      // Minutes -
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 200 && y <= 230) {
 8004260:	4b4f      	ldr	r3, [pc, #316]	@ (80043a0 <main+0x93c>)
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	b29b      	uxth	r3, r3
 8004266:	893a      	ldrh	r2, [r7, #8]
 8004268:	429a      	cmp	r2, r3
 800426a:	d82c      	bhi.n	80042c6 <main+0x862>
 800426c:	4b4c      	ldr	r3, [pc, #304]	@ (80043a0 <main+0x93c>)
 800426e:	881b      	ldrh	r3, [r3, #0]
 8004270:	b29b      	uxth	r3, r3
 8004272:	4619      	mov	r1, r3
 8004274:	893a      	ldrh	r2, [r7, #8]
 8004276:	88bb      	ldrh	r3, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	4299      	cmp	r1, r3
 800427c:	dc23      	bgt.n	80042c6 <main+0x862>
 800427e:	4b49      	ldr	r3, [pc, #292]	@ (80043a4 <main+0x940>)
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	2bc7      	cmp	r3, #199	@ 0xc7
 8004286:	d91e      	bls.n	80042c6 <main+0x862>
 8004288:	4b46      	ldr	r3, [pc, #280]	@ (80043a4 <main+0x940>)
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	2be6      	cmp	r3, #230	@ 0xe6
 8004290:	d819      	bhi.n	80042c6 <main+0x862>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004292:	2200      	movs	r2, #0
 8004294:	4944      	ldr	r1, [pc, #272]	@ (80043a8 <main+0x944>)
 8004296:	4845      	ldr	r0, [pc, #276]	@ (80043ac <main+0x948>)
 8004298:	f007 f9e6 	bl	800b668 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800429c:	2200      	movs	r2, #0
 800429e:	4944      	ldr	r1, [pc, #272]	@ (80043b0 <main+0x94c>)
 80042a0:	4842      	ldr	r0, [pc, #264]	@ (80043ac <main+0x948>)
 80042a2:	f007 fac3 	bl	800b82c <HAL_RTC_GetDate>
				          sTime.Minutes = (sTime.Minutes > 0) ? sTime.Minutes - 1 : 59;
 80042a6:	4b40      	ldr	r3, [pc, #256]	@ (80043a8 <main+0x944>)
 80042a8:	785b      	ldrb	r3, [r3, #1]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <main+0x854>
 80042ae:	4b3e      	ldr	r3, [pc, #248]	@ (80043a8 <main+0x944>)
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	e000      	b.n	80042ba <main+0x856>
 80042b8:	233b      	movs	r3, #59	@ 0x3b
 80042ba:	4a3b      	ldr	r2, [pc, #236]	@ (80043a8 <main+0x944>)
 80042bc:	7053      	strb	r3, [r2, #1]
				          needRedraw = 1;
 80042be:	4b3d      	ldr	r3, [pc, #244]	@ (80043b4 <main+0x950>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e0a9      	b.n	800441a <main+0x9b6>
				      }
				      // Année +
				      else if (x >= col3 && x <= col3 + buttonSize && y >= 40 && y <= 70) {
 80042c6:	4b36      	ldr	r3, [pc, #216]	@ (80043a0 <main+0x93c>)
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d830      	bhi.n	8004334 <main+0x8d0>
 80042d2:	4b33      	ldr	r3, [pc, #204]	@ (80043a0 <main+0x93c>)
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	4619      	mov	r1, r3
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	88bb      	ldrh	r3, [r7, #4]
 80042de:	4413      	add	r3, r2
 80042e0:	4299      	cmp	r1, r3
 80042e2:	dc27      	bgt.n	8004334 <main+0x8d0>
 80042e4:	4b2f      	ldr	r3, [pc, #188]	@ (80043a4 <main+0x940>)
 80042e6:	881b      	ldrh	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b27      	cmp	r3, #39	@ 0x27
 80042ec:	d922      	bls.n	8004334 <main+0x8d0>
 80042ee:	4b2d      	ldr	r3, [pc, #180]	@ (80043a4 <main+0x940>)
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b46      	cmp	r3, #70	@ 0x46
 80042f6:	d81d      	bhi.n	8004334 <main+0x8d0>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80042f8:	2200      	movs	r2, #0
 80042fa:	492b      	ldr	r1, [pc, #172]	@ (80043a8 <main+0x944>)
 80042fc:	482b      	ldr	r0, [pc, #172]	@ (80043ac <main+0x948>)
 80042fe:	f007 f9b3 	bl	800b668 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004302:	2200      	movs	r2, #0
 8004304:	492a      	ldr	r1, [pc, #168]	@ (80043b0 <main+0x94c>)
 8004306:	4829      	ldr	r0, [pc, #164]	@ (80043ac <main+0x948>)
 8004308:	f007 fa90 	bl	800b82c <HAL_RTC_GetDate>
				          if(sDate.Year < 99) {  // Limite pour format BCD
 800430c:	4b28      	ldr	r3, [pc, #160]	@ (80043b0 <main+0x94c>)
 800430e:	78db      	ldrb	r3, [r3, #3]
 8004310:	2b62      	cmp	r3, #98	@ 0x62
 8004312:	f200 8082 	bhi.w	800441a <main+0x9b6>
				              sDate.Year++;
 8004316:	4b26      	ldr	r3, [pc, #152]	@ (80043b0 <main+0x94c>)
 8004318:	78db      	ldrb	r3, [r3, #3]
 800431a:	3301      	adds	r3, #1
 800431c:	b2da      	uxtb	r2, r3
 800431e:	4b24      	ldr	r3, [pc, #144]	@ (80043b0 <main+0x94c>)
 8004320:	70da      	strb	r2, [r3, #3]
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004322:	2200      	movs	r2, #0
 8004324:	4922      	ldr	r1, [pc, #136]	@ (80043b0 <main+0x94c>)
 8004326:	4821      	ldr	r0, [pc, #132]	@ (80043ac <main+0x948>)
 8004328:	f007 f9fc 	bl	800b724 <HAL_RTC_SetDate>
				              needRedraw = 1;
 800432c:	4b21      	ldr	r3, [pc, #132]	@ (80043b4 <main+0x950>)
 800432e:	2201      	movs	r2, #1
 8004330:	601a      	str	r2, [r3, #0]
				          if(sDate.Year < 99) {  // Limite pour format BCD
 8004332:	e072      	b.n	800441a <main+0x9b6>
				          }
				      }
				      // Année -
				      else if (x >= col3 && x <= col3 + buttonSize && y >= 105 && y <= 135) {
 8004334:	4b1a      	ldr	r3, [pc, #104]	@ (80043a0 <main+0x93c>)
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	b29b      	uxth	r3, r3
 800433a:	88fa      	ldrh	r2, [r7, #6]
 800433c:	429a      	cmp	r2, r3
 800433e:	d83d      	bhi.n	80043bc <main+0x958>
 8004340:	4b17      	ldr	r3, [pc, #92]	@ (80043a0 <main+0x93c>)
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	4619      	mov	r1, r3
 8004348:	88fa      	ldrh	r2, [r7, #6]
 800434a:	88bb      	ldrh	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	4299      	cmp	r1, r3
 8004350:	dc34      	bgt.n	80043bc <main+0x958>
 8004352:	4b14      	ldr	r3, [pc, #80]	@ (80043a4 <main+0x940>)
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b68      	cmp	r3, #104	@ 0x68
 800435a:	d92f      	bls.n	80043bc <main+0x958>
 800435c:	4b11      	ldr	r3, [pc, #68]	@ (80043a4 <main+0x940>)
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b87      	cmp	r3, #135	@ 0x87
 8004364:	d82a      	bhi.n	80043bc <main+0x958>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004366:	2200      	movs	r2, #0
 8004368:	490f      	ldr	r1, [pc, #60]	@ (80043a8 <main+0x944>)
 800436a:	4810      	ldr	r0, [pc, #64]	@ (80043ac <main+0x948>)
 800436c:	f007 f97c 	bl	800b668 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004370:	2200      	movs	r2, #0
 8004372:	490f      	ldr	r1, [pc, #60]	@ (80043b0 <main+0x94c>)
 8004374:	480d      	ldr	r0, [pc, #52]	@ (80043ac <main+0x948>)
 8004376:	f007 fa59 	bl	800b82c <HAL_RTC_GetDate>
				          if(sDate.Year > 0) {
 800437a:	4b0d      	ldr	r3, [pc, #52]	@ (80043b0 <main+0x94c>)
 800437c:	78db      	ldrb	r3, [r3, #3]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d04b      	beq.n	800441a <main+0x9b6>
				              sDate.Year--;
 8004382:	4b0b      	ldr	r3, [pc, #44]	@ (80043b0 <main+0x94c>)
 8004384:	78db      	ldrb	r3, [r3, #3]
 8004386:	3b01      	subs	r3, #1
 8004388:	b2da      	uxtb	r2, r3
 800438a:	4b09      	ldr	r3, [pc, #36]	@ (80043b0 <main+0x94c>)
 800438c:	70da      	strb	r2, [r3, #3]
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800438e:	2200      	movs	r2, #0
 8004390:	4907      	ldr	r1, [pc, #28]	@ (80043b0 <main+0x94c>)
 8004392:	4806      	ldr	r0, [pc, #24]	@ (80043ac <main+0x948>)
 8004394:	f007 f9c6 	bl	800b724 <HAL_RTC_SetDate>
				              needRedraw = 1;
 8004398:	4b06      	ldr	r3, [pc, #24]	@ (80043b4 <main+0x950>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
				          if(sDate.Year > 0) {
 800439e:	e03c      	b.n	800441a <main+0x9b6>
 80043a0:	20005c5c 	.word	0x20005c5c
 80043a4:	20005c5e 	.word	0x20005c5e
 80043a8:	2000510c 	.word	0x2000510c
 80043ac:	20005c94 	.word	0x20005c94
 80043b0:	20005120 	.word	0x20005120
 80043b4:	20004ecc 	.word	0x20004ecc
 80043b8:	88888889 	.word	0x88888889
				          }
				      }
				      // Bouton Valider
				      else if (x >= 340 && x <= 440 && y >= 220 && y <= 250) {
 80043bc:	4b27      	ldr	r3, [pc, #156]	@ (800445c <main+0x9f8>)
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 80043c6:	d328      	bcc.n	800441a <main+0x9b6>
 80043c8:	4b24      	ldr	r3, [pc, #144]	@ (800445c <main+0x9f8>)
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 80043d2:	d822      	bhi.n	800441a <main+0x9b6>
 80043d4:	4b22      	ldr	r3, [pc, #136]	@ (8004460 <main+0x9fc>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	2bdb      	cmp	r3, #219	@ 0xdb
 80043dc:	d91d      	bls.n	800441a <main+0x9b6>
 80043de:	4b20      	ldr	r3, [pc, #128]	@ (8004460 <main+0x9fc>)
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2bfa      	cmp	r3, #250	@ 0xfa
 80043e6:	d818      	bhi.n	800441a <main+0x9b6>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80043e8:	2200      	movs	r2, #0
 80043ea:	491e      	ldr	r1, [pc, #120]	@ (8004464 <main+0xa00>)
 80043ec:	481e      	ldr	r0, [pc, #120]	@ (8004468 <main+0xa04>)
 80043ee:	f007 f93b 	bl	800b668 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80043f2:	2200      	movs	r2, #0
 80043f4:	491d      	ldr	r1, [pc, #116]	@ (800446c <main+0xa08>)
 80043f6:	481c      	ldr	r0, [pc, #112]	@ (8004468 <main+0xa04>)
 80043f8:	f007 fa18 	bl	800b82c <HAL_RTC_GetDate>
				          // Mise à jour de la date et de l'heure
				          HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80043fc:	2200      	movs	r2, #0
 80043fe:	4919      	ldr	r1, [pc, #100]	@ (8004464 <main+0xa00>)
 8004400:	4819      	ldr	r0, [pc, #100]	@ (8004468 <main+0xa04>)
 8004402:	f007 f897 	bl	800b534 <HAL_RTC_SetTime>
				          HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004406:	2200      	movs	r2, #0
 8004408:	4918      	ldr	r1, [pc, #96]	@ (800446c <main+0xa08>)
 800440a:	4817      	ldr	r0, [pc, #92]	@ (8004468 <main+0xa04>)
 800440c:	f007 f98a 	bl	800b724 <HAL_RTC_SetDate>
				          flag = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
				          needRedraw = 1;
 8004414:	4b16      	ldr	r3, [pc, #88]	@ (8004470 <main+0xa0c>)
 8004416:	2201      	movs	r2, #1
 8004418:	601a      	str	r2, [r3, #0]
				      }

				      // Si une valeur a été modifiée, on met à jour la RTC
				      if (needRedraw) {
 800441a:	4b15      	ldr	r3, [pc, #84]	@ (8004470 <main+0xa0c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d019      	beq.n	8004456 <main+0x9f2>
				          if (flag == 3) {  // Si on est toujours sur la page de réglage
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b03      	cmp	r3, #3
 8004426:	d116      	bne.n	8004456 <main+0x9f2>
				              HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004428:	2200      	movs	r2, #0
 800442a:	490e      	ldr	r1, [pc, #56]	@ (8004464 <main+0xa00>)
 800442c:	480e      	ldr	r0, [pc, #56]	@ (8004468 <main+0xa04>)
 800442e:	f007 f881 	bl	800b534 <HAL_RTC_SetTime>
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004432:	2200      	movs	r2, #0
 8004434:	490d      	ldr	r1, [pc, #52]	@ (800446c <main+0xa08>)
 8004436:	480c      	ldr	r0, [pc, #48]	@ (8004468 <main+0xa04>)
 8004438:	f007 f974 	bl	800b724 <HAL_RTC_SetDate>
			  if (flag == 0 && x > 40 && x < 220 && y > 60 && y < 220) {
 800443c:	e00b      	b.n	8004456 <main+0x9f2>
 800443e:	e00a      	b.n	8004456 <main+0x9f2>
				          }
				      }
				  }

		  } else if (!TS_State.touchDetected) {
 8004440:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <main+0xa10>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	f47f ab56 	bne.w	8003af8 <main+0x94>
			  debounce = 0; // Reset debounce flag when touch is released
 800444c:	4b0a      	ldr	r3, [pc, #40]	@ (8004478 <main+0xa14>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	f7ff bb51 	b.w	8003af8 <main+0x94>
			  if (flag == 0 && x > 40 && x < 220 && y > 60 && y < 220) {
 8004456:	bf00      	nop
         if (needRedraw) {
 8004458:	f7ff bb4e 	b.w	8003af8 <main+0x94>
 800445c:	20005c5c 	.word	0x20005c5c
 8004460:	20005c5e 	.word	0x20005c5e
 8004464:	2000510c 	.word	0x2000510c
 8004468:	20005c94 	.word	0x20005c94
 800446c:	20005120 	.word	0x20005120
 8004470:	20004ecc 	.word	0x20004ecc
 8004474:	20005c30 	.word	0x20005c30
 8004478:	20005c60 	.word	0x20005c60

0800447c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b094      	sub	sp, #80	@ 0x50
 8004480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004482:	f107 0320 	add.w	r3, r7, #32
 8004486:	2230      	movs	r2, #48	@ 0x30
 8004488:	2100      	movs	r1, #0
 800448a:	4618      	mov	r0, r3
 800448c:	f00c fba0 	bl	8010bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004490:	f107 030c 	add.w	r3, r7, #12
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	605a      	str	r2, [r3, #4]
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	60da      	str	r2, [r3, #12]
 800449e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80044a0:	f005 feea 	bl	800a278 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004558 <SystemClock_Config+0xdc>)
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004558 <SystemClock_Config+0xdc>)
 80044aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80044b0:	4b29      	ldr	r3, [pc, #164]	@ (8004558 <SystemClock_Config+0xdc>)
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044bc:	4b27      	ldr	r3, [pc, #156]	@ (800455c <SystemClock_Config+0xe0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a26      	ldr	r2, [pc, #152]	@ (800455c <SystemClock_Config+0xe0>)
 80044c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b24      	ldr	r3, [pc, #144]	@ (800455c <SystemClock_Config+0xe0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80044d4:	2309      	movs	r3, #9
 80044d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80044de:	2301      	movs	r3, #1
 80044e0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044e2:	2302      	movs	r3, #2
 80044e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80044ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80044ec:	2319      	movs	r3, #25
 80044ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80044f0:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 80044f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044f6:	2302      	movs	r3, #2
 80044f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80044fa:	2309      	movs	r3, #9
 80044fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044fe:	f107 0320 	add.w	r3, r7, #32
 8004502:	4618      	mov	r0, r3
 8004504:	f005 ff18 	bl	800a338 <HAL_RCC_OscConfig>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d001      	beq.n	8004512 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800450e:	f000 f8bd 	bl	800468c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004512:	f005 fec1 	bl	800a298 <HAL_PWREx_EnableOverDrive>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800451c:	f000 f8b6 	bl	800468c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004520:	230f      	movs	r3, #15
 8004522:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004524:	2302      	movs	r3, #2
 8004526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004528:	2300      	movs	r3, #0
 800452a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800452c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004530:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004536:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8004538:	f107 030c 	add.w	r3, r7, #12
 800453c:	2107      	movs	r1, #7
 800453e:	4618      	mov	r0, r3
 8004540:	f006 f99e 	bl	800a880 <HAL_RCC_ClockConfig>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800454a:	f000 f89f 	bl	800468c <Error_Handler>
  }
}
 800454e:	bf00      	nop
 8004550:	3750      	adds	r7, #80	@ 0x50
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800
 800455c:	40007000 	.word	0x40007000

08004560 <TouchTimer_Init>:

/* USER CODE BEGIN 4 */
void TouchTimer_Init() {
 8004560:	b598      	push	{r3, r4, r7, lr}
 8004562:	af00      	add	r7, sp, #0
    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8004564:	f001 fad6 	bl	8005b14 <BSP_LCD_GetXSize>
 8004568:	4603      	mov	r3, r0
 800456a:	b29c      	uxth	r4, r3
 800456c:	f001 fae6 	bl	8005b3c <BSP_LCD_GetYSize>
 8004570:	4603      	mov	r3, r0
 8004572:	b29b      	uxth	r3, r3
 8004574:	4619      	mov	r1, r3
 8004576:	4620      	mov	r0, r4
 8004578:	f002 fdd2 	bl	8007120 <BSP_TS_Init>

    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800457c:	4808      	ldr	r0, [pc, #32]	@ (80045a0 <TouchTimer_Init+0x40>)
 800457e:	f008 fd12 	bl	800cfa6 <HAL_TIM_Base_Init>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <TouchTimer_Init+0x2c>
        while (1);
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <TouchTimer_Init+0x28>
    }
    if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 800458c:	4804      	ldr	r0, [pc, #16]	@ (80045a0 <TouchTimer_Init+0x40>)
 800458e:	f008 fd61 	bl	800d054 <HAL_TIM_Base_Start_IT>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <TouchTimer_Init+0x3c>
        while (1);
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <TouchTimer_Init+0x38>
    }
}
 800459c:	bf00      	nop
 800459e:	bd98      	pop	{r3, r4, r7, pc}
 80045a0:	20005d88 	.word	0x20005d88

080045a4 <PollTouchScreen>:

void PollTouchScreen(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b08c      	sub	sp, #48	@ 0x30
 80045a8:	af00      	add	r7, sp, #0
	static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
	TS_StateTypeDef ts;                   /* Actual touch state from the touch sensor used from BSP package */
	BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API)*/
 80045aa:	1d3b      	adds	r3, r7, #4
 80045ac:	4618      	mov	r0, r3
 80045ae:	f002 fdf7 	bl	80071a0 <BSP_TS_GetState>
	TS_State.touchDetected = ts.touchDetected;  /* Store pressed state */
 80045b2:	793a      	ldrb	r2, [r7, #4]
 80045b4:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <PollTouchScreen+0x54>)
 80045b6:	701a      	strb	r2, [r3, #0]

	/* Check if the touch is pressed */
	if ((prev_state.touchDetected != ts.touchDetected))
 80045b8:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <PollTouchScreen+0x58>)
 80045ba:	781a      	ldrb	r2, [r3, #0]
 80045bc:	793b      	ldrb	r3, [r7, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d016      	beq.n	80045f0 <PollTouchScreen+0x4c>
	{
		prev_state.touchDetected = ts.touchDetected;
 80045c2:	793a      	ldrb	r2, [r7, #4]
 80045c4:	4b0d      	ldr	r3, [pc, #52]	@ (80045fc <PollTouchScreen+0x58>)
 80045c6:	701a      	strb	r2, [r3, #0]
		/* Check touch variations */
		if ((ts.touchX[0] != 0) && (ts.touchY[0] != 0))
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <PollTouchScreen+0x3c>
 80045ce:	8a3b      	ldrh	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <PollTouchScreen+0x3c>
		{
		  prev_state.touchX[0] = ts.touchX[0];
 80045d4:	88fa      	ldrh	r2, [r7, #6]
 80045d6:	4b09      	ldr	r3, [pc, #36]	@ (80045fc <PollTouchScreen+0x58>)
 80045d8:	805a      	strh	r2, [r3, #2]
		  prev_state.touchY[0] = ts.touchY[0];
 80045da:	8a3a      	ldrh	r2, [r7, #16]
 80045dc:	4b07      	ldr	r3, [pc, #28]	@ (80045fc <PollTouchScreen+0x58>)
 80045de:	819a      	strh	r2, [r3, #12]
		}
		x = prev_state.touchX[0];
 80045e0:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <PollTouchScreen+0x58>)
 80045e2:	885a      	ldrh	r2, [r3, #2]
 80045e4:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <PollTouchScreen+0x5c>)
 80045e6:	801a      	strh	r2, [r3, #0]
		y = prev_state.touchY[0];
 80045e8:	4b04      	ldr	r3, [pc, #16]	@ (80045fc <PollTouchScreen+0x58>)
 80045ea:	899a      	ldrh	r2, [r3, #12]
 80045ec:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <PollTouchScreen+0x60>)
 80045ee:	801a      	strh	r2, [r3, #0]
	}
}
 80045f0:	bf00      	nop
 80045f2:	3730      	adds	r7, #48	@ 0x30
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20005c30 	.word	0x20005c30
 80045fc:	20005c68 	.word	0x20005c68
 8004600:	20005c5c 	.word	0x20005c5c
 8004604:	20005c5e 	.word	0x20005c5e

08004608 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]

  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */
  //routine de l'écran tactile
  if (htim->Instance == TIM3)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a0e      	ldr	r2, [pc, #56]	@ (8004650 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d103      	bne.n	8004622 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
	  PollTouchScreen();
 800461a:	f7ff ffc3 	bl	80045a4 <PollTouchScreen>
 	  date_Heure();
 800461e:	f7fc fcdd 	bl	8000fdc <date_Heure>

  }
  //routine d'interruption pour un arret à 1 minute (Annemometre)
  if (htim->Instance == TIM6) {
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a0b      	ldr	r2, [pc, #44]	@ (8004654 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d105      	bne.n	8004638 <HAL_TIM_PeriodElapsedCallback+0x30>
	  // Timer 1 minute atteint
	minute_flag = 1; // Activer le flag indiquant la fin de 1 minute
 800462c:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
	  printf("Minute flag set!\r\n"); // Pour vérifier que l'interruption est déclenchée
 8004632:	480a      	ldr	r0, [pc, #40]	@ (800465c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004634:	f00c f998 	bl	8010968 <puts>
  }

  //capteur I2C
  if(htim->Instance == TIM7) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a08      	ldr	r2, [pc, #32]	@ (8004660 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d102      	bne.n	8004648 <HAL_TIM_PeriodElapsedCallback+0x40>
  	  // Timer 1 minute atteint
  	  I2c_Flag=1; // Activer le flag indiquant la fin de 1 minute
 8004642:	4b08      	ldr	r3, [pc, #32]	@ (8004664 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
    }
  /* USER CODE END Callback 1 */
}
 8004648:	bf00      	nop
 800464a:	3708      	adds	r7, #8
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	40000400 	.word	0x40000400
 8004654:	40001000 	.word	0x40001000
 8004658:	20005a1c 	.word	0x20005a1c
 800465c:	08013014 	.word	0x08013014
 8004660:	40001400 	.word	0x40001400
 8004664:	20005c64 	.word	0x20005c64

08004668 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART1 and Loop until the end of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8004670:	1d39      	adds	r1, r7, #4
 8004672:	2364      	movs	r3, #100	@ 0x64
 8004674:	2201      	movs	r2, #1
 8004676:	4804      	ldr	r0, [pc, #16]	@ (8004688 <__io_putchar+0x20>)
 8004678:	f009 fba2 	bl	800ddc0 <HAL_UART_Transmit>
return ch;
 800467c:	687b      	ldr	r3, [r7, #4]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20005e6c 	.word	0x20005e6c

0800468c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004690:	b672      	cpsid	i
}
 8004692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <Error_Handler+0x8>

08004698 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b090      	sub	sp, #64	@ 0x40
 800469c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800469e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80046a2:	2200      	movs	r2, #0
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	605a      	str	r2, [r3, #4]
 80046a8:	609a      	str	r2, [r3, #8]
 80046aa:	60da      	str	r2, [r3, #12]
 80046ac:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80046ae:	2300      	movs	r3, #0
 80046b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80046b2:	463b      	mov	r3, r7
 80046b4:	2228      	movs	r2, #40	@ 0x28
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f00c fa89 	bl	8010bd0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80046be:	4b3f      	ldr	r3, [pc, #252]	@ (80047bc <MX_RTC_Init+0x124>)
 80046c0:	4a3f      	ldr	r2, [pc, #252]	@ (80047c0 <MX_RTC_Init+0x128>)
 80046c2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80046c4:	4b3d      	ldr	r3, [pc, #244]	@ (80047bc <MX_RTC_Init+0x124>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80046ca:	4b3c      	ldr	r3, [pc, #240]	@ (80047bc <MX_RTC_Init+0x124>)
 80046cc:	227f      	movs	r2, #127	@ 0x7f
 80046ce:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80046d0:	4b3a      	ldr	r3, [pc, #232]	@ (80047bc <MX_RTC_Init+0x124>)
 80046d2:	22ff      	movs	r2, #255	@ 0xff
 80046d4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80046d6:	4b39      	ldr	r3, [pc, #228]	@ (80047bc <MX_RTC_Init+0x124>)
 80046d8:	2200      	movs	r2, #0
 80046da:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80046dc:	4b37      	ldr	r3, [pc, #220]	@ (80047bc <MX_RTC_Init+0x124>)
 80046de:	2200      	movs	r2, #0
 80046e0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80046e2:	4b36      	ldr	r3, [pc, #216]	@ (80047bc <MX_RTC_Init+0x124>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80046e8:	4834      	ldr	r0, [pc, #208]	@ (80047bc <MX_RTC_Init+0x124>)
 80046ea:	f006 fe9f 	bl	800b42c <HAL_RTC_Init>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80046f4:	f7ff ffca 	bl	800468c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800470a:	2300      	movs	r3, #0
 800470c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800470e:	2300      	movs	r3, #0
 8004710:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004712:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004716:	2200      	movs	r2, #0
 8004718:	4619      	mov	r1, r3
 800471a:	4828      	ldr	r0, [pc, #160]	@ (80047bc <MX_RTC_Init+0x124>)
 800471c:	f006 ff0a 	bl	800b534 <HAL_RTC_SetTime>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8004726:	f7ff ffb1 	bl	800468c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 1;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0;
 800473c:	2300      	movs	r3, #0
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004742:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004746:	2200      	movs	r2, #0
 8004748:	4619      	mov	r1, r3
 800474a:	481c      	ldr	r0, [pc, #112]	@ (80047bc <MX_RTC_Init+0x124>)
 800474c:	f006 ffea 	bl	800b724 <HAL_RTC_SetDate>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8004756:	f7ff ff99 	bl	800468c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800475a:	2300      	movs	r3, #0
 800475c:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004776:	2300      	movs	r3, #0
 8004778:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800477a:	2300      	movs	r3, #0
 800477c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8004784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800478a:	463b      	mov	r3, r7
 800478c:	2200      	movs	r2, #0
 800478e:	4619      	mov	r1, r3
 8004790:	480a      	ldr	r0, [pc, #40]	@ (80047bc <MX_RTC_Init+0x124>)
 8004792:	f007 f89b 	bl	800b8cc <HAL_RTC_SetAlarm_IT>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800479c:	f7ff ff76 	bl	800468c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80047a0:	2200      	movs	r2, #0
 80047a2:	2100      	movs	r1, #0
 80047a4:	4805      	ldr	r0, [pc, #20]	@ (80047bc <MX_RTC_Init+0x124>)
 80047a6:	f007 fae3 	bl	800bd70 <HAL_RTCEx_SetWakeUpTimer_IT>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 80047b0:	f7ff ff6c 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80047b4:	bf00      	nop
 80047b6:	3740      	adds	r7, #64	@ 0x40
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	20005c94 	.word	0x20005c94
 80047c0:	40002800 	.word	0x40002800

080047c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b0a4      	sub	sp, #144	@ 0x90
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047cc:	f107 030c 	add.w	r3, r7, #12
 80047d0:	2284      	movs	r2, #132	@ 0x84
 80047d2:	2100      	movs	r1, #0
 80047d4:	4618      	mov	r0, r3
 80047d6:	f00c f9fb 	bl	8010bd0 <memset>
  if(rtcHandle->Instance==RTC)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a16      	ldr	r2, [pc, #88]	@ (8004838 <HAL_RTC_MspInit+0x74>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d124      	bne.n	800482e <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80047e4:	2320      	movs	r3, #32
 80047e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80047e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	4618      	mov	r0, r3
 80047f4:	f006 fa2a 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80047fe:	f7ff ff45 	bl	800468c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004802:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <HAL_RTC_MspInit+0x78>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004806:	4a0d      	ldr	r2, [pc, #52]	@ (800483c <HAL_RTC_MspInit+0x78>)
 8004808:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800480c:	6713      	str	r3, [r2, #112]	@ 0x70

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800480e:	2200      	movs	r2, #0
 8004810:	2100      	movs	r1, #0
 8004812:	2003      	movs	r0, #3
 8004814:	f003 fc95 	bl	8008142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004818:	2003      	movs	r0, #3
 800481a:	f003 fcae 	bl	800817a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	2100      	movs	r1, #0
 8004822:	2029      	movs	r0, #41	@ 0x29
 8004824:	f003 fc8d 	bl	8008142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004828:	2029      	movs	r0, #41	@ 0x29
 800482a:	f003 fca6 	bl	800817a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800482e:	bf00      	nop
 8004830:	3790      	adds	r7, #144	@ 0x90
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40002800 	.word	0x40002800
 800483c:	40023800 	.word	0x40023800

08004840 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8004844:	4b0c      	ldr	r3, [pc, #48]	@ (8004878 <MX_SDMMC1_SD_Init+0x38>)
 8004846:	4a0d      	ldr	r2, [pc, #52]	@ (800487c <MX_SDMMC1_SD_Init+0x3c>)
 8004848:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800484a:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <MX_SDMMC1_SD_Init+0x38>)
 800484c:	2200      	movs	r2, #0
 800484e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004850:	4b09      	ldr	r3, [pc, #36]	@ (8004878 <MX_SDMMC1_SD_Init+0x38>)
 8004852:	2200      	movs	r2, #0
 8004854:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004856:	4b08      	ldr	r3, [pc, #32]	@ (8004878 <MX_SDMMC1_SD_Init+0x38>)
 8004858:	2200      	movs	r2, #0
 800485a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800485c:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <MX_SDMMC1_SD_Init+0x38>)
 800485e:	2200      	movs	r2, #0
 8004860:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004862:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <MX_SDMMC1_SD_Init+0x38>)
 8004864:	2200      	movs	r2, #0
 8004866:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004868:	4b03      	ldr	r3, [pc, #12]	@ (8004878 <MX_SDMMC1_SD_Init+0x38>)
 800486a:	2200      	movs	r2, #0
 800486c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800486e:	bf00      	nop
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	20005cb4 	.word	0x20005cb4
 800487c:	40012c00 	.word	0x40012c00

08004880 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b0ac      	sub	sp, #176	@ 0xb0
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004888:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	60da      	str	r2, [r3, #12]
 8004896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004898:	f107 0318 	add.w	r3, r7, #24
 800489c:	2284      	movs	r2, #132	@ 0x84
 800489e:	2100      	movs	r1, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	f00c f995 	bl	8010bd0 <memset>
  if(sdHandle->Instance==SDMMC1)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a34      	ldr	r2, [pc, #208]	@ (800497c <HAL_SD_MspInit+0xfc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d161      	bne.n	8004974 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80048b0:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 80048b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80048b6:	2300      	movs	r3, #0
 80048b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80048bc:	2300      	movs	r3, #0
 80048be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048c2:	f107 0318 	add.w	r3, r7, #24
 80048c6:	4618      	mov	r0, r3
 80048c8:	f006 f9c0 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 80048d2:	f7ff fedb 	bl	800468c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80048d6:	4b2a      	ldr	r3, [pc, #168]	@ (8004980 <HAL_SD_MspInit+0x100>)
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	4a29      	ldr	r2, [pc, #164]	@ (8004980 <HAL_SD_MspInit+0x100>)
 80048dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80048e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80048e2:	4b27      	ldr	r3, [pc, #156]	@ (8004980 <HAL_SD_MspInit+0x100>)
 80048e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80048ee:	4b24      	ldr	r3, [pc, #144]	@ (8004980 <HAL_SD_MspInit+0x100>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	4a23      	ldr	r2, [pc, #140]	@ (8004980 <HAL_SD_MspInit+0x100>)
 80048f4:	f043 0304 	orr.w	r3, r3, #4
 80048f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80048fa:	4b21      	ldr	r3, [pc, #132]	@ (8004980 <HAL_SD_MspInit+0x100>)
 80048fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004906:	4b1e      	ldr	r3, [pc, #120]	@ (8004980 <HAL_SD_MspInit+0x100>)
 8004908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490a:	4a1d      	ldr	r2, [pc, #116]	@ (8004980 <HAL_SD_MspInit+0x100>)
 800490c:	f043 0308 	orr.w	r3, r3, #8
 8004910:	6313      	str	r3, [r2, #48]	@ 0x30
 8004912:	4b1b      	ldr	r3, [pc, #108]	@ (8004980 <HAL_SD_MspInit+0x100>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 800491e:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8004922:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004926:	2302      	movs	r3, #2
 8004928:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004932:	2303      	movs	r3, #3
 8004934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004938:	230c      	movs	r3, #12
 800493a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800493e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004942:	4619      	mov	r1, r3
 8004944:	480f      	ldr	r0, [pc, #60]	@ (8004984 <HAL_SD_MspInit+0x104>)
 8004946:	f004 f87d 	bl	8008a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800494a:	2304      	movs	r3, #4
 800494c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004950:	2302      	movs	r3, #2
 8004952:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004956:	2300      	movs	r3, #0
 8004958:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800495c:	2303      	movs	r3, #3
 800495e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004962:	230c      	movs	r3, #12
 8004964:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004968:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800496c:	4619      	mov	r1, r3
 800496e:	4806      	ldr	r0, [pc, #24]	@ (8004988 <HAL_SD_MspInit+0x108>)
 8004970:	f004 f868 	bl	8008a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8004974:	bf00      	nop
 8004976:	37b0      	adds	r7, #176	@ 0xb0
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40012c00 	.word	0x40012c00
 8004980:	40023800 	.word	0x40023800
 8004984:	40020800 	.word	0x40020800
 8004988:	40020c00 	.word	0x40020c00

0800498c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	4b0f      	ldr	r3, [pc, #60]	@ (80049d0 <HAL_MspInit+0x44>)
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	4a0e      	ldr	r2, [pc, #56]	@ (80049d0 <HAL_MspInit+0x44>)
 8004998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800499c:	6413      	str	r3, [r2, #64]	@ 0x40
 800499e:	4b0c      	ldr	r3, [pc, #48]	@ (80049d0 <HAL_MspInit+0x44>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a6:	607b      	str	r3, [r7, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049aa:	4b09      	ldr	r3, [pc, #36]	@ (80049d0 <HAL_MspInit+0x44>)
 80049ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ae:	4a08      	ldr	r2, [pc, #32]	@ (80049d0 <HAL_MspInit+0x44>)
 80049b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80049b6:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <HAL_MspInit+0x44>)
 80049b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800

080049d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <NMI_Handler+0x4>

080049dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049e0:	bf00      	nop
 80049e2:	e7fd      	b.n	80049e0 <HardFault_Handler+0x4>

080049e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049e4:	b480      	push	{r7}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049e8:	bf00      	nop
 80049ea:	e7fd      	b.n	80049e8 <MemManage_Handler+0x4>

080049ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <BusFault_Handler+0x4>

080049f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049f8:	bf00      	nop
 80049fa:	e7fd      	b.n	80049f8 <UsageFault_Handler+0x4>

080049fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a0e:	bf00      	nop
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a2a:	f002 fe3d 	bl	80076a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004a38:	4802      	ldr	r0, [pc, #8]	@ (8004a44 <RTC_WKUP_IRQHandler+0x10>)
 8004a3a:	f007 fa5b 	bl	800bef4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20005c94 	.word	0x20005c94

08004a48 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a4c:	4802      	ldr	r0, [pc, #8]	@ (8004a58 <TIM1_CC_IRQHandler+0x10>)
 8004a4e:	f008 fbd0 	bl	800d1f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20005d3c 	.word	0x20005d3c

08004a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004a60:	4802      	ldr	r0, [pc, #8]	@ (8004a6c <TIM3_IRQHandler+0x10>)
 8004a62:	f008 fbc6 	bl	800d1f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20005d88 	.word	0x20005d88

08004a70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004a74:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004a78:	f004 face 	bl	8009018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a7c:	bf00      	nop
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8004a84:	4802      	ldr	r0, [pc, #8]	@ (8004a90 <RTC_Alarm_IRQHandler+0x10>)
 8004a86:	f007 f865 	bl	800bb54 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20005c94 	.word	0x20005c94

08004a94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a98:	4802      	ldr	r0, [pc, #8]	@ (8004aa4 <TIM6_DAC_IRQHandler+0x10>)
 8004a9a:	f008 fbaa 	bl	800d1f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a9e:	bf00      	nop
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	20005dd4 	.word	0x20005dd4

08004aa8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004aac:	4802      	ldr	r0, [pc, #8]	@ (8004ab8 <TIM7_IRQHandler+0x10>)
 8004aae:	f008 fba0 	bl	800d1f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	20005e20 	.word	0x20005e20

08004abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return 1;
 8004ac0:	2301      	movs	r3, #1
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <_kill>:

int _kill(int pid, int sig)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ad6:	f00c f8cd 	bl	8010c74 <__errno>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2216      	movs	r2, #22
 8004ade:	601a      	str	r2, [r3, #0]
  return -1;
 8004ae0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <_exit>:

void _exit (int status)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004af4:	f04f 31ff 	mov.w	r1, #4294967295
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff ffe7 	bl	8004acc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <_exit+0x12>

08004b02 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b086      	sub	sp, #24
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
 8004b12:	e00a      	b.n	8004b2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b14:	f3af 8000 	nop.w
 8004b18:	4601      	mov	r1, r0
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	60ba      	str	r2, [r7, #8]
 8004b20:	b2ca      	uxtb	r2, r1
 8004b22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	3301      	adds	r3, #1
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	dbf0      	blt.n	8004b14 <_read+0x12>
  }

  return len;
 8004b32:	687b      	ldr	r3, [r7, #4]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]
 8004b4c:	e009      	b.n	8004b62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	60ba      	str	r2, [r7, #8]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fd86 	bl	8004668 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	dbf1      	blt.n	8004b4e <_write+0x12>
  }
  return len;
 8004b6a:	687b      	ldr	r3, [r7, #4]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <_close>:

int _close(int file)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b9c:	605a      	str	r2, [r3, #4]
  return 0;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <_isatty>:

int _isatty(int file)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004bb4:	2301      	movs	r3, #1
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004be4:	4a14      	ldr	r2, [pc, #80]	@ (8004c38 <_sbrk+0x5c>)
 8004be6:	4b15      	ldr	r3, [pc, #84]	@ (8004c3c <_sbrk+0x60>)
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bf0:	4b13      	ldr	r3, [pc, #76]	@ (8004c40 <_sbrk+0x64>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d102      	bne.n	8004bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bf8:	4b11      	ldr	r3, [pc, #68]	@ (8004c40 <_sbrk+0x64>)
 8004bfa:	4a12      	ldr	r2, [pc, #72]	@ (8004c44 <_sbrk+0x68>)
 8004bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bfe:	4b10      	ldr	r3, [pc, #64]	@ (8004c40 <_sbrk+0x64>)
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d207      	bcs.n	8004c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c0c:	f00c f832 	bl	8010c74 <__errno>
 8004c10:	4603      	mov	r3, r0
 8004c12:	220c      	movs	r2, #12
 8004c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	e009      	b.n	8004c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c1c:	4b08      	ldr	r3, [pc, #32]	@ (8004c40 <_sbrk+0x64>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c22:	4b07      	ldr	r3, [pc, #28]	@ (8004c40 <_sbrk+0x64>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4413      	add	r3, r2
 8004c2a:	4a05      	ldr	r2, [pc, #20]	@ (8004c40 <_sbrk+0x64>)
 8004c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	20050000 	.word	0x20050000
 8004c3c:	00000800 	.word	0x00000800
 8004c40:	20005d38 	.word	0x20005d38
 8004c44:	20006330 	.word	0x20006330

08004c48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c4c:	4b06      	ldr	r3, [pc, #24]	@ (8004c68 <SystemInit+0x20>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c52:	4a05      	ldr	r2, [pc, #20]	@ (8004c68 <SystemInit+0x20>)
 8004c54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	e000ed00 	.word	0xe000ed00

08004c6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b088      	sub	sp, #32
 8004c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c72:	f107 0314 	add.w	r3, r7, #20
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004c7e:	1d3b      	adds	r3, r7, #4
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004c8a:	4b23      	ldr	r3, [pc, #140]	@ (8004d18 <MX_TIM1_Init+0xac>)
 8004c8c:	4a23      	ldr	r2, [pc, #140]	@ (8004d1c <MX_TIM1_Init+0xb0>)
 8004c8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8004c90:	4b21      	ldr	r3, [pc, #132]	@ (8004d18 <MX_TIM1_Init+0xac>)
 8004c92:	2263      	movs	r2, #99	@ 0x63
 8004c94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c96:	4b20      	ldr	r3, [pc, #128]	@ (8004d18 <MX_TIM1_Init+0xac>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d18 <MX_TIM1_Init+0xac>)
 8004c9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004ca2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d18 <MX_TIM1_Init+0xac>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004caa:	4b1b      	ldr	r3, [pc, #108]	@ (8004d18 <MX_TIM1_Init+0xac>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cb0:	4b19      	ldr	r3, [pc, #100]	@ (8004d18 <MX_TIM1_Init+0xac>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8004cb6:	4818      	ldr	r0, [pc, #96]	@ (8004d18 <MX_TIM1_Init+0xac>)
 8004cb8:	f008 fa44 	bl	800d144 <HAL_TIM_IC_Init>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004cc2:	f7ff fce3 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004cd2:	f107 0314 	add.w	r3, r7, #20
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	480f      	ldr	r0, [pc, #60]	@ (8004d18 <MX_TIM1_Init+0xac>)
 8004cda:	f008 ff77 	bl	800dbcc <HAL_TIMEx_MasterConfigSynchronization>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004ce4:	f7ff fcd2 	bl	800468c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004cec:	2301      	movs	r3, #1
 8004cee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004cf8:	1d3b      	adds	r3, r7, #4
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4806      	ldr	r0, [pc, #24]	@ (8004d18 <MX_TIM1_Init+0xac>)
 8004d00:	f008 fb7e 	bl	800d400 <HAL_TIM_IC_ConfigChannel>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8004d0a:	f7ff fcbf 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004d0e:	bf00      	nop
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20005d3c 	.word	0x20005d3c
 8004d1c:	40010000 	.word	0x40010000

08004d20 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004d26:	f107 030c 	add.w	r3, r7, #12
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	605a      	str	r2, [r3, #4]
 8004d30:	609a      	str	r2, [r3, #8]
 8004d32:	60da      	str	r2, [r3, #12]
 8004d34:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d36:	463b      	mov	r3, r7
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004d40:	4b1d      	ldr	r3, [pc, #116]	@ (8004db8 <MX_TIM3_Init+0x98>)
 8004d42:	4a1e      	ldr	r2, [pc, #120]	@ (8004dbc <MX_TIM3_Init+0x9c>)
 8004d44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8004d46:	4b1c      	ldr	r3, [pc, #112]	@ (8004db8 <MX_TIM3_Init+0x98>)
 8004d48:	f242 720f 	movw	r2, #9999	@ 0x270f
 8004d4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004db8 <MX_TIM3_Init+0x98>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8004d54:	4b18      	ldr	r3, [pc, #96]	@ (8004db8 <MX_TIM3_Init+0x98>)
 8004d56:	22c7      	movs	r2, #199	@ 0xc7
 8004d58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d5a:	4b17      	ldr	r3, [pc, #92]	@ (8004db8 <MX_TIM3_Init+0x98>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d60:	4b15      	ldr	r3, [pc, #84]	@ (8004db8 <MX_TIM3_Init+0x98>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004d66:	4814      	ldr	r0, [pc, #80]	@ (8004db8 <MX_TIM3_Init+0x98>)
 8004d68:	f008 f91d 	bl	800cfa6 <HAL_TIM_Base_Init>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8004d72:	f7ff fc8b 	bl	800468c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8004d76:	2304      	movs	r3, #4
 8004d78:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004d7e:	f107 030c 	add.w	r3, r7, #12
 8004d82:	4619      	mov	r1, r3
 8004d84:	480c      	ldr	r0, [pc, #48]	@ (8004db8 <MX_TIM3_Init+0x98>)
 8004d86:	f008 fbd7 	bl	800d538 <HAL_TIM_SlaveConfigSynchro>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8004d90:	f7ff fc7c 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d94:	2300      	movs	r3, #0
 8004d96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004d9c:	463b      	mov	r3, r7
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4805      	ldr	r0, [pc, #20]	@ (8004db8 <MX_TIM3_Init+0x98>)
 8004da2:	f008 ff13 	bl	800dbcc <HAL_TIMEx_MasterConfigSynchronization>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8004dac:	f7ff fc6e 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004db0:	bf00      	nop
 8004db2:	3720      	adds	r7, #32
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20005d88 	.word	0x20005d88
 8004dbc:	40000400 	.word	0x40000400

08004dc0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004dc6:	1d3b      	adds	r3, r7, #4
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004dd0:	4b15      	ldr	r3, [pc, #84]	@ (8004e28 <MX_TIM6_Init+0x68>)
 8004dd2:	4a16      	ldr	r2, [pc, #88]	@ (8004e2c <MX_TIM6_Init+0x6c>)
 8004dd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 45776;
 8004dd6:	4b14      	ldr	r3, [pc, #80]	@ (8004e28 <MX_TIM6_Init+0x68>)
 8004dd8:	f24b 22d0 	movw	r2, #45776	@ 0xb2d0
 8004ddc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dde:	4b12      	ldr	r3, [pc, #72]	@ (8004e28 <MX_TIM6_Init+0x68>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8004de4:	4b10      	ldr	r3, [pc, #64]	@ (8004e28 <MX_TIM6_Init+0x68>)
 8004de6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004dea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004dec:	4b0e      	ldr	r3, [pc, #56]	@ (8004e28 <MX_TIM6_Init+0x68>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004df2:	480d      	ldr	r0, [pc, #52]	@ (8004e28 <MX_TIM6_Init+0x68>)
 8004df4:	f008 f8d7 	bl	800cfa6 <HAL_TIM_Base_Init>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004dfe:	f7ff fc45 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e02:	2300      	movs	r3, #0
 8004e04:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004e0a:	1d3b      	adds	r3, r7, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4806      	ldr	r0, [pc, #24]	@ (8004e28 <MX_TIM6_Init+0x68>)
 8004e10:	f008 fedc 	bl	800dbcc <HAL_TIMEx_MasterConfigSynchronization>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004e1a:	f7ff fc37 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20005dd4 	.word	0x20005dd4
 8004e2c:	40001000 	.word	0x40001000

08004e30 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e36:	1d3b      	adds	r3, r7, #4
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	605a      	str	r2, [r3, #4]
 8004e3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004e40:	4b15      	ldr	r3, [pc, #84]	@ (8004e98 <MX_TIM7_Init+0x68>)
 8004e42:	4a16      	ldr	r2, [pc, #88]	@ (8004e9c <MX_TIM7_Init+0x6c>)
 8004e44:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 65535;
 8004e46:	4b14      	ldr	r3, [pc, #80]	@ (8004e98 <MX_TIM7_Init+0x68>)
 8004e48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004e4c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e4e:	4b12      	ldr	r3, [pc, #72]	@ (8004e98 <MX_TIM7_Init+0x68>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 8232;
 8004e54:	4b10      	ldr	r3, [pc, #64]	@ (8004e98 <MX_TIM7_Init+0x68>)
 8004e56:	f242 0228 	movw	r2, #8232	@ 0x2028
 8004e5a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e98 <MX_TIM7_Init+0x68>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004e62:	480d      	ldr	r0, [pc, #52]	@ (8004e98 <MX_TIM7_Init+0x68>)
 8004e64:	f008 f89f 	bl	800cfa6 <HAL_TIM_Base_Init>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004e6e:	f7ff fc0d 	bl	800468c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e72:	2300      	movs	r3, #0
 8004e74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e76:	2300      	movs	r3, #0
 8004e78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004e7a:	1d3b      	adds	r3, r7, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4806      	ldr	r0, [pc, #24]	@ (8004e98 <MX_TIM7_Init+0x68>)
 8004e80:	f008 fea4 	bl	800dbcc <HAL_TIMEx_MasterConfigSynchronization>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004e8a:	f7ff fbff 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004e8e:	bf00      	nop
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20005e20 	.word	0x20005e20
 8004e9c:	40001400 	.word	0x40001400

08004ea0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b08a      	sub	sp, #40	@ 0x28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea8:	f107 0314 	add.w	r3, r7, #20
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	605a      	str	r2, [r3, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
 8004eb4:	60da      	str	r2, [r3, #12]
 8004eb6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8004f2c <HAL_TIM_IC_MspInit+0x8c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d130      	bne.n	8004f24 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f30 <HAL_TIM_IC_MspInit+0x90>)
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f30 <HAL_TIM_IC_MspInit+0x90>)
 8004ec8:	f043 0301 	orr.w	r3, r3, #1
 8004ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ece:	4b18      	ldr	r3, [pc, #96]	@ (8004f30 <HAL_TIM_IC_MspInit+0x90>)
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eda:	4b15      	ldr	r3, [pc, #84]	@ (8004f30 <HAL_TIM_IC_MspInit+0x90>)
 8004edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ede:	4a14      	ldr	r2, [pc, #80]	@ (8004f30 <HAL_TIM_IC_MspInit+0x90>)
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ee6:	4b12      	ldr	r3, [pc, #72]	@ (8004f30 <HAL_TIM_IC_MspInit+0x90>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ef2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef8:	2302      	movs	r3, #2
 8004efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004efc:	2301      	movs	r3, #1
 8004efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f00:	2300      	movs	r3, #0
 8004f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f04:	2301      	movs	r3, #1
 8004f06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f08:	f107 0314 	add.w	r3, r7, #20
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4809      	ldr	r0, [pc, #36]	@ (8004f34 <HAL_TIM_IC_MspInit+0x94>)
 8004f10:	f003 fd98 	bl	8008a44 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004f14:	2200      	movs	r2, #0
 8004f16:	2100      	movs	r1, #0
 8004f18:	201b      	movs	r0, #27
 8004f1a:	f003 f912 	bl	8008142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004f1e:	201b      	movs	r0, #27
 8004f20:	f003 f92b 	bl	800817a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004f24:	bf00      	nop
 8004f26:	3728      	adds	r7, #40	@ 0x28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40020000 	.word	0x40020000

08004f38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a27      	ldr	r2, [pc, #156]	@ (8004fe4 <HAL_TIM_Base_MspInit+0xac>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d114      	bne.n	8004f74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f4a:	4b27      	ldr	r3, [pc, #156]	@ (8004fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	4a26      	ldr	r2, [pc, #152]	@ (8004fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f56:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004f62:	2200      	movs	r2, #0
 8004f64:	2100      	movs	r1, #0
 8004f66:	201d      	movs	r0, #29
 8004f68:	f003 f8eb 	bl	8008142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f6c:	201d      	movs	r0, #29
 8004f6e:	f003 f904 	bl	800817a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8004f72:	e032      	b.n	8004fda <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1c      	ldr	r2, [pc, #112]	@ (8004fec <HAL_TIM_Base_MspInit+0xb4>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d114      	bne.n	8004fa8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f82:	4a19      	ldr	r2, [pc, #100]	@ (8004fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8004f84:	f043 0310 	orr.w	r3, r3, #16
 8004f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f8a:	4b17      	ldr	r3, [pc, #92]	@ (8004fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004f96:	2200      	movs	r2, #0
 8004f98:	2100      	movs	r1, #0
 8004f9a:	2036      	movs	r0, #54	@ 0x36
 8004f9c:	f003 f8d1 	bl	8008142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004fa0:	2036      	movs	r0, #54	@ 0x36
 8004fa2:	f003 f8ea 	bl	800817a <HAL_NVIC_EnableIRQ>
}
 8004fa6:	e018      	b.n	8004fda <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a10      	ldr	r2, [pc, #64]	@ (8004ff0 <HAL_TIM_Base_MspInit+0xb8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d113      	bne.n	8004fda <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb6:	4a0c      	ldr	r2, [pc, #48]	@ (8004fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8004fb8:	f043 0320 	orr.w	r3, r3, #32
 8004fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <HAL_TIM_Base_MspInit+0xb0>)
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	f003 0320 	and.w	r3, r3, #32
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004fca:	2200      	movs	r2, #0
 8004fcc:	2100      	movs	r1, #0
 8004fce:	2037      	movs	r0, #55	@ 0x37
 8004fd0:	f003 f8b7 	bl	8008142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004fd4:	2037      	movs	r0, #55	@ 0x37
 8004fd6:	f003 f8d0 	bl	800817a <HAL_NVIC_EnableIRQ>
}
 8004fda:	bf00      	nop
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40001000 	.word	0x40001000
 8004ff0:	40001400 	.word	0x40001400

08004ff4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ff8:	4b14      	ldr	r3, [pc, #80]	@ (800504c <MX_USART1_UART_Init+0x58>)
 8004ffa:	4a15      	ldr	r2, [pc, #84]	@ (8005050 <MX_USART1_UART_Init+0x5c>)
 8004ffc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004ffe:	4b13      	ldr	r3, [pc, #76]	@ (800504c <MX_USART1_UART_Init+0x58>)
 8005000:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005004:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005006:	4b11      	ldr	r3, [pc, #68]	@ (800504c <MX_USART1_UART_Init+0x58>)
 8005008:	2200      	movs	r2, #0
 800500a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800500c:	4b0f      	ldr	r3, [pc, #60]	@ (800504c <MX_USART1_UART_Init+0x58>)
 800500e:	2200      	movs	r2, #0
 8005010:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005012:	4b0e      	ldr	r3, [pc, #56]	@ (800504c <MX_USART1_UART_Init+0x58>)
 8005014:	2200      	movs	r2, #0
 8005016:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005018:	4b0c      	ldr	r3, [pc, #48]	@ (800504c <MX_USART1_UART_Init+0x58>)
 800501a:	220c      	movs	r2, #12
 800501c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800501e:	4b0b      	ldr	r3, [pc, #44]	@ (800504c <MX_USART1_UART_Init+0x58>)
 8005020:	2200      	movs	r2, #0
 8005022:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005024:	4b09      	ldr	r3, [pc, #36]	@ (800504c <MX_USART1_UART_Init+0x58>)
 8005026:	2200      	movs	r2, #0
 8005028:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800502a:	4b08      	ldr	r3, [pc, #32]	@ (800504c <MX_USART1_UART_Init+0x58>)
 800502c:	2200      	movs	r2, #0
 800502e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005030:	4b06      	ldr	r3, [pc, #24]	@ (800504c <MX_USART1_UART_Init+0x58>)
 8005032:	2200      	movs	r2, #0
 8005034:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005036:	4805      	ldr	r0, [pc, #20]	@ (800504c <MX_USART1_UART_Init+0x58>)
 8005038:	f008 fe74 	bl	800dd24 <HAL_UART_Init>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005042:	f7ff fb23 	bl	800468c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20005e6c 	.word	0x20005e6c
 8005050:	40011000 	.word	0x40011000

08005054 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b0ac      	sub	sp, #176	@ 0xb0
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800505c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005060:	2200      	movs	r2, #0
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	605a      	str	r2, [r3, #4]
 8005066:	609a      	str	r2, [r3, #8]
 8005068:	60da      	str	r2, [r3, #12]
 800506a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800506c:	f107 0318 	add.w	r3, r7, #24
 8005070:	2284      	movs	r2, #132	@ 0x84
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f00b fdab 	bl	8010bd0 <memset>
  if(uartHandle->Instance==USART1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a32      	ldr	r2, [pc, #200]	@ (8005148 <HAL_UART_MspInit+0xf4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d15c      	bne.n	800513e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005084:	2340      	movs	r3, #64	@ 0x40
 8005086:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005088:	2300      	movs	r3, #0
 800508a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800508c:	f107 0318 	add.w	r3, r7, #24
 8005090:	4618      	mov	r0, r3
 8005092:	f005 fddb 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800509c:	f7ff faf6 	bl	800468c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050a0:	4b2a      	ldr	r3, [pc, #168]	@ (800514c <HAL_UART_MspInit+0xf8>)
 80050a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a4:	4a29      	ldr	r2, [pc, #164]	@ (800514c <HAL_UART_MspInit+0xf8>)
 80050a6:	f043 0310 	orr.w	r3, r3, #16
 80050aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80050ac:	4b27      	ldr	r3, [pc, #156]	@ (800514c <HAL_UART_MspInit+0xf8>)
 80050ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	617b      	str	r3, [r7, #20]
 80050b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050b8:	4b24      	ldr	r3, [pc, #144]	@ (800514c <HAL_UART_MspInit+0xf8>)
 80050ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050bc:	4a23      	ldr	r2, [pc, #140]	@ (800514c <HAL_UART_MspInit+0xf8>)
 80050be:	f043 0302 	orr.w	r3, r3, #2
 80050c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80050c4:	4b21      	ldr	r3, [pc, #132]	@ (800514c <HAL_UART_MspInit+0xf8>)
 80050c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	613b      	str	r3, [r7, #16]
 80050ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050d0:	4b1e      	ldr	r3, [pc, #120]	@ (800514c <HAL_UART_MspInit+0xf8>)
 80050d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d4:	4a1d      	ldr	r2, [pc, #116]	@ (800514c <HAL_UART_MspInit+0xf8>)
 80050d6:	f043 0301 	orr.w	r3, r3, #1
 80050da:	6313      	str	r3, [r2, #48]	@ 0x30
 80050dc:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <HAL_UART_MspInit+0xf8>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80050e8:	2380      	movs	r3, #128	@ 0x80
 80050ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ee:	2302      	movs	r3, #2
 80050f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050fa:	2303      	movs	r3, #3
 80050fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005100:	2307      	movs	r3, #7
 8005102:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005106:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800510a:	4619      	mov	r1, r3
 800510c:	4810      	ldr	r0, [pc, #64]	@ (8005150 <HAL_UART_MspInit+0xfc>)
 800510e:	f003 fc99 	bl	8008a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005112:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800511a:	2302      	movs	r3, #2
 800511c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005120:	2300      	movs	r3, #0
 8005122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005126:	2303      	movs	r3, #3
 8005128:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800512c:	2307      	movs	r3, #7
 800512e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005132:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005136:	4619      	mov	r1, r3
 8005138:	4806      	ldr	r0, [pc, #24]	@ (8005154 <HAL_UART_MspInit+0x100>)
 800513a:	f003 fc83 	bl	8008a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800513e:	bf00      	nop
 8005140:	37b0      	adds	r7, #176	@ 0xb0
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40011000 	.word	0x40011000
 800514c:	40023800 	.word	0x40023800
 8005150:	40020400 	.word	0x40020400
 8005154:	40020000 	.word	0x40020000

08005158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005158:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005190 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800515c:	480d      	ldr	r0, [pc, #52]	@ (8005194 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800515e:	490e      	ldr	r1, [pc, #56]	@ (8005198 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005160:	4a0e      	ldr	r2, [pc, #56]	@ (800519c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005164:	e002      	b.n	800516c <LoopCopyDataInit>

08005166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800516a:	3304      	adds	r3, #4

0800516c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800516c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800516e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005170:	d3f9      	bcc.n	8005166 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005172:	4a0b      	ldr	r2, [pc, #44]	@ (80051a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005174:	4c0b      	ldr	r4, [pc, #44]	@ (80051a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005178:	e001      	b.n	800517e <LoopFillZerobss>

0800517a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800517a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800517c:	3204      	adds	r2, #4

0800517e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800517e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005180:	d3fb      	bcc.n	800517a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005182:	f7ff fd61 	bl	8004c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005186:	f00b fd7b 	bl	8010c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800518a:	f7fe fc6b 	bl	8003a64 <main>
  bx  lr    
 800518e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005190:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005194:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005198:	200050f0 	.word	0x200050f0
  ldr r2, =_sidata
 800519c:	08016e00 	.word	0x08016e00
  ldr r2, =_sbss
 80051a0:	200050f0 	.word	0x200050f0
  ldr r4, =_ebss
 80051a4:	20006330 	.word	0x20006330

080051a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80051a8:	e7fe      	b.n	80051a8 <ADC_IRQHandler>

080051aa <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b082      	sub	sp, #8
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	4603      	mov	r3, r0
 80051b2:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80051b4:	20c8      	movs	r0, #200	@ 0xc8
 80051b6:	f000 fc31 	bl	8005a1c <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80051ba:	f000 fa79 	bl	80056b0 <ft5336_I2C_InitializeIfRequired>
}
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	4603      	mov	r3, r0
 80051ce:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80051ee:	2300      	movs	r3, #0
 80051f0:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80051f2:	f000 fa5d 	bl	80056b0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
 80051fa:	e010      	b.n	800521e <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	21a8      	movs	r1, #168	@ 0xa8
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fbec 	bl	80059e0 <TS_IO_Read>
 8005208:	4603      	mov	r3, r0
 800520a:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800520c:	7b7b      	ldrb	r3, [r7, #13]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b51      	cmp	r3, #81	@ 0x51
 8005212:	d101      	bne.n	8005218 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8005214:	2301      	movs	r3, #1
 8005216:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	3301      	adds	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
 800521e:	7bfb      	ldrb	r3, [r7, #15]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d802      	bhi.n	800522a <ft5336_ReadID+0x4e>
 8005224:	7bbb      	ldrb	r3, [r7, #14]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0e8      	beq.n	80051fc <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800522a:	7b7b      	ldrb	r3, [r7, #13]
 800522c:	b2db      	uxtb	r3, r3
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	4603      	mov	r3, r0
 800523e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fa44 	bl	80056d0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8005248:	88fb      	ldrh	r3, [r7, #6]
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f932 	bl	80054b4 <ft5336_TS_DisableIT>
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	4603      	mov	r3, r0
 8005260:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8005266:	88fb      	ldrh	r3, [r7, #6]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2102      	movs	r1, #2
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fbb7 	bl	80059e0 <TS_IO_Read>
 8005272:	4603      	mov	r3, r0
 8005274:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8005276:	7bfb      	ldrb	r3, [r7, #15]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f003 030f 	and.w	r3, r3, #15
 800527e:	b2db      	uxtb	r3, r3
 8005280:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8005282:	7bfb      	ldrb	r3, [r7, #15]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b05      	cmp	r3, #5
 8005288:	d901      	bls.n	800528e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4b05      	ldr	r3, [pc, #20]	@ (80052a8 <ft5336_TS_DetectTouch+0x50>)
 8005294:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8005296:	4b04      	ldr	r3, [pc, #16]	@ (80052a8 <ft5336_TS_DetectTouch+0x50>)
 8005298:	2200      	movs	r2, #0
 800529a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	b2db      	uxtb	r3, r3
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	20005ef4 	.word	0x20005ef4

080052ac <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80052ba:	2300      	movs	r3, #0
 80052bc:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80052c2:	2300      	movs	r3, #0
 80052c4:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80052c6:	2300      	movs	r3, #0
 80052c8:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80052ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005484 <ft5336_TS_GetXY+0x1d8>)
 80052d0:	789a      	ldrb	r2, [r3, #2]
 80052d2:	4b6c      	ldr	r3, [pc, #432]	@ (8005484 <ft5336_TS_GetXY+0x1d8>)
 80052d4:	785b      	ldrb	r3, [r3, #1]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	f080 80cf 	bcs.w	800547a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80052dc:	4b69      	ldr	r3, [pc, #420]	@ (8005484 <ft5336_TS_GetXY+0x1d8>)
 80052de:	789b      	ldrb	r3, [r3, #2]
 80052e0:	2b09      	cmp	r3, #9
 80052e2:	d871      	bhi.n	80053c8 <ft5336_TS_GetXY+0x11c>
 80052e4:	a201      	add	r2, pc, #4	@ (adr r2, 80052ec <ft5336_TS_GetXY+0x40>)
 80052e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ea:	bf00      	nop
 80052ec:	08005315 	.word	0x08005315
 80052f0:	08005327 	.word	0x08005327
 80052f4:	08005339 	.word	0x08005339
 80052f8:	0800534b 	.word	0x0800534b
 80052fc:	0800535d 	.word	0x0800535d
 8005300:	0800536f 	.word	0x0800536f
 8005304:	08005381 	.word	0x08005381
 8005308:	08005393 	.word	0x08005393
 800530c:	080053a5 	.word	0x080053a5
 8005310:	080053b7 	.word	0x080053b7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8005314:	2304      	movs	r3, #4
 8005316:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8005318:	2303      	movs	r3, #3
 800531a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800531c:	2306      	movs	r3, #6
 800531e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8005320:	2305      	movs	r3, #5
 8005322:	753b      	strb	r3, [r7, #20]
      break;
 8005324:	e051      	b.n	80053ca <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8005326:	230a      	movs	r3, #10
 8005328:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800532a:	2309      	movs	r3, #9
 800532c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800532e:	230c      	movs	r3, #12
 8005330:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8005332:	230b      	movs	r3, #11
 8005334:	753b      	strb	r3, [r7, #20]
      break;
 8005336:	e048      	b.n	80053ca <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8005338:	2310      	movs	r3, #16
 800533a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800533c:	230f      	movs	r3, #15
 800533e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8005340:	2312      	movs	r3, #18
 8005342:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8005344:	2311      	movs	r3, #17
 8005346:	753b      	strb	r3, [r7, #20]
      break;
 8005348:	e03f      	b.n	80053ca <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800534a:	2316      	movs	r3, #22
 800534c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800534e:	2315      	movs	r3, #21
 8005350:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8005352:	2318      	movs	r3, #24
 8005354:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8005356:	2317      	movs	r3, #23
 8005358:	753b      	strb	r3, [r7, #20]
      break;
 800535a:	e036      	b.n	80053ca <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800535c:	231c      	movs	r3, #28
 800535e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8005360:	231b      	movs	r3, #27
 8005362:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8005364:	231e      	movs	r3, #30
 8005366:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8005368:	231d      	movs	r3, #29
 800536a:	753b      	strb	r3, [r7, #20]
      break;
 800536c:	e02d      	b.n	80053ca <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800536e:	2322      	movs	r3, #34	@ 0x22
 8005370:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8005372:	2321      	movs	r3, #33	@ 0x21
 8005374:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8005376:	2324      	movs	r3, #36	@ 0x24
 8005378:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800537a:	2323      	movs	r3, #35	@ 0x23
 800537c:	753b      	strb	r3, [r7, #20]
      break;
 800537e:	e024      	b.n	80053ca <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8005380:	2328      	movs	r3, #40	@ 0x28
 8005382:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8005384:	2327      	movs	r3, #39	@ 0x27
 8005386:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8005388:	232a      	movs	r3, #42	@ 0x2a
 800538a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 800538c:	2329      	movs	r3, #41	@ 0x29
 800538e:	753b      	strb	r3, [r7, #20]
      break;
 8005390:	e01b      	b.n	80053ca <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8005392:	232e      	movs	r3, #46	@ 0x2e
 8005394:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8005396:	232d      	movs	r3, #45	@ 0x2d
 8005398:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800539a:	2330      	movs	r3, #48	@ 0x30
 800539c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800539e:	232f      	movs	r3, #47	@ 0x2f
 80053a0:	753b      	strb	r3, [r7, #20]
      break;
 80053a2:	e012      	b.n	80053ca <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80053a4:	2334      	movs	r3, #52	@ 0x34
 80053a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80053a8:	2333      	movs	r3, #51	@ 0x33
 80053aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80053ac:	2336      	movs	r3, #54	@ 0x36
 80053ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80053b0:	2335      	movs	r3, #53	@ 0x35
 80053b2:	753b      	strb	r3, [r7, #20]
      break;
 80053b4:	e009      	b.n	80053ca <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80053b6:	233a      	movs	r3, #58	@ 0x3a
 80053b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80053ba:	2339      	movs	r3, #57	@ 0x39
 80053bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80053be:	233c      	movs	r3, #60	@ 0x3c
 80053c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80053c2:	233b      	movs	r3, #59	@ 0x3b
 80053c4:	753b      	strb	r3, [r7, #20]
      break;
 80053c6:	e000      	b.n	80053ca <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80053c8:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80053ca:	89fb      	ldrh	r3, [r7, #14]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	7dfa      	ldrb	r2, [r7, #23]
 80053d0:	4611      	mov	r1, r2
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fb04 	bl	80059e0 <TS_IO_Read>
 80053d8:	4603      	mov	r3, r0
 80053da:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80053dc:	7cfb      	ldrb	r3, [r7, #19]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	4b29      	ldr	r3, [pc, #164]	@ (8005488 <ft5336_TS_GetXY+0x1dc>)
 80053e4:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80053e6:	89fb      	ldrh	r3, [r7, #14]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	7dba      	ldrb	r2, [r7, #22]
 80053ec:	4611      	mov	r1, r2
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 faf6 	bl	80059e0 <TS_IO_Read>
 80053f4:	4603      	mov	r3, r0
 80053f6:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80053f8:	7cfb      	ldrb	r3, [r7, #19]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	021b      	lsls	r3, r3, #8
 80053fe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005402:	b21a      	sxth	r2, r3
 8005404:	4b20      	ldr	r3, [pc, #128]	@ (8005488 <ft5336_TS_GetXY+0x1dc>)
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b21b      	sxth	r3, r3
 800540a:	4313      	orrs	r3, r2
 800540c:	b21b      	sxth	r3, r3
 800540e:	b29a      	uxth	r2, r3
 8005410:	4b1d      	ldr	r3, [pc, #116]	@ (8005488 <ft5336_TS_GetXY+0x1dc>)
 8005412:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8005414:	4b1c      	ldr	r3, [pc, #112]	@ (8005488 <ft5336_TS_GetXY+0x1dc>)
 8005416:	881a      	ldrh	r2, [r3, #0]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800541c:	89fb      	ldrh	r3, [r7, #14]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	7d7a      	ldrb	r2, [r7, #21]
 8005422:	4611      	mov	r1, r2
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fadb 	bl	80059e0 <TS_IO_Read>
 800542a:	4603      	mov	r3, r0
 800542c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	4b14      	ldr	r3, [pc, #80]	@ (8005488 <ft5336_TS_GetXY+0x1dc>)
 8005436:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005438:	89fb      	ldrh	r3, [r7, #14]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	7d3a      	ldrb	r2, [r7, #20]
 800543e:	4611      	mov	r1, r2
 8005440:	4618      	mov	r0, r3
 8005442:	f000 facd 	bl	80059e0 <TS_IO_Read>
 8005446:	4603      	mov	r3, r0
 8005448:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800544a:	7cfb      	ldrb	r3, [r7, #19]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	021b      	lsls	r3, r3, #8
 8005450:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005454:	b21a      	sxth	r2, r3
 8005456:	4b0c      	ldr	r3, [pc, #48]	@ (8005488 <ft5336_TS_GetXY+0x1dc>)
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	b21b      	sxth	r3, r3
 800545c:	4313      	orrs	r3, r2
 800545e:	b21b      	sxth	r3, r3
 8005460:	b29a      	uxth	r2, r3
 8005462:	4b09      	ldr	r3, [pc, #36]	@ (8005488 <ft5336_TS_GetXY+0x1dc>)
 8005464:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8005466:	4b08      	ldr	r3, [pc, #32]	@ (8005488 <ft5336_TS_GetXY+0x1dc>)
 8005468:	881a      	ldrh	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800546e:	4b05      	ldr	r3, [pc, #20]	@ (8005484 <ft5336_TS_GetXY+0x1d8>)
 8005470:	789b      	ldrb	r3, [r3, #2]
 8005472:	3301      	adds	r3, #1
 8005474:	b2da      	uxtb	r2, r3
 8005476:	4b03      	ldr	r3, [pc, #12]	@ (8005484 <ft5336_TS_GetXY+0x1d8>)
 8005478:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800547a:	bf00      	nop
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	20005ef4 	.word	0x20005ef4
 8005488:	20005ef8 	.word	0x20005ef8

0800548c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	4603      	mov	r3, r0
 8005494:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800549a:	2301      	movs	r3, #1
 800549c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	7bfa      	ldrb	r2, [r7, #15]
 80054a4:	21a4      	movs	r1, #164	@ 0xa4
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fa80 	bl	80059ac <TS_IO_Write>
}
 80054ac:	bf00      	nop
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	4603      	mov	r3, r0
 80054bc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80054c2:	2300      	movs	r3, #0
 80054c4:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80054c6:	88fb      	ldrh	r3, [r7, #6]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	7bfa      	ldrb	r2, [r7, #15]
 80054cc:	21a4      	movs	r1, #164	@ 0xa4
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fa6c 	bl	80059ac <TS_IO_Write>
}
 80054d4:	bf00      	nop
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b084      	sub	sp, #16
 800550e:	af00      	add	r7, sp, #0
 8005510:	4603      	mov	r3, r0
 8005512:	6039      	str	r1, [r7, #0]
 8005514:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2101      	movs	r1, #1
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fa5d 	bl	80059e0 <TS_IO_Read>
 8005526:	4603      	mov	r3, r0
 8005528:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b086      	sub	sp, #24
 8005540:	af00      	add	r7, sp, #0
 8005542:	60b9      	str	r1, [r7, #8]
 8005544:	607a      	str	r2, [r7, #4]
 8005546:	603b      	str	r3, [r7, #0]
 8005548:	4603      	mov	r3, r0
 800554a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800554c:	2300      	movs	r3, #0
 800554e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8005558:	2300      	movs	r3, #0
 800555a:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800555c:	4b4d      	ldr	r3, [pc, #308]	@ (8005694 <ft5336_TS_GetTouchInfo+0x158>)
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	461a      	mov	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4293      	cmp	r3, r2
 8005566:	f080 8090 	bcs.w	800568a <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b09      	cmp	r3, #9
 800556e:	d85d      	bhi.n	800562c <ft5336_TS_GetTouchInfo+0xf0>
 8005570:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <ft5336_TS_GetTouchInfo+0x3c>)
 8005572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005576:	bf00      	nop
 8005578:	080055a1 	.word	0x080055a1
 800557c:	080055af 	.word	0x080055af
 8005580:	080055bd 	.word	0x080055bd
 8005584:	080055cb 	.word	0x080055cb
 8005588:	080055d9 	.word	0x080055d9
 800558c:	080055e7 	.word	0x080055e7
 8005590:	080055f5 	.word	0x080055f5
 8005594:	08005603 	.word	0x08005603
 8005598:	08005611 	.word	0x08005611
 800559c:	0800561f 	.word	0x0800561f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80055a0:	2303      	movs	r3, #3
 80055a2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80055a4:	2307      	movs	r3, #7
 80055a6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80055a8:	2308      	movs	r3, #8
 80055aa:	757b      	strb	r3, [r7, #21]
      break;
 80055ac:	e03f      	b.n	800562e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80055ae:	2309      	movs	r3, #9
 80055b0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80055b2:	230d      	movs	r3, #13
 80055b4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80055b6:	230e      	movs	r3, #14
 80055b8:	757b      	strb	r3, [r7, #21]
      break;
 80055ba:	e038      	b.n	800562e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80055bc:	230f      	movs	r3, #15
 80055be:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80055c0:	2313      	movs	r3, #19
 80055c2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80055c4:	2314      	movs	r3, #20
 80055c6:	757b      	strb	r3, [r7, #21]
      break;
 80055c8:	e031      	b.n	800562e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80055ca:	2315      	movs	r3, #21
 80055cc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80055ce:	2319      	movs	r3, #25
 80055d0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80055d2:	231a      	movs	r3, #26
 80055d4:	757b      	strb	r3, [r7, #21]
      break;
 80055d6:	e02a      	b.n	800562e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80055d8:	231b      	movs	r3, #27
 80055da:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80055dc:	231f      	movs	r3, #31
 80055de:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80055e0:	2320      	movs	r3, #32
 80055e2:	757b      	strb	r3, [r7, #21]
      break;
 80055e4:	e023      	b.n	800562e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80055e6:	2321      	movs	r3, #33	@ 0x21
 80055e8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80055ea:	2325      	movs	r3, #37	@ 0x25
 80055ec:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80055ee:	2326      	movs	r3, #38	@ 0x26
 80055f0:	757b      	strb	r3, [r7, #21]
      break;
 80055f2:	e01c      	b.n	800562e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80055f4:	2327      	movs	r3, #39	@ 0x27
 80055f6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80055f8:	232b      	movs	r3, #43	@ 0x2b
 80055fa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80055fc:	232c      	movs	r3, #44	@ 0x2c
 80055fe:	757b      	strb	r3, [r7, #21]
      break;
 8005600:	e015      	b.n	800562e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8005602:	232d      	movs	r3, #45	@ 0x2d
 8005604:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8005606:	2331      	movs	r3, #49	@ 0x31
 8005608:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800560a:	2332      	movs	r3, #50	@ 0x32
 800560c:	757b      	strb	r3, [r7, #21]
      break;
 800560e:	e00e      	b.n	800562e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8005610:	2333      	movs	r3, #51	@ 0x33
 8005612:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8005614:	2337      	movs	r3, #55	@ 0x37
 8005616:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8005618:	2338      	movs	r3, #56	@ 0x38
 800561a:	757b      	strb	r3, [r7, #21]
      break;
 800561c:	e007      	b.n	800562e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800561e:	2339      	movs	r3, #57	@ 0x39
 8005620:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8005622:	233d      	movs	r3, #61	@ 0x3d
 8005624:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8005626:	233e      	movs	r3, #62	@ 0x3e
 8005628:	757b      	strb	r3, [r7, #21]
      break;
 800562a:	e000      	b.n	800562e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800562c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800562e:	89fb      	ldrh	r3, [r7, #14]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	7dfa      	ldrb	r2, [r7, #23]
 8005634:	4611      	mov	r1, r2
 8005636:	4618      	mov	r0, r3
 8005638:	f000 f9d2 	bl	80059e0 <TS_IO_Read>
 800563c:	4603      	mov	r3, r0
 800563e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8005640:	7d3b      	ldrb	r3, [r7, #20]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	119b      	asrs	r3, r3, #6
 8005646:	f003 0203 	and.w	r2, r3, #3
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800564e:	89fb      	ldrh	r3, [r7, #14]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	7dba      	ldrb	r2, [r7, #22]
 8005654:	4611      	mov	r1, r2
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f9c2 	bl	80059e0 <TS_IO_Read>
 800565c:	4603      	mov	r3, r0
 800565e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8005660:	7d3b      	ldrb	r3, [r7, #20]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800566a:	89fb      	ldrh	r3, [r7, #14]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	7d7a      	ldrb	r2, [r7, #21]
 8005670:	4611      	mov	r1, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f9b4 	bl	80059e0 <TS_IO_Read>
 8005678:	4603      	mov	r3, r0
 800567a:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800567c:	7d3b      	ldrb	r3, [r7, #20]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	111b      	asrs	r3, r3, #4
 8005682:	f003 0204 	and.w	r2, r3, #4
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800568a:	bf00      	nop
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20005ef4 	.word	0x20005ef4

08005698 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800569c:	4b03      	ldr	r3, [pc, #12]	@ (80056ac <ft5336_Get_I2C_InitializedStatus+0x14>)
 800569e:	781b      	ldrb	r3, [r3, #0]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	20005ef4 	.word	0x20005ef4

080056b0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80056b4:	f7ff fff0 	bl	8005698 <ft5336_Get_I2C_InitializedStatus>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d104      	bne.n	80056c8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80056be:	f000 f96b 	bl	8005998 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80056c2:	4b02      	ldr	r3, [pc, #8]	@ (80056cc <ft5336_I2C_InitializeIfRequired+0x1c>)
 80056c4:	2201      	movs	r2, #1
 80056c6:	701a      	strb	r2, [r3, #0]
  }
}
 80056c8:	bf00      	nop
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20005ef4 	.word	0x20005ef4

080056d0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	4603      	mov	r3, r0
 80056d8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80056de:	68fb      	ldr	r3, [r7, #12]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3714      	adds	r7, #20
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08c      	sub	sp, #48	@ 0x30
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a51      	ldr	r2, [pc, #324]	@ (800583c <I2Cx_MspInit+0x150>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d14d      	bne.n	8005798 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80056fc:	4b50      	ldr	r3, [pc, #320]	@ (8005840 <I2Cx_MspInit+0x154>)
 80056fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005700:	4a4f      	ldr	r2, [pc, #316]	@ (8005840 <I2Cx_MspInit+0x154>)
 8005702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005706:	6313      	str	r3, [r2, #48]	@ 0x30
 8005708:	4b4d      	ldr	r3, [pc, #308]	@ (8005840 <I2Cx_MspInit+0x154>)
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005710:	61bb      	str	r3, [r7, #24]
 8005712:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005718:	2312      	movs	r3, #18
 800571a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800571c:	2300      	movs	r3, #0
 800571e:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005720:	2302      	movs	r3, #2
 8005722:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8005724:	2304      	movs	r3, #4
 8005726:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005728:	f107 031c 	add.w	r3, r7, #28
 800572c:	4619      	mov	r1, r3
 800572e:	4845      	ldr	r0, [pc, #276]	@ (8005844 <I2Cx_MspInit+0x158>)
 8005730:	f003 f988 	bl	8008a44 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8005734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800573a:	f107 031c 	add.w	r3, r7, #28
 800573e:	4619      	mov	r1, r3
 8005740:	4840      	ldr	r0, [pc, #256]	@ (8005844 <I2Cx_MspInit+0x158>)
 8005742:	f003 f97f 	bl	8008a44 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8005746:	4b3e      	ldr	r3, [pc, #248]	@ (8005840 <I2Cx_MspInit+0x154>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	4a3d      	ldr	r2, [pc, #244]	@ (8005840 <I2Cx_MspInit+0x154>)
 800574c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005750:	6413      	str	r3, [r2, #64]	@ 0x40
 8005752:	4b3b      	ldr	r3, [pc, #236]	@ (8005840 <I2Cx_MspInit+0x154>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800575e:	4b38      	ldr	r3, [pc, #224]	@ (8005840 <I2Cx_MspInit+0x154>)
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	4a37      	ldr	r2, [pc, #220]	@ (8005840 <I2Cx_MspInit+0x154>)
 8005764:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005768:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800576a:	4b35      	ldr	r3, [pc, #212]	@ (8005840 <I2Cx_MspInit+0x154>)
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	4a34      	ldr	r2, [pc, #208]	@ (8005840 <I2Cx_MspInit+0x154>)
 8005770:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005774:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8005776:	2200      	movs	r2, #0
 8005778:	210f      	movs	r1, #15
 800577a:	2048      	movs	r0, #72	@ 0x48
 800577c:	f002 fce1 	bl	8008142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8005780:	2048      	movs	r0, #72	@ 0x48
 8005782:	f002 fcfa 	bl	800817a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8005786:	2200      	movs	r2, #0
 8005788:	210f      	movs	r1, #15
 800578a:	2049      	movs	r0, #73	@ 0x49
 800578c:	f002 fcd9 	bl	8008142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8005790:	2049      	movs	r0, #73	@ 0x49
 8005792:	f002 fcf2 	bl	800817a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8005796:	e04d      	b.n	8005834 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005798:	4b29      	ldr	r3, [pc, #164]	@ (8005840 <I2Cx_MspInit+0x154>)
 800579a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579c:	4a28      	ldr	r2, [pc, #160]	@ (8005840 <I2Cx_MspInit+0x154>)
 800579e:	f043 0302 	orr.w	r3, r3, #2
 80057a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80057a4:	4b26      	ldr	r3, [pc, #152]	@ (8005840 <I2Cx_MspInit+0x154>)
 80057a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80057b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057b4:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80057b6:	2312      	movs	r3, #18
 80057b8:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80057be:	2302      	movs	r3, #2
 80057c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80057c2:	2304      	movs	r3, #4
 80057c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80057c6:	f107 031c 	add.w	r3, r7, #28
 80057ca:	4619      	mov	r1, r3
 80057cc:	481e      	ldr	r0, [pc, #120]	@ (8005848 <I2Cx_MspInit+0x15c>)
 80057ce:	f003 f939 	bl	8008a44 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80057d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80057d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80057d8:	f107 031c 	add.w	r3, r7, #28
 80057dc:	4619      	mov	r1, r3
 80057de:	481a      	ldr	r0, [pc, #104]	@ (8005848 <I2Cx_MspInit+0x15c>)
 80057e0:	f003 f930 	bl	8008a44 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80057e4:	4b16      	ldr	r3, [pc, #88]	@ (8005840 <I2Cx_MspInit+0x154>)
 80057e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e8:	4a15      	ldr	r2, [pc, #84]	@ (8005840 <I2Cx_MspInit+0x154>)
 80057ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80057f0:	4b13      	ldr	r3, [pc, #76]	@ (8005840 <I2Cx_MspInit+0x154>)
 80057f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057f8:	60fb      	str	r3, [r7, #12]
 80057fa:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80057fc:	4b10      	ldr	r3, [pc, #64]	@ (8005840 <I2Cx_MspInit+0x154>)
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	4a0f      	ldr	r2, [pc, #60]	@ (8005840 <I2Cx_MspInit+0x154>)
 8005802:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005806:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8005808:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <I2Cx_MspInit+0x154>)
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	4a0c      	ldr	r2, [pc, #48]	@ (8005840 <I2Cx_MspInit+0x154>)
 800580e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005812:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8005814:	2200      	movs	r2, #0
 8005816:	210f      	movs	r1, #15
 8005818:	201f      	movs	r0, #31
 800581a:	f002 fc92 	bl	8008142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800581e:	201f      	movs	r0, #31
 8005820:	f002 fcab 	bl	800817a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8005824:	2200      	movs	r2, #0
 8005826:	210f      	movs	r1, #15
 8005828:	2020      	movs	r0, #32
 800582a:	f002 fc8a 	bl	8008142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800582e:	2020      	movs	r0, #32
 8005830:	f002 fca3 	bl	800817a <HAL_NVIC_EnableIRQ>
}
 8005834:	bf00      	nop
 8005836:	3730      	adds	r7, #48	@ 0x30
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20005efc 	.word	0x20005efc
 8005840:	40023800 	.word	0x40023800
 8005844:	40021c00 	.word	0x40021c00
 8005848:	40020400 	.word	0x40020400

0800584c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f003 fef1 	bl	800963c <HAL_I2C_GetState>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d125      	bne.n	80058ac <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a14      	ldr	r2, [pc, #80]	@ (80058b4 <I2Cx_Init+0x68>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d103      	bne.n	8005870 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a13      	ldr	r2, [pc, #76]	@ (80058b8 <I2Cx_Init+0x6c>)
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e002      	b.n	8005876 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a12      	ldr	r2, [pc, #72]	@ (80058bc <I2Cx_Init+0x70>)
 8005874:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a11      	ldr	r2, [pc, #68]	@ (80058c0 <I2Cx_Init+0x74>)
 800587a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f7ff ff23 	bl	80056ec <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f003 fbce 	bl	8009048 <HAL_I2C_Init>
  }
}
 80058ac:	bf00      	nop
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20005efc 	.word	0x20005efc
 80058b8:	40005c00 	.word	0x40005c00
 80058bc:	40005400 	.word	0x40005400
 80058c0:	40912732 	.word	0x40912732

080058c4 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08a      	sub	sp, #40	@ 0x28
 80058c8:	af04      	add	r7, sp, #16
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	4608      	mov	r0, r1
 80058ce:	4611      	mov	r1, r2
 80058d0:	461a      	mov	r2, r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	72fb      	strb	r3, [r7, #11]
 80058d6:	460b      	mov	r3, r1
 80058d8:	813b      	strh	r3, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80058e2:	7afb      	ldrb	r3, [r7, #11]
 80058e4:	b299      	uxth	r1, r3
 80058e6:	88f8      	ldrh	r0, [r7, #6]
 80058e8:	893a      	ldrh	r2, [r7, #8]
 80058ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80058ee:	9302      	str	r3, [sp, #8]
 80058f0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058f2:	9301      	str	r3, [sp, #4]
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4603      	mov	r3, r0
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f003 fd84 	bl	8009408 <HAL_I2C_Mem_Read>
 8005900:	4603      	mov	r3, r0
 8005902:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005904:	7dfb      	ldrb	r3, [r7, #23]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d004      	beq.n	8005914 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800590a:	7afb      	ldrb	r3, [r7, #11]
 800590c:	4619      	mov	r1, r3
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f832 	bl	8005978 <I2Cx_Error>
  }
  return status;    
 8005914:	7dfb      	ldrb	r3, [r7, #23]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b08a      	sub	sp, #40	@ 0x28
 8005922:	af04      	add	r7, sp, #16
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	4608      	mov	r0, r1
 8005928:	4611      	mov	r1, r2
 800592a:	461a      	mov	r2, r3
 800592c:	4603      	mov	r3, r0
 800592e:	72fb      	strb	r3, [r7, #11]
 8005930:	460b      	mov	r3, r1
 8005932:	813b      	strh	r3, [r7, #8]
 8005934:	4613      	mov	r3, r2
 8005936:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800593c:	7afb      	ldrb	r3, [r7, #11]
 800593e:	b299      	uxth	r1, r3
 8005940:	88f8      	ldrh	r0, [r7, #6]
 8005942:	893a      	ldrh	r2, [r7, #8]
 8005944:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005948:	9302      	str	r3, [sp, #8]
 800594a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	4603      	mov	r3, r0
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f003 fc43 	bl	80091e0 <HAL_I2C_Mem_Write>
 800595a:	4603      	mov	r3, r0
 800595c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800595e:	7dfb      	ldrb	r3, [r7, #23]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d004      	beq.n	800596e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005964:	7afb      	ldrb	r3, [r7, #11]
 8005966:	4619      	mov	r1, r3
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f805 	bl	8005978 <I2Cx_Error>
  }
  return status;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f003 fbfb 	bl	8009180 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7ff ff5e 	bl	800584c <I2Cx_Init>
}
 8005990:	bf00      	nop
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800599c:	4802      	ldr	r0, [pc, #8]	@ (80059a8 <TS_IO_Init+0x10>)
 800599e:	f7ff ff55 	bl	800584c <I2Cx_Init>
}
 80059a2:	bf00      	nop
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	20005efc 	.word	0x20005efc

080059ac <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	4603      	mov	r3, r0
 80059b4:	71fb      	strb	r3, [r7, #7]
 80059b6:	460b      	mov	r3, r1
 80059b8:	71bb      	strb	r3, [r7, #6]
 80059ba:	4613      	mov	r3, r2
 80059bc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80059be:	79bb      	ldrb	r3, [r7, #6]
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	79f9      	ldrb	r1, [r7, #7]
 80059c4:	2301      	movs	r3, #1
 80059c6:	9301      	str	r3, [sp, #4]
 80059c8:	1d7b      	adds	r3, r7, #5
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	2301      	movs	r3, #1
 80059ce:	4803      	ldr	r0, [pc, #12]	@ (80059dc <TS_IO_Write+0x30>)
 80059d0:	f7ff ffa5 	bl	800591e <I2Cx_WriteMultiple>
}
 80059d4:	bf00      	nop
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20005efc 	.word	0x20005efc

080059e0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af02      	add	r7, sp, #8
 80059e6:	4603      	mov	r3, r0
 80059e8:	460a      	mov	r2, r1
 80059ea:	71fb      	strb	r3, [r7, #7]
 80059ec:	4613      	mov	r3, r2
 80059ee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80059f4:	79bb      	ldrb	r3, [r7, #6]
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	79f9      	ldrb	r1, [r7, #7]
 80059fa:	2301      	movs	r3, #1
 80059fc:	9301      	str	r3, [sp, #4]
 80059fe:	f107 030f 	add.w	r3, r7, #15
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	2301      	movs	r3, #1
 8005a06:	4804      	ldr	r0, [pc, #16]	@ (8005a18 <TS_IO_Read+0x38>)
 8005a08:	f7ff ff5c 	bl	80058c4 <I2Cx_ReadMultiple>

  return read_value;
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20005efc 	.word	0x20005efc

08005a1c <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f001 fe5f 	bl	80076e8 <HAL_Delay>
}
 8005a2a:	bf00      	nop
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8005a38:	4b31      	ldr	r3, [pc, #196]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a3a:	2228      	movs	r2, #40	@ 0x28
 8005a3c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8005a3e:	4b30      	ldr	r3, [pc, #192]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a40:	2209      	movs	r2, #9
 8005a42:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8005a44:	4b2e      	ldr	r3, [pc, #184]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a46:	2235      	movs	r2, #53	@ 0x35
 8005a48:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8005a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a4c:	220b      	movs	r2, #11
 8005a4e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8005a50:	4b2b      	ldr	r3, [pc, #172]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a52:	f240 121b 	movw	r2, #283	@ 0x11b
 8005a56:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8005a58:	4b29      	ldr	r3, [pc, #164]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a5a:	f240 2215 	movw	r2, #533	@ 0x215
 8005a5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8005a60:	4b27      	ldr	r3, [pc, #156]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a62:	f240 121d 	movw	r2, #285	@ 0x11d
 8005a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8005a68:	4b25      	ldr	r3, [pc, #148]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a6a:	f240 2235 	movw	r2, #565	@ 0x235
 8005a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8005a70:	2100      	movs	r1, #0
 8005a72:	4823      	ldr	r0, [pc, #140]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a74:	f001 f83a 	bl	8006aec <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8005a78:	4b21      	ldr	r3, [pc, #132]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a7a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8005a7e:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8005a80:	4b1f      	ldr	r3, [pc, #124]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a82:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8005a86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8005a88:	4b1d      	ldr	r3, [pc, #116]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8005a90:	4b1b      	ldr	r3, [pc, #108]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8005a98:	4b19      	ldr	r3, [pc, #100]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8005aa0:	4b17      	ldr	r3, [pc, #92]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8005aa6:	4b16      	ldr	r3, [pc, #88]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8005aac:	4b14      	ldr	r3, [pc, #80]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8005ab2:	4b13      	ldr	r3, [pc, #76]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8005ab8:	4b11      	ldr	r3, [pc, #68]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005aba:	4a12      	ldr	r2, [pc, #72]	@ (8005b04 <BSP_LCD_Init+0xd0>)
 8005abc:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8005abe:	4810      	ldr	r0, [pc, #64]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005ac0:	f004 fa32 	bl	8009f28 <HAL_LTDC_GetState>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d103      	bne.n	8005ad2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8005aca:	2100      	movs	r1, #0
 8005acc:	480c      	ldr	r0, [pc, #48]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005ace:	f000 ff33 	bl	8006938 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8005ad2:	480b      	ldr	r0, [pc, #44]	@ (8005b00 <BSP_LCD_Init+0xcc>)
 8005ad4:	f004 f91a 	bl	8009d0c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005ade:	480a      	ldr	r0, [pc, #40]	@ (8005b08 <BSP_LCD_Init+0xd4>)
 8005ae0:	f003 fa80 	bl	8008fe4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	2108      	movs	r1, #8
 8005ae8:	4808      	ldr	r0, [pc, #32]	@ (8005b0c <BSP_LCD_Init+0xd8>)
 8005aea:	f003 fa7b 	bl	8008fe4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8005aee:	f001 f961 	bl	8006db4 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8005af2:	4807      	ldr	r0, [pc, #28]	@ (8005b10 <BSP_LCD_Init+0xdc>)
 8005af4:	f000 f916 	bl	8005d24 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20005f50 	.word	0x20005f50
 8005b04:	40016800 	.word	0x40016800
 8005b08:	40022000 	.word	0x40022000
 8005b0c:	40022800 	.word	0x40022800
 8005b10:	20004efc 	.word	0x20004efc

08005b14 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8005b18:	4b06      	ldr	r3, [pc, #24]	@ (8005b34 <BSP_LCD_GetXSize+0x20>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a06      	ldr	r2, [pc, #24]	@ (8005b38 <BSP_LCD_GetXSize+0x24>)
 8005b1e:	2134      	movs	r1, #52	@ 0x34
 8005b20:	fb01 f303 	mul.w	r3, r1, r3
 8005b24:	4413      	add	r3, r2
 8005b26:	3360      	adds	r3, #96	@ 0x60
 8005b28:	681b      	ldr	r3, [r3, #0]
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	20006038 	.word	0x20006038
 8005b38:	20005f50 	.word	0x20005f50

08005b3c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8005b40:	4b06      	ldr	r3, [pc, #24]	@ (8005b5c <BSP_LCD_GetYSize+0x20>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a06      	ldr	r2, [pc, #24]	@ (8005b60 <BSP_LCD_GetYSize+0x24>)
 8005b46:	2134      	movs	r1, #52	@ 0x34
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	4413      	add	r3, r2
 8005b4e:	3364      	adds	r3, #100	@ 0x64
 8005b50:	681b      	ldr	r3, [r3, #0]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	20006038 	.word	0x20006038
 8005b60:	20005f50 	.word	0x20005f50

08005b64 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b090      	sub	sp, #64	@ 0x40
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	6039      	str	r1, [r7, #0]
 8005b6e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8005b74:	f7ff ffce 	bl	8005b14 <BSP_LCD_GetXSize>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8005b80:	f7ff ffdc 	bl	8005b3c <BSP_LCD_GetYSize>
 8005b84:	4603      	mov	r3, r0
 8005b86:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8005b90:	23ff      	movs	r3, #255	@ 0xff
 8005b92:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8005baa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8005bb0:	2307      	movs	r3, #7
 8005bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8005bb4:	f7ff ffae 	bl	8005b14 <BSP_LCD_GetXSize>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8005bbc:	f7ff ffbe 	bl	8005b3c <BSP_LCD_GetYSize>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	f107 030c 	add.w	r3, r7, #12
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4812      	ldr	r0, [pc, #72]	@ (8005c18 <BSP_LCD_LayerDefaultInit+0xb4>)
 8005bce:	f004 f96d 	bl	8009eac <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	4911      	ldr	r1, [pc, #68]	@ (8005c1c <BSP_LCD_LayerDefaultInit+0xb8>)
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	005b      	lsls	r3, r3, #1
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	3304      	adds	r3, #4
 8005be2:	f04f 32ff 	mov.w	r2, #4294967295
 8005be6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8005be8:	88fa      	ldrh	r2, [r7, #6]
 8005bea:	490c      	ldr	r1, [pc, #48]	@ (8005c1c <BSP_LCD_LayerDefaultInit+0xb8>)
 8005bec:	4613      	mov	r3, r2
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	4a09      	ldr	r2, [pc, #36]	@ (8005c20 <BSP_LCD_LayerDefaultInit+0xbc>)
 8005bfa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8005bfc:	88fa      	ldrh	r2, [r7, #6]
 8005bfe:	4907      	ldr	r1, [pc, #28]	@ (8005c1c <BSP_LCD_LayerDefaultInit+0xb8>)
 8005c00:	4613      	mov	r3, r2
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8005c0e:	601a      	str	r2, [r3, #0]
}
 8005c10:	bf00      	nop
 8005c12:	3740      	adds	r7, #64	@ 0x40
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	20005f50 	.word	0x20005f50
 8005c1c:	2000603c 	.word	0x2000603c
 8005c20:	20004efc 	.word	0x20004efc

08005c24 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8005c2c:	4a04      	ldr	r2, [pc, #16]	@ (8005c40 <BSP_LCD_SelectLayer+0x1c>)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6013      	str	r3, [r2, #0]
} 
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	20006038 	.word	0x20006038

08005c44 <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d112      	bne.n	8005c7c <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 8005c56:	4b19      	ldr	r3, [pc, #100]	@ (8005cbc <BSP_LCD_SetLayerVisible+0x78>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	01db      	lsls	r3, r3, #7
 8005c60:	4413      	add	r3, r2
 8005c62:	3384      	adds	r3, #132	@ 0x84
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a15      	ldr	r2, [pc, #84]	@ (8005cbc <BSP_LCD_SetLayerVisible+0x78>)
 8005c68:	6812      	ldr	r2, [r2, #0]
 8005c6a:	4611      	mov	r1, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	01d2      	lsls	r2, r2, #7
 8005c70:	440a      	add	r2, r1
 8005c72:	3284      	adds	r2, #132	@ 0x84
 8005c74:	f043 0301 	orr.w	r3, r3, #1
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e011      	b.n	8005ca0 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8005c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8005cbc <BSP_LCD_SetLayerVisible+0x78>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	461a      	mov	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	01db      	lsls	r3, r3, #7
 8005c86:	4413      	add	r3, r2
 8005c88:	3384      	adds	r3, #132	@ 0x84
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8005cbc <BSP_LCD_SetLayerVisible+0x78>)
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	4611      	mov	r1, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	01d2      	lsls	r2, r2, #7
 8005c96:	440a      	add	r2, r1
 8005c98:	3284      	adds	r2, #132	@ 0x84
 8005c9a:	f023 0301 	bic.w	r3, r3, #1
 8005c9e:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8005ca0:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <BSP_LCD_SetLayerVisible+0x78>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ca6:	4b05      	ldr	r3, [pc, #20]	@ (8005cbc <BSP_LCD_SetLayerVisible+0x78>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0201 	orr.w	r2, r2, #1
 8005cae:	625a      	str	r2, [r3, #36]	@ 0x24
} 
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	20005f50 	.word	0x20005f50

08005cc0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8005cc8:	4b07      	ldr	r3, [pc, #28]	@ (8005ce8 <BSP_LCD_SetTextColor+0x28>)
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	4907      	ldr	r1, [pc, #28]	@ (8005cec <BSP_LCD_SetTextColor+0x2c>)
 8005cce:	4613      	mov	r3, r2
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	601a      	str	r2, [r3, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	20006038 	.word	0x20006038
 8005cec:	2000603c 	.word	0x2000603c

08005cf0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8005cf8:	4b08      	ldr	r3, [pc, #32]	@ (8005d1c <BSP_LCD_SetBackColor+0x2c>)
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	4908      	ldr	r1, [pc, #32]	@ (8005d20 <BSP_LCD_SetBackColor+0x30>)
 8005cfe:	4613      	mov	r3, r2
 8005d00:	005b      	lsls	r3, r3, #1
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	3304      	adds	r3, #4
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	601a      	str	r2, [r3, #0]
}
 8005d0e:	bf00      	nop
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20006038 	.word	0x20006038
 8005d20:	2000603c 	.word	0x2000603c

08005d24 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8005d2c:	4b08      	ldr	r3, [pc, #32]	@ (8005d50 <BSP_LCD_SetFont+0x2c>)
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	4908      	ldr	r1, [pc, #32]	@ (8005d54 <BSP_LCD_SetFont+0x30>)
 8005d32:	4613      	mov	r3, r2
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	4413      	add	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	3308      	adds	r3, #8
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	601a      	str	r2, [r3, #0]
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	20006038 	.word	0x20006038
 8005d54:	2000603c 	.word	0x2000603c

08005d58 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8005d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8005d60:	4b0f      	ldr	r3, [pc, #60]	@ (8005da0 <BSP_LCD_Clear+0x48>)
 8005d62:	681c      	ldr	r4, [r3, #0]
 8005d64:	4b0e      	ldr	r3, [pc, #56]	@ (8005da0 <BSP_LCD_Clear+0x48>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a0e      	ldr	r2, [pc, #56]	@ (8005da4 <BSP_LCD_Clear+0x4c>)
 8005d6a:	2134      	movs	r1, #52	@ 0x34
 8005d6c:	fb01 f303 	mul.w	r3, r1, r3
 8005d70:	4413      	add	r3, r2
 8005d72:	335c      	adds	r3, #92	@ 0x5c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461e      	mov	r6, r3
 8005d78:	f7ff fecc 	bl	8005b14 <BSP_LCD_GetXSize>
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	f7ff fedd 	bl	8005b3c <BSP_LCD_GetYSize>
 8005d82:	4602      	mov	r2, r0
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	462a      	mov	r2, r5
 8005d90:	4631      	mov	r1, r6
 8005d92:	4620      	mov	r0, r4
 8005d94:	f000 ff7e 	bl	8006c94 <LL_FillBuffer>
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da0:	20006038 	.word	0x20006038
 8005da4:	20005f50 	.word	0x20005f50

08005da8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8005da8:	b590      	push	{r4, r7, lr}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	4603      	mov	r3, r0
 8005db0:	80fb      	strh	r3, [r7, #6]
 8005db2:	460b      	mov	r3, r1
 8005db4:	80bb      	strh	r3, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005dba:	4b1b      	ldr	r3, [pc, #108]	@ (8005e28 <BSP_LCD_DisplayChar+0x80>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	491b      	ldr	r1, [pc, #108]	@ (8005e2c <BSP_LCD_DisplayChar+0x84>)
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	4413      	add	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	440b      	add	r3, r1
 8005dca:	3308      	adds	r3, #8
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005dd6:	4b14      	ldr	r3, [pc, #80]	@ (8005e28 <BSP_LCD_DisplayChar+0x80>)
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4c14      	ldr	r4, [pc, #80]	@ (8005e2c <BSP_LCD_DisplayChar+0x84>)
 8005ddc:	4613      	mov	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4423      	add	r3, r4
 8005de6:	3308      	adds	r3, #8
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005dec:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8005df0:	4b0d      	ldr	r3, [pc, #52]	@ (8005e28 <BSP_LCD_DisplayChar+0x80>)
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	4c0d      	ldr	r4, [pc, #52]	@ (8005e2c <BSP_LCD_DisplayChar+0x84>)
 8005df6:	4613      	mov	r3, r2
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	4413      	add	r3, r2
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4423      	add	r3, r4
 8005e00:	3308      	adds	r3, #8
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	889b      	ldrh	r3, [r3, #4]
 8005e06:	3307      	adds	r3, #7
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	da00      	bge.n	8005e0e <BSP_LCD_DisplayChar+0x66>
 8005e0c:	3307      	adds	r3, #7
 8005e0e:	10db      	asrs	r3, r3, #3
 8005e10:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8005e14:	18ca      	adds	r2, r1, r3
 8005e16:	88b9      	ldrh	r1, [r7, #4]
 8005e18:	88fb      	ldrh	r3, [r7, #6]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fe82 	bl	8006b24 <DrawChar>
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd90      	pop	{r4, r7, pc}
 8005e28:	20006038 	.word	0x20006038
 8005e2c:	2000603c 	.word	0x2000603c

08005e30 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8005e30:	b5b0      	push	{r4, r5, r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60ba      	str	r2, [r7, #8]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	81fb      	strh	r3, [r7, #14]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	81bb      	strh	r3, [r7, #12]
 8005e42:	4613      	mov	r3, r2
 8005e44:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8005e46:	2301      	movs	r3, #1
 8005e48:	83fb      	strh	r3, [r7, #30]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61bb      	str	r3, [r7, #24]
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8005e5a:	e002      	b.n	8005e62 <BSP_LCD_DisplayStringAt+0x32>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	617a      	str	r2, [r7, #20]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f6      	bne.n	8005e5c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8005e6e:	f7ff fe51 	bl	8005b14 <BSP_LCD_GetXSize>
 8005e72:	4601      	mov	r1, r0
 8005e74:	4b50      	ldr	r3, [pc, #320]	@ (8005fb8 <BSP_LCD_DisplayStringAt+0x188>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	4850      	ldr	r0, [pc, #320]	@ (8005fbc <BSP_LCD_DisplayStringAt+0x18c>)
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4403      	add	r3, r0
 8005e84:	3308      	adds	r3, #8
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	889b      	ldrh	r3, [r3, #4]
 8005e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e8e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	2b03      	cmp	r3, #3
 8005e94:	d01c      	beq.n	8005ed0 <BSP_LCD_DisplayStringAt+0xa0>
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	dc33      	bgt.n	8005f02 <BSP_LCD_DisplayStringAt+0xd2>
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d002      	beq.n	8005ea4 <BSP_LCD_DisplayStringAt+0x74>
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d019      	beq.n	8005ed6 <BSP_LCD_DisplayStringAt+0xa6>
 8005ea2:	e02e      	b.n	8005f02 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	1ad1      	subs	r1, r2, r3
 8005eaa:	4b43      	ldr	r3, [pc, #268]	@ (8005fb8 <BSP_LCD_DisplayStringAt+0x188>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4843      	ldr	r0, [pc, #268]	@ (8005fbc <BSP_LCD_DisplayStringAt+0x18c>)
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4403      	add	r3, r0
 8005eba:	3308      	adds	r3, #8
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	889b      	ldrh	r3, [r3, #4]
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	085b      	lsrs	r3, r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	89fb      	ldrh	r3, [r7, #14]
 8005eca:	4413      	add	r3, r2
 8005ecc:	83fb      	strh	r3, [r7, #30]
      break;
 8005ece:	e01b      	b.n	8005f08 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8005ed0:	89fb      	ldrh	r3, [r7, #14]
 8005ed2:	83fb      	strh	r3, [r7, #30]
      break;
 8005ed4:	e018      	b.n	8005f08 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	b299      	uxth	r1, r3
 8005ede:	4b36      	ldr	r3, [pc, #216]	@ (8005fb8 <BSP_LCD_DisplayStringAt+0x188>)
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	4836      	ldr	r0, [pc, #216]	@ (8005fbc <BSP_LCD_DisplayStringAt+0x18c>)
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4403      	add	r3, r0
 8005eee:	3308      	adds	r3, #8
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	889b      	ldrh	r3, [r3, #4]
 8005ef4:	fb11 f303 	smulbb	r3, r1, r3
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	89fb      	ldrh	r3, [r7, #14]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	83fb      	strh	r3, [r7, #30]
      break;
 8005f00:	e002      	b.n	8005f08 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8005f02:	89fb      	ldrh	r3, [r7, #14]
 8005f04:	83fb      	strh	r3, [r7, #30]
      break;
 8005f06:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8005f08:	8bfb      	ldrh	r3, [r7, #30]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <BSP_LCD_DisplayStringAt+0xe6>
 8005f0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da1d      	bge.n	8005f52 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8005f16:	2301      	movs	r3, #1
 8005f18:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005f1a:	e01a      	b.n	8005f52 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	781a      	ldrb	r2, [r3, #0]
 8005f20:	89b9      	ldrh	r1, [r7, #12]
 8005f22:	8bfb      	ldrh	r3, [r7, #30]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff ff3f 	bl	8005da8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8005f2a:	4b23      	ldr	r3, [pc, #140]	@ (8005fb8 <BSP_LCD_DisplayStringAt+0x188>)
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	4923      	ldr	r1, [pc, #140]	@ (8005fbc <BSP_LCD_DisplayStringAt+0x18c>)
 8005f30:	4613      	mov	r3, r2
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	4413      	add	r3, r2
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	440b      	add	r3, r1
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	889a      	ldrh	r2, [r3, #4]
 8005f40:	8bfb      	ldrh	r3, [r7, #30]
 8005f42:	4413      	add	r3, r2
 8005f44:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60bb      	str	r3, [r7, #8]
    i++;
 8005f4c:	8bbb      	ldrh	r3, [r7, #28]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bf14      	ite	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	2300      	moveq	r3, #0
 8005f5e:	b2dc      	uxtb	r4, r3
 8005f60:	f7ff fdd8 	bl	8005b14 <BSP_LCD_GetXSize>
 8005f64:	8bb9      	ldrh	r1, [r7, #28]
 8005f66:	4b14      	ldr	r3, [pc, #80]	@ (8005fb8 <BSP_LCD_DisplayStringAt+0x188>)
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	4d14      	ldr	r5, [pc, #80]	@ (8005fbc <BSP_LCD_DisplayStringAt+0x18c>)
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	442b      	add	r3, r5
 8005f76:	3308      	adds	r3, #8
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	889b      	ldrh	r3, [r3, #4]
 8005f7c:	fb01 f303 	mul.w	r3, r1, r3
 8005f80:	1ac3      	subs	r3, r0, r3
 8005f82:	b299      	uxth	r1, r3
 8005f84:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb8 <BSP_LCD_DisplayStringAt+0x188>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	480c      	ldr	r0, [pc, #48]	@ (8005fbc <BSP_LCD_DisplayStringAt+0x18c>)
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4403      	add	r3, r0
 8005f94:	3308      	adds	r3, #8
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	889b      	ldrh	r3, [r3, #4]
 8005f9a:	4299      	cmp	r1, r3
 8005f9c:	bf2c      	ite	cs
 8005f9e:	2301      	movcs	r3, #1
 8005fa0:	2300      	movcc	r3, #0
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	4023      	ands	r3, r4
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1b7      	bne.n	8005f1c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20006038 	.word	0x20006038
 8005fbc:	2000603c 	.word	0x2000603c

08005fc0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8005fc0:	b5b0      	push	{r4, r5, r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	80fb      	strh	r3, [r7, #6]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	80bb      	strh	r3, [r7, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8005fd6:	4b26      	ldr	r3, [pc, #152]	@ (8006070 <BSP_LCD_DrawHLine+0xb0>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a26      	ldr	r2, [pc, #152]	@ (8006074 <BSP_LCD_DrawHLine+0xb4>)
 8005fdc:	2134      	movs	r1, #52	@ 0x34
 8005fde:	fb01 f303 	mul.w	r3, r1, r3
 8005fe2:	4413      	add	r3, r2
 8005fe4:	3348      	adds	r3, #72	@ 0x48
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d114      	bne.n	8006016 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8005fec:	4b20      	ldr	r3, [pc, #128]	@ (8006070 <BSP_LCD_DrawHLine+0xb0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a20      	ldr	r2, [pc, #128]	@ (8006074 <BSP_LCD_DrawHLine+0xb4>)
 8005ff2:	2134      	movs	r1, #52	@ 0x34
 8005ff4:	fb01 f303 	mul.w	r3, r1, r3
 8005ff8:	4413      	add	r3, r2
 8005ffa:	335c      	adds	r3, #92	@ 0x5c
 8005ffc:	681c      	ldr	r4, [r3, #0]
 8005ffe:	f7ff fd89 	bl	8005b14 <BSP_LCD_GetXSize>
 8006002:	4602      	mov	r2, r0
 8006004:	88bb      	ldrh	r3, [r7, #4]
 8006006:	fb03 f202 	mul.w	r2, r3, r2
 800600a:	88fb      	ldrh	r3, [r7, #6]
 800600c:	4413      	add	r3, r2
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	4423      	add	r3, r4
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e013      	b.n	800603e <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006016:	4b16      	ldr	r3, [pc, #88]	@ (8006070 <BSP_LCD_DrawHLine+0xb0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a16      	ldr	r2, [pc, #88]	@ (8006074 <BSP_LCD_DrawHLine+0xb4>)
 800601c:	2134      	movs	r1, #52	@ 0x34
 800601e:	fb01 f303 	mul.w	r3, r1, r3
 8006022:	4413      	add	r3, r2
 8006024:	335c      	adds	r3, #92	@ 0x5c
 8006026:	681c      	ldr	r4, [r3, #0]
 8006028:	f7ff fd74 	bl	8005b14 <BSP_LCD_GetXSize>
 800602c:	4602      	mov	r2, r0
 800602e:	88bb      	ldrh	r3, [r7, #4]
 8006030:	fb03 f202 	mul.w	r2, r3, r2
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4423      	add	r3, r4
 800603c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800603e:	4b0c      	ldr	r3, [pc, #48]	@ (8006070 <BSP_LCD_DrawHLine+0xb0>)
 8006040:	6818      	ldr	r0, [r3, #0]
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	887c      	ldrh	r4, [r7, #2]
 8006046:	4b0a      	ldr	r3, [pc, #40]	@ (8006070 <BSP_LCD_DrawHLine+0xb0>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	4d0b      	ldr	r5, [pc, #44]	@ (8006078 <BSP_LCD_DrawHLine+0xb8>)
 800604c:	4613      	mov	r3, r2
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	442b      	add	r3, r5
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	9301      	str	r3, [sp, #4]
 800605a:	2300      	movs	r3, #0
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	2301      	movs	r3, #1
 8006060:	4622      	mov	r2, r4
 8006062:	f000 fe17 	bl	8006c94 <LL_FillBuffer>
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bdb0      	pop	{r4, r5, r7, pc}
 800606e:	bf00      	nop
 8006070:	20006038 	.word	0x20006038
 8006074:	20005f50 	.word	0x20005f50
 8006078:	2000603c 	.word	0x2000603c

0800607c <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800607c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800607e:	b087      	sub	sp, #28
 8006080:	af02      	add	r7, sp, #8
 8006082:	4603      	mov	r3, r0
 8006084:	80fb      	strh	r3, [r7, #6]
 8006086:	460b      	mov	r3, r1
 8006088:	80bb      	strh	r3, [r7, #4]
 800608a:	4613      	mov	r3, r2
 800608c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006092:	4b28      	ldr	r3, [pc, #160]	@ (8006134 <BSP_LCD_DrawVLine+0xb8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a28      	ldr	r2, [pc, #160]	@ (8006138 <BSP_LCD_DrawVLine+0xbc>)
 8006098:	2134      	movs	r1, #52	@ 0x34
 800609a:	fb01 f303 	mul.w	r3, r1, r3
 800609e:	4413      	add	r3, r2
 80060a0:	3348      	adds	r3, #72	@ 0x48
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d114      	bne.n	80060d2 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80060a8:	4b22      	ldr	r3, [pc, #136]	@ (8006134 <BSP_LCD_DrawVLine+0xb8>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a22      	ldr	r2, [pc, #136]	@ (8006138 <BSP_LCD_DrawVLine+0xbc>)
 80060ae:	2134      	movs	r1, #52	@ 0x34
 80060b0:	fb01 f303 	mul.w	r3, r1, r3
 80060b4:	4413      	add	r3, r2
 80060b6:	335c      	adds	r3, #92	@ 0x5c
 80060b8:	681c      	ldr	r4, [r3, #0]
 80060ba:	f7ff fd2b 	bl	8005b14 <BSP_LCD_GetXSize>
 80060be:	4602      	mov	r2, r0
 80060c0:	88bb      	ldrh	r3, [r7, #4]
 80060c2:	fb03 f202 	mul.w	r2, r3, r2
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	4413      	add	r3, r2
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	4423      	add	r3, r4
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e013      	b.n	80060fa <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80060d2:	4b18      	ldr	r3, [pc, #96]	@ (8006134 <BSP_LCD_DrawVLine+0xb8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a18      	ldr	r2, [pc, #96]	@ (8006138 <BSP_LCD_DrawVLine+0xbc>)
 80060d8:	2134      	movs	r1, #52	@ 0x34
 80060da:	fb01 f303 	mul.w	r3, r1, r3
 80060de:	4413      	add	r3, r2
 80060e0:	335c      	adds	r3, #92	@ 0x5c
 80060e2:	681c      	ldr	r4, [r3, #0]
 80060e4:	f7ff fd16 	bl	8005b14 <BSP_LCD_GetXSize>
 80060e8:	4602      	mov	r2, r0
 80060ea:	88bb      	ldrh	r3, [r7, #4]
 80060ec:	fb03 f202 	mul.w	r2, r3, r2
 80060f0:	88fb      	ldrh	r3, [r7, #6]
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4423      	add	r3, r4
 80060f8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80060fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006134 <BSP_LCD_DrawVLine+0xb8>)
 80060fc:	681c      	ldr	r4, [r3, #0]
 80060fe:	68fd      	ldr	r5, [r7, #12]
 8006100:	887e      	ldrh	r6, [r7, #2]
 8006102:	f7ff fd07 	bl	8005b14 <BSP_LCD_GetXSize>
 8006106:	4603      	mov	r3, r0
 8006108:	1e59      	subs	r1, r3, #1
 800610a:	4b0a      	ldr	r3, [pc, #40]	@ (8006134 <BSP_LCD_DrawVLine+0xb8>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	480b      	ldr	r0, [pc, #44]	@ (800613c <BSP_LCD_DrawVLine+0xc0>)
 8006110:	4613      	mov	r3, r2
 8006112:	005b      	lsls	r3, r3, #1
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4403      	add	r3, r0
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	9301      	str	r3, [sp, #4]
 800611e:	9100      	str	r1, [sp, #0]
 8006120:	4633      	mov	r3, r6
 8006122:	2201      	movs	r2, #1
 8006124:	4629      	mov	r1, r5
 8006126:	4620      	mov	r0, r4
 8006128:	f000 fdb4 	bl	8006c94 <LL_FillBuffer>
}
 800612c:	bf00      	nop
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006134:	20006038 	.word	0x20006038
 8006138:	20005f50 	.word	0x20005f50
 800613c:	2000603c 	.word	0x2000603c

08006140 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8006140:	b590      	push	{r4, r7, lr}
 8006142:	b08b      	sub	sp, #44	@ 0x2c
 8006144:	af00      	add	r7, sp, #0
 8006146:	4604      	mov	r4, r0
 8006148:	4608      	mov	r0, r1
 800614a:	4611      	mov	r1, r2
 800614c:	461a      	mov	r2, r3
 800614e:	4623      	mov	r3, r4
 8006150:	80fb      	strh	r3, [r7, #6]
 8006152:	4603      	mov	r3, r0
 8006154:	80bb      	strh	r3, [r7, #4]
 8006156:	460b      	mov	r3, r1
 8006158:	807b      	strh	r3, [r7, #2]
 800615a:	4613      	mov	r3, r2
 800615c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800615e:	2300      	movs	r3, #0
 8006160:	823b      	strh	r3, [r7, #16]
 8006162:	2300      	movs	r3, #0
 8006164:	81fb      	strh	r3, [r7, #14]
 8006166:	2300      	movs	r3, #0
 8006168:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800616a:	2300      	movs	r3, #0
 800616c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800616e:	2300      	movs	r3, #0
 8006170:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006172:	2300      	movs	r3, #0
 8006174:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8006176:	2300      	movs	r3, #0
 8006178:	83fb      	strh	r3, [r7, #30]
 800617a:	2300      	movs	r3, #0
 800617c:	83bb      	strh	r3, [r7, #28]
 800617e:	2300      	movs	r3, #0
 8006180:	837b      	strh	r3, [r7, #26]
 8006182:	2300      	movs	r3, #0
 8006184:	833b      	strh	r3, [r7, #24]
 8006186:	2300      	movs	r3, #0
 8006188:	82fb      	strh	r3, [r7, #22]
 800618a:	2300      	movs	r3, #0
 800618c:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8006192:	887a      	ldrh	r2, [r7, #2]
 8006194:	88fb      	ldrh	r3, [r7, #6]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	bfb8      	it	lt
 800619c:	425b      	neglt	r3, r3
 800619e:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80061a0:	883a      	ldrh	r2, [r7, #0]
 80061a2:	88bb      	ldrh	r3, [r7, #4]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bfb8      	it	lt
 80061aa:	425b      	neglt	r3, r3
 80061ac:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = y1;                       /* Start y off at the first pixel */
 80061b2:	88bb      	ldrh	r3, [r7, #4]
 80061b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 80061b6:	887a      	ldrh	r2, [r7, #2]
 80061b8:	88fb      	ldrh	r3, [r7, #6]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d304      	bcc.n	80061c8 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80061be:	2301      	movs	r3, #1
 80061c0:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 80061c2:	2301      	movs	r3, #1
 80061c4:	843b      	strh	r3, [r7, #32]
 80061c6:	e005      	b.n	80061d4 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80061c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80061cc:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 80061ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80061d2:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80061d4:	883a      	ldrh	r2, [r7, #0]
 80061d6:	88bb      	ldrh	r3, [r7, #4]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d304      	bcc.n	80061e6 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80061dc:	2301      	movs	r3, #1
 80061de:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80061e0:	2301      	movs	r3, #1
 80061e2:	83bb      	strh	r3, [r7, #28]
 80061e4:	e005      	b.n	80061f2 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80061e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80061ea:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80061ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80061f0:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80061f2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80061f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	db11      	blt.n	8006222 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80061fe:	2300      	movs	r3, #0
 8006200:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8006202:	2300      	movs	r3, #0
 8006204:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8006206:	8a3b      	ldrh	r3, [r7, #16]
 8006208:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800620a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	da00      	bge.n	8006214 <BSP_LCD_DrawLine+0xd4>
 8006212:	3301      	adds	r3, #1
 8006214:	105b      	asrs	r3, r3, #1
 8006216:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8006218:	89fb      	ldrh	r3, [r7, #14]
 800621a:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 800621c:	8a3b      	ldrh	r3, [r7, #16]
 800621e:	82bb      	strh	r3, [r7, #20]
 8006220:	e010      	b.n	8006244 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8006222:	2300      	movs	r3, #0
 8006224:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8006226:	2300      	movs	r3, #0
 8006228:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 800622a:	89fb      	ldrh	r3, [r7, #14]
 800622c:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800622e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006232:	2b00      	cmp	r3, #0
 8006234:	da00      	bge.n	8006238 <BSP_LCD_DrawLine+0xf8>
 8006236:	3301      	adds	r3, #1
 8006238:	105b      	asrs	r3, r3, #1
 800623a:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 800623c:	8a3b      	ldrh	r3, [r7, #16]
 800623e:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8006240:	89fb      	ldrh	r3, [r7, #14]
 8006242:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8006244:	2300      	movs	r3, #0
 8006246:	827b      	strh	r3, [r7, #18]
 8006248:	e037      	b.n	80062ba <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800624a:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 800624c:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800624e:	4b20      	ldr	r3, [pc, #128]	@ (80062d0 <BSP_LCD_DrawLine+0x190>)
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	4c20      	ldr	r4, [pc, #128]	@ (80062d4 <BSP_LCD_DrawLine+0x194>)
 8006254:	4613      	mov	r3, r2
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4423      	add	r3, r4
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	f000 f955 	bl	8006510 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8006266:	8b3a      	ldrh	r2, [r7, #24]
 8006268:	8afb      	ldrh	r3, [r7, #22]
 800626a:	4413      	add	r3, r2
 800626c:	b29b      	uxth	r3, r3
 800626e:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8006270:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8006274:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006278:	429a      	cmp	r2, r3
 800627a:	db0e      	blt.n	800629a <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 800627c:	8b3a      	ldrh	r2, [r7, #24]
 800627e:	8b7b      	ldrh	r3, [r7, #26]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	b29b      	uxth	r3, r3
 8006284:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8006286:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006288:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800628a:	4413      	add	r3, r2
 800628c:	b29b      	uxth	r3, r3
 800628e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8006290:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006292:	8bfb      	ldrh	r3, [r7, #30]
 8006294:	4413      	add	r3, r2
 8006296:	b29b      	uxth	r3, r3
 8006298:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800629a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800629c:	8c3b      	ldrh	r3, [r7, #32]
 800629e:	4413      	add	r3, r2
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80062a4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80062a6:	8bbb      	ldrh	r3, [r7, #28]
 80062a8:	4413      	add	r3, r2
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80062ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3301      	adds	r3, #1
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	827b      	strh	r3, [r7, #18]
 80062ba:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80062be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	ddc1      	ble.n	800624a <BSP_LCD_DrawLine+0x10a>
  }
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	372c      	adds	r7, #44	@ 0x2c
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd90      	pop	{r4, r7, pc}
 80062d0:	20006038 	.word	0x20006038
 80062d4:	2000603c 	.word	0x2000603c

080062d8 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80062d8:	b590      	push	{r4, r7, lr}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	4604      	mov	r4, r0
 80062e0:	4608      	mov	r0, r1
 80062e2:	4611      	mov	r1, r2
 80062e4:	461a      	mov	r2, r3
 80062e6:	4623      	mov	r3, r4
 80062e8:	80fb      	strh	r3, [r7, #6]
 80062ea:	4603      	mov	r3, r0
 80062ec:	80bb      	strh	r3, [r7, #4]
 80062ee:	460b      	mov	r3, r1
 80062f0:	807b      	strh	r3, [r7, #2]
 80062f2:	4613      	mov	r3, r2
 80062f4:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80062f6:	887a      	ldrh	r2, [r7, #2]
 80062f8:	88b9      	ldrh	r1, [r7, #4]
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fe5f 	bl	8005fc0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8006302:	88ba      	ldrh	r2, [r7, #4]
 8006304:	883b      	ldrh	r3, [r7, #0]
 8006306:	4413      	add	r3, r2
 8006308:	b299      	uxth	r1, r3
 800630a:	887a      	ldrh	r2, [r7, #2]
 800630c:	88fb      	ldrh	r3, [r7, #6]
 800630e:	4618      	mov	r0, r3
 8006310:	f7ff fe56 	bl	8005fc0 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8006314:	883a      	ldrh	r2, [r7, #0]
 8006316:	88b9      	ldrh	r1, [r7, #4]
 8006318:	88fb      	ldrh	r3, [r7, #6]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff feae 	bl	800607c <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8006320:	88fa      	ldrh	r2, [r7, #6]
 8006322:	887b      	ldrh	r3, [r7, #2]
 8006324:	4413      	add	r3, r2
 8006326:	b29b      	uxth	r3, r3
 8006328:	883a      	ldrh	r2, [r7, #0]
 800632a:	88b9      	ldrh	r1, [r7, #4]
 800632c:	4618      	mov	r0, r3
 800632e:	f7ff fea5 	bl	800607c <BSP_LCD_DrawVLine>
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	bd90      	pop	{r4, r7, pc}
	...

0800633c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	80fb      	strh	r3, [r7, #6]
 8006346:	460b      	mov	r3, r1
 8006348:	80bb      	strh	r3, [r7, #4]
 800634a:	4613      	mov	r3, r2
 800634c:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800634e:	887b      	ldrh	r3, [r7, #2]
 8006350:	005b      	lsls	r3, r3, #1
 8006352:	f1c3 0303 	rsb	r3, r3, #3
 8006356:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800635c:	887b      	ldrh	r3, [r7, #2]
 800635e:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8006360:	e0c7      	b.n	80064f2 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	b29a      	uxth	r2, r3
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	4413      	add	r3, r2
 800636a:	b298      	uxth	r0, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	b29b      	uxth	r3, r3
 8006370:	88ba      	ldrh	r2, [r7, #4]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	b299      	uxth	r1, r3
 8006376:	4b64      	ldr	r3, [pc, #400]	@ (8006508 <BSP_LCD_DrawCircle+0x1cc>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4c64      	ldr	r4, [pc, #400]	@ (800650c <BSP_LCD_DrawCircle+0x1d0>)
 800637c:	4613      	mov	r3, r2
 800637e:	005b      	lsls	r3, r3, #1
 8006380:	4413      	add	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4423      	add	r3, r4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	f000 f8c1 	bl	8006510 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	b29b      	uxth	r3, r3
 8006392:	88fa      	ldrh	r2, [r7, #6]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	b298      	uxth	r0, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	b29b      	uxth	r3, r3
 800639c:	88ba      	ldrh	r2, [r7, #4]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	b299      	uxth	r1, r3
 80063a2:	4b59      	ldr	r3, [pc, #356]	@ (8006508 <BSP_LCD_DrawCircle+0x1cc>)
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4c59      	ldr	r4, [pc, #356]	@ (800650c <BSP_LCD_DrawCircle+0x1d0>)
 80063a8:	4613      	mov	r3, r2
 80063aa:	005b      	lsls	r3, r3, #1
 80063ac:	4413      	add	r3, r2
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	4423      	add	r3, r4
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	f000 f8ab 	bl	8006510 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	b29a      	uxth	r2, r3
 80063be:	88fb      	ldrh	r3, [r7, #6]
 80063c0:	4413      	add	r3, r2
 80063c2:	b298      	uxth	r0, r3
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	88ba      	ldrh	r2, [r7, #4]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	b299      	uxth	r1, r3
 80063ce:	4b4e      	ldr	r3, [pc, #312]	@ (8006508 <BSP_LCD_DrawCircle+0x1cc>)
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4c4e      	ldr	r4, [pc, #312]	@ (800650c <BSP_LCD_DrawCircle+0x1d0>)
 80063d4:	4613      	mov	r3, r2
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4423      	add	r3, r4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	461a      	mov	r2, r3
 80063e2:	f000 f895 	bl	8006510 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	88fa      	ldrh	r2, [r7, #6]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	b298      	uxth	r0, r3
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	88ba      	ldrh	r2, [r7, #4]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	b299      	uxth	r1, r3
 80063fa:	4b43      	ldr	r3, [pc, #268]	@ (8006508 <BSP_LCD_DrawCircle+0x1cc>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	4c43      	ldr	r4, [pc, #268]	@ (800650c <BSP_LCD_DrawCircle+0x1d0>)
 8006400:	4613      	mov	r3, r2
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4423      	add	r3, r4
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	f000 f87f 	bl	8006510 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	b29a      	uxth	r2, r3
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	4413      	add	r3, r2
 800641a:	b298      	uxth	r0, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	b29a      	uxth	r2, r3
 8006420:	88bb      	ldrh	r3, [r7, #4]
 8006422:	4413      	add	r3, r2
 8006424:	b299      	uxth	r1, r3
 8006426:	4b38      	ldr	r3, [pc, #224]	@ (8006508 <BSP_LCD_DrawCircle+0x1cc>)
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4c38      	ldr	r4, [pc, #224]	@ (800650c <BSP_LCD_DrawCircle+0x1d0>)
 800642c:	4613      	mov	r3, r2
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	4413      	add	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4423      	add	r3, r4
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	f000 f869 	bl	8006510 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	b29b      	uxth	r3, r3
 8006442:	88fa      	ldrh	r2, [r7, #6]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	b298      	uxth	r0, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	b29a      	uxth	r2, r3
 800644c:	88bb      	ldrh	r3, [r7, #4]
 800644e:	4413      	add	r3, r2
 8006450:	b299      	uxth	r1, r3
 8006452:	4b2d      	ldr	r3, [pc, #180]	@ (8006508 <BSP_LCD_DrawCircle+0x1cc>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	4c2d      	ldr	r4, [pc, #180]	@ (800650c <BSP_LCD_DrawCircle+0x1d0>)
 8006458:	4613      	mov	r3, r2
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	4413      	add	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4423      	add	r3, r4
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	f000 f853 	bl	8006510 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	b29a      	uxth	r2, r3
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	4413      	add	r3, r2
 8006472:	b298      	uxth	r0, r3
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	b29a      	uxth	r2, r3
 8006478:	88bb      	ldrh	r3, [r7, #4]
 800647a:	4413      	add	r3, r2
 800647c:	b299      	uxth	r1, r3
 800647e:	4b22      	ldr	r3, [pc, #136]	@ (8006508 <BSP_LCD_DrawCircle+0x1cc>)
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	4c22      	ldr	r4, [pc, #136]	@ (800650c <BSP_LCD_DrawCircle+0x1d0>)
 8006484:	4613      	mov	r3, r2
 8006486:	005b      	lsls	r3, r3, #1
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4423      	add	r3, r4
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	f000 f83d 	bl	8006510 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	b29b      	uxth	r3, r3
 800649a:	88fa      	ldrh	r2, [r7, #6]
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	b298      	uxth	r0, r3
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	88bb      	ldrh	r3, [r7, #4]
 80064a6:	4413      	add	r3, r2
 80064a8:	b299      	uxth	r1, r3
 80064aa:	4b17      	ldr	r3, [pc, #92]	@ (8006508 <BSP_LCD_DrawCircle+0x1cc>)
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	4c17      	ldr	r4, [pc, #92]	@ (800650c <BSP_LCD_DrawCircle+0x1d0>)
 80064b0:	4613      	mov	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	4423      	add	r3, r4
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	f000 f827 	bl	8006510 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	da06      	bge.n	80064d6 <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	009a      	lsls	r2, r3, #2
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	4413      	add	r3, r2
 80064d0:	3306      	adds	r3, #6
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e00a      	b.n	80064ec <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	009a      	lsls	r2, r3, #2
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	4413      	add	r3, r2
 80064e2:	330a      	adds	r3, #10
 80064e4:	617b      	str	r3, [r7, #20]
      current_y--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3b01      	subs	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	3301      	adds	r3, #1
 80064f0:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	f67f af33 	bls.w	8006362 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80064fc:	bf00      	nop
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	bd90      	pop	{r4, r7, pc}
 8006506:	bf00      	nop
 8006508:	20006038 	.word	0x20006038
 800650c:	2000603c 	.word	0x2000603c

08006510 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8006510:	b5b0      	push	{r4, r5, r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	603a      	str	r2, [r7, #0]
 800651a:	80fb      	strh	r3, [r7, #6]
 800651c:	460b      	mov	r3, r1
 800651e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006520:	4b1d      	ldr	r3, [pc, #116]	@ (8006598 <BSP_LCD_DrawPixel+0x88>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1d      	ldr	r2, [pc, #116]	@ (800659c <BSP_LCD_DrawPixel+0x8c>)
 8006526:	2134      	movs	r1, #52	@ 0x34
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	4413      	add	r3, r2
 800652e:	3348      	adds	r3, #72	@ 0x48
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b02      	cmp	r3, #2
 8006534:	d116      	bne.n	8006564 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8006536:	4b18      	ldr	r3, [pc, #96]	@ (8006598 <BSP_LCD_DrawPixel+0x88>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a18      	ldr	r2, [pc, #96]	@ (800659c <BSP_LCD_DrawPixel+0x8c>)
 800653c:	2134      	movs	r1, #52	@ 0x34
 800653e:	fb01 f303 	mul.w	r3, r1, r3
 8006542:	4413      	add	r3, r2
 8006544:	335c      	adds	r3, #92	@ 0x5c
 8006546:	681c      	ldr	r4, [r3, #0]
 8006548:	88bd      	ldrh	r5, [r7, #4]
 800654a:	f7ff fae3 	bl	8005b14 <BSP_LCD_GetXSize>
 800654e:	4603      	mov	r3, r0
 8006550:	fb03 f205 	mul.w	r2, r3, r5
 8006554:	88fb      	ldrh	r3, [r7, #6]
 8006556:	4413      	add	r3, r2
 8006558:	005b      	lsls	r3, r3, #1
 800655a:	4423      	add	r3, r4
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	b292      	uxth	r2, r2
 8006560:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8006562:	e015      	b.n	8006590 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006564:	4b0c      	ldr	r3, [pc, #48]	@ (8006598 <BSP_LCD_DrawPixel+0x88>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a0c      	ldr	r2, [pc, #48]	@ (800659c <BSP_LCD_DrawPixel+0x8c>)
 800656a:	2134      	movs	r1, #52	@ 0x34
 800656c:	fb01 f303 	mul.w	r3, r1, r3
 8006570:	4413      	add	r3, r2
 8006572:	335c      	adds	r3, #92	@ 0x5c
 8006574:	681c      	ldr	r4, [r3, #0]
 8006576:	88bd      	ldrh	r5, [r7, #4]
 8006578:	f7ff facc 	bl	8005b14 <BSP_LCD_GetXSize>
 800657c:	4603      	mov	r3, r0
 800657e:	fb03 f205 	mul.w	r2, r3, r5
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4423      	add	r3, r4
 800658a:	461a      	mov	r2, r3
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	6013      	str	r3, [r2, #0]
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bdb0      	pop	{r4, r5, r7, pc}
 8006598:	20006038 	.word	0x20006038
 800659c:	20005f50 	.word	0x20005f50

080065a0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b08b      	sub	sp, #44	@ 0x2c
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80065b0:	2300      	movs	r3, #0
 80065b2:	61bb      	str	r3, [r7, #24]
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	2300      	movs	r3, #0
 80065ba:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	330a      	adds	r3, #10
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	330b      	adds	r3, #11
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	441a      	add	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	330c      	adds	r3, #12
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	041b      	lsls	r3, r3, #16
 80065da:	441a      	add	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	330d      	adds	r3, #13
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	061b      	lsls	r3, r3, #24
 80065e4:	4413      	add	r3, r2
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3312      	adds	r3, #18
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	461a      	mov	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3313      	adds	r3, #19
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	021b      	lsls	r3, r3, #8
 80065f8:	441a      	add	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	3314      	adds	r3, #20
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	041b      	lsls	r3, r3, #16
 8006602:	441a      	add	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3315      	adds	r3, #21
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	061b      	lsls	r3, r3, #24
 800660c:	4413      	add	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3316      	adds	r3, #22
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3317      	adds	r3, #23
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	441a      	add	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	3318      	adds	r3, #24
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	041b      	lsls	r3, r3, #16
 800662a:	441a      	add	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3319      	adds	r3, #25
 8006630:	781b      	ldrb	r3, [r3, #0]
 8006632:	061b      	lsls	r3, r3, #24
 8006634:	4413      	add	r3, r2
 8006636:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	331c      	adds	r3, #28
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	331d      	adds	r3, #29
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	021b      	lsls	r3, r3, #8
 8006648:	4413      	add	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 800664c:	4b2b      	ldr	r3, [pc, #172]	@ (80066fc <BSP_LCD_DrawBitmap+0x15c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a2b      	ldr	r2, [pc, #172]	@ (8006700 <BSP_LCD_DrawBitmap+0x160>)
 8006652:	2134      	movs	r1, #52	@ 0x34
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	4413      	add	r3, r2
 800665a:	335c      	adds	r3, #92	@ 0x5c
 800665c:	681c      	ldr	r4, [r3, #0]
 800665e:	f7ff fa59 	bl	8005b14 <BSP_LCD_GetXSize>
 8006662:	4602      	mov	r2, r0
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	fb03 f202 	mul.w	r2, r3, r2
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4423      	add	r3, r4
 8006672:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	3b20      	subs	r3, #32
 8006678:	2b07      	cmp	r3, #7
 800667a:	d802      	bhi.n	8006682 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 800667c:	2300      	movs	r3, #0
 800667e:	61fb      	str	r3, [r7, #28]
 8006680:	e008      	b.n	8006694 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	3b10      	subs	r3, #16
 8006686:	2b07      	cmp	r3, #7
 8006688:	d802      	bhi.n	8006690 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 800668a:	2302      	movs	r3, #2
 800668c:	61fb      	str	r3, [r7, #28]
 800668e:	e001      	b.n	8006694 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8006690:	2301      	movs	r3, #1
 8006692:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3b01      	subs	r3, #1
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	fb02 f303 	mul.w	r3, r2, r3
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	08d2      	lsrs	r2, r2, #3
 80066a2:	fb03 f202 	mul.w	r2, r3, r2
 80066a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a8:	4413      	add	r3, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	4413      	add	r3, r2
 80066ae:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80066b0:	2300      	movs	r3, #0
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80066b4:	e018      	b.n	80066e8 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80066b6:	6a39      	ldr	r1, [r7, #32]
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fb35 	bl	8006d2c <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80066c2:	f7ff fa27 	bl	8005b14 <BSP_LCD_GetXSize>
 80066c6:	4603      	mov	r3, r0
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	6a3a      	ldr	r2, [r7, #32]
 80066cc:	4413      	add	r3, r2
 80066ce:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	08db      	lsrs	r3, r3, #3
 80066d4:	69ba      	ldr	r2, [r7, #24]
 80066d6:	fb02 f303 	mul.w	r3, r2, r3
 80066da:	425b      	negs	r3, r3
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	4413      	add	r3, r2
 80066e0:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	3301      	adds	r3, #1
 80066e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80066e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d3e2      	bcc.n	80066b6 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	372c      	adds	r7, #44	@ 0x2c
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd90      	pop	{r4, r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20006038 	.word	0x20006038
 8006700:	20005f50 	.word	0x20005f50

08006704 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8006704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006708:	b086      	sub	sp, #24
 800670a:	af02      	add	r7, sp, #8
 800670c:	4604      	mov	r4, r0
 800670e:	4608      	mov	r0, r1
 8006710:	4611      	mov	r1, r2
 8006712:	461a      	mov	r2, r3
 8006714:	4623      	mov	r3, r4
 8006716:	80fb      	strh	r3, [r7, #6]
 8006718:	4603      	mov	r3, r0
 800671a:	80bb      	strh	r3, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	807b      	strh	r3, [r7, #2]
 8006720:	4613      	mov	r3, r2
 8006722:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006728:	4b30      	ldr	r3, [pc, #192]	@ (80067ec <BSP_LCD_FillRect+0xe8>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	4930      	ldr	r1, [pc, #192]	@ (80067f0 <BSP_LCD_FillRect+0xec>)
 800672e:	4613      	mov	r3, r2
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	4413      	add	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	440b      	add	r3, r1
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff fac0 	bl	8005cc0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006740:	4b2a      	ldr	r3, [pc, #168]	@ (80067ec <BSP_LCD_FillRect+0xe8>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a2b      	ldr	r2, [pc, #172]	@ (80067f4 <BSP_LCD_FillRect+0xf0>)
 8006746:	2134      	movs	r1, #52	@ 0x34
 8006748:	fb01 f303 	mul.w	r3, r1, r3
 800674c:	4413      	add	r3, r2
 800674e:	3348      	adds	r3, #72	@ 0x48
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d114      	bne.n	8006780 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006756:	4b25      	ldr	r3, [pc, #148]	@ (80067ec <BSP_LCD_FillRect+0xe8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a26      	ldr	r2, [pc, #152]	@ (80067f4 <BSP_LCD_FillRect+0xf0>)
 800675c:	2134      	movs	r1, #52	@ 0x34
 800675e:	fb01 f303 	mul.w	r3, r1, r3
 8006762:	4413      	add	r3, r2
 8006764:	335c      	adds	r3, #92	@ 0x5c
 8006766:	681c      	ldr	r4, [r3, #0]
 8006768:	f7ff f9d4 	bl	8005b14 <BSP_LCD_GetXSize>
 800676c:	4602      	mov	r2, r0
 800676e:	88bb      	ldrh	r3, [r7, #4]
 8006770:	fb03 f202 	mul.w	r2, r3, r2
 8006774:	88fb      	ldrh	r3, [r7, #6]
 8006776:	4413      	add	r3, r2
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	4423      	add	r3, r4
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	e013      	b.n	80067a8 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006780:	4b1a      	ldr	r3, [pc, #104]	@ (80067ec <BSP_LCD_FillRect+0xe8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1b      	ldr	r2, [pc, #108]	@ (80067f4 <BSP_LCD_FillRect+0xf0>)
 8006786:	2134      	movs	r1, #52	@ 0x34
 8006788:	fb01 f303 	mul.w	r3, r1, r3
 800678c:	4413      	add	r3, r2
 800678e:	335c      	adds	r3, #92	@ 0x5c
 8006790:	681c      	ldr	r4, [r3, #0]
 8006792:	f7ff f9bf 	bl	8005b14 <BSP_LCD_GetXSize>
 8006796:	4602      	mov	r2, r0
 8006798:	88bb      	ldrh	r3, [r7, #4]
 800679a:	fb03 f202 	mul.w	r2, r3, r2
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	4413      	add	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4423      	add	r3, r4
 80067a6:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80067a8:	4b10      	ldr	r3, [pc, #64]	@ (80067ec <BSP_LCD_FillRect+0xe8>)
 80067aa:	681c      	ldr	r4, [r3, #0]
 80067ac:	68fd      	ldr	r5, [r7, #12]
 80067ae:	887e      	ldrh	r6, [r7, #2]
 80067b0:	f8b7 8000 	ldrh.w	r8, [r7]
 80067b4:	f7ff f9ae 	bl	8005b14 <BSP_LCD_GetXSize>
 80067b8:	4602      	mov	r2, r0
 80067ba:	887b      	ldrh	r3, [r7, #2]
 80067bc:	1ad1      	subs	r1, r2, r3
 80067be:	4b0b      	ldr	r3, [pc, #44]	@ (80067ec <BSP_LCD_FillRect+0xe8>)
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	480b      	ldr	r0, [pc, #44]	@ (80067f0 <BSP_LCD_FillRect+0xec>)
 80067c4:	4613      	mov	r3, r2
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4403      	add	r3, r0
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	9301      	str	r3, [sp, #4]
 80067d2:	9100      	str	r1, [sp, #0]
 80067d4:	4643      	mov	r3, r8
 80067d6:	4632      	mov	r2, r6
 80067d8:	4629      	mov	r1, r5
 80067da:	4620      	mov	r0, r4
 80067dc:	f000 fa5a 	bl	8006c94 <LL_FillBuffer>
}
 80067e0:	bf00      	nop
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ea:	bf00      	nop
 80067ec:	20006038 	.word	0x20006038
 80067f0:	2000603c 	.word	0x2000603c
 80067f4:	20005f50 	.word	0x20005f50

080067f8 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	80fb      	strh	r3, [r7, #6]
 8006802:	460b      	mov	r3, r1
 8006804:	80bb      	strh	r3, [r7, #4]
 8006806:	4613      	mov	r3, r2
 8006808:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800680a:	887b      	ldrh	r3, [r7, #2]
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	f1c3 0303 	rsb	r3, r3, #3
 8006812:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8006814:	2300      	movs	r3, #0
 8006816:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8006818:	887b      	ldrh	r3, [r7, #2]
 800681a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800681c:	4b44      	ldr	r3, [pc, #272]	@ (8006930 <BSP_LCD_FillCircle+0x138>)
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	4944      	ldr	r1, [pc, #272]	@ (8006934 <BSP_LCD_FillCircle+0x13c>)
 8006822:	4613      	mov	r3, r2
 8006824:	005b      	lsls	r3, r3, #1
 8006826:	4413      	add	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	440b      	add	r3, r1
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff fa46 	bl	8005cc0 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8006834:	e061      	b.n	80068fa <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d021      	beq.n	8006880 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	b29b      	uxth	r3, r3
 8006840:	88fa      	ldrh	r2, [r7, #6]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	b298      	uxth	r0, r3
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	b29a      	uxth	r2, r3
 800684a:	88bb      	ldrh	r3, [r7, #4]
 800684c:	4413      	add	r3, r2
 800684e:	b299      	uxth	r1, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	b29b      	uxth	r3, r3
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	b29b      	uxth	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	f7ff fbb1 	bl	8005fc0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	b29b      	uxth	r3, r3
 8006862:	88fa      	ldrh	r2, [r7, #6]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	b298      	uxth	r0, r3
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	b29b      	uxth	r3, r3
 800686c:	88ba      	ldrh	r2, [r7, #4]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	b299      	uxth	r1, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	b29b      	uxth	r3, r3
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	b29b      	uxth	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	f7ff fba0 	bl	8005fc0 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d021      	beq.n	80068ca <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	b29b      	uxth	r3, r3
 800688a:	88fa      	ldrh	r2, [r7, #6]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	b298      	uxth	r0, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	b29b      	uxth	r3, r3
 8006894:	88ba      	ldrh	r2, [r7, #4]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	b299      	uxth	r1, r3
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	b29b      	uxth	r3, r3
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	461a      	mov	r2, r3
 80068a4:	f7ff fb8c 	bl	8005fc0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	88fa      	ldrh	r2, [r7, #6]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	b298      	uxth	r0, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	88bb      	ldrh	r3, [r7, #4]
 80068b8:	4413      	add	r3, r2
 80068ba:	b299      	uxth	r1, r3
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	f7ff fb7b 	bl	8005fc0 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	da06      	bge.n	80068de <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	009a      	lsls	r2, r3, #2
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	4413      	add	r3, r2
 80068d8:	3306      	adds	r3, #6
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	e00a      	b.n	80068f4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	009a      	lsls	r2, r3, #2
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	4413      	add	r3, r2
 80068ea:	330a      	adds	r3, #10
 80068ec:	617b      	str	r3, [r7, #20]
      current_y--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	3301      	adds	r3, #1
 80068f8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d999      	bls.n	8006836 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006902:	4b0b      	ldr	r3, [pc, #44]	@ (8006930 <BSP_LCD_FillCircle+0x138>)
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	490b      	ldr	r1, [pc, #44]	@ (8006934 <BSP_LCD_FillCircle+0x13c>)
 8006908:	4613      	mov	r3, r2
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	440b      	add	r3, r1
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4618      	mov	r0, r3
 8006916:	f7ff f9d3 	bl	8005cc0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800691a:	887a      	ldrh	r2, [r7, #2]
 800691c:	88b9      	ldrh	r1, [r7, #4]
 800691e:	88fb      	ldrh	r3, [r7, #6]
 8006920:	4618      	mov	r0, r3
 8006922:	f7ff fd0b 	bl	800633c <BSP_LCD_DrawCircle>
}
 8006926:	bf00      	nop
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20006038 	.word	0x20006038
 8006934:	2000603c 	.word	0x2000603c

08006938 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b090      	sub	sp, #64	@ 0x40
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006942:	4b64      	ldr	r3, [pc, #400]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006946:	4a63      	ldr	r2, [pc, #396]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006948:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800694c:	6453      	str	r3, [r2, #68]	@ 0x44
 800694e:	4b61      	ldr	r3, [pc, #388]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006952:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006956:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800695a:	4b5e      	ldr	r3, [pc, #376]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 800695c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695e:	4a5d      	ldr	r2, [pc, #372]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006960:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006964:	6313      	str	r3, [r2, #48]	@ 0x30
 8006966:	4b5b      	ldr	r3, [pc, #364]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800696a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006972:	4b58      	ldr	r3, [pc, #352]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006976:	4a57      	ldr	r2, [pc, #348]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006978:	f043 0310 	orr.w	r3, r3, #16
 800697c:	6313      	str	r3, [r2, #48]	@ 0x30
 800697e:	4b55      	ldr	r3, [pc, #340]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	623b      	str	r3, [r7, #32]
 8006988:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800698a:	4b52      	ldr	r3, [pc, #328]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 800698c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698e:	4a51      	ldr	r2, [pc, #324]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006990:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006994:	6313      	str	r3, [r2, #48]	@ 0x30
 8006996:	4b4f      	ldr	r3, [pc, #316]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800699e:	61fb      	str	r3, [r7, #28]
 80069a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80069a2:	4b4c      	ldr	r3, [pc, #304]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a6:	4a4b      	ldr	r2, [pc, #300]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80069ae:	4b49      	ldr	r3, [pc, #292]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80069ba:	4b46      	ldr	r3, [pc, #280]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069be:	4a45      	ldr	r2, [pc, #276]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80069c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80069c6:	4b43      	ldr	r3, [pc, #268]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ce:	617b      	str	r3, [r7, #20]
 80069d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80069d2:	4b40      	ldr	r3, [pc, #256]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d6:	4a3f      	ldr	r2, [pc, #252]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80069dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80069de:	4b3d      	ldr	r3, [pc, #244]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069e6:	613b      	str	r3, [r7, #16]
 80069e8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80069ea:	4b3a      	ldr	r3, [pc, #232]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ee:	4a39      	ldr	r2, [pc, #228]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80069f6:	4b37      	ldr	r3, [pc, #220]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8006a02:	4b34      	ldr	r3, [pc, #208]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a06:	4a33      	ldr	r2, [pc, #204]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006a08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a0e:	4b31      	ldr	r3, [pc, #196]	@ (8006ad4 <BSP_LCD_MspInit+0x19c>)
 8006a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a16:	60bb      	str	r3, [r7, #8]
 8006a18:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8006a1a:	2310      	movs	r3, #16
 8006a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a1e:	2302      	movs	r3, #2
 8006a20:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8006a26:	2302      	movs	r3, #2
 8006a28:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8006a2a:	230e      	movs	r3, #14
 8006a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006a32:	4619      	mov	r1, r3
 8006a34:	4828      	ldr	r0, [pc, #160]	@ (8006ad8 <BSP_LCD_MspInit+0x1a0>)
 8006a36:	f002 f805 	bl	8008a44 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8006a3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a40:	2302      	movs	r3, #2
 8006a42:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8006a44:	2309      	movs	r3, #9
 8006a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006a48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4823      	ldr	r0, [pc, #140]	@ (8006adc <BSP_LCD_MspInit+0x1a4>)
 8006a50:	f001 fff8 	bl	8008a44 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8006a54:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8006a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006a5e:	230e      	movs	r3, #14
 8006a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006a62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006a66:	4619      	mov	r1, r3
 8006a68:	481d      	ldr	r0, [pc, #116]	@ (8006ae0 <BSP_LCD_MspInit+0x1a8>)
 8006a6a:	f001 ffeb 	bl	8008a44 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8006a6e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8006a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a74:	2302      	movs	r3, #2
 8006a76:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006a78:	230e      	movs	r3, #14
 8006a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8006a7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006a80:	4619      	mov	r1, r3
 8006a82:	4818      	ldr	r0, [pc, #96]	@ (8006ae4 <BSP_LCD_MspInit+0x1ac>)
 8006a84:	f001 ffde 	bl	8008a44 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8006a88:	23f7      	movs	r3, #247	@ 0xf7
 8006a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8006a90:	230e      	movs	r3, #14
 8006a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8006a94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4813      	ldr	r0, [pc, #76]	@ (8006ae8 <BSP_LCD_MspInit+0x1b0>)
 8006a9c:	f001 ffd2 	bl	8008a44 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8006aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8006aaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006aae:	4619      	mov	r1, r3
 8006ab0:	480b      	ldr	r0, [pc, #44]	@ (8006ae0 <BSP_LCD_MspInit+0x1a8>)
 8006ab2:	f001 ffc7 	bl	8008a44 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8006ab6:	2308      	movs	r3, #8
 8006ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8006aba:	2301      	movs	r3, #1
 8006abc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8006abe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4808      	ldr	r0, [pc, #32]	@ (8006ae8 <BSP_LCD_MspInit+0x1b0>)
 8006ac6:	f001 ffbd 	bl	8008a44 <HAL_GPIO_Init>
}
 8006aca:	bf00      	nop
 8006acc:	3740      	adds	r7, #64	@ 0x40
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	40021800 	.word	0x40021800
 8006ae0:	40022000 	.word	0x40022000
 8006ae4:	40022400 	.word	0x40022400
 8006ae8:	40022800 	.word	0x40022800

08006aec <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8006af6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b20 <BSP_LCD_ClockConfig+0x34>)
 8006af8:	2208      	movs	r2, #8
 8006afa:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8006afc:	4b08      	ldr	r3, [pc, #32]	@ (8006b20 <BSP_LCD_ClockConfig+0x34>)
 8006afe:	22c0      	movs	r2, #192	@ 0xc0
 8006b00:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8006b02:	4b07      	ldr	r3, [pc, #28]	@ (8006b20 <BSP_LCD_ClockConfig+0x34>)
 8006b04:	2205      	movs	r2, #5
 8006b06:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8006b08:	4b05      	ldr	r3, [pc, #20]	@ (8006b20 <BSP_LCD_ClockConfig+0x34>)
 8006b0a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8006b10:	4803      	ldr	r0, [pc, #12]	@ (8006b20 <BSP_LCD_ClockConfig+0x34>)
 8006b12:	f004 f89b 	bl	800ac4c <HAL_RCCEx_PeriphCLKConfig>
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20006054 	.word	0x20006054

08006b24 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	603a      	str	r2, [r7, #0]
 8006b2e:	80fb      	strh	r3, [r7, #6]
 8006b30:	460b      	mov	r3, r1
 8006b32:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8006b3c:	4b53      	ldr	r3, [pc, #332]	@ (8006c8c <DrawChar+0x168>)
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	4953      	ldr	r1, [pc, #332]	@ (8006c90 <DrawChar+0x16c>)
 8006b42:	4613      	mov	r3, r2
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	88db      	ldrh	r3, [r3, #6]
 8006b52:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8006b54:	4b4d      	ldr	r3, [pc, #308]	@ (8006c8c <DrawChar+0x168>)
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	494d      	ldr	r1, [pc, #308]	@ (8006c90 <DrawChar+0x16c>)
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	440b      	add	r3, r1
 8006b64:	3308      	adds	r3, #8
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	889b      	ldrh	r3, [r3, #4]
 8006b6a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8006b6c:	8a3b      	ldrh	r3, [r7, #16]
 8006b6e:	3307      	adds	r3, #7
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	da00      	bge.n	8006b76 <DrawChar+0x52>
 8006b74:	3307      	adds	r3, #7
 8006b76:	10db      	asrs	r3, r3, #3
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	b2da      	uxtb	r2, r3
 8006b7e:	8a3b      	ldrh	r3, [r7, #16]
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8006b86:	2300      	movs	r3, #0
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	e076      	b.n	8006c7a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8006b8c:	8a3b      	ldrh	r3, [r7, #16]
 8006b8e:	3307      	adds	r3, #7
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	da00      	bge.n	8006b96 <DrawChar+0x72>
 8006b94:	3307      	adds	r3, #7
 8006b96:	10db      	asrs	r3, r3, #3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8006ba6:	8a3b      	ldrh	r3, [r7, #16]
 8006ba8:	3307      	adds	r3, #7
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	da00      	bge.n	8006bb0 <DrawChar+0x8c>
 8006bae:	3307      	adds	r3, #7
 8006bb0:	10db      	asrs	r3, r3, #3
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d002      	beq.n	8006bbc <DrawChar+0x98>
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d004      	beq.n	8006bc4 <DrawChar+0xa0>
 8006bba:	e00c      	b.n	8006bd6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	617b      	str	r3, [r7, #20]
      break;
 8006bc2:	e016      	b.n	8006bf2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	3201      	adds	r2, #1
 8006bce:	7812      	ldrb	r2, [r2, #0]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	617b      	str	r3, [r7, #20]
      break;
 8006bd4:	e00d      	b.n	8006bf2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	041a      	lsls	r2, r3, #16
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	3301      	adds	r3, #1
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	021b      	lsls	r3, r3, #8
 8006be4:	4313      	orrs	r3, r2
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	3202      	adds	r2, #2
 8006bea:	7812      	ldrb	r2, [r2, #0]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]
      break;
 8006bf0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e036      	b.n	8006c66 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8006bf8:	8a3a      	ldrh	r2, [r7, #16]
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	1ad2      	subs	r2, r2, r3
 8006bfe:	7bfb      	ldrb	r3, [r7, #15]
 8006c00:	4413      	add	r3, r2
 8006c02:	3b01      	subs	r3, #1
 8006c04:	2201      	movs	r2, #1
 8006c06:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d012      	beq.n	8006c3a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	b298      	uxth	r0, r3
 8006c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8006c8c <DrawChar+0x168>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	491b      	ldr	r1, [pc, #108]	@ (8006c90 <DrawChar+0x16c>)
 8006c24:	4613      	mov	r3, r2
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	88bb      	ldrh	r3, [r7, #4]
 8006c32:	4619      	mov	r1, r3
 8006c34:	f7ff fc6c 	bl	8006510 <BSP_LCD_DrawPixel>
 8006c38:	e012      	b.n	8006c60 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	88fb      	ldrh	r3, [r7, #6]
 8006c40:	4413      	add	r3, r2
 8006c42:	b298      	uxth	r0, r3
 8006c44:	4b11      	ldr	r3, [pc, #68]	@ (8006c8c <DrawChar+0x168>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	4911      	ldr	r1, [pc, #68]	@ (8006c90 <DrawChar+0x16c>)
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	440b      	add	r3, r1
 8006c54:	3304      	adds	r3, #4
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	88bb      	ldrh	r3, [r7, #4]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	f7ff fc58 	bl	8006510 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	3301      	adds	r3, #1
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	8a3b      	ldrh	r3, [r7, #16]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d3c4      	bcc.n	8006bf8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8006c6e:	88bb      	ldrh	r3, [r7, #4]
 8006c70:	3301      	adds	r3, #1
 8006c72:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	3301      	adds	r3, #1
 8006c78:	61fb      	str	r3, [r7, #28]
 8006c7a:	8a7b      	ldrh	r3, [r7, #18]
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d384      	bcc.n	8006b8c <DrawChar+0x68>
  }
}
 8006c82:	bf00      	nop
 8006c84:	bf00      	nop
 8006c86:	3720      	adds	r7, #32
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	20006038 	.word	0x20006038
 8006c90:	2000603c 	.word	0x2000603c

08006c94 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8006ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8006d1c <LL_FillBuffer+0x88>)
 8006ca4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006ca8:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006caa:	4b1d      	ldr	r3, [pc, #116]	@ (8006d20 <LL_FillBuffer+0x8c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a1d      	ldr	r2, [pc, #116]	@ (8006d24 <LL_FillBuffer+0x90>)
 8006cb0:	2134      	movs	r1, #52	@ 0x34
 8006cb2:	fb01 f303 	mul.w	r3, r1, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3348      	adds	r3, #72	@ 0x48
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d103      	bne.n	8006cc8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8006cc0:	4b16      	ldr	r3, [pc, #88]	@ (8006d1c <LL_FillBuffer+0x88>)
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	609a      	str	r2, [r3, #8]
 8006cc6:	e002      	b.n	8006cce <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8006cc8:	4b14      	ldr	r3, [pc, #80]	@ (8006d1c <LL_FillBuffer+0x88>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8006cce:	4a13      	ldr	r2, [pc, #76]	@ (8006d1c <LL_FillBuffer+0x88>)
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8006cd4:	4b11      	ldr	r3, [pc, #68]	@ (8006d1c <LL_FillBuffer+0x88>)
 8006cd6:	4a14      	ldr	r2, [pc, #80]	@ (8006d28 <LL_FillBuffer+0x94>)
 8006cd8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8006cda:	4810      	ldr	r0, [pc, #64]	@ (8006d1c <LL_FillBuffer+0x88>)
 8006cdc:	f001 fc26 	bl	800852c <HAL_DMA2D_Init>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d115      	bne.n	8006d12 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8006ce6:	68f9      	ldr	r1, [r7, #12]
 8006ce8:	480c      	ldr	r0, [pc, #48]	@ (8006d1c <LL_FillBuffer+0x88>)
 8006cea:	f001 fd7d 	bl	80087e8 <HAL_DMA2D_ConfigLayer>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10e      	bne.n	8006d12 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69f9      	ldr	r1, [r7, #28]
 8006cfe:	4807      	ldr	r0, [pc, #28]	@ (8006d1c <LL_FillBuffer+0x88>)
 8006d00:	f001 fc5e 	bl	80085c0 <HAL_DMA2D_Start>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d103      	bne.n	8006d12 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8006d0a:	210a      	movs	r1, #10
 8006d0c:	4803      	ldr	r0, [pc, #12]	@ (8006d1c <LL_FillBuffer+0x88>)
 8006d0e:	f001 fc82 	bl	8008616 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8006d12:	bf00      	nop
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	20005ff8 	.word	0x20005ff8
 8006d20:	20006038 	.word	0x20006038
 8006d24:	20005f50 	.word	0x20005f50
 8006d28:	4002b000 	.word	0x4002b000

08006d2c <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8006d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006d3c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8006d40:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8006d42:	4b1a      	ldr	r3, [pc, #104]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8006d48:	4b18      	ldr	r3, [pc, #96]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8006d4e:	4b17      	ldr	r3, [pc, #92]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8006d54:	4b15      	ldr	r3, [pc, #84]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006d56:	22ff      	movs	r2, #255	@ 0xff
 8006d58:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8006d5a:	4a14      	ldr	r2, [pc, #80]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8006d60:	4b12      	ldr	r3, [pc, #72]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8006d66:	4b11      	ldr	r3, [pc, #68]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006d68:	4a11      	ldr	r2, [pc, #68]	@ (8006db0 <LL_ConvertLineToARGB8888+0x84>)
 8006d6a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8006d6c:	480f      	ldr	r0, [pc, #60]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006d6e:	f001 fbdd 	bl	800852c <HAL_DMA2D_Init>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d115      	bne.n	8006da4 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8006d78:	2101      	movs	r1, #1
 8006d7a:	480c      	ldr	r0, [pc, #48]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006d7c:	f001 fd34 	bl	80087e8 <HAL_DMA2D_ConfigLayer>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10e      	bne.n	8006da4 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8006d86:	68f9      	ldr	r1, [r7, #12]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4806      	ldr	r0, [pc, #24]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006d92:	f001 fc15 	bl	80085c0 <HAL_DMA2D_Start>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d103      	bne.n	8006da4 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8006d9c:	210a      	movs	r1, #10
 8006d9e:	4803      	ldr	r0, [pc, #12]	@ (8006dac <LL_ConvertLineToARGB8888+0x80>)
 8006da0:	f001 fc39 	bl	8008616 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	20005ff8 	.word	0x20005ff8
 8006db0:	4002b000 	.word	0x4002b000

08006db4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8006db8:	4b29      	ldr	r3, [pc, #164]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006dba:	4a2a      	ldr	r2, [pc, #168]	@ (8006e64 <BSP_SDRAM_Init+0xb0>)
 8006dbc:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8006dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006e68 <BSP_SDRAM_Init+0xb4>)
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8006dc4:	4b28      	ldr	r3, [pc, #160]	@ (8006e68 <BSP_SDRAM_Init+0xb4>)
 8006dc6:	2207      	movs	r2, #7
 8006dc8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8006dca:	4b27      	ldr	r3, [pc, #156]	@ (8006e68 <BSP_SDRAM_Init+0xb4>)
 8006dcc:	2204      	movs	r2, #4
 8006dce:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8006dd0:	4b25      	ldr	r3, [pc, #148]	@ (8006e68 <BSP_SDRAM_Init+0xb4>)
 8006dd2:	2207      	movs	r2, #7
 8006dd4:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8006dd6:	4b24      	ldr	r3, [pc, #144]	@ (8006e68 <BSP_SDRAM_Init+0xb4>)
 8006dd8:	2202      	movs	r2, #2
 8006dda:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8006ddc:	4b22      	ldr	r3, [pc, #136]	@ (8006e68 <BSP_SDRAM_Init+0xb4>)
 8006dde:	2202      	movs	r2, #2
 8006de0:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8006de2:	4b21      	ldr	r3, [pc, #132]	@ (8006e68 <BSP_SDRAM_Init+0xb4>)
 8006de4:	2202      	movs	r2, #2
 8006de6:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8006de8:	4b1d      	ldr	r3, [pc, #116]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006dee:	4b1c      	ldr	r3, [pc, #112]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8006df4:	4b1a      	ldr	r3, [pc, #104]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006df6:	2204      	movs	r2, #4
 8006df8:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8006dfa:	4b19      	ldr	r3, [pc, #100]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006dfc:	2210      	movs	r2, #16
 8006dfe:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006e00:	4b17      	ldr	r3, [pc, #92]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006e02:	2240      	movs	r2, #64	@ 0x40
 8006e04:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8006e06:	4b16      	ldr	r3, [pc, #88]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006e08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006e0c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006e0e:	4b14      	ldr	r3, [pc, #80]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8006e14:	4b12      	ldr	r3, [pc, #72]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006e16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006e1a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006e1c:	4b10      	ldr	r3, [pc, #64]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006e1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006e22:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8006e24:	4b0e      	ldr	r3, [pc, #56]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006e26:	2200      	movs	r2, #0
 8006e28:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8006e2a:	2100      	movs	r1, #0
 8006e2c:	480c      	ldr	r0, [pc, #48]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006e2e:	f000 f87f 	bl	8006f30 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8006e32:	490d      	ldr	r1, [pc, #52]	@ (8006e68 <BSP_SDRAM_Init+0xb4>)
 8006e34:	480a      	ldr	r0, [pc, #40]	@ (8006e60 <BSP_SDRAM_Init+0xac>)
 8006e36:	f006 f825 	bl	800ce84 <HAL_SDRAM_Init>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d003      	beq.n	8006e48 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8006e40:	4b0a      	ldr	r3, [pc, #40]	@ (8006e6c <BSP_SDRAM_Init+0xb8>)
 8006e42:	2201      	movs	r2, #1
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	e002      	b.n	8006e4e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8006e48:	4b08      	ldr	r3, [pc, #32]	@ (8006e6c <BSP_SDRAM_Init+0xb8>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8006e4e:	f240 6003 	movw	r0, #1539	@ 0x603
 8006e52:	f000 f80d 	bl	8006e70 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8006e56:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <BSP_SDRAM_Init+0xb8>)
 8006e58:	781b      	ldrb	r3, [r3, #0]
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	200060d8 	.word	0x200060d8
 8006e64:	a0000140 	.word	0xa0000140
 8006e68:	2000610c 	.word	0x2000610c
 8006e6c:	20004f1c 	.word	0x20004f1c

08006e70 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006e7e:	2201      	movs	r2, #1
 8006e80:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006e82:	4b29      	ldr	r3, [pc, #164]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006e84:	2210      	movs	r2, #16
 8006e86:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006e88:	4b27      	ldr	r3, [pc, #156]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006e8e:	4b26      	ldr	r3, [pc, #152]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006e94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e98:	4923      	ldr	r1, [pc, #140]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006e9a:	4824      	ldr	r0, [pc, #144]	@ (8006f2c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006e9c:	f006 f826 	bl	800ceec <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	f000 fc21 	bl	80076e8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006ea6:	4b20      	ldr	r3, [pc, #128]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006eac:	4b1e      	ldr	r3, [pc, #120]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006eae:	2210      	movs	r2, #16
 8006eb0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006eba:	2200      	movs	r2, #0
 8006ebc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8006ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ec2:	4919      	ldr	r1, [pc, #100]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ec4:	4819      	ldr	r0, [pc, #100]	@ (8006f2c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006ec6:	f006 f811 	bl	800ceec <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006eca:	4b17      	ldr	r3, [pc, #92]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ecc:	2203      	movs	r2, #3
 8006ece:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006ed0:	4b15      	ldr	r3, [pc, #84]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8006ed6:	4b14      	ldr	r3, [pc, #80]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ed8:	2208      	movs	r2, #8
 8006eda:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8006edc:	4b12      	ldr	r3, [pc, #72]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ede:	2200      	movs	r2, #0
 8006ee0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006ee2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ee6:	4910      	ldr	r1, [pc, #64]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ee8:	4810      	ldr	r0, [pc, #64]	@ (8006f2c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006eea:	f005 ffff 	bl	800ceec <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8006eee:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8006ef2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8006ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006ef6:	2204      	movs	r2, #4
 8006ef8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8006efa:	4b0b      	ldr	r3, [pc, #44]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006efc:	2210      	movs	r2, #16
 8006efe:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8006f00:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f02:	2201      	movs	r2, #1
 8006f04:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	4a07      	ldr	r2, [pc, #28]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f0a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8006f0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f10:	4905      	ldr	r1, [pc, #20]	@ (8006f28 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8006f12:	4806      	ldr	r0, [pc, #24]	@ (8006f2c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006f14:	f005 ffea 	bl	800ceec <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8006f18:	6879      	ldr	r1, [r7, #4]
 8006f1a:	4804      	ldr	r0, [pc, #16]	@ (8006f2c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8006f1c:	f006 f81b 	bl	800cf56 <HAL_SDRAM_ProgramRefreshRate>
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	20006128 	.word	0x20006128
 8006f2c:	200060d8 	.word	0x200060d8

08006f30 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b090      	sub	sp, #64	@ 0x40
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006f3a:	4b70      	ldr	r3, [pc, #448]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3e:	4a6f      	ldr	r2, [pc, #444]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f40:	f043 0301 	orr.w	r3, r3, #1
 8006f44:	6393      	str	r3, [r2, #56]	@ 0x38
 8006f46:	4b6d      	ldr	r3, [pc, #436]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8006f52:	4b6a      	ldr	r3, [pc, #424]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f56:	4a69      	ldr	r2, [pc, #420]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f5e:	4b67      	ldr	r3, [pc, #412]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f6a:	4b64      	ldr	r3, [pc, #400]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6e:	4a63      	ldr	r2, [pc, #396]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f70:	f043 0304 	orr.w	r3, r3, #4
 8006f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f76:	4b61      	ldr	r3, [pc, #388]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7a:	f003 0304 	and.w	r3, r3, #4
 8006f7e:	623b      	str	r3, [r7, #32]
 8006f80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f82:	4b5e      	ldr	r3, [pc, #376]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f86:	4a5d      	ldr	r2, [pc, #372]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f88:	f043 0308 	orr.w	r3, r3, #8
 8006f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f92:	f003 0308 	and.w	r3, r3, #8
 8006f96:	61fb      	str	r3, [r7, #28]
 8006f98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f9a:	4b58      	ldr	r3, [pc, #352]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9e:	4a57      	ldr	r2, [pc, #348]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006fa0:	f043 0310 	orr.w	r3, r3, #16
 8006fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fa6:	4b55      	ldr	r3, [pc, #340]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006faa:	f003 0310 	and.w	r3, r3, #16
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006fb2:	4b52      	ldr	r3, [pc, #328]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fb6:	4a51      	ldr	r2, [pc, #324]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006fb8:	f043 0320 	orr.w	r3, r3, #32
 8006fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	617b      	str	r3, [r7, #20]
 8006fc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006fca:	4b4c      	ldr	r3, [pc, #304]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fce:	4a4b      	ldr	r2, [pc, #300]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fd6:	4b49      	ldr	r3, [pc, #292]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fde:	613b      	str	r3, [r7, #16]
 8006fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006fe2:	4b46      	ldr	r3, [pc, #280]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe6:	4a45      	ldr	r2, [pc, #276]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006fe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fee:	4b43      	ldr	r3, [pc, #268]	@ (80070fc <BSP_SDRAM_MspInit+0x1cc>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006ffe:	2301      	movs	r3, #1
 8007000:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8007002:	2302      	movs	r3, #2
 8007004:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007006:	230c      	movs	r3, #12
 8007008:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800700a:	2308      	movs	r3, #8
 800700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800700e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007012:	4619      	mov	r1, r3
 8007014:	483a      	ldr	r0, [pc, #232]	@ (8007100 <BSP_SDRAM_MspInit+0x1d0>)
 8007016:	f001 fd15 	bl	8008a44 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800701a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800701e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007020:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007024:	4619      	mov	r1, r3
 8007026:	4837      	ldr	r0, [pc, #220]	@ (8007104 <BSP_SDRAM_MspInit+0x1d4>)
 8007028:	f001 fd0c 	bl	8008a44 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800702c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8007030:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007032:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007036:	4619      	mov	r1, r3
 8007038:	4833      	ldr	r0, [pc, #204]	@ (8007108 <BSP_SDRAM_MspInit+0x1d8>)
 800703a:	f001 fd03 	bl	8008a44 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800703e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8007042:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8007044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007048:	4619      	mov	r1, r3
 800704a:	4830      	ldr	r0, [pc, #192]	@ (800710c <BSP_SDRAM_MspInit+0x1dc>)
 800704c:	f001 fcfa 	bl	8008a44 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007050:	f248 1333 	movw	r3, #33075	@ 0x8133
 8007054:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007056:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800705a:	4619      	mov	r1, r3
 800705c:	482c      	ldr	r0, [pc, #176]	@ (8007110 <BSP_SDRAM_MspInit+0x1e0>)
 800705e:	f001 fcf1 	bl	8008a44 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8007062:	2328      	movs	r3, #40	@ 0x28
 8007064:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8007066:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800706a:	4619      	mov	r1, r3
 800706c:	4829      	ldr	r0, [pc, #164]	@ (8007114 <BSP_SDRAM_MspInit+0x1e4>)
 800706e:	f001 fce9 	bl	8008a44 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8007072:	4b29      	ldr	r3, [pc, #164]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 8007074:	2200      	movs	r2, #0
 8007076:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007078:	4b27      	ldr	r3, [pc, #156]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 800707a:	2280      	movs	r2, #128	@ 0x80
 800707c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800707e:	4b26      	ldr	r3, [pc, #152]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 8007080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007084:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8007086:	4b24      	ldr	r3, [pc, #144]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 8007088:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800708c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800708e:	4b22      	ldr	r3, [pc, #136]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 8007090:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007094:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8007096:	4b20      	ldr	r3, [pc, #128]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 8007098:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800709c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800709e:	4b1e      	ldr	r3, [pc, #120]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80070a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 80070a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80070aa:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80070ac:	4b1a      	ldr	r3, [pc, #104]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80070b2:	4b19      	ldr	r3, [pc, #100]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 80070b4:	2203      	movs	r2, #3
 80070b6:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80070b8:	4b17      	ldr	r3, [pc, #92]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80070be:	4b16      	ldr	r3, [pc, #88]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80070c4:	4b14      	ldr	r3, [pc, #80]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 80070c6:	4a15      	ldr	r2, [pc, #84]	@ (800711c <BSP_SDRAM_MspInit+0x1ec>)
 80070c8:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a12      	ldr	r2, [pc, #72]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 80070ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80070d0:	4a11      	ldr	r2, [pc, #68]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80070d6:	4810      	ldr	r0, [pc, #64]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 80070d8:	f001 f918 	bl	800830c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80070dc:	480e      	ldr	r0, [pc, #56]	@ (8007118 <BSP_SDRAM_MspInit+0x1e8>)
 80070de:	f001 f867 	bl	80081b0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80070e2:	2200      	movs	r2, #0
 80070e4:	210f      	movs	r1, #15
 80070e6:	2038      	movs	r0, #56	@ 0x38
 80070e8:	f001 f82b 	bl	8008142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80070ec:	2038      	movs	r0, #56	@ 0x38
 80070ee:	f001 f844 	bl	800817a <HAL_NVIC_EnableIRQ>
}
 80070f2:	bf00      	nop
 80070f4:	3740      	adds	r7, #64	@ 0x40
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40023800 	.word	0x40023800
 8007100:	40020800 	.word	0x40020800
 8007104:	40020c00 	.word	0x40020c00
 8007108:	40021000 	.word	0x40021000
 800710c:	40021400 	.word	0x40021400
 8007110:	40021800 	.word	0x40021800
 8007114:	40021c00 	.word	0x40021c00
 8007118:	20006138 	.word	0x20006138
 800711c:	40026410 	.word	0x40026410

08007120 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	460a      	mov	r2, r1
 800712a:	80fb      	strh	r3, [r7, #6]
 800712c:	4613      	mov	r3, r2
 800712e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8007134:	4a14      	ldr	r2, [pc, #80]	@ (8007188 <BSP_TS_Init+0x68>)
 8007136:	88fb      	ldrh	r3, [r7, #6]
 8007138:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800713a:	4a14      	ldr	r2, [pc, #80]	@ (800718c <BSP_TS_Init+0x6c>)
 800713c:	88bb      	ldrh	r3, [r7, #4]
 800713e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8007140:	4b13      	ldr	r3, [pc, #76]	@ (8007190 <BSP_TS_Init+0x70>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2070      	movs	r0, #112	@ 0x70
 8007146:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007148:	4b11      	ldr	r3, [pc, #68]	@ (8007190 <BSP_TS_Init+0x70>)
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	2070      	movs	r0, #112	@ 0x70
 800714e:	4798      	blx	r3
 8007150:	4603      	mov	r3, r0
 8007152:	2b51      	cmp	r3, #81	@ 0x51
 8007154:	d110      	bne.n	8007178 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8007156:	4b0f      	ldr	r3, [pc, #60]	@ (8007194 <BSP_TS_Init+0x74>)
 8007158:	4a0d      	ldr	r2, [pc, #52]	@ (8007190 <BSP_TS_Init+0x70>)
 800715a:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 800715c:	4b0e      	ldr	r3, [pc, #56]	@ (8007198 <BSP_TS_Init+0x78>)
 800715e:	2270      	movs	r2, #112	@ 0x70
 8007160:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8007162:	4b0e      	ldr	r3, [pc, #56]	@ (800719c <BSP_TS_Init+0x7c>)
 8007164:	2208      	movs	r2, #8
 8007166:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007168:	4b0a      	ldr	r3, [pc, #40]	@ (8007194 <BSP_TS_Init+0x74>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	4a0a      	ldr	r2, [pc, #40]	@ (8007198 <BSP_TS_Init+0x78>)
 8007170:	7812      	ldrb	r2, [r2, #0]
 8007172:	4610      	mov	r0, r2
 8007174:	4798      	blx	r3
 8007176:	e001      	b.n	800717c <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8007178:	2303      	movs	r3, #3
 800717a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800717c:	7bfb      	ldrb	r3, [r7, #15]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	2000619c 	.word	0x2000619c
 800718c:	2000619e 	.word	0x2000619e
 8007190:	20004ed4 	.word	0x20004ed4
 8007194:	20006198 	.word	0x20006198
 8007198:	200061a1 	.word	0x200061a1
 800719c:	200061a0 	.word	0x200061a0

080071a0 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80071a0:	b590      	push	{r4, r7, lr}
 80071a2:	b097      	sub	sp, #92	@ 0x5c
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80071ba:	4bb8      	ldr	r3, [pc, #736]	@ (800749c <BSP_TS_GetState+0x2fc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	4ab7      	ldr	r2, [pc, #732]	@ (80074a0 <BSP_TS_GetState+0x300>)
 80071c2:	7812      	ldrb	r2, [r2, #0]
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	4603      	mov	r3, r0
 80071ca:	461a      	mov	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8198 	beq.w	800750a <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80071da:	2300      	movs	r3, #0
 80071dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80071de:	e187      	b.n	80074f0 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80071e0:	4bae      	ldr	r3, [pc, #696]	@ (800749c <BSP_TS_GetState+0x2fc>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	4aae      	ldr	r2, [pc, #696]	@ (80074a0 <BSP_TS_GetState+0x300>)
 80071e8:	7812      	ldrb	r2, [r2, #0]
 80071ea:	4614      	mov	r4, r2
 80071ec:	f107 0120 	add.w	r1, r7, #32
 80071f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071f2:	0052      	lsls	r2, r2, #1
 80071f4:	1888      	adds	r0, r1, r2
 80071f6:	f107 0114 	add.w	r1, r7, #20
 80071fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071fc:	0052      	lsls	r2, r2, #1
 80071fe:	440a      	add	r2, r1
 8007200:	4601      	mov	r1, r0
 8007202:	4620      	mov	r0, r4
 8007204:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8007206:	4ba7      	ldr	r3, [pc, #668]	@ (80074a4 <BSP_TS_GetState+0x304>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d117      	bne.n	800723e <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 800720e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007210:	005b      	lsls	r3, r3, #1
 8007212:	3350      	adds	r3, #80	@ 0x50
 8007214:	443b      	add	r3, r7
 8007216:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800721a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	3350      	adds	r3, #80	@ 0x50
 8007220:	443b      	add	r3, r7
 8007222:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8007226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	3350      	adds	r3, #80	@ 0x50
 800722c:	443b      	add	r3, r7
 800722e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8007232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	3350      	adds	r3, #80	@ 0x50
 8007238:	443b      	add	r3, r7
 800723a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800723e:	4b99      	ldr	r3, [pc, #612]	@ (80074a4 <BSP_TS_GetState+0x304>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	f003 0302 	and.w	r3, r3, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00e      	beq.n	8007268 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 800724a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	3350      	adds	r3, #80	@ 0x50
 8007250:	443b      	add	r3, r7
 8007252:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8007256:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800725a:	b29a      	uxth	r2, r3
 800725c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	3350      	adds	r3, #80	@ 0x50
 8007262:	443b      	add	r3, r7
 8007264:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8007268:	4b8e      	ldr	r3, [pc, #568]	@ (80074a4 <BSP_TS_GetState+0x304>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00e      	beq.n	8007292 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8007274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	3350      	adds	r3, #80	@ 0x50
 800727a:	443b      	add	r3, r7
 800727c:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8007280:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007284:	b29a      	uxth	r2, r3
 8007286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007288:	005b      	lsls	r3, r3, #1
 800728a:	3350      	adds	r3, #80	@ 0x50
 800728c:	443b      	add	r3, r7
 800728e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8007292:	4b84      	ldr	r3, [pc, #528]	@ (80074a4 <BSP_TS_GetState+0x304>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b00      	cmp	r3, #0
 800729c:	d017      	beq.n	80072ce <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 800729e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072a0:	005b      	lsls	r3, r3, #1
 80072a2:	3350      	adds	r3, #80	@ 0x50
 80072a4:	443b      	add	r3, r7
 80072a6:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80072aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	3350      	adds	r3, #80	@ 0x50
 80072b0:	443b      	add	r3, r7
 80072b2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80072b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	3350      	adds	r3, #80	@ 0x50
 80072bc:	443b      	add	r3, r7
 80072be:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80072c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	3350      	adds	r3, #80	@ 0x50
 80072c8:	443b      	add	r3, r7
 80072ca:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80072ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	3350      	adds	r3, #80	@ 0x50
 80072d4:	443b      	add	r3, r7
 80072d6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80072da:	4619      	mov	r1, r3
 80072dc:	4a72      	ldr	r2, [pc, #456]	@ (80074a8 <BSP_TS_GetState+0x308>)
 80072de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072e4:	4299      	cmp	r1, r3
 80072e6:	d90d      	bls.n	8007304 <BSP_TS_GetState+0x164>
 80072e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	3350      	adds	r3, #80	@ 0x50
 80072ee:	443b      	add	r3, r7
 80072f0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80072f4:	496c      	ldr	r1, [pc, #432]	@ (80074a8 <BSP_TS_GetState+0x308>)
 80072f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	b29b      	uxth	r3, r3
 8007302:	e00c      	b.n	800731e <BSP_TS_GetState+0x17e>
 8007304:	4a68      	ldr	r2, [pc, #416]	@ (80074a8 <BSP_TS_GetState+0x308>)
 8007306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800730c:	b29a      	uxth	r2, r3
 800730e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	3350      	adds	r3, #80	@ 0x50
 8007314:	443b      	add	r3, r7
 8007316:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	b29b      	uxth	r3, r3
 800731e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8007322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	3350      	adds	r3, #80	@ 0x50
 8007328:	443b      	add	r3, r7
 800732a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800732e:	4619      	mov	r1, r3
 8007330:	4a5e      	ldr	r2, [pc, #376]	@ (80074ac <BSP_TS_GetState+0x30c>)
 8007332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007338:	4299      	cmp	r1, r3
 800733a:	d90d      	bls.n	8007358 <BSP_TS_GetState+0x1b8>
 800733c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	3350      	adds	r3, #80	@ 0x50
 8007342:	443b      	add	r3, r7
 8007344:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8007348:	4958      	ldr	r1, [pc, #352]	@ (80074ac <BSP_TS_GetState+0x30c>)
 800734a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800734c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007350:	b29b      	uxth	r3, r3
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	b29b      	uxth	r3, r3
 8007356:	e00c      	b.n	8007372 <BSP_TS_GetState+0x1d2>
 8007358:	4a54      	ldr	r2, [pc, #336]	@ (80074ac <BSP_TS_GetState+0x30c>)
 800735a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800735c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007360:	b29a      	uxth	r2, r3
 8007362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	3350      	adds	r3, #80	@ 0x50
 8007368:	443b      	add	r3, r7
 800736a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	b29b      	uxth	r3, r3
 8007372:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 8007376:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800737a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800737e:	4413      	add	r3, r2
 8007380:	2b05      	cmp	r3, #5
 8007382:	dd15      	ble.n	80073b0 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8007384:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	3350      	adds	r3, #80	@ 0x50
 800738a:	443b      	add	r3, r7
 800738c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007390:	4619      	mov	r1, r3
 8007392:	4a45      	ldr	r2, [pc, #276]	@ (80074a8 <BSP_TS_GetState+0x308>)
 8007394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007396:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800739a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	3350      	adds	r3, #80	@ 0x50
 80073a0:	443b      	add	r3, r7
 80073a2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80073a6:	4619      	mov	r1, r3
 80073a8:	4a40      	ldr	r2, [pc, #256]	@ (80074ac <BSP_TS_GetState+0x30c>)
 80073aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80073b0:	4b3b      	ldr	r3, [pc, #236]	@ (80074a0 <BSP_TS_GetState+0x300>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b70      	cmp	r3, #112	@ 0x70
 80073b6:	d119      	bne.n	80073ec <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 80073b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073ba:	005b      	lsls	r3, r3, #1
 80073bc:	3350      	adds	r3, #80	@ 0x50
 80073be:	443b      	add	r3, r7
 80073c0:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4413      	add	r3, r2
 80073cc:	460a      	mov	r2, r1
 80073ce:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80073d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	3350      	adds	r3, #80	@ 0x50
 80073d6:	443b      	add	r3, r7
 80073d8:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073e0:	3304      	adds	r3, #4
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	4413      	add	r3, r2
 80073e6:	460a      	mov	r2, r1
 80073e8:	809a      	strh	r2, [r3, #4]
 80073ea:	e022      	b.n	8007432 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80073ec:	4b30      	ldr	r3, [pc, #192]	@ (80074b0 <BSP_TS_GetState+0x310>)
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	4619      	mov	r1, r3
 80073f2:	4a2d      	ldr	r2, [pc, #180]	@ (80074a8 <BSP_TS_GetState+0x308>)
 80073f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073fa:	fb01 f303 	mul.w	r3, r1, r3
 80073fe:	0b1b      	lsrs	r3, r3, #12
 8007400:	b299      	uxth	r1, r3
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007406:	005b      	lsls	r3, r3, #1
 8007408:	4413      	add	r3, r2
 800740a:	460a      	mov	r2, r1
 800740c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800740e:	4b29      	ldr	r3, [pc, #164]	@ (80074b4 <BSP_TS_GetState+0x314>)
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	4619      	mov	r1, r3
 8007414:	4a25      	ldr	r2, [pc, #148]	@ (80074ac <BSP_TS_GetState+0x30c>)
 8007416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800741c:	fb01 f303 	mul.w	r3, r1, r3
 8007420:	0b1b      	lsrs	r3, r3, #12
 8007422:	b299      	uxth	r1, r3
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007428:	3304      	adds	r3, #4
 800742a:	005b      	lsls	r3, r3, #1
 800742c:	4413      	add	r3, r2
 800742e:	460a      	mov	r2, r1
 8007430:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8007432:	4b1b      	ldr	r3, [pc, #108]	@ (80074a0 <BSP_TS_GetState+0x300>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	4618      	mov	r0, r3
 8007438:	f107 010c 	add.w	r1, r7, #12
 800743c:	f107 0210 	add.w	r2, r7, #16
 8007440:	f107 0308 	add.w	r3, r7, #8
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	460b      	mov	r3, r1
 8007448:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800744a:	f7fe f877 	bl	800553c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	b2d9      	uxtb	r1, r3
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007456:	4413      	add	r3, r2
 8007458:	3316      	adds	r3, #22
 800745a:	460a      	mov	r2, r1
 800745c:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	b2d9      	uxtb	r1, r3
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007466:	4413      	add	r3, r2
 8007468:	3320      	adds	r3, #32
 800746a:	460a      	mov	r2, r1
 800746c:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2b03      	cmp	r3, #3
 8007472:	d836      	bhi.n	80074e2 <BSP_TS_GetState+0x342>
 8007474:	a201      	add	r2, pc, #4	@ (adr r2, 800747c <BSP_TS_GetState+0x2dc>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	0800748d 	.word	0x0800748d
 8007480:	080074b9 	.word	0x080074b9
 8007484:	080074c7 	.word	0x080074c7
 8007488:	080074d5 	.word	0x080074d5
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007490:	4413      	add	r3, r2
 8007492:	331b      	adds	r3, #27
 8007494:	2201      	movs	r2, #1
 8007496:	701a      	strb	r2, [r3, #0]
          break;
 8007498:	e027      	b.n	80074ea <BSP_TS_GetState+0x34a>
 800749a:	bf00      	nop
 800749c:	20006198 	.word	0x20006198
 80074a0:	200061a1 	.word	0x200061a1
 80074a4:	200061a0 	.word	0x200061a0
 80074a8:	200061a4 	.word	0x200061a4
 80074ac:	200061b8 	.word	0x200061b8
 80074b0:	2000619c 	.word	0x2000619c
 80074b4:	2000619e 	.word	0x2000619e
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80074b8:	687a      	ldr	r2, [r7, #4]
 80074ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074bc:	4413      	add	r3, r2
 80074be:	331b      	adds	r3, #27
 80074c0:	2202      	movs	r2, #2
 80074c2:	701a      	strb	r2, [r3, #0]
          break;
 80074c4:	e011      	b.n	80074ea <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074ca:	4413      	add	r3, r2
 80074cc:	331b      	adds	r3, #27
 80074ce:	2203      	movs	r2, #3
 80074d0:	701a      	strb	r2, [r3, #0]
          break;
 80074d2:	e00a      	b.n	80074ea <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074d8:	4413      	add	r3, r2
 80074da:	331b      	adds	r3, #27
 80074dc:	2200      	movs	r2, #0
 80074de:	701a      	strb	r2, [r3, #0]
          break;
 80074e0:	e003      	b.n	80074ea <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 80074e8:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 80074ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074ec:	3301      	adds	r3, #1
 80074ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074f8:	4293      	cmp	r3, r2
 80074fa:	f4ff ae71 	bcc.w	80071e0 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f80a 	bl	8007518 <BSP_TS_Get_GestureId>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800750a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800750e:	4618      	mov	r0, r3
 8007510:	3754      	adds	r7, #84	@ 0x54
 8007512:	46bd      	mov	sp, r7
 8007514:	bd90      	pop	{r4, r7, pc}
 8007516:	bf00      	nop

08007518 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8007520:	2300      	movs	r3, #0
 8007522:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8007528:	4b3b      	ldr	r3, [pc, #236]	@ (8007618 <BSP_TS_Get_GestureId+0x100>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	f107 0308 	add.w	r3, r7, #8
 8007532:	4619      	mov	r1, r3
 8007534:	4610      	mov	r0, r2
 8007536:	f7fd ffe8 	bl	800550a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b49      	cmp	r3, #73	@ 0x49
 800753e:	d05e      	beq.n	80075fe <BSP_TS_Get_GestureId+0xe6>
 8007540:	2b49      	cmp	r3, #73	@ 0x49
 8007542:	d860      	bhi.n	8007606 <BSP_TS_Get_GestureId+0xee>
 8007544:	2b1c      	cmp	r3, #28
 8007546:	d83f      	bhi.n	80075c8 <BSP_TS_Get_GestureId+0xb0>
 8007548:	2b1c      	cmp	r3, #28
 800754a:	d85c      	bhi.n	8007606 <BSP_TS_Get_GestureId+0xee>
 800754c:	a201      	add	r2, pc, #4	@ (adr r2, 8007554 <BSP_TS_Get_GestureId+0x3c>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	080075cf 	.word	0x080075cf
 8007558:	08007607 	.word	0x08007607
 800755c:	08007607 	.word	0x08007607
 8007560:	08007607 	.word	0x08007607
 8007564:	08007607 	.word	0x08007607
 8007568:	08007607 	.word	0x08007607
 800756c:	08007607 	.word	0x08007607
 8007570:	08007607 	.word	0x08007607
 8007574:	08007607 	.word	0x08007607
 8007578:	08007607 	.word	0x08007607
 800757c:	08007607 	.word	0x08007607
 8007580:	08007607 	.word	0x08007607
 8007584:	08007607 	.word	0x08007607
 8007588:	08007607 	.word	0x08007607
 800758c:	08007607 	.word	0x08007607
 8007590:	08007607 	.word	0x08007607
 8007594:	080075d7 	.word	0x080075d7
 8007598:	08007607 	.word	0x08007607
 800759c:	08007607 	.word	0x08007607
 80075a0:	08007607 	.word	0x08007607
 80075a4:	080075df 	.word	0x080075df
 80075a8:	08007607 	.word	0x08007607
 80075ac:	08007607 	.word	0x08007607
 80075b0:	08007607 	.word	0x08007607
 80075b4:	080075e7 	.word	0x080075e7
 80075b8:	08007607 	.word	0x08007607
 80075bc:	08007607 	.word	0x08007607
 80075c0:	08007607 	.word	0x08007607
 80075c4:	080075ef 	.word	0x080075ef
 80075c8:	2b40      	cmp	r3, #64	@ 0x40
 80075ca:	d014      	beq.n	80075f6 <BSP_TS_Get_GestureId+0xde>
 80075cc:	e01b      	b.n	8007606 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80075d4:	e01a      	b.n	800760c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80075dc:	e016      	b.n	800760c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2202      	movs	r2, #2
 80075e2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80075e4:	e012      	b.n	800760c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2203      	movs	r2, #3
 80075ea:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80075ec:	e00e      	b.n	800760c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2204      	movs	r2, #4
 80075f2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80075f4:	e00a      	b.n	800760c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2205      	movs	r2, #5
 80075fa:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 80075fc:	e006      	b.n	800760c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2206      	movs	r2, #6
 8007602:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8007604:	e002      	b.n	800760c <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	73fb      	strb	r3, [r7, #15]
      break;
 800760a:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200061a1 	.word	0x200061a1

0800761c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8007620:	4b08      	ldr	r3, [pc, #32]	@ (8007644 <HAL_Init+0x28>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a07      	ldr	r2, [pc, #28]	@ (8007644 <HAL_Init+0x28>)
 8007626:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800762a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800762c:	2003      	movs	r0, #3
 800762e:	f000 fd7d 	bl	800812c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007632:	2000      	movs	r0, #0
 8007634:	f000 f808 	bl	8007648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007638:	f7fd f9a8 	bl	800498c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	40023c00 	.word	0x40023c00

08007648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007650:	4b12      	ldr	r3, [pc, #72]	@ (800769c <HAL_InitTick+0x54>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	4b12      	ldr	r3, [pc, #72]	@ (80076a0 <HAL_InitTick+0x58>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	4619      	mov	r1, r3
 800765a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800765e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007662:	fbb2 f3f3 	udiv	r3, r2, r3
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fd95 	bl	8008196 <HAL_SYSTICK_Config>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e00e      	b.n	8007694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b0f      	cmp	r3, #15
 800767a:	d80a      	bhi.n	8007692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800767c:	2200      	movs	r2, #0
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	f04f 30ff 	mov.w	r0, #4294967295
 8007684:	f000 fd5d 	bl	8008142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007688:	4a06      	ldr	r2, [pc, #24]	@ (80076a4 <HAL_InitTick+0x5c>)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800768e:	2300      	movs	r3, #0
 8007690:	e000      	b.n	8007694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
}
 8007694:	4618      	mov	r0, r3
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	20004ed0 	.word	0x20004ed0
 80076a0:	20004f24 	.word	0x20004f24
 80076a4:	20004f20 	.word	0x20004f20

080076a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <HAL_IncTick+0x20>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	4b06      	ldr	r3, [pc, #24]	@ (80076cc <HAL_IncTick+0x24>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4413      	add	r3, r2
 80076b8:	4a04      	ldr	r2, [pc, #16]	@ (80076cc <HAL_IncTick+0x24>)
 80076ba:	6013      	str	r3, [r2, #0]
}
 80076bc:	bf00      	nop
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	20004f24 	.word	0x20004f24
 80076cc:	200061cc 	.word	0x200061cc

080076d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  return uwTick;
 80076d4:	4b03      	ldr	r3, [pc, #12]	@ (80076e4 <HAL_GetTick+0x14>)
 80076d6:	681b      	ldr	r3, [r3, #0]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	200061cc 	.word	0x200061cc

080076e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80076f0:	f7ff ffee 	bl	80076d0 <HAL_GetTick>
 80076f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007700:	d005      	beq.n	800770e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007702:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <HAL_Delay+0x44>)
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800770e:	bf00      	nop
 8007710:	f7ff ffde 	bl	80076d0 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	429a      	cmp	r2, r3
 800771e:	d8f7      	bhi.n	8007710 <HAL_Delay+0x28>
  {
  }
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20004f24 	.word	0x20004f24

08007730 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e031      	b.n	80077aa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774a:	2b00      	cmp	r3, #0
 800774c:	d109      	bne.n	8007762 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fb fb5e 	bl	8002e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	2b00      	cmp	r3, #0
 800776c:	d116      	bne.n	800779c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007772:	4b10      	ldr	r3, [pc, #64]	@ (80077b4 <HAL_ADC_Init+0x84>)
 8007774:	4013      	ands	r3, r2
 8007776:	f043 0202 	orr.w	r2, r3, #2
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fb0a 	bl	8007d98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778e:	f023 0303 	bic.w	r3, r3, #3
 8007792:	f043 0201 	orr.w	r2, r3, #1
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	641a      	str	r2, [r3, #64]	@ 0x40
 800779a:	e001      	b.n	80077a0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	ffffeefd 	.word	0xffffeefd

080077b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d101      	bne.n	80077d2 <HAL_ADC_Start+0x1a>
 80077ce:	2302      	movs	r3, #2
 80077d0:	e0ad      	b.n	800792e <HAL_ADC_Start+0x176>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d018      	beq.n	800781a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0201 	orr.w	r2, r2, #1
 80077f6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80077f8:	4b50      	ldr	r3, [pc, #320]	@ (800793c <HAL_ADC_Start+0x184>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a50      	ldr	r2, [pc, #320]	@ (8007940 <HAL_ADC_Start+0x188>)
 80077fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007802:	0c9a      	lsrs	r2, r3, #18
 8007804:	4613      	mov	r3, r2
 8007806:	005b      	lsls	r3, r3, #1
 8007808:	4413      	add	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800780c:	e002      	b.n	8007814 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3b01      	subs	r3, #1
 8007812:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1f9      	bne.n	800780e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b01      	cmp	r3, #1
 8007826:	d175      	bne.n	8007914 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800782c:	4b45      	ldr	r3, [pc, #276]	@ (8007944 <HAL_ADC_Start+0x18c>)
 800782e:	4013      	ands	r3, r2
 8007830:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007842:	2b00      	cmp	r3, #0
 8007844:	d007      	beq.n	8007856 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800784e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800785e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007862:	d106      	bne.n	8007872 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007868:	f023 0206 	bic.w	r2, r3, #6
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	645a      	str	r2, [r3, #68]	@ 0x44
 8007870:	e002      	b.n	8007878 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007888:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800788a:	4b2f      	ldr	r3, [pc, #188]	@ (8007948 <HAL_ADC_Start+0x190>)
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	f003 031f 	and.w	r3, r3, #31
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10f      	bne.n	80078b6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d143      	bne.n	800792c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80078b2:	609a      	str	r2, [r3, #8]
 80078b4:	e03a      	b.n	800792c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a24      	ldr	r2, [pc, #144]	@ (800794c <HAL_ADC_Start+0x194>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d10e      	bne.n	80078de <HAL_ADC_Start+0x126>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d107      	bne.n	80078de <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80078dc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80078de:	4b1a      	ldr	r3, [pc, #104]	@ (8007948 <HAL_ADC_Start+0x190>)
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f003 0310 	and.w	r3, r3, #16
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d120      	bne.n	800792c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a18      	ldr	r2, [pc, #96]	@ (8007950 <HAL_ADC_Start+0x198>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d11b      	bne.n	800792c <HAL_ADC_Start+0x174>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d114      	bne.n	800792c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007910:	609a      	str	r2, [r3, #8]
 8007912:	e00b      	b.n	800792c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007918:	f043 0210 	orr.w	r2, r3, #16
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007924:	f043 0201 	orr.w	r2, r3, #1
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
 800793a:	bf00      	nop
 800793c:	20004ed0 	.word	0x20004ed0
 8007940:	431bde83 	.word	0x431bde83
 8007944:	fffff8fe 	.word	0xfffff8fe
 8007948:	40012300 	.word	0x40012300
 800794c:	40012000 	.word	0x40012000
 8007950:	40012200 	.word	0x40012200

08007954 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_ADC_Stop+0x16>
 8007966:	2302      	movs	r3, #2
 8007968:	e01f      	b.n	80079aa <HAL_ADC_Stop+0x56>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f022 0201 	bic.w	r2, r2, #1
 8007980:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d107      	bne.n	80079a0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007994:	4b08      	ldr	r3, [pc, #32]	@ (80079b8 <HAL_ADC_Stop+0x64>)
 8007996:	4013      	ands	r3, r2
 8007998:	f043 0201 	orr.w	r2, r3, #1
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	ffffeefe 	.word	0xffffeefe

080079bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80079c6:	2300      	movs	r3, #0
 80079c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d8:	d113      	bne.n	8007a02 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80079e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079e8:	d10b      	bne.n	8007a02 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079ee:	f043 0220 	orr.w	r2, r3, #32
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e063      	b.n	8007aca <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007a02:	f7ff fe65 	bl	80076d0 <HAL_GetTick>
 8007a06:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007a08:	e021      	b.n	8007a4e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d01d      	beq.n	8007a4e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d007      	beq.n	8007a28 <HAL_ADC_PollForConversion+0x6c>
 8007a18:	f7ff fe5a 	bl	80076d0 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d212      	bcs.n	8007a4e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d00b      	beq.n	8007a4e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3a:	f043 0204 	orr.w	r2, r3, #4
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e03d      	b.n	8007aca <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d1d6      	bne.n	8007a0a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0212 	mvn.w	r2, #18
 8007a64:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d123      	bne.n	8007ac8 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d11f      	bne.n	8007ac8 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d006      	beq.n	8007aa4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d111      	bne.n	8007ac8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d105      	bne.n	8007ac8 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac0:	f043 0201 	orr.w	r2, r3, #1
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_ADC_ConfigChannel+0x1c>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e136      	b.n	8007d76 <HAL_ADC_ConfigChannel+0x28a>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2b09      	cmp	r3, #9
 8007b16:	d93a      	bls.n	8007b8e <HAL_ADC_ConfigChannel+0xa2>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b20:	d035      	beq.n	8007b8e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68d9      	ldr	r1, [r3, #12]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	461a      	mov	r2, r3
 8007b30:	4613      	mov	r3, r2
 8007b32:	005b      	lsls	r3, r3, #1
 8007b34:	4413      	add	r3, r2
 8007b36:	3b1e      	subs	r3, #30
 8007b38:	2207      	movs	r2, #7
 8007b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3e:	43da      	mvns	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	400a      	ands	r2, r1
 8007b46:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a8d      	ldr	r2, [pc, #564]	@ (8007d84 <HAL_ADC_ConfigChannel+0x298>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d10a      	bne.n	8007b68 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	68d9      	ldr	r1, [r3, #12]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	061a      	lsls	r2, r3, #24
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	430a      	orrs	r2, r1
 8007b64:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b66:	e035      	b.n	8007bd4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68d9      	ldr	r1, [r3, #12]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	689a      	ldr	r2, [r3, #8]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	4618      	mov	r0, r3
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	4403      	add	r3, r0
 8007b80:	3b1e      	subs	r3, #30
 8007b82:	409a      	lsls	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b8c:	e022      	b.n	8007bd4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6919      	ldr	r1, [r3, #16]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	4413      	add	r3, r2
 8007ba2:	2207      	movs	r2, #7
 8007ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba8:	43da      	mvns	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	400a      	ands	r2, r1
 8007bb0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6919      	ldr	r1, [r3, #16]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	689a      	ldr	r2, [r3, #8]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	4403      	add	r3, r0
 8007bca:	409a      	lsls	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	2b06      	cmp	r3, #6
 8007bda:	d824      	bhi.n	8007c26 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	3b05      	subs	r3, #5
 8007bee:	221f      	movs	r2, #31
 8007bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf4:	43da      	mvns	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	400a      	ands	r2, r1
 8007bfc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	3b05      	subs	r3, #5
 8007c18:	fa00 f203 	lsl.w	r2, r0, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	635a      	str	r2, [r3, #52]	@ 0x34
 8007c24:	e04c      	b.n	8007cc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2b0c      	cmp	r3, #12
 8007c2c:	d824      	bhi.n	8007c78 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	3b23      	subs	r3, #35	@ 0x23
 8007c40:	221f      	movs	r2, #31
 8007c42:	fa02 f303 	lsl.w	r3, r2, r3
 8007c46:	43da      	mvns	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	400a      	ands	r2, r1
 8007c4e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	3b23      	subs	r3, #35	@ 0x23
 8007c6a:	fa00 f203 	lsl.w	r2, r0, r3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c76:	e023      	b.n	8007cc0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	3b41      	subs	r3, #65	@ 0x41
 8007c8a:	221f      	movs	r2, #31
 8007c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c90:	43da      	mvns	r2, r3
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	400a      	ands	r2, r1
 8007c98:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	4613      	mov	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	3b41      	subs	r3, #65	@ 0x41
 8007cb4:	fa00 f203 	lsl.w	r2, r0, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a30      	ldr	r2, [pc, #192]	@ (8007d88 <HAL_ADC_ConfigChannel+0x29c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d10a      	bne.n	8007ce0 <HAL_ADC_ConfigChannel+0x1f4>
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007cd2:	d105      	bne.n	8007ce0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8007d8c <HAL_ADC_ConfigChannel+0x2a0>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8007d8c <HAL_ADC_ConfigChannel+0x2a0>)
 8007cda:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8007cde:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a28      	ldr	r2, [pc, #160]	@ (8007d88 <HAL_ADC_ConfigChannel+0x29c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d10f      	bne.n	8007d0a <HAL_ADC_ConfigChannel+0x21e>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b12      	cmp	r3, #18
 8007cf0:	d10b      	bne.n	8007d0a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8007cf2:	4b26      	ldr	r3, [pc, #152]	@ (8007d8c <HAL_ADC_ConfigChannel+0x2a0>)
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	4a25      	ldr	r2, [pc, #148]	@ (8007d8c <HAL_ADC_ConfigChannel+0x2a0>)
 8007cf8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007cfc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007cfe:	4b23      	ldr	r3, [pc, #140]	@ (8007d8c <HAL_ADC_ConfigChannel+0x2a0>)
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	4a22      	ldr	r2, [pc, #136]	@ (8007d8c <HAL_ADC_ConfigChannel+0x2a0>)
 8007d04:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007d08:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8007d88 <HAL_ADC_ConfigChannel+0x29c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d12b      	bne.n	8007d6c <HAL_ADC_ConfigChannel+0x280>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a1a      	ldr	r2, [pc, #104]	@ (8007d84 <HAL_ADC_ConfigChannel+0x298>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d003      	beq.n	8007d26 <HAL_ADC_ConfigChannel+0x23a>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b11      	cmp	r3, #17
 8007d24:	d122      	bne.n	8007d6c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8007d26:	4b19      	ldr	r3, [pc, #100]	@ (8007d8c <HAL_ADC_ConfigChannel+0x2a0>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	4a18      	ldr	r2, [pc, #96]	@ (8007d8c <HAL_ADC_ConfigChannel+0x2a0>)
 8007d2c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8007d30:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007d32:	4b16      	ldr	r3, [pc, #88]	@ (8007d8c <HAL_ADC_ConfigChannel+0x2a0>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	4a15      	ldr	r2, [pc, #84]	@ (8007d8c <HAL_ADC_ConfigChannel+0x2a0>)
 8007d38:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007d3c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a10      	ldr	r2, [pc, #64]	@ (8007d84 <HAL_ADC_ConfigChannel+0x298>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d111      	bne.n	8007d6c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007d48:	4b11      	ldr	r3, [pc, #68]	@ (8007d90 <HAL_ADC_ConfigChannel+0x2a4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a11      	ldr	r2, [pc, #68]	@ (8007d94 <HAL_ADC_ConfigChannel+0x2a8>)
 8007d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d52:	0c9a      	lsrs	r2, r3, #18
 8007d54:	4613      	mov	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007d5e:	e002      	b.n	8007d66 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1f9      	bne.n	8007d60 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	10000012 	.word	0x10000012
 8007d88:	40012000 	.word	0x40012000
 8007d8c:	40012300 	.word	0x40012300
 8007d90:	20004ed0 	.word	0x20004ed0
 8007d94:	431bde83 	.word	0x431bde83

08007d98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007da0:	4b78      	ldr	r3, [pc, #480]	@ (8007f84 <ADC_Init+0x1ec>)
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	4a77      	ldr	r2, [pc, #476]	@ (8007f84 <ADC_Init+0x1ec>)
 8007da6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8007daa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007dac:	4b75      	ldr	r3, [pc, #468]	@ (8007f84 <ADC_Init+0x1ec>)
 8007dae:	685a      	ldr	r2, [r3, #4]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	4973      	ldr	r1, [pc, #460]	@ (8007f84 <ADC_Init+0x1ec>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6859      	ldr	r1, [r3, #4]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	691b      	ldr	r3, [r3, #16]
 8007dd4:	021a      	lsls	r2, r3, #8
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	6859      	ldr	r1, [r3, #4]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689a      	ldr	r2, [r3, #8]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6899      	ldr	r1, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	68da      	ldr	r2, [r3, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e26:	4a58      	ldr	r2, [pc, #352]	@ (8007f88 <ADC_Init+0x1f0>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d022      	beq.n	8007e72 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	6899      	ldr	r1, [r3, #8]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6899      	ldr	r1, [r3, #8]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	609a      	str	r2, [r3, #8]
 8007e70:	e00f      	b.n	8007e92 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689a      	ldr	r2, [r3, #8]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8007e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f022 0202 	bic.w	r2, r2, #2
 8007ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6899      	ldr	r1, [r3, #8]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	005a      	lsls	r2, r3, #1
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01b      	beq.n	8007ef8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8007ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6859      	ldr	r1, [r3, #4]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eea:	3b01      	subs	r3, #1
 8007eec:	035a      	lsls	r2, r3, #13
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
 8007ef6:	e007      	b.n	8007f08 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8007f16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	3b01      	subs	r3, #1
 8007f24:	051a      	lsls	r2, r3, #20
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	689a      	ldr	r2, [r3, #8]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6899      	ldr	r1, [r3, #8]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007f4a:	025a      	lsls	r2, r3, #9
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	689a      	ldr	r2, [r3, #8]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	6899      	ldr	r1, [r3, #8]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	029a      	lsls	r2, r3, #10
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	430a      	orrs	r2, r1
 8007f76:	609a      	str	r2, [r3, #8]
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	40012300 	.word	0x40012300
 8007f88:	0f000001 	.word	0x0f000001

08007f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007fcc <__NVIC_SetPriorityGrouping+0x40>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007fa8:	4013      	ands	r3, r2
 8007faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007fb4:	4b06      	ldr	r3, [pc, #24]	@ (8007fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fba:	4a04      	ldr	r2, [pc, #16]	@ (8007fcc <__NVIC_SetPriorityGrouping+0x40>)
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	60d3      	str	r3, [r2, #12]
}
 8007fc0:	bf00      	nop
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	e000ed00 	.word	0xe000ed00
 8007fd0:	05fa0000 	.word	0x05fa0000

08007fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007fd8:	4b04      	ldr	r3, [pc, #16]	@ (8007fec <__NVIC_GetPriorityGrouping+0x18>)
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	0a1b      	lsrs	r3, r3, #8
 8007fde:	f003 0307 	and.w	r3, r3, #7
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr
 8007fec:	e000ed00 	.word	0xe000ed00

08007ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	db0b      	blt.n	800801a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008002:	79fb      	ldrb	r3, [r7, #7]
 8008004:	f003 021f 	and.w	r2, r3, #31
 8008008:	4907      	ldr	r1, [pc, #28]	@ (8008028 <__NVIC_EnableIRQ+0x38>)
 800800a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800800e:	095b      	lsrs	r3, r3, #5
 8008010:	2001      	movs	r0, #1
 8008012:	fa00 f202 	lsl.w	r2, r0, r2
 8008016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	e000e100 	.word	0xe000e100

0800802c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	6039      	str	r1, [r7, #0]
 8008036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800803c:	2b00      	cmp	r3, #0
 800803e:	db0a      	blt.n	8008056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	b2da      	uxtb	r2, r3
 8008044:	490c      	ldr	r1, [pc, #48]	@ (8008078 <__NVIC_SetPriority+0x4c>)
 8008046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800804a:	0112      	lsls	r2, r2, #4
 800804c:	b2d2      	uxtb	r2, r2
 800804e:	440b      	add	r3, r1
 8008050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008054:	e00a      	b.n	800806c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	b2da      	uxtb	r2, r3
 800805a:	4908      	ldr	r1, [pc, #32]	@ (800807c <__NVIC_SetPriority+0x50>)
 800805c:	79fb      	ldrb	r3, [r7, #7]
 800805e:	f003 030f 	and.w	r3, r3, #15
 8008062:	3b04      	subs	r3, #4
 8008064:	0112      	lsls	r2, r2, #4
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	440b      	add	r3, r1
 800806a:	761a      	strb	r2, [r3, #24]
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	e000e100 	.word	0xe000e100
 800807c:	e000ed00 	.word	0xe000ed00

08008080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008080:	b480      	push	{r7}
 8008082:	b089      	sub	sp, #36	@ 0x24
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f003 0307 	and.w	r3, r3, #7
 8008092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	f1c3 0307 	rsb	r3, r3, #7
 800809a:	2b04      	cmp	r3, #4
 800809c:	bf28      	it	cs
 800809e:	2304      	movcs	r3, #4
 80080a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	3304      	adds	r3, #4
 80080a6:	2b06      	cmp	r3, #6
 80080a8:	d902      	bls.n	80080b0 <NVIC_EncodePriority+0x30>
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	3b03      	subs	r3, #3
 80080ae:	e000      	b.n	80080b2 <NVIC_EncodePriority+0x32>
 80080b0:	2300      	movs	r3, #0
 80080b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080b4:	f04f 32ff 	mov.w	r2, #4294967295
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	43da      	mvns	r2, r3
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	401a      	ands	r2, r3
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080c8:	f04f 31ff 	mov.w	r1, #4294967295
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	fa01 f303 	lsl.w	r3, r1, r3
 80080d2:	43d9      	mvns	r1, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080d8:	4313      	orrs	r3, r2
         );
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3724      	adds	r7, #36	@ 0x24
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
	...

080080e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80080f8:	d301      	bcc.n	80080fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80080fa:	2301      	movs	r3, #1
 80080fc:	e00f      	b.n	800811e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008128 <SysTick_Config+0x40>)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3b01      	subs	r3, #1
 8008104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008106:	210f      	movs	r1, #15
 8008108:	f04f 30ff 	mov.w	r0, #4294967295
 800810c:	f7ff ff8e 	bl	800802c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008110:	4b05      	ldr	r3, [pc, #20]	@ (8008128 <SysTick_Config+0x40>)
 8008112:	2200      	movs	r2, #0
 8008114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008116:	4b04      	ldr	r3, [pc, #16]	@ (8008128 <SysTick_Config+0x40>)
 8008118:	2207      	movs	r2, #7
 800811a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800811c:	2300      	movs	r3, #0
}
 800811e:	4618      	mov	r0, r3
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	e000e010 	.word	0xe000e010

0800812c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7ff ff29 	bl	8007f8c <__NVIC_SetPriorityGrouping>
}
 800813a:	bf00      	nop
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}

08008142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008142:	b580      	push	{r7, lr}
 8008144:	b086      	sub	sp, #24
 8008146:	af00      	add	r7, sp, #0
 8008148:	4603      	mov	r3, r0
 800814a:	60b9      	str	r1, [r7, #8]
 800814c:	607a      	str	r2, [r7, #4]
 800814e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008150:	2300      	movs	r3, #0
 8008152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008154:	f7ff ff3e 	bl	8007fd4 <__NVIC_GetPriorityGrouping>
 8008158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	68b9      	ldr	r1, [r7, #8]
 800815e:	6978      	ldr	r0, [r7, #20]
 8008160:	f7ff ff8e 	bl	8008080 <NVIC_EncodePriority>
 8008164:	4602      	mov	r2, r0
 8008166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800816a:	4611      	mov	r1, r2
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff ff5d 	bl	800802c <__NVIC_SetPriority>
}
 8008172:	bf00      	nop
 8008174:	3718      	adds	r7, #24
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}

0800817a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	b082      	sub	sp, #8
 800817e:	af00      	add	r7, sp, #0
 8008180:	4603      	mov	r3, r0
 8008182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008188:	4618      	mov	r0, r3
 800818a:	f7ff ff31 	bl	8007ff0 <__NVIC_EnableIRQ>
}
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7ff ffa2 	bl	80080e8 <SysTick_Config>
 80081a4:	4603      	mov	r3, r0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80081bc:	f7ff fa88 	bl	80076d0 <HAL_GetTick>
 80081c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e099      	b.n	8008300 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2202      	movs	r2, #2
 80081d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 0201 	bic.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80081ec:	e00f      	b.n	800820e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80081ee:	f7ff fa6f 	bl	80076d0 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b05      	cmp	r3, #5
 80081fa:	d908      	bls.n	800820e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2220      	movs	r2, #32
 8008200:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2203      	movs	r2, #3
 8008206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800820a:	2303      	movs	r3, #3
 800820c:	e078      	b.n	8008300 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0301 	and.w	r3, r3, #1
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e8      	bne.n	80081ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008224:	697a      	ldr	r2, [r7, #20]
 8008226:	4b38      	ldr	r3, [pc, #224]	@ (8008308 <HAL_DMA_Init+0x158>)
 8008228:	4013      	ands	r3, r2
 800822a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800823a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	691b      	ldr	r3, [r3, #16]
 8008240:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008246:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008252:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a1b      	ldr	r3, [r3, #32]
 8008258:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	4313      	orrs	r3, r2
 800825e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008264:	2b04      	cmp	r3, #4
 8008266:	d107      	bne.n	8008278 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008270:	4313      	orrs	r3, r2
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	f023 0307 	bic.w	r3, r3, #7
 800828e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	4313      	orrs	r3, r2
 8008298:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d117      	bne.n	80082d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00e      	beq.n	80082d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f8bd 	bl	8008434 <DMA_CheckFifoParam>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d008      	beq.n	80082d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2240      	movs	r2, #64	@ 0x40
 80082c4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80082ce:	2301      	movs	r3, #1
 80082d0:	e016      	b.n	8008300 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f874 	bl	80083c8 <DMA_CalcBaseAndBitshift>
 80082e0:	4603      	mov	r3, r0
 80082e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082e8:	223f      	movs	r2, #63	@ 0x3f
 80082ea:	409a      	lsls	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	f010803f 	.word	0xf010803f

0800830c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e050      	b.n	80083c0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b02      	cmp	r3, #2
 8008328:	d101      	bne.n	800832e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800832a:	2302      	movs	r3, #2
 800832c:	e048      	b.n	80083c0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f022 0201 	bic.w	r2, r2, #1
 800833c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2200      	movs	r2, #0
 800834c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2200      	movs	r2, #0
 8008354:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2200      	movs	r2, #0
 800835c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2200      	movs	r2, #0
 8008364:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2221      	movs	r2, #33	@ 0x21
 800836c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f82a 	bl	80083c8 <DMA_CalcBaseAndBitshift>
 8008374:	4603      	mov	r3, r0
 8008376:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800837c:	223f      	movs	r2, #63	@ 0x3f
 800837e:	409a      	lsls	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	3b10      	subs	r3, #16
 80083d8:	4a13      	ldr	r2, [pc, #76]	@ (8008428 <DMA_CalcBaseAndBitshift+0x60>)
 80083da:	fba2 2303 	umull	r2, r3, r2, r3
 80083de:	091b      	lsrs	r3, r3, #4
 80083e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80083e2:	4a12      	ldr	r2, [pc, #72]	@ (800842c <DMA_CalcBaseAndBitshift+0x64>)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4413      	add	r3, r2
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d908      	bls.n	8008408 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008430 <DMA_CalcBaseAndBitshift+0x68>)
 80083fe:	4013      	ands	r3, r2
 8008400:	1d1a      	adds	r2, r3, #4
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	659a      	str	r2, [r3, #88]	@ 0x58
 8008406:	e006      	b.n	8008416 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	461a      	mov	r2, r3
 800840e:	4b08      	ldr	r3, [pc, #32]	@ (8008430 <DMA_CalcBaseAndBitshift+0x68>)
 8008410:	4013      	ands	r3, r2
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	aaaaaaab 	.word	0xaaaaaaab
 800842c:	08016a64 	.word	0x08016a64
 8008430:	fffffc00 	.word	0xfffffc00

08008434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d11f      	bne.n	800848e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b03      	cmp	r3, #3
 8008452:	d856      	bhi.n	8008502 <DMA_CheckFifoParam+0xce>
 8008454:	a201      	add	r2, pc, #4	@ (adr r2, 800845c <DMA_CheckFifoParam+0x28>)
 8008456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845a:	bf00      	nop
 800845c:	0800846d 	.word	0x0800846d
 8008460:	0800847f 	.word	0x0800847f
 8008464:	0800846d 	.word	0x0800846d
 8008468:	08008503 	.word	0x08008503
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008470:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d046      	beq.n	8008506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800847c:	e043      	b.n	8008506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008482:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008486:	d140      	bne.n	800850a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800848c:	e03d      	b.n	800850a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008496:	d121      	bne.n	80084dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	2b03      	cmp	r3, #3
 800849c:	d837      	bhi.n	800850e <DMA_CheckFifoParam+0xda>
 800849e:	a201      	add	r2, pc, #4	@ (adr r2, 80084a4 <DMA_CheckFifoParam+0x70>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084b5 	.word	0x080084b5
 80084a8:	080084bb 	.word	0x080084bb
 80084ac:	080084b5 	.word	0x080084b5
 80084b0:	080084cd 	.word	0x080084cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	73fb      	strb	r3, [r7, #15]
      break;
 80084b8:	e030      	b.n	800851c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d025      	beq.n	8008512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084ca:	e022      	b.n	8008512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80084d4:	d11f      	bne.n	8008516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80084da:	e01c      	b.n	8008516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d903      	bls.n	80084ea <DMA_CheckFifoParam+0xb6>
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2b03      	cmp	r3, #3
 80084e6:	d003      	beq.n	80084f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80084e8:	e018      	b.n	800851c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	73fb      	strb	r3, [r7, #15]
      break;
 80084ee:	e015      	b.n	800851c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00e      	beq.n	800851a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80084fc:	2301      	movs	r3, #1
 80084fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008500:	e00b      	b.n	800851a <DMA_CheckFifoParam+0xe6>
      break;
 8008502:	bf00      	nop
 8008504:	e00a      	b.n	800851c <DMA_CheckFifoParam+0xe8>
      break;
 8008506:	bf00      	nop
 8008508:	e008      	b.n	800851c <DMA_CheckFifoParam+0xe8>
      break;
 800850a:	bf00      	nop
 800850c:	e006      	b.n	800851c <DMA_CheckFifoParam+0xe8>
      break;
 800850e:	bf00      	nop
 8008510:	e004      	b.n	800851c <DMA_CheckFifoParam+0xe8>
      break;
 8008512:	bf00      	nop
 8008514:	e002      	b.n	800851c <DMA_CheckFifoParam+0xe8>
      break;   
 8008516:	bf00      	nop
 8008518:	e000      	b.n	800851c <DMA_CheckFifoParam+0xe8>
      break;
 800851a:	bf00      	nop
    }
  } 
  
  return status; 
 800851c:	7bfb      	ldrb	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop

0800852c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e039      	b.n	80085b2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008544:	b2db      	uxtb	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d106      	bne.n	8008558 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f7fa fcce 	bl	8002ef4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2202      	movs	r2, #2
 800855c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	430a      	orrs	r2, r1
 8008574:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857c:	f023 0107 	bic.w	r1, r3, #7
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008592:	4b0a      	ldr	r3, [pc, #40]	@ (80085bc <HAL_DMA2D_Init+0x90>)
 8008594:	4013      	ands	r3, r2
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	68d1      	ldr	r1, [r2, #12]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	6812      	ldr	r2, [r2, #0]
 800859e:	430b      	orrs	r3, r1
 80085a0:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	ffffc000 	.word	0xffffc000

080085c0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]
 80085cc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_DMA2D_Start+0x1c>
 80085d8:	2302      	movs	r3, #2
 80085da:	e018      	b.n	800860e <HAL_DMA2D_Start+0x4e>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80085ec:	69bb      	ldr	r3, [r7, #24]
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 f988 	bl	800890c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f042 0201 	orr.w	r2, r2, #1
 800860a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b086      	sub	sp, #24
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
 800861e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008620:	2300      	movs	r3, #0
 8008622:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d056      	beq.n	80086e0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008632:	f7ff f84d 	bl	80076d0 <HAL_GetTick>
 8008636:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008638:	e04b      	b.n	80086d2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008648:	2b00      	cmp	r3, #0
 800864a:	d023      	beq.n	8008694 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f003 0320 	and.w	r3, r3, #32
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800865a:	f043 0202 	orr.w	r2, r3, #2
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d005      	beq.n	8008678 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008670:	f043 0201 	orr.w	r2, r3, #1
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2221      	movs	r2, #33	@ 0x21
 800867e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2204      	movs	r2, #4
 8008684:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e0a5      	b.n	80087e0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869a:	d01a      	beq.n	80086d2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800869c:	f7ff f818 	bl	80076d0 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d302      	bcc.n	80086b2 <HAL_DMA2D_PollForTransfer+0x9c>
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10f      	bne.n	80086d2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086b6:	f043 0220 	orr.w	r2, r3, #32
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2203      	movs	r2, #3
 80086c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e086      	b.n	80087e0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0ac      	beq.n	800863a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	f003 0320 	and.w	r3, r3, #32
 80086ea:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086f2:	f003 0320 	and.w	r3, r3, #32
 80086f6:	693a      	ldr	r2, [r7, #16]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d061      	beq.n	80087c6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008702:	f7fe ffe5 	bl	80076d0 <HAL_GetTick>
 8008706:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8008708:	e056      	b.n	80087b8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8008718:	2b00      	cmp	r3, #0
 800871a:	d02e      	beq.n	800877a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f003 0308 	and.w	r3, r3, #8
 8008722:	2b00      	cmp	r3, #0
 8008724:	d005      	beq.n	8008732 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800872a:	f043 0204 	orr.w	r2, r3, #4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f003 0320 	and.w	r3, r3, #32
 8008738:	2b00      	cmp	r3, #0
 800873a:	d005      	beq.n	8008748 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008740:	f043 0202 	orr.w	r2, r3, #2
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d005      	beq.n	800875e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008756:	f043 0201 	orr.w	r2, r3, #1
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2229      	movs	r2, #41	@ 0x29
 8008764:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2204      	movs	r2, #4
 800876a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e032      	b.n	80087e0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008780:	d01a      	beq.n	80087b8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008782:	f7fe ffa5 	bl	80076d0 <HAL_GetTick>
 8008786:	4602      	mov	r2, r0
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	1ad3      	subs	r3, r2, r3
 800878c:	683a      	ldr	r2, [r7, #0]
 800878e:	429a      	cmp	r2, r3
 8008790:	d302      	bcc.n	8008798 <HAL_DMA2D_PollForTransfer+0x182>
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10f      	bne.n	80087b8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800879c:	f043 0220 	orr.w	r2, r3, #32
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2203      	movs	r2, #3
 80087a8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80087b4:	2303      	movs	r3, #3
 80087b6:	e013      	b.n	80087e0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f003 0310 	and.w	r3, r3, #16
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0a1      	beq.n	800870a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2212      	movs	r2, #18
 80087cc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3718      	adds	r7, #24
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_DMA2D_ConfigLayer+0x20>
 8008804:	2302      	movs	r3, #2
 8008806:	e079      	b.n	80088fc <HAL_DMA2D_ConfigLayer+0x114>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	011b      	lsls	r3, r3, #4
 800881c:	3318      	adds	r3, #24
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	4413      	add	r3, r2
 8008822:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	685a      	ldr	r2, [r3, #4]
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	689b      	ldr	r3, [r3, #8]
 800882c:	041b      	lsls	r3, r3, #16
 800882e:	4313      	orrs	r3, r2
 8008830:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8008832:	4b35      	ldr	r3, [pc, #212]	@ (8008908 <HAL_DMA2D_ConfigLayer+0x120>)
 8008834:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2b0a      	cmp	r3, #10
 800883c:	d003      	beq.n	8008846 <HAL_DMA2D_ConfigLayer+0x5e>
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	2b09      	cmp	r3, #9
 8008844:	d107      	bne.n	8008856 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	4313      	orrs	r3, r2
 8008852:	617b      	str	r3, [r7, #20]
 8008854:	e005      	b.n	8008862 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	68db      	ldr	r3, [r3, #12]
 800885a:	061b      	lsls	r3, r3, #24
 800885c:	697a      	ldr	r2, [r7, #20]
 800885e:	4313      	orrs	r3, r2
 8008860:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d120      	bne.n	80088aa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	43db      	mvns	r3, r3
 8008872:	ea02 0103 	and.w	r1, r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	430a      	orrs	r2, r1
 800887e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	2b0a      	cmp	r3, #10
 8008890:	d003      	beq.n	800889a <HAL_DMA2D_ConfigLayer+0xb2>
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	2b09      	cmp	r3, #9
 8008898:	d127      	bne.n	80088ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80088a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80088a8:	e01f      	b.n	80088ea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69da      	ldr	r2, [r3, #28]
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	43db      	mvns	r3, r3
 80088b4:	ea02 0103 	and.w	r1, r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	697a      	ldr	r2, [r7, #20]
 80088be:	430a      	orrs	r2, r1
 80088c0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	6812      	ldr	r2, [r2, #0]
 80088ca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	2b0a      	cmp	r3, #10
 80088d2:	d003      	beq.n	80088dc <HAL_DMA2D_ConfigLayer+0xf4>
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	2b09      	cmp	r3, #9
 80088da:	d106      	bne.n	80088ea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	68da      	ldr	r2, [r3, #12]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80088e8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	371c      	adds	r7, #28
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	ff03000f 	.word	0xff03000f

0800890c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800890c:	b480      	push	{r7}
 800890e:	b08b      	sub	sp, #44	@ 0x2c
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008920:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	041a      	lsls	r2, r3, #16
 8008928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892a:	431a      	orrs	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008944:	d174      	bne.n	8008a30 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800894c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008954:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800895c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	b2db      	uxtb	r3, r3
 8008962:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d108      	bne.n	800897e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	431a      	orrs	r2, r3
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	4313      	orrs	r3, r2
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4313      	orrs	r3, r2
 800897a:	627b      	str	r3, [r7, #36]	@ 0x24
 800897c:	e053      	b.n	8008a26 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d106      	bne.n	8008994 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8008986:	69ba      	ldr	r2, [r7, #24]
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	4313      	orrs	r3, r2
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	627b      	str	r3, [r7, #36]	@ 0x24
 8008992:	e048      	b.n	8008a26 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d111      	bne.n	80089c0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	0cdb      	lsrs	r3, r3, #19
 80089a0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	0a9b      	lsrs	r3, r3, #10
 80089a6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	08db      	lsrs	r3, r3, #3
 80089ac:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	02db      	lsls	r3, r3, #11
 80089b6:	4313      	orrs	r3, r2
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80089be:	e032      	b.n	8008a26 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d117      	bne.n	80089f8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	0fdb      	lsrs	r3, r3, #31
 80089cc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	0cdb      	lsrs	r3, r3, #19
 80089d2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	0adb      	lsrs	r3, r3, #11
 80089d8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	08db      	lsrs	r3, r3, #3
 80089de:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	029b      	lsls	r3, r3, #10
 80089e8:	431a      	orrs	r2, r3
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	03db      	lsls	r3, r3, #15
 80089ee:	4313      	orrs	r3, r2
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80089f6:	e016      	b.n	8008a26 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80089f8:	6a3b      	ldr	r3, [r7, #32]
 80089fa:	0f1b      	lsrs	r3, r3, #28
 80089fc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	0d1b      	lsrs	r3, r3, #20
 8008a02:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	0b1b      	lsrs	r3, r3, #12
 8008a08:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	091b      	lsrs	r3, r3, #4
 8008a0e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	011a      	lsls	r2, r3, #4
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	021b      	lsls	r3, r3, #8
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	031b      	lsls	r3, r3, #12
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	697a      	ldr	r2, [r7, #20]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008a2e:	e003      	b.n	8008a38 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68ba      	ldr	r2, [r7, #8]
 8008a36:	60da      	str	r2, [r3, #12]
}
 8008a38:	bf00      	nop
 8008a3a:	372c      	adds	r7, #44	@ 0x2c
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b089      	sub	sp, #36	@ 0x24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008a52:	2300      	movs	r3, #0
 8008a54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008a56:	2300      	movs	r3, #0
 8008a58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8008a5e:	2300      	movs	r3, #0
 8008a60:	61fb      	str	r3, [r7, #28]
 8008a62:	e175      	b.n	8008d50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008a64:	2201      	movs	r2, #1
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	4013      	ands	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	f040 8164 	bne.w	8008d4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f003 0303 	and.w	r3, r3, #3
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d005      	beq.n	8008a9a <HAL_GPIO_Init+0x56>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f003 0303 	and.w	r3, r3, #3
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d130      	bne.n	8008afc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	43db      	mvns	r3, r3
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	4013      	ands	r3, r2
 8008ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	fa02 f303 	lsl.w	r3, r2, r3
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	4013      	ands	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	091b      	lsrs	r3, r3, #4
 8008ae6:	f003 0201 	and.w	r2, r3, #1
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	fa02 f303 	lsl.w	r3, r2, r3
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f003 0303 	and.w	r3, r3, #3
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d017      	beq.n	8008b38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	005b      	lsls	r3, r3, #1
 8008b12:	2203      	movs	r2, #3
 8008b14:	fa02 f303 	lsl.w	r3, r2, r3
 8008b18:	43db      	mvns	r3, r3
 8008b1a:	69ba      	ldr	r2, [r7, #24]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	689a      	ldr	r2, [r3, #8]
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2c:	69ba      	ldr	r2, [r7, #24]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f003 0303 	and.w	r3, r3, #3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d123      	bne.n	8008b8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	08da      	lsrs	r2, r3, #3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3208      	adds	r2, #8
 8008b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	f003 0307 	and.w	r3, r3, #7
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	220f      	movs	r2, #15
 8008b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b60:	43db      	mvns	r3, r3
 8008b62:	69ba      	ldr	r2, [r7, #24]
 8008b64:	4013      	ands	r3, r2
 8008b66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	691a      	ldr	r2, [r3, #16]
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f003 0307 	and.w	r3, r3, #7
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	fa02 f303 	lsl.w	r3, r2, r3
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	08da      	lsrs	r2, r3, #3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	3208      	adds	r2, #8
 8008b86:	69b9      	ldr	r1, [r7, #24]
 8008b88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	005b      	lsls	r3, r3, #1
 8008b96:	2203      	movs	r2, #3
 8008b98:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9c:	43db      	mvns	r3, r3
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	f003 0203 	and.w	r2, r3, #3
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 80be 	beq.w	8008d4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bce:	4b66      	ldr	r3, [pc, #408]	@ (8008d68 <HAL_GPIO_Init+0x324>)
 8008bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bd2:	4a65      	ldr	r2, [pc, #404]	@ (8008d68 <HAL_GPIO_Init+0x324>)
 8008bd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8008bda:	4b63      	ldr	r3, [pc, #396]	@ (8008d68 <HAL_GPIO_Init+0x324>)
 8008bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008be6:	4a61      	ldr	r2, [pc, #388]	@ (8008d6c <HAL_GPIO_Init+0x328>)
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	089b      	lsrs	r3, r3, #2
 8008bec:	3302      	adds	r3, #2
 8008bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	f003 0303 	and.w	r3, r3, #3
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	220f      	movs	r2, #15
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	43db      	mvns	r3, r3
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	4013      	ands	r3, r2
 8008c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a58      	ldr	r2, [pc, #352]	@ (8008d70 <HAL_GPIO_Init+0x32c>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d037      	beq.n	8008c82 <HAL_GPIO_Init+0x23e>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a57      	ldr	r2, [pc, #348]	@ (8008d74 <HAL_GPIO_Init+0x330>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d031      	beq.n	8008c7e <HAL_GPIO_Init+0x23a>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a56      	ldr	r2, [pc, #344]	@ (8008d78 <HAL_GPIO_Init+0x334>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d02b      	beq.n	8008c7a <HAL_GPIO_Init+0x236>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a55      	ldr	r2, [pc, #340]	@ (8008d7c <HAL_GPIO_Init+0x338>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d025      	beq.n	8008c76 <HAL_GPIO_Init+0x232>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a54      	ldr	r2, [pc, #336]	@ (8008d80 <HAL_GPIO_Init+0x33c>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d01f      	beq.n	8008c72 <HAL_GPIO_Init+0x22e>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a53      	ldr	r2, [pc, #332]	@ (8008d84 <HAL_GPIO_Init+0x340>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d019      	beq.n	8008c6e <HAL_GPIO_Init+0x22a>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a52      	ldr	r2, [pc, #328]	@ (8008d88 <HAL_GPIO_Init+0x344>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d013      	beq.n	8008c6a <HAL_GPIO_Init+0x226>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a51      	ldr	r2, [pc, #324]	@ (8008d8c <HAL_GPIO_Init+0x348>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d00d      	beq.n	8008c66 <HAL_GPIO_Init+0x222>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a50      	ldr	r2, [pc, #320]	@ (8008d90 <HAL_GPIO_Init+0x34c>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d007      	beq.n	8008c62 <HAL_GPIO_Init+0x21e>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	4a4f      	ldr	r2, [pc, #316]	@ (8008d94 <HAL_GPIO_Init+0x350>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d101      	bne.n	8008c5e <HAL_GPIO_Init+0x21a>
 8008c5a:	2309      	movs	r3, #9
 8008c5c:	e012      	b.n	8008c84 <HAL_GPIO_Init+0x240>
 8008c5e:	230a      	movs	r3, #10
 8008c60:	e010      	b.n	8008c84 <HAL_GPIO_Init+0x240>
 8008c62:	2308      	movs	r3, #8
 8008c64:	e00e      	b.n	8008c84 <HAL_GPIO_Init+0x240>
 8008c66:	2307      	movs	r3, #7
 8008c68:	e00c      	b.n	8008c84 <HAL_GPIO_Init+0x240>
 8008c6a:	2306      	movs	r3, #6
 8008c6c:	e00a      	b.n	8008c84 <HAL_GPIO_Init+0x240>
 8008c6e:	2305      	movs	r3, #5
 8008c70:	e008      	b.n	8008c84 <HAL_GPIO_Init+0x240>
 8008c72:	2304      	movs	r3, #4
 8008c74:	e006      	b.n	8008c84 <HAL_GPIO_Init+0x240>
 8008c76:	2303      	movs	r3, #3
 8008c78:	e004      	b.n	8008c84 <HAL_GPIO_Init+0x240>
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	e002      	b.n	8008c84 <HAL_GPIO_Init+0x240>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e000      	b.n	8008c84 <HAL_GPIO_Init+0x240>
 8008c82:	2300      	movs	r3, #0
 8008c84:	69fa      	ldr	r2, [r7, #28]
 8008c86:	f002 0203 	and.w	r2, r2, #3
 8008c8a:	0092      	lsls	r2, r2, #2
 8008c8c:	4093      	lsls	r3, r2
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008c94:	4935      	ldr	r1, [pc, #212]	@ (8008d6c <HAL_GPIO_Init+0x328>)
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	089b      	lsrs	r3, r3, #2
 8008c9a:	3302      	adds	r3, #2
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8008d98 <HAL_GPIO_Init+0x354>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	43db      	mvns	r3, r3
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008cbe:	69ba      	ldr	r2, [r7, #24]
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008cc6:	4a34      	ldr	r2, [pc, #208]	@ (8008d98 <HAL_GPIO_Init+0x354>)
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ccc:	4b32      	ldr	r3, [pc, #200]	@ (8008d98 <HAL_GPIO_Init+0x354>)
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	43db      	mvns	r3, r3
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	4013      	ands	r3, r2
 8008cda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ce8:	69ba      	ldr	r2, [r7, #24]
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008cf0:	4a29      	ldr	r2, [pc, #164]	@ (8008d98 <HAL_GPIO_Init+0x354>)
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008cf6:	4b28      	ldr	r3, [pc, #160]	@ (8008d98 <HAL_GPIO_Init+0x354>)
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	43db      	mvns	r3, r3
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	4013      	ands	r3, r2
 8008d04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d003      	beq.n	8008d1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8008d98 <HAL_GPIO_Init+0x354>)
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d20:	4b1d      	ldr	r3, [pc, #116]	@ (8008d98 <HAL_GPIO_Init+0x354>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	43db      	mvns	r3, r3
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d003      	beq.n	8008d44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008d44:	4a14      	ldr	r2, [pc, #80]	@ (8008d98 <HAL_GPIO_Init+0x354>)
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	61fb      	str	r3, [r7, #28]
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	2b0f      	cmp	r3, #15
 8008d54:	f67f ae86 	bls.w	8008a64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop
 8008d5c:	3724      	adds	r7, #36	@ 0x24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	40023800 	.word	0x40023800
 8008d6c:	40013800 	.word	0x40013800
 8008d70:	40020000 	.word	0x40020000
 8008d74:	40020400 	.word	0x40020400
 8008d78:	40020800 	.word	0x40020800
 8008d7c:	40020c00 	.word	0x40020c00
 8008d80:	40021000 	.word	0x40021000
 8008d84:	40021400 	.word	0x40021400
 8008d88:	40021800 	.word	0x40021800
 8008d8c:	40021c00 	.word	0x40021c00
 8008d90:	40022000 	.word	0x40022000
 8008d94:	40022400 	.word	0x40022400
 8008d98:	40013c00 	.word	0x40013c00

08008d9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b087      	sub	sp, #28
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8008da6:	2300      	movs	r3, #0
 8008da8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8008db2:	2300      	movs	r3, #0
 8008db4:	617b      	str	r3, [r7, #20]
 8008db6:	e0d9      	b.n	8008f6c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008db8:	2201      	movs	r2, #1
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008dc2:	683a      	ldr	r2, [r7, #0]
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	f040 80c9 	bne.w	8008f66 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8008dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8008f84 <HAL_GPIO_DeInit+0x1e8>)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	089b      	lsrs	r3, r3, #2
 8008dda:	3302      	adds	r3, #2
 8008ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008de0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f003 0303 	and.w	r3, r3, #3
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	220f      	movs	r2, #15
 8008dec:	fa02 f303 	lsl.w	r3, r2, r3
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	4013      	ands	r3, r2
 8008df4:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a63      	ldr	r2, [pc, #396]	@ (8008f88 <HAL_GPIO_DeInit+0x1ec>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d037      	beq.n	8008e6e <HAL_GPIO_DeInit+0xd2>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a62      	ldr	r2, [pc, #392]	@ (8008f8c <HAL_GPIO_DeInit+0x1f0>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d031      	beq.n	8008e6a <HAL_GPIO_DeInit+0xce>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a61      	ldr	r2, [pc, #388]	@ (8008f90 <HAL_GPIO_DeInit+0x1f4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d02b      	beq.n	8008e66 <HAL_GPIO_DeInit+0xca>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a60      	ldr	r2, [pc, #384]	@ (8008f94 <HAL_GPIO_DeInit+0x1f8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d025      	beq.n	8008e62 <HAL_GPIO_DeInit+0xc6>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a5f      	ldr	r2, [pc, #380]	@ (8008f98 <HAL_GPIO_DeInit+0x1fc>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d01f      	beq.n	8008e5e <HAL_GPIO_DeInit+0xc2>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a5e      	ldr	r2, [pc, #376]	@ (8008f9c <HAL_GPIO_DeInit+0x200>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d019      	beq.n	8008e5a <HAL_GPIO_DeInit+0xbe>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a5d      	ldr	r2, [pc, #372]	@ (8008fa0 <HAL_GPIO_DeInit+0x204>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d013      	beq.n	8008e56 <HAL_GPIO_DeInit+0xba>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a5c      	ldr	r2, [pc, #368]	@ (8008fa4 <HAL_GPIO_DeInit+0x208>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d00d      	beq.n	8008e52 <HAL_GPIO_DeInit+0xb6>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a5b      	ldr	r2, [pc, #364]	@ (8008fa8 <HAL_GPIO_DeInit+0x20c>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d007      	beq.n	8008e4e <HAL_GPIO_DeInit+0xb2>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a5a      	ldr	r2, [pc, #360]	@ (8008fac <HAL_GPIO_DeInit+0x210>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d101      	bne.n	8008e4a <HAL_GPIO_DeInit+0xae>
 8008e46:	2309      	movs	r3, #9
 8008e48:	e012      	b.n	8008e70 <HAL_GPIO_DeInit+0xd4>
 8008e4a:	230a      	movs	r3, #10
 8008e4c:	e010      	b.n	8008e70 <HAL_GPIO_DeInit+0xd4>
 8008e4e:	2308      	movs	r3, #8
 8008e50:	e00e      	b.n	8008e70 <HAL_GPIO_DeInit+0xd4>
 8008e52:	2307      	movs	r3, #7
 8008e54:	e00c      	b.n	8008e70 <HAL_GPIO_DeInit+0xd4>
 8008e56:	2306      	movs	r3, #6
 8008e58:	e00a      	b.n	8008e70 <HAL_GPIO_DeInit+0xd4>
 8008e5a:	2305      	movs	r3, #5
 8008e5c:	e008      	b.n	8008e70 <HAL_GPIO_DeInit+0xd4>
 8008e5e:	2304      	movs	r3, #4
 8008e60:	e006      	b.n	8008e70 <HAL_GPIO_DeInit+0xd4>
 8008e62:	2303      	movs	r3, #3
 8008e64:	e004      	b.n	8008e70 <HAL_GPIO_DeInit+0xd4>
 8008e66:	2302      	movs	r3, #2
 8008e68:	e002      	b.n	8008e70 <HAL_GPIO_DeInit+0xd4>
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e000      	b.n	8008e70 <HAL_GPIO_DeInit+0xd4>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	f002 0203 	and.w	r2, r2, #3
 8008e76:	0092      	lsls	r2, r2, #2
 8008e78:	4093      	lsls	r3, r2
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d132      	bne.n	8008ee6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008e80:	4b4b      	ldr	r3, [pc, #300]	@ (8008fb0 <HAL_GPIO_DeInit+0x214>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	43db      	mvns	r3, r3
 8008e88:	4949      	ldr	r1, [pc, #292]	@ (8008fb0 <HAL_GPIO_DeInit+0x214>)
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008e8e:	4b48      	ldr	r3, [pc, #288]	@ (8008fb0 <HAL_GPIO_DeInit+0x214>)
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	43db      	mvns	r3, r3
 8008e96:	4946      	ldr	r1, [pc, #280]	@ (8008fb0 <HAL_GPIO_DeInit+0x214>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008e9c:	4b44      	ldr	r3, [pc, #272]	@ (8008fb0 <HAL_GPIO_DeInit+0x214>)
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	43db      	mvns	r3, r3
 8008ea4:	4942      	ldr	r1, [pc, #264]	@ (8008fb0 <HAL_GPIO_DeInit+0x214>)
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008eaa:	4b41      	ldr	r3, [pc, #260]	@ (8008fb0 <HAL_GPIO_DeInit+0x214>)
 8008eac:	689a      	ldr	r2, [r3, #8]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	43db      	mvns	r3, r3
 8008eb2:	493f      	ldr	r1, [pc, #252]	@ (8008fb0 <HAL_GPIO_DeInit+0x214>)
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	220f      	movs	r2, #15
 8008ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8008ec8:	4a2e      	ldr	r2, [pc, #184]	@ (8008f84 <HAL_GPIO_DeInit+0x1e8>)
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	089b      	lsrs	r3, r3, #2
 8008ece:	3302      	adds	r3, #2
 8008ed0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	43da      	mvns	r2, r3
 8008ed8:	482a      	ldr	r0, [pc, #168]	@ (8008f84 <HAL_GPIO_DeInit+0x1e8>)
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	089b      	lsrs	r3, r3, #2
 8008ede:	400a      	ands	r2, r1
 8008ee0:	3302      	adds	r3, #2
 8008ee2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	2103      	movs	r1, #3
 8008ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	401a      	ands	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	08da      	lsrs	r2, r3, #3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3208      	adds	r2, #8
 8008f04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f003 0307 	and.w	r3, r3, #7
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	220f      	movs	r2, #15
 8008f12:	fa02 f303 	lsl.w	r3, r2, r3
 8008f16:	43db      	mvns	r3, r3
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	08d2      	lsrs	r2, r2, #3
 8008f1c:	4019      	ands	r1, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3208      	adds	r2, #8
 8008f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	2103      	movs	r1, #3
 8008f30:	fa01 f303 	lsl.w	r3, r1, r3
 8008f34:	43db      	mvns	r3, r3
 8008f36:	401a      	ands	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	2101      	movs	r1, #1
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	fa01 f303 	lsl.w	r3, r1, r3
 8008f48:	43db      	mvns	r3, r3
 8008f4a:	401a      	ands	r2, r3
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	2103      	movs	r1, #3
 8008f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f5e:	43db      	mvns	r3, r3
 8008f60:	401a      	ands	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	2b0f      	cmp	r3, #15
 8008f70:	f67f af22 	bls.w	8008db8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008f74:	bf00      	nop
 8008f76:	bf00      	nop
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	40013800 	.word	0x40013800
 8008f88:	40020000 	.word	0x40020000
 8008f8c:	40020400 	.word	0x40020400
 8008f90:	40020800 	.word	0x40020800
 8008f94:	40020c00 	.word	0x40020c00
 8008f98:	40021000 	.word	0x40021000
 8008f9c:	40021400 	.word	0x40021400
 8008fa0:	40021800 	.word	0x40021800
 8008fa4:	40021c00 	.word	0x40021c00
 8008fa8:	40022000 	.word	0x40022000
 8008fac:	40022400 	.word	0x40022400
 8008fb0:	40013c00 	.word	0x40013c00

08008fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691a      	ldr	r2, [r3, #16]
 8008fc4:	887b      	ldrh	r3, [r7, #2]
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d002      	beq.n	8008fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	73fb      	strb	r3, [r7, #15]
 8008fd0:	e001      	b.n	8008fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	807b      	strh	r3, [r7, #2]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ff4:	787b      	ldrb	r3, [r7, #1]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008ffa:	887a      	ldrh	r2, [r7, #2]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009000:	e003      	b.n	800900a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009002:	887b      	ldrh	r3, [r7, #2]
 8009004:	041a      	lsls	r2, r3, #16
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	619a      	str	r2, [r3, #24]
}
 800900a:	bf00      	nop
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
	...

08009018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	4603      	mov	r3, r0
 8009020:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009022:	4b08      	ldr	r3, [pc, #32]	@ (8009044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009024:	695a      	ldr	r2, [r3, #20]
 8009026:	88fb      	ldrh	r3, [r7, #6]
 8009028:	4013      	ands	r3, r2
 800902a:	2b00      	cmp	r3, #0
 800902c:	d006      	beq.n	800903c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800902e:	4a05      	ldr	r2, [pc, #20]	@ (8009044 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009030:	88fb      	ldrh	r3, [r7, #6]
 8009032:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009034:	88fb      	ldrh	r3, [r7, #6]
 8009036:	4618      	mov	r0, r3
 8009038:	f7f9 fcf6 	bl	8002a28 <HAL_GPIO_EXTI_Callback>
  }
}
 800903c:	bf00      	nop
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}
 8009044:	40013c00 	.word	0x40013c00

08009048 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e08b      	b.n	8009172 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d106      	bne.n	8009074 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fa fa14 	bl	800349c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2224      	movs	r2, #36	@ 0x24
 8009078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 0201 	bic.w	r2, r2, #1
 800908a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	685a      	ldr	r2, [r3, #4]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009098:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80090a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d107      	bne.n	80090c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	689a      	ldr	r2, [r3, #8]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090be:	609a      	str	r2, [r3, #8]
 80090c0:	e006      	b.n	80090d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80090ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d108      	bne.n	80090ea <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090e6:	605a      	str	r2, [r3, #4]
 80090e8:	e007      	b.n	80090fa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	685a      	ldr	r2, [r3, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6859      	ldr	r1, [r3, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	4b1d      	ldr	r3, [pc, #116]	@ (800917c <HAL_I2C_Init+0x134>)
 8009106:	430b      	orrs	r3, r1
 8009108:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	68da      	ldr	r2, [r3, #12]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009118:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	691a      	ldr	r2, [r3, #16]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	699b      	ldr	r3, [r3, #24]
 800912a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	430a      	orrs	r2, r1
 8009132:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	69d9      	ldr	r1, [r3, #28]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a1a      	ldr	r2, [r3, #32]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	430a      	orrs	r2, r1
 8009142:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f042 0201 	orr.w	r2, r2, #1
 8009152:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2220      	movs	r2, #32
 800915e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009170:	2300      	movs	r3, #0
}
 8009172:	4618      	mov	r0, r3
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	02008000 	.word	0x02008000

08009180 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e021      	b.n	80091d6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2224      	movs	r2, #36	@ 0x24
 8009196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f022 0201 	bic.w	r2, r2, #1
 80091a8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fa fa1e 	bl	80035ec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b088      	sub	sp, #32
 80091e4:	af02      	add	r7, sp, #8
 80091e6:	60f8      	str	r0, [r7, #12]
 80091e8:	4608      	mov	r0, r1
 80091ea:	4611      	mov	r1, r2
 80091ec:	461a      	mov	r2, r3
 80091ee:	4603      	mov	r3, r0
 80091f0:	817b      	strh	r3, [r7, #10]
 80091f2:	460b      	mov	r3, r1
 80091f4:	813b      	strh	r3, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b20      	cmp	r3, #32
 8009204:	f040 80f9 	bne.w	80093fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d002      	beq.n	8009214 <HAL_I2C_Mem_Write+0x34>
 800920e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009210:	2b00      	cmp	r3, #0
 8009212:	d105      	bne.n	8009220 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800921a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800921c:	2301      	movs	r3, #1
 800921e:	e0ed      	b.n	80093fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009226:	2b01      	cmp	r3, #1
 8009228:	d101      	bne.n	800922e <HAL_I2C_Mem_Write+0x4e>
 800922a:	2302      	movs	r3, #2
 800922c:	e0e6      	b.n	80093fc <HAL_I2C_Mem_Write+0x21c>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2201      	movs	r2, #1
 8009232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009236:	f7fe fa4b 	bl	80076d0 <HAL_GetTick>
 800923a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	2319      	movs	r3, #25
 8009242:	2201      	movs	r2, #1
 8009244:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f000 fad1 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009254:	2301      	movs	r3, #1
 8009256:	e0d1      	b.n	80093fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2221      	movs	r2, #33	@ 0x21
 800925c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2240      	movs	r2, #64	@ 0x40
 8009264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6a3a      	ldr	r2, [r7, #32]
 8009272:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2200      	movs	r2, #0
 800927e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009280:	88f8      	ldrh	r0, [r7, #6]
 8009282:	893a      	ldrh	r2, [r7, #8]
 8009284:	8979      	ldrh	r1, [r7, #10]
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	9301      	str	r3, [sp, #4]
 800928a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928c:	9300      	str	r3, [sp, #0]
 800928e:	4603      	mov	r3, r0
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f000 f9e1 	bl	8009658 <I2C_RequestMemoryWrite>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d005      	beq.n	80092a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e0a9      	b.n	80093fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2bff      	cmp	r3, #255	@ 0xff
 80092b0:	d90e      	bls.n	80092d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	22ff      	movs	r2, #255	@ 0xff
 80092b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092bc:	b2da      	uxtb	r2, r3
 80092be:	8979      	ldrh	r1, [r7, #10]
 80092c0:	2300      	movs	r3, #0
 80092c2:	9300      	str	r3, [sp, #0]
 80092c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f000 fc55 	bl	8009b78 <I2C_TransferConfig>
 80092ce:	e00f      	b.n	80092f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	8979      	ldrh	r1, [r7, #10]
 80092e2:	2300      	movs	r3, #0
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 fc44 	bl	8009b78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 fad4 	bl	80098a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e07b      	b.n	80093fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009308:	781a      	ldrb	r2, [r3, #0]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009314:	1c5a      	adds	r2, r3, #1
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800931e:	b29b      	uxth	r3, r3
 8009320:	3b01      	subs	r3, #1
 8009322:	b29a      	uxth	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800932c:	3b01      	subs	r3, #1
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009338:	b29b      	uxth	r3, r3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d034      	beq.n	80093a8 <HAL_I2C_Mem_Write+0x1c8>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009342:	2b00      	cmp	r3, #0
 8009344:	d130      	bne.n	80093a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934c:	2200      	movs	r2, #0
 800934e:	2180      	movs	r1, #128	@ 0x80
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 fa4d 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e04d      	b.n	80093fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009364:	b29b      	uxth	r3, r3
 8009366:	2bff      	cmp	r3, #255	@ 0xff
 8009368:	d90e      	bls.n	8009388 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	22ff      	movs	r2, #255	@ 0xff
 800936e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009374:	b2da      	uxtb	r2, r3
 8009376:	8979      	ldrh	r1, [r7, #10]
 8009378:	2300      	movs	r3, #0
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 fbf9 	bl	8009b78 <I2C_TransferConfig>
 8009386:	e00f      	b.n	80093a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800938c:	b29a      	uxth	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009396:	b2da      	uxtb	r2, r3
 8009398:	8979      	ldrh	r1, [r7, #10]
 800939a:	2300      	movs	r3, #0
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 fbe8 	bl	8009b78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d19e      	bne.n	80092f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f000 faba 	bl	8009930 <I2C_WaitOnSTOPFlagUntilTimeout>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e01a      	b.n	80093fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2220      	movs	r2, #32
 80093cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6859      	ldr	r1, [r3, #4]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009404 <HAL_I2C_Mem_Write+0x224>)
 80093da:	400b      	ands	r3, r1
 80093dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2220      	movs	r2, #32
 80093e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	e000      	b.n	80093fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80093fa:	2302      	movs	r3, #2
  }
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	fe00e800 	.word	0xfe00e800

08009408 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af02      	add	r7, sp, #8
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	4608      	mov	r0, r1
 8009412:	4611      	mov	r1, r2
 8009414:	461a      	mov	r2, r3
 8009416:	4603      	mov	r3, r0
 8009418:	817b      	strh	r3, [r7, #10]
 800941a:	460b      	mov	r3, r1
 800941c:	813b      	strh	r3, [r7, #8]
 800941e:	4613      	mov	r3, r2
 8009420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009428:	b2db      	uxtb	r3, r3
 800942a:	2b20      	cmp	r3, #32
 800942c:	f040 80fd 	bne.w	800962a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d002      	beq.n	800943c <HAL_I2C_Mem_Read+0x34>
 8009436:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009438:	2b00      	cmp	r3, #0
 800943a:	d105      	bne.n	8009448 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009442:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e0f1      	b.n	800962c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800944e:	2b01      	cmp	r3, #1
 8009450:	d101      	bne.n	8009456 <HAL_I2C_Mem_Read+0x4e>
 8009452:	2302      	movs	r3, #2
 8009454:	e0ea      	b.n	800962c <HAL_I2C_Mem_Read+0x224>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800945e:	f7fe f937 	bl	80076d0 <HAL_GetTick>
 8009462:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	9300      	str	r3, [sp, #0]
 8009468:	2319      	movs	r3, #25
 800946a:	2201      	movs	r2, #1
 800946c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 f9bd 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d001      	beq.n	8009480 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e0d5      	b.n	800962c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2222      	movs	r2, #34	@ 0x22
 8009484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2240      	movs	r2, #64	@ 0x40
 800948c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6a3a      	ldr	r2, [r7, #32]
 800949a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80094a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2200      	movs	r2, #0
 80094a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80094a8:	88f8      	ldrh	r0, [r7, #6]
 80094aa:	893a      	ldrh	r2, [r7, #8]
 80094ac:	8979      	ldrh	r1, [r7, #10]
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b4:	9300      	str	r3, [sp, #0]
 80094b6:	4603      	mov	r3, r0
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f000 f921 	bl	8009700 <I2C_RequestMemoryRead>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e0ad      	b.n	800962c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	2bff      	cmp	r3, #255	@ 0xff
 80094d8:	d90e      	bls.n	80094f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	8979      	ldrh	r1, [r7, #10]
 80094e8:	4b52      	ldr	r3, [pc, #328]	@ (8009634 <HAL_I2C_Mem_Read+0x22c>)
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 fb41 	bl	8009b78 <I2C_TransferConfig>
 80094f6:	e00f      	b.n	8009518 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009506:	b2da      	uxtb	r2, r3
 8009508:	8979      	ldrh	r1, [r7, #10]
 800950a:	4b4a      	ldr	r3, [pc, #296]	@ (8009634 <HAL_I2C_Mem_Read+0x22c>)
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 fb30 	bl	8009b78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800951e:	2200      	movs	r2, #0
 8009520:	2104      	movs	r1, #4
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 f964 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e07c      	b.n	800962c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800953c:	b2d2      	uxtb	r2, r2
 800953e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009544:	1c5a      	adds	r2, r3, #1
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800954e:	3b01      	subs	r3, #1
 8009550:	b29a      	uxth	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800955a:	b29b      	uxth	r3, r3
 800955c:	3b01      	subs	r3, #1
 800955e:	b29a      	uxth	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009568:	b29b      	uxth	r3, r3
 800956a:	2b00      	cmp	r3, #0
 800956c:	d034      	beq.n	80095d8 <HAL_I2C_Mem_Read+0x1d0>
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009572:	2b00      	cmp	r3, #0
 8009574:	d130      	bne.n	80095d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	9300      	str	r3, [sp, #0]
 800957a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957c:	2200      	movs	r2, #0
 800957e:	2180      	movs	r1, #128	@ 0x80
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f000 f935 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e04d      	b.n	800962c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009594:	b29b      	uxth	r3, r3
 8009596:	2bff      	cmp	r3, #255	@ 0xff
 8009598:	d90e      	bls.n	80095b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2201      	movs	r2, #1
 800959e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	8979      	ldrh	r1, [r7, #10]
 80095a8:	2300      	movs	r3, #0
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 fae1 	bl	8009b78 <I2C_TransferConfig>
 80095b6:	e00f      	b.n	80095d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	8979      	ldrh	r1, [r7, #10]
 80095ca:	2300      	movs	r3, #0
 80095cc:	9300      	str	r3, [sp, #0]
 80095ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fad0 	bl	8009b78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095dc:	b29b      	uxth	r3, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d19a      	bne.n	8009518 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 f9a2 	bl	8009930 <I2C_WaitOnSTOPFlagUntilTimeout>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80095f2:	2301      	movs	r3, #1
 80095f4:	e01a      	b.n	800962c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2220      	movs	r2, #32
 80095fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6859      	ldr	r1, [r3, #4]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	4b0b      	ldr	r3, [pc, #44]	@ (8009638 <HAL_I2C_Mem_Read+0x230>)
 800960a:	400b      	ands	r3, r1
 800960c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2220      	movs	r2, #32
 8009612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2200      	movs	r2, #0
 800961a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009626:	2300      	movs	r3, #0
 8009628:	e000      	b.n	800962c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800962a:	2302      	movs	r3, #2
  }
}
 800962c:	4618      	mov	r0, r3
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	80002400 	.word	0x80002400
 8009638:	fe00e800 	.word	0xfe00e800

0800963c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800964a:	b2db      	uxtb	r3, r3
}
 800964c:	4618      	mov	r0, r3
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af02      	add	r7, sp, #8
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	4608      	mov	r0, r1
 8009662:	4611      	mov	r1, r2
 8009664:	461a      	mov	r2, r3
 8009666:	4603      	mov	r3, r0
 8009668:	817b      	strh	r3, [r7, #10]
 800966a:	460b      	mov	r3, r1
 800966c:	813b      	strh	r3, [r7, #8]
 800966e:	4613      	mov	r3, r2
 8009670:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009672:	88fb      	ldrh	r3, [r7, #6]
 8009674:	b2da      	uxtb	r2, r3
 8009676:	8979      	ldrh	r1, [r7, #10]
 8009678:	4b20      	ldr	r3, [pc, #128]	@ (80096fc <I2C_RequestMemoryWrite+0xa4>)
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f000 fa79 	bl	8009b78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009686:	69fa      	ldr	r2, [r7, #28]
 8009688:	69b9      	ldr	r1, [r7, #24]
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f000 f909 	bl	80098a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e02c      	b.n	80096f4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800969a:	88fb      	ldrh	r3, [r7, #6]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d105      	bne.n	80096ac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096a0:	893b      	ldrh	r3, [r7, #8]
 80096a2:	b2da      	uxtb	r2, r3
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80096aa:	e015      	b.n	80096d8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80096ac:	893b      	ldrh	r3, [r7, #8]
 80096ae:	0a1b      	lsrs	r3, r3, #8
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096ba:	69fa      	ldr	r2, [r7, #28]
 80096bc:	69b9      	ldr	r1, [r7, #24]
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 f8ef 	bl	80098a2 <I2C_WaitOnTXISFlagUntilTimeout>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e012      	b.n	80096f4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80096ce:	893b      	ldrh	r3, [r7, #8]
 80096d0:	b2da      	uxtb	r2, r3
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	2200      	movs	r2, #0
 80096e0:	2180      	movs	r1, #128	@ 0x80
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f000 f884 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e000      	b.n	80096f4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	80002000 	.word	0x80002000

08009700 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af02      	add	r7, sp, #8
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	4608      	mov	r0, r1
 800970a:	4611      	mov	r1, r2
 800970c:	461a      	mov	r2, r3
 800970e:	4603      	mov	r3, r0
 8009710:	817b      	strh	r3, [r7, #10]
 8009712:	460b      	mov	r3, r1
 8009714:	813b      	strh	r3, [r7, #8]
 8009716:	4613      	mov	r3, r2
 8009718:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800971a:	88fb      	ldrh	r3, [r7, #6]
 800971c:	b2da      	uxtb	r2, r3
 800971e:	8979      	ldrh	r1, [r7, #10]
 8009720:	4b20      	ldr	r3, [pc, #128]	@ (80097a4 <I2C_RequestMemoryRead+0xa4>)
 8009722:	9300      	str	r3, [sp, #0]
 8009724:	2300      	movs	r3, #0
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f000 fa26 	bl	8009b78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800972c:	69fa      	ldr	r2, [r7, #28]
 800972e:	69b9      	ldr	r1, [r7, #24]
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f000 f8b6 	bl	80098a2 <I2C_WaitOnTXISFlagUntilTimeout>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	e02c      	b.n	800979a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009740:	88fb      	ldrh	r3, [r7, #6]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d105      	bne.n	8009752 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009746:	893b      	ldrh	r3, [r7, #8]
 8009748:	b2da      	uxtb	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	629a      	str	r2, [r3, #40]	@ 0x28
 8009750:	e015      	b.n	800977e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009752:	893b      	ldrh	r3, [r7, #8]
 8009754:	0a1b      	lsrs	r3, r3, #8
 8009756:	b29b      	uxth	r3, r3
 8009758:	b2da      	uxtb	r2, r3
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009760:	69fa      	ldr	r2, [r7, #28]
 8009762:	69b9      	ldr	r1, [r7, #24]
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f000 f89c 	bl	80098a2 <I2C_WaitOnTXISFlagUntilTimeout>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	d001      	beq.n	8009774 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009770:	2301      	movs	r3, #1
 8009772:	e012      	b.n	800979a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009774:	893b      	ldrh	r3, [r7, #8]
 8009776:	b2da      	uxtb	r2, r3
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	9300      	str	r3, [sp, #0]
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	2200      	movs	r2, #0
 8009786:	2140      	movs	r1, #64	@ 0x40
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 f831 	bl	80097f0 <I2C_WaitOnFlagUntilTimeout>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e000      	b.n	800979a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	80002000 	.word	0x80002000

080097a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d103      	bne.n	80097c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2200      	movs	r2, #0
 80097c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d007      	beq.n	80097e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f042 0201 	orr.w	r2, r2, #1
 80097e2:	619a      	str	r2, [r3, #24]
  }
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60f8      	str	r0, [r7, #12]
 80097f8:	60b9      	str	r1, [r7, #8]
 80097fa:	603b      	str	r3, [r7, #0]
 80097fc:	4613      	mov	r3, r2
 80097fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009800:	e03b      	b.n	800987a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f000 f8d6 	bl	80099b8 <I2C_IsErrorOccurred>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d001      	beq.n	8009816 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e041      	b.n	800989a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800981c:	d02d      	beq.n	800987a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800981e:	f7fd ff57 	bl	80076d0 <HAL_GetTick>
 8009822:	4602      	mov	r2, r0
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	683a      	ldr	r2, [r7, #0]
 800982a:	429a      	cmp	r2, r3
 800982c:	d302      	bcc.n	8009834 <I2C_WaitOnFlagUntilTimeout+0x44>
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d122      	bne.n	800987a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	699a      	ldr	r2, [r3, #24]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	4013      	ands	r3, r2
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	429a      	cmp	r2, r3
 8009842:	bf0c      	ite	eq
 8009844:	2301      	moveq	r3, #1
 8009846:	2300      	movne	r3, #0
 8009848:	b2db      	uxtb	r3, r3
 800984a:	461a      	mov	r2, r3
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	429a      	cmp	r2, r3
 8009850:	d113      	bne.n	800987a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009856:	f043 0220 	orr.w	r2, r3, #32
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2220      	movs	r2, #32
 8009862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e00f      	b.n	800989a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	699a      	ldr	r2, [r3, #24]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	4013      	ands	r3, r2
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	429a      	cmp	r2, r3
 8009888:	bf0c      	ite	eq
 800988a:	2301      	moveq	r3, #1
 800988c:	2300      	movne	r3, #0
 800988e:	b2db      	uxtb	r3, r3
 8009890:	461a      	mov	r2, r3
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	429a      	cmp	r2, r3
 8009896:	d0b4      	beq.n	8009802 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b084      	sub	sp, #16
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80098ae:	e033      	b.n	8009918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	68b9      	ldr	r1, [r7, #8]
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f000 f87f 	bl	80099b8 <I2C_IsErrorOccurred>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e031      	b.n	8009928 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ca:	d025      	beq.n	8009918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098cc:	f7fd ff00 	bl	80076d0 <HAL_GetTick>
 80098d0:	4602      	mov	r2, r0
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	1ad3      	subs	r3, r2, r3
 80098d6:	68ba      	ldr	r2, [r7, #8]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d302      	bcc.n	80098e2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d11a      	bne.n	8009918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d013      	beq.n	8009918 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f4:	f043 0220 	orr.w	r2, r3, #32
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2220      	movs	r2, #32
 8009900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e007      	b.n	8009928 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b02      	cmp	r3, #2
 8009924:	d1c4      	bne.n	80098b0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800993c:	e02f      	b.n	800999e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	68b9      	ldr	r1, [r7, #8]
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f000 f838 	bl	80099b8 <I2C_IsErrorOccurred>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e02d      	b.n	80099ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009952:	f7fd febd 	bl	80076d0 <HAL_GetTick>
 8009956:	4602      	mov	r2, r0
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	429a      	cmp	r2, r3
 8009960:	d302      	bcc.n	8009968 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d11a      	bne.n	800999e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	f003 0320 	and.w	r3, r3, #32
 8009972:	2b20      	cmp	r3, #32
 8009974:	d013      	beq.n	800999e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800997a:	f043 0220 	orr.w	r2, r3, #32
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2220      	movs	r2, #32
 8009986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	e007      	b.n	80099ae <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	699b      	ldr	r3, [r3, #24]
 80099a4:	f003 0320 	and.w	r3, r3, #32
 80099a8:	2b20      	cmp	r3, #32
 80099aa:	d1c8      	bne.n	800993e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08a      	sub	sp, #40	@ 0x28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	60f8      	str	r0, [r7, #12]
 80099c0:	60b9      	str	r1, [r7, #8]
 80099c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	699b      	ldr	r3, [r3, #24]
 80099d0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80099d2:	2300      	movs	r3, #0
 80099d4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d068      	beq.n	8009ab6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2210      	movs	r2, #16
 80099ea:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80099ec:	e049      	b.n	8009a82 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099f4:	d045      	beq.n	8009a82 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80099f6:	f7fd fe6b 	bl	80076d0 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	69fb      	ldr	r3, [r7, #28]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	68ba      	ldr	r2, [r7, #8]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d302      	bcc.n	8009a0c <I2C_IsErrorOccurred+0x54>
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d13a      	bne.n	8009a82 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	685b      	ldr	r3, [r3, #4]
 8009a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a16:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a1e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699b      	ldr	r3, [r3, #24]
 8009a26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a2e:	d121      	bne.n	8009a74 <I2C_IsErrorOccurred+0xbc>
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a36:	d01d      	beq.n	8009a74 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009a38:	7cfb      	ldrb	r3, [r7, #19]
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	d01a      	beq.n	8009a74 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a4c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009a4e:	f7fd fe3f 	bl	80076d0 <HAL_GetTick>
 8009a52:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a54:	e00e      	b.n	8009a74 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009a56:	f7fd fe3b 	bl	80076d0 <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	2b19      	cmp	r3, #25
 8009a62:	d907      	bls.n	8009a74 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009a64:	6a3b      	ldr	r3, [r7, #32]
 8009a66:	f043 0320 	orr.w	r3, r3, #32
 8009a6a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009a72:	e006      	b.n	8009a82 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	f003 0320 	and.w	r3, r3, #32
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	d1e9      	bne.n	8009a56 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b20      	cmp	r3, #32
 8009a8e:	d003      	beq.n	8009a98 <I2C_IsErrorOccurred+0xe0>
 8009a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d0aa      	beq.n	80099ee <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d103      	bne.n	8009aa8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2220      	movs	r2, #32
 8009aa6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009aa8:	6a3b      	ldr	r3, [r7, #32]
 8009aaa:	f043 0304 	orr.w	r3, r3, #4
 8009aae:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009abe:	69bb      	ldr	r3, [r7, #24]
 8009ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00b      	beq.n	8009ae0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009ac8:	6a3b      	ldr	r3, [r7, #32]
 8009aca:	f043 0301 	orr.w	r3, r3, #1
 8009ace:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009ad8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00b      	beq.n	8009b02 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	f043 0308 	orr.w	r3, r3, #8
 8009af0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009afa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00b      	beq.n	8009b24 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	f043 0302 	orr.w	r3, r3, #2
 8009b12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009b24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d01c      	beq.n	8009b66 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f7ff fe3b 	bl	80097a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	6859      	ldr	r1, [r3, #4]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8009b74 <I2C_IsErrorOccurred+0x1bc>)
 8009b3e:	400b      	ands	r3, r1
 8009b40:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	431a      	orrs	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2220      	movs	r2, #32
 8009b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009b66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3728      	adds	r7, #40	@ 0x28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	fe00e800 	.word	0xfe00e800

08009b78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	607b      	str	r3, [r7, #4]
 8009b82:	460b      	mov	r3, r1
 8009b84:	817b      	strh	r3, [r7, #10]
 8009b86:	4613      	mov	r3, r2
 8009b88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b8a:	897b      	ldrh	r3, [r7, #10]
 8009b8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b90:	7a7b      	ldrb	r3, [r7, #9]
 8009b92:	041b      	lsls	r3, r3, #16
 8009b94:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b98:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009b9e:	6a3b      	ldr	r3, [r7, #32]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009ba6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	0d5b      	lsrs	r3, r3, #21
 8009bb2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009bb6:	4b08      	ldr	r3, [pc, #32]	@ (8009bd8 <I2C_TransferConfig+0x60>)
 8009bb8:	430b      	orrs	r3, r1
 8009bba:	43db      	mvns	r3, r3
 8009bbc:	ea02 0103 	and.w	r1, r2, r3
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	697a      	ldr	r2, [r7, #20]
 8009bc6:	430a      	orrs	r2, r1
 8009bc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009bca:	bf00      	nop
 8009bcc:	371c      	adds	r7, #28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	03ff63ff 	.word	0x03ff63ff

08009bdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b20      	cmp	r3, #32
 8009bf0:	d138      	bne.n	8009c64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d101      	bne.n	8009c00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	e032      	b.n	8009c66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2224      	movs	r2, #36	@ 0x24
 8009c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f022 0201 	bic.w	r2, r2, #1
 8009c1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009c2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	6819      	ldr	r1, [r3, #0]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	683a      	ldr	r2, [r7, #0]
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f042 0201 	orr.w	r2, r2, #1
 8009c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2220      	movs	r2, #32
 8009c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	e000      	b.n	8009c66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009c64:	2302      	movs	r3, #2
  }
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	370c      	adds	r7, #12
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr

08009c72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009c72:	b480      	push	{r7}
 8009c74:	b085      	sub	sp, #20
 8009c76:	af00      	add	r7, sp, #0
 8009c78:	6078      	str	r0, [r7, #4]
 8009c7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	2b20      	cmp	r3, #32
 8009c86:	d139      	bne.n	8009cfc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d101      	bne.n	8009c96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009c92:	2302      	movs	r3, #2
 8009c94:	e033      	b.n	8009cfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2224      	movs	r2, #36	@ 0x24
 8009ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0201 	bic.w	r2, r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009cc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	021b      	lsls	r3, r3, #8
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f042 0201 	orr.w	r2, r2, #1
 8009ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2220      	movs	r2, #32
 8009cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	e000      	b.n	8009cfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009cfc:	2302      	movs	r3, #2
  }
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3714      	adds	r7, #20
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr
	...

08009d0c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d101      	bne.n	8009d1e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e0bf      	b.n	8009e9e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d106      	bne.n	8009d38 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7f9 fd18 	bl	8003768 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2202      	movs	r2, #2
 8009d3c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009d4e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6999      	ldr	r1, [r3, #24]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	685a      	ldr	r2, [r3, #4]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d64:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	430a      	orrs	r2, r1
 8009d72:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6899      	ldr	r1, [r3, #8]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8009ea8 <HAL_LTDC_Init+0x19c>)
 8009d80:	400b      	ands	r3, r1
 8009d82:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	041b      	lsls	r3, r3, #16
 8009d8a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6899      	ldr	r1, [r3, #8]
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	699a      	ldr	r2, [r3, #24]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	431a      	orrs	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	430a      	orrs	r2, r1
 8009da0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68d9      	ldr	r1, [r3, #12]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	4b3e      	ldr	r3, [pc, #248]	@ (8009ea8 <HAL_LTDC_Init+0x19c>)
 8009dae:	400b      	ands	r3, r1
 8009db0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	69db      	ldr	r3, [r3, #28]
 8009db6:	041b      	lsls	r3, r3, #16
 8009db8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68d9      	ldr	r1, [r3, #12]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a1a      	ldr	r2, [r3, #32]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6919      	ldr	r1, [r3, #16]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	4b33      	ldr	r3, [pc, #204]	@ (8009ea8 <HAL_LTDC_Init+0x19c>)
 8009ddc:	400b      	ands	r3, r1
 8009dde:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de4:	041b      	lsls	r3, r3, #16
 8009de6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6919      	ldr	r1, [r3, #16]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	431a      	orrs	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	6959      	ldr	r1, [r3, #20]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	4b27      	ldr	r3, [pc, #156]	@ (8009ea8 <HAL_LTDC_Init+0x19c>)
 8009e0a:	400b      	ands	r3, r1
 8009e0c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e12:	041b      	lsls	r3, r3, #16
 8009e14:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6959      	ldr	r1, [r3, #20]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	430a      	orrs	r2, r1
 8009e2a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009e32:	021b      	lsls	r3, r3, #8
 8009e34:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8009e3c:	041b      	lsls	r3, r3, #16
 8009e3e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8009e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8009e62:	431a      	orrs	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f042 0206 	orr.w	r2, r2, #6
 8009e7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	699a      	ldr	r2, [r3, #24]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f042 0201 	orr.w	r2, r2, #1
 8009e8a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8009e9c:	2300      	movs	r3, #0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	f000f800 	.word	0xf000f800

08009eac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009eac:	b5b0      	push	{r4, r5, r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d101      	bne.n	8009ec6 <HAL_LTDC_ConfigLayer+0x1a>
 8009ec2:	2302      	movs	r3, #2
 8009ec4:	e02c      	b.n	8009f20 <HAL_LTDC_ConfigLayer+0x74>
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2134      	movs	r1, #52	@ 0x34
 8009edc:	fb01 f303 	mul.w	r3, r1, r3
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	4614      	mov	r4, r2
 8009eea:	461d      	mov	r5, r3
 8009eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ef0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ef2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ef4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	68b9      	ldr	r1, [r7, #8]
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f000 f81f 	bl	8009f44 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bdb0      	pop	{r4, r5, r7, pc}

08009f28 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8009f36:	b2db      	uxtb	r3, r3
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b089      	sub	sp, #36	@ 0x24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	0c1b      	lsrs	r3, r3, #16
 8009f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f60:	4413      	add	r3, r2
 8009f62:	041b      	lsls	r3, r3, #16
 8009f64:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	01db      	lsls	r3, r3, #7
 8009f70:	4413      	add	r3, r2
 8009f72:	3384      	adds	r3, #132	@ 0x84
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	4611      	mov	r1, r2
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	01d2      	lsls	r2, r2, #7
 8009f80:	440a      	add	r2, r1
 8009f82:	3284      	adds	r2, #132	@ 0x84
 8009f84:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009f88:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	0c1b      	lsrs	r3, r3, #16
 8009f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f9a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009f9c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	01db      	lsls	r3, r3, #7
 8009fa8:	440b      	add	r3, r1
 8009faa:	3384      	adds	r3, #132	@ 0x84
 8009fac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009fb2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68db      	ldr	r3, [r3, #12]
 8009fbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009fc2:	4413      	add	r3, r2
 8009fc4:	041b      	lsls	r3, r3, #16
 8009fc6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	01db      	lsls	r3, r3, #7
 8009fd2:	4413      	add	r3, r2
 8009fd4:	3384      	adds	r3, #132	@ 0x84
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	6812      	ldr	r2, [r2, #0]
 8009fdc:	4611      	mov	r1, r2
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	01d2      	lsls	r2, r2, #7
 8009fe2:	440a      	add	r2, r1
 8009fe4:	3284      	adds	r2, #132	@ 0x84
 8009fe6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8009fea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68db      	ldr	r3, [r3, #12]
 8009ff6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009ffa:	4413      	add	r3, r2
 8009ffc:	1c5a      	adds	r2, r3, #1
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4619      	mov	r1, r3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	01db      	lsls	r3, r3, #7
 800a008:	440b      	add	r3, r1
 800a00a:	3384      	adds	r3, #132	@ 0x84
 800a00c:	4619      	mov	r1, r3
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	4313      	orrs	r3, r2
 800a012:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	461a      	mov	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	01db      	lsls	r3, r3, #7
 800a01e:	4413      	add	r3, r2
 800a020:	3384      	adds	r3, #132	@ 0x84
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	6812      	ldr	r2, [r2, #0]
 800a028:	4611      	mov	r1, r2
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	01d2      	lsls	r2, r2, #7
 800a02e:	440a      	add	r2, r1
 800a030:	3284      	adds	r2, #132	@ 0x84
 800a032:	f023 0307 	bic.w	r3, r3, #7
 800a036:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	461a      	mov	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	01db      	lsls	r3, r3, #7
 800a042:	4413      	add	r3, r2
 800a044:	3384      	adds	r3, #132	@ 0x84
 800a046:	461a      	mov	r2, r3
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a054:	021b      	lsls	r3, r3, #8
 800a056:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a05e:	041b      	lsls	r3, r3, #16
 800a060:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	061b      	lsls	r3, r3, #24
 800a068:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	01db      	lsls	r3, r3, #7
 800a074:	4413      	add	r3, r2
 800a076:	3384      	adds	r3, #132	@ 0x84
 800a078:	699b      	ldr	r3, [r3, #24]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	461a      	mov	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	01db      	lsls	r3, r3, #7
 800a084:	4413      	add	r3, r2
 800a086:	3384      	adds	r3, #132	@ 0x84
 800a088:	461a      	mov	r2, r3
 800a08a:	2300      	movs	r3, #0
 800a08c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a094:	461a      	mov	r2, r3
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	431a      	orrs	r2, r3
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	431a      	orrs	r2, r3
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	01db      	lsls	r3, r3, #7
 800a0a8:	440b      	add	r3, r1
 800a0aa:	3384      	adds	r3, #132	@ 0x84
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	01db      	lsls	r3, r3, #7
 800a0be:	4413      	add	r3, r2
 800a0c0:	3384      	adds	r3, #132	@ 0x84
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	68fa      	ldr	r2, [r7, #12]
 800a0c6:	6812      	ldr	r2, [r2, #0]
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	01d2      	lsls	r2, r2, #7
 800a0ce:	440a      	add	r2, r1
 800a0d0:	3284      	adds	r2, #132	@ 0x84
 800a0d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a0d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	01db      	lsls	r3, r3, #7
 800a0e2:	4413      	add	r3, r2
 800a0e4:	3384      	adds	r3, #132	@ 0x84
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	01db      	lsls	r3, r3, #7
 800a0f8:	4413      	add	r3, r2
 800a0fa:	3384      	adds	r3, #132	@ 0x84
 800a0fc:	69da      	ldr	r2, [r3, #28]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4619      	mov	r1, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	01db      	lsls	r3, r3, #7
 800a108:	440b      	add	r3, r1
 800a10a:	3384      	adds	r3, #132	@ 0x84
 800a10c:	4619      	mov	r1, r3
 800a10e:	4b58      	ldr	r3, [pc, #352]	@ (800a270 <LTDC_SetConfig+0x32c>)
 800a110:	4013      	ands	r3, r2
 800a112:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	69da      	ldr	r2, [r3, #28]
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	6a1b      	ldr	r3, [r3, #32]
 800a11c:	68f9      	ldr	r1, [r7, #12]
 800a11e:	6809      	ldr	r1, [r1, #0]
 800a120:	4608      	mov	r0, r1
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	01c9      	lsls	r1, r1, #7
 800a126:	4401      	add	r1, r0
 800a128:	3184      	adds	r1, #132	@ 0x84
 800a12a:	4313      	orrs	r3, r2
 800a12c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	01db      	lsls	r3, r3, #7
 800a138:	4413      	add	r3, r2
 800a13a:	3384      	adds	r3, #132	@ 0x84
 800a13c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	461a      	mov	r2, r3
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	01db      	lsls	r3, r3, #7
 800a148:	4413      	add	r3, r2
 800a14a:	3384      	adds	r3, #132	@ 0x84
 800a14c:	461a      	mov	r2, r3
 800a14e:	2300      	movs	r3, #0
 800a150:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	461a      	mov	r2, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	01db      	lsls	r3, r3, #7
 800a15c:	4413      	add	r3, r2
 800a15e:	3384      	adds	r3, #132	@ 0x84
 800a160:	461a      	mov	r2, r3
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a166:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d102      	bne.n	800a176 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a170:	2304      	movs	r3, #4
 800a172:	61fb      	str	r3, [r7, #28]
 800a174:	e01b      	b.n	800a1ae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d102      	bne.n	800a184 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a17e:	2303      	movs	r3, #3
 800a180:	61fb      	str	r3, [r7, #28]
 800a182:	e014      	b.n	800a1ae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	2b04      	cmp	r3, #4
 800a18a:	d00b      	beq.n	800a1a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a190:	2b02      	cmp	r3, #2
 800a192:	d007      	beq.n	800a1a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a198:	2b03      	cmp	r3, #3
 800a19a:	d003      	beq.n	800a1a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a1a0:	2b07      	cmp	r3, #7
 800a1a2:	d102      	bne.n	800a1aa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	61fb      	str	r3, [r7, #28]
 800a1a8:	e001      	b.n	800a1ae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	01db      	lsls	r3, r3, #7
 800a1b8:	4413      	add	r3, r2
 800a1ba:	3384      	adds	r3, #132	@ 0x84
 800a1bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	6812      	ldr	r2, [r2, #0]
 800a1c2:	4611      	mov	r1, r2
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	01d2      	lsls	r2, r2, #7
 800a1c8:	440a      	add	r2, r1
 800a1ca:	3284      	adds	r2, #132	@ 0x84
 800a1cc:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800a1d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	fb02 f303 	mul.w	r3, r2, r3
 800a1dc:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6859      	ldr	r1, [r3, #4]
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	1acb      	subs	r3, r1, r3
 800a1e8:	69f9      	ldr	r1, [r7, #28]
 800a1ea:	fb01 f303 	mul.w	r3, r1, r3
 800a1ee:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800a1f0:	68f9      	ldr	r1, [r7, #12]
 800a1f2:	6809      	ldr	r1, [r1, #0]
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	01c9      	lsls	r1, r1, #7
 800a1fa:	4401      	add	r1, r0
 800a1fc:	3184      	adds	r1, #132	@ 0x84
 800a1fe:	4313      	orrs	r3, r2
 800a200:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	01db      	lsls	r3, r3, #7
 800a20c:	4413      	add	r3, r2
 800a20e:	3384      	adds	r3, #132	@ 0x84
 800a210:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4619      	mov	r1, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	01db      	lsls	r3, r3, #7
 800a21c:	440b      	add	r3, r1
 800a21e:	3384      	adds	r3, #132	@ 0x84
 800a220:	4619      	mov	r1, r3
 800a222:	4b14      	ldr	r3, [pc, #80]	@ (800a274 <LTDC_SetConfig+0x330>)
 800a224:	4013      	ands	r3, r2
 800a226:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	461a      	mov	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	01db      	lsls	r3, r3, #7
 800a232:	4413      	add	r3, r2
 800a234:	3384      	adds	r3, #132	@ 0x84
 800a236:	461a      	mov	r2, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a23c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	01db      	lsls	r3, r3, #7
 800a248:	4413      	add	r3, r2
 800a24a:	3384      	adds	r3, #132	@ 0x84
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	6812      	ldr	r2, [r2, #0]
 800a252:	4611      	mov	r1, r2
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	01d2      	lsls	r2, r2, #7
 800a258:	440a      	add	r2, r1
 800a25a:	3284      	adds	r2, #132	@ 0x84
 800a25c:	f043 0301 	orr.w	r3, r3, #1
 800a260:	6013      	str	r3, [r2, #0]
}
 800a262:	bf00      	nop
 800a264:	3724      	adds	r7, #36	@ 0x24
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop
 800a270:	fffff8f8 	.word	0xfffff8f8
 800a274:	fffff800 	.word	0xfffff800

0800a278 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a278:	b480      	push	{r7}
 800a27a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a27c:	4b05      	ldr	r3, [pc, #20]	@ (800a294 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a04      	ldr	r2, [pc, #16]	@ (800a294 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a282:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a286:	6013      	str	r3, [r2, #0]
}
 800a288:	bf00      	nop
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	40007000 	.word	0x40007000

0800a298 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a2a2:	4b23      	ldr	r3, [pc, #140]	@ (800a330 <HAL_PWREx_EnableOverDrive+0x98>)
 800a2a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2a6:	4a22      	ldr	r2, [pc, #136]	@ (800a330 <HAL_PWREx_EnableOverDrive+0x98>)
 800a2a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a2ac:	6413      	str	r3, [r2, #64]	@ 0x40
 800a2ae:	4b20      	ldr	r3, [pc, #128]	@ (800a330 <HAL_PWREx_EnableOverDrive+0x98>)
 800a2b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a2b6:	603b      	str	r3, [r7, #0]
 800a2b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a2ba:	4b1e      	ldr	r3, [pc, #120]	@ (800a334 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a1d      	ldr	r2, [pc, #116]	@ (800a334 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a2c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a2c6:	f7fd fa03 	bl	80076d0 <HAL_GetTick>
 800a2ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a2cc:	e009      	b.n	800a2e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a2ce:	f7fd f9ff 	bl	80076d0 <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a2dc:	d901      	bls.n	800a2e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e022      	b.n	800a328 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a2e2:	4b14      	ldr	r3, [pc, #80]	@ (800a334 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a2ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2ee:	d1ee      	bne.n	800a2ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a2f0:	4b10      	ldr	r3, [pc, #64]	@ (800a334 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a0f      	ldr	r2, [pc, #60]	@ (800a334 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a2f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a2fc:	f7fd f9e8 	bl	80076d0 <HAL_GetTick>
 800a300:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a302:	e009      	b.n	800a318 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a304:	f7fd f9e4 	bl	80076d0 <HAL_GetTick>
 800a308:	4602      	mov	r2, r0
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a312:	d901      	bls.n	800a318 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	e007      	b.n	800a328 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a318:	4b06      	ldr	r3, [pc, #24]	@ (800a334 <HAL_PWREx_EnableOverDrive+0x9c>)
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a324:	d1ee      	bne.n	800a304 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3708      	adds	r7, #8
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	40023800 	.word	0x40023800
 800a334:	40007000 	.word	0x40007000

0800a338 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a340:	2300      	movs	r3, #0
 800a342:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d101      	bne.n	800a34e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a34a:	2301      	movs	r3, #1
 800a34c:	e291      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	f000 8087 	beq.w	800a46a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a35c:	4b96      	ldr	r3, [pc, #600]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f003 030c 	and.w	r3, r3, #12
 800a364:	2b04      	cmp	r3, #4
 800a366:	d00c      	beq.n	800a382 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a368:	4b93      	ldr	r3, [pc, #588]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	f003 030c 	and.w	r3, r3, #12
 800a370:	2b08      	cmp	r3, #8
 800a372:	d112      	bne.n	800a39a <HAL_RCC_OscConfig+0x62>
 800a374:	4b90      	ldr	r3, [pc, #576]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a37c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a380:	d10b      	bne.n	800a39a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a382:	4b8d      	ldr	r3, [pc, #564]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d06c      	beq.n	800a468 <HAL_RCC_OscConfig+0x130>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d168      	bne.n	800a468 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e26b      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3a2:	d106      	bne.n	800a3b2 <HAL_RCC_OscConfig+0x7a>
 800a3a4:	4b84      	ldr	r3, [pc, #528]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a83      	ldr	r2, [pc, #524]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3ae:	6013      	str	r3, [r2, #0]
 800a3b0:	e02e      	b.n	800a410 <HAL_RCC_OscConfig+0xd8>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d10c      	bne.n	800a3d4 <HAL_RCC_OscConfig+0x9c>
 800a3ba:	4b7f      	ldr	r3, [pc, #508]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a7e      	ldr	r2, [pc, #504]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	4b7c      	ldr	r3, [pc, #496]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a7b      	ldr	r2, [pc, #492]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a3d0:	6013      	str	r3, [r2, #0]
 800a3d2:	e01d      	b.n	800a410 <HAL_RCC_OscConfig+0xd8>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a3dc:	d10c      	bne.n	800a3f8 <HAL_RCC_OscConfig+0xc0>
 800a3de:	4b76      	ldr	r3, [pc, #472]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a75      	ldr	r2, [pc, #468]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a3e8:	6013      	str	r3, [r2, #0]
 800a3ea:	4b73      	ldr	r3, [pc, #460]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a72      	ldr	r2, [pc, #456]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a3f4:	6013      	str	r3, [r2, #0]
 800a3f6:	e00b      	b.n	800a410 <HAL_RCC_OscConfig+0xd8>
 800a3f8:	4b6f      	ldr	r3, [pc, #444]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a6e      	ldr	r2, [pc, #440]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a3fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	4b6c      	ldr	r3, [pc, #432]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a6b      	ldr	r2, [pc, #428]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a40a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a40e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d013      	beq.n	800a440 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a418:	f7fd f95a 	bl	80076d0 <HAL_GetTick>
 800a41c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a41e:	e008      	b.n	800a432 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a420:	f7fd f956 	bl	80076d0 <HAL_GetTick>
 800a424:	4602      	mov	r2, r0
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	1ad3      	subs	r3, r2, r3
 800a42a:	2b64      	cmp	r3, #100	@ 0x64
 800a42c:	d901      	bls.n	800a432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e21f      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a432:	4b61      	ldr	r3, [pc, #388]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d0f0      	beq.n	800a420 <HAL_RCC_OscConfig+0xe8>
 800a43e:	e014      	b.n	800a46a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a440:	f7fd f946 	bl	80076d0 <HAL_GetTick>
 800a444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a446:	e008      	b.n	800a45a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a448:	f7fd f942 	bl	80076d0 <HAL_GetTick>
 800a44c:	4602      	mov	r2, r0
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	2b64      	cmp	r3, #100	@ 0x64
 800a454:	d901      	bls.n	800a45a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a456:	2303      	movs	r3, #3
 800a458:	e20b      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a45a:	4b57      	ldr	r3, [pc, #348]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1f0      	bne.n	800a448 <HAL_RCC_OscConfig+0x110>
 800a466:	e000      	b.n	800a46a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d069      	beq.n	800a54a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a476:	4b50      	ldr	r3, [pc, #320]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f003 030c 	and.w	r3, r3, #12
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00b      	beq.n	800a49a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a482:	4b4d      	ldr	r3, [pc, #308]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	f003 030c 	and.w	r3, r3, #12
 800a48a:	2b08      	cmp	r3, #8
 800a48c:	d11c      	bne.n	800a4c8 <HAL_RCC_OscConfig+0x190>
 800a48e:	4b4a      	ldr	r3, [pc, #296]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a496:	2b00      	cmp	r3, #0
 800a498:	d116      	bne.n	800a4c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a49a:	4b47      	ldr	r3, [pc, #284]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 0302 	and.w	r3, r3, #2
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d005      	beq.n	800a4b2 <HAL_RCC_OscConfig+0x17a>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d001      	beq.n	800a4b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e1df      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4b2:	4b41      	ldr	r3, [pc, #260]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	00db      	lsls	r3, r3, #3
 800a4c0:	493d      	ldr	r1, [pc, #244]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4c6:	e040      	b.n	800a54a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d023      	beq.n	800a518 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a4d0:	4b39      	ldr	r3, [pc, #228]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4a38      	ldr	r2, [pc, #224]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a4d6:	f043 0301 	orr.w	r3, r3, #1
 800a4da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4dc:	f7fd f8f8 	bl	80076d0 <HAL_GetTick>
 800a4e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4e2:	e008      	b.n	800a4f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4e4:	f7fd f8f4 	bl	80076d0 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d901      	bls.n	800a4f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e1bd      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4f6:	4b30      	ldr	r3, [pc, #192]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0f0      	beq.n	800a4e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a502:	4b2d      	ldr	r3, [pc, #180]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	00db      	lsls	r3, r3, #3
 800a510:	4929      	ldr	r1, [pc, #164]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a512:	4313      	orrs	r3, r2
 800a514:	600b      	str	r3, [r1, #0]
 800a516:	e018      	b.n	800a54a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a518:	4b27      	ldr	r3, [pc, #156]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a26      	ldr	r2, [pc, #152]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a51e:	f023 0301 	bic.w	r3, r3, #1
 800a522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a524:	f7fd f8d4 	bl	80076d0 <HAL_GetTick>
 800a528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a52a:	e008      	b.n	800a53e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a52c:	f7fd f8d0 	bl	80076d0 <HAL_GetTick>
 800a530:	4602      	mov	r2, r0
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	2b02      	cmp	r3, #2
 800a538:	d901      	bls.n	800a53e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e199      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a53e:	4b1e      	ldr	r3, [pc, #120]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f003 0302 	and.w	r3, r3, #2
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1f0      	bne.n	800a52c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f003 0308 	and.w	r3, r3, #8
 800a552:	2b00      	cmp	r3, #0
 800a554:	d038      	beq.n	800a5c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d019      	beq.n	800a592 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a55e:	4b16      	ldr	r3, [pc, #88]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a560:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a562:	4a15      	ldr	r2, [pc, #84]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a564:	f043 0301 	orr.w	r3, r3, #1
 800a568:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a56a:	f7fd f8b1 	bl	80076d0 <HAL_GetTick>
 800a56e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a570:	e008      	b.n	800a584 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a572:	f7fd f8ad 	bl	80076d0 <HAL_GetTick>
 800a576:	4602      	mov	r2, r0
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d901      	bls.n	800a584 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e176      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a584:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a586:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a588:	f003 0302 	and.w	r3, r3, #2
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d0f0      	beq.n	800a572 <HAL_RCC_OscConfig+0x23a>
 800a590:	e01a      	b.n	800a5c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a592:	4b09      	ldr	r3, [pc, #36]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a596:	4a08      	ldr	r2, [pc, #32]	@ (800a5b8 <HAL_RCC_OscConfig+0x280>)
 800a598:	f023 0301 	bic.w	r3, r3, #1
 800a59c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a59e:	f7fd f897 	bl	80076d0 <HAL_GetTick>
 800a5a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5a4:	e00a      	b.n	800a5bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a5a6:	f7fd f893 	bl	80076d0 <HAL_GetTick>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	1ad3      	subs	r3, r2, r3
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d903      	bls.n	800a5bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e15c      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
 800a5b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a5bc:	4b91      	ldr	r3, [pc, #580]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a5be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5c0:	f003 0302 	and.w	r3, r3, #2
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1ee      	bne.n	800a5a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f000 80a4 	beq.w	800a71e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5d6:	4b8b      	ldr	r3, [pc, #556]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a5d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10d      	bne.n	800a5fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5e2:	4b88      	ldr	r3, [pc, #544]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5e6:	4a87      	ldr	r2, [pc, #540]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a5e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5ec:	6413      	str	r3, [r2, #64]	@ 0x40
 800a5ee:	4b85      	ldr	r3, [pc, #532]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a5f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5f6:	60bb      	str	r3, [r7, #8]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a5fe:	4b82      	ldr	r3, [pc, #520]	@ (800a808 <HAL_RCC_OscConfig+0x4d0>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a606:	2b00      	cmp	r3, #0
 800a608:	d118      	bne.n	800a63c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a60a:	4b7f      	ldr	r3, [pc, #508]	@ (800a808 <HAL_RCC_OscConfig+0x4d0>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a7e      	ldr	r2, [pc, #504]	@ (800a808 <HAL_RCC_OscConfig+0x4d0>)
 800a610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a616:	f7fd f85b 	bl	80076d0 <HAL_GetTick>
 800a61a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a61c:	e008      	b.n	800a630 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a61e:	f7fd f857 	bl	80076d0 <HAL_GetTick>
 800a622:	4602      	mov	r2, r0
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	2b64      	cmp	r3, #100	@ 0x64
 800a62a:	d901      	bls.n	800a630 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e120      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a630:	4b75      	ldr	r3, [pc, #468]	@ (800a808 <HAL_RCC_OscConfig+0x4d0>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d0f0      	beq.n	800a61e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	2b01      	cmp	r3, #1
 800a642:	d106      	bne.n	800a652 <HAL_RCC_OscConfig+0x31a>
 800a644:	4b6f      	ldr	r3, [pc, #444]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a648:	4a6e      	ldr	r2, [pc, #440]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a64a:	f043 0301 	orr.w	r3, r3, #1
 800a64e:	6713      	str	r3, [r2, #112]	@ 0x70
 800a650:	e02d      	b.n	800a6ae <HAL_RCC_OscConfig+0x376>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10c      	bne.n	800a674 <HAL_RCC_OscConfig+0x33c>
 800a65a:	4b6a      	ldr	r3, [pc, #424]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a65c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a65e:	4a69      	ldr	r2, [pc, #420]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a660:	f023 0301 	bic.w	r3, r3, #1
 800a664:	6713      	str	r3, [r2, #112]	@ 0x70
 800a666:	4b67      	ldr	r3, [pc, #412]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a66a:	4a66      	ldr	r2, [pc, #408]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a66c:	f023 0304 	bic.w	r3, r3, #4
 800a670:	6713      	str	r3, [r2, #112]	@ 0x70
 800a672:	e01c      	b.n	800a6ae <HAL_RCC_OscConfig+0x376>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	2b05      	cmp	r3, #5
 800a67a:	d10c      	bne.n	800a696 <HAL_RCC_OscConfig+0x35e>
 800a67c:	4b61      	ldr	r3, [pc, #388]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a67e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a680:	4a60      	ldr	r2, [pc, #384]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a682:	f043 0304 	orr.w	r3, r3, #4
 800a686:	6713      	str	r3, [r2, #112]	@ 0x70
 800a688:	4b5e      	ldr	r3, [pc, #376]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a68a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a68c:	4a5d      	ldr	r2, [pc, #372]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a68e:	f043 0301 	orr.w	r3, r3, #1
 800a692:	6713      	str	r3, [r2, #112]	@ 0x70
 800a694:	e00b      	b.n	800a6ae <HAL_RCC_OscConfig+0x376>
 800a696:	4b5b      	ldr	r3, [pc, #364]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a69a:	4a5a      	ldr	r2, [pc, #360]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a69c:	f023 0301 	bic.w	r3, r3, #1
 800a6a0:	6713      	str	r3, [r2, #112]	@ 0x70
 800a6a2:	4b58      	ldr	r3, [pc, #352]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a6a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6a6:	4a57      	ldr	r2, [pc, #348]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a6a8:	f023 0304 	bic.w	r3, r3, #4
 800a6ac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d015      	beq.n	800a6e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6b6:	f7fd f80b 	bl	80076d0 <HAL_GetTick>
 800a6ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6bc:	e00a      	b.n	800a6d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6be:	f7fd f807 	bl	80076d0 <HAL_GetTick>
 800a6c2:	4602      	mov	r2, r0
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d901      	bls.n	800a6d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a6d0:	2303      	movs	r3, #3
 800a6d2:	e0ce      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6d4:	4b4b      	ldr	r3, [pc, #300]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a6d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6d8:	f003 0302 	and.w	r3, r3, #2
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d0ee      	beq.n	800a6be <HAL_RCC_OscConfig+0x386>
 800a6e0:	e014      	b.n	800a70c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a6e2:	f7fc fff5 	bl	80076d0 <HAL_GetTick>
 800a6e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6e8:	e00a      	b.n	800a700 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6ea:	f7fc fff1 	bl	80076d0 <HAL_GetTick>
 800a6ee:	4602      	mov	r2, r0
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	1ad3      	subs	r3, r2, r3
 800a6f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d901      	bls.n	800a700 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e0b8      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a700:	4b40      	ldr	r3, [pc, #256]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a704:	f003 0302 	and.w	r3, r3, #2
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1ee      	bne.n	800a6ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d105      	bne.n	800a71e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a712:	4b3c      	ldr	r3, [pc, #240]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a716:	4a3b      	ldr	r2, [pc, #236]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a71c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	699b      	ldr	r3, [r3, #24]
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 80a4 	beq.w	800a870 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a728:	4b36      	ldr	r3, [pc, #216]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	f003 030c 	and.w	r3, r3, #12
 800a730:	2b08      	cmp	r3, #8
 800a732:	d06b      	beq.n	800a80c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	699b      	ldr	r3, [r3, #24]
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d149      	bne.n	800a7d0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a73c:	4b31      	ldr	r3, [pc, #196]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a30      	ldr	r2, [pc, #192]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a742:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a746:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a748:	f7fc ffc2 	bl	80076d0 <HAL_GetTick>
 800a74c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a74e:	e008      	b.n	800a762 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a750:	f7fc ffbe 	bl	80076d0 <HAL_GetTick>
 800a754:	4602      	mov	r2, r0
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d901      	bls.n	800a762 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a75e:	2303      	movs	r3, #3
 800a760:	e087      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a762:	4b28      	ldr	r3, [pc, #160]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d1f0      	bne.n	800a750 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	69da      	ldr	r2, [r3, #28]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a1b      	ldr	r3, [r3, #32]
 800a776:	431a      	orrs	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77c:	019b      	lsls	r3, r3, #6
 800a77e:	431a      	orrs	r2, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a784:	085b      	lsrs	r3, r3, #1
 800a786:	3b01      	subs	r3, #1
 800a788:	041b      	lsls	r3, r3, #16
 800a78a:	431a      	orrs	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a790:	061b      	lsls	r3, r3, #24
 800a792:	4313      	orrs	r3, r2
 800a794:	4a1b      	ldr	r2, [pc, #108]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a796:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a79a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a79c:	4b19      	ldr	r3, [pc, #100]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a18      	ldr	r2, [pc, #96]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a7a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a7a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7a8:	f7fc ff92 	bl	80076d0 <HAL_GetTick>
 800a7ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7ae:	e008      	b.n	800a7c2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7b0:	f7fc ff8e 	bl	80076d0 <HAL_GetTick>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d901      	bls.n	800a7c2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e057      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a7c2:	4b10      	ldr	r3, [pc, #64]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d0f0      	beq.n	800a7b0 <HAL_RCC_OscConfig+0x478>
 800a7ce:	e04f      	b.n	800a870 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a0b      	ldr	r2, [pc, #44]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a7d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a7da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7dc:	f7fc ff78 	bl	80076d0 <HAL_GetTick>
 800a7e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7e2:	e008      	b.n	800a7f6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7e4:	f7fc ff74 	bl	80076d0 <HAL_GetTick>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	1ad3      	subs	r3, r2, r3
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	d901      	bls.n	800a7f6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a7f2:	2303      	movs	r3, #3
 800a7f4:	e03d      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7f6:	4b03      	ldr	r3, [pc, #12]	@ (800a804 <HAL_RCC_OscConfig+0x4cc>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1f0      	bne.n	800a7e4 <HAL_RCC_OscConfig+0x4ac>
 800a802:	e035      	b.n	800a870 <HAL_RCC_OscConfig+0x538>
 800a804:	40023800 	.word	0x40023800
 800a808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a80c:	4b1b      	ldr	r3, [pc, #108]	@ (800a87c <HAL_RCC_OscConfig+0x544>)
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	2b01      	cmp	r3, #1
 800a818:	d028      	beq.n	800a86c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a824:	429a      	cmp	r2, r3
 800a826:	d121      	bne.n	800a86c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a832:	429a      	cmp	r2, r3
 800a834:	d11a      	bne.n	800a86c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a83c:	4013      	ands	r3, r2
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a842:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a844:	4293      	cmp	r3, r2
 800a846:	d111      	bne.n	800a86c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a852:	085b      	lsrs	r3, r3, #1
 800a854:	3b01      	subs	r3, #1
 800a856:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a858:	429a      	cmp	r2, r3
 800a85a:	d107      	bne.n	800a86c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a866:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a868:	429a      	cmp	r2, r3
 800a86a:	d001      	beq.n	800a870 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e000      	b.n	800a872 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	40023800 	.word	0x40023800

0800a880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a894:	2301      	movs	r3, #1
 800a896:	e0d0      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a898:	4b6a      	ldr	r3, [pc, #424]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c4>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 030f 	and.w	r3, r3, #15
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d910      	bls.n	800a8c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8a6:	4b67      	ldr	r3, [pc, #412]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c4>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f023 020f 	bic.w	r2, r3, #15
 800a8ae:	4965      	ldr	r1, [pc, #404]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c4>)
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8b6:	4b63      	ldr	r3, [pc, #396]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c4>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 030f 	and.w	r3, r3, #15
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d001      	beq.n	800a8c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	e0b8      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f003 0302 	and.w	r3, r3, #2
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d020      	beq.n	800a916 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d005      	beq.n	800a8ec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a8e0:	4b59      	ldr	r3, [pc, #356]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	4a58      	ldr	r2, [pc, #352]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a8e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a8ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0308 	and.w	r3, r3, #8
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d005      	beq.n	800a904 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a8f8:	4b53      	ldr	r3, [pc, #332]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	4a52      	ldr	r2, [pc, #328]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a8fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a902:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a904:	4b50      	ldr	r3, [pc, #320]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	494d      	ldr	r1, [pc, #308]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a912:	4313      	orrs	r3, r2
 800a914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f003 0301 	and.w	r3, r3, #1
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d040      	beq.n	800a9a4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d107      	bne.n	800a93a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a92a:	4b47      	ldr	r3, [pc, #284]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d115      	bne.n	800a962 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a936:	2301      	movs	r3, #1
 800a938:	e07f      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d107      	bne.n	800a952 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a942:	4b41      	ldr	r3, [pc, #260]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d109      	bne.n	800a962 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e073      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a952:	4b3d      	ldr	r3, [pc, #244]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	e06b      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a962:	4b39      	ldr	r3, [pc, #228]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	f023 0203 	bic.w	r2, r3, #3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	4936      	ldr	r1, [pc, #216]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a970:	4313      	orrs	r3, r2
 800a972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a974:	f7fc feac 	bl	80076d0 <HAL_GetTick>
 800a978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a97a:	e00a      	b.n	800a992 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a97c:	f7fc fea8 	bl	80076d0 <HAL_GetTick>
 800a980:	4602      	mov	r2, r0
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	1ad3      	subs	r3, r2, r3
 800a986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d901      	bls.n	800a992 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e053      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a992:	4b2d      	ldr	r3, [pc, #180]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	f003 020c 	and.w	r2, r3, #12
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d1eb      	bne.n	800a97c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a9a4:	4b27      	ldr	r3, [pc, #156]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c4>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 030f 	and.w	r3, r3, #15
 800a9ac:	683a      	ldr	r2, [r7, #0]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d210      	bcs.n	800a9d4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9b2:	4b24      	ldr	r3, [pc, #144]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c4>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f023 020f 	bic.w	r2, r3, #15
 800a9ba:	4922      	ldr	r1, [pc, #136]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c4>)
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9c2:	4b20      	ldr	r3, [pc, #128]	@ (800aa44 <HAL_RCC_ClockConfig+0x1c4>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f003 030f 	and.w	r3, r3, #15
 800a9ca:	683a      	ldr	r2, [r7, #0]
 800a9cc:	429a      	cmp	r2, r3
 800a9ce:	d001      	beq.n	800a9d4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e032      	b.n	800aa3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d008      	beq.n	800a9f2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9e0:	4b19      	ldr	r3, [pc, #100]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	4916      	ldr	r1, [pc, #88]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 0308 	and.w	r3, r3, #8
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d009      	beq.n	800aa12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a9fe:	4b12      	ldr	r3, [pc, #72]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	691b      	ldr	r3, [r3, #16]
 800aa0a:	00db      	lsls	r3, r3, #3
 800aa0c:	490e      	ldr	r1, [pc, #56]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aa12:	f000 f821 	bl	800aa58 <HAL_RCC_GetSysClockFreq>
 800aa16:	4602      	mov	r2, r0
 800aa18:	4b0b      	ldr	r3, [pc, #44]	@ (800aa48 <HAL_RCC_ClockConfig+0x1c8>)
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	091b      	lsrs	r3, r3, #4
 800aa1e:	f003 030f 	and.w	r3, r3, #15
 800aa22:	490a      	ldr	r1, [pc, #40]	@ (800aa4c <HAL_RCC_ClockConfig+0x1cc>)
 800aa24:	5ccb      	ldrb	r3, [r1, r3]
 800aa26:	fa22 f303 	lsr.w	r3, r2, r3
 800aa2a:	4a09      	ldr	r2, [pc, #36]	@ (800aa50 <HAL_RCC_ClockConfig+0x1d0>)
 800aa2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800aa2e:	4b09      	ldr	r3, [pc, #36]	@ (800aa54 <HAL_RCC_ClockConfig+0x1d4>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4618      	mov	r0, r3
 800aa34:	f7fc fe08 	bl	8007648 <HAL_InitTick>

  return HAL_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3710      	adds	r7, #16
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	40023c00 	.word	0x40023c00
 800aa48:	40023800 	.word	0x40023800
 800aa4c:	08013068 	.word	0x08013068
 800aa50:	20004ed0 	.word	0x20004ed0
 800aa54:	20004f20 	.word	0x20004f20

0800aa58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aa5c:	b090      	sub	sp, #64	@ 0x40
 800aa5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800aa60:	2300      	movs	r3, #0
 800aa62:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa64:	2300      	movs	r3, #0
 800aa66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa68:	2300      	movs	r3, #0
 800aa6a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa70:	4b59      	ldr	r3, [pc, #356]	@ (800abd8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	f003 030c 	and.w	r3, r3, #12
 800aa78:	2b08      	cmp	r3, #8
 800aa7a:	d00d      	beq.n	800aa98 <HAL_RCC_GetSysClockFreq+0x40>
 800aa7c:	2b08      	cmp	r3, #8
 800aa7e:	f200 80a1 	bhi.w	800abc4 <HAL_RCC_GetSysClockFreq+0x16c>
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d002      	beq.n	800aa8c <HAL_RCC_GetSysClockFreq+0x34>
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d003      	beq.n	800aa92 <HAL_RCC_GetSysClockFreq+0x3a>
 800aa8a:	e09b      	b.n	800abc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aa8c:	4b53      	ldr	r3, [pc, #332]	@ (800abdc <HAL_RCC_GetSysClockFreq+0x184>)
 800aa8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aa90:	e09b      	b.n	800abca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aa92:	4b53      	ldr	r3, [pc, #332]	@ (800abe0 <HAL_RCC_GetSysClockFreq+0x188>)
 800aa94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800aa96:	e098      	b.n	800abca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aa98:	4b4f      	ldr	r3, [pc, #316]	@ (800abd8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aaa0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800aaa2:	4b4d      	ldr	r3, [pc, #308]	@ (800abd8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d028      	beq.n	800ab00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aaae:	4b4a      	ldr	r3, [pc, #296]	@ (800abd8 <HAL_RCC_GetSysClockFreq+0x180>)
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	099b      	lsrs	r3, r3, #6
 800aab4:	2200      	movs	r2, #0
 800aab6:	623b      	str	r3, [r7, #32]
 800aab8:	627a      	str	r2, [r7, #36]	@ 0x24
 800aaba:	6a3b      	ldr	r3, [r7, #32]
 800aabc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800aac0:	2100      	movs	r1, #0
 800aac2:	4b47      	ldr	r3, [pc, #284]	@ (800abe0 <HAL_RCC_GetSysClockFreq+0x188>)
 800aac4:	fb03 f201 	mul.w	r2, r3, r1
 800aac8:	2300      	movs	r3, #0
 800aaca:	fb00 f303 	mul.w	r3, r0, r3
 800aace:	4413      	add	r3, r2
 800aad0:	4a43      	ldr	r2, [pc, #268]	@ (800abe0 <HAL_RCC_GetSysClockFreq+0x188>)
 800aad2:	fba0 1202 	umull	r1, r2, r0, r2
 800aad6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aad8:	460a      	mov	r2, r1
 800aada:	62ba      	str	r2, [r7, #40]	@ 0x28
 800aadc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aade:	4413      	add	r3, r2
 800aae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aae4:	2200      	movs	r2, #0
 800aae6:	61bb      	str	r3, [r7, #24]
 800aae8:	61fa      	str	r2, [r7, #28]
 800aaea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aaee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800aaf2:	f7f6 f8c9 	bl	8000c88 <__aeabi_uldivmod>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	460b      	mov	r3, r1
 800aafa:	4613      	mov	r3, r2
 800aafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aafe:	e053      	b.n	800aba8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab00:	4b35      	ldr	r3, [pc, #212]	@ (800abd8 <HAL_RCC_GetSysClockFreq+0x180>)
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	099b      	lsrs	r3, r3, #6
 800ab06:	2200      	movs	r2, #0
 800ab08:	613b      	str	r3, [r7, #16]
 800ab0a:	617a      	str	r2, [r7, #20]
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800ab12:	f04f 0b00 	mov.w	fp, #0
 800ab16:	4652      	mov	r2, sl
 800ab18:	465b      	mov	r3, fp
 800ab1a:	f04f 0000 	mov.w	r0, #0
 800ab1e:	f04f 0100 	mov.w	r1, #0
 800ab22:	0159      	lsls	r1, r3, #5
 800ab24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ab28:	0150      	lsls	r0, r2, #5
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	ebb2 080a 	subs.w	r8, r2, sl
 800ab32:	eb63 090b 	sbc.w	r9, r3, fp
 800ab36:	f04f 0200 	mov.w	r2, #0
 800ab3a:	f04f 0300 	mov.w	r3, #0
 800ab3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800ab42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800ab46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800ab4a:	ebb2 0408 	subs.w	r4, r2, r8
 800ab4e:	eb63 0509 	sbc.w	r5, r3, r9
 800ab52:	f04f 0200 	mov.w	r2, #0
 800ab56:	f04f 0300 	mov.w	r3, #0
 800ab5a:	00eb      	lsls	r3, r5, #3
 800ab5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ab60:	00e2      	lsls	r2, r4, #3
 800ab62:	4614      	mov	r4, r2
 800ab64:	461d      	mov	r5, r3
 800ab66:	eb14 030a 	adds.w	r3, r4, sl
 800ab6a:	603b      	str	r3, [r7, #0]
 800ab6c:	eb45 030b 	adc.w	r3, r5, fp
 800ab70:	607b      	str	r3, [r7, #4]
 800ab72:	f04f 0200 	mov.w	r2, #0
 800ab76:	f04f 0300 	mov.w	r3, #0
 800ab7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ab7e:	4629      	mov	r1, r5
 800ab80:	028b      	lsls	r3, r1, #10
 800ab82:	4621      	mov	r1, r4
 800ab84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ab88:	4621      	mov	r1, r4
 800ab8a:	028a      	lsls	r2, r1, #10
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab92:	2200      	movs	r2, #0
 800ab94:	60bb      	str	r3, [r7, #8]
 800ab96:	60fa      	str	r2, [r7, #12]
 800ab98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ab9c:	f7f6 f874 	bl	8000c88 <__aeabi_uldivmod>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4613      	mov	r3, r2
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800aba8:	4b0b      	ldr	r3, [pc, #44]	@ (800abd8 <HAL_RCC_GetSysClockFreq+0x180>)
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	0c1b      	lsrs	r3, r3, #16
 800abae:	f003 0303 	and.w	r3, r3, #3
 800abb2:	3301      	adds	r3, #1
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800abb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800abba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800abc2:	e002      	b.n	800abca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800abc4:	4b05      	ldr	r3, [pc, #20]	@ (800abdc <HAL_RCC_GetSysClockFreq+0x184>)
 800abc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800abc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800abca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3740      	adds	r7, #64	@ 0x40
 800abd0:	46bd      	mov	sp, r7
 800abd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800abd6:	bf00      	nop
 800abd8:	40023800 	.word	0x40023800
 800abdc:	00f42400 	.word	0x00f42400
 800abe0:	017d7840 	.word	0x017d7840

0800abe4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abe4:	b480      	push	{r7}
 800abe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800abe8:	4b03      	ldr	r3, [pc, #12]	@ (800abf8 <HAL_RCC_GetHCLKFreq+0x14>)
 800abea:	681b      	ldr	r3, [r3, #0]
}
 800abec:	4618      	mov	r0, r3
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	20004ed0 	.word	0x20004ed0

0800abfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ac00:	f7ff fff0 	bl	800abe4 <HAL_RCC_GetHCLKFreq>
 800ac04:	4602      	mov	r2, r0
 800ac06:	4b05      	ldr	r3, [pc, #20]	@ (800ac1c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	0a9b      	lsrs	r3, r3, #10
 800ac0c:	f003 0307 	and.w	r3, r3, #7
 800ac10:	4903      	ldr	r1, [pc, #12]	@ (800ac20 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac12:	5ccb      	ldrb	r3, [r1, r3]
 800ac14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	40023800 	.word	0x40023800
 800ac20:	08013078 	.word	0x08013078

0800ac24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ac28:	f7ff ffdc 	bl	800abe4 <HAL_RCC_GetHCLKFreq>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	4b05      	ldr	r3, [pc, #20]	@ (800ac44 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	0b5b      	lsrs	r3, r3, #13
 800ac34:	f003 0307 	and.w	r3, r3, #7
 800ac38:	4903      	ldr	r1, [pc, #12]	@ (800ac48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac3a:	5ccb      	ldrb	r3, [r1, r3]
 800ac3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	40023800 	.word	0x40023800
 800ac48:	08013078 	.word	0x08013078

0800ac4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ac60:	2300      	movs	r3, #0
 800ac62:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f003 0301 	and.w	r3, r3, #1
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d012      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ac74:	4b69      	ldr	r3, [pc, #420]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	4a68      	ldr	r2, [pc, #416]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac7a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ac7e:	6093      	str	r3, [r2, #8]
 800ac80:	4b66      	ldr	r3, [pc, #408]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac82:	689a      	ldr	r2, [r3, #8]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac88:	4964      	ldr	r1, [pc, #400]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d101      	bne.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ac96:	2301      	movs	r3, #1
 800ac98:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d017      	beq.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aca6:	4b5d      	ldr	r3, [pc, #372]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800acac:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acb4:	4959      	ldr	r1, [pc, #356]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acb6:	4313      	orrs	r3, r2
 800acb8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acc0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800acc4:	d101      	bne.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800acc6:	2301      	movs	r3, #1
 800acc8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800acd2:	2301      	movs	r3, #1
 800acd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d017      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ace2:	4b4e      	ldr	r3, [pc, #312]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ace4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ace8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf0:	494a      	ldr	r1, [pc, #296]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acf2:	4313      	orrs	r3, r2
 800acf4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad00:	d101      	bne.n	800ad06 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800ad02:	2301      	movs	r3, #1
 800ad04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d101      	bne.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0320 	and.w	r3, r3, #32
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 808b 	beq.w	800ae46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ad30:	4b3a      	ldr	r3, [pc, #232]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad34:	4a39      	ldr	r2, [pc, #228]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad3a:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad3c:	4b37      	ldr	r3, [pc, #220]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad44:	60bb      	str	r3, [r7, #8]
 800ad46:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad48:	4b35      	ldr	r3, [pc, #212]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a34      	ldr	r2, [pc, #208]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad54:	f7fc fcbc 	bl	80076d0 <HAL_GetTick>
 800ad58:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ad5a:	e008      	b.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad5c:	f7fc fcb8 	bl	80076d0 <HAL_GetTick>
 800ad60:	4602      	mov	r2, r0
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	1ad3      	subs	r3, r2, r3
 800ad66:	2b64      	cmp	r3, #100	@ 0x64
 800ad68:	d901      	bls.n	800ad6e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ad6a:	2303      	movs	r3, #3
 800ad6c:	e357      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ad6e:	4b2c      	ldr	r3, [pc, #176]	@ (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d0f0      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ad7a:	4b28      	ldr	r3, [pc, #160]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad82:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d035      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d02e      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ad98:	4b20      	ldr	r3, [pc, #128]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ad9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ada0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ada2:	4b1e      	ldr	r3, [pc, #120]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ada4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ada6:	4a1d      	ldr	r2, [pc, #116]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ada8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800adac:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800adae:	4b1b      	ldr	r3, [pc, #108]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adb2:	4a1a      	ldr	r2, [pc, #104]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adb8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800adba:	4a18      	ldr	r2, [pc, #96]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800adc0:	4b16      	ldr	r3, [pc, #88]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adc4:	f003 0301 	and.w	r3, r3, #1
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d114      	bne.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adcc:	f7fc fc80 	bl	80076d0 <HAL_GetTick>
 800add0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800add2:	e00a      	b.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800add4:	f7fc fc7c 	bl	80076d0 <HAL_GetTick>
 800add8:	4602      	mov	r2, r0
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d901      	bls.n	800adea <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e319      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800adea:	4b0c      	ldr	r3, [pc, #48]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800adec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adee:	f003 0302 	and.w	r3, r3, #2
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d0ee      	beq.n	800add4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800adfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae02:	d111      	bne.n	800ae28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ae04:	4b05      	ldr	r3, [pc, #20]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae06:	689b      	ldr	r3, [r3, #8]
 800ae08:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ae10:	4b04      	ldr	r3, [pc, #16]	@ (800ae24 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ae12:	400b      	ands	r3, r1
 800ae14:	4901      	ldr	r1, [pc, #4]	@ (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ae16:	4313      	orrs	r3, r2
 800ae18:	608b      	str	r3, [r1, #8]
 800ae1a:	e00b      	b.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ae1c:	40023800 	.word	0x40023800
 800ae20:	40007000 	.word	0x40007000
 800ae24:	0ffffcff 	.word	0x0ffffcff
 800ae28:	4baa      	ldr	r3, [pc, #680]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	4aa9      	ldr	r2, [pc, #676]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae2e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800ae32:	6093      	str	r3, [r2, #8]
 800ae34:	4ba7      	ldr	r3, [pc, #668]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae40:	49a4      	ldr	r1, [pc, #656]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae42:	4313      	orrs	r3, r2
 800ae44:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 0310 	and.w	r3, r3, #16
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d010      	beq.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae52:	4ba0      	ldr	r3, [pc, #640]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ae58:	4a9e      	ldr	r2, [pc, #632]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae5e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800ae62:	4b9c      	ldr	r3, [pc, #624]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae64:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae6c:	4999      	ldr	r1, [pc, #612]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d00a      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ae80:	4b94      	ldr	r3, [pc, #592]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae86:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ae8e:	4991      	ldr	r1, [pc, #580]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ae90:	4313      	orrs	r3, r2
 800ae92:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00a      	beq.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aea2:	4b8c      	ldr	r3, [pc, #560]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aea8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aeb0:	4988      	ldr	r1, [pc, #544]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d00a      	beq.n	800aeda <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aec4:	4b83      	ldr	r3, [pc, #524]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aed2:	4980      	ldr	r1, [pc, #512]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aed4:	4313      	orrs	r3, r2
 800aed6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00a      	beq.n	800aefc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800aee6:	4b7b      	ldr	r3, [pc, #492]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aeec:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aef4:	4977      	ldr	r1, [pc, #476]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aef6:	4313      	orrs	r3, r2
 800aef8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00a      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af08:	4b72      	ldr	r3, [pc, #456]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af0e:	f023 0203 	bic.w	r2, r3, #3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af16:	496f      	ldr	r1, [pc, #444]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af18:	4313      	orrs	r3, r2
 800af1a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800af2a:	4b6a      	ldr	r3, [pc, #424]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af30:	f023 020c 	bic.w	r2, r3, #12
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af38:	4966      	ldr	r1, [pc, #408]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00a      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800af4c:	4b61      	ldr	r3, [pc, #388]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af52:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800af5a:	495e      	ldr	r1, [pc, #376]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af5c:	4313      	orrs	r3, r2
 800af5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800af6e:	4b59      	ldr	r3, [pc, #356]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af74:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af7c:	4955      	ldr	r1, [pc, #340]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00a      	beq.n	800afa6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800af90:	4b50      	ldr	r3, [pc, #320]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800af92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800af96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af9e:	494d      	ldr	r1, [pc, #308]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00a      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800afb2:	4b48      	ldr	r3, [pc, #288]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afb8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800afc0:	4944      	ldr	r1, [pc, #272]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afc2:	4313      	orrs	r3, r2
 800afc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00a      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800afd4:	4b3f      	ldr	r3, [pc, #252]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800afda:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afe2:	493c      	ldr	r1, [pc, #240]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800afe4:	4313      	orrs	r3, r2
 800afe6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00a      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800aff6:	4b37      	ldr	r3, [pc, #220]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800aff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800affc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b004:	4933      	ldr	r1, [pc, #204]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b006:	4313      	orrs	r3, r2
 800b008:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d00a      	beq.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b018:	4b2e      	ldr	r3, [pc, #184]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b01a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b01e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b026:	492b      	ldr	r1, [pc, #172]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b028:	4313      	orrs	r3, r2
 800b02a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b036:	2b00      	cmp	r3, #0
 800b038:	d011      	beq.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b03a:	4b26      	ldr	r3, [pc, #152]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b03c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b040:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b048:	4922      	ldr	r1, [pc, #136]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b058:	d101      	bne.n	800b05e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b05a:	2301      	movs	r3, #1
 800b05c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 0308 	and.w	r3, r3, #8
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b06a:	2301      	movs	r3, #1
 800b06c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b076:	2b00      	cmp	r3, #0
 800b078:	d00a      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b07a:	4b16      	ldr	r3, [pc, #88]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b07c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b080:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b088:	4912      	ldr	r1, [pc, #72]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d00b      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b09c:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0a2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b0ac:	4909      	ldr	r1, [pc, #36]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d006      	beq.n	800b0c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 80d9 	beq.w	800b27a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b0c8:	4b02      	ldr	r3, [pc, #8]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a01      	ldr	r2, [pc, #4]	@ (800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b0ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b0d2:	e001      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800b0d4:	40023800 	.word	0x40023800
 800b0d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0da:	f7fc faf9 	bl	80076d0 <HAL_GetTick>
 800b0de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b0e0:	e008      	b.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b0e2:	f7fc faf5 	bl	80076d0 <HAL_GetTick>
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	2b64      	cmp	r3, #100	@ 0x64
 800b0ee:	d901      	bls.n	800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	e194      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b0f4:	4b6c      	ldr	r3, [pc, #432]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1f0      	bne.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d021      	beq.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b110:	2b00      	cmp	r3, #0
 800b112:	d11d      	bne.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b114:	4b64      	ldr	r3, [pc, #400]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b116:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b11a:	0c1b      	lsrs	r3, r3, #16
 800b11c:	f003 0303 	and.w	r3, r3, #3
 800b120:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b122:	4b61      	ldr	r3, [pc, #388]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b124:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b128:	0e1b      	lsrs	r3, r3, #24
 800b12a:	f003 030f 	and.w	r3, r3, #15
 800b12e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	019a      	lsls	r2, r3, #6
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	041b      	lsls	r3, r3, #16
 800b13a:	431a      	orrs	r2, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	061b      	lsls	r3, r3, #24
 800b140:	431a      	orrs	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	071b      	lsls	r3, r3, #28
 800b148:	4957      	ldr	r1, [pc, #348]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d004      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b160:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b164:	d00a      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d02e      	beq.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b176:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b17a:	d129      	bne.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b17c:	4b4a      	ldr	r3, [pc, #296]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b17e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b182:	0c1b      	lsrs	r3, r3, #16
 800b184:	f003 0303 	and.w	r3, r3, #3
 800b188:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b18a:	4b47      	ldr	r3, [pc, #284]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b18c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b190:	0f1b      	lsrs	r3, r3, #28
 800b192:	f003 0307 	and.w	r3, r3, #7
 800b196:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	019a      	lsls	r2, r3, #6
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	041b      	lsls	r3, r3, #16
 800b1a2:	431a      	orrs	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	061b      	lsls	r3, r3, #24
 800b1aa:	431a      	orrs	r2, r3
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	071b      	lsls	r3, r3, #28
 800b1b0:	493d      	ldr	r1, [pc, #244]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b1b8:	4b3b      	ldr	r3, [pc, #236]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1be:	f023 021f 	bic.w	r2, r3, #31
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	4937      	ldr	r1, [pc, #220]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d01d      	beq.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b1dc:	4b32      	ldr	r3, [pc, #200]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1e2:	0e1b      	lsrs	r3, r3, #24
 800b1e4:	f003 030f 	and.w	r3, r3, #15
 800b1e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b1ea:	4b2f      	ldr	r3, [pc, #188]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b1ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1f0:	0f1b      	lsrs	r3, r3, #28
 800b1f2:	f003 0307 	and.w	r3, r3, #7
 800b1f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	019a      	lsls	r2, r3, #6
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	041b      	lsls	r3, r3, #16
 800b204:	431a      	orrs	r2, r3
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	061b      	lsls	r3, r3, #24
 800b20a:	431a      	orrs	r2, r3
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	071b      	lsls	r3, r3, #28
 800b210:	4925      	ldr	r1, [pc, #148]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b212:	4313      	orrs	r3, r2
 800b214:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d011      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	019a      	lsls	r2, r3, #6
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	041b      	lsls	r3, r3, #16
 800b230:	431a      	orrs	r2, r3
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	68db      	ldr	r3, [r3, #12]
 800b236:	061b      	lsls	r3, r3, #24
 800b238:	431a      	orrs	r2, r3
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	689b      	ldr	r3, [r3, #8]
 800b23e:	071b      	lsls	r3, r3, #28
 800b240:	4919      	ldr	r1, [pc, #100]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b242:	4313      	orrs	r3, r2
 800b244:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b248:	4b17      	ldr	r3, [pc, #92]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a16      	ldr	r2, [pc, #88]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b24e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b254:	f7fc fa3c 	bl	80076d0 <HAL_GetTick>
 800b258:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b25a:	e008      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b25c:	f7fc fa38 	bl	80076d0 <HAL_GetTick>
 800b260:	4602      	mov	r2, r0
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	2b64      	cmp	r3, #100	@ 0x64
 800b268:	d901      	bls.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b26a:	2303      	movs	r3, #3
 800b26c:	e0d7      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b26e:	4b0e      	ldr	r3, [pc, #56]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b276:	2b00      	cmp	r3, #0
 800b278:	d0f0      	beq.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	2b01      	cmp	r3, #1
 800b27e:	f040 80cd 	bne.w	800b41c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b282:	4b09      	ldr	r3, [pc, #36]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a08      	ldr	r2, [pc, #32]	@ (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800b288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b28c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b28e:	f7fc fa1f 	bl	80076d0 <HAL_GetTick>
 800b292:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b294:	e00a      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b296:	f7fc fa1b 	bl	80076d0 <HAL_GetTick>
 800b29a:	4602      	mov	r2, r0
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	2b64      	cmp	r3, #100	@ 0x64
 800b2a2:	d903      	bls.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e0ba      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800b2a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b2ac:	4b5e      	ldr	r3, [pc, #376]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2b8:	d0ed      	beq.n	800b296 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d003      	beq.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x682>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d009      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d02e      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d12a      	bne.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b2e2:	4b51      	ldr	r3, [pc, #324]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b2e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2e8:	0c1b      	lsrs	r3, r3, #16
 800b2ea:	f003 0303 	and.w	r3, r3, #3
 800b2ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b2f0:	4b4d      	ldr	r3, [pc, #308]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2f6:	0f1b      	lsrs	r3, r3, #28
 800b2f8:	f003 0307 	and.w	r3, r3, #7
 800b2fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	019a      	lsls	r2, r3, #6
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	041b      	lsls	r3, r3, #16
 800b308:	431a      	orrs	r2, r3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	061b      	lsls	r3, r3, #24
 800b310:	431a      	orrs	r2, r3
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	071b      	lsls	r3, r3, #28
 800b316:	4944      	ldr	r1, [pc, #272]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b318:	4313      	orrs	r3, r2
 800b31a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b31e:	4b42      	ldr	r3, [pc, #264]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b324:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b32c:	3b01      	subs	r3, #1
 800b32e:	021b      	lsls	r3, r3, #8
 800b330:	493d      	ldr	r1, [pc, #244]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b332:	4313      	orrs	r3, r2
 800b334:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d022      	beq.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b348:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b34c:	d11d      	bne.n	800b38a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b34e:	4b36      	ldr	r3, [pc, #216]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b354:	0e1b      	lsrs	r3, r3, #24
 800b356:	f003 030f 	and.w	r3, r3, #15
 800b35a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b35c:	4b32      	ldr	r3, [pc, #200]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b35e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b362:	0f1b      	lsrs	r3, r3, #28
 800b364:	f003 0307 	and.w	r3, r3, #7
 800b368:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	019a      	lsls	r2, r3, #6
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6a1b      	ldr	r3, [r3, #32]
 800b374:	041b      	lsls	r3, r3, #16
 800b376:	431a      	orrs	r2, r3
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	061b      	lsls	r3, r3, #24
 800b37c:	431a      	orrs	r2, r3
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	071b      	lsls	r3, r3, #28
 800b382:	4929      	ldr	r1, [pc, #164]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b384:	4313      	orrs	r3, r2
 800b386:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0308 	and.w	r3, r3, #8
 800b392:	2b00      	cmp	r3, #0
 800b394:	d028      	beq.n	800b3e8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b396:	4b24      	ldr	r3, [pc, #144]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b39c:	0e1b      	lsrs	r3, r3, #24
 800b39e:	f003 030f 	and.w	r3, r3, #15
 800b3a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b3a4:	4b20      	ldr	r3, [pc, #128]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3aa:	0c1b      	lsrs	r3, r3, #16
 800b3ac:	f003 0303 	and.w	r3, r3, #3
 800b3b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	695b      	ldr	r3, [r3, #20]
 800b3b6:	019a      	lsls	r2, r3, #6
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	041b      	lsls	r3, r3, #16
 800b3bc:	431a      	orrs	r2, r3
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	061b      	lsls	r3, r3, #24
 800b3c2:	431a      	orrs	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	69db      	ldr	r3, [r3, #28]
 800b3c8:	071b      	lsls	r3, r3, #28
 800b3ca:	4917      	ldr	r1, [pc, #92]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800b3d2:	4b15      	ldr	r3, [pc, #84]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b3d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e0:	4911      	ldr	r1, [pc, #68]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b3e8:	4b0f      	ldr	r3, [pc, #60]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a0e      	ldr	r2, [pc, #56]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b3ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3f4:	f7fc f96c 	bl	80076d0 <HAL_GetTick>
 800b3f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b3fa:	e008      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b3fc:	f7fc f968 	bl	80076d0 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	2b64      	cmp	r3, #100	@ 0x64
 800b408:	d901      	bls.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e007      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b40e:	4b06      	ldr	r3, [pc, #24]	@ (800b428 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b41a:	d1ef      	bne.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800b41c:	2300      	movs	r3, #0
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3720      	adds	r7, #32
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	40023800 	.word	0x40023800

0800b42c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e071      	b.n	800b526 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	7f5b      	ldrb	r3, [r3, #29]
 800b446:	b2db      	uxtb	r3, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d105      	bne.n	800b458 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7f9 f9b6 	bl	80047c4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68db      	ldr	r3, [r3, #12]
 800b464:	f003 0310 	and.w	r3, r3, #16
 800b468:	2b10      	cmp	r3, #16
 800b46a:	d053      	beq.n	800b514 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	22ca      	movs	r2, #202	@ 0xca
 800b472:	625a      	str	r2, [r3, #36]	@ 0x24
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	2253      	movs	r2, #83	@ 0x53
 800b47a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fbdf 	bl	800bc40 <RTC_EnterInitMode>
 800b482:	4603      	mov	r3, r0
 800b484:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800b486:	7bfb      	ldrb	r3, [r7, #15]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d12a      	bne.n	800b4e2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	6899      	ldr	r1, [r3, #8]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	4b26      	ldr	r3, [pc, #152]	@ (800b530 <HAL_RTC_Init+0x104>)
 800b498:	400b      	ands	r3, r1
 800b49a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6899      	ldr	r1, [r3, #8]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	685a      	ldr	r2, [r3, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	695b      	ldr	r3, [r3, #20]
 800b4b0:	431a      	orrs	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	430a      	orrs	r2, r1
 800b4b8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	68d2      	ldr	r2, [r2, #12]
 800b4c2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	6919      	ldr	r1, [r3, #16]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	041a      	lsls	r2, r3, #16
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800b4d8:	6878      	ldr	r0, [r7, #4]
 800b4da:	f000 fbe8 	bl	800bcae <RTC_ExitInitMode>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b4e2:	7bfb      	ldrb	r3, [r7, #15]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d110      	bne.n	800b50a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f022 0208 	bic.w	r2, r2, #8
 800b4f6:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	699a      	ldr	r2, [r3, #24]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	430a      	orrs	r2, r1
 800b508:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	22ff      	movs	r2, #255	@ 0xff
 800b510:	625a      	str	r2, [r3, #36]	@ 0x24
 800b512:	e001      	b.n	800b518 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800b514:	2300      	movs	r3, #0
 800b516:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800b518:	7bfb      	ldrb	r3, [r7, #15]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d102      	bne.n	800b524 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	ff8fffbf 	.word	0xff8fffbf

0800b534 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b534:	b590      	push	{r4, r7, lr}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b540:	2300      	movs	r3, #0
 800b542:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	7f1b      	ldrb	r3, [r3, #28]
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d101      	bne.n	800b550 <HAL_RTC_SetTime+0x1c>
 800b54c:	2302      	movs	r3, #2
 800b54e:	e085      	b.n	800b65c <HAL_RTC_SetTime+0x128>
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	2201      	movs	r2, #1
 800b554:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2202      	movs	r2, #2
 800b55a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d126      	bne.n	800b5b0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d102      	bne.n	800b576 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2200      	movs	r2, #0
 800b574:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 fbbc 	bl	800bcf8 <RTC_ByteToBcd2>
 800b580:	4603      	mov	r3, r0
 800b582:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	785b      	ldrb	r3, [r3, #1]
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 fbb5 	bl	800bcf8 <RTC_ByteToBcd2>
 800b58e:	4603      	mov	r3, r0
 800b590:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b592:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	789b      	ldrb	r3, [r3, #2]
 800b598:	4618      	mov	r0, r3
 800b59a:	f000 fbad 	bl	800bcf8 <RTC_ByteToBcd2>
 800b59e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b5a0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	78db      	ldrb	r3, [r3, #3]
 800b5a8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800b5aa:	4313      	orrs	r3, r2
 800b5ac:	617b      	str	r3, [r7, #20]
 800b5ae:	e018      	b.n	800b5e2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d102      	bne.n	800b5c4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	785b      	ldrb	r3, [r3, #1]
 800b5ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b5d0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800b5d2:	68ba      	ldr	r2, [r7, #8]
 800b5d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800b5d6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	78db      	ldrb	r3, [r3, #3]
 800b5dc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800b5de:	4313      	orrs	r3, r2
 800b5e0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	22ca      	movs	r2, #202	@ 0xca
 800b5e8:	625a      	str	r2, [r3, #36]	@ 0x24
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	2253      	movs	r2, #83	@ 0x53
 800b5f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f000 fb24 	bl	800bc40 <RTC_EnterInitMode>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b5fc:	7cfb      	ldrb	r3, [r7, #19]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d11e      	bne.n	800b640 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	6979      	ldr	r1, [r7, #20]
 800b608:	4b16      	ldr	r3, [pc, #88]	@ (800b664 <HAL_RTC_SetTime+0x130>)
 800b60a:	400b      	ands	r3, r1
 800b60c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	689a      	ldr	r2, [r3, #8]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b61c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	6899      	ldr	r1, [r3, #8]
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	68da      	ldr	r2, [r3, #12]
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	691b      	ldr	r3, [r3, #16]
 800b62c:	431a      	orrs	r2, r3
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	430a      	orrs	r2, r1
 800b634:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f000 fb39 	bl	800bcae <RTC_ExitInitMode>
 800b63c:	4603      	mov	r3, r0
 800b63e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b640:	7cfb      	ldrb	r3, [r7, #19]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d102      	bne.n	800b64c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2201      	movs	r2, #1
 800b64a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	22ff      	movs	r2, #255	@ 0xff
 800b652:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	2200      	movs	r2, #0
 800b658:	771a      	strb	r2, [r3, #28]

  return status;
 800b65a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	371c      	adds	r7, #28
 800b660:	46bd      	mov	sp, r7
 800b662:	bd90      	pop	{r4, r7, pc}
 800b664:	007f7f7f 	.word	0x007f7f7f

0800b668 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b674:	2300      	movs	r3, #0
 800b676:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	4b22      	ldr	r3, [pc, #136]	@ (800b720 <HAL_RTC_GetTime+0xb8>)
 800b698:	4013      	ands	r3, r2
 800b69a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	0c1b      	lsrs	r3, r3, #16
 800b6a0:	b2db      	uxtb	r3, r3
 800b6a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b6a6:	b2da      	uxtb	r2, r3
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	0a1b      	lsrs	r3, r3, #8
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	b2db      	uxtb	r3, r3
 800b6c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6c4:	b2da      	uxtb	r2, r3
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	0d9b      	lsrs	r3, r3, #22
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	f003 0301 	and.w	r3, r3, #1
 800b6d4:	b2da      	uxtb	r2, r3
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d11a      	bne.n	800b716 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 fb25 	bl	800bd34 <RTC_Bcd2ToByte>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	785b      	ldrb	r3, [r3, #1]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 fb1c 	bl	800bd34 <RTC_Bcd2ToByte>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	461a      	mov	r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	789b      	ldrb	r3, [r3, #2]
 800b708:	4618      	mov	r0, r3
 800b70a:	f000 fb13 	bl	800bd34 <RTC_Bcd2ToByte>
 800b70e:	4603      	mov	r3, r0
 800b710:	461a      	mov	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b716:	2300      	movs	r3, #0
}
 800b718:	4618      	mov	r0, r3
 800b71a:	3718      	adds	r7, #24
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	007f7f7f 	.word	0x007f7f7f

0800b724 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b724:	b590      	push	{r4, r7, lr}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b730:	2300      	movs	r3, #0
 800b732:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	7f1b      	ldrb	r3, [r3, #28]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d101      	bne.n	800b740 <HAL_RTC_SetDate+0x1c>
 800b73c:	2302      	movs	r3, #2
 800b73e:	e06f      	b.n	800b820 <HAL_RTC_SetDate+0xfc>
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2201      	movs	r2, #1
 800b744:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2202      	movs	r2, #2
 800b74a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10e      	bne.n	800b770 <HAL_RTC_SetDate+0x4c>
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	785b      	ldrb	r3, [r3, #1]
 800b756:	f003 0310 	and.w	r3, r3, #16
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d008      	beq.n	800b770 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	785b      	ldrb	r3, [r3, #1]
 800b762:	f023 0310 	bic.w	r3, r3, #16
 800b766:	b2db      	uxtb	r3, r3
 800b768:	330a      	adds	r3, #10
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d11c      	bne.n	800b7b0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	78db      	ldrb	r3, [r3, #3]
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 fabc 	bl	800bcf8 <RTC_ByteToBcd2>
 800b780:	4603      	mov	r3, r0
 800b782:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	785b      	ldrb	r3, [r3, #1]
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 fab5 	bl	800bcf8 <RTC_ByteToBcd2>
 800b78e:	4603      	mov	r3, r0
 800b790:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b792:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	789b      	ldrb	r3, [r3, #2]
 800b798:	4618      	mov	r0, r3
 800b79a:	f000 faad 	bl	800bcf8 <RTC_ByteToBcd2>
 800b79e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b7a0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	781b      	ldrb	r3, [r3, #0]
 800b7a8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	e00e      	b.n	800b7ce <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	78db      	ldrb	r3, [r3, #3]
 800b7b4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	785b      	ldrb	r3, [r3, #1]
 800b7ba:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7bc:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800b7be:	68ba      	ldr	r2, [r7, #8]
 800b7c0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800b7c2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	22ca      	movs	r2, #202	@ 0xca
 800b7d4:	625a      	str	r2, [r3, #36]	@ 0x24
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2253      	movs	r2, #83	@ 0x53
 800b7dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b7de:	68f8      	ldr	r0, [r7, #12]
 800b7e0:	f000 fa2e 	bl	800bc40 <RTC_EnterInitMode>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800b7e8:	7cfb      	ldrb	r3, [r7, #19]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10a      	bne.n	800b804 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681a      	ldr	r2, [r3, #0]
 800b7f2:	6979      	ldr	r1, [r7, #20]
 800b7f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b828 <HAL_RTC_SetDate+0x104>)
 800b7f6:	400b      	ands	r3, r1
 800b7f8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 fa57 	bl	800bcae <RTC_ExitInitMode>
 800b800:	4603      	mov	r3, r0
 800b802:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b804:	7cfb      	ldrb	r3, [r7, #19]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d102      	bne.n	800b810 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2201      	movs	r2, #1
 800b80e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	22ff      	movs	r2, #255	@ 0xff
 800b816:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	771a      	strb	r2, [r3, #28]

  return status;
 800b81e:	7cfb      	ldrb	r3, [r7, #19]
}
 800b820:	4618      	mov	r0, r3
 800b822:	371c      	adds	r7, #28
 800b824:	46bd      	mov	sp, r7
 800b826:	bd90      	pop	{r4, r7, pc}
 800b828:	00ffff3f 	.word	0x00ffff3f

0800b82c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b086      	sub	sp, #24
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b838:	2300      	movs	r3, #0
 800b83a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	685a      	ldr	r2, [r3, #4]
 800b842:	4b21      	ldr	r3, [pc, #132]	@ (800b8c8 <HAL_RTC_GetDate+0x9c>)
 800b844:	4013      	ands	r3, r2
 800b846:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	0c1b      	lsrs	r3, r3, #16
 800b84c:	b2da      	uxtb	r2, r3
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	0a1b      	lsrs	r3, r3, #8
 800b856:	b2db      	uxtb	r3, r3
 800b858:	f003 031f 	and.w	r3, r3, #31
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	68bb      	ldr	r3, [r7, #8]
 800b860:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	b2db      	uxtb	r3, r3
 800b866:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	0b5b      	lsrs	r3, r3, #13
 800b874:	b2db      	uxtb	r3, r3
 800b876:	f003 0307 	and.w	r3, r3, #7
 800b87a:	b2da      	uxtb	r2, r3
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d11a      	bne.n	800b8bc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	78db      	ldrb	r3, [r3, #3]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fa52 	bl	800bd34 <RTC_Bcd2ToByte>
 800b890:	4603      	mov	r3, r0
 800b892:	461a      	mov	r2, r3
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	785b      	ldrb	r3, [r3, #1]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 fa49 	bl	800bd34 <RTC_Bcd2ToByte>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	789b      	ldrb	r3, [r3, #2]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 fa40 	bl	800bd34 <RTC_Bcd2ToByte>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3718      	adds	r7, #24
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	00ffff3f 	.word	0x00ffff3f

0800b8cc <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800b8cc:	b590      	push	{r4, r7, lr}
 800b8ce:	b089      	sub	sp, #36	@ 0x24
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800b8d8:	4b9b      	ldr	r3, [pc, #620]	@ (800bb48 <HAL_RTC_SetAlarm_IT+0x27c>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a9b      	ldr	r2, [pc, #620]	@ (800bb4c <HAL_RTC_SetAlarm_IT+0x280>)
 800b8de:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e2:	0adb      	lsrs	r3, r3, #11
 800b8e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b8e8:	fb02 f303 	mul.w	r3, r2, r3
 800b8ec:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	7f1b      	ldrb	r3, [r3, #28]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d101      	bne.n	800b902 <HAL_RTC_SetAlarm_IT+0x36>
 800b8fe:	2302      	movs	r3, #2
 800b900:	e11e      	b.n	800bb40 <HAL_RTC_SetAlarm_IT+0x274>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2201      	movs	r2, #1
 800b906:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2202      	movs	r2, #2
 800b90c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d137      	bne.n	800b984 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d102      	bne.n	800b928 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	2200      	movs	r2, #0
 800b926:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f000 f9e3 	bl	800bcf8 <RTC_ByteToBcd2>
 800b932:	4603      	mov	r3, r0
 800b934:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	785b      	ldrb	r3, [r3, #1]
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 f9dc 	bl	800bcf8 <RTC_ByteToBcd2>
 800b940:	4603      	mov	r3, r0
 800b942:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b944:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	789b      	ldrb	r3, [r3, #2]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 f9d4 	bl	800bcf8 <RTC_ByteToBcd2>
 800b950:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800b952:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	78db      	ldrb	r3, [r3, #3]
 800b95a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800b95c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b966:	4618      	mov	r0, r3
 800b968:	f000 f9c6 	bl	800bcf8 <RTC_ByteToBcd2>
 800b96c:	4603      	mov	r3, r0
 800b96e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800b970:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800b978:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800b97e:	4313      	orrs	r3, r2
 800b980:	61fb      	str	r3, [r7, #28]
 800b982:	e023      	b.n	800b9cc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d102      	bne.n	800b998 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2200      	movs	r2, #0
 800b996:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	785b      	ldrb	r3, [r3, #1]
 800b9a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b9a4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b9a6:	68ba      	ldr	r2, [r7, #8]
 800b9a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800b9aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	78db      	ldrb	r3, [r3, #3]
 800b9b0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800b9b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b9ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800b9bc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800b9c2:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	22ca      	movs	r2, #202	@ 0xca
 800b9de:	625a      	str	r2, [r3, #36]	@ 0x24
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2253      	movs	r2, #83	@ 0x53
 800b9e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9f0:	d142      	bne.n	800ba78 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	689a      	ldr	r2, [r3, #8]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ba00:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800ba12:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	3b01      	subs	r3, #1
 800ba18:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10b      	bne.n	800ba38 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	22ff      	movs	r2, #255	@ 0xff
 800ba26:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2203      	movs	r2, #3
 800ba2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ba34:	2303      	movs	r3, #3
 800ba36:	e083      	b.n	800bb40 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68db      	ldr	r3, [r3, #12]
 800ba3e:	f003 0301 	and.w	r3, r3, #1
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d0e6      	beq.n	800ba14 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	69fa      	ldr	r2, [r7, #28]
 800ba4c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	69ba      	ldr	r2, [r7, #24]
 800ba54:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	689a      	ldr	r2, [r3, #8]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba64:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	689a      	ldr	r2, [r3, #8]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ba74:	609a      	str	r2, [r3, #8]
 800ba76:	e04c      	b.n	800bb12 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	689a      	ldr	r2, [r3, #8]
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800ba86:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	b2da      	uxtb	r2, r3
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800ba98:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800ba9a:	4b2b      	ldr	r3, [pc, #172]	@ (800bb48 <HAL_RTC_SetAlarm_IT+0x27c>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4a2b      	ldr	r2, [pc, #172]	@ (800bb4c <HAL_RTC_SetAlarm_IT+0x280>)
 800baa0:	fba2 2303 	umull	r2, r3, r2, r3
 800baa4:	0adb      	lsrs	r3, r3, #11
 800baa6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800baaa:	fb02 f303 	mul.w	r3, r2, r3
 800baae:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	3b01      	subs	r3, #1
 800bab4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10b      	bne.n	800bad4 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	22ff      	movs	r2, #255	@ 0xff
 800bac2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2203      	movs	r2, #3
 800bac8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bad0:	2303      	movs	r3, #3
 800bad2:	e035      	b.n	800bb40 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	68db      	ldr	r3, [r3, #12]
 800bada:	f003 0302 	and.w	r3, r3, #2
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d0e6      	beq.n	800bab0 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	69fa      	ldr	r2, [r7, #28]
 800bae8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	69ba      	ldr	r2, [r7, #24]
 800baf0:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb00:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	689a      	ldr	r2, [r3, #8]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bb10:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800bb12:	4b0f      	ldr	r3, [pc, #60]	@ (800bb50 <HAL_RTC_SetAlarm_IT+0x284>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a0e      	ldr	r2, [pc, #56]	@ (800bb50 <HAL_RTC_SetAlarm_IT+0x284>)
 800bb18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb1c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800bb1e:	4b0c      	ldr	r3, [pc, #48]	@ (800bb50 <HAL_RTC_SetAlarm_IT+0x284>)
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	4a0b      	ldr	r2, [pc, #44]	@ (800bb50 <HAL_RTC_SetAlarm_IT+0x284>)
 800bb24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb28:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	22ff      	movs	r2, #255	@ 0xff
 800bb30:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2201      	movs	r2, #1
 800bb36:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3724      	adds	r7, #36	@ 0x24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd90      	pop	{r4, r7, pc}
 800bb48:	20004ed0 	.word	0x20004ed0
 800bb4c:	10624dd3 	.word	0x10624dd3
 800bb50:	40013c00 	.word	0x40013c00

0800bb54 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800bb5c:	4b1f      	ldr	r3, [pc, #124]	@ (800bbdc <HAL_RTC_AlarmIRQHandler+0x88>)
 800bb5e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800bb62:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d012      	beq.n	800bb98 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d00b      	beq.n	800bb98 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800bb90:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f824 	bl	800bbe0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d012      	beq.n	800bbcc <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68db      	ldr	r3, [r3, #12]
 800bbac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00b      	beq.n	800bbcc <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68db      	ldr	r3, [r3, #12]
 800bbba:	b2da      	uxtb	r2, r3
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800bbc4:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f9c2 	bl	800bf50 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	775a      	strb	r2, [r3, #29]
}
 800bbd2:	bf00      	nop
 800bbd4:	3708      	adds	r7, #8
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	40013c00 	.word	0x40013c00

0800bbe0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a0d      	ldr	r2, [pc, #52]	@ (800bc3c <HAL_RTC_WaitForSynchro+0x48>)
 800bc06:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bc08:	f7fb fd62 	bl	80076d0 <HAL_GetTick>
 800bc0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bc0e:	e009      	b.n	800bc24 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bc10:	f7fb fd5e 	bl	80076d0 <HAL_GetTick>
 800bc14:	4602      	mov	r2, r0
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	1ad3      	subs	r3, r2, r3
 800bc1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc1e:	d901      	bls.n	800bc24 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e007      	b.n	800bc34 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	f003 0320 	and.w	r3, r3, #32
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d0ee      	beq.n	800bc10 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}
 800bc3c:	0001ff5f 	.word	0x0001ff5f

0800bc40 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d122      	bne.n	800bca4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68da      	ldr	r2, [r3, #12]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800bc6c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bc6e:	f7fb fd2f 	bl	80076d0 <HAL_GetTick>
 800bc72:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bc74:	e00c      	b.n	800bc90 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bc76:	f7fb fd2b 	bl	80076d0 <HAL_GetTick>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bc84:	d904      	bls.n	800bc90 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2204      	movs	r2, #4
 800bc8a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d102      	bne.n	800bca4 <RTC_EnterInitMode+0x64>
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d1e8      	bne.n	800bc76 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	68da      	ldr	r2, [r3, #12]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bcc8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	689b      	ldr	r3, [r3, #8]
 800bcd0:	f003 0320 	and.w	r3, r3, #32
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d10a      	bne.n	800bcee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff ff8b 	bl	800bbf4 <HAL_RTC_WaitForSynchro>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d004      	beq.n	800bcee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2204      	movs	r2, #4
 800bce8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bcee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800bd02:	2300      	movs	r3, #0
 800bd04:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800bd06:	e005      	b.n	800bd14 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800bd0e:	79fb      	ldrb	r3, [r7, #7]
 800bd10:	3b0a      	subs	r3, #10
 800bd12:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800bd14:	79fb      	ldrb	r3, [r7, #7]
 800bd16:	2b09      	cmp	r3, #9
 800bd18:	d8f6      	bhi.n	800bd08 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	79fb      	ldrb	r3, [r7, #7]
 800bd24:	4313      	orrs	r3, r2
 800bd26:	b2db      	uxtb	r3, r3
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3714      	adds	r7, #20
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800bd42:	79fb      	ldrb	r3, [r7, #7]
 800bd44:	091b      	lsrs	r3, r3, #4
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	461a      	mov	r2, r3
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	4413      	add	r3, r2
 800bd50:	005b      	lsls	r3, r3, #1
 800bd52:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	79fb      	ldrb	r3, [r7, #7]
 800bd5a:	f003 030f 	and.w	r3, r3, #15
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	4413      	add	r3, r2
 800bd62:	b2db      	uxtb	r3, r3
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3714      	adds	r7, #20
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b087      	sub	sp, #28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800bd7c:	4b5a      	ldr	r3, [pc, #360]	@ (800bee8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a5a      	ldr	r2, [pc, #360]	@ (800beec <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800bd82:	fba2 2303 	umull	r2, r3, r2, r3
 800bd86:	0adb      	lsrs	r3, r3, #11
 800bd88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bd8c:	fb02 f303 	mul.w	r3, r2, r3
 800bd90:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	7f1b      	ldrb	r3, [r3, #28]
 800bd96:	2b01      	cmp	r3, #1
 800bd98:	d101      	bne.n	800bd9e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800bd9a:	2302      	movs	r3, #2
 800bd9c:	e09d      	b.n	800beda <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2201      	movs	r2, #1
 800bda2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2202      	movs	r2, #2
 800bda8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	22ca      	movs	r2, #202	@ 0xca
 800bdb0:	625a      	str	r2, [r3, #36]	@ 0x24
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	2253      	movs	r2, #83	@ 0x53
 800bdb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d018      	beq.n	800bdfa <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10b      	bne.n	800bdec <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	22ff      	movs	r2, #255	@ 0xff
 800bdda:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2203      	movs	r2, #3
 800bde0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2200      	movs	r2, #0
 800bde6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bde8:	2303      	movs	r3, #3
 800bdea:	e076      	b.n	800beda <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	f003 0304 	and.w	r3, r3, #4
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1e6      	bne.n	800bdc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	689a      	ldr	r2, [r3, #8]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be08:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	b2da      	uxtb	r2, r3
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800be1a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800be1c:	4b32      	ldr	r3, [pc, #200]	@ (800bee8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	4a32      	ldr	r2, [pc, #200]	@ (800beec <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800be22:	fba2 2303 	umull	r2, r3, r2, r3
 800be26:	0adb      	lsrs	r3, r3, #11
 800be28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800be2c:	fb02 f303 	mul.w	r3, r2, r3
 800be30:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	3b01      	subs	r3, #1
 800be36:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10b      	bne.n	800be56 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	22ff      	movs	r2, #255	@ 0xff
 800be44:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2203      	movs	r2, #3
 800be4a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	2200      	movs	r2, #0
 800be50:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800be52:	2303      	movs	r3, #3
 800be54:	e041      	b.n	800beda <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	f003 0304 	and.w	r3, r3, #4
 800be60:	2b00      	cmp	r3, #0
 800be62:	d0e6      	beq.n	800be32 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	689a      	ldr	r2, [r3, #8]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f022 0207 	bic.w	r2, r2, #7
 800be72:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6899      	ldr	r1, [r3, #8]
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	430a      	orrs	r2, r1
 800be82:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800be8c:	4b18      	ldr	r3, [pc, #96]	@ (800bef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a17      	ldr	r2, [pc, #92]	@ (800bef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800be92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800be96:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800be98:	4b15      	ldr	r3, [pc, #84]	@ (800bef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800be9a:	689b      	ldr	r3, [r3, #8]
 800be9c:	4a14      	ldr	r2, [pc, #80]	@ (800bef0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800be9e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bea2:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	689a      	ldr	r2, [r3, #8]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800beb2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689a      	ldr	r2, [r3, #8]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bec2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	22ff      	movs	r2, #255	@ 0xff
 800beca:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2201      	movs	r2, #1
 800bed0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	371c      	adds	r7, #28
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	20004ed0 	.word	0x20004ed0
 800beec:	10624dd3 	.word	0x10624dd3
 800bef0:	40013c00 	.word	0x40013c00

0800bef4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800befc:	4b0e      	ldr	r3, [pc, #56]	@ (800bf38 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800befe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800bf02:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00b      	beq.n	800bf2a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	b2da      	uxtb	r2, r3
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800bf22:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 f809 	bl	800bf3c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	775a      	strb	r2, [r3, #29]
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	40013c00 	.word	0x40013c00

0800bf3c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800bf44:	bf00      	nop
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800bf58:	bf00      	nop
 800bf5a:	370c      	adds	r7, #12
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr

0800bf64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d101      	bne.n	800bf76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	e022      	b.n	800bfbc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d105      	bne.n	800bf8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7f8 fc79 	bl	8004880 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2203      	movs	r2, #3
 800bf92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f000 f814 	bl	800bfc4 <HAL_SD_InitCard>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d001      	beq.n	800bfa6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e00a      	b.n	800bfbc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bfc4:	b5b0      	push	{r4, r5, r7, lr}
 800bfc6:	b08e      	sub	sp, #56	@ 0x38
 800bfc8:	af04      	add	r7, sp, #16
 800bfca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800bfe0:	2376      	movs	r3, #118	@ 0x76
 800bfe2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681d      	ldr	r5, [r3, #0]
 800bfe8:	466c      	mov	r4, sp
 800bfea:	f107 0314 	add.w	r3, r7, #20
 800bfee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bff2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bff6:	f107 0308 	add.w	r3, r7, #8
 800bffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bffc:	4628      	mov	r0, r5
 800bffe:	f002 fc99 	bl	800e934 <SDMMC_Init>
 800c002:	4603      	mov	r3, r0
 800c004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800c008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d001      	beq.n	800c014 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c010:	2301      	movs	r3, #1
 800c012:	e059      	b.n	800c0c8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	685a      	ldr	r2, [r3, #4]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c022:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4618      	mov	r0, r3
 800c02a:	f002 fccd 	bl	800e9c8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	685a      	ldr	r2, [r3, #4]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c03c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c03e:	2002      	movs	r0, #2
 800c040:	f7fb fb52 	bl	80076e8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f000 fe67 	bl	800cd18 <SD_PowerON>
 800c04a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c04c:	6a3b      	ldr	r3, [r7, #32]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00b      	beq.n	800c06a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2201      	movs	r2, #1
 800c056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c05e:	6a3b      	ldr	r3, [r7, #32]
 800c060:	431a      	orrs	r2, r3
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c066:	2301      	movs	r3, #1
 800c068:	e02e      	b.n	800c0c8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 fd86 	bl	800cb7c <SD_InitCard>
 800c070:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c072:	6a3b      	ldr	r3, [r7, #32]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00b      	beq.n	800c090 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c084:	6a3b      	ldr	r3, [r7, #32]
 800c086:	431a      	orrs	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	e01b      	b.n	800c0c8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c098:	4618      	mov	r0, r3
 800c09a:	f002 fd27 	bl	800eaec <SDMMC_CmdBlockLength>
 800c09e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0a0:	6a3b      	ldr	r3, [r7, #32]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d00f      	beq.n	800c0c6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a09      	ldr	r2, [pc, #36]	@ (800c0d0 <HAL_SD_InitCard+0x10c>)
 800c0ac:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0b2:	6a3b      	ldr	r3, [r7, #32]
 800c0b4:	431a      	orrs	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2201      	movs	r2, #1
 800c0be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	e000      	b.n	800c0c8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800c0c6:	2300      	movs	r3, #0
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3728      	adds	r7, #40	@ 0x28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bdb0      	pop	{r4, r5, r7, pc}
 800c0d0:	004005ff 	.word	0x004005ff

0800c0d4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b092      	sub	sp, #72	@ 0x48
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]
 800c0e0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c0e2:	f7fb faf5 	bl	80076d0 <HAL_GetTick>
 800c0e6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d107      	bne.n	800c106 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	e1bd      	b.n	800c482 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	2b01      	cmp	r3, #1
 800c110:	f040 81b0 	bne.w	800c474 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c11a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	441a      	add	r2, r3
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c124:	429a      	cmp	r2, r3
 800c126:	d907      	bls.n	800c138 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c12c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	e1a4      	b.n	800c482 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2203      	movs	r2, #3
 800c13c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2200      	movs	r2, #0
 800c146:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d002      	beq.n	800c156 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c152:	025b      	lsls	r3, r3, #9
 800c154:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c156:	f04f 33ff 	mov.w	r3, #4294967295
 800c15a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	025b      	lsls	r3, r3, #9
 800c160:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c162:	2390      	movs	r3, #144	@ 0x90
 800c164:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c166:	2302      	movs	r3, #2
 800c168:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c16e:	2301      	movs	r3, #1
 800c170:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f107 0214 	add.w	r2, r7, #20
 800c17a:	4611      	mov	r1, r2
 800c17c:	4618      	mov	r0, r3
 800c17e:	f002 fc89 	bl	800ea94 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	2b01      	cmp	r3, #1
 800c186:	d90a      	bls.n	800c19e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2202      	movs	r2, #2
 800c18c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c194:	4618      	mov	r0, r3
 800c196:	f002 fced 	bl	800eb74 <SDMMC_CmdReadMultiBlock>
 800c19a:	6478      	str	r0, [r7, #68]	@ 0x44
 800c19c:	e009      	b.n	800c1b2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2201      	movs	r2, #1
 800c1a2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f002 fcc0 	bl	800eb30 <SDMMC_CmdReadSingleBlock>
 800c1b0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d012      	beq.n	800c1de <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a7a      	ldr	r2, [pc, #488]	@ (800c3a8 <HAL_SD_ReadBlocks+0x2d4>)
 800c1be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c1c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1c6:	431a      	orrs	r2, r3
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e151      	b.n	800c482 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800c1de:	69bb      	ldr	r3, [r7, #24]
 800c1e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c1e2:	e061      	b.n	800c2a8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d03c      	beq.n	800c26c <HAL_SD_ReadBlocks+0x198>
 800c1f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d039      	beq.n	800c26c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1fc:	e033      	b.n	800c266 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4618      	mov	r0, r3
 800c204:	f002 fbc2 	bl	800e98c <SDMMC_ReadFIFO>
 800c208:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c210:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c214:	3301      	adds	r3, #1
 800c216:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c218:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c21a:	3b01      	subs	r3, #1
 800c21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c220:	0a1b      	lsrs	r3, r3, #8
 800c222:	b2da      	uxtb	r2, r3
 800c224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c226:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c22a:	3301      	adds	r3, #1
 800c22c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c230:	3b01      	subs	r3, #1
 800c232:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c236:	0c1b      	lsrs	r3, r3, #16
 800c238:	b2da      	uxtb	r2, r3
 800c23a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c23c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c23e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c240:	3301      	adds	r3, #1
 800c242:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c246:	3b01      	subs	r3, #1
 800c248:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c24c:	0e1b      	lsrs	r3, r3, #24
 800c24e:	b2da      	uxtb	r2, r3
 800c250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c252:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c256:	3301      	adds	r3, #1
 800c258:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c25a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c25c:	3b01      	subs	r3, #1
 800c25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800c260:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c262:	3301      	adds	r3, #1
 800c264:	643b      	str	r3, [r7, #64]	@ 0x40
 800c266:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c268:	2b07      	cmp	r3, #7
 800c26a:	d9c8      	bls.n	800c1fe <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c26c:	f7fb fa30 	bl	80076d0 <HAL_GetTick>
 800c270:	4602      	mov	r2, r0
 800c272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c278:	429a      	cmp	r2, r3
 800c27a:	d902      	bls.n	800c282 <HAL_SD_ReadBlocks+0x1ae>
 800c27c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d112      	bne.n	800c2a8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	4a48      	ldr	r2, [pc, #288]	@ (800c3a8 <HAL_SD_ReadBlocks+0x2d4>)
 800c288:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c28e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2201      	movs	r2, #1
 800c29a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	e0ec      	b.n	800c482 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2ae:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d096      	beq.n	800c1e4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d022      	beq.n	800c30a <HAL_SD_ReadBlocks+0x236>
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d91f      	bls.n	800c30a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c2ce:	2b03      	cmp	r3, #3
 800c2d0:	d01b      	beq.n	800c30a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f002 fcb2 	bl	800ec40 <SDMMC_CmdStopTransfer>
 800c2dc:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c2de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d012      	beq.n	800c30a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a2f      	ldr	r2, [pc, #188]	@ (800c3a8 <HAL_SD_ReadBlocks+0x2d4>)
 800c2ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2f2:	431a      	orrs	r2, r3
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2200      	movs	r2, #0
 800c304:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e0bb      	b.n	800c482 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c310:	f003 0308 	and.w	r3, r3, #8
 800c314:	2b00      	cmp	r3, #0
 800c316:	d012      	beq.n	800c33e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a22      	ldr	r2, [pc, #136]	@ (800c3a8 <HAL_SD_ReadBlocks+0x2d4>)
 800c31e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c324:	f043 0208 	orr.w	r2, r3, #8
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2201      	movs	r2, #1
 800c330:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e0a1      	b.n	800c482 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c344:	f003 0302 	and.w	r3, r3, #2
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d012      	beq.n	800c372 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a15      	ldr	r2, [pc, #84]	@ (800c3a8 <HAL_SD_ReadBlocks+0x2d4>)
 800c352:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c358:	f043 0202 	orr.w	r2, r3, #2
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2201      	movs	r2, #1
 800c364:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c36e:	2301      	movs	r3, #1
 800c370:	e087      	b.n	800c482 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c378:	f003 0320 	and.w	r3, r3, #32
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d064      	beq.n	800c44a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a08      	ldr	r2, [pc, #32]	@ (800c3a8 <HAL_SD_ReadBlocks+0x2d4>)
 800c386:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c38c:	f043 0220 	orr.w	r2, r3, #32
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2201      	movs	r2, #1
 800c398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2200      	movs	r2, #0
 800c3a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c3a2:	2301      	movs	r3, #1
 800c3a4:	e06d      	b.n	800c482 <HAL_SD_ReadBlocks+0x3ae>
 800c3a6:	bf00      	nop
 800c3a8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f002 faeb 	bl	800e98c <SDMMC_ReadFIFO>
 800c3b6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800c3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ba:	b2da      	uxtb	r2, r3
 800c3bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3be:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c3c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c3c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c3cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ce:	0a1b      	lsrs	r3, r3, #8
 800c3d0:	b2da      	uxtb	r2, r3
 800c3d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3d4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c3d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3d8:	3301      	adds	r3, #1
 800c3da:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c3dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c3e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e4:	0c1b      	lsrs	r3, r3, #16
 800c3e6:	b2da      	uxtb	r2, r3
 800c3e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c3f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fa:	0e1b      	lsrs	r3, r3, #24
 800c3fc:	b2da      	uxtb	r2, r3
 800c3fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c400:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800c402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c404:	3301      	adds	r3, #1
 800c406:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800c408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c40a:	3b01      	subs	r3, #1
 800c40c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c40e:	f7fb f95f 	bl	80076d0 <HAL_GetTick>
 800c412:	4602      	mov	r2, r0
 800c414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d902      	bls.n	800c424 <HAL_SD_ReadBlocks+0x350>
 800c41e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c420:	2b00      	cmp	r3, #0
 800c422:	d112      	bne.n	800c44a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a18      	ldr	r2, [pc, #96]	@ (800c48c <HAL_SD_ReadBlocks+0x3b8>)
 800c42a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c430:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2201      	movs	r2, #1
 800c43c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	e01b      	b.n	800c482 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c450:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <HAL_SD_ReadBlocks+0x38a>
 800c458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d1a6      	bne.n	800c3ac <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c466:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800c470:	2300      	movs	r3, #0
 800c472:	e006      	b.n	800c482 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c478:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c480:	2301      	movs	r3, #1
  }
}
 800c482:	4618      	mov	r0, r3
 800c484:	3748      	adds	r7, #72	@ 0x48
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	004005ff 	.word	0x004005ff

0800c490 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b092      	sub	sp, #72	@ 0x48
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c49e:	f7fb f917 	bl	80076d0 <HAL_GetTick>
 800c4a2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d107      	bne.n	800c4c2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4b6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e165      	b.n	800c78e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	f040 8158 	bne.w	800c780 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c4d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	441a      	add	r2, r3
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c4e0:	429a      	cmp	r2, r3
 800c4e2:	d907      	bls.n	800c4f4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e14c      	b.n	800c78e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2203      	movs	r2, #3
 800c4f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2200      	movs	r2, #0
 800c502:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c508:	2b01      	cmp	r3, #1
 800c50a:	d002      	beq.n	800c512 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800c50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50e:	025b      	lsls	r3, r3, #9
 800c510:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c512:	f04f 33ff 	mov.w	r3, #4294967295
 800c516:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	025b      	lsls	r3, r3, #9
 800c51c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c51e:	2390      	movs	r3, #144	@ 0x90
 800c520:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c522:	2300      	movs	r3, #0
 800c524:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c526:	2300      	movs	r3, #0
 800c528:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800c52a:	2301      	movs	r3, #1
 800c52c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f107 0218 	add.w	r2, r7, #24
 800c536:	4611      	mov	r1, r2
 800c538:	4618      	mov	r0, r3
 800c53a:	f002 faab 	bl	800ea94 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d90a      	bls.n	800c55a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2220      	movs	r2, #32
 800c548:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c550:	4618      	mov	r0, r3
 800c552:	f002 fb53 	bl	800ebfc <SDMMC_CmdWriteMultiBlock>
 800c556:	6478      	str	r0, [r7, #68]	@ 0x44
 800c558:	e009      	b.n	800c56e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2210      	movs	r2, #16
 800c55e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c566:	4618      	mov	r0, r3
 800c568:	f002 fb26 	bl	800ebb8 <SDMMC_CmdWriteSingleBlock>
 800c56c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c56e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c570:	2b00      	cmp	r3, #0
 800c572:	d012      	beq.n	800c59a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a87      	ldr	r2, [pc, #540]	@ (800c798 <HAL_SD_WriteBlocks+0x308>)
 800c57a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c582:	431a      	orrs	r2, r3
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2201      	movs	r2, #1
 800c58c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	e0f9      	b.n	800c78e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c59e:	e065      	b.n	800c66c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c5a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d040      	beq.n	800c630 <HAL_SD_WriteBlocks+0x1a0>
 800c5ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d03d      	beq.n	800c630 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c5b8:	e037      	b.n	800c62a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800c5ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c5c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5c2:	3301      	adds	r3, #1
 800c5c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c8:	3b01      	subs	r3, #1
 800c5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800c5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	021a      	lsls	r2, r3, #8
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c5d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5da:	3301      	adds	r3, #1
 800c5dc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c5de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e0:	3b01      	subs	r3, #1
 800c5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800c5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	041a      	lsls	r2, r3, #16
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5f2:	3301      	adds	r3, #1
 800c5f4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800c5fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	061a      	lsls	r2, r3, #24
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	4313      	orrs	r3, r2
 800c606:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800c608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c60a:	3301      	adds	r3, #1
 800c60c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800c60e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c610:	3b01      	subs	r3, #1
 800c612:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f107 0214 	add.w	r2, r7, #20
 800c61c:	4611      	mov	r1, r2
 800c61e:	4618      	mov	r0, r3
 800c620:	f002 f9c1 	bl	800e9a6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800c624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c626:	3301      	adds	r3, #1
 800c628:	643b      	str	r3, [r7, #64]	@ 0x40
 800c62a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c62c:	2b07      	cmp	r3, #7
 800c62e:	d9c4      	bls.n	800c5ba <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c630:	f7fb f84e 	bl	80076d0 <HAL_GetTick>
 800c634:	4602      	mov	r2, r0
 800c636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c638:	1ad3      	subs	r3, r2, r3
 800c63a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d902      	bls.n	800c646 <HAL_SD_WriteBlocks+0x1b6>
 800c640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c642:	2b00      	cmp	r3, #0
 800c644:	d112      	bne.n	800c66c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	4a53      	ldr	r2, [pc, #332]	@ (800c798 <HAL_SD_WriteBlocks+0x308>)
 800c64c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c654:	431a      	orrs	r2, r3
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2201      	movs	r2, #1
 800c65e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2200      	movs	r2, #0
 800c666:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800c668:	2303      	movs	r3, #3
 800c66a:	e090      	b.n	800c78e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c672:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800c676:	2b00      	cmp	r3, #0
 800c678:	d092      	beq.n	800c5a0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c684:	2b00      	cmp	r3, #0
 800c686:	d022      	beq.n	800c6ce <HAL_SD_WriteBlocks+0x23e>
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d91f      	bls.n	800c6ce <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c692:	2b03      	cmp	r3, #3
 800c694:	d01b      	beq.n	800c6ce <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4618      	mov	r0, r3
 800c69c:	f002 fad0 	bl	800ec40 <SDMMC_CmdStopTransfer>
 800c6a0:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c6a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d012      	beq.n	800c6ce <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a3a      	ldr	r2, [pc, #232]	@ (800c798 <HAL_SD_WriteBlocks+0x308>)
 800c6ae:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6b6:	431a      	orrs	r2, r3
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2201      	movs	r2, #1
 800c6c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e05f      	b.n	800c78e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6d4:	f003 0308 	and.w	r3, r3, #8
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d012      	beq.n	800c702 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a2d      	ldr	r2, [pc, #180]	@ (800c798 <HAL_SD_WriteBlocks+0x308>)
 800c6e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6e8:	f043 0208 	orr.w	r2, r3, #8
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	e045      	b.n	800c78e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c708:	f003 0302 	and.w	r3, r3, #2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d012      	beq.n	800c736 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a20      	ldr	r2, [pc, #128]	@ (800c798 <HAL_SD_WriteBlocks+0x308>)
 800c716:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c71c:	f043 0202 	orr.w	r2, r3, #2
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	2201      	movs	r2, #1
 800c728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2200      	movs	r2, #0
 800c730:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c732:	2301      	movs	r3, #1
 800c734:	e02b      	b.n	800c78e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c73c:	f003 0310 	and.w	r3, r3, #16
 800c740:	2b00      	cmp	r3, #0
 800c742:	d012      	beq.n	800c76a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a13      	ldr	r2, [pc, #76]	@ (800c798 <HAL_SD_WriteBlocks+0x308>)
 800c74a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c750:	f043 0210 	orr.w	r2, r3, #16
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2201      	movs	r2, #1
 800c75c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e011      	b.n	800c78e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f240 523a 	movw	r2, #1338	@ 0x53a
 800c772:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800c77c:	2300      	movs	r3, #0
 800c77e:	e006      	b.n	800c78e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c784:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
  }
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3748      	adds	r7, #72	@ 0x48
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	004005ff 	.word	0x004005ff

0800c79c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7aa:	0f9b      	lsrs	r3, r3, #30
 800c7ac:	b2da      	uxtb	r2, r3
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7b6:	0e9b      	lsrs	r3, r3, #26
 800c7b8:	b2db      	uxtb	r3, r3
 800c7ba:	f003 030f 	and.w	r3, r3, #15
 800c7be:	b2da      	uxtb	r2, r3
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7c8:	0e1b      	lsrs	r3, r3, #24
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	f003 0303 	and.w	r3, r3, #3
 800c7d0:	b2da      	uxtb	r2, r3
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7da:	0c1b      	lsrs	r3, r3, #16
 800c7dc:	b2da      	uxtb	r2, r3
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7e6:	0a1b      	lsrs	r3, r3, #8
 800c7e8:	b2da      	uxtb	r2, r3
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c7f2:	b2da      	uxtb	r2, r3
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c7fc:	0d1b      	lsrs	r3, r3, #20
 800c7fe:	b29a      	uxth	r2, r3
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c808:	0c1b      	lsrs	r3, r3, #16
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	f003 030f 	and.w	r3, r3, #15
 800c810:	b2da      	uxtb	r2, r3
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c81a:	0bdb      	lsrs	r3, r3, #15
 800c81c:	b2db      	uxtb	r3, r3
 800c81e:	f003 0301 	and.w	r3, r3, #1
 800c822:	b2da      	uxtb	r2, r3
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c82c:	0b9b      	lsrs	r3, r3, #14
 800c82e:	b2db      	uxtb	r3, r3
 800c830:	f003 0301 	and.w	r3, r3, #1
 800c834:	b2da      	uxtb	r2, r3
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c83e:	0b5b      	lsrs	r3, r3, #13
 800c840:	b2db      	uxtb	r3, r3
 800c842:	f003 0301 	and.w	r3, r3, #1
 800c846:	b2da      	uxtb	r2, r3
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c850:	0b1b      	lsrs	r3, r3, #12
 800c852:	b2db      	uxtb	r3, r3
 800c854:	f003 0301 	and.w	r3, r3, #1
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	2200      	movs	r2, #0
 800c862:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d163      	bne.n	800c934 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c870:	009a      	lsls	r2, r3, #2
 800c872:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800c876:	4013      	ands	r3, r2
 800c878:	687a      	ldr	r2, [r7, #4]
 800c87a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800c87c:	0f92      	lsrs	r2, r2, #30
 800c87e:	431a      	orrs	r2, r3
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c888:	0edb      	lsrs	r3, r3, #27
 800c88a:	b2db      	uxtb	r3, r3
 800c88c:	f003 0307 	and.w	r3, r3, #7
 800c890:	b2da      	uxtb	r2, r3
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c89a:	0e1b      	lsrs	r3, r3, #24
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	f003 0307 	and.w	r3, r3, #7
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8ac:	0d5b      	lsrs	r3, r3, #21
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	f003 0307 	and.w	r3, r3, #7
 800c8b4:	b2da      	uxtb	r2, r3
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8be:	0c9b      	lsrs	r3, r3, #18
 800c8c0:	b2db      	uxtb	r3, r3
 800c8c2:	f003 0307 	and.w	r3, r3, #7
 800c8c6:	b2da      	uxtb	r2, r3
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8d0:	0bdb      	lsrs	r3, r3, #15
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	f003 0307 	and.w	r3, r3, #7
 800c8d8:	b2da      	uxtb	r2, r3
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	691b      	ldr	r3, [r3, #16]
 800c8e2:	1c5a      	adds	r2, r3, #1
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	7e1b      	ldrb	r3, [r3, #24]
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	f003 0307 	and.w	r3, r3, #7
 800c8f2:	3302      	adds	r3, #2
 800c8f4:	2201      	movs	r2, #1
 800c8f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c8fa:	687a      	ldr	r2, [r7, #4]
 800c8fc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800c8fe:	fb03 f202 	mul.w	r2, r3, r2
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	7a1b      	ldrb	r3, [r3, #8]
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	f003 030f 	and.w	r3, r3, #15
 800c910:	2201      	movs	r2, #1
 800c912:	409a      	lsls	r2, r3
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800c920:	0a52      	lsrs	r2, r2, #9
 800c922:	fb03 f202 	mul.w	r2, r3, r2
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c930:	661a      	str	r2, [r3, #96]	@ 0x60
 800c932:	e031      	b.n	800c998 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d11d      	bne.n	800c978 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c940:	041b      	lsls	r3, r3, #16
 800c942:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c94a:	0c1b      	lsrs	r3, r3, #16
 800c94c:	431a      	orrs	r2, r3
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	691b      	ldr	r3, [r3, #16]
 800c956:	3301      	adds	r3, #1
 800c958:	029a      	lsls	r2, r3, #10
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c96c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	661a      	str	r2, [r3, #96]	@ 0x60
 800c976:	e00f      	b.n	800c998 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4a58      	ldr	r2, [pc, #352]	@ (800cae0 <HAL_SD_GetCardCSD+0x344>)
 800c97e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c984:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800c994:	2301      	movs	r3, #1
 800c996:	e09d      	b.n	800cad4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c99c:	0b9b      	lsrs	r3, r3, #14
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	f003 0301 	and.w	r3, r3, #1
 800c9a4:	b2da      	uxtb	r2, r3
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9ae:	09db      	lsrs	r3, r3, #7
 800c9b0:	b2db      	uxtb	r3, r3
 800c9b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9d0:	0fdb      	lsrs	r3, r3, #31
 800c9d2:	b2da      	uxtb	r2, r3
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9dc:	0f5b      	lsrs	r3, r3, #29
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	f003 0303 	and.w	r3, r3, #3
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9ee:	0e9b      	lsrs	r3, r3, #26
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	f003 0307 	and.w	r3, r3, #7
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca00:	0d9b      	lsrs	r3, r3, #22
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	f003 030f 	and.w	r3, r3, #15
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca12:	0d5b      	lsrs	r3, r3, #21
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	f003 0301 	and.w	r3, r3, #1
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	2200      	movs	r2, #0
 800ca26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca2e:	0c1b      	lsrs	r3, r3, #16
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	f003 0301 	and.w	r3, r3, #1
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca42:	0bdb      	lsrs	r3, r3, #15
 800ca44:	b2db      	uxtb	r3, r3
 800ca46:	f003 0301 	and.w	r3, r3, #1
 800ca4a:	b2da      	uxtb	r2, r3
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca56:	0b9b      	lsrs	r3, r3, #14
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	f003 0301 	and.w	r3, r3, #1
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca6a:	0b5b      	lsrs	r3, r3, #13
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	f003 0301 	and.w	r3, r3, #1
 800ca72:	b2da      	uxtb	r2, r3
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca7e:	0b1b      	lsrs	r3, r3, #12
 800ca80:	b2db      	uxtb	r3, r3
 800ca82:	f003 0301 	and.w	r3, r3, #1
 800ca86:	b2da      	uxtb	r2, r3
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca92:	0a9b      	lsrs	r3, r3, #10
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	f003 0303 	and.w	r3, r3, #3
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800caa6:	0a1b      	lsrs	r3, r3, #8
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	f003 0303 	and.w	r3, r3, #3
 800caae:	b2da      	uxtb	r2, r3
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800caba:	085b      	lsrs	r3, r3, #1
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cac2:	b2da      	uxtb	r2, r3
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	2201      	movs	r2, #1
 800cace:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	370c      	adds	r7, #12
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	004005ff 	.word	0x004005ff

0800cae4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	370c      	adds	r7, #12
 800cb34:	46bd      	mov	sp, r7
 800cb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3a:	4770      	bx	lr

0800cb3c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cb44:	2300      	movs	r3, #0
 800cb46:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cb48:	f107 030c 	add.w	r3, r7, #12
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 f970 	bl	800ce34 <SD_SendStatus>
 800cb54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d005      	beq.n	800cb68 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	431a      	orrs	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	0a5b      	lsrs	r3, r3, #9
 800cb6c:	f003 030f 	and.w	r3, r3, #15
 800cb70:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cb72:	693b      	ldr	r3, [r7, #16]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3718      	adds	r7, #24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cb7c:	b5b0      	push	{r4, r5, r7, lr}
 800cb7e:	b094      	sub	sp, #80	@ 0x50
 800cb80:	af04      	add	r7, sp, #16
 800cb82:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800cb84:	2301      	movs	r3, #1
 800cb86:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f001 ff29 	bl	800e9e4 <SDMMC_GetPowerState>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d102      	bne.n	800cb9e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cb98:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800cb9c:	e0b8      	b.n	800cd10 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cba2:	2b03      	cmp	r3, #3
 800cba4:	d02f      	beq.n	800cc06 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f002 f910 	bl	800edd0 <SDMMC_CmdSendCID>
 800cbb0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d001      	beq.n	800cbbc <SD_InitCard+0x40>
    {
      return errorstate;
 800cbb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbba:	e0a9      	b.n	800cd10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f001 ff53 	bl	800ea6e <SDMMC_GetResponse>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2104      	movs	r1, #4
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f001 ff4a 	bl	800ea6e <SDMMC_GetResponse>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2108      	movs	r1, #8
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f001 ff41 	bl	800ea6e <SDMMC_GetResponse>
 800cbec:	4602      	mov	r2, r0
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	210c      	movs	r1, #12
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f001 ff38 	bl	800ea6e <SDMMC_GetResponse>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc0a:	2b03      	cmp	r3, #3
 800cc0c:	d00d      	beq.n	800cc2a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f107 020e 	add.w	r2, r7, #14
 800cc16:	4611      	mov	r1, r2
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f002 f916 	bl	800ee4a <SDMMC_CmdSetRelAdd>
 800cc1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d001      	beq.n	800cc2a <SD_InitCard+0xae>
    {
      return errorstate;
 800cc26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc28:	e072      	b.n	800cd10 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc2e:	2b03      	cmp	r3, #3
 800cc30:	d036      	beq.n	800cca0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800cc32:	89fb      	ldrh	r3, [r7, #14]
 800cc34:	461a      	mov	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc42:	041b      	lsls	r3, r3, #16
 800cc44:	4619      	mov	r1, r3
 800cc46:	4610      	mov	r0, r2
 800cc48:	f002 f8e0 	bl	800ee0c <SDMMC_CmdSendCSD>
 800cc4c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cc4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <SD_InitCard+0xdc>
    {
      return errorstate;
 800cc54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc56:	e05b      	b.n	800cd10 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f001 ff05 	bl	800ea6e <SDMMC_GetResponse>
 800cc64:	4602      	mov	r2, r0
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	2104      	movs	r1, #4
 800cc70:	4618      	mov	r0, r3
 800cc72:	f001 fefc 	bl	800ea6e <SDMMC_GetResponse>
 800cc76:	4602      	mov	r2, r0
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2108      	movs	r1, #8
 800cc82:	4618      	mov	r0, r3
 800cc84:	f001 fef3 	bl	800ea6e <SDMMC_GetResponse>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	210c      	movs	r1, #12
 800cc94:	4618      	mov	r0, r3
 800cc96:	f001 feea 	bl	800ea6e <SDMMC_GetResponse>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2104      	movs	r1, #4
 800cca6:	4618      	mov	r0, r3
 800cca8:	f001 fee1 	bl	800ea6e <SDMMC_GetResponse>
 800ccac:	4603      	mov	r3, r0
 800ccae:	0d1a      	lsrs	r2, r3, #20
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ccb4:	f107 0310 	add.w	r3, r7, #16
 800ccb8:	4619      	mov	r1, r3
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f7ff fd6e 	bl	800c79c <HAL_SD_GetCardCSD>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d002      	beq.n	800cccc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ccc6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ccca:	e021      	b.n	800cd10 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6819      	ldr	r1, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccd4:	041b      	lsls	r3, r3, #16
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	461c      	mov	r4, r3
 800ccda:	4615      	mov	r5, r2
 800ccdc:	4622      	mov	r2, r4
 800ccde:	462b      	mov	r3, r5
 800cce0:	4608      	mov	r0, r1
 800cce2:	f001 ffcf 	bl	800ec84 <SDMMC_CmdSelDesel>
 800cce6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800cce8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d001      	beq.n	800ccf2 <SD_InitCard+0x176>
  {
    return errorstate;
 800ccee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf0:	e00e      	b.n	800cd10 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681d      	ldr	r5, [r3, #0]
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	466c      	mov	r4, sp
 800ccfa:	f103 0210 	add.w	r2, r3, #16
 800ccfe:	ca07      	ldmia	r2, {r0, r1, r2}
 800cd00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cd04:	3304      	adds	r3, #4
 800cd06:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f001 fe13 	bl	800e934 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3740      	adds	r7, #64	@ 0x40
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bdb0      	pop	{r4, r5, r7, pc}

0800cd18 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b086      	sub	sp, #24
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cd20:	2300      	movs	r3, #0
 800cd22:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800cd24:	2300      	movs	r3, #0
 800cd26:	617b      	str	r3, [r7, #20]
 800cd28:	2300      	movs	r3, #0
 800cd2a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4618      	mov	r0, r3
 800cd32:	f001 ffca 	bl	800ecca <SDMMC_CmdGoIdleState>
 800cd36:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d001      	beq.n	800cd42 <SD_PowerON+0x2a>
  {
    return errorstate;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	e072      	b.n	800ce28 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	4618      	mov	r0, r3
 800cd48:	f001 ffdd 	bl	800ed06 <SDMMC_CmdOperCond>
 800cd4c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00d      	beq.n	800cd70 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f001 ffb3 	bl	800ecca <SDMMC_CmdGoIdleState>
 800cd64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d004      	beq.n	800cd76 <SD_PowerON+0x5e>
    {
      return errorstate;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	e05b      	b.n	800ce28 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2201      	movs	r2, #1
 800cd74:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d137      	bne.n	800cdee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2100      	movs	r1, #0
 800cd84:	4618      	mov	r0, r3
 800cd86:	f001 ffdd 	bl	800ed44 <SDMMC_CmdAppCommand>
 800cd8a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d02d      	beq.n	800cdee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd92:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cd96:	e047      	b.n	800ce28 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2100      	movs	r1, #0
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f001 ffd0 	bl	800ed44 <SDMMC_CmdAppCommand>
 800cda4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <SD_PowerON+0x98>
    {
      return errorstate;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	e03b      	b.n	800ce28 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	491e      	ldr	r1, [pc, #120]	@ (800ce30 <SD_PowerON+0x118>)
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f001 ffe6 	bl	800ed88 <SDMMC_CmdAppOperCommand>
 800cdbc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cdc4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800cdc8:	e02e      	b.n	800ce28 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2100      	movs	r1, #0
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f001 fe4c 	bl	800ea6e <SDMMC_GetResponse>
 800cdd6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	0fdb      	lsrs	r3, r3, #31
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d101      	bne.n	800cde4 <SD_PowerON+0xcc>
 800cde0:	2301      	movs	r3, #1
 800cde2:	e000      	b.n	800cde6 <SD_PowerON+0xce>
 800cde4:	2300      	movs	r3, #0
 800cde6:	613b      	str	r3, [r7, #16]

    count++;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	3301      	adds	r3, #1
 800cdec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d802      	bhi.n	800cdfe <SD_PowerON+0xe6>
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d0cc      	beq.n	800cd98 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800cdfe:	68bb      	ldr	r3, [r7, #8]
 800ce00:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d902      	bls.n	800ce0e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ce08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ce0c:	e00c      	b.n	800ce28 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d003      	beq.n	800ce20 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2201      	movs	r2, #1
 800ce1c:	645a      	str	r2, [r3, #68]	@ 0x44
 800ce1e:	e002      	b.n	800ce26 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2200      	movs	r2, #0
 800ce24:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	c1100000 	.word	0xc1100000

0800ce34 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d102      	bne.n	800ce4a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ce44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ce48:	e018      	b.n	800ce7c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce52:	041b      	lsls	r3, r3, #16
 800ce54:	4619      	mov	r1, r3
 800ce56:	4610      	mov	r0, r2
 800ce58:	f002 f818 	bl	800ee8c <SDMMC_CmdSendStatus>
 800ce5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d001      	beq.n	800ce68 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	e009      	b.n	800ce7c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f001 fdfd 	bl	800ea6e <SDMMC_GetResponse>
 800ce74:	4602      	mov	r2, r0
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3710      	adds	r7, #16
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d101      	bne.n	800ce98 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	e025      	b.n	800cee4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ce9e:	b2db      	uxtb	r3, r3
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d106      	bne.n	800ceb2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7f6 f90f 	bl	80030d0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2202      	movs	r2, #2
 800ceb6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	3304      	adds	r3, #4
 800cec2:	4619      	mov	r1, r3
 800cec4:	4610      	mov	r0, r2
 800cec6:	f001 fc33 	bl	800e730 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6818      	ldr	r0, [r3, #0]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	685b      	ldr	r3, [r3, #4]
 800ced2:	461a      	mov	r2, r3
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	f001 fc87 	bl	800e7e8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2201      	movs	r2, #1
 800cede:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800cee2:	2300      	movs	r3, #0
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cefe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800cf00:	7dfb      	ldrb	r3, [r7, #23]
 800cf02:	2b02      	cmp	r3, #2
 800cf04:	d101      	bne.n	800cf0a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800cf06:	2302      	movs	r3, #2
 800cf08:	e021      	b.n	800cf4e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800cf0a:	7dfb      	ldrb	r3, [r7, #23]
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d002      	beq.n	800cf16 <HAL_SDRAM_SendCommand+0x2a>
 800cf10:	7dfb      	ldrb	r3, [r7, #23]
 800cf12:	2b05      	cmp	r3, #5
 800cf14:	d118      	bne.n	800cf48 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	2202      	movs	r2, #2
 800cf1a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	687a      	ldr	r2, [r7, #4]
 800cf24:	68b9      	ldr	r1, [r7, #8]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f001 fcc8 	bl	800e8bc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	2b02      	cmp	r3, #2
 800cf32:	d104      	bne.n	800cf3e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	2205      	movs	r2, #5
 800cf38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800cf3c:	e006      	b.n	800cf4c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800cf46:	e001      	b.n	800cf4c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e000      	b.n	800cf4e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3718      	adds	r7, #24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b082      	sub	sp, #8
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
 800cf5e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf66:	b2db      	uxtb	r3, r3
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d101      	bne.n	800cf70 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	e016      	b.n	800cf9e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d10f      	bne.n	800cf9c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2202      	movs	r2, #2
 800cf80:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f001 fcba 	bl	800e904 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2201      	movs	r2, #1
 800cf94:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	e000      	b.n	800cf9e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800cf9c:	2301      	movs	r3, #1
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3708      	adds	r7, #8
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b082      	sub	sp, #8
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d101      	bne.n	800cfb8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cfb4:	2301      	movs	r3, #1
 800cfb6:	e049      	b.n	800d04c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d106      	bne.n	800cfd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7f7 ffb3 	bl	8004f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2202      	movs	r2, #2
 800cfd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681a      	ldr	r2, [r3, #0]
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	3304      	adds	r3, #4
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	f000 fb07 	bl	800d5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2201      	movs	r2, #1
 800cfee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	2201      	movs	r2, #1
 800cff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2201      	movs	r2, #1
 800d006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2201      	movs	r2, #1
 800d00e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2201      	movs	r2, #1
 800d016:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2201      	movs	r2, #1
 800d01e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2201      	movs	r2, #1
 800d026:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2201      	movs	r2, #1
 800d02e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2201      	movs	r2, #1
 800d03e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2201      	movs	r2, #1
 800d046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}

0800d054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d062:	b2db      	uxtb	r3, r3
 800d064:	2b01      	cmp	r3, #1
 800d066:	d001      	beq.n	800d06c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	e054      	b.n	800d116 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2202      	movs	r2, #2
 800d070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68da      	ldr	r2, [r3, #12]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f042 0201 	orr.w	r2, r2, #1
 800d082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a26      	ldr	r2, [pc, #152]	@ (800d124 <HAL_TIM_Base_Start_IT+0xd0>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d022      	beq.n	800d0d4 <HAL_TIM_Base_Start_IT+0x80>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d096:	d01d      	beq.n	800d0d4 <HAL_TIM_Base_Start_IT+0x80>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a22      	ldr	r2, [pc, #136]	@ (800d128 <HAL_TIM_Base_Start_IT+0xd4>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d018      	beq.n	800d0d4 <HAL_TIM_Base_Start_IT+0x80>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	4a21      	ldr	r2, [pc, #132]	@ (800d12c <HAL_TIM_Base_Start_IT+0xd8>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d013      	beq.n	800d0d4 <HAL_TIM_Base_Start_IT+0x80>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a1f      	ldr	r2, [pc, #124]	@ (800d130 <HAL_TIM_Base_Start_IT+0xdc>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d00e      	beq.n	800d0d4 <HAL_TIM_Base_Start_IT+0x80>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a1e      	ldr	r2, [pc, #120]	@ (800d134 <HAL_TIM_Base_Start_IT+0xe0>)
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d009      	beq.n	800d0d4 <HAL_TIM_Base_Start_IT+0x80>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a1c      	ldr	r2, [pc, #112]	@ (800d138 <HAL_TIM_Base_Start_IT+0xe4>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d004      	beq.n	800d0d4 <HAL_TIM_Base_Start_IT+0x80>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4a1b      	ldr	r2, [pc, #108]	@ (800d13c <HAL_TIM_Base_Start_IT+0xe8>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d115      	bne.n	800d100 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	689a      	ldr	r2, [r3, #8]
 800d0da:	4b19      	ldr	r3, [pc, #100]	@ (800d140 <HAL_TIM_Base_Start_IT+0xec>)
 800d0dc:	4013      	ands	r3, r2
 800d0de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2b06      	cmp	r3, #6
 800d0e4:	d015      	beq.n	800d112 <HAL_TIM_Base_Start_IT+0xbe>
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0ec:	d011      	beq.n	800d112 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	681a      	ldr	r2, [r3, #0]
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f042 0201 	orr.w	r2, r2, #1
 800d0fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0fe:	e008      	b.n	800d112 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	f042 0201 	orr.w	r2, r2, #1
 800d10e:	601a      	str	r2, [r3, #0]
 800d110:	e000      	b.n	800d114 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d112:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3714      	adds	r7, #20
 800d11a:	46bd      	mov	sp, r7
 800d11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d120:	4770      	bx	lr
 800d122:	bf00      	nop
 800d124:	40010000 	.word	0x40010000
 800d128:	40000400 	.word	0x40000400
 800d12c:	40000800 	.word	0x40000800
 800d130:	40000c00 	.word	0x40000c00
 800d134:	40010400 	.word	0x40010400
 800d138:	40014000 	.word	0x40014000
 800d13c:	40001800 	.word	0x40001800
 800d140:	00010007 	.word	0x00010007

0800d144 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d101      	bne.n	800d156 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	e049      	b.n	800d1ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d15c:	b2db      	uxtb	r3, r3
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d106      	bne.n	800d170 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	2200      	movs	r2, #0
 800d166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7f7 fe98 	bl	8004ea0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2202      	movs	r2, #2
 800d174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	3304      	adds	r3, #4
 800d180:	4619      	mov	r1, r3
 800d182:	4610      	mov	r0, r2
 800d184:	f000 fa38 	bl	800d5f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2201      	movs	r2, #1
 800d18c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2201      	movs	r2, #1
 800d194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2201      	movs	r2, #1
 800d19c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2201      	movs	r2, #1
 800d1dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b084      	sub	sp, #16
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	691b      	ldr	r3, [r3, #16]
 800d208:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	f003 0302 	and.w	r3, r3, #2
 800d210:	2b00      	cmp	r3, #0
 800d212:	d020      	beq.n	800d256 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f003 0302 	and.w	r3, r3, #2
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d01b      	beq.n	800d256 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	f06f 0202 	mvn.w	r2, #2
 800d226:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	699b      	ldr	r3, [r3, #24]
 800d234:	f003 0303 	and.w	r3, r3, #3
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d003      	beq.n	800d244 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f7f5 fd79 	bl	8002d34 <HAL_TIM_IC_CaptureCallback>
 800d242:	e005      	b.n	800d250 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 f9b9 	bl	800d5bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 f9c0 	bl	800d5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	f003 0304 	and.w	r3, r3, #4
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d020      	beq.n	800d2a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f003 0304 	and.w	r3, r3, #4
 800d266:	2b00      	cmp	r3, #0
 800d268:	d01b      	beq.n	800d2a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	f06f 0204 	mvn.w	r2, #4
 800d272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2202      	movs	r2, #2
 800d278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	699b      	ldr	r3, [r3, #24]
 800d280:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d284:	2b00      	cmp	r3, #0
 800d286:	d003      	beq.n	800d290 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7f5 fd53 	bl	8002d34 <HAL_TIM_IC_CaptureCallback>
 800d28e:	e005      	b.n	800d29c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 f993 	bl	800d5bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 f99a 	bl	800d5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	f003 0308 	and.w	r3, r3, #8
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d020      	beq.n	800d2ee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	f003 0308 	and.w	r3, r3, #8
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d01b      	beq.n	800d2ee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	f06f 0208 	mvn.w	r2, #8
 800d2be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2204      	movs	r2, #4
 800d2c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	69db      	ldr	r3, [r3, #28]
 800d2cc:	f003 0303 	and.w	r3, r3, #3
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d003      	beq.n	800d2dc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7f5 fd2d 	bl	8002d34 <HAL_TIM_IC_CaptureCallback>
 800d2da:	e005      	b.n	800d2e8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f000 f96d 	bl	800d5bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 f974 	bl	800d5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d2ee:	68bb      	ldr	r3, [r7, #8]
 800d2f0:	f003 0310 	and.w	r3, r3, #16
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d020      	beq.n	800d33a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f003 0310 	and.w	r3, r3, #16
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d01b      	beq.n	800d33a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f06f 0210 	mvn.w	r2, #16
 800d30a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2208      	movs	r2, #8
 800d310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	69db      	ldr	r3, [r3, #28]
 800d318:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d003      	beq.n	800d328 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f7f5 fd07 	bl	8002d34 <HAL_TIM_IC_CaptureCallback>
 800d326:	e005      	b.n	800d334 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 f947 	bl	800d5bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f94e 	bl	800d5d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2200      	movs	r2, #0
 800d338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00c      	beq.n	800d35e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f003 0301 	and.w	r3, r3, #1
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d007      	beq.n	800d35e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f06f 0201 	mvn.w	r2, #1
 800d356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f7f7 f955 	bl	8004608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d364:	2b00      	cmp	r3, #0
 800d366:	d104      	bne.n	800d372 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d00c      	beq.n	800d38c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d007      	beq.n	800d38c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d386:	6878      	ldr	r0, [r7, #4]
 800d388:	f000 fcb8 	bl	800dcfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d392:	2b00      	cmp	r3, #0
 800d394:	d00c      	beq.n	800d3b0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d007      	beq.n	800d3b0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d3a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fcb0 	bl	800dd10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00c      	beq.n	800d3d4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d007      	beq.n	800d3d4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f000 f908 	bl	800d5e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	f003 0320 	and.w	r3, r3, #32
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00c      	beq.n	800d3f8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f003 0320 	and.w	r3, r3, #32
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d007      	beq.n	800d3f8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	f06f 0220 	mvn.w	r2, #32
 800d3f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	f000 fc78 	bl	800dce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d3f8:	bf00      	nop
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}

0800d400 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b086      	sub	sp, #24
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d40c:	2300      	movs	r3, #0
 800d40e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d416:	2b01      	cmp	r3, #1
 800d418:	d101      	bne.n	800d41e <HAL_TIM_IC_ConfigChannel+0x1e>
 800d41a:	2302      	movs	r3, #2
 800d41c:	e088      	b.n	800d530 <HAL_TIM_IC_ConfigChannel+0x130>
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d11b      	bne.n	800d464 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800d43c:	f000 fa1c 	bl	800d878 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	699a      	ldr	r2, [r3, #24]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f022 020c 	bic.w	r2, r2, #12
 800d44e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	6999      	ldr	r1, [r3, #24]
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	689a      	ldr	r2, [r3, #8]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	430a      	orrs	r2, r1
 800d460:	619a      	str	r2, [r3, #24]
 800d462:	e060      	b.n	800d526 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2b04      	cmp	r3, #4
 800d468:	d11c      	bne.n	800d4a4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800d47a:	f000 faa0 	bl	800d9be <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	699a      	ldr	r2, [r3, #24]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d48c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6999      	ldr	r1, [r3, #24]
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	021a      	lsls	r2, r3, #8
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	430a      	orrs	r2, r1
 800d4a0:	619a      	str	r2, [r3, #24]
 800d4a2:	e040      	b.n	800d526 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2b08      	cmp	r3, #8
 800d4a8:	d11b      	bne.n	800d4e2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800d4ba:	f000 faed 	bl	800da98 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	69da      	ldr	r2, [r3, #28]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f022 020c 	bic.w	r2, r2, #12
 800d4cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	69d9      	ldr	r1, [r3, #28]
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	689a      	ldr	r2, [r3, #8]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	430a      	orrs	r2, r1
 800d4de:	61da      	str	r2, [r3, #28]
 800d4e0:	e021      	b.n	800d526 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2b0c      	cmp	r3, #12
 800d4e6:	d11c      	bne.n	800d522 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800d4f8:	f000 fb0a 	bl	800db10 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	69da      	ldr	r2, [r3, #28]
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800d50a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	69d9      	ldr	r1, [r3, #28]
 800d512:	68bb      	ldr	r3, [r7, #8]
 800d514:	689b      	ldr	r3, [r3, #8]
 800d516:	021a      	lsls	r2, r3, #8
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	430a      	orrs	r2, r1
 800d51e:	61da      	str	r2, [r3, #28]
 800d520:	e001      	b.n	800d526 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800d522:	2301      	movs	r3, #1
 800d524:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	2200      	movs	r2, #0
 800d52a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d52e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d530:	4618      	mov	r0, r3
 800d532:	3718      	adds	r7, #24
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d101      	bne.n	800d550 <HAL_TIM_SlaveConfigSynchro+0x18>
 800d54c:	2302      	movs	r3, #2
 800d54e:	e031      	b.n	800d5b4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2202      	movs	r2, #2
 800d55c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800d560:	6839      	ldr	r1, [r7, #0]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f8f4 	bl	800d750 <TIM_SlaveTimer_SetConfig>
 800d568:	4603      	mov	r3, r0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d009      	beq.n	800d582 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2201      	movs	r2, #1
 800d572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	2200      	movs	r2, #0
 800d57a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800d57e:	2301      	movs	r3, #1
 800d580:	e018      	b.n	800d5b4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	68da      	ldr	r2, [r3, #12]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d590:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	68da      	ldr	r2, [r3, #12]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d5a0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d5b2:	2300      	movs	r3, #0
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3708      	adds	r7, #8
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d5c4:	bf00      	nop
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d5d8:	bf00      	nop
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d5ec:	bf00      	nop
 800d5ee:	370c      	adds	r7, #12
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4a46      	ldr	r2, [pc, #280]	@ (800d724 <TIM_Base_SetConfig+0x12c>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d013      	beq.n	800d638 <TIM_Base_SetConfig+0x40>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d616:	d00f      	beq.n	800d638 <TIM_Base_SetConfig+0x40>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	4a43      	ldr	r2, [pc, #268]	@ (800d728 <TIM_Base_SetConfig+0x130>)
 800d61c:	4293      	cmp	r3, r2
 800d61e:	d00b      	beq.n	800d638 <TIM_Base_SetConfig+0x40>
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4a42      	ldr	r2, [pc, #264]	@ (800d72c <TIM_Base_SetConfig+0x134>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d007      	beq.n	800d638 <TIM_Base_SetConfig+0x40>
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	4a41      	ldr	r2, [pc, #260]	@ (800d730 <TIM_Base_SetConfig+0x138>)
 800d62c:	4293      	cmp	r3, r2
 800d62e:	d003      	beq.n	800d638 <TIM_Base_SetConfig+0x40>
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4a40      	ldr	r2, [pc, #256]	@ (800d734 <TIM_Base_SetConfig+0x13c>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d108      	bne.n	800d64a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d63e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	68fa      	ldr	r2, [r7, #12]
 800d646:	4313      	orrs	r3, r2
 800d648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	4a35      	ldr	r2, [pc, #212]	@ (800d724 <TIM_Base_SetConfig+0x12c>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d02b      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d658:	d027      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4a32      	ldr	r2, [pc, #200]	@ (800d728 <TIM_Base_SetConfig+0x130>)
 800d65e:	4293      	cmp	r3, r2
 800d660:	d023      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	4a31      	ldr	r2, [pc, #196]	@ (800d72c <TIM_Base_SetConfig+0x134>)
 800d666:	4293      	cmp	r3, r2
 800d668:	d01f      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	4a30      	ldr	r2, [pc, #192]	@ (800d730 <TIM_Base_SetConfig+0x138>)
 800d66e:	4293      	cmp	r3, r2
 800d670:	d01b      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4a2f      	ldr	r2, [pc, #188]	@ (800d734 <TIM_Base_SetConfig+0x13c>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d017      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	4a2e      	ldr	r2, [pc, #184]	@ (800d738 <TIM_Base_SetConfig+0x140>)
 800d67e:	4293      	cmp	r3, r2
 800d680:	d013      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	4a2d      	ldr	r2, [pc, #180]	@ (800d73c <TIM_Base_SetConfig+0x144>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d00f      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	4a2c      	ldr	r2, [pc, #176]	@ (800d740 <TIM_Base_SetConfig+0x148>)
 800d68e:	4293      	cmp	r3, r2
 800d690:	d00b      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a2b      	ldr	r2, [pc, #172]	@ (800d744 <TIM_Base_SetConfig+0x14c>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d007      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4a2a      	ldr	r2, [pc, #168]	@ (800d748 <TIM_Base_SetConfig+0x150>)
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	d003      	beq.n	800d6aa <TIM_Base_SetConfig+0xb2>
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	4a29      	ldr	r2, [pc, #164]	@ (800d74c <TIM_Base_SetConfig+0x154>)
 800d6a6:	4293      	cmp	r3, r2
 800d6a8:	d108      	bne.n	800d6bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d6b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	695b      	ldr	r3, [r3, #20]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	689a      	ldr	r2, [r3, #8]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	681a      	ldr	r2, [r3, #0]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	4a10      	ldr	r2, [pc, #64]	@ (800d724 <TIM_Base_SetConfig+0x12c>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d003      	beq.n	800d6f0 <TIM_Base_SetConfig+0xf8>
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4a12      	ldr	r2, [pc, #72]	@ (800d734 <TIM_Base_SetConfig+0x13c>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d103      	bne.n	800d6f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	691a      	ldr	r2, [r3, #16]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	691b      	ldr	r3, [r3, #16]
 800d702:	f003 0301 	and.w	r3, r3, #1
 800d706:	2b01      	cmp	r3, #1
 800d708:	d105      	bne.n	800d716 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	691b      	ldr	r3, [r3, #16]
 800d70e:	f023 0201 	bic.w	r2, r3, #1
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	611a      	str	r2, [r3, #16]
  }
}
 800d716:	bf00      	nop
 800d718:	3714      	adds	r7, #20
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr
 800d722:	bf00      	nop
 800d724:	40010000 	.word	0x40010000
 800d728:	40000400 	.word	0x40000400
 800d72c:	40000800 	.word	0x40000800
 800d730:	40000c00 	.word	0x40000c00
 800d734:	40010400 	.word	0x40010400
 800d738:	40014000 	.word	0x40014000
 800d73c:	40014400 	.word	0x40014400
 800d740:	40014800 	.word	0x40014800
 800d744:	40001800 	.word	0x40001800
 800d748:	40001c00 	.word	0x40001c00
 800d74c:	40002000 	.word	0x40002000

0800d750 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d75a:	2300      	movs	r3, #0
 800d75c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d76c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	693a      	ldr	r2, [r7, #16]
 800d774:	4313      	orrs	r3, r2
 800d776:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d778:	693a      	ldr	r2, [r7, #16]
 800d77a:	4b3e      	ldr	r3, [pc, #248]	@ (800d874 <TIM_SlaveTimer_SetConfig+0x124>)
 800d77c:	4013      	ands	r3, r2
 800d77e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	693a      	ldr	r2, [r7, #16]
 800d786:	4313      	orrs	r3, r2
 800d788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	693a      	ldr	r2, [r7, #16]
 800d790:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	685b      	ldr	r3, [r3, #4]
 800d796:	2b70      	cmp	r3, #112	@ 0x70
 800d798:	d01a      	beq.n	800d7d0 <TIM_SlaveTimer_SetConfig+0x80>
 800d79a:	2b70      	cmp	r3, #112	@ 0x70
 800d79c:	d860      	bhi.n	800d860 <TIM_SlaveTimer_SetConfig+0x110>
 800d79e:	2b60      	cmp	r3, #96	@ 0x60
 800d7a0:	d054      	beq.n	800d84c <TIM_SlaveTimer_SetConfig+0xfc>
 800d7a2:	2b60      	cmp	r3, #96	@ 0x60
 800d7a4:	d85c      	bhi.n	800d860 <TIM_SlaveTimer_SetConfig+0x110>
 800d7a6:	2b50      	cmp	r3, #80	@ 0x50
 800d7a8:	d046      	beq.n	800d838 <TIM_SlaveTimer_SetConfig+0xe8>
 800d7aa:	2b50      	cmp	r3, #80	@ 0x50
 800d7ac:	d858      	bhi.n	800d860 <TIM_SlaveTimer_SetConfig+0x110>
 800d7ae:	2b40      	cmp	r3, #64	@ 0x40
 800d7b0:	d019      	beq.n	800d7e6 <TIM_SlaveTimer_SetConfig+0x96>
 800d7b2:	2b40      	cmp	r3, #64	@ 0x40
 800d7b4:	d854      	bhi.n	800d860 <TIM_SlaveTimer_SetConfig+0x110>
 800d7b6:	2b30      	cmp	r3, #48	@ 0x30
 800d7b8:	d055      	beq.n	800d866 <TIM_SlaveTimer_SetConfig+0x116>
 800d7ba:	2b30      	cmp	r3, #48	@ 0x30
 800d7bc:	d850      	bhi.n	800d860 <TIM_SlaveTimer_SetConfig+0x110>
 800d7be:	2b20      	cmp	r3, #32
 800d7c0:	d051      	beq.n	800d866 <TIM_SlaveTimer_SetConfig+0x116>
 800d7c2:	2b20      	cmp	r3, #32
 800d7c4:	d84c      	bhi.n	800d860 <TIM_SlaveTimer_SetConfig+0x110>
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d04d      	beq.n	800d866 <TIM_SlaveTimer_SetConfig+0x116>
 800d7ca:	2b10      	cmp	r3, #16
 800d7cc:	d04b      	beq.n	800d866 <TIM_SlaveTimer_SetConfig+0x116>
 800d7ce:	e047      	b.n	800d860 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800d7e0:	f000 f9d3 	bl	800db8a <TIM_ETR_SetConfig>
      break;
 800d7e4:	e040      	b.n	800d868 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	2b05      	cmp	r3, #5
 800d7ec:	d101      	bne.n	800d7f2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e03b      	b.n	800d86a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	6a1b      	ldr	r3, [r3, #32]
 800d7f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	6a1a      	ldr	r2, [r3, #32]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f022 0201 	bic.w	r2, r2, #1
 800d808:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	699b      	ldr	r3, [r3, #24]
 800d810:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d818:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	691b      	ldr	r3, [r3, #16]
 800d81e:	011b      	lsls	r3, r3, #4
 800d820:	68ba      	ldr	r2, [r7, #8]
 800d822:	4313      	orrs	r3, r2
 800d824:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	68fa      	ldr	r2, [r7, #12]
 800d834:	621a      	str	r2, [r3, #32]
      break;
 800d836:	e017      	b.n	800d868 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d844:	461a      	mov	r2, r3
 800d846:	f000 f88b 	bl	800d960 <TIM_TI1_ConfigInputStage>
      break;
 800d84a:	e00d      	b.n	800d868 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d858:	461a      	mov	r2, r3
 800d85a:	f000 f8ed 	bl	800da38 <TIM_TI2_ConfigInputStage>
      break;
 800d85e:	e003      	b.n	800d868 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800d860:	2301      	movs	r3, #1
 800d862:	75fb      	strb	r3, [r7, #23]
      break;
 800d864:	e000      	b.n	800d868 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800d866:	bf00      	nop
  }

  return status;
 800d868:	7dfb      	ldrb	r3, [r7, #23]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	fffefff8 	.word	0xfffefff8

0800d878 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800d878:	b480      	push	{r7}
 800d87a:	b087      	sub	sp, #28
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6a1b      	ldr	r3, [r3, #32]
 800d88a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	6a1b      	ldr	r3, [r3, #32]
 800d890:	f023 0201 	bic.w	r2, r3, #1
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	699b      	ldr	r3, [r3, #24]
 800d89c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	4a28      	ldr	r2, [pc, #160]	@ (800d944 <TIM_TI1_SetConfig+0xcc>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d01b      	beq.n	800d8de <TIM_TI1_SetConfig+0x66>
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d8ac:	d017      	beq.n	800d8de <TIM_TI1_SetConfig+0x66>
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	4a25      	ldr	r2, [pc, #148]	@ (800d948 <TIM_TI1_SetConfig+0xd0>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	d013      	beq.n	800d8de <TIM_TI1_SetConfig+0x66>
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	4a24      	ldr	r2, [pc, #144]	@ (800d94c <TIM_TI1_SetConfig+0xd4>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d00f      	beq.n	800d8de <TIM_TI1_SetConfig+0x66>
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	4a23      	ldr	r2, [pc, #140]	@ (800d950 <TIM_TI1_SetConfig+0xd8>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d00b      	beq.n	800d8de <TIM_TI1_SetConfig+0x66>
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	4a22      	ldr	r2, [pc, #136]	@ (800d954 <TIM_TI1_SetConfig+0xdc>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d007      	beq.n	800d8de <TIM_TI1_SetConfig+0x66>
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	4a21      	ldr	r2, [pc, #132]	@ (800d958 <TIM_TI1_SetConfig+0xe0>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d003      	beq.n	800d8de <TIM_TI1_SetConfig+0x66>
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	4a20      	ldr	r2, [pc, #128]	@ (800d95c <TIM_TI1_SetConfig+0xe4>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d101      	bne.n	800d8e2 <TIM_TI1_SetConfig+0x6a>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	e000      	b.n	800d8e4 <TIM_TI1_SetConfig+0x6c>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d008      	beq.n	800d8fa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	f023 0303 	bic.w	r3, r3, #3
 800d8ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800d8f0:	697a      	ldr	r2, [r7, #20]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	617b      	str	r3, [r7, #20]
 800d8f8:	e003      	b.n	800d902 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	f043 0301 	orr.w	r3, r3, #1
 800d900:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d908:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	011b      	lsls	r3, r3, #4
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	697a      	ldr	r2, [r7, #20]
 800d912:	4313      	orrs	r3, r2
 800d914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	f023 030a 	bic.w	r3, r3, #10
 800d91c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	f003 030a 	and.w	r3, r3, #10
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	4313      	orrs	r3, r2
 800d928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	697a      	ldr	r2, [r7, #20]
 800d92e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	621a      	str	r2, [r3, #32]
}
 800d936:	bf00      	nop
 800d938:	371c      	adds	r7, #28
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr
 800d942:	bf00      	nop
 800d944:	40010000 	.word	0x40010000
 800d948:	40000400 	.word	0x40000400
 800d94c:	40000800 	.word	0x40000800
 800d950:	40000c00 	.word	0x40000c00
 800d954:	40010400 	.word	0x40010400
 800d958:	40014000 	.word	0x40014000
 800d95c:	40001800 	.word	0x40001800

0800d960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d960:	b480      	push	{r7}
 800d962:	b087      	sub	sp, #28
 800d964:	af00      	add	r7, sp, #0
 800d966:	60f8      	str	r0, [r7, #12]
 800d968:	60b9      	str	r1, [r7, #8]
 800d96a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6a1b      	ldr	r3, [r3, #32]
 800d970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6a1b      	ldr	r3, [r3, #32]
 800d976:	f023 0201 	bic.w	r2, r3, #1
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	699b      	ldr	r3, [r3, #24]
 800d982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d98a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	011b      	lsls	r3, r3, #4
 800d990:	693a      	ldr	r2, [r7, #16]
 800d992:	4313      	orrs	r3, r2
 800d994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f023 030a 	bic.w	r3, r3, #10
 800d99c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	693a      	ldr	r2, [r7, #16]
 800d9aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	621a      	str	r2, [r3, #32]
}
 800d9b2:	bf00      	nop
 800d9b4:	371c      	adds	r7, #28
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr

0800d9be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800d9be:	b480      	push	{r7}
 800d9c0:	b087      	sub	sp, #28
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	60f8      	str	r0, [r7, #12]
 800d9c6:	60b9      	str	r1, [r7, #8]
 800d9c8:	607a      	str	r2, [r7, #4]
 800d9ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6a1b      	ldr	r3, [r3, #32]
 800d9d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a1b      	ldr	r3, [r3, #32]
 800d9d6:	f023 0210 	bic.w	r2, r3, #16
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	699b      	ldr	r3, [r3, #24]
 800d9e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800d9e4:	693b      	ldr	r3, [r7, #16]
 800d9e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d9ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	021b      	lsls	r3, r3, #8
 800d9f0:	693a      	ldr	r2, [r7, #16]
 800d9f2:	4313      	orrs	r3, r2
 800d9f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d9fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	031b      	lsls	r3, r3, #12
 800da02:	b29b      	uxth	r3, r3
 800da04:	693a      	ldr	r2, [r7, #16]
 800da06:	4313      	orrs	r3, r2
 800da08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800da10:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	011b      	lsls	r3, r3, #4
 800da16:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800da1a:	697a      	ldr	r2, [r7, #20]
 800da1c:	4313      	orrs	r3, r2
 800da1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	693a      	ldr	r2, [r7, #16]
 800da24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	697a      	ldr	r2, [r7, #20]
 800da2a:	621a      	str	r2, [r3, #32]
}
 800da2c:	bf00      	nop
 800da2e:	371c      	adds	r7, #28
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800da38:	b480      	push	{r7}
 800da3a:	b087      	sub	sp, #28
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	60b9      	str	r1, [r7, #8]
 800da42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	6a1b      	ldr	r3, [r3, #32]
 800da48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	6a1b      	ldr	r3, [r3, #32]
 800da4e:	f023 0210 	bic.w	r2, r3, #16
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	699b      	ldr	r3, [r3, #24]
 800da5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800da62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	031b      	lsls	r3, r3, #12
 800da68:	693a      	ldr	r2, [r7, #16]
 800da6a:	4313      	orrs	r3, r2
 800da6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800da74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	011b      	lsls	r3, r3, #4
 800da7a:	697a      	ldr	r2, [r7, #20]
 800da7c:	4313      	orrs	r3, r2
 800da7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	693a      	ldr	r2, [r7, #16]
 800da84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	697a      	ldr	r2, [r7, #20]
 800da8a:	621a      	str	r2, [r3, #32]
}
 800da8c:	bf00      	nop
 800da8e:	371c      	adds	r7, #28
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800da98:	b480      	push	{r7}
 800da9a:	b087      	sub	sp, #28
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	60f8      	str	r0, [r7, #12]
 800daa0:	60b9      	str	r1, [r7, #8]
 800daa2:	607a      	str	r2, [r7, #4]
 800daa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6a1b      	ldr	r3, [r3, #32]
 800daaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	6a1b      	ldr	r3, [r3, #32]
 800dab0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	69db      	ldr	r3, [r3, #28]
 800dabc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	f023 0303 	bic.w	r3, r3, #3
 800dac4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800dac6:	693a      	ldr	r2, [r7, #16]
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	4313      	orrs	r3, r2
 800dacc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800dad4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	011b      	lsls	r3, r3, #4
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	4313      	orrs	r3, r2
 800dae0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800dae2:	697b      	ldr	r3, [r7, #20]
 800dae4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800dae8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	021b      	lsls	r3, r3, #8
 800daee:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800daf2:	697a      	ldr	r2, [r7, #20]
 800daf4:	4313      	orrs	r3, r2
 800daf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	693a      	ldr	r2, [r7, #16]
 800dafc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	697a      	ldr	r2, [r7, #20]
 800db02:	621a      	str	r2, [r3, #32]
}
 800db04:	bf00      	nop
 800db06:	371c      	adds	r7, #28
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr

0800db10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800db10:	b480      	push	{r7}
 800db12:	b087      	sub	sp, #28
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	607a      	str	r2, [r7, #4]
 800db1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6a1b      	ldr	r3, [r3, #32]
 800db22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	6a1b      	ldr	r3, [r3, #32]
 800db28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	69db      	ldr	r3, [r3, #28]
 800db34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800db3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	021b      	lsls	r3, r3, #8
 800db42:	693a      	ldr	r2, [r7, #16]
 800db44:	4313      	orrs	r3, r2
 800db46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800db48:	693b      	ldr	r3, [r7, #16]
 800db4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800db4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	031b      	lsls	r3, r3, #12
 800db54:	b29b      	uxth	r3, r3
 800db56:	693a      	ldr	r2, [r7, #16]
 800db58:	4313      	orrs	r3, r2
 800db5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800db62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800db64:	68bb      	ldr	r3, [r7, #8]
 800db66:	031b      	lsls	r3, r3, #12
 800db68:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800db6c:	697a      	ldr	r2, [r7, #20]
 800db6e:	4313      	orrs	r3, r2
 800db70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	693a      	ldr	r2, [r7, #16]
 800db76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	697a      	ldr	r2, [r7, #20]
 800db7c:	621a      	str	r2, [r3, #32]
}
 800db7e:	bf00      	nop
 800db80:	371c      	adds	r7, #28
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800db8a:	b480      	push	{r7}
 800db8c:	b087      	sub	sp, #28
 800db8e:	af00      	add	r7, sp, #0
 800db90:	60f8      	str	r0, [r7, #12]
 800db92:	60b9      	str	r1, [r7, #8]
 800db94:	607a      	str	r2, [r7, #4]
 800db96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	689b      	ldr	r3, [r3, #8]
 800db9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dba4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	021a      	lsls	r2, r3, #8
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	431a      	orrs	r2, r3
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	697a      	ldr	r2, [r7, #20]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	697a      	ldr	r2, [r7, #20]
 800dbbc:	609a      	str	r2, [r3, #8]
}
 800dbbe:	bf00      	nop
 800dbc0:	371c      	adds	r7, #28
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr
	...

0800dbcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d101      	bne.n	800dbe4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	e06d      	b.n	800dcc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2202      	movs	r2, #2
 800dbf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	685b      	ldr	r3, [r3, #4]
 800dbfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a30      	ldr	r2, [pc, #192]	@ (800dccc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc0a:	4293      	cmp	r3, r2
 800dc0c:	d004      	beq.n	800dc18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a2f      	ldr	r2, [pc, #188]	@ (800dcd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d108      	bne.n	800dc2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800dc1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	68fa      	ldr	r2, [r7, #12]
 800dc26:	4313      	orrs	r3, r2
 800dc28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68fa      	ldr	r2, [r7, #12]
 800dc42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a20      	ldr	r2, [pc, #128]	@ (800dccc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d022      	beq.n	800dc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dc56:	d01d      	beq.n	800dc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4a1d      	ldr	r2, [pc, #116]	@ (800dcd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d018      	beq.n	800dc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4a1c      	ldr	r2, [pc, #112]	@ (800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d013      	beq.n	800dc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4a1a      	ldr	r2, [pc, #104]	@ (800dcdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d00e      	beq.n	800dc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a15      	ldr	r2, [pc, #84]	@ (800dcd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d009      	beq.n	800dc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a16      	ldr	r2, [pc, #88]	@ (800dce0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dc86:	4293      	cmp	r3, r2
 800dc88:	d004      	beq.n	800dc94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a15      	ldr	r2, [pc, #84]	@ (800dce4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d10c      	bne.n	800dcae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	68ba      	ldr	r2, [r7, #8]
 800dca2:	4313      	orrs	r3, r2
 800dca4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	68ba      	ldr	r2, [r7, #8]
 800dcac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3714      	adds	r7, #20
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr
 800dccc:	40010000 	.word	0x40010000
 800dcd0:	40010400 	.word	0x40010400
 800dcd4:	40000400 	.word	0x40000400
 800dcd8:	40000800 	.word	0x40000800
 800dcdc:	40000c00 	.word	0x40000c00
 800dce0:	40014000 	.word	0x40014000
 800dce4:	40001800 	.word	0x40001800

0800dce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dcf0:	bf00      	nop
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	b083      	sub	sp, #12
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dd04:	bf00      	nop
 800dd06:	370c      	adds	r7, #12
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr

0800dd10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dd10:	b480      	push	{r7}
 800dd12:	b083      	sub	sp, #12
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dd18:	bf00      	nop
 800dd1a:	370c      	adds	r7, #12
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr

0800dd24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dd24:	b580      	push	{r7, lr}
 800dd26:	b082      	sub	sp, #8
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d101      	bne.n	800dd36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	e040      	b.n	800ddb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d106      	bne.n	800dd4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f7f7 f984 	bl	8005054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2224      	movs	r2, #36	@ 0x24
 800dd50:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	f022 0201 	bic.w	r2, r2, #1
 800dd60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d002      	beq.n	800dd70 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 fb16 	bl	800e39c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f000 f8af 	bl	800ded4 <UART_SetConfig>
 800dd76:	4603      	mov	r3, r0
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d101      	bne.n	800dd80 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e01b      	b.n	800ddb8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	685a      	ldr	r2, [r3, #4]
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800dd8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	689a      	ldr	r2, [r3, #8]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800dd9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	681a      	ldr	r2, [r3, #0]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f042 0201 	orr.w	r2, r2, #1
 800ddae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f000 fb95 	bl	800e4e0 <UART_CheckIdleState>
 800ddb6:	4603      	mov	r3, r0
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}

0800ddc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08a      	sub	sp, #40	@ 0x28
 800ddc4:	af02      	add	r7, sp, #8
 800ddc6:	60f8      	str	r0, [r7, #12]
 800ddc8:	60b9      	str	r1, [r7, #8]
 800ddca:	603b      	str	r3, [r7, #0]
 800ddcc:	4613      	mov	r3, r2
 800ddce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ddd4:	2b20      	cmp	r3, #32
 800ddd6:	d177      	bne.n	800dec8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d002      	beq.n	800dde4 <HAL_UART_Transmit+0x24>
 800ddde:	88fb      	ldrh	r3, [r7, #6]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d101      	bne.n	800dde8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800dde4:	2301      	movs	r3, #1
 800dde6:	e070      	b.n	800deca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2221      	movs	r2, #33	@ 0x21
 800ddf4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ddf6:	f7f9 fc6b 	bl	80076d0 <HAL_GetTick>
 800ddfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	88fa      	ldrh	r2, [r7, #6]
 800de00:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	88fa      	ldrh	r2, [r7, #6]
 800de08:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	689b      	ldr	r3, [r3, #8]
 800de10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800de14:	d108      	bne.n	800de28 <HAL_UART_Transmit+0x68>
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	691b      	ldr	r3, [r3, #16]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d104      	bne.n	800de28 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800de1e:	2300      	movs	r3, #0
 800de20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800de22:	68bb      	ldr	r3, [r7, #8]
 800de24:	61bb      	str	r3, [r7, #24]
 800de26:	e003      	b.n	800de30 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800de2c:	2300      	movs	r3, #0
 800de2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800de30:	e02f      	b.n	800de92 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	9300      	str	r3, [sp, #0]
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2200      	movs	r2, #0
 800de3a:	2180      	movs	r1, #128	@ 0x80
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f000 fba6 	bl	800e58e <UART_WaitOnFlagUntilTimeout>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d004      	beq.n	800de52 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2220      	movs	r2, #32
 800de4c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800de4e:	2303      	movs	r3, #3
 800de50:	e03b      	b.n	800deca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d10b      	bne.n	800de70 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800de58:	69bb      	ldr	r3, [r7, #24]
 800de5a:	881b      	ldrh	r3, [r3, #0]
 800de5c:	461a      	mov	r2, r3
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de66:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800de68:	69bb      	ldr	r3, [r7, #24]
 800de6a:	3302      	adds	r3, #2
 800de6c:	61bb      	str	r3, [r7, #24]
 800de6e:	e007      	b.n	800de80 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800de70:	69fb      	ldr	r3, [r7, #28]
 800de72:	781a      	ldrb	r2, [r3, #0]
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800de7a:	69fb      	ldr	r3, [r7, #28]
 800de7c:	3301      	adds	r3, #1
 800de7e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800de86:	b29b      	uxth	r3, r3
 800de88:	3b01      	subs	r3, #1
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800de98:	b29b      	uxth	r3, r3
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d1c9      	bne.n	800de32 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	2200      	movs	r2, #0
 800dea6:	2140      	movs	r1, #64	@ 0x40
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f000 fb70 	bl	800e58e <UART_WaitOnFlagUntilTimeout>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d004      	beq.n	800debe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	2220      	movs	r2, #32
 800deb8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800deba:	2303      	movs	r3, #3
 800debc:	e005      	b.n	800deca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2220      	movs	r2, #32
 800dec2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	e000      	b.n	800deca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800dec8:	2302      	movs	r3, #2
  }
}
 800deca:	4618      	mov	r0, r3
 800decc:	3720      	adds	r7, #32
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
	...

0800ded4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b088      	sub	sp, #32
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dedc:	2300      	movs	r3, #0
 800dede:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	689a      	ldr	r2, [r3, #8]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	431a      	orrs	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	695b      	ldr	r3, [r3, #20]
 800deee:	431a      	orrs	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	69db      	ldr	r3, [r3, #28]
 800def4:	4313      	orrs	r3, r2
 800def6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	4ba6      	ldr	r3, [pc, #664]	@ (800e198 <UART_SetConfig+0x2c4>)
 800df00:	4013      	ands	r3, r2
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	6812      	ldr	r2, [r2, #0]
 800df06:	6979      	ldr	r1, [r7, #20]
 800df08:	430b      	orrs	r3, r1
 800df0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68da      	ldr	r2, [r3, #12]
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	430a      	orrs	r2, r1
 800df20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	699b      	ldr	r3, [r3, #24]
 800df26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6a1b      	ldr	r3, [r3, #32]
 800df2c:	697a      	ldr	r2, [r7, #20]
 800df2e:	4313      	orrs	r3, r2
 800df30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	697a      	ldr	r2, [r7, #20]
 800df42:	430a      	orrs	r2, r1
 800df44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	4a94      	ldr	r2, [pc, #592]	@ (800e19c <UART_SetConfig+0x2c8>)
 800df4c:	4293      	cmp	r3, r2
 800df4e:	d120      	bne.n	800df92 <UART_SetConfig+0xbe>
 800df50:	4b93      	ldr	r3, [pc, #588]	@ (800e1a0 <UART_SetConfig+0x2cc>)
 800df52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df56:	f003 0303 	and.w	r3, r3, #3
 800df5a:	2b03      	cmp	r3, #3
 800df5c:	d816      	bhi.n	800df8c <UART_SetConfig+0xb8>
 800df5e:	a201      	add	r2, pc, #4	@ (adr r2, 800df64 <UART_SetConfig+0x90>)
 800df60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df64:	0800df75 	.word	0x0800df75
 800df68:	0800df81 	.word	0x0800df81
 800df6c:	0800df7b 	.word	0x0800df7b
 800df70:	0800df87 	.word	0x0800df87
 800df74:	2301      	movs	r3, #1
 800df76:	77fb      	strb	r3, [r7, #31]
 800df78:	e150      	b.n	800e21c <UART_SetConfig+0x348>
 800df7a:	2302      	movs	r3, #2
 800df7c:	77fb      	strb	r3, [r7, #31]
 800df7e:	e14d      	b.n	800e21c <UART_SetConfig+0x348>
 800df80:	2304      	movs	r3, #4
 800df82:	77fb      	strb	r3, [r7, #31]
 800df84:	e14a      	b.n	800e21c <UART_SetConfig+0x348>
 800df86:	2308      	movs	r3, #8
 800df88:	77fb      	strb	r3, [r7, #31]
 800df8a:	e147      	b.n	800e21c <UART_SetConfig+0x348>
 800df8c:	2310      	movs	r3, #16
 800df8e:	77fb      	strb	r3, [r7, #31]
 800df90:	e144      	b.n	800e21c <UART_SetConfig+0x348>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a83      	ldr	r2, [pc, #524]	@ (800e1a4 <UART_SetConfig+0x2d0>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d132      	bne.n	800e002 <UART_SetConfig+0x12e>
 800df9c:	4b80      	ldr	r3, [pc, #512]	@ (800e1a0 <UART_SetConfig+0x2cc>)
 800df9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dfa2:	f003 030c 	and.w	r3, r3, #12
 800dfa6:	2b0c      	cmp	r3, #12
 800dfa8:	d828      	bhi.n	800dffc <UART_SetConfig+0x128>
 800dfaa:	a201      	add	r2, pc, #4	@ (adr r2, 800dfb0 <UART_SetConfig+0xdc>)
 800dfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb0:	0800dfe5 	.word	0x0800dfe5
 800dfb4:	0800dffd 	.word	0x0800dffd
 800dfb8:	0800dffd 	.word	0x0800dffd
 800dfbc:	0800dffd 	.word	0x0800dffd
 800dfc0:	0800dff1 	.word	0x0800dff1
 800dfc4:	0800dffd 	.word	0x0800dffd
 800dfc8:	0800dffd 	.word	0x0800dffd
 800dfcc:	0800dffd 	.word	0x0800dffd
 800dfd0:	0800dfeb 	.word	0x0800dfeb
 800dfd4:	0800dffd 	.word	0x0800dffd
 800dfd8:	0800dffd 	.word	0x0800dffd
 800dfdc:	0800dffd 	.word	0x0800dffd
 800dfe0:	0800dff7 	.word	0x0800dff7
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	77fb      	strb	r3, [r7, #31]
 800dfe8:	e118      	b.n	800e21c <UART_SetConfig+0x348>
 800dfea:	2302      	movs	r3, #2
 800dfec:	77fb      	strb	r3, [r7, #31]
 800dfee:	e115      	b.n	800e21c <UART_SetConfig+0x348>
 800dff0:	2304      	movs	r3, #4
 800dff2:	77fb      	strb	r3, [r7, #31]
 800dff4:	e112      	b.n	800e21c <UART_SetConfig+0x348>
 800dff6:	2308      	movs	r3, #8
 800dff8:	77fb      	strb	r3, [r7, #31]
 800dffa:	e10f      	b.n	800e21c <UART_SetConfig+0x348>
 800dffc:	2310      	movs	r3, #16
 800dffe:	77fb      	strb	r3, [r7, #31]
 800e000:	e10c      	b.n	800e21c <UART_SetConfig+0x348>
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4a68      	ldr	r2, [pc, #416]	@ (800e1a8 <UART_SetConfig+0x2d4>)
 800e008:	4293      	cmp	r3, r2
 800e00a:	d120      	bne.n	800e04e <UART_SetConfig+0x17a>
 800e00c:	4b64      	ldr	r3, [pc, #400]	@ (800e1a0 <UART_SetConfig+0x2cc>)
 800e00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e012:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800e016:	2b30      	cmp	r3, #48	@ 0x30
 800e018:	d013      	beq.n	800e042 <UART_SetConfig+0x16e>
 800e01a:	2b30      	cmp	r3, #48	@ 0x30
 800e01c:	d814      	bhi.n	800e048 <UART_SetConfig+0x174>
 800e01e:	2b20      	cmp	r3, #32
 800e020:	d009      	beq.n	800e036 <UART_SetConfig+0x162>
 800e022:	2b20      	cmp	r3, #32
 800e024:	d810      	bhi.n	800e048 <UART_SetConfig+0x174>
 800e026:	2b00      	cmp	r3, #0
 800e028:	d002      	beq.n	800e030 <UART_SetConfig+0x15c>
 800e02a:	2b10      	cmp	r3, #16
 800e02c:	d006      	beq.n	800e03c <UART_SetConfig+0x168>
 800e02e:	e00b      	b.n	800e048 <UART_SetConfig+0x174>
 800e030:	2300      	movs	r3, #0
 800e032:	77fb      	strb	r3, [r7, #31]
 800e034:	e0f2      	b.n	800e21c <UART_SetConfig+0x348>
 800e036:	2302      	movs	r3, #2
 800e038:	77fb      	strb	r3, [r7, #31]
 800e03a:	e0ef      	b.n	800e21c <UART_SetConfig+0x348>
 800e03c:	2304      	movs	r3, #4
 800e03e:	77fb      	strb	r3, [r7, #31]
 800e040:	e0ec      	b.n	800e21c <UART_SetConfig+0x348>
 800e042:	2308      	movs	r3, #8
 800e044:	77fb      	strb	r3, [r7, #31]
 800e046:	e0e9      	b.n	800e21c <UART_SetConfig+0x348>
 800e048:	2310      	movs	r3, #16
 800e04a:	77fb      	strb	r3, [r7, #31]
 800e04c:	e0e6      	b.n	800e21c <UART_SetConfig+0x348>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a56      	ldr	r2, [pc, #344]	@ (800e1ac <UART_SetConfig+0x2d8>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d120      	bne.n	800e09a <UART_SetConfig+0x1c6>
 800e058:	4b51      	ldr	r3, [pc, #324]	@ (800e1a0 <UART_SetConfig+0x2cc>)
 800e05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e05e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800e062:	2bc0      	cmp	r3, #192	@ 0xc0
 800e064:	d013      	beq.n	800e08e <UART_SetConfig+0x1ba>
 800e066:	2bc0      	cmp	r3, #192	@ 0xc0
 800e068:	d814      	bhi.n	800e094 <UART_SetConfig+0x1c0>
 800e06a:	2b80      	cmp	r3, #128	@ 0x80
 800e06c:	d009      	beq.n	800e082 <UART_SetConfig+0x1ae>
 800e06e:	2b80      	cmp	r3, #128	@ 0x80
 800e070:	d810      	bhi.n	800e094 <UART_SetConfig+0x1c0>
 800e072:	2b00      	cmp	r3, #0
 800e074:	d002      	beq.n	800e07c <UART_SetConfig+0x1a8>
 800e076:	2b40      	cmp	r3, #64	@ 0x40
 800e078:	d006      	beq.n	800e088 <UART_SetConfig+0x1b4>
 800e07a:	e00b      	b.n	800e094 <UART_SetConfig+0x1c0>
 800e07c:	2300      	movs	r3, #0
 800e07e:	77fb      	strb	r3, [r7, #31]
 800e080:	e0cc      	b.n	800e21c <UART_SetConfig+0x348>
 800e082:	2302      	movs	r3, #2
 800e084:	77fb      	strb	r3, [r7, #31]
 800e086:	e0c9      	b.n	800e21c <UART_SetConfig+0x348>
 800e088:	2304      	movs	r3, #4
 800e08a:	77fb      	strb	r3, [r7, #31]
 800e08c:	e0c6      	b.n	800e21c <UART_SetConfig+0x348>
 800e08e:	2308      	movs	r3, #8
 800e090:	77fb      	strb	r3, [r7, #31]
 800e092:	e0c3      	b.n	800e21c <UART_SetConfig+0x348>
 800e094:	2310      	movs	r3, #16
 800e096:	77fb      	strb	r3, [r7, #31]
 800e098:	e0c0      	b.n	800e21c <UART_SetConfig+0x348>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	4a44      	ldr	r2, [pc, #272]	@ (800e1b0 <UART_SetConfig+0x2dc>)
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	d125      	bne.n	800e0f0 <UART_SetConfig+0x21c>
 800e0a4:	4b3e      	ldr	r3, [pc, #248]	@ (800e1a0 <UART_SetConfig+0x2cc>)
 800e0a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e0aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e0ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e0b2:	d017      	beq.n	800e0e4 <UART_SetConfig+0x210>
 800e0b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e0b8:	d817      	bhi.n	800e0ea <UART_SetConfig+0x216>
 800e0ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0be:	d00b      	beq.n	800e0d8 <UART_SetConfig+0x204>
 800e0c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0c4:	d811      	bhi.n	800e0ea <UART_SetConfig+0x216>
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d003      	beq.n	800e0d2 <UART_SetConfig+0x1fe>
 800e0ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e0ce:	d006      	beq.n	800e0de <UART_SetConfig+0x20a>
 800e0d0:	e00b      	b.n	800e0ea <UART_SetConfig+0x216>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	77fb      	strb	r3, [r7, #31]
 800e0d6:	e0a1      	b.n	800e21c <UART_SetConfig+0x348>
 800e0d8:	2302      	movs	r3, #2
 800e0da:	77fb      	strb	r3, [r7, #31]
 800e0dc:	e09e      	b.n	800e21c <UART_SetConfig+0x348>
 800e0de:	2304      	movs	r3, #4
 800e0e0:	77fb      	strb	r3, [r7, #31]
 800e0e2:	e09b      	b.n	800e21c <UART_SetConfig+0x348>
 800e0e4:	2308      	movs	r3, #8
 800e0e6:	77fb      	strb	r3, [r7, #31]
 800e0e8:	e098      	b.n	800e21c <UART_SetConfig+0x348>
 800e0ea:	2310      	movs	r3, #16
 800e0ec:	77fb      	strb	r3, [r7, #31]
 800e0ee:	e095      	b.n	800e21c <UART_SetConfig+0x348>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	4a2f      	ldr	r2, [pc, #188]	@ (800e1b4 <UART_SetConfig+0x2e0>)
 800e0f6:	4293      	cmp	r3, r2
 800e0f8:	d125      	bne.n	800e146 <UART_SetConfig+0x272>
 800e0fa:	4b29      	ldr	r3, [pc, #164]	@ (800e1a0 <UART_SetConfig+0x2cc>)
 800e0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e100:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800e104:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e108:	d017      	beq.n	800e13a <UART_SetConfig+0x266>
 800e10a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e10e:	d817      	bhi.n	800e140 <UART_SetConfig+0x26c>
 800e110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e114:	d00b      	beq.n	800e12e <UART_SetConfig+0x25a>
 800e116:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e11a:	d811      	bhi.n	800e140 <UART_SetConfig+0x26c>
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d003      	beq.n	800e128 <UART_SetConfig+0x254>
 800e120:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e124:	d006      	beq.n	800e134 <UART_SetConfig+0x260>
 800e126:	e00b      	b.n	800e140 <UART_SetConfig+0x26c>
 800e128:	2301      	movs	r3, #1
 800e12a:	77fb      	strb	r3, [r7, #31]
 800e12c:	e076      	b.n	800e21c <UART_SetConfig+0x348>
 800e12e:	2302      	movs	r3, #2
 800e130:	77fb      	strb	r3, [r7, #31]
 800e132:	e073      	b.n	800e21c <UART_SetConfig+0x348>
 800e134:	2304      	movs	r3, #4
 800e136:	77fb      	strb	r3, [r7, #31]
 800e138:	e070      	b.n	800e21c <UART_SetConfig+0x348>
 800e13a:	2308      	movs	r3, #8
 800e13c:	77fb      	strb	r3, [r7, #31]
 800e13e:	e06d      	b.n	800e21c <UART_SetConfig+0x348>
 800e140:	2310      	movs	r3, #16
 800e142:	77fb      	strb	r3, [r7, #31]
 800e144:	e06a      	b.n	800e21c <UART_SetConfig+0x348>
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a1b      	ldr	r2, [pc, #108]	@ (800e1b8 <UART_SetConfig+0x2e4>)
 800e14c:	4293      	cmp	r3, r2
 800e14e:	d138      	bne.n	800e1c2 <UART_SetConfig+0x2ee>
 800e150:	4b13      	ldr	r3, [pc, #76]	@ (800e1a0 <UART_SetConfig+0x2cc>)
 800e152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e156:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800e15a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e15e:	d017      	beq.n	800e190 <UART_SetConfig+0x2bc>
 800e160:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e164:	d82a      	bhi.n	800e1bc <UART_SetConfig+0x2e8>
 800e166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e16a:	d00b      	beq.n	800e184 <UART_SetConfig+0x2b0>
 800e16c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e170:	d824      	bhi.n	800e1bc <UART_SetConfig+0x2e8>
 800e172:	2b00      	cmp	r3, #0
 800e174:	d003      	beq.n	800e17e <UART_SetConfig+0x2aa>
 800e176:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e17a:	d006      	beq.n	800e18a <UART_SetConfig+0x2b6>
 800e17c:	e01e      	b.n	800e1bc <UART_SetConfig+0x2e8>
 800e17e:	2300      	movs	r3, #0
 800e180:	77fb      	strb	r3, [r7, #31]
 800e182:	e04b      	b.n	800e21c <UART_SetConfig+0x348>
 800e184:	2302      	movs	r3, #2
 800e186:	77fb      	strb	r3, [r7, #31]
 800e188:	e048      	b.n	800e21c <UART_SetConfig+0x348>
 800e18a:	2304      	movs	r3, #4
 800e18c:	77fb      	strb	r3, [r7, #31]
 800e18e:	e045      	b.n	800e21c <UART_SetConfig+0x348>
 800e190:	2308      	movs	r3, #8
 800e192:	77fb      	strb	r3, [r7, #31]
 800e194:	e042      	b.n	800e21c <UART_SetConfig+0x348>
 800e196:	bf00      	nop
 800e198:	efff69f3 	.word	0xefff69f3
 800e19c:	40011000 	.word	0x40011000
 800e1a0:	40023800 	.word	0x40023800
 800e1a4:	40004400 	.word	0x40004400
 800e1a8:	40004800 	.word	0x40004800
 800e1ac:	40004c00 	.word	0x40004c00
 800e1b0:	40005000 	.word	0x40005000
 800e1b4:	40011400 	.word	0x40011400
 800e1b8:	40007800 	.word	0x40007800
 800e1bc:	2310      	movs	r3, #16
 800e1be:	77fb      	strb	r3, [r7, #31]
 800e1c0:	e02c      	b.n	800e21c <UART_SetConfig+0x348>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a72      	ldr	r2, [pc, #456]	@ (800e390 <UART_SetConfig+0x4bc>)
 800e1c8:	4293      	cmp	r3, r2
 800e1ca:	d125      	bne.n	800e218 <UART_SetConfig+0x344>
 800e1cc:	4b71      	ldr	r3, [pc, #452]	@ (800e394 <UART_SetConfig+0x4c0>)
 800e1ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e1d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800e1d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e1da:	d017      	beq.n	800e20c <UART_SetConfig+0x338>
 800e1dc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800e1e0:	d817      	bhi.n	800e212 <UART_SetConfig+0x33e>
 800e1e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1e6:	d00b      	beq.n	800e200 <UART_SetConfig+0x32c>
 800e1e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e1ec:	d811      	bhi.n	800e212 <UART_SetConfig+0x33e>
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <UART_SetConfig+0x326>
 800e1f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e1f6:	d006      	beq.n	800e206 <UART_SetConfig+0x332>
 800e1f8:	e00b      	b.n	800e212 <UART_SetConfig+0x33e>
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	77fb      	strb	r3, [r7, #31]
 800e1fe:	e00d      	b.n	800e21c <UART_SetConfig+0x348>
 800e200:	2302      	movs	r3, #2
 800e202:	77fb      	strb	r3, [r7, #31]
 800e204:	e00a      	b.n	800e21c <UART_SetConfig+0x348>
 800e206:	2304      	movs	r3, #4
 800e208:	77fb      	strb	r3, [r7, #31]
 800e20a:	e007      	b.n	800e21c <UART_SetConfig+0x348>
 800e20c:	2308      	movs	r3, #8
 800e20e:	77fb      	strb	r3, [r7, #31]
 800e210:	e004      	b.n	800e21c <UART_SetConfig+0x348>
 800e212:	2310      	movs	r3, #16
 800e214:	77fb      	strb	r3, [r7, #31]
 800e216:	e001      	b.n	800e21c <UART_SetConfig+0x348>
 800e218:	2310      	movs	r3, #16
 800e21a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	69db      	ldr	r3, [r3, #28]
 800e220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e224:	d15b      	bne.n	800e2de <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800e226:	7ffb      	ldrb	r3, [r7, #31]
 800e228:	2b08      	cmp	r3, #8
 800e22a:	d828      	bhi.n	800e27e <UART_SetConfig+0x3aa>
 800e22c:	a201      	add	r2, pc, #4	@ (adr r2, 800e234 <UART_SetConfig+0x360>)
 800e22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e232:	bf00      	nop
 800e234:	0800e259 	.word	0x0800e259
 800e238:	0800e261 	.word	0x0800e261
 800e23c:	0800e269 	.word	0x0800e269
 800e240:	0800e27f 	.word	0x0800e27f
 800e244:	0800e26f 	.word	0x0800e26f
 800e248:	0800e27f 	.word	0x0800e27f
 800e24c:	0800e27f 	.word	0x0800e27f
 800e250:	0800e27f 	.word	0x0800e27f
 800e254:	0800e277 	.word	0x0800e277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e258:	f7fc fcd0 	bl	800abfc <HAL_RCC_GetPCLK1Freq>
 800e25c:	61b8      	str	r0, [r7, #24]
        break;
 800e25e:	e013      	b.n	800e288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e260:	f7fc fce0 	bl	800ac24 <HAL_RCC_GetPCLK2Freq>
 800e264:	61b8      	str	r0, [r7, #24]
        break;
 800e266:	e00f      	b.n	800e288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e268:	4b4b      	ldr	r3, [pc, #300]	@ (800e398 <UART_SetConfig+0x4c4>)
 800e26a:	61bb      	str	r3, [r7, #24]
        break;
 800e26c:	e00c      	b.n	800e288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e26e:	f7fc fbf3 	bl	800aa58 <HAL_RCC_GetSysClockFreq>
 800e272:	61b8      	str	r0, [r7, #24]
        break;
 800e274:	e008      	b.n	800e288 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e276:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e27a:	61bb      	str	r3, [r7, #24]
        break;
 800e27c:	e004      	b.n	800e288 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800e27e:	2300      	movs	r3, #0
 800e280:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e282:	2301      	movs	r3, #1
 800e284:	77bb      	strb	r3, [r7, #30]
        break;
 800e286:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e288:	69bb      	ldr	r3, [r7, #24]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d074      	beq.n	800e378 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e28e:	69bb      	ldr	r3, [r7, #24]
 800e290:	005a      	lsls	r2, r3, #1
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	685b      	ldr	r3, [r3, #4]
 800e296:	085b      	lsrs	r3, r3, #1
 800e298:	441a      	add	r2, r3
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	2b0f      	cmp	r3, #15
 800e2a8:	d916      	bls.n	800e2d8 <UART_SetConfig+0x404>
 800e2aa:	693b      	ldr	r3, [r7, #16]
 800e2ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2b0:	d212      	bcs.n	800e2d8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	b29b      	uxth	r3, r3
 800e2b6:	f023 030f 	bic.w	r3, r3, #15
 800e2ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	085b      	lsrs	r3, r3, #1
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	f003 0307 	and.w	r3, r3, #7
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	89fb      	ldrh	r3, [r7, #14]
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	89fa      	ldrh	r2, [r7, #14]
 800e2d4:	60da      	str	r2, [r3, #12]
 800e2d6:	e04f      	b.n	800e378 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	77bb      	strb	r3, [r7, #30]
 800e2dc:	e04c      	b.n	800e378 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e2de:	7ffb      	ldrb	r3, [r7, #31]
 800e2e0:	2b08      	cmp	r3, #8
 800e2e2:	d828      	bhi.n	800e336 <UART_SetConfig+0x462>
 800e2e4:	a201      	add	r2, pc, #4	@ (adr r2, 800e2ec <UART_SetConfig+0x418>)
 800e2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ea:	bf00      	nop
 800e2ec:	0800e311 	.word	0x0800e311
 800e2f0:	0800e319 	.word	0x0800e319
 800e2f4:	0800e321 	.word	0x0800e321
 800e2f8:	0800e337 	.word	0x0800e337
 800e2fc:	0800e327 	.word	0x0800e327
 800e300:	0800e337 	.word	0x0800e337
 800e304:	0800e337 	.word	0x0800e337
 800e308:	0800e337 	.word	0x0800e337
 800e30c:	0800e32f 	.word	0x0800e32f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e310:	f7fc fc74 	bl	800abfc <HAL_RCC_GetPCLK1Freq>
 800e314:	61b8      	str	r0, [r7, #24]
        break;
 800e316:	e013      	b.n	800e340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e318:	f7fc fc84 	bl	800ac24 <HAL_RCC_GetPCLK2Freq>
 800e31c:	61b8      	str	r0, [r7, #24]
        break;
 800e31e:	e00f      	b.n	800e340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800e320:	4b1d      	ldr	r3, [pc, #116]	@ (800e398 <UART_SetConfig+0x4c4>)
 800e322:	61bb      	str	r3, [r7, #24]
        break;
 800e324:	e00c      	b.n	800e340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e326:	f7fc fb97 	bl	800aa58 <HAL_RCC_GetSysClockFreq>
 800e32a:	61b8      	str	r0, [r7, #24]
        break;
 800e32c:	e008      	b.n	800e340 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e32e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e332:	61bb      	str	r3, [r7, #24]
        break;
 800e334:	e004      	b.n	800e340 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800e336:	2300      	movs	r3, #0
 800e338:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800e33a:	2301      	movs	r3, #1
 800e33c:	77bb      	strb	r3, [r7, #30]
        break;
 800e33e:	bf00      	nop
    }

    if (pclk != 0U)
 800e340:	69bb      	ldr	r3, [r7, #24]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d018      	beq.n	800e378 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	085a      	lsrs	r2, r3, #1
 800e34c:	69bb      	ldr	r3, [r7, #24]
 800e34e:	441a      	add	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	fbb2 f3f3 	udiv	r3, r2, r3
 800e358:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	2b0f      	cmp	r3, #15
 800e35e:	d909      	bls.n	800e374 <UART_SetConfig+0x4a0>
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e366:	d205      	bcs.n	800e374 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	b29a      	uxth	r2, r3
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	60da      	str	r2, [r3, #12]
 800e372:	e001      	b.n	800e378 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800e374:	2301      	movs	r3, #1
 800e376:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e384:	7fbb      	ldrb	r3, [r7, #30]
}
 800e386:	4618      	mov	r0, r3
 800e388:	3720      	adds	r7, #32
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	40007c00 	.word	0x40007c00
 800e394:	40023800 	.word	0x40023800
 800e398:	00f42400 	.word	0x00f42400

0800e39c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3a8:	f003 0308 	and.w	r3, r3, #8
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00a      	beq.n	800e3c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	430a      	orrs	r2, r1
 800e3c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ca:	f003 0301 	and.w	r3, r3, #1
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00a      	beq.n	800e3e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	430a      	orrs	r2, r1
 800e3e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e3ec:	f003 0302 	and.w	r3, r3, #2
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00a      	beq.n	800e40a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	685b      	ldr	r3, [r3, #4]
 800e3fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	430a      	orrs	r2, r1
 800e408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e40e:	f003 0304 	and.w	r3, r3, #4
 800e412:	2b00      	cmp	r3, #0
 800e414:	d00a      	beq.n	800e42c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	685b      	ldr	r3, [r3, #4]
 800e41c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	430a      	orrs	r2, r1
 800e42a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e430:	f003 0310 	and.w	r3, r3, #16
 800e434:	2b00      	cmp	r3, #0
 800e436:	d00a      	beq.n	800e44e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	430a      	orrs	r2, r1
 800e44c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e452:	f003 0320 	and.w	r3, r3, #32
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00a      	beq.n	800e470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	689b      	ldr	r3, [r3, #8]
 800e460:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	430a      	orrs	r2, r1
 800e46e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d01a      	beq.n	800e4b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	430a      	orrs	r2, r1
 800e490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e49a:	d10a      	bne.n	800e4b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	685b      	ldr	r3, [r3, #4]
 800e4a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	430a      	orrs	r2, r1
 800e4b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00a      	beq.n	800e4d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	430a      	orrs	r2, r1
 800e4d2:	605a      	str	r2, [r3, #4]
  }
}
 800e4d4:	bf00      	nop
 800e4d6:	370c      	adds	r7, #12
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr

0800e4e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b08c      	sub	sp, #48	@ 0x30
 800e4e4:	af02      	add	r7, sp, #8
 800e4e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e4f0:	f7f9 f8ee 	bl	80076d0 <HAL_GetTick>
 800e4f4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	f003 0308 	and.w	r3, r3, #8
 800e500:	2b08      	cmp	r3, #8
 800e502:	d12e      	bne.n	800e562 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e504:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800e508:	9300      	str	r3, [sp, #0]
 800e50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e50c:	2200      	movs	r2, #0
 800e50e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f000 f83b 	bl	800e58e <UART_WaitOnFlagUntilTimeout>
 800e518:	4603      	mov	r3, r0
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d021      	beq.n	800e562 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	e853 3f00 	ldrex	r3, [r3]
 800e52a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e532:	623b      	str	r3, [r7, #32]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	461a      	mov	r2, r3
 800e53a:	6a3b      	ldr	r3, [r7, #32]
 800e53c:	61fb      	str	r3, [r7, #28]
 800e53e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e540:	69b9      	ldr	r1, [r7, #24]
 800e542:	69fa      	ldr	r2, [r7, #28]
 800e544:	e841 2300 	strex	r3, r2, [r1]
 800e548:	617b      	str	r3, [r7, #20]
   return(result);
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d1e6      	bne.n	800e51e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2220      	movs	r2, #32
 800e554:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	2200      	movs	r2, #0
 800e55a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e55e:	2303      	movs	r3, #3
 800e560:	e011      	b.n	800e586 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2220      	movs	r2, #32
 800e566:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2220      	movs	r2, #32
 800e56c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800e584:	2300      	movs	r3, #0
}
 800e586:	4618      	mov	r0, r3
 800e588:	3728      	adds	r7, #40	@ 0x28
 800e58a:	46bd      	mov	sp, r7
 800e58c:	bd80      	pop	{r7, pc}

0800e58e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e58e:	b580      	push	{r7, lr}
 800e590:	b084      	sub	sp, #16
 800e592:	af00      	add	r7, sp, #0
 800e594:	60f8      	str	r0, [r7, #12]
 800e596:	60b9      	str	r1, [r7, #8]
 800e598:	603b      	str	r3, [r7, #0]
 800e59a:	4613      	mov	r3, r2
 800e59c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e59e:	e04f      	b.n	800e640 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e5a0:	69bb      	ldr	r3, [r7, #24]
 800e5a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5a6:	d04b      	beq.n	800e640 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e5a8:	f7f9 f892 	bl	80076d0 <HAL_GetTick>
 800e5ac:	4602      	mov	r2, r0
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	1ad3      	subs	r3, r2, r3
 800e5b2:	69ba      	ldr	r2, [r7, #24]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d302      	bcc.n	800e5be <UART_WaitOnFlagUntilTimeout+0x30>
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d101      	bne.n	800e5c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e5be:	2303      	movs	r3, #3
 800e5c0:	e04e      	b.n	800e660 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f003 0304 	and.w	r3, r3, #4
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d037      	beq.n	800e640 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	2b80      	cmp	r3, #128	@ 0x80
 800e5d4:	d034      	beq.n	800e640 <UART_WaitOnFlagUntilTimeout+0xb2>
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	2b40      	cmp	r3, #64	@ 0x40
 800e5da:	d031      	beq.n	800e640 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	69db      	ldr	r3, [r3, #28]
 800e5e2:	f003 0308 	and.w	r3, r3, #8
 800e5e6:	2b08      	cmp	r3, #8
 800e5e8:	d110      	bne.n	800e60c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2208      	movs	r2, #8
 800e5f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e5f2:	68f8      	ldr	r0, [r7, #12]
 800e5f4:	f000 f838 	bl	800e668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	2208      	movs	r2, #8
 800e5fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2200      	movs	r2, #0
 800e604:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800e608:	2301      	movs	r3, #1
 800e60a:	e029      	b.n	800e660 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	69db      	ldr	r3, [r3, #28]
 800e612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e616:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e61a:	d111      	bne.n	800e640 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e624:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f000 f81e 	bl	800e668 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2220      	movs	r2, #32
 800e630:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2200      	movs	r2, #0
 800e638:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800e63c:	2303      	movs	r3, #3
 800e63e:	e00f      	b.n	800e660 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	69da      	ldr	r2, [r3, #28]
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	4013      	ands	r3, r2
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	bf0c      	ite	eq
 800e650:	2301      	moveq	r3, #1
 800e652:	2300      	movne	r3, #0
 800e654:	b2db      	uxtb	r3, r3
 800e656:	461a      	mov	r2, r3
 800e658:	79fb      	ldrb	r3, [r7, #7]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d0a0      	beq.n	800e5a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e65e:	2300      	movs	r3, #0
}
 800e660:	4618      	mov	r0, r3
 800e662:	3710      	adds	r7, #16
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e668:	b480      	push	{r7}
 800e66a:	b095      	sub	sp, #84	@ 0x54
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e678:	e853 3f00 	ldrex	r3, [r3]
 800e67c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	461a      	mov	r2, r3
 800e68c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e68e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e690:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e692:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e694:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e696:	e841 2300 	strex	r3, r2, [r1]
 800e69a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e69c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1e6      	bne.n	800e670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	3308      	adds	r3, #8
 800e6a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6aa:	6a3b      	ldr	r3, [r7, #32]
 800e6ac:	e853 3f00 	ldrex	r3, [r3]
 800e6b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	f023 0301 	bic.w	r3, r3, #1
 800e6b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	3308      	adds	r3, #8
 800e6c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e6c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e6c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e6c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e6ca:	e841 2300 	strex	r3, r2, [r1]
 800e6ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d1e5      	bne.n	800e6a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	d118      	bne.n	800e710 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	e853 3f00 	ldrex	r3, [r3]
 800e6ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6ec:	68bb      	ldr	r3, [r7, #8]
 800e6ee:	f023 0310 	bic.w	r3, r3, #16
 800e6f2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6fc:	61bb      	str	r3, [r7, #24]
 800e6fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e700:	6979      	ldr	r1, [r7, #20]
 800e702:	69ba      	ldr	r2, [r7, #24]
 800e704:	e841 2300 	strex	r3, r2, [r1]
 800e708:	613b      	str	r3, [r7, #16]
   return(result);
 800e70a:	693b      	ldr	r3, [r7, #16]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d1e6      	bne.n	800e6de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2220      	movs	r2, #32
 800e714:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2200      	movs	r2, #0
 800e722:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e724:	bf00      	nop
 800e726:	3754      	adds	r7, #84	@ 0x54
 800e728:	46bd      	mov	sp, r7
 800e72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72e:	4770      	bx	lr

0800e730 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e73a:	683b      	ldr	r3, [r7, #0]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d121      	bne.n	800e786 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	4b27      	ldr	r3, [pc, #156]	@ (800e7e4 <FMC_SDRAM_Init+0xb4>)
 800e748:	4013      	ands	r3, r2
 800e74a:	683a      	ldr	r2, [r7, #0]
 800e74c:	6851      	ldr	r1, [r2, #4]
 800e74e:	683a      	ldr	r2, [r7, #0]
 800e750:	6892      	ldr	r2, [r2, #8]
 800e752:	4311      	orrs	r1, r2
 800e754:	683a      	ldr	r2, [r7, #0]
 800e756:	68d2      	ldr	r2, [r2, #12]
 800e758:	4311      	orrs	r1, r2
 800e75a:	683a      	ldr	r2, [r7, #0]
 800e75c:	6912      	ldr	r2, [r2, #16]
 800e75e:	4311      	orrs	r1, r2
 800e760:	683a      	ldr	r2, [r7, #0]
 800e762:	6952      	ldr	r2, [r2, #20]
 800e764:	4311      	orrs	r1, r2
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	6992      	ldr	r2, [r2, #24]
 800e76a:	4311      	orrs	r1, r2
 800e76c:	683a      	ldr	r2, [r7, #0]
 800e76e:	69d2      	ldr	r2, [r2, #28]
 800e770:	4311      	orrs	r1, r2
 800e772:	683a      	ldr	r2, [r7, #0]
 800e774:	6a12      	ldr	r2, [r2, #32]
 800e776:	4311      	orrs	r1, r2
 800e778:	683a      	ldr	r2, [r7, #0]
 800e77a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800e77c:	430a      	orrs	r2, r1
 800e77e:	431a      	orrs	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	601a      	str	r2, [r3, #0]
 800e784:	e026      	b.n	800e7d4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	69d9      	ldr	r1, [r3, #28]
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	6a1b      	ldr	r3, [r3, #32]
 800e796:	4319      	orrs	r1, r3
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e79c:	430b      	orrs	r3, r1
 800e79e:	431a      	orrs	r2, r3
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	685a      	ldr	r2, [r3, #4]
 800e7a8:	4b0e      	ldr	r3, [pc, #56]	@ (800e7e4 <FMC_SDRAM_Init+0xb4>)
 800e7aa:	4013      	ands	r3, r2
 800e7ac:	683a      	ldr	r2, [r7, #0]
 800e7ae:	6851      	ldr	r1, [r2, #4]
 800e7b0:	683a      	ldr	r2, [r7, #0]
 800e7b2:	6892      	ldr	r2, [r2, #8]
 800e7b4:	4311      	orrs	r1, r2
 800e7b6:	683a      	ldr	r2, [r7, #0]
 800e7b8:	68d2      	ldr	r2, [r2, #12]
 800e7ba:	4311      	orrs	r1, r2
 800e7bc:	683a      	ldr	r2, [r7, #0]
 800e7be:	6912      	ldr	r2, [r2, #16]
 800e7c0:	4311      	orrs	r1, r2
 800e7c2:	683a      	ldr	r2, [r7, #0]
 800e7c4:	6952      	ldr	r2, [r2, #20]
 800e7c6:	4311      	orrs	r1, r2
 800e7c8:	683a      	ldr	r2, [r7, #0]
 800e7ca:	6992      	ldr	r2, [r2, #24]
 800e7cc:	430a      	orrs	r2, r1
 800e7ce:	431a      	orrs	r2, r3
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	370c      	adds	r7, #12
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	ffff8000 	.word	0xffff8000

0800e7e8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d128      	bne.n	800e84c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	689b      	ldr	r3, [r3, #8]
 800e7fe:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	1e59      	subs	r1, r3, #1
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	3b01      	subs	r3, #1
 800e80e:	011b      	lsls	r3, r3, #4
 800e810:	4319      	orrs	r1, r3
 800e812:	68bb      	ldr	r3, [r7, #8]
 800e814:	689b      	ldr	r3, [r3, #8]
 800e816:	3b01      	subs	r3, #1
 800e818:	021b      	lsls	r3, r3, #8
 800e81a:	4319      	orrs	r1, r3
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	3b01      	subs	r3, #1
 800e822:	031b      	lsls	r3, r3, #12
 800e824:	4319      	orrs	r1, r3
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	691b      	ldr	r3, [r3, #16]
 800e82a:	3b01      	subs	r3, #1
 800e82c:	041b      	lsls	r3, r3, #16
 800e82e:	4319      	orrs	r1, r3
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	695b      	ldr	r3, [r3, #20]
 800e834:	3b01      	subs	r3, #1
 800e836:	051b      	lsls	r3, r3, #20
 800e838:	4319      	orrs	r1, r3
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	699b      	ldr	r3, [r3, #24]
 800e83e:	3b01      	subs	r3, #1
 800e840:	061b      	lsls	r3, r3, #24
 800e842:	430b      	orrs	r3, r1
 800e844:	431a      	orrs	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	609a      	str	r2, [r3, #8]
 800e84a:	e02d      	b.n	800e8a8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	689a      	ldr	r2, [r3, #8]
 800e850:	4b19      	ldr	r3, [pc, #100]	@ (800e8b8 <FMC_SDRAM_Timing_Init+0xd0>)
 800e852:	4013      	ands	r3, r2
 800e854:	68ba      	ldr	r2, [r7, #8]
 800e856:	68d2      	ldr	r2, [r2, #12]
 800e858:	3a01      	subs	r2, #1
 800e85a:	0311      	lsls	r1, r2, #12
 800e85c:	68ba      	ldr	r2, [r7, #8]
 800e85e:	6952      	ldr	r2, [r2, #20]
 800e860:	3a01      	subs	r2, #1
 800e862:	0512      	lsls	r2, r2, #20
 800e864:	430a      	orrs	r2, r1
 800e866:	431a      	orrs	r2, r3
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	1e59      	subs	r1, r3, #1
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	3b01      	subs	r3, #1
 800e880:	011b      	lsls	r3, r3, #4
 800e882:	4319      	orrs	r1, r3
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	3b01      	subs	r3, #1
 800e88a:	021b      	lsls	r3, r3, #8
 800e88c:	4319      	orrs	r1, r3
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	691b      	ldr	r3, [r3, #16]
 800e892:	3b01      	subs	r3, #1
 800e894:	041b      	lsls	r3, r3, #16
 800e896:	4319      	orrs	r1, r3
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	699b      	ldr	r3, [r3, #24]
 800e89c:	3b01      	subs	r3, #1
 800e89e:	061b      	lsls	r3, r3, #24
 800e8a0:	430b      	orrs	r3, r1
 800e8a2:	431a      	orrs	r2, r3
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3714      	adds	r7, #20
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	ff0f0fff 	.word	0xff0f0fff

0800e8bc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b085      	sub	sp, #20
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	60f8      	str	r0, [r7, #12]
 800e8c4:	60b9      	str	r1, [r7, #8]
 800e8c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	691a      	ldr	r2, [r3, #16]
 800e8cc:	4b0c      	ldr	r3, [pc, #48]	@ (800e900 <FMC_SDRAM_SendCommand+0x44>)
 800e8ce:	4013      	ands	r3, r2
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	6811      	ldr	r1, [r2, #0]
 800e8d4:	68ba      	ldr	r2, [r7, #8]
 800e8d6:	6852      	ldr	r2, [r2, #4]
 800e8d8:	4311      	orrs	r1, r2
 800e8da:	68ba      	ldr	r2, [r7, #8]
 800e8dc:	6892      	ldr	r2, [r2, #8]
 800e8de:	3a01      	subs	r2, #1
 800e8e0:	0152      	lsls	r2, r2, #5
 800e8e2:	4311      	orrs	r1, r2
 800e8e4:	68ba      	ldr	r2, [r7, #8]
 800e8e6:	68d2      	ldr	r2, [r2, #12]
 800e8e8:	0252      	lsls	r2, r2, #9
 800e8ea:	430a      	orrs	r2, r1
 800e8ec:	431a      	orrs	r2, r3
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3714      	adds	r7, #20
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr
 800e900:	ffc00000 	.word	0xffc00000

0800e904 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	695a      	ldr	r2, [r3, #20]
 800e912:	4b07      	ldr	r3, [pc, #28]	@ (800e930 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800e914:	4013      	ands	r3, r2
 800e916:	683a      	ldr	r2, [r7, #0]
 800e918:	0052      	lsls	r2, r2, #1
 800e91a:	431a      	orrs	r2, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800e920:	2300      	movs	r3, #0
}
 800e922:	4618      	mov	r0, r3
 800e924:	370c      	adds	r7, #12
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
 800e92e:	bf00      	nop
 800e930:	ffffc001 	.word	0xffffc001

0800e934 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e934:	b084      	sub	sp, #16
 800e936:	b480      	push	{r7}
 800e938:	b085      	sub	sp, #20
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
 800e93e:	f107 001c 	add.w	r0, r7, #28
 800e942:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e946:	2300      	movs	r3, #0
 800e948:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e94a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e94c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e94e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800e952:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800e956:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800e95a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800e95e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e960:	68fa      	ldr	r2, [r7, #12]
 800e962:	4313      	orrs	r3, r2
 800e964:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	685a      	ldr	r2, [r3, #4]
 800e96a:	4b07      	ldr	r3, [pc, #28]	@ (800e988 <SDMMC_Init+0x54>)
 800e96c:	4013      	ands	r3, r2
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	431a      	orrs	r2, r3
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e976:	2300      	movs	r3, #0
}
 800e978:	4618      	mov	r0, r3
 800e97a:	3714      	adds	r7, #20
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	b004      	add	sp, #16
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	ffff8100 	.word	0xffff8100

0800e98c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	370c      	adds	r7, #12
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a4:	4770      	bx	lr

0800e9a6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800e9a6:	b480      	push	{r7}
 800e9a8:	b083      	sub	sp, #12
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
 800e9ae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800e9ba:	2300      	movs	r3, #0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	370c      	adds	r7, #12
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2203      	movs	r2, #3
 800e9d4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e9d6:	2300      	movs	r3, #0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	370c      	adds	r7, #12
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b083      	sub	sp, #12
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f003 0303 	and.w	r3, r3, #3
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	370c      	adds	r7, #12
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b085      	sub	sp, #20
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ea1e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ea24:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ea2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	4313      	orrs	r3, r2
 800ea30:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	68da      	ldr	r2, [r3, #12]
 800ea36:	4b06      	ldr	r3, [pc, #24]	@ (800ea50 <SDMMC_SendCommand+0x50>)
 800ea38:	4013      	ands	r3, r2
 800ea3a:	68fa      	ldr	r2, [r7, #12]
 800ea3c:	431a      	orrs	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ea42:	2300      	movs	r3, #0
}
 800ea44:	4618      	mov	r0, r3
 800ea46:	3714      	adds	r7, #20
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4e:	4770      	bx	lr
 800ea50:	fffff000 	.word	0xfffff000

0800ea54 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	691b      	ldr	r3, [r3, #16]
 800ea60:	b2db      	uxtb	r3, r3
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	370c      	adds	r7, #12
 800ea66:	46bd      	mov	sp, r7
 800ea68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6c:	4770      	bx	lr

0800ea6e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ea6e:	b480      	push	{r7}
 800ea70:	b085      	sub	sp, #20
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
 800ea76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	3314      	adds	r3, #20
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	4413      	add	r3, r2
 800ea82:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
}  
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3714      	adds	r7, #20
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr

0800ea94 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	685a      	ldr	r2, [r3, #4]
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eaba:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800eac0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800eac6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800eac8:	68fa      	ldr	r2, [r7, #12]
 800eaca:	4313      	orrs	r3, r2
 800eacc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ead2:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	431a      	orrs	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800eade:	2300      	movs	r3, #0

}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3714      	adds	r7, #20
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b088      	sub	sp, #32
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800eafa:	2310      	movs	r3, #16
 800eafc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eafe:	2340      	movs	r3, #64	@ 0x40
 800eb00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb02:	2300      	movs	r3, #0
 800eb04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb0c:	f107 0308 	add.w	r3, r7, #8
 800eb10:	4619      	mov	r1, r3
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7ff ff74 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800eb18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb1c:	2110      	movs	r1, #16
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 f9d6 	bl	800eed0 <SDMMC_GetCmdResp1>
 800eb24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb26:	69fb      	ldr	r3, [r7, #28]
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3720      	adds	r7, #32
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b088      	sub	sp, #32
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eb3a:	683b      	ldr	r3, [r7, #0]
 800eb3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800eb3e:	2311      	movs	r3, #17
 800eb40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb42:	2340      	movs	r3, #64	@ 0x40
 800eb44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb46:	2300      	movs	r3, #0
 800eb48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb50:	f107 0308 	add.w	r3, r7, #8
 800eb54:	4619      	mov	r1, r3
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7ff ff52 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800eb5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eb60:	2111      	movs	r1, #17
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 f9b4 	bl	800eed0 <SDMMC_GetCmdResp1>
 800eb68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb6a:	69fb      	ldr	r3, [r7, #28]
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	3720      	adds	r7, #32
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b088      	sub	sp, #32
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800eb82:	2312      	movs	r3, #18
 800eb84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eb86:	2340      	movs	r3, #64	@ 0x40
 800eb88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eb8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eb94:	f107 0308 	add.w	r3, r7, #8
 800eb98:	4619      	mov	r1, r3
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7ff ff30 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800eba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eba4:	2112      	movs	r1, #18
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f000 f992 	bl	800eed0 <SDMMC_GetCmdResp1>
 800ebac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebae:	69fb      	ldr	r3, [r7, #28]
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3720      	adds	r7, #32
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b088      	sub	sp, #32
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ebc6:	2318      	movs	r3, #24
 800ebc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ebca:	2340      	movs	r3, #64	@ 0x40
 800ebcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ebd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ebd6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ebd8:	f107 0308 	add.w	r3, r7, #8
 800ebdc:	4619      	mov	r1, r3
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f7ff ff0e 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ebe4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ebe8:	2118      	movs	r1, #24
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f000 f970 	bl	800eed0 <SDMMC_GetCmdResp1>
 800ebf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebf2:	69fb      	ldr	r3, [r7, #28]
}
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	3720      	adds	r7, #32
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b088      	sub	sp, #32
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ec0a:	2319      	movs	r3, #25
 800ec0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec0e:	2340      	movs	r3, #64	@ 0x40
 800ec10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec12:	2300      	movs	r3, #0
 800ec14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec1c:	f107 0308 	add.w	r3, r7, #8
 800ec20:	4619      	mov	r1, r3
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f7ff feec 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ec28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ec2c:	2119      	movs	r1, #25
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 f94e 	bl	800eed0 <SDMMC_GetCmdResp1>
 800ec34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec36:	69fb      	ldr	r3, [r7, #28]
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3720      	adds	r7, #32
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b088      	sub	sp, #32
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ec4c:	230c      	movs	r3, #12
 800ec4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec50:	2340      	movs	r3, #64	@ 0x40
 800ec52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec54:	2300      	movs	r3, #0
 800ec56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ec58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ec5c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ec5e:	f107 0308 	add.w	r3, r7, #8
 800ec62:	4619      	mov	r1, r3
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f7ff fecb 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ec6a:	4a05      	ldr	r2, [pc, #20]	@ (800ec80 <SDMMC_CmdStopTransfer+0x40>)
 800ec6c:	210c      	movs	r1, #12
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	f000 f92e 	bl	800eed0 <SDMMC_GetCmdResp1>
 800ec74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec76:	69fb      	ldr	r3, [r7, #28]
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3720      	adds	r7, #32
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}
 800ec80:	05f5e100 	.word	0x05f5e100

0800ec84 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b08a      	sub	sp, #40	@ 0x28
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ec94:	2307      	movs	r3, #7
 800ec96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ec98:	2340      	movs	r3, #64	@ 0x40
 800ec9a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eca4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eca6:	f107 0310 	add.w	r3, r7, #16
 800ecaa:	4619      	mov	r1, r3
 800ecac:	68f8      	ldr	r0, [r7, #12]
 800ecae:	f7ff fea7 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ecb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ecb6:	2107      	movs	r1, #7
 800ecb8:	68f8      	ldr	r0, [r7, #12]
 800ecba:	f000 f909 	bl	800eed0 <SDMMC_GetCmdResp1>
 800ecbe:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800ecc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3728      	adds	r7, #40	@ 0x28
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}

0800ecca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ecca:	b580      	push	{r7, lr}
 800eccc:	b088      	sub	sp, #32
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ecda:	2300      	movs	r3, #0
 800ecdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ecde:	2300      	movs	r3, #0
 800ece0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ece2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ece6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ece8:	f107 0308 	add.w	r3, r7, #8
 800ecec:	4619      	mov	r1, r3
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7ff fe86 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 fb23 	bl	800f340 <SDMMC_GetCmdError>
 800ecfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecfc:	69fb      	ldr	r3, [r7, #28]
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	3720      	adds	r7, #32
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ed06:	b580      	push	{r7, lr}
 800ed08:	b088      	sub	sp, #32
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ed0e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800ed12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ed14:	2308      	movs	r3, #8
 800ed16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed18:	2340      	movs	r3, #64	@ 0x40
 800ed1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed26:	f107 0308 	add.w	r3, r7, #8
 800ed2a:	4619      	mov	r1, r3
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f7ff fe67 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 fab6 	bl	800f2a4 <SDMMC_GetCmdResp7>
 800ed38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed3a:	69fb      	ldr	r3, [r7, #28]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3720      	adds	r7, #32
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b088      	sub	sp, #32
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ed52:	2337      	movs	r3, #55	@ 0x37
 800ed54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed56:	2340      	movs	r3, #64	@ 0x40
 800ed58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed64:	f107 0308 	add.w	r3, r7, #8
 800ed68:	4619      	mov	r1, r3
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f7ff fe48 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ed70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ed74:	2137      	movs	r1, #55	@ 0x37
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 f8aa 	bl	800eed0 <SDMMC_GetCmdResp1>
 800ed7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed7e:	69fb      	ldr	r3, [r7, #28]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3720      	adds	r7, #32
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b088      	sub	sp, #32
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	4b0d      	ldr	r3, [pc, #52]	@ (800edcc <SDMMC_CmdAppOperCommand+0x44>)
 800ed96:	4313      	orrs	r3, r2
 800ed98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ed9a:	2329      	movs	r3, #41	@ 0x29
 800ed9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed9e:	2340      	movs	r3, #64	@ 0x40
 800eda0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eda2:	2300      	movs	r3, #0
 800eda4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eda6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edac:	f107 0308 	add.w	r3, r7, #8
 800edb0:	4619      	mov	r1, r3
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7ff fe24 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f000 f9bf 	bl	800f13c <SDMMC_GetCmdResp3>
 800edbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edc0:	69fb      	ldr	r3, [r7, #28]
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3720      	adds	r7, #32
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	80100000 	.word	0x80100000

0800edd0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b088      	sub	sp, #32
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800edd8:	2300      	movs	r3, #0
 800edda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800eddc:	2302      	movs	r3, #2
 800edde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ede0:	23c0      	movs	r3, #192	@ 0xc0
 800ede2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ede4:	2300      	movs	r3, #0
 800ede6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ede8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800edee:	f107 0308 	add.w	r3, r7, #8
 800edf2:	4619      	mov	r1, r3
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f7ff fe03 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 f956 	bl	800f0ac <SDMMC_GetCmdResp2>
 800ee00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee02:	69fb      	ldr	r3, [r7, #28]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3720      	adds	r7, #32
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b088      	sub	sp, #32
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ee1a:	2309      	movs	r3, #9
 800ee1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ee1e:	23c0      	movs	r3, #192	@ 0xc0
 800ee20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee22:	2300      	movs	r3, #0
 800ee24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee2c:	f107 0308 	add.w	r3, r7, #8
 800ee30:	4619      	mov	r1, r3
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7ff fde4 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 f937 	bl	800f0ac <SDMMC_GetCmdResp2>
 800ee3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee40:	69fb      	ldr	r3, [r7, #28]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3720      	adds	r7, #32
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ee4a:	b580      	push	{r7, lr}
 800ee4c:	b088      	sub	sp, #32
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	6078      	str	r0, [r7, #4]
 800ee52:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ee54:	2300      	movs	r3, #0
 800ee56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ee58:	2303      	movs	r3, #3
 800ee5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee5c:	2340      	movs	r3, #64	@ 0x40
 800ee5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee60:	2300      	movs	r3, #0
 800ee62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ee68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee6a:	f107 0308 	add.w	r3, r7, #8
 800ee6e:	4619      	mov	r1, r3
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f7ff fdc5 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ee76:	683a      	ldr	r2, [r7, #0]
 800ee78:	2103      	movs	r1, #3
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 f99c 	bl	800f1b8 <SDMMC_GetCmdResp6>
 800ee80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee82:	69fb      	ldr	r3, [r7, #28]
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	3720      	adds	r7, #32
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bd80      	pop	{r7, pc}

0800ee8c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b088      	sub	sp, #32
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ee9a:	230d      	movs	r3, #13
 800ee9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ee9e:	2340      	movs	r3, #64	@ 0x40
 800eea0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eea2:	2300      	movs	r3, #0
 800eea4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eea6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eeaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eeac:	f107 0308 	add.w	r3, r7, #8
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f7ff fda4 	bl	800ea00 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800eeb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800eebc:	210d      	movs	r1, #13
 800eebe:	6878      	ldr	r0, [r7, #4]
 800eec0:	f000 f806 	bl	800eed0 <SDMMC_GetCmdResp1>
 800eec4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eec6:	69fb      	ldr	r3, [r7, #28]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3720      	adds	r7, #32
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}

0800eed0 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b088      	sub	sp, #32
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	60f8      	str	r0, [r7, #12]
 800eed8:	460b      	mov	r3, r1
 800eeda:	607a      	str	r2, [r7, #4]
 800eedc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800eede:	4b70      	ldr	r3, [pc, #448]	@ (800f0a0 <SDMMC_GetCmdResp1+0x1d0>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	4a70      	ldr	r2, [pc, #448]	@ (800f0a4 <SDMMC_GetCmdResp1+0x1d4>)
 800eee4:	fba2 2303 	umull	r2, r3, r2, r3
 800eee8:	0a5a      	lsrs	r2, r3, #9
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	fb02 f303 	mul.w	r3, r2, r3
 800eef0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	1e5a      	subs	r2, r3, #1
 800eef6:	61fa      	str	r2, [r7, #28]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d102      	bne.n	800ef02 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eefc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ef00:	e0c9      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef06:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef08:	69bb      	ldr	r3, [r7, #24]
 800ef0a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d0ef      	beq.n	800eef2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ef12:	69bb      	ldr	r3, [r7, #24]
 800ef14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1ea      	bne.n	800eef2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef20:	f003 0304 	and.w	r3, r3, #4
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d004      	beq.n	800ef32 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	2204      	movs	r2, #4
 800ef2c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef2e:	2304      	movs	r3, #4
 800ef30:	e0b1      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ef36:	f003 0301 	and.w	r3, r3, #1
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d004      	beq.n	800ef48 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2201      	movs	r2, #1
 800ef42:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef44:	2301      	movs	r3, #1
 800ef46:	e0a6      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	22c5      	movs	r2, #197	@ 0xc5
 800ef4c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ef4e:	68f8      	ldr	r0, [r7, #12]
 800ef50:	f7ff fd80 	bl	800ea54 <SDMMC_GetCommandResponse>
 800ef54:	4603      	mov	r3, r0
 800ef56:	461a      	mov	r2, r3
 800ef58:	7afb      	ldrb	r3, [r7, #11]
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d001      	beq.n	800ef62 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e099      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ef62:	2100      	movs	r1, #0
 800ef64:	68f8      	ldr	r0, [r7, #12]
 800ef66:	f7ff fd82 	bl	800ea6e <SDMMC_GetResponse>
 800ef6a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ef6c:	697a      	ldr	r2, [r7, #20]
 800ef6e:	4b4e      	ldr	r3, [pc, #312]	@ (800f0a8 <SDMMC_GetCmdResp1+0x1d8>)
 800ef70:	4013      	ands	r3, r2
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d101      	bne.n	800ef7a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ef76:	2300      	movs	r3, #0
 800ef78:	e08d      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	da02      	bge.n	800ef86 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ef80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ef84:	e087      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d001      	beq.n	800ef94 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ef90:	2340      	movs	r3, #64	@ 0x40
 800ef92:	e080      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d001      	beq.n	800efa2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ef9e:	2380      	movs	r3, #128	@ 0x80
 800efa0:	e079      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d002      	beq.n	800efb2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800efac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800efb0:	e071      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d002      	beq.n	800efc2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800efbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800efc0:	e069      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800efc2:	697b      	ldr	r3, [r7, #20]
 800efc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d002      	beq.n	800efd2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800efcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800efd0:	e061      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800efd2:	697b      	ldr	r3, [r7, #20]
 800efd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d002      	beq.n	800efe2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800efdc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800efe0:	e059      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d002      	beq.n	800eff2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800efec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eff0:	e051      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d002      	beq.n	800f002 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800effc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f000:	e049      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d002      	beq.n	800f012 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f00c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800f010:	e041      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d002      	beq.n	800f022 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f01c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f020:	e039      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d002      	beq.n	800f032 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f02c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800f030:	e031      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d002      	beq.n	800f042 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f03c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800f040:	e029      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d002      	beq.n	800f052 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f04c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f050:	e021      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d002      	beq.n	800f062 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f05c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f060:	e019      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d002      	beq.n	800f072 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f06c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800f070:	e011      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d002      	beq.n	800f082 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f07c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f080:	e009      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	f003 0308 	and.w	r3, r3, #8
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d002      	beq.n	800f092 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f08c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800f090:	e001      	b.n	800f096 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f092:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f096:	4618      	mov	r0, r3
 800f098:	3720      	adds	r7, #32
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	20004ed0 	.word	0x20004ed0
 800f0a4:	10624dd3 	.word	0x10624dd3
 800f0a8:	fdffe008 	.word	0xfdffe008

0800f0ac <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b085      	sub	sp, #20
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f0b4:	4b1f      	ldr	r3, [pc, #124]	@ (800f134 <SDMMC_GetCmdResp2+0x88>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4a1f      	ldr	r2, [pc, #124]	@ (800f138 <SDMMC_GetCmdResp2+0x8c>)
 800f0ba:	fba2 2303 	umull	r2, r3, r2, r3
 800f0be:	0a5b      	lsrs	r3, r3, #9
 800f0c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f0c4:	fb02 f303 	mul.w	r3, r2, r3
 800f0c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	1e5a      	subs	r2, r3, #1
 800f0ce:	60fa      	str	r2, [r7, #12]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d102      	bne.n	800f0da <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f0d8:	e026      	b.n	800f128 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0de:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d0ef      	beq.n	800f0ca <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d1ea      	bne.n	800f0ca <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0f8:	f003 0304 	and.w	r3, r3, #4
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d004      	beq.n	800f10a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2204      	movs	r2, #4
 800f104:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f106:	2304      	movs	r3, #4
 800f108:	e00e      	b.n	800f128 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f10e:	f003 0301 	and.w	r3, r3, #1
 800f112:	2b00      	cmp	r3, #0
 800f114:	d004      	beq.n	800f120 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2201      	movs	r2, #1
 800f11a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f11c:	2301      	movs	r3, #1
 800f11e:	e003      	b.n	800f128 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	22c5      	movs	r2, #197	@ 0xc5
 800f124:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800f126:	2300      	movs	r3, #0
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3714      	adds	r7, #20
 800f12c:	46bd      	mov	sp, r7
 800f12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f132:	4770      	bx	lr
 800f134:	20004ed0 	.word	0x20004ed0
 800f138:	10624dd3 	.word	0x10624dd3

0800f13c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b085      	sub	sp, #20
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f144:	4b1a      	ldr	r3, [pc, #104]	@ (800f1b0 <SDMMC_GetCmdResp3+0x74>)
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	4a1a      	ldr	r2, [pc, #104]	@ (800f1b4 <SDMMC_GetCmdResp3+0x78>)
 800f14a:	fba2 2303 	umull	r2, r3, r2, r3
 800f14e:	0a5b      	lsrs	r3, r3, #9
 800f150:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f154:	fb02 f303 	mul.w	r3, r2, r3
 800f158:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	1e5a      	subs	r2, r3, #1
 800f15e:	60fa      	str	r2, [r7, #12]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d102      	bne.n	800f16a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f164:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f168:	e01b      	b.n	800f1a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f16e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f176:	2b00      	cmp	r3, #0
 800f178:	d0ef      	beq.n	800f15a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f180:	2b00      	cmp	r3, #0
 800f182:	d1ea      	bne.n	800f15a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f188:	f003 0304 	and.w	r3, r3, #4
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d004      	beq.n	800f19a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2204      	movs	r2, #4
 800f194:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f196:	2304      	movs	r3, #4
 800f198:	e003      	b.n	800f1a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	22c5      	movs	r2, #197	@ 0xc5
 800f19e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3714      	adds	r7, #20
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	20004ed0 	.word	0x20004ed0
 800f1b4:	10624dd3 	.word	0x10624dd3

0800f1b8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b088      	sub	sp, #32
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	460b      	mov	r3, r1
 800f1c2:	607a      	str	r2, [r7, #4]
 800f1c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f1c6:	4b35      	ldr	r3, [pc, #212]	@ (800f29c <SDMMC_GetCmdResp6+0xe4>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	4a35      	ldr	r2, [pc, #212]	@ (800f2a0 <SDMMC_GetCmdResp6+0xe8>)
 800f1cc:	fba2 2303 	umull	r2, r3, r2, r3
 800f1d0:	0a5b      	lsrs	r3, r3, #9
 800f1d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f1d6:	fb02 f303 	mul.w	r3, r2, r3
 800f1da:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	1e5a      	subs	r2, r3, #1
 800f1e0:	61fa      	str	r2, [r7, #28]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d102      	bne.n	800f1ec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f1e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f1ea:	e052      	b.n	800f292 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1f0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d0ef      	beq.n	800f1dc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f202:	2b00      	cmp	r3, #0
 800f204:	d1ea      	bne.n	800f1dc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f20a:	f003 0304 	and.w	r3, r3, #4
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d004      	beq.n	800f21c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2204      	movs	r2, #4
 800f216:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f218:	2304      	movs	r3, #4
 800f21a:	e03a      	b.n	800f292 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f220:	f003 0301 	and.w	r3, r3, #1
 800f224:	2b00      	cmp	r3, #0
 800f226:	d004      	beq.n	800f232 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2201      	movs	r2, #1
 800f22c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f22e:	2301      	movs	r3, #1
 800f230:	e02f      	b.n	800f292 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f232:	68f8      	ldr	r0, [r7, #12]
 800f234:	f7ff fc0e 	bl	800ea54 <SDMMC_GetCommandResponse>
 800f238:	4603      	mov	r3, r0
 800f23a:	461a      	mov	r2, r3
 800f23c:	7afb      	ldrb	r3, [r7, #11]
 800f23e:	4293      	cmp	r3, r2
 800f240:	d001      	beq.n	800f246 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f242:	2301      	movs	r3, #1
 800f244:	e025      	b.n	800f292 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	22c5      	movs	r2, #197	@ 0xc5
 800f24a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f24c:	2100      	movs	r1, #0
 800f24e:	68f8      	ldr	r0, [r7, #12]
 800f250:	f7ff fc0d 	bl	800ea6e <SDMMC_GetResponse>
 800f254:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d106      	bne.n	800f26e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	0c1b      	lsrs	r3, r3, #16
 800f264:	b29a      	uxth	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f26a:	2300      	movs	r3, #0
 800f26c:	e011      	b.n	800f292 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f274:	2b00      	cmp	r3, #0
 800f276:	d002      	beq.n	800f27e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f278:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f27c:	e009      	b.n	800f292 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f284:	2b00      	cmp	r3, #0
 800f286:	d002      	beq.n	800f28e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f288:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f28c:	e001      	b.n	800f292 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f28e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800f292:	4618      	mov	r0, r3
 800f294:	3720      	adds	r7, #32
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop
 800f29c:	20004ed0 	.word	0x20004ed0
 800f2a0:	10624dd3 	.word	0x10624dd3

0800f2a4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f2a4:	b480      	push	{r7}
 800f2a6:	b085      	sub	sp, #20
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f2ac:	4b22      	ldr	r3, [pc, #136]	@ (800f338 <SDMMC_GetCmdResp7+0x94>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	4a22      	ldr	r2, [pc, #136]	@ (800f33c <SDMMC_GetCmdResp7+0x98>)
 800f2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2b6:	0a5b      	lsrs	r3, r3, #9
 800f2b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f2bc:	fb02 f303 	mul.w	r3, r2, r3
 800f2c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	1e5a      	subs	r2, r3, #1
 800f2c6:	60fa      	str	r2, [r7, #12]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d102      	bne.n	800f2d2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f2cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f2d0:	e02c      	b.n	800f32c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d0ef      	beq.n	800f2c2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d1ea      	bne.n	800f2c2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2f0:	f003 0304 	and.w	r3, r3, #4
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d004      	beq.n	800f302 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2204      	movs	r2, #4
 800f2fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f2fe:	2304      	movs	r3, #4
 800f300:	e014      	b.n	800f32c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f306:	f003 0301 	and.w	r3, r3, #1
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d004      	beq.n	800f318 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2201      	movs	r2, #1
 800f312:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f314:	2301      	movs	r3, #1
 800f316:	e009      	b.n	800f32c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f31c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f320:	2b00      	cmp	r3, #0
 800f322:	d002      	beq.n	800f32a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2240      	movs	r2, #64	@ 0x40
 800f328:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f32a:	2300      	movs	r3, #0
  
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3714      	adds	r7, #20
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr
 800f338:	20004ed0 	.word	0x20004ed0
 800f33c:	10624dd3 	.word	0x10624dd3

0800f340 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f340:	b480      	push	{r7}
 800f342:	b085      	sub	sp, #20
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f348:	4b11      	ldr	r3, [pc, #68]	@ (800f390 <SDMMC_GetCmdError+0x50>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	4a11      	ldr	r2, [pc, #68]	@ (800f394 <SDMMC_GetCmdError+0x54>)
 800f34e:	fba2 2303 	umull	r2, r3, r2, r3
 800f352:	0a5b      	lsrs	r3, r3, #9
 800f354:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f358:	fb02 f303 	mul.w	r3, r2, r3
 800f35c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	1e5a      	subs	r2, r3, #1
 800f362:	60fa      	str	r2, [r7, #12]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d102      	bne.n	800f36e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f368:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800f36c:	e009      	b.n	800f382 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f376:	2b00      	cmp	r3, #0
 800f378:	d0f1      	beq.n	800f35e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	22c5      	movs	r2, #197	@ 0xc5
 800f37e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800f380:	2300      	movs	r3, #0
}
 800f382:	4618      	mov	r0, r3
 800f384:	3714      	adds	r7, #20
 800f386:	46bd      	mov	sp, r7
 800f388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38c:	4770      	bx	lr
 800f38e:	bf00      	nop
 800f390:	20004ed0 	.word	0x20004ed0
 800f394:	10624dd3 	.word	0x10624dd3

0800f398 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 800f398:	b590      	push	{r4, r7, lr}
 800f39a:	b087      	sub	sp, #28
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	607a      	str	r2, [r7, #4]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	72fb      	strb	r3, [r7, #11]
 800f3a8:	4613      	mov	r3, r2
 800f3aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d102      	bne.n	800f3b8 <hts221_read_reg+0x20>
 800f3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f3b6:	e009      	b.n	800f3cc <hts221_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	685c      	ldr	r4, [r3, #4]
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	68d8      	ldr	r0, [r3, #12]
 800f3c0:	893b      	ldrh	r3, [r7, #8]
 800f3c2:	7af9      	ldrb	r1, [r7, #11]
 800f3c4:	687a      	ldr	r2, [r7, #4]
 800f3c6:	47a0      	blx	r4
 800f3c8:	6178      	str	r0, [r7, #20]

  return ret;
 800f3ca:	697b      	ldr	r3, [r7, #20]
}
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	371c      	adds	r7, #28
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd90      	pop	{r4, r7, pc}

0800f3d4 <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800f3d4:	b590      	push	{r4, r7, lr}
 800f3d6:	b087      	sub	sp, #28
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	607a      	str	r2, [r7, #4]
 800f3de:	461a      	mov	r2, r3
 800f3e0:	460b      	mov	r3, r1
 800f3e2:	72fb      	strb	r3, [r7, #11]
 800f3e4:	4613      	mov	r3, r2
 800f3e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d102      	bne.n	800f3f4 <hts221_write_reg+0x20>
 800f3ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f3f2:	e009      	b.n	800f408 <hts221_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681c      	ldr	r4, [r3, #0]
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	68d8      	ldr	r0, [r3, #12]
 800f3fc:	893b      	ldrh	r3, [r7, #8]
 800f3fe:	7af9      	ldrb	r1, [r7, #11]
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	47a0      	blx	r4
 800f404:	6178      	str	r0, [r7, #20]

  return ret;
 800f406:	697b      	ldr	r3, [r7, #20]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	371c      	adds	r7, #28
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd90      	pop	{r4, r7, pc}

0800f410 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(const stmdev_ctx_t *ctx, hts221_odr_t val)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	460b      	mov	r3, r1
 800f41a:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800f41c:	f107 0208 	add.w	r2, r7, #8
 800f420:	2301      	movs	r3, #1
 800f422:	2120      	movs	r1, #32
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f7ff ffb7 	bl	800f398 <hts221_read_reg>
 800f42a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d10f      	bne.n	800f452 <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 800f432:	78fb      	ldrb	r3, [r7, #3]
 800f434:	f003 0303 	and.w	r3, r3, #3
 800f438:	b2da      	uxtb	r2, r3
 800f43a:	7a3b      	ldrb	r3, [r7, #8]
 800f43c:	f362 0301 	bfi	r3, r2, #0, #2
 800f440:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800f442:	f107 0208 	add.w	r2, r7, #8
 800f446:	2301      	movs	r3, #1
 800f448:	2120      	movs	r1, #32
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7ff ffc2 	bl	800f3d4 <hts221_write_reg>
 800f450:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f452:	68fb      	ldr	r3, [r7, #12]
}
 800f454:	4618      	mov	r0, r3
 800f456:	3710      	adds	r7, #16
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}

0800f45c <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b084      	sub	sp, #16
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
 800f464:	460b      	mov	r3, r1
 800f466:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800f468:	f107 0208 	add.w	r2, r7, #8
 800f46c:	2301      	movs	r3, #1
 800f46e:	2120      	movs	r1, #32
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f7ff ff91 	bl	800f398 <hts221_read_reg>
 800f476:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d10f      	bne.n	800f49e <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800f47e:	78fb      	ldrb	r3, [r7, #3]
 800f480:	f003 0301 	and.w	r3, r3, #1
 800f484:	b2da      	uxtb	r2, r3
 800f486:	7a3b      	ldrb	r3, [r7, #8]
 800f488:	f362 0382 	bfi	r3, r2, #2, #1
 800f48c:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800f48e:	f107 0208 	add.w	r2, r7, #8
 800f492:	2301      	movs	r3, #1
 800f494:	2120      	movs	r1, #32
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f7ff ff9c 	bl	800f3d4 <hts221_write_reg>
 800f49c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f49e:	68fb      	ldr	r3, [r7, #12]
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 800f4b2:	f107 0208 	add.w	r2, r7, #8
 800f4b6:	2302      	movs	r3, #2
 800f4b8:	2128      	movs	r1, #40	@ 0x28
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f7ff ff6c 	bl	800f398 <hts221_read_reg>
 800f4c0:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800f4c2:	7a7b      	ldrb	r3, [r7, #9]
 800f4c4:	b21a      	sxth	r2, r3
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	021b      	lsls	r3, r3, #8
 800f4d4:	b29b      	uxth	r3, r3
 800f4d6:	7a3a      	ldrb	r2, [r7, #8]
 800f4d8:	4413      	add	r3, r2
 800f4da:	b29b      	uxth	r3, r3
 800f4dc:	b21a      	sxth	r2, r3
 800f4de:	683b      	ldr	r3, [r7, #0]
 800f4e0:	801a      	strh	r2, [r3, #0]

  return ret;
 800f4e2:	68fb      	ldr	r3, [r7, #12]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3710      	adds	r7, #16
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 800f4f6:	f107 0208 	add.w	r2, r7, #8
 800f4fa:	2302      	movs	r3, #2
 800f4fc:	212a      	movs	r1, #42	@ 0x2a
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7ff ff4a 	bl	800f398 <hts221_read_reg>
 800f504:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 800f506:	7a7b      	ldrb	r3, [r7, #9]
 800f508:	b21a      	sxth	r2, r3
 800f50a:	683b      	ldr	r3, [r7, #0]
 800f50c:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f514:	b29b      	uxth	r3, r3
 800f516:	021b      	lsls	r3, r3, #8
 800f518:	b29b      	uxth	r3, r3
 800f51a:	7a3a      	ldrb	r2, [r7, #8]
 800f51c:	4413      	add	r3, r2
 800f51e:	b29b      	uxth	r3, r3
 800f520:	b21a      	sxth	r2, r3
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	801a      	strh	r2, [r3, #0]

  return ret;
 800f526:	68fb      	ldr	r3, [r7, #12]
}
 800f528:	4618      	mov	r0, r3
 800f52a:	3710      	adds	r7, #16
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 800f53a:	2301      	movs	r3, #1
 800f53c:	683a      	ldr	r2, [r7, #0]
 800f53e:	210f      	movs	r1, #15
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f7ff ff29 	bl	800f398 <hts221_read_reg>
 800f546:	60f8      	str	r0, [r7, #12]

  return ret;
 800f548:	68fb      	ldr	r3, [r7, #12]
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	3710      	adds	r7, #16
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b084      	sub	sp, #16
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	460b      	mov	r3, r1
 800f55c:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800f55e:	f107 0208 	add.w	r2, r7, #8
 800f562:	2301      	movs	r3, #1
 800f564:	2120      	movs	r1, #32
 800f566:	6878      	ldr	r0, [r7, #4]
 800f568:	f7ff ff16 	bl	800f398 <hts221_read_reg>
 800f56c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d10f      	bne.n	800f594 <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 800f574:	78fb      	ldrb	r3, [r7, #3]
 800f576:	f003 0301 	and.w	r3, r3, #1
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	7a3b      	ldrb	r3, [r7, #8]
 800f57e:	f362 13c7 	bfi	r3, r2, #7, #1
 800f582:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800f584:	f107 0208 	add.w	r2, r7, #8
 800f588:	2301      	movs	r3, #1
 800f58a:	2120      	movs	r1, #32
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f7ff ff21 	bl	800f3d4 <hts221_write_reg>
 800f592:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f594:	68fb      	ldr	r3, [r7, #12]
}
 800f596:	4618      	mov	r0, r3
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(const stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b084      	sub	sp, #16
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
 800f5a6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) val, 1);
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	683a      	ldr	r2, [r7, #0]
 800f5ac:	2127      	movs	r1, #39	@ 0x27
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f7ff fef2 	bl	800f398 <hts221_read_reg>
 800f5b4:	60f8      	str	r0, [r7, #12]

  return ret;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3710      	adds	r7, #16
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 800f5ca:	f107 020b 	add.w	r2, r7, #11
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	2130      	movs	r1, #48	@ 0x30
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f7ff fee0 	bl	800f398 <hts221_read_reg>
 800f5d8:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 800f5da:	7afb      	ldrb	r3, [r7, #11]
 800f5dc:	ee07 3a90 	vmov	s15, r3
 800f5e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f5e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f5e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3710      	adds	r7, #16
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b084      	sub	sp, #16
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 800f606:	f107 020b 	add.w	r2, r7, #11
 800f60a:	2301      	movs	r3, #1
 800f60c:	2131      	movs	r1, #49	@ 0x31
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f7ff fec2 	bl	800f398 <hts221_read_reg>
 800f614:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 800f616:	7afb      	ldrb	r3, [r7, #11]
 800f618:	ee07 3a90 	vmov	s15, r3
 800f61c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f620:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f624:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800f62e:	68fb      	ldr	r3, [r7, #12]
}
 800f630:	4618      	mov	r0, r3
 800f632:	3710      	adds	r7, #16
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b086      	sub	sp, #24
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800f642:	f107 020f 	add.w	r2, r7, #15
 800f646:	2301      	movs	r3, #1
 800f648:	2132      	movs	r1, #50	@ 0x32
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f7ff fea4 	bl	800f398 <hts221_read_reg>
 800f650:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d11b      	bne.n	800f690 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800f658:	f107 0210 	add.w	r2, r7, #16
 800f65c:	2301      	movs	r3, #1
 800f65e:	2135      	movs	r1, #53	@ 0x35
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7ff fe99 	bl	800f398 <hts221_read_reg>
 800f666:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 800f668:	7c3b      	ldrb	r3, [r7, #16]
 800f66a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800f672:	7cfb      	ldrb	r3, [r7, #19]
 800f674:	021b      	lsls	r3, r3, #8
 800f676:	7bfa      	ldrb	r2, [r7, #15]
 800f678:	4413      	add	r3, r2
 800f67a:	ee07 3a90 	vmov	s15, r3
 800f67e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f682:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800f686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800f690:	697b      	ldr	r3, [r7, #20]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3718      	adds	r7, #24
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}

0800f69a <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800f69a:	b580      	push	{r7, lr}
 800f69c:	b086      	sub	sp, #24
 800f69e:	af00      	add	r7, sp, #0
 800f6a0:	6078      	str	r0, [r7, #4]
 800f6a2:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 800f6a4:	f107 020f 	add.w	r2, r7, #15
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	2133      	movs	r1, #51	@ 0x33
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f7ff fe73 	bl	800f398 <hts221_read_reg>
 800f6b2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d11b      	bne.n	800f6f2 <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 800f6ba:	f107 0210 	add.w	r2, r7, #16
 800f6be:	2301      	movs	r3, #1
 800f6c0:	2135      	movs	r1, #53	@ 0x35
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f7ff fe68 	bl	800f398 <hts221_read_reg>
 800f6c8:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 800f6ca:	7c3b      	ldrb	r3, [r7, #16]
 800f6cc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 800f6d4:	7cfb      	ldrb	r3, [r7, #19]
 800f6d6:	021b      	lsls	r3, r3, #8
 800f6d8:	7bfa      	ldrb	r2, [r7, #15]
 800f6da:	4413      	add	r3, r2
 800f6dc:	ee07 3a90 	vmov	s15, r3
 800f6e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f6e4:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 800f6e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 800f6f2:	697b      	ldr	r3, [r7, #20]
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3718      	adds	r7, #24
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 800f706:	f107 0208 	add.w	r2, r7, #8
 800f70a:	2302      	movs	r3, #2
 800f70c:	2136      	movs	r1, #54	@ 0x36
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f7ff fe42 	bl	800f398 <hts221_read_reg>
 800f714:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800f716:	7a7b      	ldrb	r3, [r7, #9]
 800f718:	021b      	lsls	r3, r3, #8
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	7a3a      	ldrb	r2, [r7, #8]
 800f71e:	4413      	add	r3, r2
 800f720:	b29b      	uxth	r3, r3
 800f722:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800f724:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f728:	ee07 3a90 	vmov	s15, r3
 800f72c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f730:	683b      	ldr	r3, [r7, #0]
 800f732:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800f736:	68fb      	ldr	r3, [r7, #12]
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3710      	adds	r7, #16
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 800f74a:	f107 0208 	add.w	r2, r7, #8
 800f74e:	2302      	movs	r3, #2
 800f750:	213a      	movs	r1, #58	@ 0x3a
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f7ff fe20 	bl	800f398 <hts221_read_reg>
 800f758:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800f75a:	7a7b      	ldrb	r3, [r7, #9]
 800f75c:	021b      	lsls	r3, r3, #8
 800f75e:	b29b      	uxth	r3, r3
 800f760:	7a3a      	ldrb	r2, [r7, #8]
 800f762:	4413      	add	r3, r2
 800f764:	b29b      	uxth	r3, r3
 800f766:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800f768:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f76c:	ee07 3a90 	vmov	s15, r3
 800f770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800f77a:	68fb      	ldr	r3, [r7, #12]
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3710      	adds	r7, #16
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 800f78e:	f107 0208 	add.w	r2, r7, #8
 800f792:	2302      	movs	r3, #2
 800f794:	213c      	movs	r1, #60	@ 0x3c
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f7ff fdfe 	bl	800f398 <hts221_read_reg>
 800f79c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800f79e:	7a7b      	ldrb	r3, [r7, #9]
 800f7a0:	021b      	lsls	r3, r3, #8
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	7a3a      	ldrb	r2, [r7, #8]
 800f7a6:	4413      	add	r3, r2
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800f7ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f7b0:	ee07 3a90 	vmov	s15, r3
 800f7b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800f7be:	68fb      	ldr	r3, [r7, #12]
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3710      	adds	r7, #16
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
 800f7d0:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 800f7d2:	f107 0208 	add.w	r2, r7, #8
 800f7d6:	2302      	movs	r3, #2
 800f7d8:	213e      	movs	r1, #62	@ 0x3e
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f7ff fddc 	bl	800f398 <hts221_read_reg>
 800f7e0:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 800f7e2:	7a7b      	ldrb	r3, [r7, #9]
 800f7e4:	021b      	lsls	r3, r3, #8
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	7a3a      	ldrb	r2, [r7, #8]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	b29b      	uxth	r3, r3
 800f7ee:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 800f7f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f7f4:	ee07 3a90 	vmov	s15, r3
 800f7f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 800f802:	68fb      	ldr	r3, [r7, #12]
}
 800f804:	4618      	mov	r0, r3
 800f806:	3710      	adds	r7, #16
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}

0800f80c <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 800f80c:	b590      	push	{r4, r7, lr}
 800f80e:	b087      	sub	sp, #28
 800f810:	af00      	add	r7, sp, #0
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	607a      	str	r2, [r7, #4]
 800f816:	461a      	mov	r2, r3
 800f818:	460b      	mov	r3, r1
 800f81a:	72fb      	strb	r3, [r7, #11]
 800f81c:	4613      	mov	r3, r2
 800f81e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d102      	bne.n	800f82c <lps22hh_read_reg+0x20>
  {
    return -1;
 800f826:	f04f 33ff 	mov.w	r3, #4294967295
 800f82a:	e009      	b.n	800f840 <lps22hh_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	685c      	ldr	r4, [r3, #4]
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	68d8      	ldr	r0, [r3, #12]
 800f834:	893b      	ldrh	r3, [r7, #8]
 800f836:	7af9      	ldrb	r1, [r7, #11]
 800f838:	687a      	ldr	r2, [r7, #4]
 800f83a:	47a0      	blx	r4
 800f83c:	6178      	str	r0, [r7, #20]

  return ret;
 800f83e:	697b      	ldr	r3, [r7, #20]
}
 800f840:	4618      	mov	r0, r3
 800f842:	371c      	adds	r7, #28
 800f844:	46bd      	mov	sp, r7
 800f846:	bd90      	pop	{r4, r7, pc}

0800f848 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800f848:	b590      	push	{r4, r7, lr}
 800f84a:	b087      	sub	sp, #28
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	60f8      	str	r0, [r7, #12]
 800f850:	607a      	str	r2, [r7, #4]
 800f852:	461a      	mov	r2, r3
 800f854:	460b      	mov	r3, r1
 800f856:	72fb      	strb	r3, [r7, #11]
 800f858:	4613      	mov	r3, r2
 800f85a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d102      	bne.n	800f868 <lps22hh_write_reg+0x20>
  {
    return -1;
 800f862:	f04f 33ff 	mov.w	r3, #4294967295
 800f866:	e009      	b.n	800f87c <lps22hh_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681c      	ldr	r4, [r3, #0]
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	68d8      	ldr	r0, [r3, #12]
 800f870:	893b      	ldrh	r3, [r7, #8]
 800f872:	7af9      	ldrb	r1, [r7, #11]
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	47a0      	blx	r4
 800f878:	6178      	str	r0, [r7, #20]

  return ret;
 800f87a:	697b      	ldr	r3, [r7, #20]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	371c      	adds	r7, #28
 800f880:	46bd      	mov	sp, r7
 800f882:	bd90      	pop	{r4, r7, pc}

0800f884 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	ee07 3a90 	vmov	s15, r3
 800f892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f896:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800f8b0 <lps22hh_from_lsb_to_hpa+0x2c>
 800f89a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800f89e:	eef0 7a66 	vmov.f32	s15, s13
}
 800f8a2:	eeb0 0a67 	vmov.f32	s0, s15
 800f8a6:	370c      	adds	r7, #12
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr
 800f8b0:	49800000 	.word	0x49800000

0800f8b4 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800f8b4:	b580      	push	{r7, lr}
 800f8b6:	b084      	sub	sp, #16
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
 800f8bc:	460b      	mov	r3, r1
 800f8be:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800f8c0:	f107 0208 	add.w	r2, r7, #8
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	2110      	movs	r1, #16
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f7ff ff9f 	bl	800f80c <lps22hh_read_reg>
 800f8ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d10f      	bne.n	800f8f6 <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800f8d6:	78fb      	ldrb	r3, [r7, #3]
 800f8d8:	f003 0301 	and.w	r3, r3, #1
 800f8dc:	b2da      	uxtb	r2, r3
 800f8de:	7a3b      	ldrb	r3, [r7, #8]
 800f8e0:	f362 0341 	bfi	r3, r2, #1, #1
 800f8e4:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 800f8e6:	f107 0208 	add.w	r2, r7, #8
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	2110      	movs	r1, #16
 800f8ee:	6878      	ldr	r0, [r7, #4]
 800f8f0:	f7ff ffaa 	bl	800f848 <lps22hh_write_reg>
 800f8f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3710      	adds	r7, #16
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}

0800f900 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(const stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b086      	sub	sp, #24
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	460b      	mov	r3, r1
 800f90a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800f90c:	f107 0210 	add.w	r2, r7, #16
 800f910:	2301      	movs	r3, #1
 800f912:	2110      	movs	r1, #16
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f7ff ff79 	bl	800f80c <lps22hh_read_reg>
 800f91a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d107      	bne.n	800f932 <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800f922:	f107 020c 	add.w	r2, r7, #12
 800f926:	2301      	movs	r3, #1
 800f928:	2111      	movs	r1, #17
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f7ff ff6e 	bl	800f80c <lps22hh_read_reg>
 800f930:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d10f      	bne.n	800f958 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 800f938:	78fb      	ldrb	r3, [r7, #3]
 800f93a:	f003 0307 	and.w	r3, r3, #7
 800f93e:	b2da      	uxtb	r2, r3
 800f940:	7c3b      	ldrb	r3, [r7, #16]
 800f942:	f362 1306 	bfi	r3, r2, #4, #3
 800f946:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 800f948:	f107 0210 	add.w	r2, r7, #16
 800f94c:	2301      	movs	r3, #1
 800f94e:	2110      	movs	r1, #16
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff ff79 	bl	800f848 <lps22hh_write_reg>
 800f956:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d119      	bne.n	800f992 <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800f95e:	78fb      	ldrb	r3, [r7, #3]
 800f960:	091b      	lsrs	r3, r3, #4
 800f962:	f003 0301 	and.w	r3, r3, #1
 800f966:	b2da      	uxtb	r2, r3
 800f968:	7b3b      	ldrb	r3, [r7, #12]
 800f96a:	f362 0341 	bfi	r3, r2, #1, #1
 800f96e:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 800f970:	78fb      	ldrb	r3, [r7, #3]
 800f972:	08db      	lsrs	r3, r3, #3
 800f974:	f003 0301 	and.w	r3, r3, #1
 800f978:	b2da      	uxtb	r2, r3
 800f97a:	7b3b      	ldrb	r3, [r7, #12]
 800f97c:	f362 0300 	bfi	r3, r2, #0, #1
 800f980:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800f982:	f107 020c 	add.w	r2, r7, #12
 800f986:	2301      	movs	r3, #1
 800f988:	2111      	movs	r1, #17
 800f98a:	6878      	ldr	r0, [r7, #4]
 800f98c:	f7ff ff5c 	bl	800f848 <lps22hh_write_reg>
 800f990:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800f992:	697b      	ldr	r3, [r7, #20]
}
 800f994:	4618      	mov	r0, r3
 800f996:	3718      	adds	r7, #24
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b084      	sub	sp, #16
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 800f9a6:	f107 0208 	add.w	r2, r7, #8
 800f9aa:	2303      	movs	r3, #3
 800f9ac:	2128      	movs	r1, #40	@ 0x28
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f7ff ff2c 	bl	800f80c <lps22hh_read_reg>
 800f9b4:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 800f9b6:	7abb      	ldrb	r3, [r7, #10]
 800f9b8:	461a      	mov	r2, r3
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	021b      	lsls	r3, r3, #8
 800f9c4:	7a7a      	ldrb	r2, [r7, #9]
 800f9c6:	441a      	add	r2, r3
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	021b      	lsls	r3, r3, #8
 800f9d2:	7a3a      	ldrb	r2, [r7, #8]
 800f9d4:	441a      	add	r2, r3
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	021a      	lsls	r2, r3, #8
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	601a      	str	r2, [r3, #0]

  return ret;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3710      	adds	r7, #16
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	bd80      	pop	{r7, pc}

0800f9ee <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800f9ee:	b580      	push	{r7, lr}
 800f9f0:	b084      	sub	sp, #16
 800f9f2:	af00      	add	r7, sp, #0
 800f9f4:	6078      	str	r0, [r7, #4]
 800f9f6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 800f9f8:	2301      	movs	r3, #1
 800f9fa:	683a      	ldr	r2, [r7, #0]
 800f9fc:	210f      	movs	r1, #15
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f7ff ff04 	bl	800f80c <lps22hh_read_reg>
 800fa04:	60f8      	str	r0, [r7, #12]

  return ret;
 800fa06:	68fb      	ldr	r3, [r7, #12]
}
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3710      	adds	r7, #16
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	460b      	mov	r3, r1
 800fa1a:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800fa1c:	f107 0208 	add.w	r2, r7, #8
 800fa20:	2301      	movs	r3, #1
 800fa22:	2111      	movs	r1, #17
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f7ff fef1 	bl	800f80c <lps22hh_read_reg>
 800fa2a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d10f      	bne.n	800fa52 <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 800fa32:	78fb      	ldrb	r3, [r7, #3]
 800fa34:	f003 0301 	and.w	r3, r3, #1
 800fa38:	b2da      	uxtb	r2, r3
 800fa3a:	7a3b      	ldrb	r3, [r7, #8]
 800fa3c:	f362 0382 	bfi	r3, r2, #2, #1
 800fa40:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800fa42:	f107 0208 	add.w	r2, r7, #8
 800fa46:	2301      	movs	r3, #1
 800fa48:	2111      	movs	r1, #17
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f7ff fefc 	bl	800f848 <lps22hh_write_reg>
 800fa50:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800fa52:	68fb      	ldr	r3, [r7, #12]
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 800fa66:	f107 0208 	add.w	r2, r7, #8
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	2111      	movs	r1, #17
 800fa6e:	6878      	ldr	r0, [r7, #4]
 800fa70:	f7ff fecc 	bl	800f80c <lps22hh_read_reg>
 800fa74:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 800fa76:	7a3b      	ldrb	r3, [r7, #8]
 800fa78:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	461a      	mov	r2, r3
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	701a      	strb	r2, [r3, #0]

  return ret;
 800fa84:	68fb      	ldr	r3, [r7, #12]
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3710      	adds	r7, #16
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	bd80      	pop	{r7, pc}
	...

0800fa90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fa94:	4904      	ldr	r1, [pc, #16]	@ (800faa8 <MX_FATFS_Init+0x18>)
 800fa96:	4805      	ldr	r0, [pc, #20]	@ (800faac <MX_FATFS_Init+0x1c>)
 800fa98:	f000 f9d6 	bl	800fe48 <FATFS_LinkDriver>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	461a      	mov	r2, r3
 800faa0:	4b03      	ldr	r3, [pc, #12]	@ (800fab0 <MX_FATFS_Init+0x20>)
 800faa2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800faa4:	bf00      	nop
 800faa6:	bd80      	pop	{r7, pc}
 800faa8:	200061d4 	.word	0x200061d4
 800faac:	08016a6c 	.word	0x08016a6c
 800fab0:	200061d0 	.word	0x200061d0

0800fab4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800faba:	2300      	movs	r3, #0
 800fabc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800fabe:	f000 f86b 	bl	800fb98 <BSP_SD_IsDetected>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d001      	beq.n	800facc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800fac8:	2302      	movs	r3, #2
 800faca:	e005      	b.n	800fad8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800facc:	4804      	ldr	r0, [pc, #16]	@ (800fae0 <BSP_SD_Init+0x2c>)
 800face:	f7fc fa49 	bl	800bf64 <HAL_SD_Init>
 800fad2:	4603      	mov	r3, r0
 800fad4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800fad6:	79fb      	ldrb	r3, [r7, #7]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3708      	adds	r7, #8
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}
 800fae0:	20005cb4 	.word	0x20005cb4

0800fae4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b088      	sub	sp, #32
 800fae8:	af02      	add	r7, sp, #8
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	607a      	str	r2, [r7, #4]
 800faf0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800faf2:	2300      	movs	r3, #0
 800faf4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	9300      	str	r3, [sp, #0]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	68ba      	ldr	r2, [r7, #8]
 800fafe:	68f9      	ldr	r1, [r7, #12]
 800fb00:	4806      	ldr	r0, [pc, #24]	@ (800fb1c <BSP_SD_ReadBlocks+0x38>)
 800fb02:	f7fc fae7 	bl	800c0d4 <HAL_SD_ReadBlocks>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d001      	beq.n	800fb10 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fb0c:	2301      	movs	r3, #1
 800fb0e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fb10:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	3718      	adds	r7, #24
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}
 800fb1a:	bf00      	nop
 800fb1c:	20005cb4 	.word	0x20005cb4

0800fb20 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b088      	sub	sp, #32
 800fb24:	af02      	add	r7, sp, #8
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
 800fb2c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	9300      	str	r3, [sp, #0]
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	68ba      	ldr	r2, [r7, #8]
 800fb3a:	68f9      	ldr	r1, [r7, #12]
 800fb3c:	4806      	ldr	r0, [pc, #24]	@ (800fb58 <BSP_SD_WriteBlocks+0x38>)
 800fb3e:	f7fc fca7 	bl	800c490 <HAL_SD_WriteBlocks>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d001      	beq.n	800fb4c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800fb4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3718      	adds	r7, #24
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}
 800fb56:	bf00      	nop
 800fb58:	20005cb4 	.word	0x20005cb4

0800fb5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800fb60:	4805      	ldr	r0, [pc, #20]	@ (800fb78 <BSP_SD_GetCardState+0x1c>)
 800fb62:	f7fc ffeb 	bl	800cb3c <HAL_SD_GetCardState>
 800fb66:	4603      	mov	r3, r0
 800fb68:	2b04      	cmp	r3, #4
 800fb6a:	bf14      	ite	ne
 800fb6c:	2301      	movne	r3, #1
 800fb6e:	2300      	moveq	r3, #0
 800fb70:	b2db      	uxtb	r3, r3
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop
 800fb78:	20005cb4 	.word	0x20005cb4

0800fb7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800fb84:	6879      	ldr	r1, [r7, #4]
 800fb86:	4803      	ldr	r0, [pc, #12]	@ (800fb94 <BSP_SD_GetCardInfo+0x18>)
 800fb88:	f7fc ffac 	bl	800cae4 <HAL_SD_GetCardInfo>
}
 800fb8c:	bf00      	nop
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}
 800fb94:	20005cb4 	.word	0x20005cb4

0800fb98 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800fb9e:	2301      	movs	r3, #1
 800fba0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800fba2:	f000 f80b 	bl	800fbbc <BSP_PlatformIsDetected>
 800fba6:	4603      	mov	r3, r0
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d101      	bne.n	800fbb0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800fbac:	2300      	movs	r3, #0
 800fbae:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800fbb0:	79fb      	ldrb	r3, [r7, #7]
 800fbb2:	b2db      	uxtb	r3, r3
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3708      	adds	r7, #8
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fbc6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800fbca:	4806      	ldr	r0, [pc, #24]	@ (800fbe4 <BSP_PlatformIsDetected+0x28>)
 800fbcc:	f7f9 f9f2 	bl	8008fb4 <HAL_GPIO_ReadPin>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d001      	beq.n	800fbda <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800fbda:	79fb      	ldrb	r3, [r7, #7]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3708      	adds	r7, #8
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	40020800 	.word	0x40020800

0800fbe8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	4603      	mov	r3, r0
 800fbf0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800fbf2:	4b0b      	ldr	r3, [pc, #44]	@ (800fc20 <SD_CheckStatus+0x38>)
 800fbf4:	2201      	movs	r2, #1
 800fbf6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800fbf8:	f7ff ffb0 	bl	800fb5c <BSP_SD_GetCardState>
 800fbfc:	4603      	mov	r3, r0
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d107      	bne.n	800fc12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800fc02:	4b07      	ldr	r3, [pc, #28]	@ (800fc20 <SD_CheckStatus+0x38>)
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	b2db      	uxtb	r3, r3
 800fc08:	f023 0301 	bic.w	r3, r3, #1
 800fc0c:	b2da      	uxtb	r2, r3
 800fc0e:	4b04      	ldr	r3, [pc, #16]	@ (800fc20 <SD_CheckStatus+0x38>)
 800fc10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800fc12:	4b03      	ldr	r3, [pc, #12]	@ (800fc20 <SD_CheckStatus+0x38>)
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	b2db      	uxtb	r3, r3
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3708      	adds	r7, #8
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	20004f25 	.word	0x20004f25

0800fc24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800fc2e:	4b0b      	ldr	r3, [pc, #44]	@ (800fc5c <SD_initialize+0x38>)
 800fc30:	2201      	movs	r2, #1
 800fc32:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fc34:	f7ff ff3e 	bl	800fab4 <BSP_SD_Init>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d107      	bne.n	800fc4e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800fc3e:	79fb      	ldrb	r3, [r7, #7]
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7ff ffd1 	bl	800fbe8 <SD_CheckStatus>
 800fc46:	4603      	mov	r3, r0
 800fc48:	461a      	mov	r2, r3
 800fc4a:	4b04      	ldr	r3, [pc, #16]	@ (800fc5c <SD_initialize+0x38>)
 800fc4c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fc4e:	4b03      	ldr	r3, [pc, #12]	@ (800fc5c <SD_initialize+0x38>)
 800fc50:	781b      	ldrb	r3, [r3, #0]
 800fc52:	b2db      	uxtb	r3, r3
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3708      	adds	r7, #8
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	20004f25 	.word	0x20004f25

0800fc60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b082      	sub	sp, #8
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	4603      	mov	r3, r0
 800fc68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800fc6a:	79fb      	ldrb	r3, [r7, #7]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7ff ffbb 	bl	800fbe8 <SD_CheckStatus>
 800fc72:	4603      	mov	r3, r0
}
 800fc74:	4618      	mov	r0, r3
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}

0800fc7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b086      	sub	sp, #24
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	60b9      	str	r1, [r7, #8]
 800fc84:	607a      	str	r2, [r7, #4]
 800fc86:	603b      	str	r3, [r7, #0]
 800fc88:	4603      	mov	r3, r0
 800fc8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800fc90:	f04f 33ff 	mov.w	r3, #4294967295
 800fc94:	683a      	ldr	r2, [r7, #0]
 800fc96:	6879      	ldr	r1, [r7, #4]
 800fc98:	68b8      	ldr	r0, [r7, #8]
 800fc9a:	f7ff ff23 	bl	800fae4 <BSP_SD_ReadBlocks>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d107      	bne.n	800fcb4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800fca4:	bf00      	nop
 800fca6:	f7ff ff59 	bl	800fb5c <BSP_SD_GetCardState>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d1fa      	bne.n	800fca6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800fcb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3718      	adds	r7, #24
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}

0800fcbe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800fcbe:	b580      	push	{r7, lr}
 800fcc0:	b086      	sub	sp, #24
 800fcc2:	af00      	add	r7, sp, #0
 800fcc4:	60b9      	str	r1, [r7, #8]
 800fcc6:	607a      	str	r2, [r7, #4]
 800fcc8:	603b      	str	r3, [r7, #0]
 800fcca:	4603      	mov	r3, r0
 800fccc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800fcce:	2301      	movs	r3, #1
 800fcd0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800fcd2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcd6:	683a      	ldr	r2, [r7, #0]
 800fcd8:	6879      	ldr	r1, [r7, #4]
 800fcda:	68b8      	ldr	r0, [r7, #8]
 800fcdc:	f7ff ff20 	bl	800fb20 <BSP_SD_WriteBlocks>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d107      	bne.n	800fcf6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800fce6:	bf00      	nop
 800fce8:	f7ff ff38 	bl	800fb5c <BSP_SD_GetCardState>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d1fa      	bne.n	800fce8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800fcf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3718      	adds	r7, #24
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b08c      	sub	sp, #48	@ 0x30
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	4603      	mov	r3, r0
 800fd08:	603a      	str	r2, [r7, #0]
 800fd0a:	71fb      	strb	r3, [r7, #7]
 800fd0c:	460b      	mov	r3, r1
 800fd0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800fd10:	2301      	movs	r3, #1
 800fd12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fd16:	4b25      	ldr	r3, [pc, #148]	@ (800fdac <SD_ioctl+0xac>)
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	f003 0301 	and.w	r3, r3, #1
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <SD_ioctl+0x28>
 800fd24:	2303      	movs	r3, #3
 800fd26:	e03c      	b.n	800fda2 <SD_ioctl+0xa2>

  switch (cmd)
 800fd28:	79bb      	ldrb	r3, [r7, #6]
 800fd2a:	2b03      	cmp	r3, #3
 800fd2c:	d834      	bhi.n	800fd98 <SD_ioctl+0x98>
 800fd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800fd34 <SD_ioctl+0x34>)
 800fd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd34:	0800fd45 	.word	0x0800fd45
 800fd38:	0800fd4d 	.word	0x0800fd4d
 800fd3c:	0800fd65 	.word	0x0800fd65
 800fd40:	0800fd7f 	.word	0x0800fd7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fd44:	2300      	movs	r3, #0
 800fd46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fd4a:	e028      	b.n	800fd9e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd4c:	f107 030c 	add.w	r3, r7, #12
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7ff ff13 	bl	800fb7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fd56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fd62:	e01c      	b.n	800fd9e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd64:	f107 030c 	add.w	r3, r7, #12
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7ff ff07 	bl	800fb7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd70:	b29a      	uxth	r2, r3
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fd76:	2300      	movs	r3, #0
 800fd78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fd7c:	e00f      	b.n	800fd9e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fd7e:	f107 030c 	add.w	r3, r7, #12
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7ff fefa 	bl	800fb7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fd88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd8a:	0a5a      	lsrs	r2, r3, #9
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fd90:	2300      	movs	r3, #0
 800fd92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800fd96:	e002      	b.n	800fd9e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fd98:	2304      	movs	r3, #4
 800fd9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800fd9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fda2:	4618      	mov	r0, r3
 800fda4:	3730      	adds	r7, #48	@ 0x30
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	20004f25 	.word	0x20004f25

0800fdb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fdb0:	b480      	push	{r7}
 800fdb2:	b087      	sub	sp, #28
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	60f8      	str	r0, [r7, #12]
 800fdb8:	60b9      	str	r1, [r7, #8]
 800fdba:	4613      	mov	r3, r2
 800fdbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fdc6:	4b1f      	ldr	r3, [pc, #124]	@ (800fe44 <FATFS_LinkDriverEx+0x94>)
 800fdc8:	7a5b      	ldrb	r3, [r3, #9]
 800fdca:	b2db      	uxtb	r3, r3
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d131      	bne.n	800fe34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fdd0:	4b1c      	ldr	r3, [pc, #112]	@ (800fe44 <FATFS_LinkDriverEx+0x94>)
 800fdd2:	7a5b      	ldrb	r3, [r3, #9]
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	4b1a      	ldr	r3, [pc, #104]	@ (800fe44 <FATFS_LinkDriverEx+0x94>)
 800fdda:	2100      	movs	r1, #0
 800fddc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fdde:	4b19      	ldr	r3, [pc, #100]	@ (800fe44 <FATFS_LinkDriverEx+0x94>)
 800fde0:	7a5b      	ldrb	r3, [r3, #9]
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	4a17      	ldr	r2, [pc, #92]	@ (800fe44 <FATFS_LinkDriverEx+0x94>)
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	4413      	add	r3, r2
 800fdea:	68fa      	ldr	r2, [r7, #12]
 800fdec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fdee:	4b15      	ldr	r3, [pc, #84]	@ (800fe44 <FATFS_LinkDriverEx+0x94>)
 800fdf0:	7a5b      	ldrb	r3, [r3, #9]
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	461a      	mov	r2, r3
 800fdf6:	4b13      	ldr	r3, [pc, #76]	@ (800fe44 <FATFS_LinkDriverEx+0x94>)
 800fdf8:	4413      	add	r3, r2
 800fdfa:	79fa      	ldrb	r2, [r7, #7]
 800fdfc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fdfe:	4b11      	ldr	r3, [pc, #68]	@ (800fe44 <FATFS_LinkDriverEx+0x94>)
 800fe00:	7a5b      	ldrb	r3, [r3, #9]
 800fe02:	b2db      	uxtb	r3, r3
 800fe04:	1c5a      	adds	r2, r3, #1
 800fe06:	b2d1      	uxtb	r1, r2
 800fe08:	4a0e      	ldr	r2, [pc, #56]	@ (800fe44 <FATFS_LinkDriverEx+0x94>)
 800fe0a:	7251      	strb	r1, [r2, #9]
 800fe0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fe0e:	7dbb      	ldrb	r3, [r7, #22]
 800fe10:	3330      	adds	r3, #48	@ 0x30
 800fe12:	b2da      	uxtb	r2, r3
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	223a      	movs	r2, #58	@ 0x3a
 800fe1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	3302      	adds	r3, #2
 800fe24:	222f      	movs	r2, #47	@ 0x2f
 800fe26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	3303      	adds	r3, #3
 800fe2c:	2200      	movs	r2, #0
 800fe2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fe30:	2300      	movs	r3, #0
 800fe32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fe34:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	371c      	adds	r7, #28
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe40:	4770      	bx	lr
 800fe42:	bf00      	nop
 800fe44:	200061d8 	.word	0x200061d8

0800fe48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b082      	sub	sp, #8
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fe52:	2200      	movs	r2, #0
 800fe54:	6839      	ldr	r1, [r7, #0]
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f7ff ffaa 	bl	800fdb0 <FATFS_LinkDriverEx>
 800fe5c:	4603      	mov	r3, r0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3708      	adds	r7, #8
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}

0800fe66 <__cvt>:
 800fe66:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe6a:	ec57 6b10 	vmov	r6, r7, d0
 800fe6e:	2f00      	cmp	r7, #0
 800fe70:	460c      	mov	r4, r1
 800fe72:	4619      	mov	r1, r3
 800fe74:	463b      	mov	r3, r7
 800fe76:	bfbb      	ittet	lt
 800fe78:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800fe7c:	461f      	movlt	r7, r3
 800fe7e:	2300      	movge	r3, #0
 800fe80:	232d      	movlt	r3, #45	@ 0x2d
 800fe82:	700b      	strb	r3, [r1, #0]
 800fe84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe86:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800fe8a:	4691      	mov	r9, r2
 800fe8c:	f023 0820 	bic.w	r8, r3, #32
 800fe90:	bfbc      	itt	lt
 800fe92:	4632      	movlt	r2, r6
 800fe94:	4616      	movlt	r6, r2
 800fe96:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fe9a:	d005      	beq.n	800fea8 <__cvt+0x42>
 800fe9c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800fea0:	d100      	bne.n	800fea4 <__cvt+0x3e>
 800fea2:	3401      	adds	r4, #1
 800fea4:	2102      	movs	r1, #2
 800fea6:	e000      	b.n	800feaa <__cvt+0x44>
 800fea8:	2103      	movs	r1, #3
 800feaa:	ab03      	add	r3, sp, #12
 800feac:	9301      	str	r3, [sp, #4]
 800feae:	ab02      	add	r3, sp, #8
 800feb0:	9300      	str	r3, [sp, #0]
 800feb2:	ec47 6b10 	vmov	d0, r6, r7
 800feb6:	4653      	mov	r3, sl
 800feb8:	4622      	mov	r2, r4
 800feba:	f000 ff91 	bl	8010de0 <_dtoa_r>
 800febe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800fec2:	4605      	mov	r5, r0
 800fec4:	d119      	bne.n	800fefa <__cvt+0x94>
 800fec6:	f019 0f01 	tst.w	r9, #1
 800feca:	d00e      	beq.n	800feea <__cvt+0x84>
 800fecc:	eb00 0904 	add.w	r9, r0, r4
 800fed0:	2200      	movs	r2, #0
 800fed2:	2300      	movs	r3, #0
 800fed4:	4630      	mov	r0, r6
 800fed6:	4639      	mov	r1, r7
 800fed8:	f7f0 fe16 	bl	8000b08 <__aeabi_dcmpeq>
 800fedc:	b108      	cbz	r0, 800fee2 <__cvt+0x7c>
 800fede:	f8cd 900c 	str.w	r9, [sp, #12]
 800fee2:	2230      	movs	r2, #48	@ 0x30
 800fee4:	9b03      	ldr	r3, [sp, #12]
 800fee6:	454b      	cmp	r3, r9
 800fee8:	d31e      	bcc.n	800ff28 <__cvt+0xc2>
 800feea:	9b03      	ldr	r3, [sp, #12]
 800feec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800feee:	1b5b      	subs	r3, r3, r5
 800fef0:	4628      	mov	r0, r5
 800fef2:	6013      	str	r3, [r2, #0]
 800fef4:	b004      	add	sp, #16
 800fef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fefa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800fefe:	eb00 0904 	add.w	r9, r0, r4
 800ff02:	d1e5      	bne.n	800fed0 <__cvt+0x6a>
 800ff04:	7803      	ldrb	r3, [r0, #0]
 800ff06:	2b30      	cmp	r3, #48	@ 0x30
 800ff08:	d10a      	bne.n	800ff20 <__cvt+0xba>
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	4630      	mov	r0, r6
 800ff10:	4639      	mov	r1, r7
 800ff12:	f7f0 fdf9 	bl	8000b08 <__aeabi_dcmpeq>
 800ff16:	b918      	cbnz	r0, 800ff20 <__cvt+0xba>
 800ff18:	f1c4 0401 	rsb	r4, r4, #1
 800ff1c:	f8ca 4000 	str.w	r4, [sl]
 800ff20:	f8da 3000 	ldr.w	r3, [sl]
 800ff24:	4499      	add	r9, r3
 800ff26:	e7d3      	b.n	800fed0 <__cvt+0x6a>
 800ff28:	1c59      	adds	r1, r3, #1
 800ff2a:	9103      	str	r1, [sp, #12]
 800ff2c:	701a      	strb	r2, [r3, #0]
 800ff2e:	e7d9      	b.n	800fee4 <__cvt+0x7e>

0800ff30 <__exponent>:
 800ff30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ff32:	2900      	cmp	r1, #0
 800ff34:	bfba      	itte	lt
 800ff36:	4249      	neglt	r1, r1
 800ff38:	232d      	movlt	r3, #45	@ 0x2d
 800ff3a:	232b      	movge	r3, #43	@ 0x2b
 800ff3c:	2909      	cmp	r1, #9
 800ff3e:	7002      	strb	r2, [r0, #0]
 800ff40:	7043      	strb	r3, [r0, #1]
 800ff42:	dd29      	ble.n	800ff98 <__exponent+0x68>
 800ff44:	f10d 0307 	add.w	r3, sp, #7
 800ff48:	461d      	mov	r5, r3
 800ff4a:	270a      	movs	r7, #10
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	fbb1 f6f7 	udiv	r6, r1, r7
 800ff52:	fb07 1416 	mls	r4, r7, r6, r1
 800ff56:	3430      	adds	r4, #48	@ 0x30
 800ff58:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ff5c:	460c      	mov	r4, r1
 800ff5e:	2c63      	cmp	r4, #99	@ 0x63
 800ff60:	f103 33ff 	add.w	r3, r3, #4294967295
 800ff64:	4631      	mov	r1, r6
 800ff66:	dcf1      	bgt.n	800ff4c <__exponent+0x1c>
 800ff68:	3130      	adds	r1, #48	@ 0x30
 800ff6a:	1e94      	subs	r4, r2, #2
 800ff6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ff70:	1c41      	adds	r1, r0, #1
 800ff72:	4623      	mov	r3, r4
 800ff74:	42ab      	cmp	r3, r5
 800ff76:	d30a      	bcc.n	800ff8e <__exponent+0x5e>
 800ff78:	f10d 0309 	add.w	r3, sp, #9
 800ff7c:	1a9b      	subs	r3, r3, r2
 800ff7e:	42ac      	cmp	r4, r5
 800ff80:	bf88      	it	hi
 800ff82:	2300      	movhi	r3, #0
 800ff84:	3302      	adds	r3, #2
 800ff86:	4403      	add	r3, r0
 800ff88:	1a18      	subs	r0, r3, r0
 800ff8a:	b003      	add	sp, #12
 800ff8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ff92:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ff96:	e7ed      	b.n	800ff74 <__exponent+0x44>
 800ff98:	2330      	movs	r3, #48	@ 0x30
 800ff9a:	3130      	adds	r1, #48	@ 0x30
 800ff9c:	7083      	strb	r3, [r0, #2]
 800ff9e:	70c1      	strb	r1, [r0, #3]
 800ffa0:	1d03      	adds	r3, r0, #4
 800ffa2:	e7f1      	b.n	800ff88 <__exponent+0x58>

0800ffa4 <_printf_float>:
 800ffa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffa8:	b08d      	sub	sp, #52	@ 0x34
 800ffaa:	460c      	mov	r4, r1
 800ffac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ffb0:	4616      	mov	r6, r2
 800ffb2:	461f      	mov	r7, r3
 800ffb4:	4605      	mov	r5, r0
 800ffb6:	f000 fe13 	bl	8010be0 <_localeconv_r>
 800ffba:	6803      	ldr	r3, [r0, #0]
 800ffbc:	9304      	str	r3, [sp, #16]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7f0 f976 	bl	80002b0 <strlen>
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ffc8:	f8d8 3000 	ldr.w	r3, [r8]
 800ffcc:	9005      	str	r0, [sp, #20]
 800ffce:	3307      	adds	r3, #7
 800ffd0:	f023 0307 	bic.w	r3, r3, #7
 800ffd4:	f103 0208 	add.w	r2, r3, #8
 800ffd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ffdc:	f8d4 b000 	ldr.w	fp, [r4]
 800ffe0:	f8c8 2000 	str.w	r2, [r8]
 800ffe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffe8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ffec:	9307      	str	r3, [sp, #28]
 800ffee:	f8cd 8018 	str.w	r8, [sp, #24]
 800fff2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800fff6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800fffa:	4b9c      	ldr	r3, [pc, #624]	@ (801026c <_printf_float+0x2c8>)
 800fffc:	f04f 32ff 	mov.w	r2, #4294967295
 8010000:	f7f0 fdb4 	bl	8000b6c <__aeabi_dcmpun>
 8010004:	bb70      	cbnz	r0, 8010064 <_printf_float+0xc0>
 8010006:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801000a:	4b98      	ldr	r3, [pc, #608]	@ (801026c <_printf_float+0x2c8>)
 801000c:	f04f 32ff 	mov.w	r2, #4294967295
 8010010:	f7f0 fd8e 	bl	8000b30 <__aeabi_dcmple>
 8010014:	bb30      	cbnz	r0, 8010064 <_printf_float+0xc0>
 8010016:	2200      	movs	r2, #0
 8010018:	2300      	movs	r3, #0
 801001a:	4640      	mov	r0, r8
 801001c:	4649      	mov	r1, r9
 801001e:	f7f0 fd7d 	bl	8000b1c <__aeabi_dcmplt>
 8010022:	b110      	cbz	r0, 801002a <_printf_float+0x86>
 8010024:	232d      	movs	r3, #45	@ 0x2d
 8010026:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801002a:	4a91      	ldr	r2, [pc, #580]	@ (8010270 <_printf_float+0x2cc>)
 801002c:	4b91      	ldr	r3, [pc, #580]	@ (8010274 <_printf_float+0x2d0>)
 801002e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010032:	bf94      	ite	ls
 8010034:	4690      	movls	r8, r2
 8010036:	4698      	movhi	r8, r3
 8010038:	2303      	movs	r3, #3
 801003a:	6123      	str	r3, [r4, #16]
 801003c:	f02b 0304 	bic.w	r3, fp, #4
 8010040:	6023      	str	r3, [r4, #0]
 8010042:	f04f 0900 	mov.w	r9, #0
 8010046:	9700      	str	r7, [sp, #0]
 8010048:	4633      	mov	r3, r6
 801004a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801004c:	4621      	mov	r1, r4
 801004e:	4628      	mov	r0, r5
 8010050:	f000 f9d2 	bl	80103f8 <_printf_common>
 8010054:	3001      	adds	r0, #1
 8010056:	f040 808d 	bne.w	8010174 <_printf_float+0x1d0>
 801005a:	f04f 30ff 	mov.w	r0, #4294967295
 801005e:	b00d      	add	sp, #52	@ 0x34
 8010060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010064:	4642      	mov	r2, r8
 8010066:	464b      	mov	r3, r9
 8010068:	4640      	mov	r0, r8
 801006a:	4649      	mov	r1, r9
 801006c:	f7f0 fd7e 	bl	8000b6c <__aeabi_dcmpun>
 8010070:	b140      	cbz	r0, 8010084 <_printf_float+0xe0>
 8010072:	464b      	mov	r3, r9
 8010074:	2b00      	cmp	r3, #0
 8010076:	bfbc      	itt	lt
 8010078:	232d      	movlt	r3, #45	@ 0x2d
 801007a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801007e:	4a7e      	ldr	r2, [pc, #504]	@ (8010278 <_printf_float+0x2d4>)
 8010080:	4b7e      	ldr	r3, [pc, #504]	@ (801027c <_printf_float+0x2d8>)
 8010082:	e7d4      	b.n	801002e <_printf_float+0x8a>
 8010084:	6863      	ldr	r3, [r4, #4]
 8010086:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801008a:	9206      	str	r2, [sp, #24]
 801008c:	1c5a      	adds	r2, r3, #1
 801008e:	d13b      	bne.n	8010108 <_printf_float+0x164>
 8010090:	2306      	movs	r3, #6
 8010092:	6063      	str	r3, [r4, #4]
 8010094:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010098:	2300      	movs	r3, #0
 801009a:	6022      	str	r2, [r4, #0]
 801009c:	9303      	str	r3, [sp, #12]
 801009e:	ab0a      	add	r3, sp, #40	@ 0x28
 80100a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80100a4:	ab09      	add	r3, sp, #36	@ 0x24
 80100a6:	9300      	str	r3, [sp, #0]
 80100a8:	6861      	ldr	r1, [r4, #4]
 80100aa:	ec49 8b10 	vmov	d0, r8, r9
 80100ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80100b2:	4628      	mov	r0, r5
 80100b4:	f7ff fed7 	bl	800fe66 <__cvt>
 80100b8:	9b06      	ldr	r3, [sp, #24]
 80100ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80100bc:	2b47      	cmp	r3, #71	@ 0x47
 80100be:	4680      	mov	r8, r0
 80100c0:	d129      	bne.n	8010116 <_printf_float+0x172>
 80100c2:	1cc8      	adds	r0, r1, #3
 80100c4:	db02      	blt.n	80100cc <_printf_float+0x128>
 80100c6:	6863      	ldr	r3, [r4, #4]
 80100c8:	4299      	cmp	r1, r3
 80100ca:	dd41      	ble.n	8010150 <_printf_float+0x1ac>
 80100cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80100d0:	fa5f fa8a 	uxtb.w	sl, sl
 80100d4:	3901      	subs	r1, #1
 80100d6:	4652      	mov	r2, sl
 80100d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80100dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80100de:	f7ff ff27 	bl	800ff30 <__exponent>
 80100e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80100e4:	1813      	adds	r3, r2, r0
 80100e6:	2a01      	cmp	r2, #1
 80100e8:	4681      	mov	r9, r0
 80100ea:	6123      	str	r3, [r4, #16]
 80100ec:	dc02      	bgt.n	80100f4 <_printf_float+0x150>
 80100ee:	6822      	ldr	r2, [r4, #0]
 80100f0:	07d2      	lsls	r2, r2, #31
 80100f2:	d501      	bpl.n	80100f8 <_printf_float+0x154>
 80100f4:	3301      	adds	r3, #1
 80100f6:	6123      	str	r3, [r4, #16]
 80100f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d0a2      	beq.n	8010046 <_printf_float+0xa2>
 8010100:	232d      	movs	r3, #45	@ 0x2d
 8010102:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010106:	e79e      	b.n	8010046 <_printf_float+0xa2>
 8010108:	9a06      	ldr	r2, [sp, #24]
 801010a:	2a47      	cmp	r2, #71	@ 0x47
 801010c:	d1c2      	bne.n	8010094 <_printf_float+0xf0>
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1c0      	bne.n	8010094 <_printf_float+0xf0>
 8010112:	2301      	movs	r3, #1
 8010114:	e7bd      	b.n	8010092 <_printf_float+0xee>
 8010116:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801011a:	d9db      	bls.n	80100d4 <_printf_float+0x130>
 801011c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010120:	d118      	bne.n	8010154 <_printf_float+0x1b0>
 8010122:	2900      	cmp	r1, #0
 8010124:	6863      	ldr	r3, [r4, #4]
 8010126:	dd0b      	ble.n	8010140 <_printf_float+0x19c>
 8010128:	6121      	str	r1, [r4, #16]
 801012a:	b913      	cbnz	r3, 8010132 <_printf_float+0x18e>
 801012c:	6822      	ldr	r2, [r4, #0]
 801012e:	07d0      	lsls	r0, r2, #31
 8010130:	d502      	bpl.n	8010138 <_printf_float+0x194>
 8010132:	3301      	adds	r3, #1
 8010134:	440b      	add	r3, r1
 8010136:	6123      	str	r3, [r4, #16]
 8010138:	65a1      	str	r1, [r4, #88]	@ 0x58
 801013a:	f04f 0900 	mov.w	r9, #0
 801013e:	e7db      	b.n	80100f8 <_printf_float+0x154>
 8010140:	b913      	cbnz	r3, 8010148 <_printf_float+0x1a4>
 8010142:	6822      	ldr	r2, [r4, #0]
 8010144:	07d2      	lsls	r2, r2, #31
 8010146:	d501      	bpl.n	801014c <_printf_float+0x1a8>
 8010148:	3302      	adds	r3, #2
 801014a:	e7f4      	b.n	8010136 <_printf_float+0x192>
 801014c:	2301      	movs	r3, #1
 801014e:	e7f2      	b.n	8010136 <_printf_float+0x192>
 8010150:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010154:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010156:	4299      	cmp	r1, r3
 8010158:	db05      	blt.n	8010166 <_printf_float+0x1c2>
 801015a:	6823      	ldr	r3, [r4, #0]
 801015c:	6121      	str	r1, [r4, #16]
 801015e:	07d8      	lsls	r0, r3, #31
 8010160:	d5ea      	bpl.n	8010138 <_printf_float+0x194>
 8010162:	1c4b      	adds	r3, r1, #1
 8010164:	e7e7      	b.n	8010136 <_printf_float+0x192>
 8010166:	2900      	cmp	r1, #0
 8010168:	bfd4      	ite	le
 801016a:	f1c1 0202 	rsble	r2, r1, #2
 801016e:	2201      	movgt	r2, #1
 8010170:	4413      	add	r3, r2
 8010172:	e7e0      	b.n	8010136 <_printf_float+0x192>
 8010174:	6823      	ldr	r3, [r4, #0]
 8010176:	055a      	lsls	r2, r3, #21
 8010178:	d407      	bmi.n	801018a <_printf_float+0x1e6>
 801017a:	6923      	ldr	r3, [r4, #16]
 801017c:	4642      	mov	r2, r8
 801017e:	4631      	mov	r1, r6
 8010180:	4628      	mov	r0, r5
 8010182:	47b8      	blx	r7
 8010184:	3001      	adds	r0, #1
 8010186:	d12b      	bne.n	80101e0 <_printf_float+0x23c>
 8010188:	e767      	b.n	801005a <_printf_float+0xb6>
 801018a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801018e:	f240 80dd 	bls.w	801034c <_printf_float+0x3a8>
 8010192:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010196:	2200      	movs	r2, #0
 8010198:	2300      	movs	r3, #0
 801019a:	f7f0 fcb5 	bl	8000b08 <__aeabi_dcmpeq>
 801019e:	2800      	cmp	r0, #0
 80101a0:	d033      	beq.n	801020a <_printf_float+0x266>
 80101a2:	4a37      	ldr	r2, [pc, #220]	@ (8010280 <_printf_float+0x2dc>)
 80101a4:	2301      	movs	r3, #1
 80101a6:	4631      	mov	r1, r6
 80101a8:	4628      	mov	r0, r5
 80101aa:	47b8      	blx	r7
 80101ac:	3001      	adds	r0, #1
 80101ae:	f43f af54 	beq.w	801005a <_printf_float+0xb6>
 80101b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80101b6:	4543      	cmp	r3, r8
 80101b8:	db02      	blt.n	80101c0 <_printf_float+0x21c>
 80101ba:	6823      	ldr	r3, [r4, #0]
 80101bc:	07d8      	lsls	r0, r3, #31
 80101be:	d50f      	bpl.n	80101e0 <_printf_float+0x23c>
 80101c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80101c4:	4631      	mov	r1, r6
 80101c6:	4628      	mov	r0, r5
 80101c8:	47b8      	blx	r7
 80101ca:	3001      	adds	r0, #1
 80101cc:	f43f af45 	beq.w	801005a <_printf_float+0xb6>
 80101d0:	f04f 0900 	mov.w	r9, #0
 80101d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80101d8:	f104 0a1a 	add.w	sl, r4, #26
 80101dc:	45c8      	cmp	r8, r9
 80101de:	dc09      	bgt.n	80101f4 <_printf_float+0x250>
 80101e0:	6823      	ldr	r3, [r4, #0]
 80101e2:	079b      	lsls	r3, r3, #30
 80101e4:	f100 8103 	bmi.w	80103ee <_printf_float+0x44a>
 80101e8:	68e0      	ldr	r0, [r4, #12]
 80101ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80101ec:	4298      	cmp	r0, r3
 80101ee:	bfb8      	it	lt
 80101f0:	4618      	movlt	r0, r3
 80101f2:	e734      	b.n	801005e <_printf_float+0xba>
 80101f4:	2301      	movs	r3, #1
 80101f6:	4652      	mov	r2, sl
 80101f8:	4631      	mov	r1, r6
 80101fa:	4628      	mov	r0, r5
 80101fc:	47b8      	blx	r7
 80101fe:	3001      	adds	r0, #1
 8010200:	f43f af2b 	beq.w	801005a <_printf_float+0xb6>
 8010204:	f109 0901 	add.w	r9, r9, #1
 8010208:	e7e8      	b.n	80101dc <_printf_float+0x238>
 801020a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801020c:	2b00      	cmp	r3, #0
 801020e:	dc39      	bgt.n	8010284 <_printf_float+0x2e0>
 8010210:	4a1b      	ldr	r2, [pc, #108]	@ (8010280 <_printf_float+0x2dc>)
 8010212:	2301      	movs	r3, #1
 8010214:	4631      	mov	r1, r6
 8010216:	4628      	mov	r0, r5
 8010218:	47b8      	blx	r7
 801021a:	3001      	adds	r0, #1
 801021c:	f43f af1d 	beq.w	801005a <_printf_float+0xb6>
 8010220:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010224:	ea59 0303 	orrs.w	r3, r9, r3
 8010228:	d102      	bne.n	8010230 <_printf_float+0x28c>
 801022a:	6823      	ldr	r3, [r4, #0]
 801022c:	07d9      	lsls	r1, r3, #31
 801022e:	d5d7      	bpl.n	80101e0 <_printf_float+0x23c>
 8010230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010234:	4631      	mov	r1, r6
 8010236:	4628      	mov	r0, r5
 8010238:	47b8      	blx	r7
 801023a:	3001      	adds	r0, #1
 801023c:	f43f af0d 	beq.w	801005a <_printf_float+0xb6>
 8010240:	f04f 0a00 	mov.w	sl, #0
 8010244:	f104 0b1a 	add.w	fp, r4, #26
 8010248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801024a:	425b      	negs	r3, r3
 801024c:	4553      	cmp	r3, sl
 801024e:	dc01      	bgt.n	8010254 <_printf_float+0x2b0>
 8010250:	464b      	mov	r3, r9
 8010252:	e793      	b.n	801017c <_printf_float+0x1d8>
 8010254:	2301      	movs	r3, #1
 8010256:	465a      	mov	r2, fp
 8010258:	4631      	mov	r1, r6
 801025a:	4628      	mov	r0, r5
 801025c:	47b8      	blx	r7
 801025e:	3001      	adds	r0, #1
 8010260:	f43f aefb 	beq.w	801005a <_printf_float+0xb6>
 8010264:	f10a 0a01 	add.w	sl, sl, #1
 8010268:	e7ee      	b.n	8010248 <_printf_float+0x2a4>
 801026a:	bf00      	nop
 801026c:	7fefffff 	.word	0x7fefffff
 8010270:	08016a80 	.word	0x08016a80
 8010274:	08016a84 	.word	0x08016a84
 8010278:	08016a88 	.word	0x08016a88
 801027c:	08016a8c 	.word	0x08016a8c
 8010280:	08016a90 	.word	0x08016a90
 8010284:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010286:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801028a:	4553      	cmp	r3, sl
 801028c:	bfa8      	it	ge
 801028e:	4653      	movge	r3, sl
 8010290:	2b00      	cmp	r3, #0
 8010292:	4699      	mov	r9, r3
 8010294:	dc36      	bgt.n	8010304 <_printf_float+0x360>
 8010296:	f04f 0b00 	mov.w	fp, #0
 801029a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801029e:	f104 021a 	add.w	r2, r4, #26
 80102a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80102a4:	9306      	str	r3, [sp, #24]
 80102a6:	eba3 0309 	sub.w	r3, r3, r9
 80102aa:	455b      	cmp	r3, fp
 80102ac:	dc31      	bgt.n	8010312 <_printf_float+0x36e>
 80102ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102b0:	459a      	cmp	sl, r3
 80102b2:	dc3a      	bgt.n	801032a <_printf_float+0x386>
 80102b4:	6823      	ldr	r3, [r4, #0]
 80102b6:	07da      	lsls	r2, r3, #31
 80102b8:	d437      	bmi.n	801032a <_printf_float+0x386>
 80102ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102bc:	ebaa 0903 	sub.w	r9, sl, r3
 80102c0:	9b06      	ldr	r3, [sp, #24]
 80102c2:	ebaa 0303 	sub.w	r3, sl, r3
 80102c6:	4599      	cmp	r9, r3
 80102c8:	bfa8      	it	ge
 80102ca:	4699      	movge	r9, r3
 80102cc:	f1b9 0f00 	cmp.w	r9, #0
 80102d0:	dc33      	bgt.n	801033a <_printf_float+0x396>
 80102d2:	f04f 0800 	mov.w	r8, #0
 80102d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80102da:	f104 0b1a 	add.w	fp, r4, #26
 80102de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102e0:	ebaa 0303 	sub.w	r3, sl, r3
 80102e4:	eba3 0309 	sub.w	r3, r3, r9
 80102e8:	4543      	cmp	r3, r8
 80102ea:	f77f af79 	ble.w	80101e0 <_printf_float+0x23c>
 80102ee:	2301      	movs	r3, #1
 80102f0:	465a      	mov	r2, fp
 80102f2:	4631      	mov	r1, r6
 80102f4:	4628      	mov	r0, r5
 80102f6:	47b8      	blx	r7
 80102f8:	3001      	adds	r0, #1
 80102fa:	f43f aeae 	beq.w	801005a <_printf_float+0xb6>
 80102fe:	f108 0801 	add.w	r8, r8, #1
 8010302:	e7ec      	b.n	80102de <_printf_float+0x33a>
 8010304:	4642      	mov	r2, r8
 8010306:	4631      	mov	r1, r6
 8010308:	4628      	mov	r0, r5
 801030a:	47b8      	blx	r7
 801030c:	3001      	adds	r0, #1
 801030e:	d1c2      	bne.n	8010296 <_printf_float+0x2f2>
 8010310:	e6a3      	b.n	801005a <_printf_float+0xb6>
 8010312:	2301      	movs	r3, #1
 8010314:	4631      	mov	r1, r6
 8010316:	4628      	mov	r0, r5
 8010318:	9206      	str	r2, [sp, #24]
 801031a:	47b8      	blx	r7
 801031c:	3001      	adds	r0, #1
 801031e:	f43f ae9c 	beq.w	801005a <_printf_float+0xb6>
 8010322:	9a06      	ldr	r2, [sp, #24]
 8010324:	f10b 0b01 	add.w	fp, fp, #1
 8010328:	e7bb      	b.n	80102a2 <_printf_float+0x2fe>
 801032a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801032e:	4631      	mov	r1, r6
 8010330:	4628      	mov	r0, r5
 8010332:	47b8      	blx	r7
 8010334:	3001      	adds	r0, #1
 8010336:	d1c0      	bne.n	80102ba <_printf_float+0x316>
 8010338:	e68f      	b.n	801005a <_printf_float+0xb6>
 801033a:	9a06      	ldr	r2, [sp, #24]
 801033c:	464b      	mov	r3, r9
 801033e:	4442      	add	r2, r8
 8010340:	4631      	mov	r1, r6
 8010342:	4628      	mov	r0, r5
 8010344:	47b8      	blx	r7
 8010346:	3001      	adds	r0, #1
 8010348:	d1c3      	bne.n	80102d2 <_printf_float+0x32e>
 801034a:	e686      	b.n	801005a <_printf_float+0xb6>
 801034c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010350:	f1ba 0f01 	cmp.w	sl, #1
 8010354:	dc01      	bgt.n	801035a <_printf_float+0x3b6>
 8010356:	07db      	lsls	r3, r3, #31
 8010358:	d536      	bpl.n	80103c8 <_printf_float+0x424>
 801035a:	2301      	movs	r3, #1
 801035c:	4642      	mov	r2, r8
 801035e:	4631      	mov	r1, r6
 8010360:	4628      	mov	r0, r5
 8010362:	47b8      	blx	r7
 8010364:	3001      	adds	r0, #1
 8010366:	f43f ae78 	beq.w	801005a <_printf_float+0xb6>
 801036a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801036e:	4631      	mov	r1, r6
 8010370:	4628      	mov	r0, r5
 8010372:	47b8      	blx	r7
 8010374:	3001      	adds	r0, #1
 8010376:	f43f ae70 	beq.w	801005a <_printf_float+0xb6>
 801037a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801037e:	2200      	movs	r2, #0
 8010380:	2300      	movs	r3, #0
 8010382:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010386:	f7f0 fbbf 	bl	8000b08 <__aeabi_dcmpeq>
 801038a:	b9c0      	cbnz	r0, 80103be <_printf_float+0x41a>
 801038c:	4653      	mov	r3, sl
 801038e:	f108 0201 	add.w	r2, r8, #1
 8010392:	4631      	mov	r1, r6
 8010394:	4628      	mov	r0, r5
 8010396:	47b8      	blx	r7
 8010398:	3001      	adds	r0, #1
 801039a:	d10c      	bne.n	80103b6 <_printf_float+0x412>
 801039c:	e65d      	b.n	801005a <_printf_float+0xb6>
 801039e:	2301      	movs	r3, #1
 80103a0:	465a      	mov	r2, fp
 80103a2:	4631      	mov	r1, r6
 80103a4:	4628      	mov	r0, r5
 80103a6:	47b8      	blx	r7
 80103a8:	3001      	adds	r0, #1
 80103aa:	f43f ae56 	beq.w	801005a <_printf_float+0xb6>
 80103ae:	f108 0801 	add.w	r8, r8, #1
 80103b2:	45d0      	cmp	r8, sl
 80103b4:	dbf3      	blt.n	801039e <_printf_float+0x3fa>
 80103b6:	464b      	mov	r3, r9
 80103b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80103bc:	e6df      	b.n	801017e <_printf_float+0x1da>
 80103be:	f04f 0800 	mov.w	r8, #0
 80103c2:	f104 0b1a 	add.w	fp, r4, #26
 80103c6:	e7f4      	b.n	80103b2 <_printf_float+0x40e>
 80103c8:	2301      	movs	r3, #1
 80103ca:	4642      	mov	r2, r8
 80103cc:	e7e1      	b.n	8010392 <_printf_float+0x3ee>
 80103ce:	2301      	movs	r3, #1
 80103d0:	464a      	mov	r2, r9
 80103d2:	4631      	mov	r1, r6
 80103d4:	4628      	mov	r0, r5
 80103d6:	47b8      	blx	r7
 80103d8:	3001      	adds	r0, #1
 80103da:	f43f ae3e 	beq.w	801005a <_printf_float+0xb6>
 80103de:	f108 0801 	add.w	r8, r8, #1
 80103e2:	68e3      	ldr	r3, [r4, #12]
 80103e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80103e6:	1a5b      	subs	r3, r3, r1
 80103e8:	4543      	cmp	r3, r8
 80103ea:	dcf0      	bgt.n	80103ce <_printf_float+0x42a>
 80103ec:	e6fc      	b.n	80101e8 <_printf_float+0x244>
 80103ee:	f04f 0800 	mov.w	r8, #0
 80103f2:	f104 0919 	add.w	r9, r4, #25
 80103f6:	e7f4      	b.n	80103e2 <_printf_float+0x43e>

080103f8 <_printf_common>:
 80103f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103fc:	4616      	mov	r6, r2
 80103fe:	4698      	mov	r8, r3
 8010400:	688a      	ldr	r2, [r1, #8]
 8010402:	690b      	ldr	r3, [r1, #16]
 8010404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010408:	4293      	cmp	r3, r2
 801040a:	bfb8      	it	lt
 801040c:	4613      	movlt	r3, r2
 801040e:	6033      	str	r3, [r6, #0]
 8010410:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010414:	4607      	mov	r7, r0
 8010416:	460c      	mov	r4, r1
 8010418:	b10a      	cbz	r2, 801041e <_printf_common+0x26>
 801041a:	3301      	adds	r3, #1
 801041c:	6033      	str	r3, [r6, #0]
 801041e:	6823      	ldr	r3, [r4, #0]
 8010420:	0699      	lsls	r1, r3, #26
 8010422:	bf42      	ittt	mi
 8010424:	6833      	ldrmi	r3, [r6, #0]
 8010426:	3302      	addmi	r3, #2
 8010428:	6033      	strmi	r3, [r6, #0]
 801042a:	6825      	ldr	r5, [r4, #0]
 801042c:	f015 0506 	ands.w	r5, r5, #6
 8010430:	d106      	bne.n	8010440 <_printf_common+0x48>
 8010432:	f104 0a19 	add.w	sl, r4, #25
 8010436:	68e3      	ldr	r3, [r4, #12]
 8010438:	6832      	ldr	r2, [r6, #0]
 801043a:	1a9b      	subs	r3, r3, r2
 801043c:	42ab      	cmp	r3, r5
 801043e:	dc26      	bgt.n	801048e <_printf_common+0x96>
 8010440:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010444:	6822      	ldr	r2, [r4, #0]
 8010446:	3b00      	subs	r3, #0
 8010448:	bf18      	it	ne
 801044a:	2301      	movne	r3, #1
 801044c:	0692      	lsls	r2, r2, #26
 801044e:	d42b      	bmi.n	80104a8 <_printf_common+0xb0>
 8010450:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010454:	4641      	mov	r1, r8
 8010456:	4638      	mov	r0, r7
 8010458:	47c8      	blx	r9
 801045a:	3001      	adds	r0, #1
 801045c:	d01e      	beq.n	801049c <_printf_common+0xa4>
 801045e:	6823      	ldr	r3, [r4, #0]
 8010460:	6922      	ldr	r2, [r4, #16]
 8010462:	f003 0306 	and.w	r3, r3, #6
 8010466:	2b04      	cmp	r3, #4
 8010468:	bf02      	ittt	eq
 801046a:	68e5      	ldreq	r5, [r4, #12]
 801046c:	6833      	ldreq	r3, [r6, #0]
 801046e:	1aed      	subeq	r5, r5, r3
 8010470:	68a3      	ldr	r3, [r4, #8]
 8010472:	bf0c      	ite	eq
 8010474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010478:	2500      	movne	r5, #0
 801047a:	4293      	cmp	r3, r2
 801047c:	bfc4      	itt	gt
 801047e:	1a9b      	subgt	r3, r3, r2
 8010480:	18ed      	addgt	r5, r5, r3
 8010482:	2600      	movs	r6, #0
 8010484:	341a      	adds	r4, #26
 8010486:	42b5      	cmp	r5, r6
 8010488:	d11a      	bne.n	80104c0 <_printf_common+0xc8>
 801048a:	2000      	movs	r0, #0
 801048c:	e008      	b.n	80104a0 <_printf_common+0xa8>
 801048e:	2301      	movs	r3, #1
 8010490:	4652      	mov	r2, sl
 8010492:	4641      	mov	r1, r8
 8010494:	4638      	mov	r0, r7
 8010496:	47c8      	blx	r9
 8010498:	3001      	adds	r0, #1
 801049a:	d103      	bne.n	80104a4 <_printf_common+0xac>
 801049c:	f04f 30ff 	mov.w	r0, #4294967295
 80104a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104a4:	3501      	adds	r5, #1
 80104a6:	e7c6      	b.n	8010436 <_printf_common+0x3e>
 80104a8:	18e1      	adds	r1, r4, r3
 80104aa:	1c5a      	adds	r2, r3, #1
 80104ac:	2030      	movs	r0, #48	@ 0x30
 80104ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80104b2:	4422      	add	r2, r4
 80104b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80104b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80104bc:	3302      	adds	r3, #2
 80104be:	e7c7      	b.n	8010450 <_printf_common+0x58>
 80104c0:	2301      	movs	r3, #1
 80104c2:	4622      	mov	r2, r4
 80104c4:	4641      	mov	r1, r8
 80104c6:	4638      	mov	r0, r7
 80104c8:	47c8      	blx	r9
 80104ca:	3001      	adds	r0, #1
 80104cc:	d0e6      	beq.n	801049c <_printf_common+0xa4>
 80104ce:	3601      	adds	r6, #1
 80104d0:	e7d9      	b.n	8010486 <_printf_common+0x8e>
	...

080104d4 <_printf_i>:
 80104d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104d8:	7e0f      	ldrb	r7, [r1, #24]
 80104da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80104dc:	2f78      	cmp	r7, #120	@ 0x78
 80104de:	4691      	mov	r9, r2
 80104e0:	4680      	mov	r8, r0
 80104e2:	460c      	mov	r4, r1
 80104e4:	469a      	mov	sl, r3
 80104e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80104ea:	d807      	bhi.n	80104fc <_printf_i+0x28>
 80104ec:	2f62      	cmp	r7, #98	@ 0x62
 80104ee:	d80a      	bhi.n	8010506 <_printf_i+0x32>
 80104f0:	2f00      	cmp	r7, #0
 80104f2:	f000 80d2 	beq.w	801069a <_printf_i+0x1c6>
 80104f6:	2f58      	cmp	r7, #88	@ 0x58
 80104f8:	f000 80b9 	beq.w	801066e <_printf_i+0x19a>
 80104fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010504:	e03a      	b.n	801057c <_printf_i+0xa8>
 8010506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801050a:	2b15      	cmp	r3, #21
 801050c:	d8f6      	bhi.n	80104fc <_printf_i+0x28>
 801050e:	a101      	add	r1, pc, #4	@ (adr r1, 8010514 <_printf_i+0x40>)
 8010510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010514:	0801056d 	.word	0x0801056d
 8010518:	08010581 	.word	0x08010581
 801051c:	080104fd 	.word	0x080104fd
 8010520:	080104fd 	.word	0x080104fd
 8010524:	080104fd 	.word	0x080104fd
 8010528:	080104fd 	.word	0x080104fd
 801052c:	08010581 	.word	0x08010581
 8010530:	080104fd 	.word	0x080104fd
 8010534:	080104fd 	.word	0x080104fd
 8010538:	080104fd 	.word	0x080104fd
 801053c:	080104fd 	.word	0x080104fd
 8010540:	08010681 	.word	0x08010681
 8010544:	080105ab 	.word	0x080105ab
 8010548:	0801063b 	.word	0x0801063b
 801054c:	080104fd 	.word	0x080104fd
 8010550:	080104fd 	.word	0x080104fd
 8010554:	080106a3 	.word	0x080106a3
 8010558:	080104fd 	.word	0x080104fd
 801055c:	080105ab 	.word	0x080105ab
 8010560:	080104fd 	.word	0x080104fd
 8010564:	080104fd 	.word	0x080104fd
 8010568:	08010643 	.word	0x08010643
 801056c:	6833      	ldr	r3, [r6, #0]
 801056e:	1d1a      	adds	r2, r3, #4
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	6032      	str	r2, [r6, #0]
 8010574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801057c:	2301      	movs	r3, #1
 801057e:	e09d      	b.n	80106bc <_printf_i+0x1e8>
 8010580:	6833      	ldr	r3, [r6, #0]
 8010582:	6820      	ldr	r0, [r4, #0]
 8010584:	1d19      	adds	r1, r3, #4
 8010586:	6031      	str	r1, [r6, #0]
 8010588:	0606      	lsls	r6, r0, #24
 801058a:	d501      	bpl.n	8010590 <_printf_i+0xbc>
 801058c:	681d      	ldr	r5, [r3, #0]
 801058e:	e003      	b.n	8010598 <_printf_i+0xc4>
 8010590:	0645      	lsls	r5, r0, #25
 8010592:	d5fb      	bpl.n	801058c <_printf_i+0xb8>
 8010594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010598:	2d00      	cmp	r5, #0
 801059a:	da03      	bge.n	80105a4 <_printf_i+0xd0>
 801059c:	232d      	movs	r3, #45	@ 0x2d
 801059e:	426d      	negs	r5, r5
 80105a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105a4:	4859      	ldr	r0, [pc, #356]	@ (801070c <_printf_i+0x238>)
 80105a6:	230a      	movs	r3, #10
 80105a8:	e011      	b.n	80105ce <_printf_i+0xfa>
 80105aa:	6821      	ldr	r1, [r4, #0]
 80105ac:	6833      	ldr	r3, [r6, #0]
 80105ae:	0608      	lsls	r0, r1, #24
 80105b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80105b4:	d402      	bmi.n	80105bc <_printf_i+0xe8>
 80105b6:	0649      	lsls	r1, r1, #25
 80105b8:	bf48      	it	mi
 80105ba:	b2ad      	uxthmi	r5, r5
 80105bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80105be:	4853      	ldr	r0, [pc, #332]	@ (801070c <_printf_i+0x238>)
 80105c0:	6033      	str	r3, [r6, #0]
 80105c2:	bf14      	ite	ne
 80105c4:	230a      	movne	r3, #10
 80105c6:	2308      	moveq	r3, #8
 80105c8:	2100      	movs	r1, #0
 80105ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80105ce:	6866      	ldr	r6, [r4, #4]
 80105d0:	60a6      	str	r6, [r4, #8]
 80105d2:	2e00      	cmp	r6, #0
 80105d4:	bfa2      	ittt	ge
 80105d6:	6821      	ldrge	r1, [r4, #0]
 80105d8:	f021 0104 	bicge.w	r1, r1, #4
 80105dc:	6021      	strge	r1, [r4, #0]
 80105de:	b90d      	cbnz	r5, 80105e4 <_printf_i+0x110>
 80105e0:	2e00      	cmp	r6, #0
 80105e2:	d04b      	beq.n	801067c <_printf_i+0x1a8>
 80105e4:	4616      	mov	r6, r2
 80105e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80105ea:	fb03 5711 	mls	r7, r3, r1, r5
 80105ee:	5dc7      	ldrb	r7, [r0, r7]
 80105f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105f4:	462f      	mov	r7, r5
 80105f6:	42bb      	cmp	r3, r7
 80105f8:	460d      	mov	r5, r1
 80105fa:	d9f4      	bls.n	80105e6 <_printf_i+0x112>
 80105fc:	2b08      	cmp	r3, #8
 80105fe:	d10b      	bne.n	8010618 <_printf_i+0x144>
 8010600:	6823      	ldr	r3, [r4, #0]
 8010602:	07df      	lsls	r7, r3, #31
 8010604:	d508      	bpl.n	8010618 <_printf_i+0x144>
 8010606:	6923      	ldr	r3, [r4, #16]
 8010608:	6861      	ldr	r1, [r4, #4]
 801060a:	4299      	cmp	r1, r3
 801060c:	bfde      	ittt	le
 801060e:	2330      	movle	r3, #48	@ 0x30
 8010610:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010614:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010618:	1b92      	subs	r2, r2, r6
 801061a:	6122      	str	r2, [r4, #16]
 801061c:	f8cd a000 	str.w	sl, [sp]
 8010620:	464b      	mov	r3, r9
 8010622:	aa03      	add	r2, sp, #12
 8010624:	4621      	mov	r1, r4
 8010626:	4640      	mov	r0, r8
 8010628:	f7ff fee6 	bl	80103f8 <_printf_common>
 801062c:	3001      	adds	r0, #1
 801062e:	d14a      	bne.n	80106c6 <_printf_i+0x1f2>
 8010630:	f04f 30ff 	mov.w	r0, #4294967295
 8010634:	b004      	add	sp, #16
 8010636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801063a:	6823      	ldr	r3, [r4, #0]
 801063c:	f043 0320 	orr.w	r3, r3, #32
 8010640:	6023      	str	r3, [r4, #0]
 8010642:	4833      	ldr	r0, [pc, #204]	@ (8010710 <_printf_i+0x23c>)
 8010644:	2778      	movs	r7, #120	@ 0x78
 8010646:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801064a:	6823      	ldr	r3, [r4, #0]
 801064c:	6831      	ldr	r1, [r6, #0]
 801064e:	061f      	lsls	r7, r3, #24
 8010650:	f851 5b04 	ldr.w	r5, [r1], #4
 8010654:	d402      	bmi.n	801065c <_printf_i+0x188>
 8010656:	065f      	lsls	r7, r3, #25
 8010658:	bf48      	it	mi
 801065a:	b2ad      	uxthmi	r5, r5
 801065c:	6031      	str	r1, [r6, #0]
 801065e:	07d9      	lsls	r1, r3, #31
 8010660:	bf44      	itt	mi
 8010662:	f043 0320 	orrmi.w	r3, r3, #32
 8010666:	6023      	strmi	r3, [r4, #0]
 8010668:	b11d      	cbz	r5, 8010672 <_printf_i+0x19e>
 801066a:	2310      	movs	r3, #16
 801066c:	e7ac      	b.n	80105c8 <_printf_i+0xf4>
 801066e:	4827      	ldr	r0, [pc, #156]	@ (801070c <_printf_i+0x238>)
 8010670:	e7e9      	b.n	8010646 <_printf_i+0x172>
 8010672:	6823      	ldr	r3, [r4, #0]
 8010674:	f023 0320 	bic.w	r3, r3, #32
 8010678:	6023      	str	r3, [r4, #0]
 801067a:	e7f6      	b.n	801066a <_printf_i+0x196>
 801067c:	4616      	mov	r6, r2
 801067e:	e7bd      	b.n	80105fc <_printf_i+0x128>
 8010680:	6833      	ldr	r3, [r6, #0]
 8010682:	6825      	ldr	r5, [r4, #0]
 8010684:	6961      	ldr	r1, [r4, #20]
 8010686:	1d18      	adds	r0, r3, #4
 8010688:	6030      	str	r0, [r6, #0]
 801068a:	062e      	lsls	r6, r5, #24
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	d501      	bpl.n	8010694 <_printf_i+0x1c0>
 8010690:	6019      	str	r1, [r3, #0]
 8010692:	e002      	b.n	801069a <_printf_i+0x1c6>
 8010694:	0668      	lsls	r0, r5, #25
 8010696:	d5fb      	bpl.n	8010690 <_printf_i+0x1bc>
 8010698:	8019      	strh	r1, [r3, #0]
 801069a:	2300      	movs	r3, #0
 801069c:	6123      	str	r3, [r4, #16]
 801069e:	4616      	mov	r6, r2
 80106a0:	e7bc      	b.n	801061c <_printf_i+0x148>
 80106a2:	6833      	ldr	r3, [r6, #0]
 80106a4:	1d1a      	adds	r2, r3, #4
 80106a6:	6032      	str	r2, [r6, #0]
 80106a8:	681e      	ldr	r6, [r3, #0]
 80106aa:	6862      	ldr	r2, [r4, #4]
 80106ac:	2100      	movs	r1, #0
 80106ae:	4630      	mov	r0, r6
 80106b0:	f7ef fdae 	bl	8000210 <memchr>
 80106b4:	b108      	cbz	r0, 80106ba <_printf_i+0x1e6>
 80106b6:	1b80      	subs	r0, r0, r6
 80106b8:	6060      	str	r0, [r4, #4]
 80106ba:	6863      	ldr	r3, [r4, #4]
 80106bc:	6123      	str	r3, [r4, #16]
 80106be:	2300      	movs	r3, #0
 80106c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106c4:	e7aa      	b.n	801061c <_printf_i+0x148>
 80106c6:	6923      	ldr	r3, [r4, #16]
 80106c8:	4632      	mov	r2, r6
 80106ca:	4649      	mov	r1, r9
 80106cc:	4640      	mov	r0, r8
 80106ce:	47d0      	blx	sl
 80106d0:	3001      	adds	r0, #1
 80106d2:	d0ad      	beq.n	8010630 <_printf_i+0x15c>
 80106d4:	6823      	ldr	r3, [r4, #0]
 80106d6:	079b      	lsls	r3, r3, #30
 80106d8:	d413      	bmi.n	8010702 <_printf_i+0x22e>
 80106da:	68e0      	ldr	r0, [r4, #12]
 80106dc:	9b03      	ldr	r3, [sp, #12]
 80106de:	4298      	cmp	r0, r3
 80106e0:	bfb8      	it	lt
 80106e2:	4618      	movlt	r0, r3
 80106e4:	e7a6      	b.n	8010634 <_printf_i+0x160>
 80106e6:	2301      	movs	r3, #1
 80106e8:	4632      	mov	r2, r6
 80106ea:	4649      	mov	r1, r9
 80106ec:	4640      	mov	r0, r8
 80106ee:	47d0      	blx	sl
 80106f0:	3001      	adds	r0, #1
 80106f2:	d09d      	beq.n	8010630 <_printf_i+0x15c>
 80106f4:	3501      	adds	r5, #1
 80106f6:	68e3      	ldr	r3, [r4, #12]
 80106f8:	9903      	ldr	r1, [sp, #12]
 80106fa:	1a5b      	subs	r3, r3, r1
 80106fc:	42ab      	cmp	r3, r5
 80106fe:	dcf2      	bgt.n	80106e6 <_printf_i+0x212>
 8010700:	e7eb      	b.n	80106da <_printf_i+0x206>
 8010702:	2500      	movs	r5, #0
 8010704:	f104 0619 	add.w	r6, r4, #25
 8010708:	e7f5      	b.n	80106f6 <_printf_i+0x222>
 801070a:	bf00      	nop
 801070c:	08016a92 	.word	0x08016a92
 8010710:	08016aa3 	.word	0x08016aa3

08010714 <std>:
 8010714:	2300      	movs	r3, #0
 8010716:	b510      	push	{r4, lr}
 8010718:	4604      	mov	r4, r0
 801071a:	e9c0 3300 	strd	r3, r3, [r0]
 801071e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010722:	6083      	str	r3, [r0, #8]
 8010724:	8181      	strh	r1, [r0, #12]
 8010726:	6643      	str	r3, [r0, #100]	@ 0x64
 8010728:	81c2      	strh	r2, [r0, #14]
 801072a:	6183      	str	r3, [r0, #24]
 801072c:	4619      	mov	r1, r3
 801072e:	2208      	movs	r2, #8
 8010730:	305c      	adds	r0, #92	@ 0x5c
 8010732:	f000 fa4d 	bl	8010bd0 <memset>
 8010736:	4b0d      	ldr	r3, [pc, #52]	@ (801076c <std+0x58>)
 8010738:	6263      	str	r3, [r4, #36]	@ 0x24
 801073a:	4b0d      	ldr	r3, [pc, #52]	@ (8010770 <std+0x5c>)
 801073c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801073e:	4b0d      	ldr	r3, [pc, #52]	@ (8010774 <std+0x60>)
 8010740:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010742:	4b0d      	ldr	r3, [pc, #52]	@ (8010778 <std+0x64>)
 8010744:	6323      	str	r3, [r4, #48]	@ 0x30
 8010746:	4b0d      	ldr	r3, [pc, #52]	@ (801077c <std+0x68>)
 8010748:	6224      	str	r4, [r4, #32]
 801074a:	429c      	cmp	r4, r3
 801074c:	d006      	beq.n	801075c <std+0x48>
 801074e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010752:	4294      	cmp	r4, r2
 8010754:	d002      	beq.n	801075c <std+0x48>
 8010756:	33d0      	adds	r3, #208	@ 0xd0
 8010758:	429c      	cmp	r4, r3
 801075a:	d105      	bne.n	8010768 <std+0x54>
 801075c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010764:	f000 bab0 	b.w	8010cc8 <__retarget_lock_init_recursive>
 8010768:	bd10      	pop	{r4, pc}
 801076a:	bf00      	nop
 801076c:	08010a21 	.word	0x08010a21
 8010770:	08010a43 	.word	0x08010a43
 8010774:	08010a7b 	.word	0x08010a7b
 8010778:	08010a9f 	.word	0x08010a9f
 801077c:	200061e4 	.word	0x200061e4

08010780 <stdio_exit_handler>:
 8010780:	4a02      	ldr	r2, [pc, #8]	@ (801078c <stdio_exit_handler+0xc>)
 8010782:	4903      	ldr	r1, [pc, #12]	@ (8010790 <stdio_exit_handler+0x10>)
 8010784:	4803      	ldr	r0, [pc, #12]	@ (8010794 <stdio_exit_handler+0x14>)
 8010786:	f000 b869 	b.w	801085c <_fwalk_sglue>
 801078a:	bf00      	nop
 801078c:	20004f28 	.word	0x20004f28
 8010790:	080128a9 	.word	0x080128a9
 8010794:	20004f38 	.word	0x20004f38

08010798 <cleanup_stdio>:
 8010798:	6841      	ldr	r1, [r0, #4]
 801079a:	4b0c      	ldr	r3, [pc, #48]	@ (80107cc <cleanup_stdio+0x34>)
 801079c:	4299      	cmp	r1, r3
 801079e:	b510      	push	{r4, lr}
 80107a0:	4604      	mov	r4, r0
 80107a2:	d001      	beq.n	80107a8 <cleanup_stdio+0x10>
 80107a4:	f002 f880 	bl	80128a8 <_fflush_r>
 80107a8:	68a1      	ldr	r1, [r4, #8]
 80107aa:	4b09      	ldr	r3, [pc, #36]	@ (80107d0 <cleanup_stdio+0x38>)
 80107ac:	4299      	cmp	r1, r3
 80107ae:	d002      	beq.n	80107b6 <cleanup_stdio+0x1e>
 80107b0:	4620      	mov	r0, r4
 80107b2:	f002 f879 	bl	80128a8 <_fflush_r>
 80107b6:	68e1      	ldr	r1, [r4, #12]
 80107b8:	4b06      	ldr	r3, [pc, #24]	@ (80107d4 <cleanup_stdio+0x3c>)
 80107ba:	4299      	cmp	r1, r3
 80107bc:	d004      	beq.n	80107c8 <cleanup_stdio+0x30>
 80107be:	4620      	mov	r0, r4
 80107c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107c4:	f002 b870 	b.w	80128a8 <_fflush_r>
 80107c8:	bd10      	pop	{r4, pc}
 80107ca:	bf00      	nop
 80107cc:	200061e4 	.word	0x200061e4
 80107d0:	2000624c 	.word	0x2000624c
 80107d4:	200062b4 	.word	0x200062b4

080107d8 <global_stdio_init.part.0>:
 80107d8:	b510      	push	{r4, lr}
 80107da:	4b0b      	ldr	r3, [pc, #44]	@ (8010808 <global_stdio_init.part.0+0x30>)
 80107dc:	4c0b      	ldr	r4, [pc, #44]	@ (801080c <global_stdio_init.part.0+0x34>)
 80107de:	4a0c      	ldr	r2, [pc, #48]	@ (8010810 <global_stdio_init.part.0+0x38>)
 80107e0:	601a      	str	r2, [r3, #0]
 80107e2:	4620      	mov	r0, r4
 80107e4:	2200      	movs	r2, #0
 80107e6:	2104      	movs	r1, #4
 80107e8:	f7ff ff94 	bl	8010714 <std>
 80107ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80107f0:	2201      	movs	r2, #1
 80107f2:	2109      	movs	r1, #9
 80107f4:	f7ff ff8e 	bl	8010714 <std>
 80107f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80107fc:	2202      	movs	r2, #2
 80107fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010802:	2112      	movs	r1, #18
 8010804:	f7ff bf86 	b.w	8010714 <std>
 8010808:	2000631c 	.word	0x2000631c
 801080c:	200061e4 	.word	0x200061e4
 8010810:	08010781 	.word	0x08010781

08010814 <__sfp_lock_acquire>:
 8010814:	4801      	ldr	r0, [pc, #4]	@ (801081c <__sfp_lock_acquire+0x8>)
 8010816:	f000 ba58 	b.w	8010cca <__retarget_lock_acquire_recursive>
 801081a:	bf00      	nop
 801081c:	20006325 	.word	0x20006325

08010820 <__sfp_lock_release>:
 8010820:	4801      	ldr	r0, [pc, #4]	@ (8010828 <__sfp_lock_release+0x8>)
 8010822:	f000 ba53 	b.w	8010ccc <__retarget_lock_release_recursive>
 8010826:	bf00      	nop
 8010828:	20006325 	.word	0x20006325

0801082c <__sinit>:
 801082c:	b510      	push	{r4, lr}
 801082e:	4604      	mov	r4, r0
 8010830:	f7ff fff0 	bl	8010814 <__sfp_lock_acquire>
 8010834:	6a23      	ldr	r3, [r4, #32]
 8010836:	b11b      	cbz	r3, 8010840 <__sinit+0x14>
 8010838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801083c:	f7ff bff0 	b.w	8010820 <__sfp_lock_release>
 8010840:	4b04      	ldr	r3, [pc, #16]	@ (8010854 <__sinit+0x28>)
 8010842:	6223      	str	r3, [r4, #32]
 8010844:	4b04      	ldr	r3, [pc, #16]	@ (8010858 <__sinit+0x2c>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d1f5      	bne.n	8010838 <__sinit+0xc>
 801084c:	f7ff ffc4 	bl	80107d8 <global_stdio_init.part.0>
 8010850:	e7f2      	b.n	8010838 <__sinit+0xc>
 8010852:	bf00      	nop
 8010854:	08010799 	.word	0x08010799
 8010858:	2000631c 	.word	0x2000631c

0801085c <_fwalk_sglue>:
 801085c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010860:	4607      	mov	r7, r0
 8010862:	4688      	mov	r8, r1
 8010864:	4614      	mov	r4, r2
 8010866:	2600      	movs	r6, #0
 8010868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801086c:	f1b9 0901 	subs.w	r9, r9, #1
 8010870:	d505      	bpl.n	801087e <_fwalk_sglue+0x22>
 8010872:	6824      	ldr	r4, [r4, #0]
 8010874:	2c00      	cmp	r4, #0
 8010876:	d1f7      	bne.n	8010868 <_fwalk_sglue+0xc>
 8010878:	4630      	mov	r0, r6
 801087a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801087e:	89ab      	ldrh	r3, [r5, #12]
 8010880:	2b01      	cmp	r3, #1
 8010882:	d907      	bls.n	8010894 <_fwalk_sglue+0x38>
 8010884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010888:	3301      	adds	r3, #1
 801088a:	d003      	beq.n	8010894 <_fwalk_sglue+0x38>
 801088c:	4629      	mov	r1, r5
 801088e:	4638      	mov	r0, r7
 8010890:	47c0      	blx	r8
 8010892:	4306      	orrs	r6, r0
 8010894:	3568      	adds	r5, #104	@ 0x68
 8010896:	e7e9      	b.n	801086c <_fwalk_sglue+0x10>

08010898 <iprintf>:
 8010898:	b40f      	push	{r0, r1, r2, r3}
 801089a:	b507      	push	{r0, r1, r2, lr}
 801089c:	4906      	ldr	r1, [pc, #24]	@ (80108b8 <iprintf+0x20>)
 801089e:	ab04      	add	r3, sp, #16
 80108a0:	6808      	ldr	r0, [r1, #0]
 80108a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80108a6:	6881      	ldr	r1, [r0, #8]
 80108a8:	9301      	str	r3, [sp, #4]
 80108aa:	f001 fe61 	bl	8012570 <_vfiprintf_r>
 80108ae:	b003      	add	sp, #12
 80108b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80108b4:	b004      	add	sp, #16
 80108b6:	4770      	bx	lr
 80108b8:	20004f34 	.word	0x20004f34

080108bc <_puts_r>:
 80108bc:	6a03      	ldr	r3, [r0, #32]
 80108be:	b570      	push	{r4, r5, r6, lr}
 80108c0:	6884      	ldr	r4, [r0, #8]
 80108c2:	4605      	mov	r5, r0
 80108c4:	460e      	mov	r6, r1
 80108c6:	b90b      	cbnz	r3, 80108cc <_puts_r+0x10>
 80108c8:	f7ff ffb0 	bl	801082c <__sinit>
 80108cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80108ce:	07db      	lsls	r3, r3, #31
 80108d0:	d405      	bmi.n	80108de <_puts_r+0x22>
 80108d2:	89a3      	ldrh	r3, [r4, #12]
 80108d4:	0598      	lsls	r0, r3, #22
 80108d6:	d402      	bmi.n	80108de <_puts_r+0x22>
 80108d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80108da:	f000 f9f6 	bl	8010cca <__retarget_lock_acquire_recursive>
 80108de:	89a3      	ldrh	r3, [r4, #12]
 80108e0:	0719      	lsls	r1, r3, #28
 80108e2:	d502      	bpl.n	80108ea <_puts_r+0x2e>
 80108e4:	6923      	ldr	r3, [r4, #16]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d135      	bne.n	8010956 <_puts_r+0x9a>
 80108ea:	4621      	mov	r1, r4
 80108ec:	4628      	mov	r0, r5
 80108ee:	f000 f919 	bl	8010b24 <__swsetup_r>
 80108f2:	b380      	cbz	r0, 8010956 <_puts_r+0x9a>
 80108f4:	f04f 35ff 	mov.w	r5, #4294967295
 80108f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80108fa:	07da      	lsls	r2, r3, #31
 80108fc:	d405      	bmi.n	801090a <_puts_r+0x4e>
 80108fe:	89a3      	ldrh	r3, [r4, #12]
 8010900:	059b      	lsls	r3, r3, #22
 8010902:	d402      	bmi.n	801090a <_puts_r+0x4e>
 8010904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010906:	f000 f9e1 	bl	8010ccc <__retarget_lock_release_recursive>
 801090a:	4628      	mov	r0, r5
 801090c:	bd70      	pop	{r4, r5, r6, pc}
 801090e:	2b00      	cmp	r3, #0
 8010910:	da04      	bge.n	801091c <_puts_r+0x60>
 8010912:	69a2      	ldr	r2, [r4, #24]
 8010914:	429a      	cmp	r2, r3
 8010916:	dc17      	bgt.n	8010948 <_puts_r+0x8c>
 8010918:	290a      	cmp	r1, #10
 801091a:	d015      	beq.n	8010948 <_puts_r+0x8c>
 801091c:	6823      	ldr	r3, [r4, #0]
 801091e:	1c5a      	adds	r2, r3, #1
 8010920:	6022      	str	r2, [r4, #0]
 8010922:	7019      	strb	r1, [r3, #0]
 8010924:	68a3      	ldr	r3, [r4, #8]
 8010926:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801092a:	3b01      	subs	r3, #1
 801092c:	60a3      	str	r3, [r4, #8]
 801092e:	2900      	cmp	r1, #0
 8010930:	d1ed      	bne.n	801090e <_puts_r+0x52>
 8010932:	2b00      	cmp	r3, #0
 8010934:	da11      	bge.n	801095a <_puts_r+0x9e>
 8010936:	4622      	mov	r2, r4
 8010938:	210a      	movs	r1, #10
 801093a:	4628      	mov	r0, r5
 801093c:	f000 f8b3 	bl	8010aa6 <__swbuf_r>
 8010940:	3001      	adds	r0, #1
 8010942:	d0d7      	beq.n	80108f4 <_puts_r+0x38>
 8010944:	250a      	movs	r5, #10
 8010946:	e7d7      	b.n	80108f8 <_puts_r+0x3c>
 8010948:	4622      	mov	r2, r4
 801094a:	4628      	mov	r0, r5
 801094c:	f000 f8ab 	bl	8010aa6 <__swbuf_r>
 8010950:	3001      	adds	r0, #1
 8010952:	d1e7      	bne.n	8010924 <_puts_r+0x68>
 8010954:	e7ce      	b.n	80108f4 <_puts_r+0x38>
 8010956:	3e01      	subs	r6, #1
 8010958:	e7e4      	b.n	8010924 <_puts_r+0x68>
 801095a:	6823      	ldr	r3, [r4, #0]
 801095c:	1c5a      	adds	r2, r3, #1
 801095e:	6022      	str	r2, [r4, #0]
 8010960:	220a      	movs	r2, #10
 8010962:	701a      	strb	r2, [r3, #0]
 8010964:	e7ee      	b.n	8010944 <_puts_r+0x88>
	...

08010968 <puts>:
 8010968:	4b02      	ldr	r3, [pc, #8]	@ (8010974 <puts+0xc>)
 801096a:	4601      	mov	r1, r0
 801096c:	6818      	ldr	r0, [r3, #0]
 801096e:	f7ff bfa5 	b.w	80108bc <_puts_r>
 8010972:	bf00      	nop
 8010974:	20004f34 	.word	0x20004f34

08010978 <sniprintf>:
 8010978:	b40c      	push	{r2, r3}
 801097a:	b530      	push	{r4, r5, lr}
 801097c:	4b17      	ldr	r3, [pc, #92]	@ (80109dc <sniprintf+0x64>)
 801097e:	1e0c      	subs	r4, r1, #0
 8010980:	681d      	ldr	r5, [r3, #0]
 8010982:	b09d      	sub	sp, #116	@ 0x74
 8010984:	da08      	bge.n	8010998 <sniprintf+0x20>
 8010986:	238b      	movs	r3, #139	@ 0x8b
 8010988:	602b      	str	r3, [r5, #0]
 801098a:	f04f 30ff 	mov.w	r0, #4294967295
 801098e:	b01d      	add	sp, #116	@ 0x74
 8010990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010994:	b002      	add	sp, #8
 8010996:	4770      	bx	lr
 8010998:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801099c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80109a0:	bf14      	ite	ne
 80109a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80109a6:	4623      	moveq	r3, r4
 80109a8:	9304      	str	r3, [sp, #16]
 80109aa:	9307      	str	r3, [sp, #28]
 80109ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80109b0:	9002      	str	r0, [sp, #8]
 80109b2:	9006      	str	r0, [sp, #24]
 80109b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80109b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80109ba:	ab21      	add	r3, sp, #132	@ 0x84
 80109bc:	a902      	add	r1, sp, #8
 80109be:	4628      	mov	r0, r5
 80109c0:	9301      	str	r3, [sp, #4]
 80109c2:	f001 fcaf 	bl	8012324 <_svfiprintf_r>
 80109c6:	1c43      	adds	r3, r0, #1
 80109c8:	bfbc      	itt	lt
 80109ca:	238b      	movlt	r3, #139	@ 0x8b
 80109cc:	602b      	strlt	r3, [r5, #0]
 80109ce:	2c00      	cmp	r4, #0
 80109d0:	d0dd      	beq.n	801098e <sniprintf+0x16>
 80109d2:	9b02      	ldr	r3, [sp, #8]
 80109d4:	2200      	movs	r2, #0
 80109d6:	701a      	strb	r2, [r3, #0]
 80109d8:	e7d9      	b.n	801098e <sniprintf+0x16>
 80109da:	bf00      	nop
 80109dc:	20004f34 	.word	0x20004f34

080109e0 <siprintf>:
 80109e0:	b40e      	push	{r1, r2, r3}
 80109e2:	b500      	push	{lr}
 80109e4:	b09c      	sub	sp, #112	@ 0x70
 80109e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80109e8:	9002      	str	r0, [sp, #8]
 80109ea:	9006      	str	r0, [sp, #24]
 80109ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80109f0:	4809      	ldr	r0, [pc, #36]	@ (8010a18 <siprintf+0x38>)
 80109f2:	9107      	str	r1, [sp, #28]
 80109f4:	9104      	str	r1, [sp, #16]
 80109f6:	4909      	ldr	r1, [pc, #36]	@ (8010a1c <siprintf+0x3c>)
 80109f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80109fc:	9105      	str	r1, [sp, #20]
 80109fe:	6800      	ldr	r0, [r0, #0]
 8010a00:	9301      	str	r3, [sp, #4]
 8010a02:	a902      	add	r1, sp, #8
 8010a04:	f001 fc8e 	bl	8012324 <_svfiprintf_r>
 8010a08:	9b02      	ldr	r3, [sp, #8]
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	701a      	strb	r2, [r3, #0]
 8010a0e:	b01c      	add	sp, #112	@ 0x70
 8010a10:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a14:	b003      	add	sp, #12
 8010a16:	4770      	bx	lr
 8010a18:	20004f34 	.word	0x20004f34
 8010a1c:	ffff0208 	.word	0xffff0208

08010a20 <__sread>:
 8010a20:	b510      	push	{r4, lr}
 8010a22:	460c      	mov	r4, r1
 8010a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a28:	f000 f900 	bl	8010c2c <_read_r>
 8010a2c:	2800      	cmp	r0, #0
 8010a2e:	bfab      	itete	ge
 8010a30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010a32:	89a3      	ldrhlt	r3, [r4, #12]
 8010a34:	181b      	addge	r3, r3, r0
 8010a36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010a3a:	bfac      	ite	ge
 8010a3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010a3e:	81a3      	strhlt	r3, [r4, #12]
 8010a40:	bd10      	pop	{r4, pc}

08010a42 <__swrite>:
 8010a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a46:	461f      	mov	r7, r3
 8010a48:	898b      	ldrh	r3, [r1, #12]
 8010a4a:	05db      	lsls	r3, r3, #23
 8010a4c:	4605      	mov	r5, r0
 8010a4e:	460c      	mov	r4, r1
 8010a50:	4616      	mov	r6, r2
 8010a52:	d505      	bpl.n	8010a60 <__swrite+0x1e>
 8010a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a58:	2302      	movs	r3, #2
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	f000 f8d4 	bl	8010c08 <_lseek_r>
 8010a60:	89a3      	ldrh	r3, [r4, #12]
 8010a62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010a66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010a6a:	81a3      	strh	r3, [r4, #12]
 8010a6c:	4632      	mov	r2, r6
 8010a6e:	463b      	mov	r3, r7
 8010a70:	4628      	mov	r0, r5
 8010a72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a76:	f000 b8eb 	b.w	8010c50 <_write_r>

08010a7a <__sseek>:
 8010a7a:	b510      	push	{r4, lr}
 8010a7c:	460c      	mov	r4, r1
 8010a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a82:	f000 f8c1 	bl	8010c08 <_lseek_r>
 8010a86:	1c43      	adds	r3, r0, #1
 8010a88:	89a3      	ldrh	r3, [r4, #12]
 8010a8a:	bf15      	itete	ne
 8010a8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010a8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010a92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010a96:	81a3      	strheq	r3, [r4, #12]
 8010a98:	bf18      	it	ne
 8010a9a:	81a3      	strhne	r3, [r4, #12]
 8010a9c:	bd10      	pop	{r4, pc}

08010a9e <__sclose>:
 8010a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010aa2:	f000 b8a1 	b.w	8010be8 <_close_r>

08010aa6 <__swbuf_r>:
 8010aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aa8:	460e      	mov	r6, r1
 8010aaa:	4614      	mov	r4, r2
 8010aac:	4605      	mov	r5, r0
 8010aae:	b118      	cbz	r0, 8010ab8 <__swbuf_r+0x12>
 8010ab0:	6a03      	ldr	r3, [r0, #32]
 8010ab2:	b90b      	cbnz	r3, 8010ab8 <__swbuf_r+0x12>
 8010ab4:	f7ff feba 	bl	801082c <__sinit>
 8010ab8:	69a3      	ldr	r3, [r4, #24]
 8010aba:	60a3      	str	r3, [r4, #8]
 8010abc:	89a3      	ldrh	r3, [r4, #12]
 8010abe:	071a      	lsls	r2, r3, #28
 8010ac0:	d501      	bpl.n	8010ac6 <__swbuf_r+0x20>
 8010ac2:	6923      	ldr	r3, [r4, #16]
 8010ac4:	b943      	cbnz	r3, 8010ad8 <__swbuf_r+0x32>
 8010ac6:	4621      	mov	r1, r4
 8010ac8:	4628      	mov	r0, r5
 8010aca:	f000 f82b 	bl	8010b24 <__swsetup_r>
 8010ace:	b118      	cbz	r0, 8010ad8 <__swbuf_r+0x32>
 8010ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8010ad4:	4638      	mov	r0, r7
 8010ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ad8:	6823      	ldr	r3, [r4, #0]
 8010ada:	6922      	ldr	r2, [r4, #16]
 8010adc:	1a98      	subs	r0, r3, r2
 8010ade:	6963      	ldr	r3, [r4, #20]
 8010ae0:	b2f6      	uxtb	r6, r6
 8010ae2:	4283      	cmp	r3, r0
 8010ae4:	4637      	mov	r7, r6
 8010ae6:	dc05      	bgt.n	8010af4 <__swbuf_r+0x4e>
 8010ae8:	4621      	mov	r1, r4
 8010aea:	4628      	mov	r0, r5
 8010aec:	f001 fedc 	bl	80128a8 <_fflush_r>
 8010af0:	2800      	cmp	r0, #0
 8010af2:	d1ed      	bne.n	8010ad0 <__swbuf_r+0x2a>
 8010af4:	68a3      	ldr	r3, [r4, #8]
 8010af6:	3b01      	subs	r3, #1
 8010af8:	60a3      	str	r3, [r4, #8]
 8010afa:	6823      	ldr	r3, [r4, #0]
 8010afc:	1c5a      	adds	r2, r3, #1
 8010afe:	6022      	str	r2, [r4, #0]
 8010b00:	701e      	strb	r6, [r3, #0]
 8010b02:	6962      	ldr	r2, [r4, #20]
 8010b04:	1c43      	adds	r3, r0, #1
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d004      	beq.n	8010b14 <__swbuf_r+0x6e>
 8010b0a:	89a3      	ldrh	r3, [r4, #12]
 8010b0c:	07db      	lsls	r3, r3, #31
 8010b0e:	d5e1      	bpl.n	8010ad4 <__swbuf_r+0x2e>
 8010b10:	2e0a      	cmp	r6, #10
 8010b12:	d1df      	bne.n	8010ad4 <__swbuf_r+0x2e>
 8010b14:	4621      	mov	r1, r4
 8010b16:	4628      	mov	r0, r5
 8010b18:	f001 fec6 	bl	80128a8 <_fflush_r>
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	d0d9      	beq.n	8010ad4 <__swbuf_r+0x2e>
 8010b20:	e7d6      	b.n	8010ad0 <__swbuf_r+0x2a>
	...

08010b24 <__swsetup_r>:
 8010b24:	b538      	push	{r3, r4, r5, lr}
 8010b26:	4b29      	ldr	r3, [pc, #164]	@ (8010bcc <__swsetup_r+0xa8>)
 8010b28:	4605      	mov	r5, r0
 8010b2a:	6818      	ldr	r0, [r3, #0]
 8010b2c:	460c      	mov	r4, r1
 8010b2e:	b118      	cbz	r0, 8010b38 <__swsetup_r+0x14>
 8010b30:	6a03      	ldr	r3, [r0, #32]
 8010b32:	b90b      	cbnz	r3, 8010b38 <__swsetup_r+0x14>
 8010b34:	f7ff fe7a 	bl	801082c <__sinit>
 8010b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b3c:	0719      	lsls	r1, r3, #28
 8010b3e:	d422      	bmi.n	8010b86 <__swsetup_r+0x62>
 8010b40:	06da      	lsls	r2, r3, #27
 8010b42:	d407      	bmi.n	8010b54 <__swsetup_r+0x30>
 8010b44:	2209      	movs	r2, #9
 8010b46:	602a      	str	r2, [r5, #0]
 8010b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b4c:	81a3      	strh	r3, [r4, #12]
 8010b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8010b52:	e033      	b.n	8010bbc <__swsetup_r+0x98>
 8010b54:	0758      	lsls	r0, r3, #29
 8010b56:	d512      	bpl.n	8010b7e <__swsetup_r+0x5a>
 8010b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b5a:	b141      	cbz	r1, 8010b6e <__swsetup_r+0x4a>
 8010b5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b60:	4299      	cmp	r1, r3
 8010b62:	d002      	beq.n	8010b6a <__swsetup_r+0x46>
 8010b64:	4628      	mov	r0, r5
 8010b66:	f000 feff 	bl	8011968 <_free_r>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b6e:	89a3      	ldrh	r3, [r4, #12]
 8010b70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010b74:	81a3      	strh	r3, [r4, #12]
 8010b76:	2300      	movs	r3, #0
 8010b78:	6063      	str	r3, [r4, #4]
 8010b7a:	6923      	ldr	r3, [r4, #16]
 8010b7c:	6023      	str	r3, [r4, #0]
 8010b7e:	89a3      	ldrh	r3, [r4, #12]
 8010b80:	f043 0308 	orr.w	r3, r3, #8
 8010b84:	81a3      	strh	r3, [r4, #12]
 8010b86:	6923      	ldr	r3, [r4, #16]
 8010b88:	b94b      	cbnz	r3, 8010b9e <__swsetup_r+0x7a>
 8010b8a:	89a3      	ldrh	r3, [r4, #12]
 8010b8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b94:	d003      	beq.n	8010b9e <__swsetup_r+0x7a>
 8010b96:	4621      	mov	r1, r4
 8010b98:	4628      	mov	r0, r5
 8010b9a:	f001 fed3 	bl	8012944 <__smakebuf_r>
 8010b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ba2:	f013 0201 	ands.w	r2, r3, #1
 8010ba6:	d00a      	beq.n	8010bbe <__swsetup_r+0x9a>
 8010ba8:	2200      	movs	r2, #0
 8010baa:	60a2      	str	r2, [r4, #8]
 8010bac:	6962      	ldr	r2, [r4, #20]
 8010bae:	4252      	negs	r2, r2
 8010bb0:	61a2      	str	r2, [r4, #24]
 8010bb2:	6922      	ldr	r2, [r4, #16]
 8010bb4:	b942      	cbnz	r2, 8010bc8 <__swsetup_r+0xa4>
 8010bb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010bba:	d1c5      	bne.n	8010b48 <__swsetup_r+0x24>
 8010bbc:	bd38      	pop	{r3, r4, r5, pc}
 8010bbe:	0799      	lsls	r1, r3, #30
 8010bc0:	bf58      	it	pl
 8010bc2:	6962      	ldrpl	r2, [r4, #20]
 8010bc4:	60a2      	str	r2, [r4, #8]
 8010bc6:	e7f4      	b.n	8010bb2 <__swsetup_r+0x8e>
 8010bc8:	2000      	movs	r0, #0
 8010bca:	e7f7      	b.n	8010bbc <__swsetup_r+0x98>
 8010bcc:	20004f34 	.word	0x20004f34

08010bd0 <memset>:
 8010bd0:	4402      	add	r2, r0
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d100      	bne.n	8010bda <memset+0xa>
 8010bd8:	4770      	bx	lr
 8010bda:	f803 1b01 	strb.w	r1, [r3], #1
 8010bde:	e7f9      	b.n	8010bd4 <memset+0x4>

08010be0 <_localeconv_r>:
 8010be0:	4800      	ldr	r0, [pc, #0]	@ (8010be4 <_localeconv_r+0x4>)
 8010be2:	4770      	bx	lr
 8010be4:	20005074 	.word	0x20005074

08010be8 <_close_r>:
 8010be8:	b538      	push	{r3, r4, r5, lr}
 8010bea:	4d06      	ldr	r5, [pc, #24]	@ (8010c04 <_close_r+0x1c>)
 8010bec:	2300      	movs	r3, #0
 8010bee:	4604      	mov	r4, r0
 8010bf0:	4608      	mov	r0, r1
 8010bf2:	602b      	str	r3, [r5, #0]
 8010bf4:	f7f3 ffbe 	bl	8004b74 <_close>
 8010bf8:	1c43      	adds	r3, r0, #1
 8010bfa:	d102      	bne.n	8010c02 <_close_r+0x1a>
 8010bfc:	682b      	ldr	r3, [r5, #0]
 8010bfe:	b103      	cbz	r3, 8010c02 <_close_r+0x1a>
 8010c00:	6023      	str	r3, [r4, #0]
 8010c02:	bd38      	pop	{r3, r4, r5, pc}
 8010c04:	20006320 	.word	0x20006320

08010c08 <_lseek_r>:
 8010c08:	b538      	push	{r3, r4, r5, lr}
 8010c0a:	4d07      	ldr	r5, [pc, #28]	@ (8010c28 <_lseek_r+0x20>)
 8010c0c:	4604      	mov	r4, r0
 8010c0e:	4608      	mov	r0, r1
 8010c10:	4611      	mov	r1, r2
 8010c12:	2200      	movs	r2, #0
 8010c14:	602a      	str	r2, [r5, #0]
 8010c16:	461a      	mov	r2, r3
 8010c18:	f7f3 ffd3 	bl	8004bc2 <_lseek>
 8010c1c:	1c43      	adds	r3, r0, #1
 8010c1e:	d102      	bne.n	8010c26 <_lseek_r+0x1e>
 8010c20:	682b      	ldr	r3, [r5, #0]
 8010c22:	b103      	cbz	r3, 8010c26 <_lseek_r+0x1e>
 8010c24:	6023      	str	r3, [r4, #0]
 8010c26:	bd38      	pop	{r3, r4, r5, pc}
 8010c28:	20006320 	.word	0x20006320

08010c2c <_read_r>:
 8010c2c:	b538      	push	{r3, r4, r5, lr}
 8010c2e:	4d07      	ldr	r5, [pc, #28]	@ (8010c4c <_read_r+0x20>)
 8010c30:	4604      	mov	r4, r0
 8010c32:	4608      	mov	r0, r1
 8010c34:	4611      	mov	r1, r2
 8010c36:	2200      	movs	r2, #0
 8010c38:	602a      	str	r2, [r5, #0]
 8010c3a:	461a      	mov	r2, r3
 8010c3c:	f7f3 ff61 	bl	8004b02 <_read>
 8010c40:	1c43      	adds	r3, r0, #1
 8010c42:	d102      	bne.n	8010c4a <_read_r+0x1e>
 8010c44:	682b      	ldr	r3, [r5, #0]
 8010c46:	b103      	cbz	r3, 8010c4a <_read_r+0x1e>
 8010c48:	6023      	str	r3, [r4, #0]
 8010c4a:	bd38      	pop	{r3, r4, r5, pc}
 8010c4c:	20006320 	.word	0x20006320

08010c50 <_write_r>:
 8010c50:	b538      	push	{r3, r4, r5, lr}
 8010c52:	4d07      	ldr	r5, [pc, #28]	@ (8010c70 <_write_r+0x20>)
 8010c54:	4604      	mov	r4, r0
 8010c56:	4608      	mov	r0, r1
 8010c58:	4611      	mov	r1, r2
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	602a      	str	r2, [r5, #0]
 8010c5e:	461a      	mov	r2, r3
 8010c60:	f7f3 ff6c 	bl	8004b3c <_write>
 8010c64:	1c43      	adds	r3, r0, #1
 8010c66:	d102      	bne.n	8010c6e <_write_r+0x1e>
 8010c68:	682b      	ldr	r3, [r5, #0]
 8010c6a:	b103      	cbz	r3, 8010c6e <_write_r+0x1e>
 8010c6c:	6023      	str	r3, [r4, #0]
 8010c6e:	bd38      	pop	{r3, r4, r5, pc}
 8010c70:	20006320 	.word	0x20006320

08010c74 <__errno>:
 8010c74:	4b01      	ldr	r3, [pc, #4]	@ (8010c7c <__errno+0x8>)
 8010c76:	6818      	ldr	r0, [r3, #0]
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	20004f34 	.word	0x20004f34

08010c80 <__libc_init_array>:
 8010c80:	b570      	push	{r4, r5, r6, lr}
 8010c82:	4d0d      	ldr	r5, [pc, #52]	@ (8010cb8 <__libc_init_array+0x38>)
 8010c84:	4c0d      	ldr	r4, [pc, #52]	@ (8010cbc <__libc_init_array+0x3c>)
 8010c86:	1b64      	subs	r4, r4, r5
 8010c88:	10a4      	asrs	r4, r4, #2
 8010c8a:	2600      	movs	r6, #0
 8010c8c:	42a6      	cmp	r6, r4
 8010c8e:	d109      	bne.n	8010ca4 <__libc_init_array+0x24>
 8010c90:	4d0b      	ldr	r5, [pc, #44]	@ (8010cc0 <__libc_init_array+0x40>)
 8010c92:	4c0c      	ldr	r4, [pc, #48]	@ (8010cc4 <__libc_init_array+0x44>)
 8010c94:	f001 ffd2 	bl	8012c3c <_init>
 8010c98:	1b64      	subs	r4, r4, r5
 8010c9a:	10a4      	asrs	r4, r4, #2
 8010c9c:	2600      	movs	r6, #0
 8010c9e:	42a6      	cmp	r6, r4
 8010ca0:	d105      	bne.n	8010cae <__libc_init_array+0x2e>
 8010ca2:	bd70      	pop	{r4, r5, r6, pc}
 8010ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ca8:	4798      	blx	r3
 8010caa:	3601      	adds	r6, #1
 8010cac:	e7ee      	b.n	8010c8c <__libc_init_array+0xc>
 8010cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cb2:	4798      	blx	r3
 8010cb4:	3601      	adds	r6, #1
 8010cb6:	e7f2      	b.n	8010c9e <__libc_init_array+0x1e>
 8010cb8:	08016df8 	.word	0x08016df8
 8010cbc:	08016df8 	.word	0x08016df8
 8010cc0:	08016df8 	.word	0x08016df8
 8010cc4:	08016dfc 	.word	0x08016dfc

08010cc8 <__retarget_lock_init_recursive>:
 8010cc8:	4770      	bx	lr

08010cca <__retarget_lock_acquire_recursive>:
 8010cca:	4770      	bx	lr

08010ccc <__retarget_lock_release_recursive>:
 8010ccc:	4770      	bx	lr

08010cce <quorem>:
 8010cce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cd2:	6903      	ldr	r3, [r0, #16]
 8010cd4:	690c      	ldr	r4, [r1, #16]
 8010cd6:	42a3      	cmp	r3, r4
 8010cd8:	4607      	mov	r7, r0
 8010cda:	db7e      	blt.n	8010dda <quorem+0x10c>
 8010cdc:	3c01      	subs	r4, #1
 8010cde:	f101 0814 	add.w	r8, r1, #20
 8010ce2:	00a3      	lsls	r3, r4, #2
 8010ce4:	f100 0514 	add.w	r5, r0, #20
 8010ce8:	9300      	str	r3, [sp, #0]
 8010cea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010cee:	9301      	str	r3, [sp, #4]
 8010cf0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010cf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010d00:	fbb2 f6f3 	udiv	r6, r2, r3
 8010d04:	d32e      	bcc.n	8010d64 <quorem+0x96>
 8010d06:	f04f 0a00 	mov.w	sl, #0
 8010d0a:	46c4      	mov	ip, r8
 8010d0c:	46ae      	mov	lr, r5
 8010d0e:	46d3      	mov	fp, sl
 8010d10:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010d14:	b298      	uxth	r0, r3
 8010d16:	fb06 a000 	mla	r0, r6, r0, sl
 8010d1a:	0c02      	lsrs	r2, r0, #16
 8010d1c:	0c1b      	lsrs	r3, r3, #16
 8010d1e:	fb06 2303 	mla	r3, r6, r3, r2
 8010d22:	f8de 2000 	ldr.w	r2, [lr]
 8010d26:	b280      	uxth	r0, r0
 8010d28:	b292      	uxth	r2, r2
 8010d2a:	1a12      	subs	r2, r2, r0
 8010d2c:	445a      	add	r2, fp
 8010d2e:	f8de 0000 	ldr.w	r0, [lr]
 8010d32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010d3c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8010d40:	b292      	uxth	r2, r2
 8010d42:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010d46:	45e1      	cmp	r9, ip
 8010d48:	f84e 2b04 	str.w	r2, [lr], #4
 8010d4c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8010d50:	d2de      	bcs.n	8010d10 <quorem+0x42>
 8010d52:	9b00      	ldr	r3, [sp, #0]
 8010d54:	58eb      	ldr	r3, [r5, r3]
 8010d56:	b92b      	cbnz	r3, 8010d64 <quorem+0x96>
 8010d58:	9b01      	ldr	r3, [sp, #4]
 8010d5a:	3b04      	subs	r3, #4
 8010d5c:	429d      	cmp	r5, r3
 8010d5e:	461a      	mov	r2, r3
 8010d60:	d32f      	bcc.n	8010dc2 <quorem+0xf4>
 8010d62:	613c      	str	r4, [r7, #16]
 8010d64:	4638      	mov	r0, r7
 8010d66:	f001 f979 	bl	801205c <__mcmp>
 8010d6a:	2800      	cmp	r0, #0
 8010d6c:	db25      	blt.n	8010dba <quorem+0xec>
 8010d6e:	4629      	mov	r1, r5
 8010d70:	2000      	movs	r0, #0
 8010d72:	f858 2b04 	ldr.w	r2, [r8], #4
 8010d76:	f8d1 c000 	ldr.w	ip, [r1]
 8010d7a:	fa1f fe82 	uxth.w	lr, r2
 8010d7e:	fa1f f38c 	uxth.w	r3, ip
 8010d82:	eba3 030e 	sub.w	r3, r3, lr
 8010d86:	4403      	add	r3, r0
 8010d88:	0c12      	lsrs	r2, r2, #16
 8010d8a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8010d8e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010d98:	45c1      	cmp	r9, r8
 8010d9a:	f841 3b04 	str.w	r3, [r1], #4
 8010d9e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8010da2:	d2e6      	bcs.n	8010d72 <quorem+0xa4>
 8010da4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010da8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010dac:	b922      	cbnz	r2, 8010db8 <quorem+0xea>
 8010dae:	3b04      	subs	r3, #4
 8010db0:	429d      	cmp	r5, r3
 8010db2:	461a      	mov	r2, r3
 8010db4:	d30b      	bcc.n	8010dce <quorem+0x100>
 8010db6:	613c      	str	r4, [r7, #16]
 8010db8:	3601      	adds	r6, #1
 8010dba:	4630      	mov	r0, r6
 8010dbc:	b003      	add	sp, #12
 8010dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010dc2:	6812      	ldr	r2, [r2, #0]
 8010dc4:	3b04      	subs	r3, #4
 8010dc6:	2a00      	cmp	r2, #0
 8010dc8:	d1cb      	bne.n	8010d62 <quorem+0x94>
 8010dca:	3c01      	subs	r4, #1
 8010dcc:	e7c6      	b.n	8010d5c <quorem+0x8e>
 8010dce:	6812      	ldr	r2, [r2, #0]
 8010dd0:	3b04      	subs	r3, #4
 8010dd2:	2a00      	cmp	r2, #0
 8010dd4:	d1ef      	bne.n	8010db6 <quorem+0xe8>
 8010dd6:	3c01      	subs	r4, #1
 8010dd8:	e7ea      	b.n	8010db0 <quorem+0xe2>
 8010dda:	2000      	movs	r0, #0
 8010ddc:	e7ee      	b.n	8010dbc <quorem+0xee>
	...

08010de0 <_dtoa_r>:
 8010de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de4:	69c7      	ldr	r7, [r0, #28]
 8010de6:	b099      	sub	sp, #100	@ 0x64
 8010de8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010dec:	ec55 4b10 	vmov	r4, r5, d0
 8010df0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8010df2:	9109      	str	r1, [sp, #36]	@ 0x24
 8010df4:	4683      	mov	fp, r0
 8010df6:	920e      	str	r2, [sp, #56]	@ 0x38
 8010df8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010dfa:	b97f      	cbnz	r7, 8010e1c <_dtoa_r+0x3c>
 8010dfc:	2010      	movs	r0, #16
 8010dfe:	f000 fdfd 	bl	80119fc <malloc>
 8010e02:	4602      	mov	r2, r0
 8010e04:	f8cb 001c 	str.w	r0, [fp, #28]
 8010e08:	b920      	cbnz	r0, 8010e14 <_dtoa_r+0x34>
 8010e0a:	4ba7      	ldr	r3, [pc, #668]	@ (80110a8 <_dtoa_r+0x2c8>)
 8010e0c:	21ef      	movs	r1, #239	@ 0xef
 8010e0e:	48a7      	ldr	r0, [pc, #668]	@ (80110ac <_dtoa_r+0x2cc>)
 8010e10:	f001 fe2e 	bl	8012a70 <__assert_func>
 8010e14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010e18:	6007      	str	r7, [r0, #0]
 8010e1a:	60c7      	str	r7, [r0, #12]
 8010e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e20:	6819      	ldr	r1, [r3, #0]
 8010e22:	b159      	cbz	r1, 8010e3c <_dtoa_r+0x5c>
 8010e24:	685a      	ldr	r2, [r3, #4]
 8010e26:	604a      	str	r2, [r1, #4]
 8010e28:	2301      	movs	r3, #1
 8010e2a:	4093      	lsls	r3, r2
 8010e2c:	608b      	str	r3, [r1, #8]
 8010e2e:	4658      	mov	r0, fp
 8010e30:	f000 feda 	bl	8011be8 <_Bfree>
 8010e34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010e38:	2200      	movs	r2, #0
 8010e3a:	601a      	str	r2, [r3, #0]
 8010e3c:	1e2b      	subs	r3, r5, #0
 8010e3e:	bfb9      	ittee	lt
 8010e40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010e44:	9303      	strlt	r3, [sp, #12]
 8010e46:	2300      	movge	r3, #0
 8010e48:	6033      	strge	r3, [r6, #0]
 8010e4a:	9f03      	ldr	r7, [sp, #12]
 8010e4c:	4b98      	ldr	r3, [pc, #608]	@ (80110b0 <_dtoa_r+0x2d0>)
 8010e4e:	bfbc      	itt	lt
 8010e50:	2201      	movlt	r2, #1
 8010e52:	6032      	strlt	r2, [r6, #0]
 8010e54:	43bb      	bics	r3, r7
 8010e56:	d112      	bne.n	8010e7e <_dtoa_r+0x9e>
 8010e58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010e5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010e5e:	6013      	str	r3, [r2, #0]
 8010e60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010e64:	4323      	orrs	r3, r4
 8010e66:	f000 854d 	beq.w	8011904 <_dtoa_r+0xb24>
 8010e6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80110c4 <_dtoa_r+0x2e4>
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	f000 854f 	beq.w	8011914 <_dtoa_r+0xb34>
 8010e76:	f10a 0303 	add.w	r3, sl, #3
 8010e7a:	f000 bd49 	b.w	8011910 <_dtoa_r+0xb30>
 8010e7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e82:	2200      	movs	r2, #0
 8010e84:	ec51 0b17 	vmov	r0, r1, d7
 8010e88:	2300      	movs	r3, #0
 8010e8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8010e8e:	f7ef fe3b 	bl	8000b08 <__aeabi_dcmpeq>
 8010e92:	4680      	mov	r8, r0
 8010e94:	b158      	cbz	r0, 8010eae <_dtoa_r+0xce>
 8010e96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010e98:	2301      	movs	r3, #1
 8010e9a:	6013      	str	r3, [r2, #0]
 8010e9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010e9e:	b113      	cbz	r3, 8010ea6 <_dtoa_r+0xc6>
 8010ea0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010ea2:	4b84      	ldr	r3, [pc, #528]	@ (80110b4 <_dtoa_r+0x2d4>)
 8010ea4:	6013      	str	r3, [r2, #0]
 8010ea6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80110c8 <_dtoa_r+0x2e8>
 8010eaa:	f000 bd33 	b.w	8011914 <_dtoa_r+0xb34>
 8010eae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8010eb2:	aa16      	add	r2, sp, #88	@ 0x58
 8010eb4:	a917      	add	r1, sp, #92	@ 0x5c
 8010eb6:	4658      	mov	r0, fp
 8010eb8:	f001 f980 	bl	80121bc <__d2b>
 8010ebc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8010ec0:	4681      	mov	r9, r0
 8010ec2:	2e00      	cmp	r6, #0
 8010ec4:	d077      	beq.n	8010fb6 <_dtoa_r+0x1d6>
 8010ec6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010ec8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010ecc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010ed0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010ed4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010ed8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010edc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	4b74      	ldr	r3, [pc, #464]	@ (80110b8 <_dtoa_r+0x2d8>)
 8010ee6:	f7ef f9ef 	bl	80002c8 <__aeabi_dsub>
 8010eea:	a369      	add	r3, pc, #420	@ (adr r3, 8011090 <_dtoa_r+0x2b0>)
 8010eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ef0:	f7ef fba2 	bl	8000638 <__aeabi_dmul>
 8010ef4:	a368      	add	r3, pc, #416	@ (adr r3, 8011098 <_dtoa_r+0x2b8>)
 8010ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efa:	f7ef f9e7 	bl	80002cc <__adddf3>
 8010efe:	4604      	mov	r4, r0
 8010f00:	4630      	mov	r0, r6
 8010f02:	460d      	mov	r5, r1
 8010f04:	f7ef fb2e 	bl	8000564 <__aeabi_i2d>
 8010f08:	a365      	add	r3, pc, #404	@ (adr r3, 80110a0 <_dtoa_r+0x2c0>)
 8010f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f0e:	f7ef fb93 	bl	8000638 <__aeabi_dmul>
 8010f12:	4602      	mov	r2, r0
 8010f14:	460b      	mov	r3, r1
 8010f16:	4620      	mov	r0, r4
 8010f18:	4629      	mov	r1, r5
 8010f1a:	f7ef f9d7 	bl	80002cc <__adddf3>
 8010f1e:	4604      	mov	r4, r0
 8010f20:	460d      	mov	r5, r1
 8010f22:	f7ef fe39 	bl	8000b98 <__aeabi_d2iz>
 8010f26:	2200      	movs	r2, #0
 8010f28:	4607      	mov	r7, r0
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	4629      	mov	r1, r5
 8010f30:	f7ef fdf4 	bl	8000b1c <__aeabi_dcmplt>
 8010f34:	b140      	cbz	r0, 8010f48 <_dtoa_r+0x168>
 8010f36:	4638      	mov	r0, r7
 8010f38:	f7ef fb14 	bl	8000564 <__aeabi_i2d>
 8010f3c:	4622      	mov	r2, r4
 8010f3e:	462b      	mov	r3, r5
 8010f40:	f7ef fde2 	bl	8000b08 <__aeabi_dcmpeq>
 8010f44:	b900      	cbnz	r0, 8010f48 <_dtoa_r+0x168>
 8010f46:	3f01      	subs	r7, #1
 8010f48:	2f16      	cmp	r7, #22
 8010f4a:	d851      	bhi.n	8010ff0 <_dtoa_r+0x210>
 8010f4c:	4b5b      	ldr	r3, [pc, #364]	@ (80110bc <_dtoa_r+0x2dc>)
 8010f4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8010f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010f5a:	f7ef fddf 	bl	8000b1c <__aeabi_dcmplt>
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	d048      	beq.n	8010ff4 <_dtoa_r+0x214>
 8010f62:	3f01      	subs	r7, #1
 8010f64:	2300      	movs	r3, #0
 8010f66:	9312      	str	r3, [sp, #72]	@ 0x48
 8010f68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010f6a:	1b9b      	subs	r3, r3, r6
 8010f6c:	1e5a      	subs	r2, r3, #1
 8010f6e:	bf44      	itt	mi
 8010f70:	f1c3 0801 	rsbmi	r8, r3, #1
 8010f74:	2300      	movmi	r3, #0
 8010f76:	9208      	str	r2, [sp, #32]
 8010f78:	bf54      	ite	pl
 8010f7a:	f04f 0800 	movpl.w	r8, #0
 8010f7e:	9308      	strmi	r3, [sp, #32]
 8010f80:	2f00      	cmp	r7, #0
 8010f82:	db39      	blt.n	8010ff8 <_dtoa_r+0x218>
 8010f84:	9b08      	ldr	r3, [sp, #32]
 8010f86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8010f88:	443b      	add	r3, r7
 8010f8a:	9308      	str	r3, [sp, #32]
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f92:	2b09      	cmp	r3, #9
 8010f94:	d864      	bhi.n	8011060 <_dtoa_r+0x280>
 8010f96:	2b05      	cmp	r3, #5
 8010f98:	bfc4      	itt	gt
 8010f9a:	3b04      	subgt	r3, #4
 8010f9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8010f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fa0:	f1a3 0302 	sub.w	r3, r3, #2
 8010fa4:	bfcc      	ite	gt
 8010fa6:	2400      	movgt	r4, #0
 8010fa8:	2401      	movle	r4, #1
 8010faa:	2b03      	cmp	r3, #3
 8010fac:	d863      	bhi.n	8011076 <_dtoa_r+0x296>
 8010fae:	e8df f003 	tbb	[pc, r3]
 8010fb2:	372a      	.short	0x372a
 8010fb4:	5535      	.short	0x5535
 8010fb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8010fba:	441e      	add	r6, r3
 8010fbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010fc0:	2b20      	cmp	r3, #32
 8010fc2:	bfc1      	itttt	gt
 8010fc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010fc8:	409f      	lslgt	r7, r3
 8010fca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010fce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010fd2:	bfd6      	itet	le
 8010fd4:	f1c3 0320 	rsble	r3, r3, #32
 8010fd8:	ea47 0003 	orrgt.w	r0, r7, r3
 8010fdc:	fa04 f003 	lslle.w	r0, r4, r3
 8010fe0:	f7ef fab0 	bl	8000544 <__aeabi_ui2d>
 8010fe4:	2201      	movs	r2, #1
 8010fe6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010fea:	3e01      	subs	r6, #1
 8010fec:	9214      	str	r2, [sp, #80]	@ 0x50
 8010fee:	e777      	b.n	8010ee0 <_dtoa_r+0x100>
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	e7b8      	b.n	8010f66 <_dtoa_r+0x186>
 8010ff4:	9012      	str	r0, [sp, #72]	@ 0x48
 8010ff6:	e7b7      	b.n	8010f68 <_dtoa_r+0x188>
 8010ff8:	427b      	negs	r3, r7
 8010ffa:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	eba8 0807 	sub.w	r8, r8, r7
 8011002:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011004:	e7c4      	b.n	8010f90 <_dtoa_r+0x1b0>
 8011006:	2300      	movs	r3, #0
 8011008:	930b      	str	r3, [sp, #44]	@ 0x2c
 801100a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801100c:	2b00      	cmp	r3, #0
 801100e:	dc35      	bgt.n	801107c <_dtoa_r+0x29c>
 8011010:	2301      	movs	r3, #1
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	9307      	str	r3, [sp, #28]
 8011016:	461a      	mov	r2, r3
 8011018:	920e      	str	r2, [sp, #56]	@ 0x38
 801101a:	e00b      	b.n	8011034 <_dtoa_r+0x254>
 801101c:	2301      	movs	r3, #1
 801101e:	e7f3      	b.n	8011008 <_dtoa_r+0x228>
 8011020:	2300      	movs	r3, #0
 8011022:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011024:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011026:	18fb      	adds	r3, r7, r3
 8011028:	9300      	str	r3, [sp, #0]
 801102a:	3301      	adds	r3, #1
 801102c:	2b01      	cmp	r3, #1
 801102e:	9307      	str	r3, [sp, #28]
 8011030:	bfb8      	it	lt
 8011032:	2301      	movlt	r3, #1
 8011034:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011038:	2100      	movs	r1, #0
 801103a:	2204      	movs	r2, #4
 801103c:	f102 0514 	add.w	r5, r2, #20
 8011040:	429d      	cmp	r5, r3
 8011042:	d91f      	bls.n	8011084 <_dtoa_r+0x2a4>
 8011044:	6041      	str	r1, [r0, #4]
 8011046:	4658      	mov	r0, fp
 8011048:	f000 fd8e 	bl	8011b68 <_Balloc>
 801104c:	4682      	mov	sl, r0
 801104e:	2800      	cmp	r0, #0
 8011050:	d13c      	bne.n	80110cc <_dtoa_r+0x2ec>
 8011052:	4b1b      	ldr	r3, [pc, #108]	@ (80110c0 <_dtoa_r+0x2e0>)
 8011054:	4602      	mov	r2, r0
 8011056:	f240 11af 	movw	r1, #431	@ 0x1af
 801105a:	e6d8      	b.n	8010e0e <_dtoa_r+0x2e>
 801105c:	2301      	movs	r3, #1
 801105e:	e7e0      	b.n	8011022 <_dtoa_r+0x242>
 8011060:	2401      	movs	r4, #1
 8011062:	2300      	movs	r3, #0
 8011064:	9309      	str	r3, [sp, #36]	@ 0x24
 8011066:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011068:	f04f 33ff 	mov.w	r3, #4294967295
 801106c:	9300      	str	r3, [sp, #0]
 801106e:	9307      	str	r3, [sp, #28]
 8011070:	2200      	movs	r2, #0
 8011072:	2312      	movs	r3, #18
 8011074:	e7d0      	b.n	8011018 <_dtoa_r+0x238>
 8011076:	2301      	movs	r3, #1
 8011078:	930b      	str	r3, [sp, #44]	@ 0x2c
 801107a:	e7f5      	b.n	8011068 <_dtoa_r+0x288>
 801107c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801107e:	9300      	str	r3, [sp, #0]
 8011080:	9307      	str	r3, [sp, #28]
 8011082:	e7d7      	b.n	8011034 <_dtoa_r+0x254>
 8011084:	3101      	adds	r1, #1
 8011086:	0052      	lsls	r2, r2, #1
 8011088:	e7d8      	b.n	801103c <_dtoa_r+0x25c>
 801108a:	bf00      	nop
 801108c:	f3af 8000 	nop.w
 8011090:	636f4361 	.word	0x636f4361
 8011094:	3fd287a7 	.word	0x3fd287a7
 8011098:	8b60c8b3 	.word	0x8b60c8b3
 801109c:	3fc68a28 	.word	0x3fc68a28
 80110a0:	509f79fb 	.word	0x509f79fb
 80110a4:	3fd34413 	.word	0x3fd34413
 80110a8:	08016ac1 	.word	0x08016ac1
 80110ac:	08016ad8 	.word	0x08016ad8
 80110b0:	7ff00000 	.word	0x7ff00000
 80110b4:	08016a91 	.word	0x08016a91
 80110b8:	3ff80000 	.word	0x3ff80000
 80110bc:	08016bd0 	.word	0x08016bd0
 80110c0:	08016b30 	.word	0x08016b30
 80110c4:	08016abd 	.word	0x08016abd
 80110c8:	08016a90 	.word	0x08016a90
 80110cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80110d0:	6018      	str	r0, [r3, #0]
 80110d2:	9b07      	ldr	r3, [sp, #28]
 80110d4:	2b0e      	cmp	r3, #14
 80110d6:	f200 80a4 	bhi.w	8011222 <_dtoa_r+0x442>
 80110da:	2c00      	cmp	r4, #0
 80110dc:	f000 80a1 	beq.w	8011222 <_dtoa_r+0x442>
 80110e0:	2f00      	cmp	r7, #0
 80110e2:	dd33      	ble.n	801114c <_dtoa_r+0x36c>
 80110e4:	4bad      	ldr	r3, [pc, #692]	@ (801139c <_dtoa_r+0x5bc>)
 80110e6:	f007 020f 	and.w	r2, r7, #15
 80110ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80110ee:	ed93 7b00 	vldr	d7, [r3]
 80110f2:	05f8      	lsls	r0, r7, #23
 80110f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80110f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80110fc:	d516      	bpl.n	801112c <_dtoa_r+0x34c>
 80110fe:	4ba8      	ldr	r3, [pc, #672]	@ (80113a0 <_dtoa_r+0x5c0>)
 8011100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011108:	f7ef fbc0 	bl	800088c <__aeabi_ddiv>
 801110c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011110:	f004 040f 	and.w	r4, r4, #15
 8011114:	2603      	movs	r6, #3
 8011116:	4da2      	ldr	r5, [pc, #648]	@ (80113a0 <_dtoa_r+0x5c0>)
 8011118:	b954      	cbnz	r4, 8011130 <_dtoa_r+0x350>
 801111a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801111e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011122:	f7ef fbb3 	bl	800088c <__aeabi_ddiv>
 8011126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801112a:	e028      	b.n	801117e <_dtoa_r+0x39e>
 801112c:	2602      	movs	r6, #2
 801112e:	e7f2      	b.n	8011116 <_dtoa_r+0x336>
 8011130:	07e1      	lsls	r1, r4, #31
 8011132:	d508      	bpl.n	8011146 <_dtoa_r+0x366>
 8011134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011138:	e9d5 2300 	ldrd	r2, r3, [r5]
 801113c:	f7ef fa7c 	bl	8000638 <__aeabi_dmul>
 8011140:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011144:	3601      	adds	r6, #1
 8011146:	1064      	asrs	r4, r4, #1
 8011148:	3508      	adds	r5, #8
 801114a:	e7e5      	b.n	8011118 <_dtoa_r+0x338>
 801114c:	f000 80d2 	beq.w	80112f4 <_dtoa_r+0x514>
 8011150:	427c      	negs	r4, r7
 8011152:	4b92      	ldr	r3, [pc, #584]	@ (801139c <_dtoa_r+0x5bc>)
 8011154:	4d92      	ldr	r5, [pc, #584]	@ (80113a0 <_dtoa_r+0x5c0>)
 8011156:	f004 020f 	and.w	r2, r4, #15
 801115a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011162:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011166:	f7ef fa67 	bl	8000638 <__aeabi_dmul>
 801116a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801116e:	1124      	asrs	r4, r4, #4
 8011170:	2300      	movs	r3, #0
 8011172:	2602      	movs	r6, #2
 8011174:	2c00      	cmp	r4, #0
 8011176:	f040 80b2 	bne.w	80112de <_dtoa_r+0x4fe>
 801117a:	2b00      	cmp	r3, #0
 801117c:	d1d3      	bne.n	8011126 <_dtoa_r+0x346>
 801117e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011180:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011184:	2b00      	cmp	r3, #0
 8011186:	f000 80b7 	beq.w	80112f8 <_dtoa_r+0x518>
 801118a:	4b86      	ldr	r3, [pc, #536]	@ (80113a4 <_dtoa_r+0x5c4>)
 801118c:	2200      	movs	r2, #0
 801118e:	4620      	mov	r0, r4
 8011190:	4629      	mov	r1, r5
 8011192:	f7ef fcc3 	bl	8000b1c <__aeabi_dcmplt>
 8011196:	2800      	cmp	r0, #0
 8011198:	f000 80ae 	beq.w	80112f8 <_dtoa_r+0x518>
 801119c:	9b07      	ldr	r3, [sp, #28]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	f000 80aa 	beq.w	80112f8 <_dtoa_r+0x518>
 80111a4:	9b00      	ldr	r3, [sp, #0]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	dd37      	ble.n	801121a <_dtoa_r+0x43a>
 80111aa:	1e7b      	subs	r3, r7, #1
 80111ac:	9304      	str	r3, [sp, #16]
 80111ae:	4620      	mov	r0, r4
 80111b0:	4b7d      	ldr	r3, [pc, #500]	@ (80113a8 <_dtoa_r+0x5c8>)
 80111b2:	2200      	movs	r2, #0
 80111b4:	4629      	mov	r1, r5
 80111b6:	f7ef fa3f 	bl	8000638 <__aeabi_dmul>
 80111ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80111be:	9c00      	ldr	r4, [sp, #0]
 80111c0:	3601      	adds	r6, #1
 80111c2:	4630      	mov	r0, r6
 80111c4:	f7ef f9ce 	bl	8000564 <__aeabi_i2d>
 80111c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80111cc:	f7ef fa34 	bl	8000638 <__aeabi_dmul>
 80111d0:	4b76      	ldr	r3, [pc, #472]	@ (80113ac <_dtoa_r+0x5cc>)
 80111d2:	2200      	movs	r2, #0
 80111d4:	f7ef f87a 	bl	80002cc <__adddf3>
 80111d8:	4605      	mov	r5, r0
 80111da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80111de:	2c00      	cmp	r4, #0
 80111e0:	f040 808d 	bne.w	80112fe <_dtoa_r+0x51e>
 80111e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80111e8:	4b71      	ldr	r3, [pc, #452]	@ (80113b0 <_dtoa_r+0x5d0>)
 80111ea:	2200      	movs	r2, #0
 80111ec:	f7ef f86c 	bl	80002c8 <__aeabi_dsub>
 80111f0:	4602      	mov	r2, r0
 80111f2:	460b      	mov	r3, r1
 80111f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80111f8:	462a      	mov	r2, r5
 80111fa:	4633      	mov	r3, r6
 80111fc:	f7ef fcac 	bl	8000b58 <__aeabi_dcmpgt>
 8011200:	2800      	cmp	r0, #0
 8011202:	f040 828b 	bne.w	801171c <_dtoa_r+0x93c>
 8011206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801120a:	462a      	mov	r2, r5
 801120c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011210:	f7ef fc84 	bl	8000b1c <__aeabi_dcmplt>
 8011214:	2800      	cmp	r0, #0
 8011216:	f040 8128 	bne.w	801146a <_dtoa_r+0x68a>
 801121a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801121e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011222:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011224:	2b00      	cmp	r3, #0
 8011226:	f2c0 815a 	blt.w	80114de <_dtoa_r+0x6fe>
 801122a:	2f0e      	cmp	r7, #14
 801122c:	f300 8157 	bgt.w	80114de <_dtoa_r+0x6fe>
 8011230:	4b5a      	ldr	r3, [pc, #360]	@ (801139c <_dtoa_r+0x5bc>)
 8011232:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011236:	ed93 7b00 	vldr	d7, [r3]
 801123a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801123c:	2b00      	cmp	r3, #0
 801123e:	ed8d 7b00 	vstr	d7, [sp]
 8011242:	da03      	bge.n	801124c <_dtoa_r+0x46c>
 8011244:	9b07      	ldr	r3, [sp, #28]
 8011246:	2b00      	cmp	r3, #0
 8011248:	f340 8101 	ble.w	801144e <_dtoa_r+0x66e>
 801124c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011250:	4656      	mov	r6, sl
 8011252:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011256:	4620      	mov	r0, r4
 8011258:	4629      	mov	r1, r5
 801125a:	f7ef fb17 	bl	800088c <__aeabi_ddiv>
 801125e:	f7ef fc9b 	bl	8000b98 <__aeabi_d2iz>
 8011262:	4680      	mov	r8, r0
 8011264:	f7ef f97e 	bl	8000564 <__aeabi_i2d>
 8011268:	e9dd 2300 	ldrd	r2, r3, [sp]
 801126c:	f7ef f9e4 	bl	8000638 <__aeabi_dmul>
 8011270:	4602      	mov	r2, r0
 8011272:	460b      	mov	r3, r1
 8011274:	4620      	mov	r0, r4
 8011276:	4629      	mov	r1, r5
 8011278:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801127c:	f7ef f824 	bl	80002c8 <__aeabi_dsub>
 8011280:	f806 4b01 	strb.w	r4, [r6], #1
 8011284:	9d07      	ldr	r5, [sp, #28]
 8011286:	eba6 040a 	sub.w	r4, r6, sl
 801128a:	42a5      	cmp	r5, r4
 801128c:	4602      	mov	r2, r0
 801128e:	460b      	mov	r3, r1
 8011290:	f040 8117 	bne.w	80114c2 <_dtoa_r+0x6e2>
 8011294:	f7ef f81a 	bl	80002cc <__adddf3>
 8011298:	e9dd 2300 	ldrd	r2, r3, [sp]
 801129c:	4604      	mov	r4, r0
 801129e:	460d      	mov	r5, r1
 80112a0:	f7ef fc5a 	bl	8000b58 <__aeabi_dcmpgt>
 80112a4:	2800      	cmp	r0, #0
 80112a6:	f040 80f9 	bne.w	801149c <_dtoa_r+0x6bc>
 80112aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80112ae:	4620      	mov	r0, r4
 80112b0:	4629      	mov	r1, r5
 80112b2:	f7ef fc29 	bl	8000b08 <__aeabi_dcmpeq>
 80112b6:	b118      	cbz	r0, 80112c0 <_dtoa_r+0x4e0>
 80112b8:	f018 0f01 	tst.w	r8, #1
 80112bc:	f040 80ee 	bne.w	801149c <_dtoa_r+0x6bc>
 80112c0:	4649      	mov	r1, r9
 80112c2:	4658      	mov	r0, fp
 80112c4:	f000 fc90 	bl	8011be8 <_Bfree>
 80112c8:	2300      	movs	r3, #0
 80112ca:	7033      	strb	r3, [r6, #0]
 80112cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80112ce:	3701      	adds	r7, #1
 80112d0:	601f      	str	r7, [r3, #0]
 80112d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	f000 831d 	beq.w	8011914 <_dtoa_r+0xb34>
 80112da:	601e      	str	r6, [r3, #0]
 80112dc:	e31a      	b.n	8011914 <_dtoa_r+0xb34>
 80112de:	07e2      	lsls	r2, r4, #31
 80112e0:	d505      	bpl.n	80112ee <_dtoa_r+0x50e>
 80112e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80112e6:	f7ef f9a7 	bl	8000638 <__aeabi_dmul>
 80112ea:	3601      	adds	r6, #1
 80112ec:	2301      	movs	r3, #1
 80112ee:	1064      	asrs	r4, r4, #1
 80112f0:	3508      	adds	r5, #8
 80112f2:	e73f      	b.n	8011174 <_dtoa_r+0x394>
 80112f4:	2602      	movs	r6, #2
 80112f6:	e742      	b.n	801117e <_dtoa_r+0x39e>
 80112f8:	9c07      	ldr	r4, [sp, #28]
 80112fa:	9704      	str	r7, [sp, #16]
 80112fc:	e761      	b.n	80111c2 <_dtoa_r+0x3e2>
 80112fe:	4b27      	ldr	r3, [pc, #156]	@ (801139c <_dtoa_r+0x5bc>)
 8011300:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011302:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011306:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801130a:	4454      	add	r4, sl
 801130c:	2900      	cmp	r1, #0
 801130e:	d053      	beq.n	80113b8 <_dtoa_r+0x5d8>
 8011310:	4928      	ldr	r1, [pc, #160]	@ (80113b4 <_dtoa_r+0x5d4>)
 8011312:	2000      	movs	r0, #0
 8011314:	f7ef faba 	bl	800088c <__aeabi_ddiv>
 8011318:	4633      	mov	r3, r6
 801131a:	462a      	mov	r2, r5
 801131c:	f7ee ffd4 	bl	80002c8 <__aeabi_dsub>
 8011320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011324:	4656      	mov	r6, sl
 8011326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801132a:	f7ef fc35 	bl	8000b98 <__aeabi_d2iz>
 801132e:	4605      	mov	r5, r0
 8011330:	f7ef f918 	bl	8000564 <__aeabi_i2d>
 8011334:	4602      	mov	r2, r0
 8011336:	460b      	mov	r3, r1
 8011338:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801133c:	f7ee ffc4 	bl	80002c8 <__aeabi_dsub>
 8011340:	3530      	adds	r5, #48	@ 0x30
 8011342:	4602      	mov	r2, r0
 8011344:	460b      	mov	r3, r1
 8011346:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801134a:	f806 5b01 	strb.w	r5, [r6], #1
 801134e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011352:	f7ef fbe3 	bl	8000b1c <__aeabi_dcmplt>
 8011356:	2800      	cmp	r0, #0
 8011358:	d171      	bne.n	801143e <_dtoa_r+0x65e>
 801135a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801135e:	4911      	ldr	r1, [pc, #68]	@ (80113a4 <_dtoa_r+0x5c4>)
 8011360:	2000      	movs	r0, #0
 8011362:	f7ee ffb1 	bl	80002c8 <__aeabi_dsub>
 8011366:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801136a:	f7ef fbd7 	bl	8000b1c <__aeabi_dcmplt>
 801136e:	2800      	cmp	r0, #0
 8011370:	f040 8095 	bne.w	801149e <_dtoa_r+0x6be>
 8011374:	42a6      	cmp	r6, r4
 8011376:	f43f af50 	beq.w	801121a <_dtoa_r+0x43a>
 801137a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801137e:	4b0a      	ldr	r3, [pc, #40]	@ (80113a8 <_dtoa_r+0x5c8>)
 8011380:	2200      	movs	r2, #0
 8011382:	f7ef f959 	bl	8000638 <__aeabi_dmul>
 8011386:	4b08      	ldr	r3, [pc, #32]	@ (80113a8 <_dtoa_r+0x5c8>)
 8011388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801138c:	2200      	movs	r2, #0
 801138e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011392:	f7ef f951 	bl	8000638 <__aeabi_dmul>
 8011396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801139a:	e7c4      	b.n	8011326 <_dtoa_r+0x546>
 801139c:	08016bd0 	.word	0x08016bd0
 80113a0:	08016ba8 	.word	0x08016ba8
 80113a4:	3ff00000 	.word	0x3ff00000
 80113a8:	40240000 	.word	0x40240000
 80113ac:	401c0000 	.word	0x401c0000
 80113b0:	40140000 	.word	0x40140000
 80113b4:	3fe00000 	.word	0x3fe00000
 80113b8:	4631      	mov	r1, r6
 80113ba:	4628      	mov	r0, r5
 80113bc:	f7ef f93c 	bl	8000638 <__aeabi_dmul>
 80113c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80113c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80113c6:	4656      	mov	r6, sl
 80113c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113cc:	f7ef fbe4 	bl	8000b98 <__aeabi_d2iz>
 80113d0:	4605      	mov	r5, r0
 80113d2:	f7ef f8c7 	bl	8000564 <__aeabi_i2d>
 80113d6:	4602      	mov	r2, r0
 80113d8:	460b      	mov	r3, r1
 80113da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113de:	f7ee ff73 	bl	80002c8 <__aeabi_dsub>
 80113e2:	3530      	adds	r5, #48	@ 0x30
 80113e4:	f806 5b01 	strb.w	r5, [r6], #1
 80113e8:	4602      	mov	r2, r0
 80113ea:	460b      	mov	r3, r1
 80113ec:	42a6      	cmp	r6, r4
 80113ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80113f2:	f04f 0200 	mov.w	r2, #0
 80113f6:	d124      	bne.n	8011442 <_dtoa_r+0x662>
 80113f8:	4bac      	ldr	r3, [pc, #688]	@ (80116ac <_dtoa_r+0x8cc>)
 80113fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80113fe:	f7ee ff65 	bl	80002cc <__adddf3>
 8011402:	4602      	mov	r2, r0
 8011404:	460b      	mov	r3, r1
 8011406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801140a:	f7ef fba5 	bl	8000b58 <__aeabi_dcmpgt>
 801140e:	2800      	cmp	r0, #0
 8011410:	d145      	bne.n	801149e <_dtoa_r+0x6be>
 8011412:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011416:	49a5      	ldr	r1, [pc, #660]	@ (80116ac <_dtoa_r+0x8cc>)
 8011418:	2000      	movs	r0, #0
 801141a:	f7ee ff55 	bl	80002c8 <__aeabi_dsub>
 801141e:	4602      	mov	r2, r0
 8011420:	460b      	mov	r3, r1
 8011422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011426:	f7ef fb79 	bl	8000b1c <__aeabi_dcmplt>
 801142a:	2800      	cmp	r0, #0
 801142c:	f43f aef5 	beq.w	801121a <_dtoa_r+0x43a>
 8011430:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011432:	1e73      	subs	r3, r6, #1
 8011434:	9315      	str	r3, [sp, #84]	@ 0x54
 8011436:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801143a:	2b30      	cmp	r3, #48	@ 0x30
 801143c:	d0f8      	beq.n	8011430 <_dtoa_r+0x650>
 801143e:	9f04      	ldr	r7, [sp, #16]
 8011440:	e73e      	b.n	80112c0 <_dtoa_r+0x4e0>
 8011442:	4b9b      	ldr	r3, [pc, #620]	@ (80116b0 <_dtoa_r+0x8d0>)
 8011444:	f7ef f8f8 	bl	8000638 <__aeabi_dmul>
 8011448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801144c:	e7bc      	b.n	80113c8 <_dtoa_r+0x5e8>
 801144e:	d10c      	bne.n	801146a <_dtoa_r+0x68a>
 8011450:	4b98      	ldr	r3, [pc, #608]	@ (80116b4 <_dtoa_r+0x8d4>)
 8011452:	2200      	movs	r2, #0
 8011454:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011458:	f7ef f8ee 	bl	8000638 <__aeabi_dmul>
 801145c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011460:	f7ef fb70 	bl	8000b44 <__aeabi_dcmpge>
 8011464:	2800      	cmp	r0, #0
 8011466:	f000 8157 	beq.w	8011718 <_dtoa_r+0x938>
 801146a:	2400      	movs	r4, #0
 801146c:	4625      	mov	r5, r4
 801146e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011470:	43db      	mvns	r3, r3
 8011472:	9304      	str	r3, [sp, #16]
 8011474:	4656      	mov	r6, sl
 8011476:	2700      	movs	r7, #0
 8011478:	4621      	mov	r1, r4
 801147a:	4658      	mov	r0, fp
 801147c:	f000 fbb4 	bl	8011be8 <_Bfree>
 8011480:	2d00      	cmp	r5, #0
 8011482:	d0dc      	beq.n	801143e <_dtoa_r+0x65e>
 8011484:	b12f      	cbz	r7, 8011492 <_dtoa_r+0x6b2>
 8011486:	42af      	cmp	r7, r5
 8011488:	d003      	beq.n	8011492 <_dtoa_r+0x6b2>
 801148a:	4639      	mov	r1, r7
 801148c:	4658      	mov	r0, fp
 801148e:	f000 fbab 	bl	8011be8 <_Bfree>
 8011492:	4629      	mov	r1, r5
 8011494:	4658      	mov	r0, fp
 8011496:	f000 fba7 	bl	8011be8 <_Bfree>
 801149a:	e7d0      	b.n	801143e <_dtoa_r+0x65e>
 801149c:	9704      	str	r7, [sp, #16]
 801149e:	4633      	mov	r3, r6
 80114a0:	461e      	mov	r6, r3
 80114a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114a6:	2a39      	cmp	r2, #57	@ 0x39
 80114a8:	d107      	bne.n	80114ba <_dtoa_r+0x6da>
 80114aa:	459a      	cmp	sl, r3
 80114ac:	d1f8      	bne.n	80114a0 <_dtoa_r+0x6c0>
 80114ae:	9a04      	ldr	r2, [sp, #16]
 80114b0:	3201      	adds	r2, #1
 80114b2:	9204      	str	r2, [sp, #16]
 80114b4:	2230      	movs	r2, #48	@ 0x30
 80114b6:	f88a 2000 	strb.w	r2, [sl]
 80114ba:	781a      	ldrb	r2, [r3, #0]
 80114bc:	3201      	adds	r2, #1
 80114be:	701a      	strb	r2, [r3, #0]
 80114c0:	e7bd      	b.n	801143e <_dtoa_r+0x65e>
 80114c2:	4b7b      	ldr	r3, [pc, #492]	@ (80116b0 <_dtoa_r+0x8d0>)
 80114c4:	2200      	movs	r2, #0
 80114c6:	f7ef f8b7 	bl	8000638 <__aeabi_dmul>
 80114ca:	2200      	movs	r2, #0
 80114cc:	2300      	movs	r3, #0
 80114ce:	4604      	mov	r4, r0
 80114d0:	460d      	mov	r5, r1
 80114d2:	f7ef fb19 	bl	8000b08 <__aeabi_dcmpeq>
 80114d6:	2800      	cmp	r0, #0
 80114d8:	f43f aebb 	beq.w	8011252 <_dtoa_r+0x472>
 80114dc:	e6f0      	b.n	80112c0 <_dtoa_r+0x4e0>
 80114de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80114e0:	2a00      	cmp	r2, #0
 80114e2:	f000 80db 	beq.w	801169c <_dtoa_r+0x8bc>
 80114e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80114e8:	2a01      	cmp	r2, #1
 80114ea:	f300 80bf 	bgt.w	801166c <_dtoa_r+0x88c>
 80114ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80114f0:	2a00      	cmp	r2, #0
 80114f2:	f000 80b7 	beq.w	8011664 <_dtoa_r+0x884>
 80114f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80114fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80114fc:	4646      	mov	r6, r8
 80114fe:	9a08      	ldr	r2, [sp, #32]
 8011500:	2101      	movs	r1, #1
 8011502:	441a      	add	r2, r3
 8011504:	4658      	mov	r0, fp
 8011506:	4498      	add	r8, r3
 8011508:	9208      	str	r2, [sp, #32]
 801150a:	f000 fc21 	bl	8011d50 <__i2b>
 801150e:	4605      	mov	r5, r0
 8011510:	b15e      	cbz	r6, 801152a <_dtoa_r+0x74a>
 8011512:	9b08      	ldr	r3, [sp, #32]
 8011514:	2b00      	cmp	r3, #0
 8011516:	dd08      	ble.n	801152a <_dtoa_r+0x74a>
 8011518:	42b3      	cmp	r3, r6
 801151a:	9a08      	ldr	r2, [sp, #32]
 801151c:	bfa8      	it	ge
 801151e:	4633      	movge	r3, r6
 8011520:	eba8 0803 	sub.w	r8, r8, r3
 8011524:	1af6      	subs	r6, r6, r3
 8011526:	1ad3      	subs	r3, r2, r3
 8011528:	9308      	str	r3, [sp, #32]
 801152a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801152c:	b1f3      	cbz	r3, 801156c <_dtoa_r+0x78c>
 801152e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011530:	2b00      	cmp	r3, #0
 8011532:	f000 80b7 	beq.w	80116a4 <_dtoa_r+0x8c4>
 8011536:	b18c      	cbz	r4, 801155c <_dtoa_r+0x77c>
 8011538:	4629      	mov	r1, r5
 801153a:	4622      	mov	r2, r4
 801153c:	4658      	mov	r0, fp
 801153e:	f000 fcc7 	bl	8011ed0 <__pow5mult>
 8011542:	464a      	mov	r2, r9
 8011544:	4601      	mov	r1, r0
 8011546:	4605      	mov	r5, r0
 8011548:	4658      	mov	r0, fp
 801154a:	f000 fc17 	bl	8011d7c <__multiply>
 801154e:	4649      	mov	r1, r9
 8011550:	9004      	str	r0, [sp, #16]
 8011552:	4658      	mov	r0, fp
 8011554:	f000 fb48 	bl	8011be8 <_Bfree>
 8011558:	9b04      	ldr	r3, [sp, #16]
 801155a:	4699      	mov	r9, r3
 801155c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801155e:	1b1a      	subs	r2, r3, r4
 8011560:	d004      	beq.n	801156c <_dtoa_r+0x78c>
 8011562:	4649      	mov	r1, r9
 8011564:	4658      	mov	r0, fp
 8011566:	f000 fcb3 	bl	8011ed0 <__pow5mult>
 801156a:	4681      	mov	r9, r0
 801156c:	2101      	movs	r1, #1
 801156e:	4658      	mov	r0, fp
 8011570:	f000 fbee 	bl	8011d50 <__i2b>
 8011574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011576:	4604      	mov	r4, r0
 8011578:	2b00      	cmp	r3, #0
 801157a:	f000 81cf 	beq.w	801191c <_dtoa_r+0xb3c>
 801157e:	461a      	mov	r2, r3
 8011580:	4601      	mov	r1, r0
 8011582:	4658      	mov	r0, fp
 8011584:	f000 fca4 	bl	8011ed0 <__pow5mult>
 8011588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801158a:	2b01      	cmp	r3, #1
 801158c:	4604      	mov	r4, r0
 801158e:	f300 8095 	bgt.w	80116bc <_dtoa_r+0x8dc>
 8011592:	9b02      	ldr	r3, [sp, #8]
 8011594:	2b00      	cmp	r3, #0
 8011596:	f040 8087 	bne.w	80116a8 <_dtoa_r+0x8c8>
 801159a:	9b03      	ldr	r3, [sp, #12]
 801159c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	f040 8089 	bne.w	80116b8 <_dtoa_r+0x8d8>
 80115a6:	9b03      	ldr	r3, [sp, #12]
 80115a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80115ac:	0d1b      	lsrs	r3, r3, #20
 80115ae:	051b      	lsls	r3, r3, #20
 80115b0:	b12b      	cbz	r3, 80115be <_dtoa_r+0x7de>
 80115b2:	9b08      	ldr	r3, [sp, #32]
 80115b4:	3301      	adds	r3, #1
 80115b6:	9308      	str	r3, [sp, #32]
 80115b8:	f108 0801 	add.w	r8, r8, #1
 80115bc:	2301      	movs	r3, #1
 80115be:	930a      	str	r3, [sp, #40]	@ 0x28
 80115c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f000 81b0 	beq.w	8011928 <_dtoa_r+0xb48>
 80115c8:	6923      	ldr	r3, [r4, #16]
 80115ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80115ce:	6918      	ldr	r0, [r3, #16]
 80115d0:	f000 fb72 	bl	8011cb8 <__hi0bits>
 80115d4:	f1c0 0020 	rsb	r0, r0, #32
 80115d8:	9b08      	ldr	r3, [sp, #32]
 80115da:	4418      	add	r0, r3
 80115dc:	f010 001f 	ands.w	r0, r0, #31
 80115e0:	d077      	beq.n	80116d2 <_dtoa_r+0x8f2>
 80115e2:	f1c0 0320 	rsb	r3, r0, #32
 80115e6:	2b04      	cmp	r3, #4
 80115e8:	dd6b      	ble.n	80116c2 <_dtoa_r+0x8e2>
 80115ea:	9b08      	ldr	r3, [sp, #32]
 80115ec:	f1c0 001c 	rsb	r0, r0, #28
 80115f0:	4403      	add	r3, r0
 80115f2:	4480      	add	r8, r0
 80115f4:	4406      	add	r6, r0
 80115f6:	9308      	str	r3, [sp, #32]
 80115f8:	f1b8 0f00 	cmp.w	r8, #0
 80115fc:	dd05      	ble.n	801160a <_dtoa_r+0x82a>
 80115fe:	4649      	mov	r1, r9
 8011600:	4642      	mov	r2, r8
 8011602:	4658      	mov	r0, fp
 8011604:	f000 fcbe 	bl	8011f84 <__lshift>
 8011608:	4681      	mov	r9, r0
 801160a:	9b08      	ldr	r3, [sp, #32]
 801160c:	2b00      	cmp	r3, #0
 801160e:	dd05      	ble.n	801161c <_dtoa_r+0x83c>
 8011610:	4621      	mov	r1, r4
 8011612:	461a      	mov	r2, r3
 8011614:	4658      	mov	r0, fp
 8011616:	f000 fcb5 	bl	8011f84 <__lshift>
 801161a:	4604      	mov	r4, r0
 801161c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801161e:	2b00      	cmp	r3, #0
 8011620:	d059      	beq.n	80116d6 <_dtoa_r+0x8f6>
 8011622:	4621      	mov	r1, r4
 8011624:	4648      	mov	r0, r9
 8011626:	f000 fd19 	bl	801205c <__mcmp>
 801162a:	2800      	cmp	r0, #0
 801162c:	da53      	bge.n	80116d6 <_dtoa_r+0x8f6>
 801162e:	1e7b      	subs	r3, r7, #1
 8011630:	9304      	str	r3, [sp, #16]
 8011632:	4649      	mov	r1, r9
 8011634:	2300      	movs	r3, #0
 8011636:	220a      	movs	r2, #10
 8011638:	4658      	mov	r0, fp
 801163a:	f000 faf7 	bl	8011c2c <__multadd>
 801163e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011640:	4681      	mov	r9, r0
 8011642:	2b00      	cmp	r3, #0
 8011644:	f000 8172 	beq.w	801192c <_dtoa_r+0xb4c>
 8011648:	2300      	movs	r3, #0
 801164a:	4629      	mov	r1, r5
 801164c:	220a      	movs	r2, #10
 801164e:	4658      	mov	r0, fp
 8011650:	f000 faec 	bl	8011c2c <__multadd>
 8011654:	9b00      	ldr	r3, [sp, #0]
 8011656:	2b00      	cmp	r3, #0
 8011658:	4605      	mov	r5, r0
 801165a:	dc67      	bgt.n	801172c <_dtoa_r+0x94c>
 801165c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801165e:	2b02      	cmp	r3, #2
 8011660:	dc41      	bgt.n	80116e6 <_dtoa_r+0x906>
 8011662:	e063      	b.n	801172c <_dtoa_r+0x94c>
 8011664:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011666:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801166a:	e746      	b.n	80114fa <_dtoa_r+0x71a>
 801166c:	9b07      	ldr	r3, [sp, #28]
 801166e:	1e5c      	subs	r4, r3, #1
 8011670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011672:	42a3      	cmp	r3, r4
 8011674:	bfbf      	itttt	lt
 8011676:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011678:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801167a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801167c:	1ae3      	sublt	r3, r4, r3
 801167e:	bfb4      	ite	lt
 8011680:	18d2      	addlt	r2, r2, r3
 8011682:	1b1c      	subge	r4, r3, r4
 8011684:	9b07      	ldr	r3, [sp, #28]
 8011686:	bfbc      	itt	lt
 8011688:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801168a:	2400      	movlt	r4, #0
 801168c:	2b00      	cmp	r3, #0
 801168e:	bfb5      	itete	lt
 8011690:	eba8 0603 	sublt.w	r6, r8, r3
 8011694:	9b07      	ldrge	r3, [sp, #28]
 8011696:	2300      	movlt	r3, #0
 8011698:	4646      	movge	r6, r8
 801169a:	e730      	b.n	80114fe <_dtoa_r+0x71e>
 801169c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801169e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80116a0:	4646      	mov	r6, r8
 80116a2:	e735      	b.n	8011510 <_dtoa_r+0x730>
 80116a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80116a6:	e75c      	b.n	8011562 <_dtoa_r+0x782>
 80116a8:	2300      	movs	r3, #0
 80116aa:	e788      	b.n	80115be <_dtoa_r+0x7de>
 80116ac:	3fe00000 	.word	0x3fe00000
 80116b0:	40240000 	.word	0x40240000
 80116b4:	40140000 	.word	0x40140000
 80116b8:	9b02      	ldr	r3, [sp, #8]
 80116ba:	e780      	b.n	80115be <_dtoa_r+0x7de>
 80116bc:	2300      	movs	r3, #0
 80116be:	930a      	str	r3, [sp, #40]	@ 0x28
 80116c0:	e782      	b.n	80115c8 <_dtoa_r+0x7e8>
 80116c2:	d099      	beq.n	80115f8 <_dtoa_r+0x818>
 80116c4:	9a08      	ldr	r2, [sp, #32]
 80116c6:	331c      	adds	r3, #28
 80116c8:	441a      	add	r2, r3
 80116ca:	4498      	add	r8, r3
 80116cc:	441e      	add	r6, r3
 80116ce:	9208      	str	r2, [sp, #32]
 80116d0:	e792      	b.n	80115f8 <_dtoa_r+0x818>
 80116d2:	4603      	mov	r3, r0
 80116d4:	e7f6      	b.n	80116c4 <_dtoa_r+0x8e4>
 80116d6:	9b07      	ldr	r3, [sp, #28]
 80116d8:	9704      	str	r7, [sp, #16]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	dc20      	bgt.n	8011720 <_dtoa_r+0x940>
 80116de:	9300      	str	r3, [sp, #0]
 80116e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116e2:	2b02      	cmp	r3, #2
 80116e4:	dd1e      	ble.n	8011724 <_dtoa_r+0x944>
 80116e6:	9b00      	ldr	r3, [sp, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	f47f aec0 	bne.w	801146e <_dtoa_r+0x68e>
 80116ee:	4621      	mov	r1, r4
 80116f0:	2205      	movs	r2, #5
 80116f2:	4658      	mov	r0, fp
 80116f4:	f000 fa9a 	bl	8011c2c <__multadd>
 80116f8:	4601      	mov	r1, r0
 80116fa:	4604      	mov	r4, r0
 80116fc:	4648      	mov	r0, r9
 80116fe:	f000 fcad 	bl	801205c <__mcmp>
 8011702:	2800      	cmp	r0, #0
 8011704:	f77f aeb3 	ble.w	801146e <_dtoa_r+0x68e>
 8011708:	4656      	mov	r6, sl
 801170a:	2331      	movs	r3, #49	@ 0x31
 801170c:	f806 3b01 	strb.w	r3, [r6], #1
 8011710:	9b04      	ldr	r3, [sp, #16]
 8011712:	3301      	adds	r3, #1
 8011714:	9304      	str	r3, [sp, #16]
 8011716:	e6ae      	b.n	8011476 <_dtoa_r+0x696>
 8011718:	9c07      	ldr	r4, [sp, #28]
 801171a:	9704      	str	r7, [sp, #16]
 801171c:	4625      	mov	r5, r4
 801171e:	e7f3      	b.n	8011708 <_dtoa_r+0x928>
 8011720:	9b07      	ldr	r3, [sp, #28]
 8011722:	9300      	str	r3, [sp, #0]
 8011724:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011726:	2b00      	cmp	r3, #0
 8011728:	f000 8104 	beq.w	8011934 <_dtoa_r+0xb54>
 801172c:	2e00      	cmp	r6, #0
 801172e:	dd05      	ble.n	801173c <_dtoa_r+0x95c>
 8011730:	4629      	mov	r1, r5
 8011732:	4632      	mov	r2, r6
 8011734:	4658      	mov	r0, fp
 8011736:	f000 fc25 	bl	8011f84 <__lshift>
 801173a:	4605      	mov	r5, r0
 801173c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801173e:	2b00      	cmp	r3, #0
 8011740:	d05a      	beq.n	80117f8 <_dtoa_r+0xa18>
 8011742:	6869      	ldr	r1, [r5, #4]
 8011744:	4658      	mov	r0, fp
 8011746:	f000 fa0f 	bl	8011b68 <_Balloc>
 801174a:	4606      	mov	r6, r0
 801174c:	b928      	cbnz	r0, 801175a <_dtoa_r+0x97a>
 801174e:	4b84      	ldr	r3, [pc, #528]	@ (8011960 <_dtoa_r+0xb80>)
 8011750:	4602      	mov	r2, r0
 8011752:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011756:	f7ff bb5a 	b.w	8010e0e <_dtoa_r+0x2e>
 801175a:	692a      	ldr	r2, [r5, #16]
 801175c:	3202      	adds	r2, #2
 801175e:	0092      	lsls	r2, r2, #2
 8011760:	f105 010c 	add.w	r1, r5, #12
 8011764:	300c      	adds	r0, #12
 8011766:	f001 f975 	bl	8012a54 <memcpy>
 801176a:	2201      	movs	r2, #1
 801176c:	4631      	mov	r1, r6
 801176e:	4658      	mov	r0, fp
 8011770:	f000 fc08 	bl	8011f84 <__lshift>
 8011774:	f10a 0301 	add.w	r3, sl, #1
 8011778:	9307      	str	r3, [sp, #28]
 801177a:	9b00      	ldr	r3, [sp, #0]
 801177c:	4453      	add	r3, sl
 801177e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011780:	9b02      	ldr	r3, [sp, #8]
 8011782:	f003 0301 	and.w	r3, r3, #1
 8011786:	462f      	mov	r7, r5
 8011788:	930a      	str	r3, [sp, #40]	@ 0x28
 801178a:	4605      	mov	r5, r0
 801178c:	9b07      	ldr	r3, [sp, #28]
 801178e:	4621      	mov	r1, r4
 8011790:	3b01      	subs	r3, #1
 8011792:	4648      	mov	r0, r9
 8011794:	9300      	str	r3, [sp, #0]
 8011796:	f7ff fa9a 	bl	8010cce <quorem>
 801179a:	4639      	mov	r1, r7
 801179c:	9002      	str	r0, [sp, #8]
 801179e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80117a2:	4648      	mov	r0, r9
 80117a4:	f000 fc5a 	bl	801205c <__mcmp>
 80117a8:	462a      	mov	r2, r5
 80117aa:	9008      	str	r0, [sp, #32]
 80117ac:	4621      	mov	r1, r4
 80117ae:	4658      	mov	r0, fp
 80117b0:	f000 fc70 	bl	8012094 <__mdiff>
 80117b4:	68c2      	ldr	r2, [r0, #12]
 80117b6:	4606      	mov	r6, r0
 80117b8:	bb02      	cbnz	r2, 80117fc <_dtoa_r+0xa1c>
 80117ba:	4601      	mov	r1, r0
 80117bc:	4648      	mov	r0, r9
 80117be:	f000 fc4d 	bl	801205c <__mcmp>
 80117c2:	4602      	mov	r2, r0
 80117c4:	4631      	mov	r1, r6
 80117c6:	4658      	mov	r0, fp
 80117c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80117ca:	f000 fa0d 	bl	8011be8 <_Bfree>
 80117ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80117d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117d2:	9e07      	ldr	r6, [sp, #28]
 80117d4:	ea43 0102 	orr.w	r1, r3, r2
 80117d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80117da:	4319      	orrs	r1, r3
 80117dc:	d110      	bne.n	8011800 <_dtoa_r+0xa20>
 80117de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80117e2:	d029      	beq.n	8011838 <_dtoa_r+0xa58>
 80117e4:	9b08      	ldr	r3, [sp, #32]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	dd02      	ble.n	80117f0 <_dtoa_r+0xa10>
 80117ea:	9b02      	ldr	r3, [sp, #8]
 80117ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80117f0:	9b00      	ldr	r3, [sp, #0]
 80117f2:	f883 8000 	strb.w	r8, [r3]
 80117f6:	e63f      	b.n	8011478 <_dtoa_r+0x698>
 80117f8:	4628      	mov	r0, r5
 80117fa:	e7bb      	b.n	8011774 <_dtoa_r+0x994>
 80117fc:	2201      	movs	r2, #1
 80117fe:	e7e1      	b.n	80117c4 <_dtoa_r+0x9e4>
 8011800:	9b08      	ldr	r3, [sp, #32]
 8011802:	2b00      	cmp	r3, #0
 8011804:	db04      	blt.n	8011810 <_dtoa_r+0xa30>
 8011806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011808:	430b      	orrs	r3, r1
 801180a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801180c:	430b      	orrs	r3, r1
 801180e:	d120      	bne.n	8011852 <_dtoa_r+0xa72>
 8011810:	2a00      	cmp	r2, #0
 8011812:	dded      	ble.n	80117f0 <_dtoa_r+0xa10>
 8011814:	4649      	mov	r1, r9
 8011816:	2201      	movs	r2, #1
 8011818:	4658      	mov	r0, fp
 801181a:	f000 fbb3 	bl	8011f84 <__lshift>
 801181e:	4621      	mov	r1, r4
 8011820:	4681      	mov	r9, r0
 8011822:	f000 fc1b 	bl	801205c <__mcmp>
 8011826:	2800      	cmp	r0, #0
 8011828:	dc03      	bgt.n	8011832 <_dtoa_r+0xa52>
 801182a:	d1e1      	bne.n	80117f0 <_dtoa_r+0xa10>
 801182c:	f018 0f01 	tst.w	r8, #1
 8011830:	d0de      	beq.n	80117f0 <_dtoa_r+0xa10>
 8011832:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8011836:	d1d8      	bne.n	80117ea <_dtoa_r+0xa0a>
 8011838:	9a00      	ldr	r2, [sp, #0]
 801183a:	2339      	movs	r3, #57	@ 0x39
 801183c:	7013      	strb	r3, [r2, #0]
 801183e:	4633      	mov	r3, r6
 8011840:	461e      	mov	r6, r3
 8011842:	3b01      	subs	r3, #1
 8011844:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011848:	2a39      	cmp	r2, #57	@ 0x39
 801184a:	d052      	beq.n	80118f2 <_dtoa_r+0xb12>
 801184c:	3201      	adds	r2, #1
 801184e:	701a      	strb	r2, [r3, #0]
 8011850:	e612      	b.n	8011478 <_dtoa_r+0x698>
 8011852:	2a00      	cmp	r2, #0
 8011854:	dd07      	ble.n	8011866 <_dtoa_r+0xa86>
 8011856:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801185a:	d0ed      	beq.n	8011838 <_dtoa_r+0xa58>
 801185c:	9a00      	ldr	r2, [sp, #0]
 801185e:	f108 0301 	add.w	r3, r8, #1
 8011862:	7013      	strb	r3, [r2, #0]
 8011864:	e608      	b.n	8011478 <_dtoa_r+0x698>
 8011866:	9b07      	ldr	r3, [sp, #28]
 8011868:	9a07      	ldr	r2, [sp, #28]
 801186a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801186e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011870:	4293      	cmp	r3, r2
 8011872:	d028      	beq.n	80118c6 <_dtoa_r+0xae6>
 8011874:	4649      	mov	r1, r9
 8011876:	2300      	movs	r3, #0
 8011878:	220a      	movs	r2, #10
 801187a:	4658      	mov	r0, fp
 801187c:	f000 f9d6 	bl	8011c2c <__multadd>
 8011880:	42af      	cmp	r7, r5
 8011882:	4681      	mov	r9, r0
 8011884:	f04f 0300 	mov.w	r3, #0
 8011888:	f04f 020a 	mov.w	r2, #10
 801188c:	4639      	mov	r1, r7
 801188e:	4658      	mov	r0, fp
 8011890:	d107      	bne.n	80118a2 <_dtoa_r+0xac2>
 8011892:	f000 f9cb 	bl	8011c2c <__multadd>
 8011896:	4607      	mov	r7, r0
 8011898:	4605      	mov	r5, r0
 801189a:	9b07      	ldr	r3, [sp, #28]
 801189c:	3301      	adds	r3, #1
 801189e:	9307      	str	r3, [sp, #28]
 80118a0:	e774      	b.n	801178c <_dtoa_r+0x9ac>
 80118a2:	f000 f9c3 	bl	8011c2c <__multadd>
 80118a6:	4629      	mov	r1, r5
 80118a8:	4607      	mov	r7, r0
 80118aa:	2300      	movs	r3, #0
 80118ac:	220a      	movs	r2, #10
 80118ae:	4658      	mov	r0, fp
 80118b0:	f000 f9bc 	bl	8011c2c <__multadd>
 80118b4:	4605      	mov	r5, r0
 80118b6:	e7f0      	b.n	801189a <_dtoa_r+0xaba>
 80118b8:	9b00      	ldr	r3, [sp, #0]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	bfcc      	ite	gt
 80118be:	461e      	movgt	r6, r3
 80118c0:	2601      	movle	r6, #1
 80118c2:	4456      	add	r6, sl
 80118c4:	2700      	movs	r7, #0
 80118c6:	4649      	mov	r1, r9
 80118c8:	2201      	movs	r2, #1
 80118ca:	4658      	mov	r0, fp
 80118cc:	f000 fb5a 	bl	8011f84 <__lshift>
 80118d0:	4621      	mov	r1, r4
 80118d2:	4681      	mov	r9, r0
 80118d4:	f000 fbc2 	bl	801205c <__mcmp>
 80118d8:	2800      	cmp	r0, #0
 80118da:	dcb0      	bgt.n	801183e <_dtoa_r+0xa5e>
 80118dc:	d102      	bne.n	80118e4 <_dtoa_r+0xb04>
 80118de:	f018 0f01 	tst.w	r8, #1
 80118e2:	d1ac      	bne.n	801183e <_dtoa_r+0xa5e>
 80118e4:	4633      	mov	r3, r6
 80118e6:	461e      	mov	r6, r3
 80118e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80118ec:	2a30      	cmp	r2, #48	@ 0x30
 80118ee:	d0fa      	beq.n	80118e6 <_dtoa_r+0xb06>
 80118f0:	e5c2      	b.n	8011478 <_dtoa_r+0x698>
 80118f2:	459a      	cmp	sl, r3
 80118f4:	d1a4      	bne.n	8011840 <_dtoa_r+0xa60>
 80118f6:	9b04      	ldr	r3, [sp, #16]
 80118f8:	3301      	adds	r3, #1
 80118fa:	9304      	str	r3, [sp, #16]
 80118fc:	2331      	movs	r3, #49	@ 0x31
 80118fe:	f88a 3000 	strb.w	r3, [sl]
 8011902:	e5b9      	b.n	8011478 <_dtoa_r+0x698>
 8011904:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011906:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8011964 <_dtoa_r+0xb84>
 801190a:	b11b      	cbz	r3, 8011914 <_dtoa_r+0xb34>
 801190c:	f10a 0308 	add.w	r3, sl, #8
 8011910:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011912:	6013      	str	r3, [r2, #0]
 8011914:	4650      	mov	r0, sl
 8011916:	b019      	add	sp, #100	@ 0x64
 8011918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801191c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801191e:	2b01      	cmp	r3, #1
 8011920:	f77f ae37 	ble.w	8011592 <_dtoa_r+0x7b2>
 8011924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011926:	930a      	str	r3, [sp, #40]	@ 0x28
 8011928:	2001      	movs	r0, #1
 801192a:	e655      	b.n	80115d8 <_dtoa_r+0x7f8>
 801192c:	9b00      	ldr	r3, [sp, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	f77f aed6 	ble.w	80116e0 <_dtoa_r+0x900>
 8011934:	4656      	mov	r6, sl
 8011936:	4621      	mov	r1, r4
 8011938:	4648      	mov	r0, r9
 801193a:	f7ff f9c8 	bl	8010cce <quorem>
 801193e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8011942:	f806 8b01 	strb.w	r8, [r6], #1
 8011946:	9b00      	ldr	r3, [sp, #0]
 8011948:	eba6 020a 	sub.w	r2, r6, sl
 801194c:	4293      	cmp	r3, r2
 801194e:	ddb3      	ble.n	80118b8 <_dtoa_r+0xad8>
 8011950:	4649      	mov	r1, r9
 8011952:	2300      	movs	r3, #0
 8011954:	220a      	movs	r2, #10
 8011956:	4658      	mov	r0, fp
 8011958:	f000 f968 	bl	8011c2c <__multadd>
 801195c:	4681      	mov	r9, r0
 801195e:	e7ea      	b.n	8011936 <_dtoa_r+0xb56>
 8011960:	08016b30 	.word	0x08016b30
 8011964:	08016ab4 	.word	0x08016ab4

08011968 <_free_r>:
 8011968:	b538      	push	{r3, r4, r5, lr}
 801196a:	4605      	mov	r5, r0
 801196c:	2900      	cmp	r1, #0
 801196e:	d041      	beq.n	80119f4 <_free_r+0x8c>
 8011970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011974:	1f0c      	subs	r4, r1, #4
 8011976:	2b00      	cmp	r3, #0
 8011978:	bfb8      	it	lt
 801197a:	18e4      	addlt	r4, r4, r3
 801197c:	f000 f8e8 	bl	8011b50 <__malloc_lock>
 8011980:	4a1d      	ldr	r2, [pc, #116]	@ (80119f8 <_free_r+0x90>)
 8011982:	6813      	ldr	r3, [r2, #0]
 8011984:	b933      	cbnz	r3, 8011994 <_free_r+0x2c>
 8011986:	6063      	str	r3, [r4, #4]
 8011988:	6014      	str	r4, [r2, #0]
 801198a:	4628      	mov	r0, r5
 801198c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011990:	f000 b8e4 	b.w	8011b5c <__malloc_unlock>
 8011994:	42a3      	cmp	r3, r4
 8011996:	d908      	bls.n	80119aa <_free_r+0x42>
 8011998:	6820      	ldr	r0, [r4, #0]
 801199a:	1821      	adds	r1, r4, r0
 801199c:	428b      	cmp	r3, r1
 801199e:	bf01      	itttt	eq
 80119a0:	6819      	ldreq	r1, [r3, #0]
 80119a2:	685b      	ldreq	r3, [r3, #4]
 80119a4:	1809      	addeq	r1, r1, r0
 80119a6:	6021      	streq	r1, [r4, #0]
 80119a8:	e7ed      	b.n	8011986 <_free_r+0x1e>
 80119aa:	461a      	mov	r2, r3
 80119ac:	685b      	ldr	r3, [r3, #4]
 80119ae:	b10b      	cbz	r3, 80119b4 <_free_r+0x4c>
 80119b0:	42a3      	cmp	r3, r4
 80119b2:	d9fa      	bls.n	80119aa <_free_r+0x42>
 80119b4:	6811      	ldr	r1, [r2, #0]
 80119b6:	1850      	adds	r0, r2, r1
 80119b8:	42a0      	cmp	r0, r4
 80119ba:	d10b      	bne.n	80119d4 <_free_r+0x6c>
 80119bc:	6820      	ldr	r0, [r4, #0]
 80119be:	4401      	add	r1, r0
 80119c0:	1850      	adds	r0, r2, r1
 80119c2:	4283      	cmp	r3, r0
 80119c4:	6011      	str	r1, [r2, #0]
 80119c6:	d1e0      	bne.n	801198a <_free_r+0x22>
 80119c8:	6818      	ldr	r0, [r3, #0]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	6053      	str	r3, [r2, #4]
 80119ce:	4408      	add	r0, r1
 80119d0:	6010      	str	r0, [r2, #0]
 80119d2:	e7da      	b.n	801198a <_free_r+0x22>
 80119d4:	d902      	bls.n	80119dc <_free_r+0x74>
 80119d6:	230c      	movs	r3, #12
 80119d8:	602b      	str	r3, [r5, #0]
 80119da:	e7d6      	b.n	801198a <_free_r+0x22>
 80119dc:	6820      	ldr	r0, [r4, #0]
 80119de:	1821      	adds	r1, r4, r0
 80119e0:	428b      	cmp	r3, r1
 80119e2:	bf04      	itt	eq
 80119e4:	6819      	ldreq	r1, [r3, #0]
 80119e6:	685b      	ldreq	r3, [r3, #4]
 80119e8:	6063      	str	r3, [r4, #4]
 80119ea:	bf04      	itt	eq
 80119ec:	1809      	addeq	r1, r1, r0
 80119ee:	6021      	streq	r1, [r4, #0]
 80119f0:	6054      	str	r4, [r2, #4]
 80119f2:	e7ca      	b.n	801198a <_free_r+0x22>
 80119f4:	bd38      	pop	{r3, r4, r5, pc}
 80119f6:	bf00      	nop
 80119f8:	2000632c 	.word	0x2000632c

080119fc <malloc>:
 80119fc:	4b02      	ldr	r3, [pc, #8]	@ (8011a08 <malloc+0xc>)
 80119fe:	4601      	mov	r1, r0
 8011a00:	6818      	ldr	r0, [r3, #0]
 8011a02:	f000 b825 	b.w	8011a50 <_malloc_r>
 8011a06:	bf00      	nop
 8011a08:	20004f34 	.word	0x20004f34

08011a0c <sbrk_aligned>:
 8011a0c:	b570      	push	{r4, r5, r6, lr}
 8011a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8011a4c <sbrk_aligned+0x40>)
 8011a10:	460c      	mov	r4, r1
 8011a12:	6831      	ldr	r1, [r6, #0]
 8011a14:	4605      	mov	r5, r0
 8011a16:	b911      	cbnz	r1, 8011a1e <sbrk_aligned+0x12>
 8011a18:	f001 f80c 	bl	8012a34 <_sbrk_r>
 8011a1c:	6030      	str	r0, [r6, #0]
 8011a1e:	4621      	mov	r1, r4
 8011a20:	4628      	mov	r0, r5
 8011a22:	f001 f807 	bl	8012a34 <_sbrk_r>
 8011a26:	1c43      	adds	r3, r0, #1
 8011a28:	d103      	bne.n	8011a32 <sbrk_aligned+0x26>
 8011a2a:	f04f 34ff 	mov.w	r4, #4294967295
 8011a2e:	4620      	mov	r0, r4
 8011a30:	bd70      	pop	{r4, r5, r6, pc}
 8011a32:	1cc4      	adds	r4, r0, #3
 8011a34:	f024 0403 	bic.w	r4, r4, #3
 8011a38:	42a0      	cmp	r0, r4
 8011a3a:	d0f8      	beq.n	8011a2e <sbrk_aligned+0x22>
 8011a3c:	1a21      	subs	r1, r4, r0
 8011a3e:	4628      	mov	r0, r5
 8011a40:	f000 fff8 	bl	8012a34 <_sbrk_r>
 8011a44:	3001      	adds	r0, #1
 8011a46:	d1f2      	bne.n	8011a2e <sbrk_aligned+0x22>
 8011a48:	e7ef      	b.n	8011a2a <sbrk_aligned+0x1e>
 8011a4a:	bf00      	nop
 8011a4c:	20006328 	.word	0x20006328

08011a50 <_malloc_r>:
 8011a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a54:	1ccd      	adds	r5, r1, #3
 8011a56:	f025 0503 	bic.w	r5, r5, #3
 8011a5a:	3508      	adds	r5, #8
 8011a5c:	2d0c      	cmp	r5, #12
 8011a5e:	bf38      	it	cc
 8011a60:	250c      	movcc	r5, #12
 8011a62:	2d00      	cmp	r5, #0
 8011a64:	4606      	mov	r6, r0
 8011a66:	db01      	blt.n	8011a6c <_malloc_r+0x1c>
 8011a68:	42a9      	cmp	r1, r5
 8011a6a:	d904      	bls.n	8011a76 <_malloc_r+0x26>
 8011a6c:	230c      	movs	r3, #12
 8011a6e:	6033      	str	r3, [r6, #0]
 8011a70:	2000      	movs	r0, #0
 8011a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011b4c <_malloc_r+0xfc>
 8011a7a:	f000 f869 	bl	8011b50 <__malloc_lock>
 8011a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8011a82:	461c      	mov	r4, r3
 8011a84:	bb44      	cbnz	r4, 8011ad8 <_malloc_r+0x88>
 8011a86:	4629      	mov	r1, r5
 8011a88:	4630      	mov	r0, r6
 8011a8a:	f7ff ffbf 	bl	8011a0c <sbrk_aligned>
 8011a8e:	1c43      	adds	r3, r0, #1
 8011a90:	4604      	mov	r4, r0
 8011a92:	d158      	bne.n	8011b46 <_malloc_r+0xf6>
 8011a94:	f8d8 4000 	ldr.w	r4, [r8]
 8011a98:	4627      	mov	r7, r4
 8011a9a:	2f00      	cmp	r7, #0
 8011a9c:	d143      	bne.n	8011b26 <_malloc_r+0xd6>
 8011a9e:	2c00      	cmp	r4, #0
 8011aa0:	d04b      	beq.n	8011b3a <_malloc_r+0xea>
 8011aa2:	6823      	ldr	r3, [r4, #0]
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	4630      	mov	r0, r6
 8011aa8:	eb04 0903 	add.w	r9, r4, r3
 8011aac:	f000 ffc2 	bl	8012a34 <_sbrk_r>
 8011ab0:	4581      	cmp	r9, r0
 8011ab2:	d142      	bne.n	8011b3a <_malloc_r+0xea>
 8011ab4:	6821      	ldr	r1, [r4, #0]
 8011ab6:	1a6d      	subs	r5, r5, r1
 8011ab8:	4629      	mov	r1, r5
 8011aba:	4630      	mov	r0, r6
 8011abc:	f7ff ffa6 	bl	8011a0c <sbrk_aligned>
 8011ac0:	3001      	adds	r0, #1
 8011ac2:	d03a      	beq.n	8011b3a <_malloc_r+0xea>
 8011ac4:	6823      	ldr	r3, [r4, #0]
 8011ac6:	442b      	add	r3, r5
 8011ac8:	6023      	str	r3, [r4, #0]
 8011aca:	f8d8 3000 	ldr.w	r3, [r8]
 8011ace:	685a      	ldr	r2, [r3, #4]
 8011ad0:	bb62      	cbnz	r2, 8011b2c <_malloc_r+0xdc>
 8011ad2:	f8c8 7000 	str.w	r7, [r8]
 8011ad6:	e00f      	b.n	8011af8 <_malloc_r+0xa8>
 8011ad8:	6822      	ldr	r2, [r4, #0]
 8011ada:	1b52      	subs	r2, r2, r5
 8011adc:	d420      	bmi.n	8011b20 <_malloc_r+0xd0>
 8011ade:	2a0b      	cmp	r2, #11
 8011ae0:	d917      	bls.n	8011b12 <_malloc_r+0xc2>
 8011ae2:	1961      	adds	r1, r4, r5
 8011ae4:	42a3      	cmp	r3, r4
 8011ae6:	6025      	str	r5, [r4, #0]
 8011ae8:	bf18      	it	ne
 8011aea:	6059      	strne	r1, [r3, #4]
 8011aec:	6863      	ldr	r3, [r4, #4]
 8011aee:	bf08      	it	eq
 8011af0:	f8c8 1000 	streq.w	r1, [r8]
 8011af4:	5162      	str	r2, [r4, r5]
 8011af6:	604b      	str	r3, [r1, #4]
 8011af8:	4630      	mov	r0, r6
 8011afa:	f000 f82f 	bl	8011b5c <__malloc_unlock>
 8011afe:	f104 000b 	add.w	r0, r4, #11
 8011b02:	1d23      	adds	r3, r4, #4
 8011b04:	f020 0007 	bic.w	r0, r0, #7
 8011b08:	1ac2      	subs	r2, r0, r3
 8011b0a:	bf1c      	itt	ne
 8011b0c:	1a1b      	subne	r3, r3, r0
 8011b0e:	50a3      	strne	r3, [r4, r2]
 8011b10:	e7af      	b.n	8011a72 <_malloc_r+0x22>
 8011b12:	6862      	ldr	r2, [r4, #4]
 8011b14:	42a3      	cmp	r3, r4
 8011b16:	bf0c      	ite	eq
 8011b18:	f8c8 2000 	streq.w	r2, [r8]
 8011b1c:	605a      	strne	r2, [r3, #4]
 8011b1e:	e7eb      	b.n	8011af8 <_malloc_r+0xa8>
 8011b20:	4623      	mov	r3, r4
 8011b22:	6864      	ldr	r4, [r4, #4]
 8011b24:	e7ae      	b.n	8011a84 <_malloc_r+0x34>
 8011b26:	463c      	mov	r4, r7
 8011b28:	687f      	ldr	r7, [r7, #4]
 8011b2a:	e7b6      	b.n	8011a9a <_malloc_r+0x4a>
 8011b2c:	461a      	mov	r2, r3
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	42a3      	cmp	r3, r4
 8011b32:	d1fb      	bne.n	8011b2c <_malloc_r+0xdc>
 8011b34:	2300      	movs	r3, #0
 8011b36:	6053      	str	r3, [r2, #4]
 8011b38:	e7de      	b.n	8011af8 <_malloc_r+0xa8>
 8011b3a:	230c      	movs	r3, #12
 8011b3c:	6033      	str	r3, [r6, #0]
 8011b3e:	4630      	mov	r0, r6
 8011b40:	f000 f80c 	bl	8011b5c <__malloc_unlock>
 8011b44:	e794      	b.n	8011a70 <_malloc_r+0x20>
 8011b46:	6005      	str	r5, [r0, #0]
 8011b48:	e7d6      	b.n	8011af8 <_malloc_r+0xa8>
 8011b4a:	bf00      	nop
 8011b4c:	2000632c 	.word	0x2000632c

08011b50 <__malloc_lock>:
 8011b50:	4801      	ldr	r0, [pc, #4]	@ (8011b58 <__malloc_lock+0x8>)
 8011b52:	f7ff b8ba 	b.w	8010cca <__retarget_lock_acquire_recursive>
 8011b56:	bf00      	nop
 8011b58:	20006324 	.word	0x20006324

08011b5c <__malloc_unlock>:
 8011b5c:	4801      	ldr	r0, [pc, #4]	@ (8011b64 <__malloc_unlock+0x8>)
 8011b5e:	f7ff b8b5 	b.w	8010ccc <__retarget_lock_release_recursive>
 8011b62:	bf00      	nop
 8011b64:	20006324 	.word	0x20006324

08011b68 <_Balloc>:
 8011b68:	b570      	push	{r4, r5, r6, lr}
 8011b6a:	69c6      	ldr	r6, [r0, #28]
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	460d      	mov	r5, r1
 8011b70:	b976      	cbnz	r6, 8011b90 <_Balloc+0x28>
 8011b72:	2010      	movs	r0, #16
 8011b74:	f7ff ff42 	bl	80119fc <malloc>
 8011b78:	4602      	mov	r2, r0
 8011b7a:	61e0      	str	r0, [r4, #28]
 8011b7c:	b920      	cbnz	r0, 8011b88 <_Balloc+0x20>
 8011b7e:	4b18      	ldr	r3, [pc, #96]	@ (8011be0 <_Balloc+0x78>)
 8011b80:	4818      	ldr	r0, [pc, #96]	@ (8011be4 <_Balloc+0x7c>)
 8011b82:	216b      	movs	r1, #107	@ 0x6b
 8011b84:	f000 ff74 	bl	8012a70 <__assert_func>
 8011b88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011b8c:	6006      	str	r6, [r0, #0]
 8011b8e:	60c6      	str	r6, [r0, #12]
 8011b90:	69e6      	ldr	r6, [r4, #28]
 8011b92:	68f3      	ldr	r3, [r6, #12]
 8011b94:	b183      	cbz	r3, 8011bb8 <_Balloc+0x50>
 8011b96:	69e3      	ldr	r3, [r4, #28]
 8011b98:	68db      	ldr	r3, [r3, #12]
 8011b9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011b9e:	b9b8      	cbnz	r0, 8011bd0 <_Balloc+0x68>
 8011ba0:	2101      	movs	r1, #1
 8011ba2:	fa01 f605 	lsl.w	r6, r1, r5
 8011ba6:	1d72      	adds	r2, r6, #5
 8011ba8:	0092      	lsls	r2, r2, #2
 8011baa:	4620      	mov	r0, r4
 8011bac:	f000 ff7e 	bl	8012aac <_calloc_r>
 8011bb0:	b160      	cbz	r0, 8011bcc <_Balloc+0x64>
 8011bb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011bb6:	e00e      	b.n	8011bd6 <_Balloc+0x6e>
 8011bb8:	2221      	movs	r2, #33	@ 0x21
 8011bba:	2104      	movs	r1, #4
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f000 ff75 	bl	8012aac <_calloc_r>
 8011bc2:	69e3      	ldr	r3, [r4, #28]
 8011bc4:	60f0      	str	r0, [r6, #12]
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1e4      	bne.n	8011b96 <_Balloc+0x2e>
 8011bcc:	2000      	movs	r0, #0
 8011bce:	bd70      	pop	{r4, r5, r6, pc}
 8011bd0:	6802      	ldr	r2, [r0, #0]
 8011bd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011bdc:	e7f7      	b.n	8011bce <_Balloc+0x66>
 8011bde:	bf00      	nop
 8011be0:	08016ac1 	.word	0x08016ac1
 8011be4:	08016b41 	.word	0x08016b41

08011be8 <_Bfree>:
 8011be8:	b570      	push	{r4, r5, r6, lr}
 8011bea:	69c6      	ldr	r6, [r0, #28]
 8011bec:	4605      	mov	r5, r0
 8011bee:	460c      	mov	r4, r1
 8011bf0:	b976      	cbnz	r6, 8011c10 <_Bfree+0x28>
 8011bf2:	2010      	movs	r0, #16
 8011bf4:	f7ff ff02 	bl	80119fc <malloc>
 8011bf8:	4602      	mov	r2, r0
 8011bfa:	61e8      	str	r0, [r5, #28]
 8011bfc:	b920      	cbnz	r0, 8011c08 <_Bfree+0x20>
 8011bfe:	4b09      	ldr	r3, [pc, #36]	@ (8011c24 <_Bfree+0x3c>)
 8011c00:	4809      	ldr	r0, [pc, #36]	@ (8011c28 <_Bfree+0x40>)
 8011c02:	218f      	movs	r1, #143	@ 0x8f
 8011c04:	f000 ff34 	bl	8012a70 <__assert_func>
 8011c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011c0c:	6006      	str	r6, [r0, #0]
 8011c0e:	60c6      	str	r6, [r0, #12]
 8011c10:	b13c      	cbz	r4, 8011c22 <_Bfree+0x3a>
 8011c12:	69eb      	ldr	r3, [r5, #28]
 8011c14:	6862      	ldr	r2, [r4, #4]
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011c1c:	6021      	str	r1, [r4, #0]
 8011c1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011c22:	bd70      	pop	{r4, r5, r6, pc}
 8011c24:	08016ac1 	.word	0x08016ac1
 8011c28:	08016b41 	.word	0x08016b41

08011c2c <__multadd>:
 8011c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c30:	690d      	ldr	r5, [r1, #16]
 8011c32:	4607      	mov	r7, r0
 8011c34:	460c      	mov	r4, r1
 8011c36:	461e      	mov	r6, r3
 8011c38:	f101 0c14 	add.w	ip, r1, #20
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	f8dc 3000 	ldr.w	r3, [ip]
 8011c42:	b299      	uxth	r1, r3
 8011c44:	fb02 6101 	mla	r1, r2, r1, r6
 8011c48:	0c1e      	lsrs	r6, r3, #16
 8011c4a:	0c0b      	lsrs	r3, r1, #16
 8011c4c:	fb02 3306 	mla	r3, r2, r6, r3
 8011c50:	b289      	uxth	r1, r1
 8011c52:	3001      	adds	r0, #1
 8011c54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011c58:	4285      	cmp	r5, r0
 8011c5a:	f84c 1b04 	str.w	r1, [ip], #4
 8011c5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011c62:	dcec      	bgt.n	8011c3e <__multadd+0x12>
 8011c64:	b30e      	cbz	r6, 8011caa <__multadd+0x7e>
 8011c66:	68a3      	ldr	r3, [r4, #8]
 8011c68:	42ab      	cmp	r3, r5
 8011c6a:	dc19      	bgt.n	8011ca0 <__multadd+0x74>
 8011c6c:	6861      	ldr	r1, [r4, #4]
 8011c6e:	4638      	mov	r0, r7
 8011c70:	3101      	adds	r1, #1
 8011c72:	f7ff ff79 	bl	8011b68 <_Balloc>
 8011c76:	4680      	mov	r8, r0
 8011c78:	b928      	cbnz	r0, 8011c86 <__multadd+0x5a>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8011cb0 <__multadd+0x84>)
 8011c7e:	480d      	ldr	r0, [pc, #52]	@ (8011cb4 <__multadd+0x88>)
 8011c80:	21ba      	movs	r1, #186	@ 0xba
 8011c82:	f000 fef5 	bl	8012a70 <__assert_func>
 8011c86:	6922      	ldr	r2, [r4, #16]
 8011c88:	3202      	adds	r2, #2
 8011c8a:	f104 010c 	add.w	r1, r4, #12
 8011c8e:	0092      	lsls	r2, r2, #2
 8011c90:	300c      	adds	r0, #12
 8011c92:	f000 fedf 	bl	8012a54 <memcpy>
 8011c96:	4621      	mov	r1, r4
 8011c98:	4638      	mov	r0, r7
 8011c9a:	f7ff ffa5 	bl	8011be8 <_Bfree>
 8011c9e:	4644      	mov	r4, r8
 8011ca0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011ca4:	3501      	adds	r5, #1
 8011ca6:	615e      	str	r6, [r3, #20]
 8011ca8:	6125      	str	r5, [r4, #16]
 8011caa:	4620      	mov	r0, r4
 8011cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cb0:	08016b30 	.word	0x08016b30
 8011cb4:	08016b41 	.word	0x08016b41

08011cb8 <__hi0bits>:
 8011cb8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8011cbc:	4603      	mov	r3, r0
 8011cbe:	bf36      	itet	cc
 8011cc0:	0403      	lslcc	r3, r0, #16
 8011cc2:	2000      	movcs	r0, #0
 8011cc4:	2010      	movcc	r0, #16
 8011cc6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8011cca:	bf3c      	itt	cc
 8011ccc:	021b      	lslcc	r3, r3, #8
 8011cce:	3008      	addcc	r0, #8
 8011cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011cd4:	bf3c      	itt	cc
 8011cd6:	011b      	lslcc	r3, r3, #4
 8011cd8:	3004      	addcc	r0, #4
 8011cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011cde:	bf3c      	itt	cc
 8011ce0:	009b      	lslcc	r3, r3, #2
 8011ce2:	3002      	addcc	r0, #2
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	db05      	blt.n	8011cf4 <__hi0bits+0x3c>
 8011ce8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011cec:	f100 0001 	add.w	r0, r0, #1
 8011cf0:	bf08      	it	eq
 8011cf2:	2020      	moveq	r0, #32
 8011cf4:	4770      	bx	lr

08011cf6 <__lo0bits>:
 8011cf6:	6803      	ldr	r3, [r0, #0]
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	f013 0007 	ands.w	r0, r3, #7
 8011cfe:	d00b      	beq.n	8011d18 <__lo0bits+0x22>
 8011d00:	07d9      	lsls	r1, r3, #31
 8011d02:	d421      	bmi.n	8011d48 <__lo0bits+0x52>
 8011d04:	0798      	lsls	r0, r3, #30
 8011d06:	bf49      	itett	mi
 8011d08:	085b      	lsrmi	r3, r3, #1
 8011d0a:	089b      	lsrpl	r3, r3, #2
 8011d0c:	2001      	movmi	r0, #1
 8011d0e:	6013      	strmi	r3, [r2, #0]
 8011d10:	bf5c      	itt	pl
 8011d12:	6013      	strpl	r3, [r2, #0]
 8011d14:	2002      	movpl	r0, #2
 8011d16:	4770      	bx	lr
 8011d18:	b299      	uxth	r1, r3
 8011d1a:	b909      	cbnz	r1, 8011d20 <__lo0bits+0x2a>
 8011d1c:	0c1b      	lsrs	r3, r3, #16
 8011d1e:	2010      	movs	r0, #16
 8011d20:	b2d9      	uxtb	r1, r3
 8011d22:	b909      	cbnz	r1, 8011d28 <__lo0bits+0x32>
 8011d24:	3008      	adds	r0, #8
 8011d26:	0a1b      	lsrs	r3, r3, #8
 8011d28:	0719      	lsls	r1, r3, #28
 8011d2a:	bf04      	itt	eq
 8011d2c:	091b      	lsreq	r3, r3, #4
 8011d2e:	3004      	addeq	r0, #4
 8011d30:	0799      	lsls	r1, r3, #30
 8011d32:	bf04      	itt	eq
 8011d34:	089b      	lsreq	r3, r3, #2
 8011d36:	3002      	addeq	r0, #2
 8011d38:	07d9      	lsls	r1, r3, #31
 8011d3a:	d403      	bmi.n	8011d44 <__lo0bits+0x4e>
 8011d3c:	085b      	lsrs	r3, r3, #1
 8011d3e:	f100 0001 	add.w	r0, r0, #1
 8011d42:	d003      	beq.n	8011d4c <__lo0bits+0x56>
 8011d44:	6013      	str	r3, [r2, #0]
 8011d46:	4770      	bx	lr
 8011d48:	2000      	movs	r0, #0
 8011d4a:	4770      	bx	lr
 8011d4c:	2020      	movs	r0, #32
 8011d4e:	4770      	bx	lr

08011d50 <__i2b>:
 8011d50:	b510      	push	{r4, lr}
 8011d52:	460c      	mov	r4, r1
 8011d54:	2101      	movs	r1, #1
 8011d56:	f7ff ff07 	bl	8011b68 <_Balloc>
 8011d5a:	4602      	mov	r2, r0
 8011d5c:	b928      	cbnz	r0, 8011d6a <__i2b+0x1a>
 8011d5e:	4b05      	ldr	r3, [pc, #20]	@ (8011d74 <__i2b+0x24>)
 8011d60:	4805      	ldr	r0, [pc, #20]	@ (8011d78 <__i2b+0x28>)
 8011d62:	f240 1145 	movw	r1, #325	@ 0x145
 8011d66:	f000 fe83 	bl	8012a70 <__assert_func>
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	6144      	str	r4, [r0, #20]
 8011d6e:	6103      	str	r3, [r0, #16]
 8011d70:	bd10      	pop	{r4, pc}
 8011d72:	bf00      	nop
 8011d74:	08016b30 	.word	0x08016b30
 8011d78:	08016b41 	.word	0x08016b41

08011d7c <__multiply>:
 8011d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d80:	4614      	mov	r4, r2
 8011d82:	690a      	ldr	r2, [r1, #16]
 8011d84:	6923      	ldr	r3, [r4, #16]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	bfa8      	it	ge
 8011d8a:	4623      	movge	r3, r4
 8011d8c:	460f      	mov	r7, r1
 8011d8e:	bfa4      	itt	ge
 8011d90:	460c      	movge	r4, r1
 8011d92:	461f      	movge	r7, r3
 8011d94:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011d98:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8011d9c:	68a3      	ldr	r3, [r4, #8]
 8011d9e:	6861      	ldr	r1, [r4, #4]
 8011da0:	eb0a 0609 	add.w	r6, sl, r9
 8011da4:	42b3      	cmp	r3, r6
 8011da6:	b085      	sub	sp, #20
 8011da8:	bfb8      	it	lt
 8011daa:	3101      	addlt	r1, #1
 8011dac:	f7ff fedc 	bl	8011b68 <_Balloc>
 8011db0:	b930      	cbnz	r0, 8011dc0 <__multiply+0x44>
 8011db2:	4602      	mov	r2, r0
 8011db4:	4b44      	ldr	r3, [pc, #272]	@ (8011ec8 <__multiply+0x14c>)
 8011db6:	4845      	ldr	r0, [pc, #276]	@ (8011ecc <__multiply+0x150>)
 8011db8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011dbc:	f000 fe58 	bl	8012a70 <__assert_func>
 8011dc0:	f100 0514 	add.w	r5, r0, #20
 8011dc4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011dc8:	462b      	mov	r3, r5
 8011dca:	2200      	movs	r2, #0
 8011dcc:	4543      	cmp	r3, r8
 8011dce:	d321      	bcc.n	8011e14 <__multiply+0x98>
 8011dd0:	f107 0114 	add.w	r1, r7, #20
 8011dd4:	f104 0214 	add.w	r2, r4, #20
 8011dd8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011ddc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011de0:	9302      	str	r3, [sp, #8]
 8011de2:	1b13      	subs	r3, r2, r4
 8011de4:	3b15      	subs	r3, #21
 8011de6:	f023 0303 	bic.w	r3, r3, #3
 8011dea:	3304      	adds	r3, #4
 8011dec:	f104 0715 	add.w	r7, r4, #21
 8011df0:	42ba      	cmp	r2, r7
 8011df2:	bf38      	it	cc
 8011df4:	2304      	movcc	r3, #4
 8011df6:	9301      	str	r3, [sp, #4]
 8011df8:	9b02      	ldr	r3, [sp, #8]
 8011dfa:	9103      	str	r1, [sp, #12]
 8011dfc:	428b      	cmp	r3, r1
 8011dfe:	d80c      	bhi.n	8011e1a <__multiply+0x9e>
 8011e00:	2e00      	cmp	r6, #0
 8011e02:	dd03      	ble.n	8011e0c <__multiply+0x90>
 8011e04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d05b      	beq.n	8011ec4 <__multiply+0x148>
 8011e0c:	6106      	str	r6, [r0, #16]
 8011e0e:	b005      	add	sp, #20
 8011e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e14:	f843 2b04 	str.w	r2, [r3], #4
 8011e18:	e7d8      	b.n	8011dcc <__multiply+0x50>
 8011e1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8011e1e:	f1ba 0f00 	cmp.w	sl, #0
 8011e22:	d024      	beq.n	8011e6e <__multiply+0xf2>
 8011e24:	f104 0e14 	add.w	lr, r4, #20
 8011e28:	46a9      	mov	r9, r5
 8011e2a:	f04f 0c00 	mov.w	ip, #0
 8011e2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011e32:	f8d9 3000 	ldr.w	r3, [r9]
 8011e36:	fa1f fb87 	uxth.w	fp, r7
 8011e3a:	b29b      	uxth	r3, r3
 8011e3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8011e40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011e44:	f8d9 7000 	ldr.w	r7, [r9]
 8011e48:	4463      	add	r3, ip
 8011e4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011e4e:	fb0a c70b 	mla	r7, sl, fp, ip
 8011e52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011e56:	b29b      	uxth	r3, r3
 8011e58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011e5c:	4572      	cmp	r2, lr
 8011e5e:	f849 3b04 	str.w	r3, [r9], #4
 8011e62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011e66:	d8e2      	bhi.n	8011e2e <__multiply+0xb2>
 8011e68:	9b01      	ldr	r3, [sp, #4]
 8011e6a:	f845 c003 	str.w	ip, [r5, r3]
 8011e6e:	9b03      	ldr	r3, [sp, #12]
 8011e70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011e74:	3104      	adds	r1, #4
 8011e76:	f1b9 0f00 	cmp.w	r9, #0
 8011e7a:	d021      	beq.n	8011ec0 <__multiply+0x144>
 8011e7c:	682b      	ldr	r3, [r5, #0]
 8011e7e:	f104 0c14 	add.w	ip, r4, #20
 8011e82:	46ae      	mov	lr, r5
 8011e84:	f04f 0a00 	mov.w	sl, #0
 8011e88:	f8bc b000 	ldrh.w	fp, [ip]
 8011e8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011e90:	fb09 770b 	mla	r7, r9, fp, r7
 8011e94:	4457      	add	r7, sl
 8011e96:	b29b      	uxth	r3, r3
 8011e98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011e9c:	f84e 3b04 	str.w	r3, [lr], #4
 8011ea0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011ea4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011ea8:	f8be 3000 	ldrh.w	r3, [lr]
 8011eac:	fb09 330a 	mla	r3, r9, sl, r3
 8011eb0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011eb4:	4562      	cmp	r2, ip
 8011eb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011eba:	d8e5      	bhi.n	8011e88 <__multiply+0x10c>
 8011ebc:	9f01      	ldr	r7, [sp, #4]
 8011ebe:	51eb      	str	r3, [r5, r7]
 8011ec0:	3504      	adds	r5, #4
 8011ec2:	e799      	b.n	8011df8 <__multiply+0x7c>
 8011ec4:	3e01      	subs	r6, #1
 8011ec6:	e79b      	b.n	8011e00 <__multiply+0x84>
 8011ec8:	08016b30 	.word	0x08016b30
 8011ecc:	08016b41 	.word	0x08016b41

08011ed0 <__pow5mult>:
 8011ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ed4:	4615      	mov	r5, r2
 8011ed6:	f012 0203 	ands.w	r2, r2, #3
 8011eda:	4607      	mov	r7, r0
 8011edc:	460e      	mov	r6, r1
 8011ede:	d007      	beq.n	8011ef0 <__pow5mult+0x20>
 8011ee0:	4c25      	ldr	r4, [pc, #148]	@ (8011f78 <__pow5mult+0xa8>)
 8011ee2:	3a01      	subs	r2, #1
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011eea:	f7ff fe9f 	bl	8011c2c <__multadd>
 8011eee:	4606      	mov	r6, r0
 8011ef0:	10ad      	asrs	r5, r5, #2
 8011ef2:	d03d      	beq.n	8011f70 <__pow5mult+0xa0>
 8011ef4:	69fc      	ldr	r4, [r7, #28]
 8011ef6:	b97c      	cbnz	r4, 8011f18 <__pow5mult+0x48>
 8011ef8:	2010      	movs	r0, #16
 8011efa:	f7ff fd7f 	bl	80119fc <malloc>
 8011efe:	4602      	mov	r2, r0
 8011f00:	61f8      	str	r0, [r7, #28]
 8011f02:	b928      	cbnz	r0, 8011f10 <__pow5mult+0x40>
 8011f04:	4b1d      	ldr	r3, [pc, #116]	@ (8011f7c <__pow5mult+0xac>)
 8011f06:	481e      	ldr	r0, [pc, #120]	@ (8011f80 <__pow5mult+0xb0>)
 8011f08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011f0c:	f000 fdb0 	bl	8012a70 <__assert_func>
 8011f10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011f14:	6004      	str	r4, [r0, #0]
 8011f16:	60c4      	str	r4, [r0, #12]
 8011f18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011f1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011f20:	b94c      	cbnz	r4, 8011f36 <__pow5mult+0x66>
 8011f22:	f240 2171 	movw	r1, #625	@ 0x271
 8011f26:	4638      	mov	r0, r7
 8011f28:	f7ff ff12 	bl	8011d50 <__i2b>
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	f8c8 0008 	str.w	r0, [r8, #8]
 8011f32:	4604      	mov	r4, r0
 8011f34:	6003      	str	r3, [r0, #0]
 8011f36:	f04f 0900 	mov.w	r9, #0
 8011f3a:	07eb      	lsls	r3, r5, #31
 8011f3c:	d50a      	bpl.n	8011f54 <__pow5mult+0x84>
 8011f3e:	4631      	mov	r1, r6
 8011f40:	4622      	mov	r2, r4
 8011f42:	4638      	mov	r0, r7
 8011f44:	f7ff ff1a 	bl	8011d7c <__multiply>
 8011f48:	4631      	mov	r1, r6
 8011f4a:	4680      	mov	r8, r0
 8011f4c:	4638      	mov	r0, r7
 8011f4e:	f7ff fe4b 	bl	8011be8 <_Bfree>
 8011f52:	4646      	mov	r6, r8
 8011f54:	106d      	asrs	r5, r5, #1
 8011f56:	d00b      	beq.n	8011f70 <__pow5mult+0xa0>
 8011f58:	6820      	ldr	r0, [r4, #0]
 8011f5a:	b938      	cbnz	r0, 8011f6c <__pow5mult+0x9c>
 8011f5c:	4622      	mov	r2, r4
 8011f5e:	4621      	mov	r1, r4
 8011f60:	4638      	mov	r0, r7
 8011f62:	f7ff ff0b 	bl	8011d7c <__multiply>
 8011f66:	6020      	str	r0, [r4, #0]
 8011f68:	f8c0 9000 	str.w	r9, [r0]
 8011f6c:	4604      	mov	r4, r0
 8011f6e:	e7e4      	b.n	8011f3a <__pow5mult+0x6a>
 8011f70:	4630      	mov	r0, r6
 8011f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f76:	bf00      	nop
 8011f78:	08016b9c 	.word	0x08016b9c
 8011f7c:	08016ac1 	.word	0x08016ac1
 8011f80:	08016b41 	.word	0x08016b41

08011f84 <__lshift>:
 8011f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f88:	460c      	mov	r4, r1
 8011f8a:	6849      	ldr	r1, [r1, #4]
 8011f8c:	6923      	ldr	r3, [r4, #16]
 8011f8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011f92:	68a3      	ldr	r3, [r4, #8]
 8011f94:	4607      	mov	r7, r0
 8011f96:	4691      	mov	r9, r2
 8011f98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011f9c:	f108 0601 	add.w	r6, r8, #1
 8011fa0:	42b3      	cmp	r3, r6
 8011fa2:	db0b      	blt.n	8011fbc <__lshift+0x38>
 8011fa4:	4638      	mov	r0, r7
 8011fa6:	f7ff fddf 	bl	8011b68 <_Balloc>
 8011faa:	4605      	mov	r5, r0
 8011fac:	b948      	cbnz	r0, 8011fc2 <__lshift+0x3e>
 8011fae:	4602      	mov	r2, r0
 8011fb0:	4b28      	ldr	r3, [pc, #160]	@ (8012054 <__lshift+0xd0>)
 8011fb2:	4829      	ldr	r0, [pc, #164]	@ (8012058 <__lshift+0xd4>)
 8011fb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011fb8:	f000 fd5a 	bl	8012a70 <__assert_func>
 8011fbc:	3101      	adds	r1, #1
 8011fbe:	005b      	lsls	r3, r3, #1
 8011fc0:	e7ee      	b.n	8011fa0 <__lshift+0x1c>
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	f100 0114 	add.w	r1, r0, #20
 8011fc8:	f100 0210 	add.w	r2, r0, #16
 8011fcc:	4618      	mov	r0, r3
 8011fce:	4553      	cmp	r3, sl
 8011fd0:	db33      	blt.n	801203a <__lshift+0xb6>
 8011fd2:	6920      	ldr	r0, [r4, #16]
 8011fd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011fd8:	f104 0314 	add.w	r3, r4, #20
 8011fdc:	f019 091f 	ands.w	r9, r9, #31
 8011fe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011fe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011fe8:	d02b      	beq.n	8012042 <__lshift+0xbe>
 8011fea:	f1c9 0e20 	rsb	lr, r9, #32
 8011fee:	468a      	mov	sl, r1
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	6818      	ldr	r0, [r3, #0]
 8011ff4:	fa00 f009 	lsl.w	r0, r0, r9
 8011ff8:	4310      	orrs	r0, r2
 8011ffa:	f84a 0b04 	str.w	r0, [sl], #4
 8011ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8012002:	459c      	cmp	ip, r3
 8012004:	fa22 f20e 	lsr.w	r2, r2, lr
 8012008:	d8f3      	bhi.n	8011ff2 <__lshift+0x6e>
 801200a:	ebac 0304 	sub.w	r3, ip, r4
 801200e:	3b15      	subs	r3, #21
 8012010:	f023 0303 	bic.w	r3, r3, #3
 8012014:	3304      	adds	r3, #4
 8012016:	f104 0015 	add.w	r0, r4, #21
 801201a:	4584      	cmp	ip, r0
 801201c:	bf38      	it	cc
 801201e:	2304      	movcc	r3, #4
 8012020:	50ca      	str	r2, [r1, r3]
 8012022:	b10a      	cbz	r2, 8012028 <__lshift+0xa4>
 8012024:	f108 0602 	add.w	r6, r8, #2
 8012028:	3e01      	subs	r6, #1
 801202a:	4638      	mov	r0, r7
 801202c:	612e      	str	r6, [r5, #16]
 801202e:	4621      	mov	r1, r4
 8012030:	f7ff fdda 	bl	8011be8 <_Bfree>
 8012034:	4628      	mov	r0, r5
 8012036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801203a:	f842 0f04 	str.w	r0, [r2, #4]!
 801203e:	3301      	adds	r3, #1
 8012040:	e7c5      	b.n	8011fce <__lshift+0x4a>
 8012042:	3904      	subs	r1, #4
 8012044:	f853 2b04 	ldr.w	r2, [r3], #4
 8012048:	f841 2f04 	str.w	r2, [r1, #4]!
 801204c:	459c      	cmp	ip, r3
 801204e:	d8f9      	bhi.n	8012044 <__lshift+0xc0>
 8012050:	e7ea      	b.n	8012028 <__lshift+0xa4>
 8012052:	bf00      	nop
 8012054:	08016b30 	.word	0x08016b30
 8012058:	08016b41 	.word	0x08016b41

0801205c <__mcmp>:
 801205c:	690a      	ldr	r2, [r1, #16]
 801205e:	4603      	mov	r3, r0
 8012060:	6900      	ldr	r0, [r0, #16]
 8012062:	1a80      	subs	r0, r0, r2
 8012064:	b530      	push	{r4, r5, lr}
 8012066:	d10e      	bne.n	8012086 <__mcmp+0x2a>
 8012068:	3314      	adds	r3, #20
 801206a:	3114      	adds	r1, #20
 801206c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012070:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012074:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012078:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801207c:	4295      	cmp	r5, r2
 801207e:	d003      	beq.n	8012088 <__mcmp+0x2c>
 8012080:	d205      	bcs.n	801208e <__mcmp+0x32>
 8012082:	f04f 30ff 	mov.w	r0, #4294967295
 8012086:	bd30      	pop	{r4, r5, pc}
 8012088:	42a3      	cmp	r3, r4
 801208a:	d3f3      	bcc.n	8012074 <__mcmp+0x18>
 801208c:	e7fb      	b.n	8012086 <__mcmp+0x2a>
 801208e:	2001      	movs	r0, #1
 8012090:	e7f9      	b.n	8012086 <__mcmp+0x2a>
	...

08012094 <__mdiff>:
 8012094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012098:	4689      	mov	r9, r1
 801209a:	4606      	mov	r6, r0
 801209c:	4611      	mov	r1, r2
 801209e:	4648      	mov	r0, r9
 80120a0:	4614      	mov	r4, r2
 80120a2:	f7ff ffdb 	bl	801205c <__mcmp>
 80120a6:	1e05      	subs	r5, r0, #0
 80120a8:	d112      	bne.n	80120d0 <__mdiff+0x3c>
 80120aa:	4629      	mov	r1, r5
 80120ac:	4630      	mov	r0, r6
 80120ae:	f7ff fd5b 	bl	8011b68 <_Balloc>
 80120b2:	4602      	mov	r2, r0
 80120b4:	b928      	cbnz	r0, 80120c2 <__mdiff+0x2e>
 80120b6:	4b3f      	ldr	r3, [pc, #252]	@ (80121b4 <__mdiff+0x120>)
 80120b8:	f240 2137 	movw	r1, #567	@ 0x237
 80120bc:	483e      	ldr	r0, [pc, #248]	@ (80121b8 <__mdiff+0x124>)
 80120be:	f000 fcd7 	bl	8012a70 <__assert_func>
 80120c2:	2301      	movs	r3, #1
 80120c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80120c8:	4610      	mov	r0, r2
 80120ca:	b003      	add	sp, #12
 80120cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120d0:	bfbc      	itt	lt
 80120d2:	464b      	movlt	r3, r9
 80120d4:	46a1      	movlt	r9, r4
 80120d6:	4630      	mov	r0, r6
 80120d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80120dc:	bfba      	itte	lt
 80120de:	461c      	movlt	r4, r3
 80120e0:	2501      	movlt	r5, #1
 80120e2:	2500      	movge	r5, #0
 80120e4:	f7ff fd40 	bl	8011b68 <_Balloc>
 80120e8:	4602      	mov	r2, r0
 80120ea:	b918      	cbnz	r0, 80120f4 <__mdiff+0x60>
 80120ec:	4b31      	ldr	r3, [pc, #196]	@ (80121b4 <__mdiff+0x120>)
 80120ee:	f240 2145 	movw	r1, #581	@ 0x245
 80120f2:	e7e3      	b.n	80120bc <__mdiff+0x28>
 80120f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80120f8:	6926      	ldr	r6, [r4, #16]
 80120fa:	60c5      	str	r5, [r0, #12]
 80120fc:	f109 0310 	add.w	r3, r9, #16
 8012100:	f109 0514 	add.w	r5, r9, #20
 8012104:	f104 0e14 	add.w	lr, r4, #20
 8012108:	f100 0b14 	add.w	fp, r0, #20
 801210c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012110:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012114:	9301      	str	r3, [sp, #4]
 8012116:	46d9      	mov	r9, fp
 8012118:	f04f 0c00 	mov.w	ip, #0
 801211c:	9b01      	ldr	r3, [sp, #4]
 801211e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012122:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012126:	9301      	str	r3, [sp, #4]
 8012128:	fa1f f38a 	uxth.w	r3, sl
 801212c:	4619      	mov	r1, r3
 801212e:	b283      	uxth	r3, r0
 8012130:	1acb      	subs	r3, r1, r3
 8012132:	0c00      	lsrs	r0, r0, #16
 8012134:	4463      	add	r3, ip
 8012136:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801213a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801213e:	b29b      	uxth	r3, r3
 8012140:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012144:	4576      	cmp	r6, lr
 8012146:	f849 3b04 	str.w	r3, [r9], #4
 801214a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801214e:	d8e5      	bhi.n	801211c <__mdiff+0x88>
 8012150:	1b33      	subs	r3, r6, r4
 8012152:	3b15      	subs	r3, #21
 8012154:	f023 0303 	bic.w	r3, r3, #3
 8012158:	3415      	adds	r4, #21
 801215a:	3304      	adds	r3, #4
 801215c:	42a6      	cmp	r6, r4
 801215e:	bf38      	it	cc
 8012160:	2304      	movcc	r3, #4
 8012162:	441d      	add	r5, r3
 8012164:	445b      	add	r3, fp
 8012166:	461e      	mov	r6, r3
 8012168:	462c      	mov	r4, r5
 801216a:	4544      	cmp	r4, r8
 801216c:	d30e      	bcc.n	801218c <__mdiff+0xf8>
 801216e:	f108 0103 	add.w	r1, r8, #3
 8012172:	1b49      	subs	r1, r1, r5
 8012174:	f021 0103 	bic.w	r1, r1, #3
 8012178:	3d03      	subs	r5, #3
 801217a:	45a8      	cmp	r8, r5
 801217c:	bf38      	it	cc
 801217e:	2100      	movcc	r1, #0
 8012180:	440b      	add	r3, r1
 8012182:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012186:	b191      	cbz	r1, 80121ae <__mdiff+0x11a>
 8012188:	6117      	str	r7, [r2, #16]
 801218a:	e79d      	b.n	80120c8 <__mdiff+0x34>
 801218c:	f854 1b04 	ldr.w	r1, [r4], #4
 8012190:	46e6      	mov	lr, ip
 8012192:	0c08      	lsrs	r0, r1, #16
 8012194:	fa1c fc81 	uxtah	ip, ip, r1
 8012198:	4471      	add	r1, lr
 801219a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801219e:	b289      	uxth	r1, r1
 80121a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80121a4:	f846 1b04 	str.w	r1, [r6], #4
 80121a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80121ac:	e7dd      	b.n	801216a <__mdiff+0xd6>
 80121ae:	3f01      	subs	r7, #1
 80121b0:	e7e7      	b.n	8012182 <__mdiff+0xee>
 80121b2:	bf00      	nop
 80121b4:	08016b30 	.word	0x08016b30
 80121b8:	08016b41 	.word	0x08016b41

080121bc <__d2b>:
 80121bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80121c0:	460f      	mov	r7, r1
 80121c2:	2101      	movs	r1, #1
 80121c4:	ec59 8b10 	vmov	r8, r9, d0
 80121c8:	4616      	mov	r6, r2
 80121ca:	f7ff fccd 	bl	8011b68 <_Balloc>
 80121ce:	4604      	mov	r4, r0
 80121d0:	b930      	cbnz	r0, 80121e0 <__d2b+0x24>
 80121d2:	4602      	mov	r2, r0
 80121d4:	4b23      	ldr	r3, [pc, #140]	@ (8012264 <__d2b+0xa8>)
 80121d6:	4824      	ldr	r0, [pc, #144]	@ (8012268 <__d2b+0xac>)
 80121d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80121dc:	f000 fc48 	bl	8012a70 <__assert_func>
 80121e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80121e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80121e8:	b10d      	cbz	r5, 80121ee <__d2b+0x32>
 80121ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80121ee:	9301      	str	r3, [sp, #4]
 80121f0:	f1b8 0300 	subs.w	r3, r8, #0
 80121f4:	d023      	beq.n	801223e <__d2b+0x82>
 80121f6:	4668      	mov	r0, sp
 80121f8:	9300      	str	r3, [sp, #0]
 80121fa:	f7ff fd7c 	bl	8011cf6 <__lo0bits>
 80121fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012202:	b1d0      	cbz	r0, 801223a <__d2b+0x7e>
 8012204:	f1c0 0320 	rsb	r3, r0, #32
 8012208:	fa02 f303 	lsl.w	r3, r2, r3
 801220c:	430b      	orrs	r3, r1
 801220e:	40c2      	lsrs	r2, r0
 8012210:	6163      	str	r3, [r4, #20]
 8012212:	9201      	str	r2, [sp, #4]
 8012214:	9b01      	ldr	r3, [sp, #4]
 8012216:	61a3      	str	r3, [r4, #24]
 8012218:	2b00      	cmp	r3, #0
 801221a:	bf0c      	ite	eq
 801221c:	2201      	moveq	r2, #1
 801221e:	2202      	movne	r2, #2
 8012220:	6122      	str	r2, [r4, #16]
 8012222:	b1a5      	cbz	r5, 801224e <__d2b+0x92>
 8012224:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012228:	4405      	add	r5, r0
 801222a:	603d      	str	r5, [r7, #0]
 801222c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012230:	6030      	str	r0, [r6, #0]
 8012232:	4620      	mov	r0, r4
 8012234:	b003      	add	sp, #12
 8012236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801223a:	6161      	str	r1, [r4, #20]
 801223c:	e7ea      	b.n	8012214 <__d2b+0x58>
 801223e:	a801      	add	r0, sp, #4
 8012240:	f7ff fd59 	bl	8011cf6 <__lo0bits>
 8012244:	9b01      	ldr	r3, [sp, #4]
 8012246:	6163      	str	r3, [r4, #20]
 8012248:	3020      	adds	r0, #32
 801224a:	2201      	movs	r2, #1
 801224c:	e7e8      	b.n	8012220 <__d2b+0x64>
 801224e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012252:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012256:	6038      	str	r0, [r7, #0]
 8012258:	6918      	ldr	r0, [r3, #16]
 801225a:	f7ff fd2d 	bl	8011cb8 <__hi0bits>
 801225e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012262:	e7e5      	b.n	8012230 <__d2b+0x74>
 8012264:	08016b30 	.word	0x08016b30
 8012268:	08016b41 	.word	0x08016b41

0801226c <__ssputs_r>:
 801226c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012270:	688e      	ldr	r6, [r1, #8]
 8012272:	461f      	mov	r7, r3
 8012274:	42be      	cmp	r6, r7
 8012276:	680b      	ldr	r3, [r1, #0]
 8012278:	4682      	mov	sl, r0
 801227a:	460c      	mov	r4, r1
 801227c:	4690      	mov	r8, r2
 801227e:	d82d      	bhi.n	80122dc <__ssputs_r+0x70>
 8012280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012284:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012288:	d026      	beq.n	80122d8 <__ssputs_r+0x6c>
 801228a:	6965      	ldr	r5, [r4, #20]
 801228c:	6909      	ldr	r1, [r1, #16]
 801228e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012292:	eba3 0901 	sub.w	r9, r3, r1
 8012296:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801229a:	1c7b      	adds	r3, r7, #1
 801229c:	444b      	add	r3, r9
 801229e:	106d      	asrs	r5, r5, #1
 80122a0:	429d      	cmp	r5, r3
 80122a2:	bf38      	it	cc
 80122a4:	461d      	movcc	r5, r3
 80122a6:	0553      	lsls	r3, r2, #21
 80122a8:	d527      	bpl.n	80122fa <__ssputs_r+0x8e>
 80122aa:	4629      	mov	r1, r5
 80122ac:	f7ff fbd0 	bl	8011a50 <_malloc_r>
 80122b0:	4606      	mov	r6, r0
 80122b2:	b360      	cbz	r0, 801230e <__ssputs_r+0xa2>
 80122b4:	6921      	ldr	r1, [r4, #16]
 80122b6:	464a      	mov	r2, r9
 80122b8:	f000 fbcc 	bl	8012a54 <memcpy>
 80122bc:	89a3      	ldrh	r3, [r4, #12]
 80122be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80122c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80122c6:	81a3      	strh	r3, [r4, #12]
 80122c8:	6126      	str	r6, [r4, #16]
 80122ca:	6165      	str	r5, [r4, #20]
 80122cc:	444e      	add	r6, r9
 80122ce:	eba5 0509 	sub.w	r5, r5, r9
 80122d2:	6026      	str	r6, [r4, #0]
 80122d4:	60a5      	str	r5, [r4, #8]
 80122d6:	463e      	mov	r6, r7
 80122d8:	42be      	cmp	r6, r7
 80122da:	d900      	bls.n	80122de <__ssputs_r+0x72>
 80122dc:	463e      	mov	r6, r7
 80122de:	6820      	ldr	r0, [r4, #0]
 80122e0:	4632      	mov	r2, r6
 80122e2:	4641      	mov	r1, r8
 80122e4:	f000 fb6a 	bl	80129bc <memmove>
 80122e8:	68a3      	ldr	r3, [r4, #8]
 80122ea:	1b9b      	subs	r3, r3, r6
 80122ec:	60a3      	str	r3, [r4, #8]
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	4433      	add	r3, r6
 80122f2:	6023      	str	r3, [r4, #0]
 80122f4:	2000      	movs	r0, #0
 80122f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122fa:	462a      	mov	r2, r5
 80122fc:	f000 fbfc 	bl	8012af8 <_realloc_r>
 8012300:	4606      	mov	r6, r0
 8012302:	2800      	cmp	r0, #0
 8012304:	d1e0      	bne.n	80122c8 <__ssputs_r+0x5c>
 8012306:	6921      	ldr	r1, [r4, #16]
 8012308:	4650      	mov	r0, sl
 801230a:	f7ff fb2d 	bl	8011968 <_free_r>
 801230e:	230c      	movs	r3, #12
 8012310:	f8ca 3000 	str.w	r3, [sl]
 8012314:	89a3      	ldrh	r3, [r4, #12]
 8012316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801231a:	81a3      	strh	r3, [r4, #12]
 801231c:	f04f 30ff 	mov.w	r0, #4294967295
 8012320:	e7e9      	b.n	80122f6 <__ssputs_r+0x8a>
	...

08012324 <_svfiprintf_r>:
 8012324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012328:	4698      	mov	r8, r3
 801232a:	898b      	ldrh	r3, [r1, #12]
 801232c:	061b      	lsls	r3, r3, #24
 801232e:	b09d      	sub	sp, #116	@ 0x74
 8012330:	4607      	mov	r7, r0
 8012332:	460d      	mov	r5, r1
 8012334:	4614      	mov	r4, r2
 8012336:	d510      	bpl.n	801235a <_svfiprintf_r+0x36>
 8012338:	690b      	ldr	r3, [r1, #16]
 801233a:	b973      	cbnz	r3, 801235a <_svfiprintf_r+0x36>
 801233c:	2140      	movs	r1, #64	@ 0x40
 801233e:	f7ff fb87 	bl	8011a50 <_malloc_r>
 8012342:	6028      	str	r0, [r5, #0]
 8012344:	6128      	str	r0, [r5, #16]
 8012346:	b930      	cbnz	r0, 8012356 <_svfiprintf_r+0x32>
 8012348:	230c      	movs	r3, #12
 801234a:	603b      	str	r3, [r7, #0]
 801234c:	f04f 30ff 	mov.w	r0, #4294967295
 8012350:	b01d      	add	sp, #116	@ 0x74
 8012352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012356:	2340      	movs	r3, #64	@ 0x40
 8012358:	616b      	str	r3, [r5, #20]
 801235a:	2300      	movs	r3, #0
 801235c:	9309      	str	r3, [sp, #36]	@ 0x24
 801235e:	2320      	movs	r3, #32
 8012360:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012364:	f8cd 800c 	str.w	r8, [sp, #12]
 8012368:	2330      	movs	r3, #48	@ 0x30
 801236a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012508 <_svfiprintf_r+0x1e4>
 801236e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012372:	f04f 0901 	mov.w	r9, #1
 8012376:	4623      	mov	r3, r4
 8012378:	469a      	mov	sl, r3
 801237a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801237e:	b10a      	cbz	r2, 8012384 <_svfiprintf_r+0x60>
 8012380:	2a25      	cmp	r2, #37	@ 0x25
 8012382:	d1f9      	bne.n	8012378 <_svfiprintf_r+0x54>
 8012384:	ebba 0b04 	subs.w	fp, sl, r4
 8012388:	d00b      	beq.n	80123a2 <_svfiprintf_r+0x7e>
 801238a:	465b      	mov	r3, fp
 801238c:	4622      	mov	r2, r4
 801238e:	4629      	mov	r1, r5
 8012390:	4638      	mov	r0, r7
 8012392:	f7ff ff6b 	bl	801226c <__ssputs_r>
 8012396:	3001      	adds	r0, #1
 8012398:	f000 80a7 	beq.w	80124ea <_svfiprintf_r+0x1c6>
 801239c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801239e:	445a      	add	r2, fp
 80123a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80123a2:	f89a 3000 	ldrb.w	r3, [sl]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	f000 809f 	beq.w	80124ea <_svfiprintf_r+0x1c6>
 80123ac:	2300      	movs	r3, #0
 80123ae:	f04f 32ff 	mov.w	r2, #4294967295
 80123b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80123b6:	f10a 0a01 	add.w	sl, sl, #1
 80123ba:	9304      	str	r3, [sp, #16]
 80123bc:	9307      	str	r3, [sp, #28]
 80123be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80123c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80123c4:	4654      	mov	r4, sl
 80123c6:	2205      	movs	r2, #5
 80123c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123cc:	484e      	ldr	r0, [pc, #312]	@ (8012508 <_svfiprintf_r+0x1e4>)
 80123ce:	f7ed ff1f 	bl	8000210 <memchr>
 80123d2:	9a04      	ldr	r2, [sp, #16]
 80123d4:	b9d8      	cbnz	r0, 801240e <_svfiprintf_r+0xea>
 80123d6:	06d0      	lsls	r0, r2, #27
 80123d8:	bf44      	itt	mi
 80123da:	2320      	movmi	r3, #32
 80123dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123e0:	0711      	lsls	r1, r2, #28
 80123e2:	bf44      	itt	mi
 80123e4:	232b      	movmi	r3, #43	@ 0x2b
 80123e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80123ea:	f89a 3000 	ldrb.w	r3, [sl]
 80123ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80123f0:	d015      	beq.n	801241e <_svfiprintf_r+0xfa>
 80123f2:	9a07      	ldr	r2, [sp, #28]
 80123f4:	4654      	mov	r4, sl
 80123f6:	2000      	movs	r0, #0
 80123f8:	f04f 0c0a 	mov.w	ip, #10
 80123fc:	4621      	mov	r1, r4
 80123fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012402:	3b30      	subs	r3, #48	@ 0x30
 8012404:	2b09      	cmp	r3, #9
 8012406:	d94b      	bls.n	80124a0 <_svfiprintf_r+0x17c>
 8012408:	b1b0      	cbz	r0, 8012438 <_svfiprintf_r+0x114>
 801240a:	9207      	str	r2, [sp, #28]
 801240c:	e014      	b.n	8012438 <_svfiprintf_r+0x114>
 801240e:	eba0 0308 	sub.w	r3, r0, r8
 8012412:	fa09 f303 	lsl.w	r3, r9, r3
 8012416:	4313      	orrs	r3, r2
 8012418:	9304      	str	r3, [sp, #16]
 801241a:	46a2      	mov	sl, r4
 801241c:	e7d2      	b.n	80123c4 <_svfiprintf_r+0xa0>
 801241e:	9b03      	ldr	r3, [sp, #12]
 8012420:	1d19      	adds	r1, r3, #4
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	9103      	str	r1, [sp, #12]
 8012426:	2b00      	cmp	r3, #0
 8012428:	bfbb      	ittet	lt
 801242a:	425b      	neglt	r3, r3
 801242c:	f042 0202 	orrlt.w	r2, r2, #2
 8012430:	9307      	strge	r3, [sp, #28]
 8012432:	9307      	strlt	r3, [sp, #28]
 8012434:	bfb8      	it	lt
 8012436:	9204      	strlt	r2, [sp, #16]
 8012438:	7823      	ldrb	r3, [r4, #0]
 801243a:	2b2e      	cmp	r3, #46	@ 0x2e
 801243c:	d10a      	bne.n	8012454 <_svfiprintf_r+0x130>
 801243e:	7863      	ldrb	r3, [r4, #1]
 8012440:	2b2a      	cmp	r3, #42	@ 0x2a
 8012442:	d132      	bne.n	80124aa <_svfiprintf_r+0x186>
 8012444:	9b03      	ldr	r3, [sp, #12]
 8012446:	1d1a      	adds	r2, r3, #4
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	9203      	str	r2, [sp, #12]
 801244c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012450:	3402      	adds	r4, #2
 8012452:	9305      	str	r3, [sp, #20]
 8012454:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012518 <_svfiprintf_r+0x1f4>
 8012458:	7821      	ldrb	r1, [r4, #0]
 801245a:	2203      	movs	r2, #3
 801245c:	4650      	mov	r0, sl
 801245e:	f7ed fed7 	bl	8000210 <memchr>
 8012462:	b138      	cbz	r0, 8012474 <_svfiprintf_r+0x150>
 8012464:	9b04      	ldr	r3, [sp, #16]
 8012466:	eba0 000a 	sub.w	r0, r0, sl
 801246a:	2240      	movs	r2, #64	@ 0x40
 801246c:	4082      	lsls	r2, r0
 801246e:	4313      	orrs	r3, r2
 8012470:	3401      	adds	r4, #1
 8012472:	9304      	str	r3, [sp, #16]
 8012474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012478:	4824      	ldr	r0, [pc, #144]	@ (801250c <_svfiprintf_r+0x1e8>)
 801247a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801247e:	2206      	movs	r2, #6
 8012480:	f7ed fec6 	bl	8000210 <memchr>
 8012484:	2800      	cmp	r0, #0
 8012486:	d036      	beq.n	80124f6 <_svfiprintf_r+0x1d2>
 8012488:	4b21      	ldr	r3, [pc, #132]	@ (8012510 <_svfiprintf_r+0x1ec>)
 801248a:	bb1b      	cbnz	r3, 80124d4 <_svfiprintf_r+0x1b0>
 801248c:	9b03      	ldr	r3, [sp, #12]
 801248e:	3307      	adds	r3, #7
 8012490:	f023 0307 	bic.w	r3, r3, #7
 8012494:	3308      	adds	r3, #8
 8012496:	9303      	str	r3, [sp, #12]
 8012498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801249a:	4433      	add	r3, r6
 801249c:	9309      	str	r3, [sp, #36]	@ 0x24
 801249e:	e76a      	b.n	8012376 <_svfiprintf_r+0x52>
 80124a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80124a4:	460c      	mov	r4, r1
 80124a6:	2001      	movs	r0, #1
 80124a8:	e7a8      	b.n	80123fc <_svfiprintf_r+0xd8>
 80124aa:	2300      	movs	r3, #0
 80124ac:	3401      	adds	r4, #1
 80124ae:	9305      	str	r3, [sp, #20]
 80124b0:	4619      	mov	r1, r3
 80124b2:	f04f 0c0a 	mov.w	ip, #10
 80124b6:	4620      	mov	r0, r4
 80124b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80124bc:	3a30      	subs	r2, #48	@ 0x30
 80124be:	2a09      	cmp	r2, #9
 80124c0:	d903      	bls.n	80124ca <_svfiprintf_r+0x1a6>
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d0c6      	beq.n	8012454 <_svfiprintf_r+0x130>
 80124c6:	9105      	str	r1, [sp, #20]
 80124c8:	e7c4      	b.n	8012454 <_svfiprintf_r+0x130>
 80124ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80124ce:	4604      	mov	r4, r0
 80124d0:	2301      	movs	r3, #1
 80124d2:	e7f0      	b.n	80124b6 <_svfiprintf_r+0x192>
 80124d4:	ab03      	add	r3, sp, #12
 80124d6:	9300      	str	r3, [sp, #0]
 80124d8:	462a      	mov	r2, r5
 80124da:	4b0e      	ldr	r3, [pc, #56]	@ (8012514 <_svfiprintf_r+0x1f0>)
 80124dc:	a904      	add	r1, sp, #16
 80124de:	4638      	mov	r0, r7
 80124e0:	f7fd fd60 	bl	800ffa4 <_printf_float>
 80124e4:	1c42      	adds	r2, r0, #1
 80124e6:	4606      	mov	r6, r0
 80124e8:	d1d6      	bne.n	8012498 <_svfiprintf_r+0x174>
 80124ea:	89ab      	ldrh	r3, [r5, #12]
 80124ec:	065b      	lsls	r3, r3, #25
 80124ee:	f53f af2d 	bmi.w	801234c <_svfiprintf_r+0x28>
 80124f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80124f4:	e72c      	b.n	8012350 <_svfiprintf_r+0x2c>
 80124f6:	ab03      	add	r3, sp, #12
 80124f8:	9300      	str	r3, [sp, #0]
 80124fa:	462a      	mov	r2, r5
 80124fc:	4b05      	ldr	r3, [pc, #20]	@ (8012514 <_svfiprintf_r+0x1f0>)
 80124fe:	a904      	add	r1, sp, #16
 8012500:	4638      	mov	r0, r7
 8012502:	f7fd ffe7 	bl	80104d4 <_printf_i>
 8012506:	e7ed      	b.n	80124e4 <_svfiprintf_r+0x1c0>
 8012508:	08016c98 	.word	0x08016c98
 801250c:	08016ca2 	.word	0x08016ca2
 8012510:	0800ffa5 	.word	0x0800ffa5
 8012514:	0801226d 	.word	0x0801226d
 8012518:	08016c9e 	.word	0x08016c9e

0801251c <__sfputc_r>:
 801251c:	6893      	ldr	r3, [r2, #8]
 801251e:	3b01      	subs	r3, #1
 8012520:	2b00      	cmp	r3, #0
 8012522:	b410      	push	{r4}
 8012524:	6093      	str	r3, [r2, #8]
 8012526:	da08      	bge.n	801253a <__sfputc_r+0x1e>
 8012528:	6994      	ldr	r4, [r2, #24]
 801252a:	42a3      	cmp	r3, r4
 801252c:	db01      	blt.n	8012532 <__sfputc_r+0x16>
 801252e:	290a      	cmp	r1, #10
 8012530:	d103      	bne.n	801253a <__sfputc_r+0x1e>
 8012532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012536:	f7fe bab6 	b.w	8010aa6 <__swbuf_r>
 801253a:	6813      	ldr	r3, [r2, #0]
 801253c:	1c58      	adds	r0, r3, #1
 801253e:	6010      	str	r0, [r2, #0]
 8012540:	7019      	strb	r1, [r3, #0]
 8012542:	4608      	mov	r0, r1
 8012544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012548:	4770      	bx	lr

0801254a <__sfputs_r>:
 801254a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801254c:	4606      	mov	r6, r0
 801254e:	460f      	mov	r7, r1
 8012550:	4614      	mov	r4, r2
 8012552:	18d5      	adds	r5, r2, r3
 8012554:	42ac      	cmp	r4, r5
 8012556:	d101      	bne.n	801255c <__sfputs_r+0x12>
 8012558:	2000      	movs	r0, #0
 801255a:	e007      	b.n	801256c <__sfputs_r+0x22>
 801255c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012560:	463a      	mov	r2, r7
 8012562:	4630      	mov	r0, r6
 8012564:	f7ff ffda 	bl	801251c <__sfputc_r>
 8012568:	1c43      	adds	r3, r0, #1
 801256a:	d1f3      	bne.n	8012554 <__sfputs_r+0xa>
 801256c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012570 <_vfiprintf_r>:
 8012570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012574:	460d      	mov	r5, r1
 8012576:	b09d      	sub	sp, #116	@ 0x74
 8012578:	4614      	mov	r4, r2
 801257a:	4698      	mov	r8, r3
 801257c:	4606      	mov	r6, r0
 801257e:	b118      	cbz	r0, 8012588 <_vfiprintf_r+0x18>
 8012580:	6a03      	ldr	r3, [r0, #32]
 8012582:	b90b      	cbnz	r3, 8012588 <_vfiprintf_r+0x18>
 8012584:	f7fe f952 	bl	801082c <__sinit>
 8012588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801258a:	07d9      	lsls	r1, r3, #31
 801258c:	d405      	bmi.n	801259a <_vfiprintf_r+0x2a>
 801258e:	89ab      	ldrh	r3, [r5, #12]
 8012590:	059a      	lsls	r2, r3, #22
 8012592:	d402      	bmi.n	801259a <_vfiprintf_r+0x2a>
 8012594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012596:	f7fe fb98 	bl	8010cca <__retarget_lock_acquire_recursive>
 801259a:	89ab      	ldrh	r3, [r5, #12]
 801259c:	071b      	lsls	r3, r3, #28
 801259e:	d501      	bpl.n	80125a4 <_vfiprintf_r+0x34>
 80125a0:	692b      	ldr	r3, [r5, #16]
 80125a2:	b99b      	cbnz	r3, 80125cc <_vfiprintf_r+0x5c>
 80125a4:	4629      	mov	r1, r5
 80125a6:	4630      	mov	r0, r6
 80125a8:	f7fe fabc 	bl	8010b24 <__swsetup_r>
 80125ac:	b170      	cbz	r0, 80125cc <_vfiprintf_r+0x5c>
 80125ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80125b0:	07dc      	lsls	r4, r3, #31
 80125b2:	d504      	bpl.n	80125be <_vfiprintf_r+0x4e>
 80125b4:	f04f 30ff 	mov.w	r0, #4294967295
 80125b8:	b01d      	add	sp, #116	@ 0x74
 80125ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125be:	89ab      	ldrh	r3, [r5, #12]
 80125c0:	0598      	lsls	r0, r3, #22
 80125c2:	d4f7      	bmi.n	80125b4 <_vfiprintf_r+0x44>
 80125c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80125c6:	f7fe fb81 	bl	8010ccc <__retarget_lock_release_recursive>
 80125ca:	e7f3      	b.n	80125b4 <_vfiprintf_r+0x44>
 80125cc:	2300      	movs	r3, #0
 80125ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80125d0:	2320      	movs	r3, #32
 80125d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80125d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80125da:	2330      	movs	r3, #48	@ 0x30
 80125dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801278c <_vfiprintf_r+0x21c>
 80125e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80125e4:	f04f 0901 	mov.w	r9, #1
 80125e8:	4623      	mov	r3, r4
 80125ea:	469a      	mov	sl, r3
 80125ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125f0:	b10a      	cbz	r2, 80125f6 <_vfiprintf_r+0x86>
 80125f2:	2a25      	cmp	r2, #37	@ 0x25
 80125f4:	d1f9      	bne.n	80125ea <_vfiprintf_r+0x7a>
 80125f6:	ebba 0b04 	subs.w	fp, sl, r4
 80125fa:	d00b      	beq.n	8012614 <_vfiprintf_r+0xa4>
 80125fc:	465b      	mov	r3, fp
 80125fe:	4622      	mov	r2, r4
 8012600:	4629      	mov	r1, r5
 8012602:	4630      	mov	r0, r6
 8012604:	f7ff ffa1 	bl	801254a <__sfputs_r>
 8012608:	3001      	adds	r0, #1
 801260a:	f000 80a7 	beq.w	801275c <_vfiprintf_r+0x1ec>
 801260e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012610:	445a      	add	r2, fp
 8012612:	9209      	str	r2, [sp, #36]	@ 0x24
 8012614:	f89a 3000 	ldrb.w	r3, [sl]
 8012618:	2b00      	cmp	r3, #0
 801261a:	f000 809f 	beq.w	801275c <_vfiprintf_r+0x1ec>
 801261e:	2300      	movs	r3, #0
 8012620:	f04f 32ff 	mov.w	r2, #4294967295
 8012624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012628:	f10a 0a01 	add.w	sl, sl, #1
 801262c:	9304      	str	r3, [sp, #16]
 801262e:	9307      	str	r3, [sp, #28]
 8012630:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012634:	931a      	str	r3, [sp, #104]	@ 0x68
 8012636:	4654      	mov	r4, sl
 8012638:	2205      	movs	r2, #5
 801263a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801263e:	4853      	ldr	r0, [pc, #332]	@ (801278c <_vfiprintf_r+0x21c>)
 8012640:	f7ed fde6 	bl	8000210 <memchr>
 8012644:	9a04      	ldr	r2, [sp, #16]
 8012646:	b9d8      	cbnz	r0, 8012680 <_vfiprintf_r+0x110>
 8012648:	06d1      	lsls	r1, r2, #27
 801264a:	bf44      	itt	mi
 801264c:	2320      	movmi	r3, #32
 801264e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012652:	0713      	lsls	r3, r2, #28
 8012654:	bf44      	itt	mi
 8012656:	232b      	movmi	r3, #43	@ 0x2b
 8012658:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801265c:	f89a 3000 	ldrb.w	r3, [sl]
 8012660:	2b2a      	cmp	r3, #42	@ 0x2a
 8012662:	d015      	beq.n	8012690 <_vfiprintf_r+0x120>
 8012664:	9a07      	ldr	r2, [sp, #28]
 8012666:	4654      	mov	r4, sl
 8012668:	2000      	movs	r0, #0
 801266a:	f04f 0c0a 	mov.w	ip, #10
 801266e:	4621      	mov	r1, r4
 8012670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012674:	3b30      	subs	r3, #48	@ 0x30
 8012676:	2b09      	cmp	r3, #9
 8012678:	d94b      	bls.n	8012712 <_vfiprintf_r+0x1a2>
 801267a:	b1b0      	cbz	r0, 80126aa <_vfiprintf_r+0x13a>
 801267c:	9207      	str	r2, [sp, #28]
 801267e:	e014      	b.n	80126aa <_vfiprintf_r+0x13a>
 8012680:	eba0 0308 	sub.w	r3, r0, r8
 8012684:	fa09 f303 	lsl.w	r3, r9, r3
 8012688:	4313      	orrs	r3, r2
 801268a:	9304      	str	r3, [sp, #16]
 801268c:	46a2      	mov	sl, r4
 801268e:	e7d2      	b.n	8012636 <_vfiprintf_r+0xc6>
 8012690:	9b03      	ldr	r3, [sp, #12]
 8012692:	1d19      	adds	r1, r3, #4
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	9103      	str	r1, [sp, #12]
 8012698:	2b00      	cmp	r3, #0
 801269a:	bfbb      	ittet	lt
 801269c:	425b      	neglt	r3, r3
 801269e:	f042 0202 	orrlt.w	r2, r2, #2
 80126a2:	9307      	strge	r3, [sp, #28]
 80126a4:	9307      	strlt	r3, [sp, #28]
 80126a6:	bfb8      	it	lt
 80126a8:	9204      	strlt	r2, [sp, #16]
 80126aa:	7823      	ldrb	r3, [r4, #0]
 80126ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80126ae:	d10a      	bne.n	80126c6 <_vfiprintf_r+0x156>
 80126b0:	7863      	ldrb	r3, [r4, #1]
 80126b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80126b4:	d132      	bne.n	801271c <_vfiprintf_r+0x1ac>
 80126b6:	9b03      	ldr	r3, [sp, #12]
 80126b8:	1d1a      	adds	r2, r3, #4
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	9203      	str	r2, [sp, #12]
 80126be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80126c2:	3402      	adds	r4, #2
 80126c4:	9305      	str	r3, [sp, #20]
 80126c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801279c <_vfiprintf_r+0x22c>
 80126ca:	7821      	ldrb	r1, [r4, #0]
 80126cc:	2203      	movs	r2, #3
 80126ce:	4650      	mov	r0, sl
 80126d0:	f7ed fd9e 	bl	8000210 <memchr>
 80126d4:	b138      	cbz	r0, 80126e6 <_vfiprintf_r+0x176>
 80126d6:	9b04      	ldr	r3, [sp, #16]
 80126d8:	eba0 000a 	sub.w	r0, r0, sl
 80126dc:	2240      	movs	r2, #64	@ 0x40
 80126de:	4082      	lsls	r2, r0
 80126e0:	4313      	orrs	r3, r2
 80126e2:	3401      	adds	r4, #1
 80126e4:	9304      	str	r3, [sp, #16]
 80126e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80126ea:	4829      	ldr	r0, [pc, #164]	@ (8012790 <_vfiprintf_r+0x220>)
 80126ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80126f0:	2206      	movs	r2, #6
 80126f2:	f7ed fd8d 	bl	8000210 <memchr>
 80126f6:	2800      	cmp	r0, #0
 80126f8:	d03f      	beq.n	801277a <_vfiprintf_r+0x20a>
 80126fa:	4b26      	ldr	r3, [pc, #152]	@ (8012794 <_vfiprintf_r+0x224>)
 80126fc:	bb1b      	cbnz	r3, 8012746 <_vfiprintf_r+0x1d6>
 80126fe:	9b03      	ldr	r3, [sp, #12]
 8012700:	3307      	adds	r3, #7
 8012702:	f023 0307 	bic.w	r3, r3, #7
 8012706:	3308      	adds	r3, #8
 8012708:	9303      	str	r3, [sp, #12]
 801270a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801270c:	443b      	add	r3, r7
 801270e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012710:	e76a      	b.n	80125e8 <_vfiprintf_r+0x78>
 8012712:	fb0c 3202 	mla	r2, ip, r2, r3
 8012716:	460c      	mov	r4, r1
 8012718:	2001      	movs	r0, #1
 801271a:	e7a8      	b.n	801266e <_vfiprintf_r+0xfe>
 801271c:	2300      	movs	r3, #0
 801271e:	3401      	adds	r4, #1
 8012720:	9305      	str	r3, [sp, #20]
 8012722:	4619      	mov	r1, r3
 8012724:	f04f 0c0a 	mov.w	ip, #10
 8012728:	4620      	mov	r0, r4
 801272a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801272e:	3a30      	subs	r2, #48	@ 0x30
 8012730:	2a09      	cmp	r2, #9
 8012732:	d903      	bls.n	801273c <_vfiprintf_r+0x1cc>
 8012734:	2b00      	cmp	r3, #0
 8012736:	d0c6      	beq.n	80126c6 <_vfiprintf_r+0x156>
 8012738:	9105      	str	r1, [sp, #20]
 801273a:	e7c4      	b.n	80126c6 <_vfiprintf_r+0x156>
 801273c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012740:	4604      	mov	r4, r0
 8012742:	2301      	movs	r3, #1
 8012744:	e7f0      	b.n	8012728 <_vfiprintf_r+0x1b8>
 8012746:	ab03      	add	r3, sp, #12
 8012748:	9300      	str	r3, [sp, #0]
 801274a:	462a      	mov	r2, r5
 801274c:	4b12      	ldr	r3, [pc, #72]	@ (8012798 <_vfiprintf_r+0x228>)
 801274e:	a904      	add	r1, sp, #16
 8012750:	4630      	mov	r0, r6
 8012752:	f7fd fc27 	bl	800ffa4 <_printf_float>
 8012756:	4607      	mov	r7, r0
 8012758:	1c78      	adds	r0, r7, #1
 801275a:	d1d6      	bne.n	801270a <_vfiprintf_r+0x19a>
 801275c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801275e:	07d9      	lsls	r1, r3, #31
 8012760:	d405      	bmi.n	801276e <_vfiprintf_r+0x1fe>
 8012762:	89ab      	ldrh	r3, [r5, #12]
 8012764:	059a      	lsls	r2, r3, #22
 8012766:	d402      	bmi.n	801276e <_vfiprintf_r+0x1fe>
 8012768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801276a:	f7fe faaf 	bl	8010ccc <__retarget_lock_release_recursive>
 801276e:	89ab      	ldrh	r3, [r5, #12]
 8012770:	065b      	lsls	r3, r3, #25
 8012772:	f53f af1f 	bmi.w	80125b4 <_vfiprintf_r+0x44>
 8012776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012778:	e71e      	b.n	80125b8 <_vfiprintf_r+0x48>
 801277a:	ab03      	add	r3, sp, #12
 801277c:	9300      	str	r3, [sp, #0]
 801277e:	462a      	mov	r2, r5
 8012780:	4b05      	ldr	r3, [pc, #20]	@ (8012798 <_vfiprintf_r+0x228>)
 8012782:	a904      	add	r1, sp, #16
 8012784:	4630      	mov	r0, r6
 8012786:	f7fd fea5 	bl	80104d4 <_printf_i>
 801278a:	e7e4      	b.n	8012756 <_vfiprintf_r+0x1e6>
 801278c:	08016c98 	.word	0x08016c98
 8012790:	08016ca2 	.word	0x08016ca2
 8012794:	0800ffa5 	.word	0x0800ffa5
 8012798:	0801254b 	.word	0x0801254b
 801279c:	08016c9e 	.word	0x08016c9e

080127a0 <__sflush_r>:
 80127a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80127a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a8:	0716      	lsls	r6, r2, #28
 80127aa:	4605      	mov	r5, r0
 80127ac:	460c      	mov	r4, r1
 80127ae:	d454      	bmi.n	801285a <__sflush_r+0xba>
 80127b0:	684b      	ldr	r3, [r1, #4]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	dc02      	bgt.n	80127bc <__sflush_r+0x1c>
 80127b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	dd48      	ble.n	801284e <__sflush_r+0xae>
 80127bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80127be:	2e00      	cmp	r6, #0
 80127c0:	d045      	beq.n	801284e <__sflush_r+0xae>
 80127c2:	2300      	movs	r3, #0
 80127c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80127c8:	682f      	ldr	r7, [r5, #0]
 80127ca:	6a21      	ldr	r1, [r4, #32]
 80127cc:	602b      	str	r3, [r5, #0]
 80127ce:	d030      	beq.n	8012832 <__sflush_r+0x92>
 80127d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80127d2:	89a3      	ldrh	r3, [r4, #12]
 80127d4:	0759      	lsls	r1, r3, #29
 80127d6:	d505      	bpl.n	80127e4 <__sflush_r+0x44>
 80127d8:	6863      	ldr	r3, [r4, #4]
 80127da:	1ad2      	subs	r2, r2, r3
 80127dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80127de:	b10b      	cbz	r3, 80127e4 <__sflush_r+0x44>
 80127e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80127e2:	1ad2      	subs	r2, r2, r3
 80127e4:	2300      	movs	r3, #0
 80127e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80127e8:	6a21      	ldr	r1, [r4, #32]
 80127ea:	4628      	mov	r0, r5
 80127ec:	47b0      	blx	r6
 80127ee:	1c43      	adds	r3, r0, #1
 80127f0:	89a3      	ldrh	r3, [r4, #12]
 80127f2:	d106      	bne.n	8012802 <__sflush_r+0x62>
 80127f4:	6829      	ldr	r1, [r5, #0]
 80127f6:	291d      	cmp	r1, #29
 80127f8:	d82b      	bhi.n	8012852 <__sflush_r+0xb2>
 80127fa:	4a2a      	ldr	r2, [pc, #168]	@ (80128a4 <__sflush_r+0x104>)
 80127fc:	410a      	asrs	r2, r1
 80127fe:	07d6      	lsls	r6, r2, #31
 8012800:	d427      	bmi.n	8012852 <__sflush_r+0xb2>
 8012802:	2200      	movs	r2, #0
 8012804:	6062      	str	r2, [r4, #4]
 8012806:	04d9      	lsls	r1, r3, #19
 8012808:	6922      	ldr	r2, [r4, #16]
 801280a:	6022      	str	r2, [r4, #0]
 801280c:	d504      	bpl.n	8012818 <__sflush_r+0x78>
 801280e:	1c42      	adds	r2, r0, #1
 8012810:	d101      	bne.n	8012816 <__sflush_r+0x76>
 8012812:	682b      	ldr	r3, [r5, #0]
 8012814:	b903      	cbnz	r3, 8012818 <__sflush_r+0x78>
 8012816:	6560      	str	r0, [r4, #84]	@ 0x54
 8012818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801281a:	602f      	str	r7, [r5, #0]
 801281c:	b1b9      	cbz	r1, 801284e <__sflush_r+0xae>
 801281e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012822:	4299      	cmp	r1, r3
 8012824:	d002      	beq.n	801282c <__sflush_r+0x8c>
 8012826:	4628      	mov	r0, r5
 8012828:	f7ff f89e 	bl	8011968 <_free_r>
 801282c:	2300      	movs	r3, #0
 801282e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012830:	e00d      	b.n	801284e <__sflush_r+0xae>
 8012832:	2301      	movs	r3, #1
 8012834:	4628      	mov	r0, r5
 8012836:	47b0      	blx	r6
 8012838:	4602      	mov	r2, r0
 801283a:	1c50      	adds	r0, r2, #1
 801283c:	d1c9      	bne.n	80127d2 <__sflush_r+0x32>
 801283e:	682b      	ldr	r3, [r5, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d0c6      	beq.n	80127d2 <__sflush_r+0x32>
 8012844:	2b1d      	cmp	r3, #29
 8012846:	d001      	beq.n	801284c <__sflush_r+0xac>
 8012848:	2b16      	cmp	r3, #22
 801284a:	d11e      	bne.n	801288a <__sflush_r+0xea>
 801284c:	602f      	str	r7, [r5, #0]
 801284e:	2000      	movs	r0, #0
 8012850:	e022      	b.n	8012898 <__sflush_r+0xf8>
 8012852:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012856:	b21b      	sxth	r3, r3
 8012858:	e01b      	b.n	8012892 <__sflush_r+0xf2>
 801285a:	690f      	ldr	r7, [r1, #16]
 801285c:	2f00      	cmp	r7, #0
 801285e:	d0f6      	beq.n	801284e <__sflush_r+0xae>
 8012860:	0793      	lsls	r3, r2, #30
 8012862:	680e      	ldr	r6, [r1, #0]
 8012864:	bf08      	it	eq
 8012866:	694b      	ldreq	r3, [r1, #20]
 8012868:	600f      	str	r7, [r1, #0]
 801286a:	bf18      	it	ne
 801286c:	2300      	movne	r3, #0
 801286e:	eba6 0807 	sub.w	r8, r6, r7
 8012872:	608b      	str	r3, [r1, #8]
 8012874:	f1b8 0f00 	cmp.w	r8, #0
 8012878:	dde9      	ble.n	801284e <__sflush_r+0xae>
 801287a:	6a21      	ldr	r1, [r4, #32]
 801287c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801287e:	4643      	mov	r3, r8
 8012880:	463a      	mov	r2, r7
 8012882:	4628      	mov	r0, r5
 8012884:	47b0      	blx	r6
 8012886:	2800      	cmp	r0, #0
 8012888:	dc08      	bgt.n	801289c <__sflush_r+0xfc>
 801288a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801288e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012892:	81a3      	strh	r3, [r4, #12]
 8012894:	f04f 30ff 	mov.w	r0, #4294967295
 8012898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801289c:	4407      	add	r7, r0
 801289e:	eba8 0800 	sub.w	r8, r8, r0
 80128a2:	e7e7      	b.n	8012874 <__sflush_r+0xd4>
 80128a4:	dfbffffe 	.word	0xdfbffffe

080128a8 <_fflush_r>:
 80128a8:	b538      	push	{r3, r4, r5, lr}
 80128aa:	690b      	ldr	r3, [r1, #16]
 80128ac:	4605      	mov	r5, r0
 80128ae:	460c      	mov	r4, r1
 80128b0:	b913      	cbnz	r3, 80128b8 <_fflush_r+0x10>
 80128b2:	2500      	movs	r5, #0
 80128b4:	4628      	mov	r0, r5
 80128b6:	bd38      	pop	{r3, r4, r5, pc}
 80128b8:	b118      	cbz	r0, 80128c2 <_fflush_r+0x1a>
 80128ba:	6a03      	ldr	r3, [r0, #32]
 80128bc:	b90b      	cbnz	r3, 80128c2 <_fflush_r+0x1a>
 80128be:	f7fd ffb5 	bl	801082c <__sinit>
 80128c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d0f3      	beq.n	80128b2 <_fflush_r+0xa>
 80128ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80128cc:	07d0      	lsls	r0, r2, #31
 80128ce:	d404      	bmi.n	80128da <_fflush_r+0x32>
 80128d0:	0599      	lsls	r1, r3, #22
 80128d2:	d402      	bmi.n	80128da <_fflush_r+0x32>
 80128d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128d6:	f7fe f9f8 	bl	8010cca <__retarget_lock_acquire_recursive>
 80128da:	4628      	mov	r0, r5
 80128dc:	4621      	mov	r1, r4
 80128de:	f7ff ff5f 	bl	80127a0 <__sflush_r>
 80128e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80128e4:	07da      	lsls	r2, r3, #31
 80128e6:	4605      	mov	r5, r0
 80128e8:	d4e4      	bmi.n	80128b4 <_fflush_r+0xc>
 80128ea:	89a3      	ldrh	r3, [r4, #12]
 80128ec:	059b      	lsls	r3, r3, #22
 80128ee:	d4e1      	bmi.n	80128b4 <_fflush_r+0xc>
 80128f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80128f2:	f7fe f9eb 	bl	8010ccc <__retarget_lock_release_recursive>
 80128f6:	e7dd      	b.n	80128b4 <_fflush_r+0xc>

080128f8 <__swhatbuf_r>:
 80128f8:	b570      	push	{r4, r5, r6, lr}
 80128fa:	460c      	mov	r4, r1
 80128fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012900:	2900      	cmp	r1, #0
 8012902:	b096      	sub	sp, #88	@ 0x58
 8012904:	4615      	mov	r5, r2
 8012906:	461e      	mov	r6, r3
 8012908:	da0d      	bge.n	8012926 <__swhatbuf_r+0x2e>
 801290a:	89a3      	ldrh	r3, [r4, #12]
 801290c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012910:	f04f 0100 	mov.w	r1, #0
 8012914:	bf14      	ite	ne
 8012916:	2340      	movne	r3, #64	@ 0x40
 8012918:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801291c:	2000      	movs	r0, #0
 801291e:	6031      	str	r1, [r6, #0]
 8012920:	602b      	str	r3, [r5, #0]
 8012922:	b016      	add	sp, #88	@ 0x58
 8012924:	bd70      	pop	{r4, r5, r6, pc}
 8012926:	466a      	mov	r2, sp
 8012928:	f000 f862 	bl	80129f0 <_fstat_r>
 801292c:	2800      	cmp	r0, #0
 801292e:	dbec      	blt.n	801290a <__swhatbuf_r+0x12>
 8012930:	9901      	ldr	r1, [sp, #4]
 8012932:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012936:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801293a:	4259      	negs	r1, r3
 801293c:	4159      	adcs	r1, r3
 801293e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012942:	e7eb      	b.n	801291c <__swhatbuf_r+0x24>

08012944 <__smakebuf_r>:
 8012944:	898b      	ldrh	r3, [r1, #12]
 8012946:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012948:	079d      	lsls	r5, r3, #30
 801294a:	4606      	mov	r6, r0
 801294c:	460c      	mov	r4, r1
 801294e:	d507      	bpl.n	8012960 <__smakebuf_r+0x1c>
 8012950:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012954:	6023      	str	r3, [r4, #0]
 8012956:	6123      	str	r3, [r4, #16]
 8012958:	2301      	movs	r3, #1
 801295a:	6163      	str	r3, [r4, #20]
 801295c:	b003      	add	sp, #12
 801295e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012960:	ab01      	add	r3, sp, #4
 8012962:	466a      	mov	r2, sp
 8012964:	f7ff ffc8 	bl	80128f8 <__swhatbuf_r>
 8012968:	9f00      	ldr	r7, [sp, #0]
 801296a:	4605      	mov	r5, r0
 801296c:	4639      	mov	r1, r7
 801296e:	4630      	mov	r0, r6
 8012970:	f7ff f86e 	bl	8011a50 <_malloc_r>
 8012974:	b948      	cbnz	r0, 801298a <__smakebuf_r+0x46>
 8012976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801297a:	059a      	lsls	r2, r3, #22
 801297c:	d4ee      	bmi.n	801295c <__smakebuf_r+0x18>
 801297e:	f023 0303 	bic.w	r3, r3, #3
 8012982:	f043 0302 	orr.w	r3, r3, #2
 8012986:	81a3      	strh	r3, [r4, #12]
 8012988:	e7e2      	b.n	8012950 <__smakebuf_r+0xc>
 801298a:	89a3      	ldrh	r3, [r4, #12]
 801298c:	6020      	str	r0, [r4, #0]
 801298e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012992:	81a3      	strh	r3, [r4, #12]
 8012994:	9b01      	ldr	r3, [sp, #4]
 8012996:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801299a:	b15b      	cbz	r3, 80129b4 <__smakebuf_r+0x70>
 801299c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80129a0:	4630      	mov	r0, r6
 80129a2:	f000 f837 	bl	8012a14 <_isatty_r>
 80129a6:	b128      	cbz	r0, 80129b4 <__smakebuf_r+0x70>
 80129a8:	89a3      	ldrh	r3, [r4, #12]
 80129aa:	f023 0303 	bic.w	r3, r3, #3
 80129ae:	f043 0301 	orr.w	r3, r3, #1
 80129b2:	81a3      	strh	r3, [r4, #12]
 80129b4:	89a3      	ldrh	r3, [r4, #12]
 80129b6:	431d      	orrs	r5, r3
 80129b8:	81a5      	strh	r5, [r4, #12]
 80129ba:	e7cf      	b.n	801295c <__smakebuf_r+0x18>

080129bc <memmove>:
 80129bc:	4288      	cmp	r0, r1
 80129be:	b510      	push	{r4, lr}
 80129c0:	eb01 0402 	add.w	r4, r1, r2
 80129c4:	d902      	bls.n	80129cc <memmove+0x10>
 80129c6:	4284      	cmp	r4, r0
 80129c8:	4623      	mov	r3, r4
 80129ca:	d807      	bhi.n	80129dc <memmove+0x20>
 80129cc:	1e43      	subs	r3, r0, #1
 80129ce:	42a1      	cmp	r1, r4
 80129d0:	d008      	beq.n	80129e4 <memmove+0x28>
 80129d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80129da:	e7f8      	b.n	80129ce <memmove+0x12>
 80129dc:	4402      	add	r2, r0
 80129de:	4601      	mov	r1, r0
 80129e0:	428a      	cmp	r2, r1
 80129e2:	d100      	bne.n	80129e6 <memmove+0x2a>
 80129e4:	bd10      	pop	{r4, pc}
 80129e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80129ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80129ee:	e7f7      	b.n	80129e0 <memmove+0x24>

080129f0 <_fstat_r>:
 80129f0:	b538      	push	{r3, r4, r5, lr}
 80129f2:	4d07      	ldr	r5, [pc, #28]	@ (8012a10 <_fstat_r+0x20>)
 80129f4:	2300      	movs	r3, #0
 80129f6:	4604      	mov	r4, r0
 80129f8:	4608      	mov	r0, r1
 80129fa:	4611      	mov	r1, r2
 80129fc:	602b      	str	r3, [r5, #0]
 80129fe:	f7f2 f8c5 	bl	8004b8c <_fstat>
 8012a02:	1c43      	adds	r3, r0, #1
 8012a04:	d102      	bne.n	8012a0c <_fstat_r+0x1c>
 8012a06:	682b      	ldr	r3, [r5, #0]
 8012a08:	b103      	cbz	r3, 8012a0c <_fstat_r+0x1c>
 8012a0a:	6023      	str	r3, [r4, #0]
 8012a0c:	bd38      	pop	{r3, r4, r5, pc}
 8012a0e:	bf00      	nop
 8012a10:	20006320 	.word	0x20006320

08012a14 <_isatty_r>:
 8012a14:	b538      	push	{r3, r4, r5, lr}
 8012a16:	4d06      	ldr	r5, [pc, #24]	@ (8012a30 <_isatty_r+0x1c>)
 8012a18:	2300      	movs	r3, #0
 8012a1a:	4604      	mov	r4, r0
 8012a1c:	4608      	mov	r0, r1
 8012a1e:	602b      	str	r3, [r5, #0]
 8012a20:	f7f2 f8c4 	bl	8004bac <_isatty>
 8012a24:	1c43      	adds	r3, r0, #1
 8012a26:	d102      	bne.n	8012a2e <_isatty_r+0x1a>
 8012a28:	682b      	ldr	r3, [r5, #0]
 8012a2a:	b103      	cbz	r3, 8012a2e <_isatty_r+0x1a>
 8012a2c:	6023      	str	r3, [r4, #0]
 8012a2e:	bd38      	pop	{r3, r4, r5, pc}
 8012a30:	20006320 	.word	0x20006320

08012a34 <_sbrk_r>:
 8012a34:	b538      	push	{r3, r4, r5, lr}
 8012a36:	4d06      	ldr	r5, [pc, #24]	@ (8012a50 <_sbrk_r+0x1c>)
 8012a38:	2300      	movs	r3, #0
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	4608      	mov	r0, r1
 8012a3e:	602b      	str	r3, [r5, #0]
 8012a40:	f7f2 f8cc 	bl	8004bdc <_sbrk>
 8012a44:	1c43      	adds	r3, r0, #1
 8012a46:	d102      	bne.n	8012a4e <_sbrk_r+0x1a>
 8012a48:	682b      	ldr	r3, [r5, #0]
 8012a4a:	b103      	cbz	r3, 8012a4e <_sbrk_r+0x1a>
 8012a4c:	6023      	str	r3, [r4, #0]
 8012a4e:	bd38      	pop	{r3, r4, r5, pc}
 8012a50:	20006320 	.word	0x20006320

08012a54 <memcpy>:
 8012a54:	440a      	add	r2, r1
 8012a56:	4291      	cmp	r1, r2
 8012a58:	f100 33ff 	add.w	r3, r0, #4294967295
 8012a5c:	d100      	bne.n	8012a60 <memcpy+0xc>
 8012a5e:	4770      	bx	lr
 8012a60:	b510      	push	{r4, lr}
 8012a62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012a6a:	4291      	cmp	r1, r2
 8012a6c:	d1f9      	bne.n	8012a62 <memcpy+0xe>
 8012a6e:	bd10      	pop	{r4, pc}

08012a70 <__assert_func>:
 8012a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012a72:	4614      	mov	r4, r2
 8012a74:	461a      	mov	r2, r3
 8012a76:	4b09      	ldr	r3, [pc, #36]	@ (8012a9c <__assert_func+0x2c>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	4605      	mov	r5, r0
 8012a7c:	68d8      	ldr	r0, [r3, #12]
 8012a7e:	b954      	cbnz	r4, 8012a96 <__assert_func+0x26>
 8012a80:	4b07      	ldr	r3, [pc, #28]	@ (8012aa0 <__assert_func+0x30>)
 8012a82:	461c      	mov	r4, r3
 8012a84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012a88:	9100      	str	r1, [sp, #0]
 8012a8a:	462b      	mov	r3, r5
 8012a8c:	4905      	ldr	r1, [pc, #20]	@ (8012aa4 <__assert_func+0x34>)
 8012a8e:	f000 f86f 	bl	8012b70 <fiprintf>
 8012a92:	f000 f87f 	bl	8012b94 <abort>
 8012a96:	4b04      	ldr	r3, [pc, #16]	@ (8012aa8 <__assert_func+0x38>)
 8012a98:	e7f4      	b.n	8012a84 <__assert_func+0x14>
 8012a9a:	bf00      	nop
 8012a9c:	20004f34 	.word	0x20004f34
 8012aa0:	08016cee 	.word	0x08016cee
 8012aa4:	08016cc0 	.word	0x08016cc0
 8012aa8:	08016cb3 	.word	0x08016cb3

08012aac <_calloc_r>:
 8012aac:	b570      	push	{r4, r5, r6, lr}
 8012aae:	fba1 5402 	umull	r5, r4, r1, r2
 8012ab2:	b93c      	cbnz	r4, 8012ac4 <_calloc_r+0x18>
 8012ab4:	4629      	mov	r1, r5
 8012ab6:	f7fe ffcb 	bl	8011a50 <_malloc_r>
 8012aba:	4606      	mov	r6, r0
 8012abc:	b928      	cbnz	r0, 8012aca <_calloc_r+0x1e>
 8012abe:	2600      	movs	r6, #0
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	bd70      	pop	{r4, r5, r6, pc}
 8012ac4:	220c      	movs	r2, #12
 8012ac6:	6002      	str	r2, [r0, #0]
 8012ac8:	e7f9      	b.n	8012abe <_calloc_r+0x12>
 8012aca:	462a      	mov	r2, r5
 8012acc:	4621      	mov	r1, r4
 8012ace:	f7fe f87f 	bl	8010bd0 <memset>
 8012ad2:	e7f5      	b.n	8012ac0 <_calloc_r+0x14>

08012ad4 <__ascii_mbtowc>:
 8012ad4:	b082      	sub	sp, #8
 8012ad6:	b901      	cbnz	r1, 8012ada <__ascii_mbtowc+0x6>
 8012ad8:	a901      	add	r1, sp, #4
 8012ada:	b142      	cbz	r2, 8012aee <__ascii_mbtowc+0x1a>
 8012adc:	b14b      	cbz	r3, 8012af2 <__ascii_mbtowc+0x1e>
 8012ade:	7813      	ldrb	r3, [r2, #0]
 8012ae0:	600b      	str	r3, [r1, #0]
 8012ae2:	7812      	ldrb	r2, [r2, #0]
 8012ae4:	1e10      	subs	r0, r2, #0
 8012ae6:	bf18      	it	ne
 8012ae8:	2001      	movne	r0, #1
 8012aea:	b002      	add	sp, #8
 8012aec:	4770      	bx	lr
 8012aee:	4610      	mov	r0, r2
 8012af0:	e7fb      	b.n	8012aea <__ascii_mbtowc+0x16>
 8012af2:	f06f 0001 	mvn.w	r0, #1
 8012af6:	e7f8      	b.n	8012aea <__ascii_mbtowc+0x16>

08012af8 <_realloc_r>:
 8012af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012afc:	4680      	mov	r8, r0
 8012afe:	4615      	mov	r5, r2
 8012b00:	460c      	mov	r4, r1
 8012b02:	b921      	cbnz	r1, 8012b0e <_realloc_r+0x16>
 8012b04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b08:	4611      	mov	r1, r2
 8012b0a:	f7fe bfa1 	b.w	8011a50 <_malloc_r>
 8012b0e:	b92a      	cbnz	r2, 8012b1c <_realloc_r+0x24>
 8012b10:	f7fe ff2a 	bl	8011968 <_free_r>
 8012b14:	2400      	movs	r4, #0
 8012b16:	4620      	mov	r0, r4
 8012b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b1c:	f000 f841 	bl	8012ba2 <_malloc_usable_size_r>
 8012b20:	4285      	cmp	r5, r0
 8012b22:	4606      	mov	r6, r0
 8012b24:	d802      	bhi.n	8012b2c <_realloc_r+0x34>
 8012b26:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012b2a:	d8f4      	bhi.n	8012b16 <_realloc_r+0x1e>
 8012b2c:	4629      	mov	r1, r5
 8012b2e:	4640      	mov	r0, r8
 8012b30:	f7fe ff8e 	bl	8011a50 <_malloc_r>
 8012b34:	4607      	mov	r7, r0
 8012b36:	2800      	cmp	r0, #0
 8012b38:	d0ec      	beq.n	8012b14 <_realloc_r+0x1c>
 8012b3a:	42b5      	cmp	r5, r6
 8012b3c:	462a      	mov	r2, r5
 8012b3e:	4621      	mov	r1, r4
 8012b40:	bf28      	it	cs
 8012b42:	4632      	movcs	r2, r6
 8012b44:	f7ff ff86 	bl	8012a54 <memcpy>
 8012b48:	4621      	mov	r1, r4
 8012b4a:	4640      	mov	r0, r8
 8012b4c:	f7fe ff0c 	bl	8011968 <_free_r>
 8012b50:	463c      	mov	r4, r7
 8012b52:	e7e0      	b.n	8012b16 <_realloc_r+0x1e>

08012b54 <__ascii_wctomb>:
 8012b54:	4603      	mov	r3, r0
 8012b56:	4608      	mov	r0, r1
 8012b58:	b141      	cbz	r1, 8012b6c <__ascii_wctomb+0x18>
 8012b5a:	2aff      	cmp	r2, #255	@ 0xff
 8012b5c:	d904      	bls.n	8012b68 <__ascii_wctomb+0x14>
 8012b5e:	228a      	movs	r2, #138	@ 0x8a
 8012b60:	601a      	str	r2, [r3, #0]
 8012b62:	f04f 30ff 	mov.w	r0, #4294967295
 8012b66:	4770      	bx	lr
 8012b68:	700a      	strb	r2, [r1, #0]
 8012b6a:	2001      	movs	r0, #1
 8012b6c:	4770      	bx	lr
	...

08012b70 <fiprintf>:
 8012b70:	b40e      	push	{r1, r2, r3}
 8012b72:	b503      	push	{r0, r1, lr}
 8012b74:	4601      	mov	r1, r0
 8012b76:	ab03      	add	r3, sp, #12
 8012b78:	4805      	ldr	r0, [pc, #20]	@ (8012b90 <fiprintf+0x20>)
 8012b7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b7e:	6800      	ldr	r0, [r0, #0]
 8012b80:	9301      	str	r3, [sp, #4]
 8012b82:	f7ff fcf5 	bl	8012570 <_vfiprintf_r>
 8012b86:	b002      	add	sp, #8
 8012b88:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b8c:	b003      	add	sp, #12
 8012b8e:	4770      	bx	lr
 8012b90:	20004f34 	.word	0x20004f34

08012b94 <abort>:
 8012b94:	b508      	push	{r3, lr}
 8012b96:	2006      	movs	r0, #6
 8012b98:	f000 f834 	bl	8012c04 <raise>
 8012b9c:	2001      	movs	r0, #1
 8012b9e:	f7f1 ffa5 	bl	8004aec <_exit>

08012ba2 <_malloc_usable_size_r>:
 8012ba2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ba6:	1f18      	subs	r0, r3, #4
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	bfbc      	itt	lt
 8012bac:	580b      	ldrlt	r3, [r1, r0]
 8012bae:	18c0      	addlt	r0, r0, r3
 8012bb0:	4770      	bx	lr

08012bb2 <_raise_r>:
 8012bb2:	291f      	cmp	r1, #31
 8012bb4:	b538      	push	{r3, r4, r5, lr}
 8012bb6:	4605      	mov	r5, r0
 8012bb8:	460c      	mov	r4, r1
 8012bba:	d904      	bls.n	8012bc6 <_raise_r+0x14>
 8012bbc:	2316      	movs	r3, #22
 8012bbe:	6003      	str	r3, [r0, #0]
 8012bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc4:	bd38      	pop	{r3, r4, r5, pc}
 8012bc6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012bc8:	b112      	cbz	r2, 8012bd0 <_raise_r+0x1e>
 8012bca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012bce:	b94b      	cbnz	r3, 8012be4 <_raise_r+0x32>
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	f000 f831 	bl	8012c38 <_getpid_r>
 8012bd6:	4622      	mov	r2, r4
 8012bd8:	4601      	mov	r1, r0
 8012bda:	4628      	mov	r0, r5
 8012bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012be0:	f000 b818 	b.w	8012c14 <_kill_r>
 8012be4:	2b01      	cmp	r3, #1
 8012be6:	d00a      	beq.n	8012bfe <_raise_r+0x4c>
 8012be8:	1c59      	adds	r1, r3, #1
 8012bea:	d103      	bne.n	8012bf4 <_raise_r+0x42>
 8012bec:	2316      	movs	r3, #22
 8012bee:	6003      	str	r3, [r0, #0]
 8012bf0:	2001      	movs	r0, #1
 8012bf2:	e7e7      	b.n	8012bc4 <_raise_r+0x12>
 8012bf4:	2100      	movs	r1, #0
 8012bf6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	4798      	blx	r3
 8012bfe:	2000      	movs	r0, #0
 8012c00:	e7e0      	b.n	8012bc4 <_raise_r+0x12>
	...

08012c04 <raise>:
 8012c04:	4b02      	ldr	r3, [pc, #8]	@ (8012c10 <raise+0xc>)
 8012c06:	4601      	mov	r1, r0
 8012c08:	6818      	ldr	r0, [r3, #0]
 8012c0a:	f7ff bfd2 	b.w	8012bb2 <_raise_r>
 8012c0e:	bf00      	nop
 8012c10:	20004f34 	.word	0x20004f34

08012c14 <_kill_r>:
 8012c14:	b538      	push	{r3, r4, r5, lr}
 8012c16:	4d07      	ldr	r5, [pc, #28]	@ (8012c34 <_kill_r+0x20>)
 8012c18:	2300      	movs	r3, #0
 8012c1a:	4604      	mov	r4, r0
 8012c1c:	4608      	mov	r0, r1
 8012c1e:	4611      	mov	r1, r2
 8012c20:	602b      	str	r3, [r5, #0]
 8012c22:	f7f1 ff53 	bl	8004acc <_kill>
 8012c26:	1c43      	adds	r3, r0, #1
 8012c28:	d102      	bne.n	8012c30 <_kill_r+0x1c>
 8012c2a:	682b      	ldr	r3, [r5, #0]
 8012c2c:	b103      	cbz	r3, 8012c30 <_kill_r+0x1c>
 8012c2e:	6023      	str	r3, [r4, #0]
 8012c30:	bd38      	pop	{r3, r4, r5, pc}
 8012c32:	bf00      	nop
 8012c34:	20006320 	.word	0x20006320

08012c38 <_getpid_r>:
 8012c38:	f7f1 bf40 	b.w	8004abc <_getpid>

08012c3c <_init>:
 8012c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c3e:	bf00      	nop
 8012c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c42:	bc08      	pop	{r3}
 8012c44:	469e      	mov	lr, r3
 8012c46:	4770      	bx	lr

08012c48 <_fini>:
 8012c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c4a:	bf00      	nop
 8012c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c4e:	bc08      	pop	{r3}
 8012c50:	469e      	mov	lr, r3
 8012c52:	4770      	bx	lr
