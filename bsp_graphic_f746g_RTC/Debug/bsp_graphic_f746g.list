
bsp_graphic_f746g.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016044  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000044e0  08016218  08016218  00017218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a6f8  0801a6f8  000210f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801a6f8  0801a6f8  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .qspi         00000000  90000000  90000000  000210f0  2**0
                  CONTENTS
  6 .preinit_array 00000000  0801a700  0801a700  000210f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801a700  0801a700  0001b700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801a704  0801a704  0001b704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000050f0  20000000  0801a708  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000155c  200050f0  0801f7f8  000210f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  2000664c  0801f7f8  0002164c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000210f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035fe6  00000000  00000000  00021120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007dc6  00000000  00000000  00057106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002b90  00000000  00000000  0005eed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002155  00000000  00000000  00061a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032fbc  00000000  00000000  00063bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d126  00000000  00000000  00096b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114609  00000000  00000000  000d3c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001e82a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c610  00000000  00000000  001e82e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001f48f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200050f0 	.word	0x200050f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080161fc 	.word	0x080161fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200050f4 	.word	0x200050f4
 800020c:	080161fc 	.word	0x080161fc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <getRTCTimeStr>:
RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;
const char* joursSemaine[] = {"Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"};


void getRTCTimeStr(char* timeStr) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    // Lecture de l'heure
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f80:	2200      	movs	r2, #0
 8000f82:	490b      	ldr	r1, [pc, #44]	@ (8000fb0 <getRTCTimeStr+0x38>)
 8000f84:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <getRTCTimeStr+0x3c>)
 8000f86:	f00b f81f 	bl	800bfc8 <HAL_RTC_GetTime>
    // Lecture de la date (obligatoire pour débloquer les registres)
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	490a      	ldr	r1, [pc, #40]	@ (8000fb8 <getRTCTimeStr+0x40>)
 8000f8e:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <getRTCTimeStr+0x3c>)
 8000f90:	f00b f8fc 	bl	800c18c <HAL_RTC_GetDate>

    // Format: "HH:MM"
    sprintf(timeStr, "%02d:%02d", sTime.Hours, sTime.Minutes);
 8000f94:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <getRTCTimeStr+0x38>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b05      	ldr	r3, [pc, #20]	@ (8000fb0 <getRTCTimeStr+0x38>)
 8000f9c:	785b      	ldrb	r3, [r3, #1]
 8000f9e:	4907      	ldr	r1, [pc, #28]	@ (8000fbc <getRTCTimeStr+0x44>)
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f012 fffd 	bl	8013fa0 <siprintf>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000510c 	.word	0x2000510c
 8000fb4:	20005ec8 	.word	0x20005ec8
 8000fb8:	20005120 	.word	0x20005120
 8000fbc:	0801625c 	.word	0x0801625c

08000fc0 <get_current_time_in_seconds>:
    //printf("Heure actuelle: %02d:%02d, Minutes depuis minuit: %lu\n", sTime.Hours, sTime.Minutes, minutes);

    return minutes;
}

uint32_t get_current_time_in_seconds(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    return HAL_GetTick() / 1000; // Convertir le temps système en secondes
 8000fc4:	f006 fe88 	bl	8007cd8 <HAL_GetTick>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a03      	ldr	r2, [pc, #12]	@ (8000fd8 <get_current_time_in_seconds+0x18>)
 8000fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd0:	099b      	lsrs	r3, r3, #6
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	10624dd3 	.word	0x10624dd3

08000fdc <date_Heure>:

//date et heure sur l'interface
// ===== En-tête avec la date =====
void date_Heure(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af00      	add	r7, sp, #0
	char dateStr[20];
	char timeStr[6];

	//date en en-tete
    BSP_LCD_SetFont(&Font16);
 8000fe2:	480e      	ldr	r0, [pc, #56]	@ (800101c <date_Heure+0x40>)
 8000fe4:	f005 f9a2 	bl	800632c <BSP_LCD_SetFont>
    getRTCDateStr(dateStr);
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 ff47 	bl	8003e80 <getRTCDateStr>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)dateStr, CENTER_MODE);
 8000ff2:	f107 020c 	add.w	r2, r7, #12
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	210a      	movs	r1, #10
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f005 fa1c 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Heure au centre
	//BSP_LCD_SetFont(&Font16);
	getRTCTimeStr(timeStr);
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ffb8 	bl	8000f78 <getRTCTimeStr>
	BSP_LCD_DisplayStringAt(0, 250, (uint8_t*)timeStr, CENTER_MODE);
 8001008:	1d3a      	adds	r2, r7, #4
 800100a:	2301      	movs	r3, #1
 800100c:	21fa      	movs	r1, #250	@ 0xfa
 800100e:	2000      	movs	r0, #0
 8001010:	f005 fa12 	bl	8006438 <BSP_LCD_DisplayStringAt>
}
 8001014:	bf00      	nop
 8001016:	3720      	adds	r7, #32
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20004f0c 	.word	0x20004f0c

08001020 <drawMenuPage>:

/**
 * @brief Dessine la page menu principale
 */
void drawMenuPage(void) {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0


    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f005 f99a 	bl	8006360 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800102c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001030:	f005 f94a 	bl	80062c8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001034:	f04f 30ff 	mov.w	r0, #4294967295
 8001038:	f005 f95e 	bl	80062f8 <BSP_LCD_SetBackColor>

    // ===== Section Gauche =====
    // Zone conteneur gauche
    BSP_LCD_DrawRect(40, 60, 180, 160);
 800103c:	23a0      	movs	r3, #160	@ 0xa0
 800103e:	22b4      	movs	r2, #180	@ 0xb4
 8001040:	213c      	movs	r1, #60	@ 0x3c
 8001042:	2028      	movs	r0, #40	@ 0x28
 8001044:	f005 fc4c 	bl	80068e0 <BSP_LCD_DrawRect>

    // Température
    BSP_LCD_DrawBitmap(50, 70, (uint8_t *)temp_icon_bmp);
 8001048:	4a2f      	ldr	r2, [pc, #188]	@ (8001108 <drawMenuPage+0xe8>)
 800104a:	2146      	movs	r1, #70	@ 0x46
 800104c:	2032      	movs	r0, #50	@ 0x32
 800104e:	f005 fdab 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font12);
 8001052:	482e      	ldr	r0, [pc, #184]	@ (800110c <drawMenuPage+0xec>)
 8001054:	f005 f96a 	bl	800632c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(92, 80, (uint8_t*)"Temperature", LEFT_MODE);
 8001058:	2303      	movs	r3, #3
 800105a:	4a2d      	ldr	r2, [pc, #180]	@ (8001110 <drawMenuPage+0xf0>)
 800105c:	2150      	movs	r1, #80	@ 0x50
 800105e:	205c      	movs	r0, #92	@ 0x5c
 8001060:	f005 f9ea 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Humidité
    BSP_LCD_DrawBitmap(50, 122, (uint8_t *)cloud_icon_bmp);
 8001064:	4a2b      	ldr	r2, [pc, #172]	@ (8001114 <drawMenuPage+0xf4>)
 8001066:	217a      	movs	r1, #122	@ 0x7a
 8001068:	2032      	movs	r0, #50	@ 0x32
 800106a:	f005 fd9d 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(92, 132, (uint8_t*)"Humidite", LEFT_MODE);
 800106e:	2303      	movs	r3, #3
 8001070:	4a29      	ldr	r2, [pc, #164]	@ (8001118 <drawMenuPage+0xf8>)
 8001072:	2184      	movs	r1, #132	@ 0x84
 8001074:	205c      	movs	r0, #92	@ 0x5c
 8001076:	f005 f9df 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Pluie
    BSP_LCD_DrawBitmap(50, 174, (uint8_t *)rain_icon_bmp);
 800107a:	4a28      	ldr	r2, [pc, #160]	@ (800111c <drawMenuPage+0xfc>)
 800107c:	21ae      	movs	r1, #174	@ 0xae
 800107e:	2032      	movs	r0, #50	@ 0x32
 8001080:	f005 fd92 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(92, 184, (uint8_t*)"Pluie", LEFT_MODE);
 8001084:	2303      	movs	r3, #3
 8001086:	4a26      	ldr	r2, [pc, #152]	@ (8001120 <drawMenuPage+0x100>)
 8001088:	21b8      	movs	r1, #184	@ 0xb8
 800108a:	205c      	movs	r0, #92	@ 0x5c
 800108c:	f005 f9d4 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // ===== Section Droite =====
    // Zone conteneur droite
    BSP_LCD_DrawRect(260, 60, 180, 160);
 8001090:	23a0      	movs	r3, #160	@ 0xa0
 8001092:	22b4      	movs	r2, #180	@ 0xb4
 8001094:	213c      	movs	r1, #60	@ 0x3c
 8001096:	f44f 7082 	mov.w	r0, #260	@ 0x104
 800109a:	f005 fc21 	bl	80068e0 <BSP_LCD_DrawRect>

    // Vent
    BSP_LCD_DrawBitmap(270, 70, (uint8_t *)wind_icon_bmp);
 800109e:	4a21      	ldr	r2, [pc, #132]	@ (8001124 <drawMenuPage+0x104>)
 80010a0:	2146      	movs	r1, #70	@ 0x46
 80010a2:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010a6:	f005 fd7f 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 80, (uint8_t*)"Vent", LEFT_MODE);
 80010aa:	2303      	movs	r3, #3
 80010ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001128 <drawMenuPage+0x108>)
 80010ae:	2150      	movs	r1, #80	@ 0x50
 80010b0:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80010b4:	f005 f9c0 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Direction
    BSP_LCD_DrawBitmap(270, 122, (uint8_t *)direction_icon_bmp);
 80010b8:	4a1c      	ldr	r2, [pc, #112]	@ (800112c <drawMenuPage+0x10c>)
 80010ba:	217a      	movs	r1, #122	@ 0x7a
 80010bc:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010c0:	f005 fd72 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 132, (uint8_t*)"Direction", LEFT_MODE);
 80010c4:	2303      	movs	r3, #3
 80010c6:	4a1a      	ldr	r2, [pc, #104]	@ (8001130 <drawMenuPage+0x110>)
 80010c8:	2184      	movs	r1, #132	@ 0x84
 80010ca:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80010ce:	f005 f9b3 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Pression
    BSP_LCD_DrawBitmap(270, 174, (uint8_t *)pressure_icon_bmp);
 80010d2:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <drawMenuPage+0x114>)
 80010d4:	21ae      	movs	r1, #174	@ 0xae
 80010d6:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010da:	f005 fd65 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 184, (uint8_t*)"Pression", LEFT_MODE);
 80010de:	2303      	movs	r3, #3
 80010e0:	4a15      	ldr	r2, [pc, #84]	@ (8001138 <drawMenuPage+0x118>)
 80010e2:	21b8      	movs	r1, #184	@ 0xb8
 80010e4:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80010e8:	f005 f9a6 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // ===== Barre inférieure =====

    // Icône info à gauche
    BSP_LCD_DrawBitmap(18, 235, (uint8_t *)infos_icon_bmp);
 80010ec:	4a13      	ldr	r2, [pc, #76]	@ (800113c <drawMenuPage+0x11c>)
 80010ee:	21eb      	movs	r1, #235	@ 0xeb
 80010f0:	2012      	movs	r0, #18
 80010f2:	f005 fd59 	bl	8006ba8 <BSP_LCD_DrawBitmap>


    // Icône paramètres à droite
    BSP_LCD_DrawBitmap(438, 235, (uint8_t *)setting_icon_bmp);
 80010f6:	4a12      	ldr	r2, [pc, #72]	@ (8001140 <drawMenuPage+0x120>)
 80010f8:	21eb      	movs	r1, #235	@ 0xeb
 80010fa:	f44f 70db 	mov.w	r0, #438	@ 0x1b6
 80010fe:	f005 fd53 	bl	8006ba8 <BSP_LCD_DrawBitmap>
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20002c48 	.word	0x20002c48
 800110c:	20004f14 	.word	0x20004f14
 8001110:	08016268 	.word	0x08016268
 8001114:	20000000 	.word	0x20000000
 8001118:	08016274 	.word	0x08016274
 800111c:	20001eb0 	.word	0x20001eb0
 8001120:	08016280 	.word	0x08016280
 8001124:	200034d4 	.word	0x200034d4
 8001128:	08016288 	.word	0x08016288
 800112c:	2000088c 	.word	0x2000088c
 8001130:	08016290 	.word	0x08016290
 8001134:	20001624 	.word	0x20001624
 8001138:	0801629c 	.word	0x0801629c
 800113c:	20001118 	.word	0x20001118
 8001140:	2000273c 	.word	0x2000273c

08001144 <drawCreditsPage>:

/**
 * @brief Dessine la page Crédits
 */
void drawCreditsPage(void) {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0


    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f005 f908 	bl	8006360 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001150:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001154:	f005 f8b8 	bl	80062c8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f005 f8cc 	bl	80062f8 <BSP_LCD_SetBackColor>


    // Icône retour
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001160:	4a12      	ldr	r2, [pc, #72]	@ (80011ac <drawCreditsPage+0x68>)
 8001162:	210a      	movs	r1, #10
 8001164:	200a      	movs	r0, #10
 8001166:	f005 fd1f 	bl	8006ba8 <BSP_LCD_DrawBitmap>

    // ===== Titre explicatif =====
    BSP_LCD_SetFont(&Font16);
 800116a:	4811      	ldr	r0, [pc, #68]	@ (80011b0 <drawCreditsPage+0x6c>)
 800116c:	f005 f8de 	bl	800632c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"Cette station Meteo a ete realisee par :", CENTER_MODE);
 8001170:	2301      	movs	r3, #1
 8001172:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <drawCreditsPage+0x70>)
 8001174:	2150      	movs	r1, #80	@ 0x50
 8001176:	2000      	movs	r0, #0
 8001178:	f005 f95e 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // ===== Liste des développeurs =====
    BSP_LCD_SetFont(&Font16);  // Police plus grande pour les noms
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <drawCreditsPage+0x6c>)
 800117e:	f005 f8d5 	bl	800632c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t*)"Maxime MORET", CENTER_MODE);
 8001182:	2301      	movs	r3, #1
 8001184:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <drawCreditsPage+0x74>)
 8001186:	2182      	movs	r1, #130	@ 0x82
 8001188:	2000      	movs	r0, #0
 800118a:	f005 f955 	bl	8006438 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 160, (uint8_t*)"Tristan GROUSSARD", CENTER_MODE);
 800118e:	2301      	movs	r3, #1
 8001190:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <drawCreditsPage+0x78>)
 8001192:	21a0      	movs	r1, #160	@ 0xa0
 8001194:	2000      	movs	r0, #0
 8001196:	f005 f94f 	bl	8006438 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 190, (uint8_t*)"Koundeme Nobel DJESSOU", CENTER_MODE);
 800119a:	2301      	movs	r3, #1
 800119c:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <drawCreditsPage+0x7c>)
 800119e:	21be      	movs	r1, #190	@ 0xbe
 80011a0:	2000      	movs	r0, #0
 80011a2:	f005 f949 	bl	8006438 <BSP_LCD_DisplayStringAt>

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20003d60 	.word	0x20003d60
 80011b0:	20004f0c 	.word	0x20004f0c
 80011b4:	080162a8 	.word	0x080162a8
 80011b8:	080162d4 	.word	0x080162d4
 80011bc:	080162e4 	.word	0x080162e4
 80011c0:	080162f8 	.word	0x080162f8

080011c4 <drawTempHumidRainPage>:

/**
 * @brief Dessine la page 1
 */
void drawTempHumidRainPage(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
    //char tempStr[10];
    //char humidStr[10];
    char rainStr[10];

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80011ca:	f04f 30ff 	mov.w	r0, #4294967295
 80011ce:	f005 f8c7 	bl	8006360 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011d2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80011d6:	f005 f877 	bl	80062c8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011da:	f04f 30ff 	mov.w	r0, #4294967295
 80011de:	f005 f88b 	bl	80062f8 <BSP_LCD_SetBackColor>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80011e2:	4a3a      	ldr	r2, [pc, #232]	@ (80012cc <drawTempHumidRainPage+0x108>)
 80011e4:	210a      	movs	r1, #10
 80011e6:	200a      	movs	r0, #10
 80011e8:	f005 fcde 	bl	8006ba8 <BSP_LCD_DrawBitmap>

    // ===== Les trois carrés de mesures =====
    // Carrés de 120x120 pixels avec espacement de 30 pixels
    // Position Y centrée verticalement
    volatile const uint16_t squareSize = 120;
 80011ec:	2378      	movs	r3, #120	@ 0x78
 80011ee:	817b      	strh	r3, [r7, #10]
    volatile const uint16_t spacing = 30;
 80011f0:	231e      	movs	r3, #30
 80011f2:	813b      	strh	r3, [r7, #8]
    volatile const uint16_t startX = 40;
 80011f4:	2328      	movs	r3, #40	@ 0x28
 80011f6:	80fb      	strh	r3, [r7, #6]
    volatile const uint16_t startY = 80;  // Ajusté pour centrer verticalement
 80011f8:	2350      	movs	r3, #80	@ 0x50
 80011fa:	80bb      	strh	r3, [r7, #4]

    // Carré température
    BSP_LCD_DrawRect(startX, startY, squareSize, squareSize);
 80011fc:	88fb      	ldrh	r3, [r7, #6]
 80011fe:	b298      	uxth	r0, r3
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	b299      	uxth	r1, r3
 8001204:	897b      	ldrh	r3, [r7, #10]
 8001206:	b29a      	uxth	r2, r3
 8001208:	897b      	ldrh	r3, [r7, #10]
 800120a:	b29b      	uxth	r3, r3
 800120c:	f005 fb68 	bl	80068e0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 20, startY + 20, (uint8_t *)temp_icon_bmp);
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	b29b      	uxth	r3, r3
 8001214:	3314      	adds	r3, #20
 8001216:	4618      	mov	r0, r3
 8001218:	88bb      	ldrh	r3, [r7, #4]
 800121a:	b29b      	uxth	r3, r3
 800121c:	3314      	adds	r3, #20
 800121e:	4a2c      	ldr	r2, [pc, #176]	@ (80012d0 <drawTempHumidRainPage+0x10c>)
 8001220:	4619      	mov	r1, r3
 8001222:	f005 fcc1 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font20);
 8001226:	482b      	ldr	r0, [pc, #172]	@ (80012d4 <drawTempHumidRainPage+0x110>)
 8001228:	f005 f880 	bl	800632c <BSP_LCD_SetFont>
    //sprintf(tempStr, "15deg");
    //BSP_LCD_DisplayStringAt(startX + 20, startY + 70, (uint8_t*)tempStr, LEFT_MODE);

    // Carré humidité
    BSP_LCD_DrawRect(startX + squareSize + spacing, startY, squareSize, squareSize);
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	b29a      	uxth	r2, r3
 8001230:	897b      	ldrh	r3, [r7, #10]
 8001232:	b29b      	uxth	r3, r3
 8001234:	4413      	add	r3, r2
 8001236:	b29a      	uxth	r2, r3
 8001238:	893b      	ldrh	r3, [r7, #8]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b298      	uxth	r0, r3
 8001240:	88bb      	ldrh	r3, [r7, #4]
 8001242:	b299      	uxth	r1, r3
 8001244:	897b      	ldrh	r3, [r7, #10]
 8001246:	b29a      	uxth	r2, r3
 8001248:	897b      	ldrh	r3, [r7, #10]
 800124a:	b29b      	uxth	r3, r3
 800124c:	f005 fb48 	bl	80068e0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + squareSize + spacing + 20, startY + 20, (uint8_t *)cloud_icon_bmp);
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	b29b      	uxth	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	897b      	ldrh	r3, [r7, #10]
 8001258:	b29b      	uxth	r3, r3
 800125a:	4413      	add	r3, r2
 800125c:	893a      	ldrh	r2, [r7, #8]
 800125e:	b292      	uxth	r2, r2
 8001260:	4413      	add	r3, r2
 8001262:	3314      	adds	r3, #20
 8001264:	4618      	mov	r0, r3
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	b29b      	uxth	r3, r3
 800126a:	3314      	adds	r3, #20
 800126c:	4a1a      	ldr	r2, [pc, #104]	@ (80012d8 <drawTempHumidRainPage+0x114>)
 800126e:	4619      	mov	r1, r3
 8001270:	f005 fc9a 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    //sprintf(humidStr, "65%%");
    //BSP_LCD_DisplayStringAt(startX + squareSize + spacing + 20, startY + 70, (uint8_t*)humidStr, LEFT_MODE);

    // Carré pluviométrie
    BSP_LCD_DrawRect(startX + 2 * (squareSize + spacing), startY, squareSize, squareSize);
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	b29a      	uxth	r2, r3
 8001278:	893b      	ldrh	r3, [r7, #8]
 800127a:	b29b      	uxth	r3, r3
 800127c:	4413      	add	r3, r2
 800127e:	b29b      	uxth	r3, r3
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	b29a      	uxth	r2, r3
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4413      	add	r3, r2
 800128a:	b298      	uxth	r0, r3
 800128c:	88bb      	ldrh	r3, [r7, #4]
 800128e:	b299      	uxth	r1, r3
 8001290:	897b      	ldrh	r3, [r7, #10]
 8001292:	b29a      	uxth	r2, r3
 8001294:	897b      	ldrh	r3, [r7, #10]
 8001296:	b29b      	uxth	r3, r3
 8001298:	f005 fb22 	bl	80068e0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 2 * (squareSize + spacing) + 20, startY + 20, (uint8_t *)rain_icon_bmp);
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	893b      	ldrh	r3, [r7, #8]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	440b      	add	r3, r1
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	4413      	add	r3, r2
 80012b2:	3314      	adds	r3, #20
 80012b4:	4618      	mov	r0, r3
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	3314      	adds	r3, #20
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <drawTempHumidRainPage+0x118>)
 80012be:	4619      	mov	r1, r3
 80012c0:	f005 fc72 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    //sprintf(rainStr, "100 mm");
    //BSP_LCD_DisplayStringAt(startX + 2 * (squareSize + spacing) + 20, startY + 70, (uint8_t*)rainStr, LEFT_MODE);


}
 80012c4:	bf00      	nop
 80012c6:	3718      	adds	r7, #24
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20003d60 	.word	0x20003d60
 80012d0:	20002c48 	.word	0x20002c48
 80012d4:	20004f04 	.word	0x20004f04
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20001eb0 	.word	0x20001eb0

080012e0 <drawWindDirPressurePage>:

/**
 * @brief Dessine la page 2
 */

void drawWindDirPressurePage(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	@ 0x30
 80012e4:	af00      	add	r7, sp, #0
    char windStr[10];
    char dirStr[10];
    char pressureStr[10];

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80012e6:	f04f 30ff 	mov.w	r0, #4294967295
 80012ea:	f005 f839 	bl	8006360 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80012ee:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80012f2:	f004 ffe9 	bl	80062c8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80012f6:	f04f 30ff 	mov.w	r0, #4294967295
 80012fa:	f004 fffd 	bl	80062f8 <BSP_LCD_SetBackColor>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80012fe:	4a37      	ldr	r2, [pc, #220]	@ (80013dc <drawWindDirPressurePage+0xfc>)
 8001300:	210a      	movs	r1, #10
 8001302:	200a      	movs	r0, #10
 8001304:	f005 fc50 	bl	8006ba8 <BSP_LCD_DrawBitmap>

    // ===== Les trois carrés de mesures =====
    // Carrés de 120x120 pixels avec espacement de 30 pixels
    const uint16_t squareSize = 120;
 8001308:	2378      	movs	r3, #120	@ 0x78
 800130a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    const uint16_t spacing = 30;
 800130c:	231e      	movs	r3, #30
 800130e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    const uint16_t startX = 40;
 8001310:	2328      	movs	r3, #40	@ 0x28
 8001312:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const uint16_t startY = 80;  // Ajusté pour centrer verticalement
 8001314:	2350      	movs	r3, #80	@ 0x50
 8001316:	853b      	strh	r3, [r7, #40]	@ 0x28

    // Carré vitesse du vent
    BSP_LCD_DrawRect(startX, startY, squareSize, squareSize);
 8001318:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800131a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800131c:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 800131e:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 8001320:	f005 fade 	bl	80068e0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 20, startY + 20, (uint8_t *)wind_icon_bmp);
 8001324:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001326:	3314      	adds	r3, #20
 8001328:	4618      	mov	r0, r3
 800132a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800132c:	3314      	adds	r3, #20
 800132e:	4a2c      	ldr	r2, [pc, #176]	@ (80013e0 <drawWindDirPressurePage+0x100>)
 8001330:	4619      	mov	r1, r3
 8001332:	f005 fc39 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font20);
 8001336:	482b      	ldr	r0, [pc, #172]	@ (80013e4 <drawWindDirPressurePage+0x104>)
 8001338:	f004 fff8 	bl	800632c <BSP_LCD_SetFont>
    sprintf(windStr, "30\nkm/h");
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4929      	ldr	r1, [pc, #164]	@ (80013e8 <drawWindDirPressurePage+0x108>)
 8001342:	4618      	mov	r0, r3
 8001344:	f012 fe2c 	bl	8013fa0 <siprintf>
    BSP_LCD_DisplayStringAt(startX + 20, startY + 60, (uint8_t*)windStr, LEFT_MODE);
 8001348:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800134a:	3314      	adds	r3, #20
 800134c:	b298      	uxth	r0, r3
 800134e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001350:	333c      	adds	r3, #60	@ 0x3c
 8001352:	b299      	uxth	r1, r3
 8001354:	f107 021c 	add.w	r2, r7, #28
 8001358:	2303      	movs	r3, #3
 800135a:	f005 f86d 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Carré direction du vent
    BSP_LCD_DrawRect(startX + squareSize + spacing, startY, squareSize, squareSize);
 800135e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001360:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8001362:	4413      	add	r3, r2
 8001364:	b29a      	uxth	r2, r3
 8001366:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001368:	4413      	add	r3, r2
 800136a:	b298      	uxth	r0, r3
 800136c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800136e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001370:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8001372:	f005 fab5 	bl	80068e0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + squareSize + spacing + 20, startY + 20, (uint8_t *)direction_icon_bmp);
 8001376:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001378:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800137a:	441a      	add	r2, r3
 800137c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800137e:	4413      	add	r3, r2
 8001380:	3314      	adds	r3, #20
 8001382:	4618      	mov	r0, r3
 8001384:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001386:	3314      	adds	r3, #20
 8001388:	4a18      	ldr	r2, [pc, #96]	@ (80013ec <drawWindDirPressurePage+0x10c>)
 800138a:	4619      	mov	r1, r3
 800138c:	f005 fc0c 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    //sprintf(dirStr, "65%%");
    //BSP_LCD_DisplayStringAt(startX + squareSize + spacing + 20, startY + 70, (uint8_t*)dirStr, LEFT_MODE);

    // Carré pression
    BSP_LCD_DrawRect(startX + 2 * (squareSize + spacing), startY, squareSize, squareSize);
 8001390:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001392:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001394:	4413      	add	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	b29a      	uxth	r2, r3
 800139c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800139e:	4413      	add	r3, r2
 80013a0:	b298      	uxth	r0, r3
 80013a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80013a4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80013a6:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 80013a8:	f005 fa9a 	bl	80068e0 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 2 * (squareSize + spacing) + 20, startY + 20, (uint8_t *)pressure_icon_bmp);
 80013ac:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80013ae:	8df9      	ldrh	r1, [r7, #46]	@ 0x2e
 80013b0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80013b2:	440b      	add	r3, r1
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	3314      	adds	r3, #20
 80013ba:	4618      	mov	r0, r3
 80013bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80013be:	3314      	adds	r3, #20
 80013c0:	4a0b      	ldr	r2, [pc, #44]	@ (80013f0 <drawWindDirPressurePage+0x110>)
 80013c2:	4619      	mov	r1, r3
 80013c4:	f005 fbf0 	bl	8006ba8 <BSP_LCD_DrawBitmap>
    sprintf(pressureStr, "50\nbar");
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	490a      	ldr	r1, [pc, #40]	@ (80013f4 <drawWindDirPressurePage+0x114>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f012 fde7 	bl	8013fa0 <siprintf>
    //BSP_LCD_DisplayStringAt(startX + 2 * (squareSize + spacing) + 20, startY + 60, (uint8_t*)pressureStr, LEFT_MODE);
}
 80013d2:	bf00      	nop
 80013d4:	3730      	adds	r7, #48	@ 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20003d60 	.word	0x20003d60
 80013e0:	200034d4 	.word	0x200034d4
 80013e4:	20004f04 	.word	0x20004f04
 80013e8:	08016310 	.word	0x08016310
 80013ec:	2000088c 	.word	0x2000088c
 80013f0:	20001624 	.word	0x20001624
 80013f4:	08016318 	.word	0x08016318

080013f8 <drawSettingsPage>:
 * @brief Dessine la page de réglage date/heure
 */
/**
 * @brief Dessine la page de réglage date/heure
 */
void drawSettingsPage(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af02      	add	r7, sp, #8
    char buffer[20];
    const uint16_t buttonSize = 30;      // Taille des boutons +/-
 80013fe:	231e      	movs	r3, #30
 8001400:	83fb      	strh	r3, [r7, #30]
    const uint16_t valueWidth = 60;      // Largeur zone valeur
 8001402:	233c      	movs	r3, #60	@ 0x3c
 8001404:	83bb      	strh	r3, [r7, #28]
    const uint16_t spacing = 30;         // Espacement entre les éléments
 8001406:	231e      	movs	r3, #30
 8001408:	837b      	strh	r3, [r7, #26]

    // Lire les valeurs actuelles de la RTC
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800140a:	2200      	movs	r2, #0
 800140c:	499e      	ldr	r1, [pc, #632]	@ (8001688 <drawSettingsPage+0x290>)
 800140e:	489f      	ldr	r0, [pc, #636]	@ (800168c <drawSettingsPage+0x294>)
 8001410:	f00a fdda 	bl	800bfc8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001414:	2200      	movs	r2, #0
 8001416:	499e      	ldr	r1, [pc, #632]	@ (8001690 <drawSettingsPage+0x298>)
 8001418:	489c      	ldr	r0, [pc, #624]	@ (800168c <drawSettingsPage+0x294>)
 800141a:	f00a feb7 	bl	800c18c <HAL_RTC_GetDate>

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800141e:	f04f 30ff 	mov.w	r0, #4294967295
 8001422:	f004 ff9d 	bl	8006360 <BSP_LCD_Clear>

    // Icône retour
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001426:	4a9b      	ldr	r2, [pc, #620]	@ (8001694 <drawSettingsPage+0x29c>)
 8001428:	210a      	movs	r1, #10
 800142a:	200a      	movs	r0, #10
 800142c:	f005 fbbc 	bl	8006ba8 <BSP_LCD_DrawBitmap>

    // Configuration texte
    BSP_LCD_SetFont(&Font16);
 8001430:	4899      	ldr	r0, [pc, #612]	@ (8001698 <drawSettingsPage+0x2a0>)
 8001432:	f004 ff7b 	bl	800632c <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001436:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800143a:	f004 ff45 	bl	80062c8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800143e:	f04f 30ff 	mov.w	r0, #4294967295
 8001442:	f004 ff59 	bl	80062f8 <BSP_LCD_SetBackColor>

    // Section Date
    BSP_LCD_DisplayStringAt(40, 80, (uint8_t*)"Date", LEFT_MODE);
 8001446:	2303      	movs	r3, #3
 8001448:	4a94      	ldr	r2, [pc, #592]	@ (800169c <drawSettingsPage+0x2a4>)
 800144a:	2150      	movs	r1, #80	@ 0x50
 800144c:	2028      	movs	r0, #40	@ 0x28
 800144e:	f004 fff3 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Positions horizontales pour les colonnes de réglage
    const uint16_t col1 = 150;  // Jour
 8001452:	2396      	movs	r3, #150	@ 0x96
 8001454:	833b      	strh	r3, [r7, #24]
    const uint16_t col2 = col1 + valueWidth + spacing;  // Mois
 8001456:	8b3a      	ldrh	r2, [r7, #24]
 8001458:	8bbb      	ldrh	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	b29a      	uxth	r2, r3
 800145e:	8b7b      	ldrh	r3, [r7, #26]
 8001460:	4413      	add	r3, r2
 8001462:	82fb      	strh	r3, [r7, #22]
    const uint16_t col3 = col2 + valueWidth + spacing;  // Année
 8001464:	8afa      	ldrh	r2, [r7, #22]
 8001466:	8bbb      	ldrh	r3, [r7, #28]
 8001468:	4413      	add	r3, r2
 800146a:	b29a      	uxth	r2, r3
 800146c:	8b7b      	ldrh	r3, [r7, #26]
 800146e:	4413      	add	r3, r2
 8001470:	82bb      	strh	r3, [r7, #20]

    // Afficher la date actuelle en haut
    sprintf(buffer, "%02d/%02d/%04d", sDate.Date, sDate.Month, 2000 + sDate.Year);
 8001472:	4b87      	ldr	r3, [pc, #540]	@ (8001690 <drawSettingsPage+0x298>)
 8001474:	789b      	ldrb	r3, [r3, #2]
 8001476:	461a      	mov	r2, r3
 8001478:	4b85      	ldr	r3, [pc, #532]	@ (8001690 <drawSettingsPage+0x298>)
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	4619      	mov	r1, r3
 800147e:	4b84      	ldr	r3, [pc, #528]	@ (8001690 <drawSettingsPage+0x298>)
 8001480:	78db      	ldrb	r3, [r3, #3]
 8001482:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001486:	4638      	mov	r0, r7
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	460b      	mov	r3, r1
 800148c:	4984      	ldr	r1, [pc, #528]	@ (80016a0 <drawSettingsPage+0x2a8>)
 800148e:	f012 fd87 	bl	8013fa0 <siprintf>
    BSP_LCD_DisplayStringAt(0, 15, (uint8_t*)buffer, CENTER_MODE);
 8001492:	463a      	mov	r2, r7
 8001494:	2301      	movs	r3, #1
 8001496:	210f      	movs	r1, #15
 8001498:	2000      	movs	r0, #0
 800149a:	f004 ffcd 	bl	8006438 <BSP_LCD_DisplayStringAt>

// Boutons et valeurs pour le jour
	BSP_LCD_DrawRect(col1, 40, buttonSize, buttonSize);  // Bouton +
 800149e:	8bfb      	ldrh	r3, [r7, #30]
 80014a0:	8bfa      	ldrh	r2, [r7, #30]
 80014a2:	8b38      	ldrh	r0, [r7, #24]
 80014a4:	2128      	movs	r1, #40	@ 0x28
 80014a6:	f005 fa1b 	bl	80068e0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col1 + 10, 50, (uint8_t*)"+", LEFT_MODE);
 80014aa:	8b3b      	ldrh	r3, [r7, #24]
 80014ac:	330a      	adds	r3, #10
 80014ae:	b298      	uxth	r0, r3
 80014b0:	2303      	movs	r3, #3
 80014b2:	4a7c      	ldr	r2, [pc, #496]	@ (80016a4 <drawSettingsPage+0x2ac>)
 80014b4:	2132      	movs	r1, #50	@ 0x32
 80014b6:	f004 ffbf 	bl	8006438 <BSP_LCD_DisplayStringAt>
	sprintf(buffer, "%02d", sDate.Date);
 80014ba:	4b75      	ldr	r3, [pc, #468]	@ (8001690 <drawSettingsPage+0x298>)
 80014bc:	789b      	ldrb	r3, [r3, #2]
 80014be:	461a      	mov	r2, r3
 80014c0:	463b      	mov	r3, r7
 80014c2:	4979      	ldr	r1, [pc, #484]	@ (80016a8 <drawSettingsPage+0x2b0>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f012 fd6b 	bl	8013fa0 <siprintf>
	BSP_LCD_DisplayStringAt(col1 + 5, 85, (uint8_t*)buffer, LEFT_MODE);
 80014ca:	8b3b      	ldrh	r3, [r7, #24]
 80014cc:	3305      	adds	r3, #5
 80014ce:	b298      	uxth	r0, r3
 80014d0:	463a      	mov	r2, r7
 80014d2:	2303      	movs	r3, #3
 80014d4:	2155      	movs	r1, #85	@ 0x55
 80014d6:	f004 ffaf 	bl	8006438 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(col1, 105, buttonSize, buttonSize);  // Bouton -
 80014da:	8bfb      	ldrh	r3, [r7, #30]
 80014dc:	8bfa      	ldrh	r2, [r7, #30]
 80014de:	8b38      	ldrh	r0, [r7, #24]
 80014e0:	2169      	movs	r1, #105	@ 0x69
 80014e2:	f005 f9fd 	bl	80068e0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col1 + 10, 115, (uint8_t*)"-", LEFT_MODE);
 80014e6:	8b3b      	ldrh	r3, [r7, #24]
 80014e8:	330a      	adds	r3, #10
 80014ea:	b298      	uxth	r0, r3
 80014ec:	2303      	movs	r3, #3
 80014ee:	4a6f      	ldr	r2, [pc, #444]	@ (80016ac <drawSettingsPage+0x2b4>)
 80014f0:	2173      	movs	r1, #115	@ 0x73
 80014f2:	f004 ffa1 	bl	8006438 <BSP_LCD_DisplayStringAt>

	// Boutons et valeurs pour le mois
	BSP_LCD_DrawRect(col2, 40, buttonSize, buttonSize);
 80014f6:	8bfb      	ldrh	r3, [r7, #30]
 80014f8:	8bfa      	ldrh	r2, [r7, #30]
 80014fa:	8af8      	ldrh	r0, [r7, #22]
 80014fc:	2128      	movs	r1, #40	@ 0x28
 80014fe:	f005 f9ef 	bl	80068e0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col2 + 10, 50, (uint8_t*)"+", LEFT_MODE);
 8001502:	8afb      	ldrh	r3, [r7, #22]
 8001504:	330a      	adds	r3, #10
 8001506:	b298      	uxth	r0, r3
 8001508:	2303      	movs	r3, #3
 800150a:	4a66      	ldr	r2, [pc, #408]	@ (80016a4 <drawSettingsPage+0x2ac>)
 800150c:	2132      	movs	r1, #50	@ 0x32
 800150e:	f004 ff93 	bl	8006438 <BSP_LCD_DisplayStringAt>
	sprintf(buffer, "%02d", sDate.Month);
 8001512:	4b5f      	ldr	r3, [pc, #380]	@ (8001690 <drawSettingsPage+0x298>)
 8001514:	785b      	ldrb	r3, [r3, #1]
 8001516:	461a      	mov	r2, r3
 8001518:	463b      	mov	r3, r7
 800151a:	4963      	ldr	r1, [pc, #396]	@ (80016a8 <drawSettingsPage+0x2b0>)
 800151c:	4618      	mov	r0, r3
 800151e:	f012 fd3f 	bl	8013fa0 <siprintf>
	BSP_LCD_DisplayStringAt(col2 + 5, 85, (uint8_t*)buffer, LEFT_MODE);
 8001522:	8afb      	ldrh	r3, [r7, #22]
 8001524:	3305      	adds	r3, #5
 8001526:	b298      	uxth	r0, r3
 8001528:	463a      	mov	r2, r7
 800152a:	2303      	movs	r3, #3
 800152c:	2155      	movs	r1, #85	@ 0x55
 800152e:	f004 ff83 	bl	8006438 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(col2, 105, buttonSize, buttonSize);  // Bouton -
 8001532:	8bfb      	ldrh	r3, [r7, #30]
 8001534:	8bfa      	ldrh	r2, [r7, #30]
 8001536:	8af8      	ldrh	r0, [r7, #22]
 8001538:	2169      	movs	r1, #105	@ 0x69
 800153a:	f005 f9d1 	bl	80068e0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col2 + 10, 115, (uint8_t*)"-", LEFT_MODE);
 800153e:	8afb      	ldrh	r3, [r7, #22]
 8001540:	330a      	adds	r3, #10
 8001542:	b298      	uxth	r0, r3
 8001544:	2303      	movs	r3, #3
 8001546:	4a59      	ldr	r2, [pc, #356]	@ (80016ac <drawSettingsPage+0x2b4>)
 8001548:	2173      	movs	r1, #115	@ 0x73
 800154a:	f004 ff75 	bl	8006438 <BSP_LCD_DisplayStringAt>

	// Boutons et valeurs pour l'année
	BSP_LCD_DrawRect(col3, 40, buttonSize, buttonSize);
 800154e:	8bfb      	ldrh	r3, [r7, #30]
 8001550:	8bfa      	ldrh	r2, [r7, #30]
 8001552:	8ab8      	ldrh	r0, [r7, #20]
 8001554:	2128      	movs	r1, #40	@ 0x28
 8001556:	f005 f9c3 	bl	80068e0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col3 + 10, 50, (uint8_t*)"+", LEFT_MODE);
 800155a:	8abb      	ldrh	r3, [r7, #20]
 800155c:	330a      	adds	r3, #10
 800155e:	b298      	uxth	r0, r3
 8001560:	2303      	movs	r3, #3
 8001562:	4a50      	ldr	r2, [pc, #320]	@ (80016a4 <drawSettingsPage+0x2ac>)
 8001564:	2132      	movs	r1, #50	@ 0x32
 8001566:	f004 ff67 	bl	8006438 <BSP_LCD_DisplayStringAt>
	sprintf(buffer, "20%02d", sDate.Year);
 800156a:	4b49      	ldr	r3, [pc, #292]	@ (8001690 <drawSettingsPage+0x298>)
 800156c:	78db      	ldrb	r3, [r3, #3]
 800156e:	461a      	mov	r2, r3
 8001570:	463b      	mov	r3, r7
 8001572:	494f      	ldr	r1, [pc, #316]	@ (80016b0 <drawSettingsPage+0x2b8>)
 8001574:	4618      	mov	r0, r3
 8001576:	f012 fd13 	bl	8013fa0 <siprintf>
	BSP_LCD_DisplayStringAt(col3 - 5, 85, (uint8_t*)buffer, LEFT_MODE);
 800157a:	8abb      	ldrh	r3, [r7, #20]
 800157c:	3b05      	subs	r3, #5
 800157e:	b298      	uxth	r0, r3
 8001580:	463a      	mov	r2, r7
 8001582:	2303      	movs	r3, #3
 8001584:	2155      	movs	r1, #85	@ 0x55
 8001586:	f004 ff57 	bl	8006438 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(col3, 105, buttonSize, buttonSize);  // Bouton -
 800158a:	8bfb      	ldrh	r3, [r7, #30]
 800158c:	8bfa      	ldrh	r2, [r7, #30]
 800158e:	8ab8      	ldrh	r0, [r7, #20]
 8001590:	2169      	movs	r1, #105	@ 0x69
 8001592:	f005 f9a5 	bl	80068e0 <BSP_LCD_DrawRect>
	BSP_LCD_DisplayStringAt(col3 + 10, 115, (uint8_t*)"-", LEFT_MODE);
 8001596:	8abb      	ldrh	r3, [r7, #20]
 8001598:	330a      	adds	r3, #10
 800159a:	b298      	uxth	r0, r3
 800159c:	2303      	movs	r3, #3
 800159e:	4a43      	ldr	r2, [pc, #268]	@ (80016ac <drawSettingsPage+0x2b4>)
 80015a0:	2173      	movs	r1, #115	@ 0x73
 80015a2:	f004 ff49 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Section Heure (déplacée vers le haut)
    BSP_LCD_DisplayStringAt(40, 160, (uint8_t*)"Heure", LEFT_MODE);
 80015a6:	2303      	movs	r3, #3
 80015a8:	4a42      	ldr	r2, [pc, #264]	@ (80016b4 <drawSettingsPage+0x2bc>)
 80015aa:	21a0      	movs	r1, #160	@ 0xa0
 80015ac:	2028      	movs	r0, #40	@ 0x28
 80015ae:	f004 ff43 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Boutons et valeurs pour les heures (déplacés vers le haut)
    BSP_LCD_DrawRect(col1, 140, buttonSize, buttonSize);  // Bouton +
 80015b2:	8bfb      	ldrh	r3, [r7, #30]
 80015b4:	8bfa      	ldrh	r2, [r7, #30]
 80015b6:	8b38      	ldrh	r0, [r7, #24]
 80015b8:	218c      	movs	r1, #140	@ 0x8c
 80015ba:	f005 f991 	bl	80068e0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col1 + 10, 145, (uint8_t*)"+", LEFT_MODE);
 80015be:	8b3b      	ldrh	r3, [r7, #24]
 80015c0:	330a      	adds	r3, #10
 80015c2:	b298      	uxth	r0, r3
 80015c4:	2303      	movs	r3, #3
 80015c6:	4a37      	ldr	r2, [pc, #220]	@ (80016a4 <drawSettingsPage+0x2ac>)
 80015c8:	2191      	movs	r1, #145	@ 0x91
 80015ca:	f004 ff35 	bl	8006438 <BSP_LCD_DisplayStringAt>
    sprintf(buffer, "%02d", sTime.Hours);
 80015ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001688 <drawSettingsPage+0x290>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	463b      	mov	r3, r7
 80015d6:	4934      	ldr	r1, [pc, #208]	@ (80016a8 <drawSettingsPage+0x2b0>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f012 fce1 	bl	8013fa0 <siprintf>
    BSP_LCD_DisplayStringAt(col1 + 5, 180, (uint8_t*)buffer, LEFT_MODE);
 80015de:	8b3b      	ldrh	r3, [r7, #24]
 80015e0:	3305      	adds	r3, #5
 80015e2:	b298      	uxth	r0, r3
 80015e4:	463a      	mov	r2, r7
 80015e6:	2303      	movs	r3, #3
 80015e8:	21b4      	movs	r1, #180	@ 0xb4
 80015ea:	f004 ff25 	bl	8006438 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(col1, 200, buttonSize, buttonSize);  // Bouton -
 80015ee:	8bfb      	ldrh	r3, [r7, #30]
 80015f0:	8bfa      	ldrh	r2, [r7, #30]
 80015f2:	8b38      	ldrh	r0, [r7, #24]
 80015f4:	21c8      	movs	r1, #200	@ 0xc8
 80015f6:	f005 f973 	bl	80068e0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col1 + 10, 205, (uint8_t*)"-", LEFT_MODE);
 80015fa:	8b3b      	ldrh	r3, [r7, #24]
 80015fc:	330a      	adds	r3, #10
 80015fe:	b298      	uxth	r0, r3
 8001600:	2303      	movs	r3, #3
 8001602:	4a2a      	ldr	r2, [pc, #168]	@ (80016ac <drawSettingsPage+0x2b4>)
 8001604:	21cd      	movs	r1, #205	@ 0xcd
 8001606:	f004 ff17 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Boutons et valeurs pour les minutes (déplacés vers le haut)
    BSP_LCD_DrawRect(col2, 140, buttonSize, buttonSize);
 800160a:	8bfb      	ldrh	r3, [r7, #30]
 800160c:	8bfa      	ldrh	r2, [r7, #30]
 800160e:	8af8      	ldrh	r0, [r7, #22]
 8001610:	218c      	movs	r1, #140	@ 0x8c
 8001612:	f005 f965 	bl	80068e0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col2 + 10, 145, (uint8_t*)"+", LEFT_MODE);
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	330a      	adds	r3, #10
 800161a:	b298      	uxth	r0, r3
 800161c:	2303      	movs	r3, #3
 800161e:	4a21      	ldr	r2, [pc, #132]	@ (80016a4 <drawSettingsPage+0x2ac>)
 8001620:	2191      	movs	r1, #145	@ 0x91
 8001622:	f004 ff09 	bl	8006438 <BSP_LCD_DisplayStringAt>
    sprintf(buffer, "%02d", sTime.Minutes);
 8001626:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <drawSettingsPage+0x290>)
 8001628:	785b      	ldrb	r3, [r3, #1]
 800162a:	461a      	mov	r2, r3
 800162c:	463b      	mov	r3, r7
 800162e:	491e      	ldr	r1, [pc, #120]	@ (80016a8 <drawSettingsPage+0x2b0>)
 8001630:	4618      	mov	r0, r3
 8001632:	f012 fcb5 	bl	8013fa0 <siprintf>
    BSP_LCD_DisplayStringAt(col2 + 5, 180, (uint8_t*)buffer, LEFT_MODE);
 8001636:	8afb      	ldrh	r3, [r7, #22]
 8001638:	3305      	adds	r3, #5
 800163a:	b298      	uxth	r0, r3
 800163c:	463a      	mov	r2, r7
 800163e:	2303      	movs	r3, #3
 8001640:	21b4      	movs	r1, #180	@ 0xb4
 8001642:	f004 fef9 	bl	8006438 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(col2, 200, buttonSize, buttonSize);
 8001646:	8bfb      	ldrh	r3, [r7, #30]
 8001648:	8bfa      	ldrh	r2, [r7, #30]
 800164a:	8af8      	ldrh	r0, [r7, #22]
 800164c:	21c8      	movs	r1, #200	@ 0xc8
 800164e:	f005 f947 	bl	80068e0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col2 + 10, 205, (uint8_t*)"-", LEFT_MODE);
 8001652:	8afb      	ldrh	r3, [r7, #22]
 8001654:	330a      	adds	r3, #10
 8001656:	b298      	uxth	r0, r3
 8001658:	2303      	movs	r3, #3
 800165a:	4a14      	ldr	r2, [pc, #80]	@ (80016ac <drawSettingsPage+0x2b4>)
 800165c:	21cd      	movs	r1, #205	@ 0xcd
 800165e:	f004 feeb 	bl	8006438 <BSP_LCD_DisplayStringAt>


    // Bouton Valider
    BSP_LCD_DrawRect(340, 220, 100, 30);
 8001662:	231e      	movs	r3, #30
 8001664:	2264      	movs	r2, #100	@ 0x64
 8001666:	21dc      	movs	r1, #220	@ 0xdc
 8001668:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 800166c:	f005 f938 	bl	80068e0 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(350, 225, (uint8_t*)"Valider",LEFT_MODE);
 8001670:	2303      	movs	r3, #3
 8001672:	4a11      	ldr	r2, [pc, #68]	@ (80016b8 <drawSettingsPage+0x2c0>)
 8001674:	21e1      	movs	r1, #225	@ 0xe1
 8001676:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 800167a:	f004 fedd 	bl	8006438 <BSP_LCD_DisplayStringAt>

}
 800167e:	bf00      	nop
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000510c 	.word	0x2000510c
 800168c:	20005ec8 	.word	0x20005ec8
 8001690:	20005120 	.word	0x20005120
 8001694:	20003d60 	.word	0x20003d60
 8001698:	20004f0c 	.word	0x20004f0c
 800169c:	08016320 	.word	0x08016320
 80016a0:	08016328 	.word	0x08016328
 80016a4:	08016338 	.word	0x08016338
 80016a8:	0801633c 	.word	0x0801633c
 80016ac:	08016344 	.word	0x08016344
 80016b0:	08016348 	.word	0x08016348
 80016b4:	08016350 	.word	0x08016350
 80016b8:	08016358 	.word	0x08016358

080016bc <drawTempHumGraphPage>:

void drawTempHumGraphPage(void) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80016c2:	f04f 30ff 	mov.w	r0, #4294967295
 80016c6:	f004 fe4b 	bl	8006360 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80016ca:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80016ce:	f004 fdfb 	bl	80062c8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80016d2:	f04f 30ff 	mov.w	r0, #4294967295
 80016d6:	f004 fe0f 	bl	80062f8 <BSP_LCD_SetBackColor>

    // ===== En-tête =====
    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80016da:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <drawTempHumGraphPage+0x7c>)
 80016dc:	210a      	movs	r1, #10
 80016de:	200a      	movs	r0, #10
 80016e0:	f005 fa62 	bl	8006ba8 <BSP_LCD_DrawBitmap>



    // ===== Lignes verticales de séparation =====
    const uint16_t lineStartY = 60;
 80016e4:	233c      	movs	r3, #60	@ 0x3c
 80016e6:	80fb      	strh	r3, [r7, #6]
    const uint16_t lineHeight = 180;
 80016e8:	23b4      	movs	r3, #180	@ 0xb4
 80016ea:	80bb      	strh	r3, [r7, #4]

    // Première ligne verticale (1/3 de l'écran)
    BSP_LCD_DrawVLine(480/3, lineStartY, lineHeight);
 80016ec:	88ba      	ldrh	r2, [r7, #4]
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4619      	mov	r1, r3
 80016f2:	20a0      	movs	r0, #160	@ 0xa0
 80016f4:	f004 ffc6 	bl	8006684 <BSP_LCD_DrawVLine>

    // Deuxième ligne verticale (2/3 de l'écran)
    BSP_LCD_DrawVLine(2*480/3, lineStartY, lineHeight);
 80016f8:	88ba      	ldrh	r2, [r7, #4]
 80016fa:	88fb      	ldrh	r3, [r7, #6]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8001702:	f004 ffbf 	bl	8006684 <BSP_LCD_DrawVLine>

    // ===== Icônes en haut de chaque colonne =====
    const uint16_t iconY = 60;
 8001706:	233c      	movs	r3, #60	@ 0x3c
 8001708:	807b      	strh	r3, [r7, #2]

    // Colonne 1 (horloge)
    BSP_LCD_DrawBitmap(480/6 - 16, iconY, (uint8_t *)clock_icon_bmp);
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	4a0b      	ldr	r2, [pc, #44]	@ (800173c <drawTempHumGraphPage+0x80>)
 800170e:	4619      	mov	r1, r3
 8001710:	2040      	movs	r0, #64	@ 0x40
 8001712:	f005 fa49 	bl	8006ba8 <BSP_LCD_DrawBitmap>

    // Colonne 2 (thermomètre)
    BSP_LCD_DrawBitmap(480/2 - 16, iconY, (uint8_t *)temp_icon_bmp);
 8001716:	887b      	ldrh	r3, [r7, #2]
 8001718:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <drawTempHumGraphPage+0x84>)
 800171a:	4619      	mov	r1, r3
 800171c:	20e0      	movs	r0, #224	@ 0xe0
 800171e:	f005 fa43 	bl	8006ba8 <BSP_LCD_DrawBitmap>

    // Colonne 3 (gouttes)
    BSP_LCD_DrawBitmap(5*480/6 - 16, iconY, (uint8_t *)rain_icon_bmp);
 8001722:	887b      	ldrh	r3, [r7, #2]
 8001724:	4a07      	ldr	r2, [pc, #28]	@ (8001744 <drawTempHumGraphPage+0x88>)
 8001726:	4619      	mov	r1, r3
 8001728:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800172c:	f005 fa3c 	bl	8006ba8 <BSP_LCD_DrawBitmap>

}
 8001730:	bf00      	nop
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20003d60 	.word	0x20003d60
 800173c:	200045ec 	.word	0x200045ec
 8001740:	20002c48 	.word	0x20002c48
 8001744:	20001eb0 	.word	0x20001eb0

08001748 <drawRainPressGraphPage>:

void drawRainPressGraphPage(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800174e:	f04f 30ff 	mov.w	r0, #4294967295
 8001752:	f004 fe05 	bl	8006360 <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001756:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800175a:	f004 fdb5 	bl	80062c8 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800175e:	f04f 30ff 	mov.w	r0, #4294967295
 8001762:	f004 fdc9 	bl	80062f8 <BSP_LCD_SetBackColor>

    // ===== En-tête =====
    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001766:	4a17      	ldr	r2, [pc, #92]	@ (80017c4 <drawRainPressGraphPage+0x7c>)
 8001768:	210a      	movs	r1, #10
 800176a:	200a      	movs	r0, #10
 800176c:	f005 fa1c 	bl	8006ba8 <BSP_LCD_DrawBitmap>


    // ===== Lignes verticales de séparation =====
    const uint16_t lineStartY = 60;
 8001770:	233c      	movs	r3, #60	@ 0x3c
 8001772:	80fb      	strh	r3, [r7, #6]
    const uint16_t lineHeight = 180;
 8001774:	23b4      	movs	r3, #180	@ 0xb4
 8001776:	80bb      	strh	r3, [r7, #4]

    // Première ligne verticale (1/3 de l'écran)
    BSP_LCD_DrawVLine(480/3, lineStartY, lineHeight);
 8001778:	88ba      	ldrh	r2, [r7, #4]
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	4619      	mov	r1, r3
 800177e:	20a0      	movs	r0, #160	@ 0xa0
 8001780:	f004 ff80 	bl	8006684 <BSP_LCD_DrawVLine>

    // Deuxième ligne verticale (2/3 de l'écran)
    BSP_LCD_DrawVLine(2*480/3, lineStartY, lineHeight);
 8001784:	88ba      	ldrh	r2, [r7, #4]
 8001786:	88fb      	ldrh	r3, [r7, #6]
 8001788:	4619      	mov	r1, r3
 800178a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800178e:	f004 ff79 	bl	8006684 <BSP_LCD_DrawVLine>

    // ===== Icônes en haut de chaque colonne =====
    const uint16_t iconY = 60;
 8001792:	233c      	movs	r3, #60	@ 0x3c
 8001794:	807b      	strh	r3, [r7, #2]

    // Colonne 1 (horloge)
    BSP_LCD_DrawBitmap(480/6 - 16, iconY, (uint8_t *)clock_icon_bmp);
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	4a0b      	ldr	r2, [pc, #44]	@ (80017c8 <drawRainPressGraphPage+0x80>)
 800179a:	4619      	mov	r1, r3
 800179c:	2040      	movs	r0, #64	@ 0x40
 800179e:	f005 fa03 	bl	8006ba8 <BSP_LCD_DrawBitmap>

    // Colonne 2 (thermomètre)
    BSP_LCD_DrawBitmap(480/2 - 16, iconY, (uint8_t *)temp_icon_bmp);
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	4a09      	ldr	r2, [pc, #36]	@ (80017cc <drawRainPressGraphPage+0x84>)
 80017a6:	4619      	mov	r1, r3
 80017a8:	20e0      	movs	r0, #224	@ 0xe0
 80017aa:	f005 f9fd 	bl	8006ba8 <BSP_LCD_DrawBitmap>

    // Colonne 3 (gouttes)
    BSP_LCD_DrawBitmap(5*480/6 - 16, iconY, (uint8_t *)rain_icon_bmp);
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <drawRainPressGraphPage+0x88>)
 80017b2:	4619      	mov	r1, r3
 80017b4:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 80017b8:	f005 f9f6 	bl	8006ba8 <BSP_LCD_DrawBitmap>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20003d60 	.word	0x20003d60
 80017c8:	200045ec 	.word	0x200045ec
 80017cc:	20002c48 	.word	0x20002c48
 80017d0:	20001eb0 	.word	0x20001eb0

080017d4 <draw_temperature_graph>:
volatile int current_point = 0;




void draw_temperature_graph(float *temps, uint32_t *times, int num_points) {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b096      	sub	sp, #88	@ 0x58
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
    int offsetY = 20; // Décalage vers le bas
 80017e0:	2314      	movs	r3, #20
 80017e2:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Effacer l'écran
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f004 fd6e 	bl	80062c8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, 480, 275); // Effacer l'écran (fond blanc)
 80017ec:	f240 1313 	movw	r3, #275	@ 0x113
 80017f0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2000      	movs	r0, #0
 80017f8:	f005 fa88 	bl	8006d0c <BSP_LCD_FillRect>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80017fc:	4a9b      	ldr	r2, [pc, #620]	@ (8001a6c <draw_temperature_graph+0x298>)
 80017fe:	210a      	movs	r1, #10
 8001800:	200a      	movs	r0, #10
 8001802:	f005 f9d1 	bl	8006ba8 <BSP_LCD_DrawBitmap>

    // Couleur des axes
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001806:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800180a:	f004 fd5d 	bl	80062c8 <BSP_LCD_SetTextColor>

    // Ajouter un titre
    BSP_LCD_SetFont(&Font16); // Police pour le titre
 800180e:	4898      	ldr	r0, [pc, #608]	@ (8001a70 <draw_temperature_graph+0x29c>)
 8001810:	f004 fd8c 	bl	800632c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10 + offsetY, (uint8_t *)"Temperature", CENTER_MODE);
 8001814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001816:	b29b      	uxth	r3, r3
 8001818:	330a      	adds	r3, #10
 800181a:	b299      	uxth	r1, r3
 800181c:	2301      	movs	r3, #1
 800181e:	4a95      	ldr	r2, [pc, #596]	@ (8001a74 <draw_temperature_graph+0x2a0>)
 8001820:	2000      	movs	r0, #0
 8001822:	f004 fe09 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Dessiner les axes
    BSP_LCD_DrawLine(80, 200 + offsetY, 400, 200 + offsetY); // Axe X (horizontal)
 8001826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001828:	b29b      	uxth	r3, r3
 800182a:	33c8      	adds	r3, #200	@ 0xc8
 800182c:	b299      	uxth	r1, r3
 800182e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001830:	b29b      	uxth	r3, r3
 8001832:	33c8      	adds	r3, #200	@ 0xc8
 8001834:	b29b      	uxth	r3, r3
 8001836:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800183a:	2050      	movs	r0, #80	@ 0x50
 800183c:	f004 ff84 	bl	8006748 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(80, 200 + offsetY, 80, 50 + offsetY);   // Axe Y (vertical)
 8001840:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001842:	b29b      	uxth	r3, r3
 8001844:	33c8      	adds	r3, #200	@ 0xc8
 8001846:	b299      	uxth	r1, r3
 8001848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800184a:	b29b      	uxth	r3, r3
 800184c:	3332      	adds	r3, #50	@ 0x32
 800184e:	b29b      	uxth	r3, r3
 8001850:	2250      	movs	r2, #80	@ 0x50
 8001852:	2050      	movs	r0, #80	@ 0x50
 8001854:	f004 ff78 	bl	8006748 <BSP_LCD_DrawLine>

    // Ajouter des noms aux axes
    BSP_LCD_SetFont(&Font16); // Police pour les axes
 8001858:	4885      	ldr	r0, [pc, #532]	@ (8001a70 <draw_temperature_graph+0x29c>)
 800185a:	f004 fd67 	bl	800632c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(190, 210 + offsetY, (uint8_t *)"Time(min)", CENTER_MODE); // Nom de l'axe X
 800185e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001860:	b29b      	uxth	r3, r3
 8001862:	33d2      	adds	r3, #210	@ 0xd2
 8001864:	b299      	uxth	r1, r3
 8001866:	2301      	movs	r3, #1
 8001868:	4a83      	ldr	r2, [pc, #524]	@ (8001a78 <draw_temperature_graph+0x2a4>)
 800186a:	20be      	movs	r0, #190	@ 0xbe
 800186c:	f004 fde4 	bl	8006438 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(25, 30 + offsetY, (uint8_t *)"Temp(C)", LEFT_MODE);           // Nom de l'axe Y
 8001870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001872:	b29b      	uxth	r3, r3
 8001874:	331e      	adds	r3, #30
 8001876:	b299      	uxth	r1, r3
 8001878:	2303      	movs	r3, #3
 800187a:	4a80      	ldr	r2, [pc, #512]	@ (8001a7c <draw_temperature_graph+0x2a8>)
 800187c:	2019      	movs	r0, #25
 800187e:	f004 fddb 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Ajouter des graduations sur l'axe Y (température de 0°C à 50°C)
    for (int i = 0; i <= 5; i++) {
 8001882:	2300      	movs	r3, #0
 8001884:	657b      	str	r3, [r7, #84]	@ 0x54
 8001886:	e02a      	b.n	80018de <draw_temperature_graph+0x10a>
        int y = 200 + offsetY - (i * 30); // Espacement uniforme entre graduations (30 px)
 8001888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800188a:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 800188e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001890:	4613      	mov	r3, r2
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	440b      	add	r3, r1
 800189a:	62bb      	str	r3, [r7, #40]	@ 0x28
        char label[10];
        sprintf(label, "%d", i * 10); // Température (0°C à 50°C par pas de 10°C)
 800189c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800189e:	4613      	mov	r3, r2
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	461a      	mov	r2, r3
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4974      	ldr	r1, [pc, #464]	@ (8001a80 <draw_temperature_graph+0x2ac>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f012 fb76 	bl	8013fa0 <siprintf>
        BSP_LCD_DisplayStringAt(50, y - 5, (uint8_t *)label, LEFT_MODE);
 80018b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b05      	subs	r3, #5
 80018ba:	b299      	uxth	r1, r3
 80018bc:	f107 021c 	add.w	r2, r7, #28
 80018c0:	2303      	movs	r3, #3
 80018c2:	2032      	movs	r0, #50	@ 0x32
 80018c4:	f004 fdb8 	bl	8006438 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(75, y, 80, y); // Petite graduation
 80018c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ca:	b299      	uxth	r1, r3
 80018cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2250      	movs	r2, #80	@ 0x50
 80018d2:	204b      	movs	r0, #75	@ 0x4b
 80018d4:	f004 ff38 	bl	8006748 <BSP_LCD_DrawLine>
    for (int i = 0; i <= 5; i++) {
 80018d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018da:	3301      	adds	r3, #1
 80018dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80018de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	ddd1      	ble.n	8001888 <draw_temperature_graph+0xb4>
    }

    // Ajouter des graduations sur l'axe X (temps)
    for (int i = 0; i < num_points; i++) {
 80018e4:	2300      	movs	r3, #0
 80018e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80018e8:	e02f      	b.n	800194a <draw_temperature_graph+0x176>
        int x = 80 + (i * 30); // Position X des graduations
 80018ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80018ec:	4613      	mov	r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	3350      	adds	r3, #80	@ 0x50
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        char label[10];
        sprintf(label, "%lu", times[i]); // Afficher le temps en secondes
 80018f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	68ba      	ldr	r2, [r7, #8]
 80018fe:	4413      	add	r3, r2
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	f107 0310 	add.w	r3, r7, #16
 8001906:	495f      	ldr	r1, [pc, #380]	@ (8001a84 <draw_temperature_graph+0x2b0>)
 8001908:	4618      	mov	r0, r3
 800190a:	f012 fb49 	bl	8013fa0 <siprintf>
        BSP_LCD_DisplayStringAt(x - 20, 210 + offsetY, (uint8_t *)label, LEFT_MODE);
 800190e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001910:	b29b      	uxth	r3, r3
 8001912:	3b14      	subs	r3, #20
 8001914:	b298      	uxth	r0, r3
 8001916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001918:	b29b      	uxth	r3, r3
 800191a:	33d2      	adds	r3, #210	@ 0xd2
 800191c:	b299      	uxth	r1, r3
 800191e:	f107 0210 	add.w	r2, r7, #16
 8001922:	2303      	movs	r3, #3
 8001924:	f004 fd88 	bl	8006438 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(x, 200 + offsetY, x, 195 + offsetY); // Petite graduation
 8001928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800192a:	b298      	uxth	r0, r3
 800192c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800192e:	b29b      	uxth	r3, r3
 8001930:	33c8      	adds	r3, #200	@ 0xc8
 8001932:	b299      	uxth	r1, r3
 8001934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001936:	b29a      	uxth	r2, r3
 8001938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800193a:	b29b      	uxth	r3, r3
 800193c:	33c3      	adds	r3, #195	@ 0xc3
 800193e:	b29b      	uxth	r3, r3
 8001940:	f004 ff02 	bl	8006748 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points; i++) {
 8001944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001946:	3301      	adds	r3, #1
 8001948:	653b      	str	r3, [r7, #80]	@ 0x50
 800194a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	dbcb      	blt.n	80018ea <draw_temperature_graph+0x116>
    }

    // Tracer les points et relier par des lignes
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001952:	484d      	ldr	r0, [pc, #308]	@ (8001a88 <draw_temperature_graph+0x2b4>)
 8001954:	f004 fcb8 	bl	80062c8 <BSP_LCD_SetTextColor>

    for (int i = 0; i < num_points - 1; i++) {
 8001958:	2300      	movs	r3, #0
 800195a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800195c:	e052      	b.n	8001a04 <draw_temperature_graph+0x230>
        // Coordonnées du point courant
        int x1 = 80 + (i * 30);
 800195e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001960:	4613      	mov	r3, r2
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	3350      	adds	r3, #80	@ 0x50
 800196a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int y1 = 200 + offsetY - ((temps[i] - 0) * 3); // Adapter l'échelle pour la plage 0°C-50°C (3 px par °C)
 800196c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800196e:	33c8      	adds	r3, #200	@ 0xc8
 8001970:	ee07 3a90 	vmov	s15, r3
 8001974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	edd3 7a00 	vldr	s15, [r3]
 8001984:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001988:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800198c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001994:	ee17 3a90 	vmov	r3, s15
 8001998:	63bb      	str	r3, [r7, #56]	@ 0x38

        // Coordonnées du point suivant
        int x2 = 80 + ((i + 1) * 30);
 800199a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	4613      	mov	r3, r2
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	3350      	adds	r3, #80	@ 0x50
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
        int y2 = 200 + offsetY - ((temps[i + 1] - 0) * 3);
 80019aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019ac:	33c8      	adds	r3, #200	@ 0xc8
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80019b8:	3301      	adds	r3, #1
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80019c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d4:	ee17 3a90 	vmov	r3, s15
 80019d8:	633b      	str	r3, [r7, #48]	@ 0x30

        // Tracer le point et la ligne
        BSP_LCD_FillCircle(x1, y1, 2); // Cercle pour le point
 80019da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019dc:	b29b      	uxth	r3, r3
 80019de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019e0:	b291      	uxth	r1, r2
 80019e2:	2202      	movs	r2, #2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f005 fa0b 	bl	8006e00 <BSP_LCD_FillCircle>
        BSP_LCD_DrawLine(x1, y1, x2, y2); // Ligne entre les points
 80019ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ec:	b298      	uxth	r0, r3
 80019ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019f0:	b299      	uxth	r1, r3
 80019f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	f004 fea5 	bl	8006748 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points - 1; i++) {
 80019fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a00:	3301      	adds	r3, #1
 8001a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dba7      	blt.n	800195e <draw_temperature_graph+0x18a>
    }

    // Dernier point
    int last_x = 80 + ((num_points - 1) * 30);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	1e5a      	subs	r2, r3, #1
 8001a12:	4613      	mov	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	3350      	adds	r3, #80	@ 0x50
 8001a1c:	647b      	str	r3, [r7, #68]	@ 0x44
    int last_y = 200 + offsetY - ((temps[num_points - 1] - 0) * 3);
 8001a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a20:	33c8      	adds	r3, #200	@ 0xc8
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001a40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a4c:	ee17 3a90 	vmov	r3, s15
 8001a50:	643b      	str	r3, [r7, #64]	@ 0x40
    BSP_LCD_FillCircle(last_x, last_y, 2); // Point final
 8001a52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a58:	b291      	uxth	r1, r2
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f005 f9cf 	bl	8006e00 <BSP_LCD_FillCircle>
}
 8001a62:	bf00      	nop
 8001a64:	3758      	adds	r7, #88	@ 0x58
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20003d60 	.word	0x20003d60
 8001a70:	20004f0c 	.word	0x20004f0c
 8001a74:	08016268 	.word	0x08016268
 8001a78:	08016360 	.word	0x08016360
 8001a7c:	0801636c 	.word	0x0801636c
 8001a80:	08016374 	.word	0x08016374
 8001a84:	08016378 	.word	0x08016378
 8001a88:	ff0000ff 	.word	0xff0000ff

08001a8c <update_temperature_graph>:


void update_temperature_graph(float new_temp, uint32_t current_time) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a96:	6038      	str	r0, [r7, #0]
    // Ajouter la nouvelle température et l'heure au tableau
    if (current_point < MAX_POINTS) {
 8001a98:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <update_temperature_graph+0x98>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b09      	cmp	r3, #9
 8001a9e:	dc12      	bgt.n	8001ac6 <update_temperature_graph+0x3a>
        temps[current_point] = new_temp;
 8001aa0:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <update_temperature_graph+0x98>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a20      	ldr	r2, [pc, #128]	@ (8001b28 <update_temperature_graph+0x9c>)
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	4413      	add	r3, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	601a      	str	r2, [r3, #0]
        times[current_point] = current_time;
 8001aae:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <update_temperature_graph+0x98>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	491e      	ldr	r1, [pc, #120]	@ (8001b2c <update_temperature_graph+0xa0>)
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        current_point++;
 8001aba:	4b1a      	ldr	r3, [pc, #104]	@ (8001b24 <update_temperature_graph+0x98>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	4a18      	ldr	r2, [pc, #96]	@ (8001b24 <update_temperature_graph+0x98>)
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e022      	b.n	8001b0c <update_temperature_graph+0x80>
    } else {
        // Décaler les données vers la gauche pour ajouter le nouveau point
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	e016      	b.n	8001afa <update_temperature_graph+0x6e>
            temps[i] = temps[i + 1];
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	4a15      	ldr	r2, [pc, #84]	@ (8001b28 <update_temperature_graph+0x9c>)
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	4913      	ldr	r1, [pc, #76]	@ (8001b28 <update_temperature_graph+0x9c>)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	601a      	str	r2, [r3, #0]
            times[i] = times[i + 1];
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <update_temperature_graph+0xa0>)
 8001ae8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001aec:	490f      	ldr	r1, [pc, #60]	@ (8001b2c <update_temperature_graph+0xa0>)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3301      	adds	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	dde5      	ble.n	8001acc <update_temperature_graph+0x40>
        }
        temps[MAX_POINTS - 1] = new_temp;
 8001b00:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <update_temperature_graph+0x9c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6253      	str	r3, [r2, #36]	@ 0x24
        times[MAX_POINTS - 1] = current_time;
 8001b06:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <update_temperature_graph+0xa0>)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	6253      	str	r3, [r2, #36]	@ 0x24
    }
    draw_temperature_graph(temps, times, current_point);
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <update_temperature_graph+0x98>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4906      	ldr	r1, [pc, #24]	@ (8001b2c <update_temperature_graph+0xa0>)
 8001b14:	4804      	ldr	r0, [pc, #16]	@ (8001b28 <update_temperature_graph+0x9c>)
 8001b16:	f7ff fe5d 	bl	80017d4 <draw_temperature_graph>

}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20005174 	.word	0x20005174
 8001b28:	20005124 	.word	0x20005124
 8001b2c:	2000514c 	.word	0x2000514c

08001b30 <draw_humidity_graph>:
float humidities[MAX_POINTS];
uint32_t times[MAX_POINTS];



void draw_humidity_graph(float *humidities, uint32_t *times, int num_points) {
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b096      	sub	sp, #88	@ 0x58
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
    int offsetY = 20; // Décalage vers le bas
 8001b3c:	2314      	movs	r3, #20
 8001b3e:	64bb      	str	r3, [r7, #72]	@ 0x48

    // Effacer l'écran
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001b40:	f04f 30ff 	mov.w	r0, #4294967295
 8001b44:	f004 fbc0 	bl	80062c8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, 480, 275); // Effacer l'écran (fond blanc)
 8001b48:	f240 1313 	movw	r3, #275	@ 0x113
 8001b4c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2000      	movs	r0, #0
 8001b54:	f005 f8da 	bl	8006d0c <BSP_LCD_FillRect>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001b58:	4aa5      	ldr	r2, [pc, #660]	@ (8001df0 <draw_humidity_graph+0x2c0>)
 8001b5a:	210a      	movs	r1, #10
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f005 f823 	bl	8006ba8 <BSP_LCD_DrawBitmap>

    // Couleur des axes
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001b62:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001b66:	f004 fbaf 	bl	80062c8 <BSP_LCD_SetTextColor>

    // Ajouter un titre
    BSP_LCD_SetFont(&Font16); // Police pour le titre
 8001b6a:	48a2      	ldr	r0, [pc, #648]	@ (8001df4 <draw_humidity_graph+0x2c4>)
 8001b6c:	f004 fbde 	bl	800632c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10 + offsetY, (uint8_t *)"Humidity", CENTER_MODE);
 8001b70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	330a      	adds	r3, #10
 8001b76:	b299      	uxth	r1, r3
 8001b78:	2301      	movs	r3, #1
 8001b7a:	4a9f      	ldr	r2, [pc, #636]	@ (8001df8 <draw_humidity_graph+0x2c8>)
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f004 fc5b 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Dessiner les axes
    BSP_LCD_DrawLine(80, 200 + offsetY, 400, 200 + offsetY); // Axe X (horizontal)
 8001b82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	33c8      	adds	r3, #200	@ 0xc8
 8001b88:	b299      	uxth	r1, r3
 8001b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	33c8      	adds	r3, #200	@ 0xc8
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001b96:	2050      	movs	r0, #80	@ 0x50
 8001b98:	f004 fdd6 	bl	8006748 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(80, 200 + offsetY, 80, 50 + offsetY);   // Axe Y (vertical)
 8001b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	33c8      	adds	r3, #200	@ 0xc8
 8001ba2:	b299      	uxth	r1, r3
 8001ba4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3332      	adds	r3, #50	@ 0x32
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2250      	movs	r2, #80	@ 0x50
 8001bae:	2050      	movs	r0, #80	@ 0x50
 8001bb0:	f004 fdca 	bl	8006748 <BSP_LCD_DrawLine>

    // Ajouter des noms aux axes
    BSP_LCD_SetFont(&Font16); // Police pour les axes
 8001bb4:	488f      	ldr	r0, [pc, #572]	@ (8001df4 <draw_humidity_graph+0x2c4>)
 8001bb6:	f004 fbb9 	bl	800632c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(190, 210 + offsetY, (uint8_t *)"Time(min)", CENTER_MODE); // Nom de l'axe X
 8001bba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	33d2      	adds	r3, #210	@ 0xd2
 8001bc0:	b299      	uxth	r1, r3
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	4a8d      	ldr	r2, [pc, #564]	@ (8001dfc <draw_humidity_graph+0x2cc>)
 8001bc6:	20be      	movs	r0, #190	@ 0xbe
 8001bc8:	f004 fc36 	bl	8006438 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(25, 30 + offsetY, (uint8_t *)"Humidity(%)", LEFT_MODE);    // Nom de l'axe Y
 8001bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	331e      	adds	r3, #30
 8001bd2:	b299      	uxth	r1, r3
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	4a8a      	ldr	r2, [pc, #552]	@ (8001e00 <draw_humidity_graph+0x2d0>)
 8001bd8:	2019      	movs	r0, #25
 8001bda:	f004 fc2d 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Ajouter des graduations sur l'axe Y (humidité de 0% à 100%)
    for (int i = 0; i <= 5; i++) {
 8001bde:	2300      	movs	r3, #0
 8001be0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001be2:	e02a      	b.n	8001c3a <draw_humidity_graph+0x10a>
        int y = 200 + offsetY - (i * 30); // Espacement uniforme entre graduations (30 px)
 8001be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001be6:	f103 01c8 	add.w	r1, r3, #200	@ 0xc8
 8001bea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001bec:	4613      	mov	r3, r2
 8001bee:	0112      	lsls	r2, r2, #4
 8001bf0:	1a9b      	subs	r3, r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	440b      	add	r3, r1
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
        char label[10];
        sprintf(label, "%d", i * 20); // Humidité (0% à 100% par pas de 20%)
 8001bf8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	461a      	mov	r2, r3
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	497e      	ldr	r1, [pc, #504]	@ (8001e04 <draw_humidity_graph+0x2d4>)
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f012 f9c8 	bl	8013fa0 <siprintf>
        BSP_LCD_DisplayStringAt(50, y - 5, (uint8_t *)label, LEFT_MODE);
 8001c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	3b05      	subs	r3, #5
 8001c16:	b299      	uxth	r1, r3
 8001c18:	f107 021c 	add.w	r2, r7, #28
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	2032      	movs	r0, #50	@ 0x32
 8001c20:	f004 fc0a 	bl	8006438 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(75, y, 80, y); // Petite graduation
 8001c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c26:	b299      	uxth	r1, r3
 8001c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	2250      	movs	r2, #80	@ 0x50
 8001c2e:	204b      	movs	r0, #75	@ 0x4b
 8001c30:	f004 fd8a 	bl	8006748 <BSP_LCD_DrawLine>
    for (int i = 0; i <= 5; i++) {
 8001c34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c36:	3301      	adds	r3, #1
 8001c38:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c3c:	2b05      	cmp	r3, #5
 8001c3e:	ddd1      	ble.n	8001be4 <draw_humidity_graph+0xb4>
    }

    // Ajouter des graduations sur l'axe X (temps)
    for (int i = 0; i < num_points; i++) {
 8001c40:	2300      	movs	r3, #0
 8001c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c44:	e02f      	b.n	8001ca6 <draw_humidity_graph+0x176>
		int x = 80 + (i * 30); // Position X des graduations
 8001c46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c48:	4613      	mov	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	3350      	adds	r3, #80	@ 0x50
 8001c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
		char label[10];
		sprintf(label, "%lu", times[i]); // Afficher le temps en secondes
 8001c54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	f107 0310 	add.w	r3, r7, #16
 8001c62:	4969      	ldr	r1, [pc, #420]	@ (8001e08 <draw_humidity_graph+0x2d8>)
 8001c64:	4618      	mov	r0, r3
 8001c66:	f012 f99b 	bl	8013fa0 <siprintf>
		BSP_LCD_DisplayStringAt(x - 20, 210 + offsetY, (uint8_t *)label, LEFT_MODE);
 8001c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b14      	subs	r3, #20
 8001c70:	b298      	uxth	r0, r3
 8001c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	33d2      	adds	r3, #210	@ 0xd2
 8001c78:	b299      	uxth	r1, r3
 8001c7a:	f107 0210 	add.w	r2, r7, #16
 8001c7e:	2303      	movs	r3, #3
 8001c80:	f004 fbda 	bl	8006438 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DrawLine(x, 200 + offsetY, x, 195 + offsetY); // Petite graduation
 8001c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c86:	b298      	uxth	r0, r3
 8001c88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	33c8      	adds	r3, #200	@ 0xc8
 8001c8e:	b299      	uxth	r1, r3
 8001c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	33c3      	adds	r3, #195	@ 0xc3
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	f004 fd54 	bl	8006748 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points; i++) {
 8001ca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ca6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dbcb      	blt.n	8001c46 <draw_humidity_graph+0x116>
	}

    // Tracer les points et relier par des lignes
    BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001cae:	4857      	ldr	r0, [pc, #348]	@ (8001e0c <draw_humidity_graph+0x2dc>)
 8001cb0:	f004 fb0a 	bl	80062c8 <BSP_LCD_SetTextColor>

    for (int i = 0; i < num_points - 1; i++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cb8:	e068      	b.n	8001d8c <draw_humidity_graph+0x25c>
        // Coordonnées du point courant
        int x1 = 80 + (i * 30);
 8001cba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	011b      	lsls	r3, r3, #4
 8001cc0:	1a9b      	subs	r3, r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	3350      	adds	r3, #80	@ 0x50
 8001cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        int y1 = 200 + offsetY - ((humidities[i] - 0) * 1.5); // Adapter l'échelle pour l'humidité (2 px par %)
 8001cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cca:	33c8      	adds	r3, #200	@ 0xc8
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fc49 	bl	8000564 <__aeabi_i2d>
 8001cd2:	4604      	mov	r4, r0
 8001cd4:	460d      	mov	r5, r1
 8001cd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	4413      	add	r3, r2
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fc51 	bl	8000588 <__aeabi_f2d>
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	4b49      	ldr	r3, [pc, #292]	@ (8001e10 <draw_humidity_graph+0x2e0>)
 8001cec:	f7fe fca4 	bl	8000638 <__aeabi_dmul>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	4629      	mov	r1, r5
 8001cf8:	f7fe fae6 	bl	80002c8 <__aeabi_dsub>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	f7fe ff48 	bl	8000b98 <__aeabi_d2iz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	63bb      	str	r3, [r7, #56]	@ 0x38

        // Coordonnées du point suivant
        int x2 = 80 + ((i + 1) * 30);
 8001d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	4613      	mov	r3, r2
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	1a9b      	subs	r3, r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	3350      	adds	r3, #80	@ 0x50
 8001d1a:	637b      	str	r3, [r7, #52]	@ 0x34
        int y2 = 200 + offsetY - ((humidities[i + 1] - 0) * 1.5);
 8001d1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d1e:	33c8      	adds	r3, #200	@ 0xc8
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fc1f 	bl	8000564 <__aeabi_i2d>
 8001d26:	4604      	mov	r4, r0
 8001d28:	460d      	mov	r5, r1
 8001d2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc26 	bl	8000588 <__aeabi_f2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b33      	ldr	r3, [pc, #204]	@ (8001e10 <draw_humidity_graph+0x2e0>)
 8001d42:	f7fe fc79 	bl	8000638 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4620      	mov	r0, r4
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	f7fe fabb 	bl	80002c8 <__aeabi_dsub>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe ff1d 	bl	8000b98 <__aeabi_d2iz>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	633b      	str	r3, [r7, #48]	@ 0x30

        // Tracer le point et la ligne
        BSP_LCD_FillCircle(x1, y1, 2); // Cercle pour le point
 8001d62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d68:	b291      	uxth	r1, r2
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f005 f847 	bl	8006e00 <BSP_LCD_FillCircle>
        BSP_LCD_DrawLine(x1, y1, x2, y2); // Ligne entre les points
 8001d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d74:	b298      	uxth	r0, r3
 8001d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	f004 fce1 	bl	8006748 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points - 1; i++) {
 8001d86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d88:	3301      	adds	r3, #1
 8001d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d92:	429a      	cmp	r2, r3
 8001d94:	db91      	blt.n	8001cba <draw_humidity_graph+0x18a>
    }

    // Dernier point
    int last_x = 80 + ((num_points - 1) * 30);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	1e5a      	subs	r2, r3, #1
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	1a9b      	subs	r3, r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	3350      	adds	r3, #80	@ 0x50
 8001da4:	647b      	str	r3, [r7, #68]	@ 0x44
    int last_y = 200 + offsetY - ((humidities[num_points - 1] - 0) * 2);
 8001da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001da8:	33c8      	adds	r3, #200	@ 0xc8
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd0:	ee17 3a90 	vmov	r3, s15
 8001dd4:	643b      	str	r3, [r7, #64]	@ 0x40
    BSP_LCD_FillCircle(last_x, last_y, 2); // Point final
 8001dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ddc:	b291      	uxth	r1, r2
 8001dde:	2202      	movs	r2, #2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f005 f80d 	bl	8006e00 <BSP_LCD_FillCircle>
}
 8001de6:	bf00      	nop
 8001de8:	3758      	adds	r7, #88	@ 0x58
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bdb0      	pop	{r4, r5, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20003d60 	.word	0x20003d60
 8001df4:	20004f0c 	.word	0x20004f0c
 8001df8:	0801637c 	.word	0x0801637c
 8001dfc:	08016360 	.word	0x08016360
 8001e00:	08016388 	.word	0x08016388
 8001e04:	08016374 	.word	0x08016374
 8001e08:	08016378 	.word	0x08016378
 8001e0c:	ff0000ff 	.word	0xff0000ff
 8001e10:	3ff80000 	.word	0x3ff80000

08001e14 <update_humidity_graph>:


void update_humidity_graph(float humidity, uint32_t current_time) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e1e:	6038      	str	r0, [r7, #0]
    // Ajouter la nouvelle humidité et l'heure dans le tableau
    if (current_point < MAX_POINTS) {
 8001e20:	4b22      	ldr	r3, [pc, #136]	@ (8001eac <update_humidity_graph+0x98>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	dc12      	bgt.n	8001e4e <update_humidity_graph+0x3a>
        humidities[current_point] = humidity;
 8001e28:	4b20      	ldr	r3, [pc, #128]	@ (8001eac <update_humidity_graph+0x98>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a20      	ldr	r2, [pc, #128]	@ (8001eb0 <update_humidity_graph+0x9c>)
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	601a      	str	r2, [r3, #0]
        times[current_point] = current_time;
 8001e36:	4b1d      	ldr	r3, [pc, #116]	@ (8001eac <update_humidity_graph+0x98>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	491e      	ldr	r1, [pc, #120]	@ (8001eb4 <update_humidity_graph+0xa0>)
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        current_point++;
 8001e42:	4b1a      	ldr	r3, [pc, #104]	@ (8001eac <update_humidity_graph+0x98>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	3301      	adds	r3, #1
 8001e48:	4a18      	ldr	r2, [pc, #96]	@ (8001eac <update_humidity_graph+0x98>)
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e022      	b.n	8001e94 <update_humidity_graph+0x80>
    } else {
        // Déplacer tous les points pour faire de la place au nouveau point
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e016      	b.n	8001e82 <update_humidity_graph+0x6e>
            humidities[i] = humidities[i + 1];
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3301      	adds	r3, #1
 8001e58:	4a15      	ldr	r2, [pc, #84]	@ (8001eb0 <update_humidity_graph+0x9c>)
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4913      	ldr	r1, [pc, #76]	@ (8001eb0 <update_humidity_graph+0x9c>)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	601a      	str	r2, [r3, #0]
            times[i] = times[i + 1];
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	4a11      	ldr	r2, [pc, #68]	@ (8001eb4 <update_humidity_graph+0xa0>)
 8001e70:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e74:	490f      	ldr	r1, [pc, #60]	@ (8001eb4 <update_humidity_graph+0xa0>)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	dde5      	ble.n	8001e54 <update_humidity_graph+0x40>
        }
        humidities[MAX_POINTS - 1] = humidity;
 8001e88:	4a09      	ldr	r2, [pc, #36]	@ (8001eb0 <update_humidity_graph+0x9c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6253      	str	r3, [r2, #36]	@ 0x24
        times[MAX_POINTS - 1] = current_time;
 8001e8e:	4a09      	ldr	r2, [pc, #36]	@ (8001eb4 <update_humidity_graph+0xa0>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    // Redessiner le graphique avec les nouvelles données
    draw_humidity_graph(humidities, times, current_point);
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <update_humidity_graph+0x98>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4906      	ldr	r1, [pc, #24]	@ (8001eb4 <update_humidity_graph+0xa0>)
 8001e9c:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <update_humidity_graph+0x9c>)
 8001e9e:	f7ff fe47 	bl	8001b30 <draw_humidity_graph>
}
 8001ea2:	bf00      	nop
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20005174 	.word	0x20005174
 8001eb0:	20005178 	.word	0x20005178
 8001eb4:	2000514c 	.word	0x2000514c

08001eb8 <draw_pressure_graph>:

#define MAX_POINTS 10
float pressures[MAX_POINTS];
uint32_t times[MAX_POINTS];

void draw_pressure_graph(float *pressures, uint32_t *times, int num_points) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b096      	sub	sp, #88	@ 0x58
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
    int offsetY = 20; // Décalage vers le bas
 8001ec4:	2314      	movs	r3, #20
 8001ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Effacer l'écran
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f004 f9fc 	bl	80062c8 <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, 0, 480, 275); // Effacer l'écran (fond blanc)
 8001ed0:	f240 1313 	movw	r3, #275	@ 0x113
 8001ed4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2000      	movs	r0, #0
 8001edc:	f004 ff16 	bl	8006d0c <BSP_LCD_FillRect>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001ee0:	4a57      	ldr	r2, [pc, #348]	@ (8002040 <draw_pressure_graph+0x188>)
 8001ee2:	210a      	movs	r1, #10
 8001ee4:	200a      	movs	r0, #10
 8001ee6:	f004 fe5f 	bl	8006ba8 <BSP_LCD_DrawBitmap>

    // Couleur des axes
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001eea:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001eee:	f004 f9eb 	bl	80062c8 <BSP_LCD_SetTextColor>

    // Ajouter un titre
    BSP_LCD_SetFont(&Font16); // Police pour le titre
 8001ef2:	4854      	ldr	r0, [pc, #336]	@ (8002044 <draw_pressure_graph+0x18c>)
 8001ef4:	f004 fa1a 	bl	800632c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 10 + offsetY, (uint8_t *)"Pressure", CENTER_MODE);
 8001ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	330a      	adds	r3, #10
 8001efe:	b299      	uxth	r1, r3
 8001f00:	2301      	movs	r3, #1
 8001f02:	4a51      	ldr	r2, [pc, #324]	@ (8002048 <draw_pressure_graph+0x190>)
 8001f04:	2000      	movs	r0, #0
 8001f06:	f004 fa97 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Dessiner les axes
    BSP_LCD_DrawLine(80, 200 + offsetY, 400, 200 + offsetY); // Axe X (horizontal)
 8001f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	33c8      	adds	r3, #200	@ 0xc8
 8001f10:	b299      	uxth	r1, r3
 8001f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	33c8      	adds	r3, #200	@ 0xc8
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001f1e:	2050      	movs	r0, #80	@ 0x50
 8001f20:	f004 fc12 	bl	8006748 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(80, 200 + offsetY, 80, 50 + offsetY);   // Axe Y (vertical)
 8001f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	33c8      	adds	r3, #200	@ 0xc8
 8001f2a:	b299      	uxth	r1, r3
 8001f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3332      	adds	r3, #50	@ 0x32
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	2250      	movs	r2, #80	@ 0x50
 8001f36:	2050      	movs	r0, #80	@ 0x50
 8001f38:	f004 fc06 	bl	8006748 <BSP_LCD_DrawLine>

    // Ajouter des noms aux axes
    BSP_LCD_SetFont(&Font16); // Police pour les axes
 8001f3c:	4841      	ldr	r0, [pc, #260]	@ (8002044 <draw_pressure_graph+0x18c>)
 8001f3e:	f004 f9f5 	bl	800632c <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(190, 210 + offsetY, (uint8_t *)"Time(sec)", CENTER_MODE); // Nom de l'axe X
 8001f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	33d2      	adds	r3, #210	@ 0xd2
 8001f48:	b299      	uxth	r1, r3
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	4a3f      	ldr	r2, [pc, #252]	@ (800204c <draw_pressure_graph+0x194>)
 8001f4e:	20be      	movs	r0, #190	@ 0xbe
 8001f50:	f004 fa72 	bl	8006438 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(25, 30 + offsetY, (uint8_t *)"Pressure(hPa)", LEFT_MODE); // Nom de l'axe Y
 8001f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	331e      	adds	r3, #30
 8001f5a:	b299      	uxth	r1, r3
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	4a3c      	ldr	r2, [pc, #240]	@ (8002050 <draw_pressure_graph+0x198>)
 8001f60:	2019      	movs	r0, #25
 8001f62:	f004 fa69 	bl	8006438 <BSP_LCD_DisplayStringAt>

    // Ajouter des graduations sur l'axe Y (pression de 0 à 1200 hPa)
    for (int i = 0; i <= 6; i++) {
 8001f66:	2300      	movs	r3, #0
 8001f68:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f6a:	e028      	b.n	8001fbe <draw_pressure_graph+0x106>
        int y = 200 + offsetY - (i * 25); // Espacement uniforme entre graduations (25 px)
 8001f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f6e:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8001f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f74:	f06f 0118 	mvn.w	r1, #24
 8001f78:	fb01 f303 	mul.w	r3, r1, r3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
        char label[10];
        sprintf(label, "%d", i * 200); // Pression (0 à 1200 hPa par pas de 200 hPa)
 8001f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f82:	22c8      	movs	r2, #200	@ 0xc8
 8001f84:	fb03 f202 	mul.w	r2, r3, r2
 8001f88:	f107 031c 	add.w	r3, r7, #28
 8001f8c:	4931      	ldr	r1, [pc, #196]	@ (8002054 <draw_pressure_graph+0x19c>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f012 f806 	bl	8013fa0 <siprintf>
        BSP_LCD_DisplayStringAt(50, y - 5, (uint8_t *)label, LEFT_MODE);
 8001f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	3b05      	subs	r3, #5
 8001f9a:	b299      	uxth	r1, r3
 8001f9c:	f107 021c 	add.w	r2, r7, #28
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	2032      	movs	r0, #50	@ 0x32
 8001fa4:	f004 fa48 	bl	8006438 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(75, y, 80, y); // Petite graduation
 8001fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001faa:	b299      	uxth	r1, r3
 8001fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2250      	movs	r2, #80	@ 0x50
 8001fb2:	204b      	movs	r0, #75	@ 0x4b
 8001fb4:	f004 fbc8 	bl	8006748 <BSP_LCD_DrawLine>
    for (int i = 0; i <= 6; i++) {
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fba:	3301      	adds	r3, #1
 8001fbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8001fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fc0:	2b06      	cmp	r3, #6
 8001fc2:	ddd3      	ble.n	8001f6c <draw_pressure_graph+0xb4>
    }

    // Ajouter des graduations sur l'axe X (temps)
    for (int i = 0; i < num_points; i++) {
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001fc8:	e02f      	b.n	800202a <draw_pressure_graph+0x172>
        int x = 80 + (i * 30); // Position X des graduations
 8001fca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001fcc:	4613      	mov	r3, r2
 8001fce:	011b      	lsls	r3, r3, #4
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	3350      	adds	r3, #80	@ 0x50
 8001fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        char label[10];
        sprintf(label, "%lu", times[i]); // Afficher le temps en secondes
 8001fd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	68ba      	ldr	r2, [r7, #8]
 8001fde:	4413      	add	r3, r2
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	f107 0310 	add.w	r3, r7, #16
 8001fe6:	491c      	ldr	r1, [pc, #112]	@ (8002058 <draw_pressure_graph+0x1a0>)
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f011 ffd9 	bl	8013fa0 <siprintf>
        BSP_LCD_DisplayStringAt(x - 20, 210 + offsetY, (uint8_t *)label, LEFT_MODE);
 8001fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3b14      	subs	r3, #20
 8001ff4:	b298      	uxth	r0, r3
 8001ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	33d2      	adds	r3, #210	@ 0xd2
 8001ffc:	b299      	uxth	r1, r3
 8001ffe:	f107 0210 	add.w	r2, r7, #16
 8002002:	2303      	movs	r3, #3
 8002004:	f004 fa18 	bl	8006438 <BSP_LCD_DisplayStringAt>
        BSP_LCD_DrawLine(x, 200 + offsetY, x, 195 + offsetY); // Petite graduation
 8002008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200a:	b298      	uxth	r0, r3
 800200c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800200e:	b29b      	uxth	r3, r3
 8002010:	33c8      	adds	r3, #200	@ 0xc8
 8002012:	b299      	uxth	r1, r3
 8002014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002016:	b29a      	uxth	r2, r3
 8002018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800201a:	b29b      	uxth	r3, r3
 800201c:	33c3      	adds	r3, #195	@ 0xc3
 800201e:	b29b      	uxth	r3, r3
 8002020:	f004 fb92 	bl	8006748 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points; i++) {
 8002024:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002026:	3301      	adds	r3, #1
 8002028:	653b      	str	r3, [r7, #80]	@ 0x50
 800202a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	429a      	cmp	r2, r3
 8002030:	dbcb      	blt.n	8001fca <draw_pressure_graph+0x112>
    }

    // Tracer les points et relier par des lignes
    BSP_LCD_SetTextColor(LCD_COLOR_RED); // Utilisation d'une couleur rouge pour le graphique de pression
 8002032:	480a      	ldr	r0, [pc, #40]	@ (800205c <draw_pressure_graph+0x1a4>)
 8002034:	f004 f948 	bl	80062c8 <BSP_LCD_SetTextColor>

    // Ajuster l'échelle de la pression pour l'affichage (0 à 1200 hPa)
    for (int i = 0; i < num_points - 1; i++) {
 8002038:	2300      	movs	r3, #0
 800203a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800203c:	e08f      	b.n	800215e <draw_pressure_graph+0x2a6>
 800203e:	bf00      	nop
 8002040:	20003d60 	.word	0x20003d60
 8002044:	20004f0c 	.word	0x20004f0c
 8002048:	08016394 	.word	0x08016394
 800204c:	080163a0 	.word	0x080163a0
 8002050:	080163ac 	.word	0x080163ac
 8002054:	08016374 	.word	0x08016374
 8002058:	08016378 	.word	0x08016378
 800205c:	ffff0000 	.word	0xffff0000
 8002060:	43160000 	.word	0x43160000
 8002064:	44960000 	.word	0x44960000
        // Coordonnées du point courant
        int x1 = 80 + (i * 30);
 8002068:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	3350      	adds	r3, #80	@ 0x50
 8002074:	637b      	str	r3, [r7, #52]	@ 0x34
        int y1 = 200 + offsetY - (pressures[i] * 150 / 1200); // Calcul de l'échelle pour la pression
 8002076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002078:	33c8      	adds	r3, #200	@ 0xc8
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002082:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4413      	add	r3, r2
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ed5f 6a0c 	vldr	s13, [pc, #-48]	@ 8002060 <draw_pressure_graph+0x1a8>
 8002092:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002096:	ed1f 6a0d 	vldr	s12, [pc, #-52]	@ 8002064 <draw_pressure_graph+0x1ac>
 800209a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800209e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020a6:	ee17 3a90 	vmov	r3, s15
 80020aa:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Vérification des coordonnées y1
        if (y1 < 50 + offsetY) y1 = 50 + offsetY; // Limiter à l'axe Y bas
 80020ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020ae:	3331      	adds	r3, #49	@ 0x31
 80020b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020b2:	429a      	cmp	r2, r3
 80020b4:	dc02      	bgt.n	80020bc <draw_pressure_graph+0x204>
 80020b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020b8:	3332      	adds	r3, #50	@ 0x32
 80020ba:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (y1 > 200 + offsetY) y1 = 200 + offsetY; // Limiter à l'axe Y haut
 80020bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020be:	33c8      	adds	r3, #200	@ 0xc8
 80020c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dd02      	ble.n	80020cc <draw_pressure_graph+0x214>
 80020c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020c8:	33c8      	adds	r3, #200	@ 0xc8
 80020ca:	64bb      	str	r3, [r7, #72]	@ 0x48

        // Coordonnées du point suivant
        int x2 = 80 + ((i + 1) * 30);
 80020cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	3350      	adds	r3, #80	@ 0x50
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
        int y2 = 200 + offsetY - (pressures[i + 1] * 150 / 1200);
 80020dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020de:	33c8      	adds	r3, #200	@ 0xc8
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020ea:	3301      	adds	r3, #1
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	68fa      	ldr	r2, [r7, #12]
 80020f0:	4413      	add	r3, r2
 80020f2:	edd3 7a00 	vldr	s15, [r3]
 80020f6:	ed5f 6a26 	vldr	s13, [pc, #-152]	@ 8002060 <draw_pressure_graph+0x1a8>
 80020fa:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80020fe:	ed1f 6a27 	vldr	s12, [pc, #-156]	@ 8002064 <draw_pressure_graph+0x1ac>
 8002102:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800210a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210e:	ee17 3a90 	vmov	r3, s15
 8002112:	647b      	str	r3, [r7, #68]	@ 0x44

        // Vérification des coordonnées y2
        if (y2 < 50 + offsetY) y2 = 50 + offsetY; // Limiter à l'axe Y bas
 8002114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002116:	3331      	adds	r3, #49	@ 0x31
 8002118:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800211a:	429a      	cmp	r2, r3
 800211c:	dc02      	bgt.n	8002124 <draw_pressure_graph+0x26c>
 800211e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002120:	3332      	adds	r3, #50	@ 0x32
 8002122:	647b      	str	r3, [r7, #68]	@ 0x44
        if (y2 > 200 + offsetY) y2 = 200 + offsetY; // Limiter à l'axe Y haut
 8002124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002126:	33c8      	adds	r3, #200	@ 0xc8
 8002128:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800212a:	429a      	cmp	r2, r3
 800212c:	dd02      	ble.n	8002134 <draw_pressure_graph+0x27c>
 800212e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002130:	33c8      	adds	r3, #200	@ 0xc8
 8002132:	647b      	str	r3, [r7, #68]	@ 0x44

        // Tracer le point et la ligne
        BSP_LCD_FillCircle(x1, y1, 2); // Cercle pour le point
 8002134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002136:	b29b      	uxth	r3, r3
 8002138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800213a:	b291      	uxth	r1, r2
 800213c:	2202      	movs	r2, #2
 800213e:	4618      	mov	r0, r3
 8002140:	f004 fe5e 	bl	8006e00 <BSP_LCD_FillCircle>
        BSP_LCD_DrawLine(x1, y1, x2, y2); // Ligne entre les points
 8002144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002146:	b298      	uxth	r0, r3
 8002148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800214a:	b299      	uxth	r1, r3
 800214c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800214e:	b29a      	uxth	r2, r3
 8002150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002152:	b29b      	uxth	r3, r3
 8002154:	f004 faf8 	bl	8006748 <BSP_LCD_DrawLine>
    for (int i = 0; i < num_points - 1; i++) {
 8002158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800215a:	3301      	adds	r3, #1
 800215c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3b01      	subs	r3, #1
 8002162:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002164:	429a      	cmp	r2, r3
 8002166:	f6ff af7f 	blt.w	8002068 <draw_pressure_graph+0x1b0>
    }

    // Dernier point
    int last_x = 80 + ((num_points - 1) * 30);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	3350      	adds	r3, #80	@ 0x50
 8002178:	63bb      	str	r3, [r7, #56]	@ 0x38
    int last_y = 200 + offsetY - (pressures[num_points - 1] * 150 / 1200);
 800217a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800217c:	33c8      	adds	r3, #200	@ 0xc8
 800217e:	ee07 3a90 	vmov	s15, r3
 8002182:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	edd3 7a00 	vldr	s15, [r3]
 8002198:	ed5f 6a4f 	vldr	s13, [pc, #-316]	@ 8002060 <draw_pressure_graph+0x1a8>
 800219c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80021a0:	ed1f 6a50 	vldr	s12, [pc, #-320]	@ 8002064 <draw_pressure_graph+0x1ac>
 80021a4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80021a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021b0:	ee17 3a90 	vmov	r3, s15
 80021b4:	643b      	str	r3, [r7, #64]	@ 0x40

    // Vérification de la position du dernier point
    if (last_y < 50 + offsetY) last_y = 50 + offsetY;
 80021b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021b8:	3331      	adds	r3, #49	@ 0x31
 80021ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021bc:	429a      	cmp	r2, r3
 80021be:	dc02      	bgt.n	80021c6 <draw_pressure_graph+0x30e>
 80021c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c2:	3332      	adds	r3, #50	@ 0x32
 80021c4:	643b      	str	r3, [r7, #64]	@ 0x40
    if (last_y > 200 + offsetY) last_y = 200 + offsetY;
 80021c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021c8:	33c8      	adds	r3, #200	@ 0xc8
 80021ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021cc:	429a      	cmp	r2, r3
 80021ce:	dd02      	ble.n	80021d6 <draw_pressure_graph+0x31e>
 80021d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021d2:	33c8      	adds	r3, #200	@ 0xc8
 80021d4:	643b      	str	r3, [r7, #64]	@ 0x40

    BSP_LCD_FillCircle(last_x, last_y, 2); // Point final
 80021d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021d8:	b29b      	uxth	r3, r3
 80021da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021dc:	b291      	uxth	r1, r2
 80021de:	2202      	movs	r2, #2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f004 fe0d 	bl	8006e00 <BSP_LCD_FillCircle>
}
 80021e6:	bf00      	nop
 80021e8:	3758      	adds	r7, #88	@ 0x58
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop

080021f0 <update_pressure_graph>:


void update_pressure_graph(float pressure, uint32_t current_time) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80021fa:	6038      	str	r0, [r7, #0]
    // Ajouter la nouvelle pression et l'heure dans le tableau
    if (current_point < MAX_POINTS) {
 80021fc:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <update_pressure_graph+0x98>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b09      	cmp	r3, #9
 8002202:	dc12      	bgt.n	800222a <update_pressure_graph+0x3a>
        pressures[current_point] = pressure;
 8002204:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <update_pressure_graph+0x98>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a20      	ldr	r2, [pc, #128]	@ (800228c <update_pressure_graph+0x9c>)
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]
        times[current_point] = current_time;
 8002212:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <update_pressure_graph+0x98>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	491e      	ldr	r1, [pc, #120]	@ (8002290 <update_pressure_graph+0xa0>)
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        current_point++;
 800221e:	4b1a      	ldr	r3, [pc, #104]	@ (8002288 <update_pressure_graph+0x98>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <update_pressure_graph+0x98>)
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e022      	b.n	8002270 <update_pressure_graph+0x80>
    } else {
        // Déplacer tous les points pour faire de la place au nouveau point
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e016      	b.n	800225e <update_pressure_graph+0x6e>
            pressures[i] = pressures[i + 1];
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3301      	adds	r3, #1
 8002234:	4a15      	ldr	r2, [pc, #84]	@ (800228c <update_pressure_graph+0x9c>)
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4913      	ldr	r1, [pc, #76]	@ (800228c <update_pressure_graph+0x9c>)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	601a      	str	r2, [r3, #0]
            times[i] = times[i + 1];
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3301      	adds	r3, #1
 800224a:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <update_pressure_graph+0xa0>)
 800224c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002250:	490f      	ldr	r1, [pc, #60]	@ (8002290 <update_pressure_graph+0xa0>)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int i = 0; i < MAX_POINTS - 1; i++) {
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3301      	adds	r3, #1
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b08      	cmp	r3, #8
 8002262:	dde5      	ble.n	8002230 <update_pressure_graph+0x40>
        }
        pressures[MAX_POINTS - 1] = pressure;
 8002264:	4a09      	ldr	r2, [pc, #36]	@ (800228c <update_pressure_graph+0x9c>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6253      	str	r3, [r2, #36]	@ 0x24
        times[MAX_POINTS - 1] = current_time;
 800226a:	4a09      	ldr	r2, [pc, #36]	@ (8002290 <update_pressure_graph+0xa0>)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    // Redessiner le graphique avec les nouvelles données
    draw_pressure_graph(pressures, times, current_point);
 8002270:	4b05      	ldr	r3, [pc, #20]	@ (8002288 <update_pressure_graph+0x98>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4906      	ldr	r1, [pc, #24]	@ (8002290 <update_pressure_graph+0xa0>)
 8002278:	4804      	ldr	r0, [pc, #16]	@ (800228c <update_pressure_graph+0x9c>)
 800227a:	f7ff fe1d 	bl	8001eb8 <draw_pressure_graph>
}
 800227e:	bf00      	nop
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20005174 	.word	0x20005174
 800228c:	200051a0 	.word	0x200051a0
 8002290:	2000514c 	.word	0x2000514c

08002294 <linear_interpolation>:
static int32_t platform_write_hts221(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len);
static int32_t platform_read_hts221(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len);
static void platform_delay_hts221(uint32_t ms);

float linear_interpolation(lin_t *lin, int16_t x)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80022ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80022b4:	ee07 3a90 	vmov	s15, r3
 80022b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80022cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
								   (lin->x0 * lin->y1)))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	ed93 6a00 	vldr	s12, [r3]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80022dc:	ee66 7a27 	vmul.f32	s15, s12, s15
return ((lin->y1 - lin->y0) * x + ((lin->x1 * lin->y0) -
 80022e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022e4:	ee37 7a27 	vadd.f32	s14, s14, s15
	   / (lin->x1 - lin->x0);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022fc:	eef0 7a66 	vmov.f32	s15, s13
}
 8002300:	eeb0 0a67 	vmov.f32	s0, s15
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <init_HumTemp>:


void init_HumTemp(void) {
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
    dev_ctx1.write_reg = platform_write_hts221;
 8002314:	4b23      	ldr	r3, [pc, #140]	@ (80023a4 <init_HumTemp+0x94>)
 8002316:	4a24      	ldr	r2, [pc, #144]	@ (80023a8 <init_HumTemp+0x98>)
 8002318:	601a      	str	r2, [r3, #0]
    dev_ctx1.read_reg = platform_read_hts221;
 800231a:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <init_HumTemp+0x94>)
 800231c:	4a23      	ldr	r2, [pc, #140]	@ (80023ac <init_HumTemp+0x9c>)
 800231e:	605a      	str	r2, [r3, #4]
    dev_ctx1.mdelay = platform_delay_hts221;
 8002320:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <init_HumTemp+0x94>)
 8002322:	4a23      	ldr	r2, [pc, #140]	@ (80023b0 <init_HumTemp+0xa0>)
 8002324:	609a      	str	r2, [r3, #8]
    dev_ctx1.handle = &SENSOR_BUS;
 8002326:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <init_HumTemp+0x94>)
 8002328:	4a22      	ldr	r2, [pc, #136]	@ (80023b4 <init_HumTemp+0xa4>)
 800232a:	60da      	str	r2, [r3, #12]

    whoamI = 0;
 800232c:	4b22      	ldr	r3, [pc, #136]	@ (80023b8 <init_HumTemp+0xa8>)
 800232e:	2200      	movs	r2, #0
 8002330:	701a      	strb	r2, [r3, #0]
    hts221_device_id_get(&dev_ctx1, &whoamI);
 8002332:	4921      	ldr	r1, [pc, #132]	@ (80023b8 <init_HumTemp+0xa8>)
 8002334:	481b      	ldr	r0, [pc, #108]	@ (80023a4 <init_HumTemp+0x94>)
 8002336:	f00e f83f 	bl	80103b8 <hts221_device_id_get>

    if ( whoamI != HTS221_ID )
 800233a:	4b1f      	ldr	r3, [pc, #124]	@ (80023b8 <init_HumTemp+0xa8>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2bbc      	cmp	r3, #188	@ 0xbc
 8002340:	d001      	beq.n	8002346 <init_HumTemp+0x36>
       while (1);
 8002342:	bf00      	nop
 8002344:	e7fd      	b.n	8002342 <init_HumTemp+0x32>

    hts221_hum_adc_point_0_get(&dev_ctx1, &lin_hum.x0);
 8002346:	491d      	ldr	r1, [pc, #116]	@ (80023bc <init_HumTemp+0xac>)
 8002348:	4816      	ldr	r0, [pc, #88]	@ (80023a4 <init_HumTemp+0x94>)
 800234a:	f00e f91b 	bl	8010584 <hts221_hum_adc_point_0_get>
    hts221_hum_rh_point_0_get(&dev_ctx1, &lin_hum.y0);
 800234e:	491c      	ldr	r1, [pc, #112]	@ (80023c0 <init_HumTemp+0xb0>)
 8002350:	4814      	ldr	r0, [pc, #80]	@ (80023a4 <init_HumTemp+0x94>)
 8002352:	f00e f879 	bl	8010448 <hts221_hum_rh_point_0_get>
    hts221_hum_adc_point_1_get(&dev_ctx1, &lin_hum.x1);
 8002356:	491b      	ldr	r1, [pc, #108]	@ (80023c4 <init_HumTemp+0xb4>)
 8002358:	4812      	ldr	r0, [pc, #72]	@ (80023a4 <init_HumTemp+0x94>)
 800235a:	f00e f935 	bl	80105c8 <hts221_hum_adc_point_1_get>
    hts221_hum_rh_point_1_get(&dev_ctx1, &lin_hum.y1);
 800235e:	491a      	ldr	r1, [pc, #104]	@ (80023c8 <init_HumTemp+0xb8>)
 8002360:	4810      	ldr	r0, [pc, #64]	@ (80023a4 <init_HumTemp+0x94>)
 8002362:	f00e f88f 	bl	8010484 <hts221_hum_rh_point_1_get>

    hts221_temp_adc_point_0_get(&dev_ctx1, &lin_temp.x0);
 8002366:	4919      	ldr	r1, [pc, #100]	@ (80023cc <init_HumTemp+0xbc>)
 8002368:	480e      	ldr	r0, [pc, #56]	@ (80023a4 <init_HumTemp+0x94>)
 800236a:	f00e f94f 	bl	801060c <hts221_temp_adc_point_0_get>
    hts221_temp_deg_point_0_get(&dev_ctx1, &lin_temp.y0);
 800236e:	4918      	ldr	r1, [pc, #96]	@ (80023d0 <init_HumTemp+0xc0>)
 8002370:	480c      	ldr	r0, [pc, #48]	@ (80023a4 <init_HumTemp+0x94>)
 8002372:	f00e f8a5 	bl	80104c0 <hts221_temp_deg_point_0_get>
    hts221_temp_adc_point_1_get(&dev_ctx1, &lin_temp.x1);
 8002376:	4917      	ldr	r1, [pc, #92]	@ (80023d4 <init_HumTemp+0xc4>)
 8002378:	480a      	ldr	r0, [pc, #40]	@ (80023a4 <init_HumTemp+0x94>)
 800237a:	f00e f969 	bl	8010650 <hts221_temp_adc_point_1_get>
    hts221_temp_deg_point_1_get(&dev_ctx1, &lin_temp.y1);
 800237e:	4916      	ldr	r1, [pc, #88]	@ (80023d8 <init_HumTemp+0xc8>)
 8002380:	4808      	ldr	r0, [pc, #32]	@ (80023a4 <init_HumTemp+0x94>)
 8002382:	f00e f8ce 	bl	8010522 <hts221_temp_deg_point_1_get>

    hts221_block_data_update_set(&dev_ctx1, PROPERTY_ENABLE);
 8002386:	2101      	movs	r1, #1
 8002388:	4806      	ldr	r0, [pc, #24]	@ (80023a4 <init_HumTemp+0x94>)
 800238a:	f00d ffab 	bl	80102e4 <hts221_block_data_update_set>
    hts221_data_rate_set(&dev_ctx1, HTS221_ODR_1Hz);
 800238e:	2101      	movs	r1, #1
 8002390:	4804      	ldr	r0, [pc, #16]	@ (80023a4 <init_HumTemp+0x94>)
 8002392:	f00d ff81 	bl	8010298 <hts221_data_rate_set>
    hts221_power_on_set(&dev_ctx1, PROPERTY_ENABLE);
 8002396:	2101      	movs	r1, #1
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <init_HumTemp+0x94>)
 800239a:	f00e f81e 	bl	80103da <hts221_power_on_set>

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200055c0 	.word	0x200055c0
 80023a8:	08002671 	.word	0x08002671
 80023ac:	080026b3 	.word	0x080026b3
 80023b0:	080026f5 	.word	0x080026f5
 80023b4:	20005d14 	.word	0x20005d14
 80023b8:	200051d4 	.word	0x200051d4
 80023bc:	200055d0 	.word	0x200055d0
 80023c0:	200055d4 	.word	0x200055d4
 80023c4:	200055d8 	.word	0x200055d8
 80023c8:	200055dc 	.word	0x200055dc
 80023cc:	200055e0 	.word	0x200055e0
 80023d0:	200055e4 	.word	0x200055e4
 80023d4:	200055e8 	.word	0x200055e8
 80023d8:	200055ec 	.word	0x200055ec

080023dc <valeur_Hum>:


void valeur_Hum(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af02      	add	r7, sp, #8
	hts221_reg_t reg1;
	hts221_status_get(&dev_ctx1, &reg1.status_reg);
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	482d      	ldr	r0, [pc, #180]	@ (800249c <valeur_Hum+0xc0>)
 80023e8:	f00e f81d 	bl	8010426 <hts221_status_get>
    if (reg1.status_reg.h_da) {
 80023ec:	793b      	ldrb	r3, [r7, #4]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d04d      	beq.n	8002494 <valeur_Hum+0xb8>
        memset(&data_raw_humidity, 0x00, sizeof(int16_t));
 80023f8:	4b29      	ldr	r3, [pc, #164]	@ (80024a0 <valeur_Hum+0xc4>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	801a      	strh	r2, [r3, #0]
        hts221_humidity_raw_get(&dev_ctx1, &data_raw_humidity);
 80023fe:	4928      	ldr	r1, [pc, #160]	@ (80024a0 <valeur_Hum+0xc4>)
 8002400:	4826      	ldr	r0, [pc, #152]	@ (800249c <valeur_Hum+0xc0>)
 8002402:	f00d ff95 	bl	8010330 <hts221_humidity_raw_get>
        humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 8002406:	4b26      	ldr	r3, [pc, #152]	@ (80024a0 <valeur_Hum+0xc4>)
 8002408:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240c:	4619      	mov	r1, r3
 800240e:	4825      	ldr	r0, [pc, #148]	@ (80024a4 <valeur_Hum+0xc8>)
 8002410:	f7ff ff40 	bl	8002294 <linear_interpolation>
 8002414:	eef0 7a40 	vmov.f32	s15, s0
 8002418:	4b23      	ldr	r3, [pc, #140]	@ (80024a8 <valeur_Hum+0xcc>)
 800241a:	edc3 7a00 	vstr	s15, [r3]

        if (humidity_perc < 0) {
 800241e:	4b22      	ldr	r3, [pc, #136]	@ (80024a8 <valeur_Hum+0xcc>)
 8002420:	edd3 7a00 	vldr	s15, [r3]
 8002424:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242c:	d503      	bpl.n	8002436 <valeur_Hum+0x5a>
            humidity_perc = 0;
 800242e:	4b1e      	ldr	r3, [pc, #120]	@ (80024a8 <valeur_Hum+0xcc>)
 8002430:	f04f 0200 	mov.w	r2, #0
 8002434:	601a      	str	r2, [r3, #0]
        }
        if (humidity_perc > 100) {
 8002436:	4b1c      	ldr	r3, [pc, #112]	@ (80024a8 <valeur_Hum+0xcc>)
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80024ac <valeur_Hum+0xd0>
 8002440:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002448:	dd02      	ble.n	8002450 <valeur_Hum+0x74>
            humidity_perc = 100;
 800244a:	4b17      	ldr	r3, [pc, #92]	@ (80024a8 <valeur_Hum+0xcc>)
 800244c:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <valeur_Hum+0xd4>)
 800244e:	601a      	str	r2, [r3, #0]
        }

        snprintf((char *)tx_buffer, sizeof(tx_buffer), "%3.2f %%", humidity_perc);
 8002450:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <valeur_Hum+0xcc>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f897 	bl	8000588 <__aeabi_f2d>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	e9cd 2300 	strd	r2, r3, [sp]
 8002462:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <valeur_Hum+0xd8>)
 8002464:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002468:	4813      	ldr	r0, [pc, #76]	@ (80024b8 <valeur_Hum+0xdc>)
 800246a:	f011 fd65 	bl	8013f38 <sniprintf>
        //printf((char const *)tx_buffer);
        BSP_LCD_SetFont(&Font16);
 800246e:	4813      	ldr	r0, [pc, #76]	@ (80024bc <valeur_Hum+0xe0>)
 8002470:	f003 ff5c 	bl	800632c <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(startX + squareSize + spacing + 20, startY + 70, (uint8_t*)tx_buffer, LEFT_MODE);
 8002474:	2228      	movs	r2, #40	@ 0x28
 8002476:	2378      	movs	r3, #120	@ 0x78
 8002478:	4413      	add	r3, r2
 800247a:	b29b      	uxth	r3, r3
 800247c:	221e      	movs	r2, #30
 800247e:	4413      	add	r3, r2
 8002480:	b29b      	uxth	r3, r3
 8002482:	3314      	adds	r3, #20
 8002484:	b298      	uxth	r0, r3
 8002486:	2350      	movs	r3, #80	@ 0x50
 8002488:	3346      	adds	r3, #70	@ 0x46
 800248a:	b299      	uxth	r1, r3
 800248c:	2303      	movs	r3, #3
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <valeur_Hum+0xdc>)
 8002490:	f003 ffd2 	bl	8006438 <BSP_LCD_DisplayStringAt>

    }
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200055c0 	.word	0x200055c0
 80024a0:	200051c8 	.word	0x200051c8
 80024a4:	200055d0 	.word	0x200055d0
 80024a8:	200051cc 	.word	0x200051cc
 80024ac:	42c80000 	.word	0x42c80000
 80024b0:	42c80000 	.word	0x42c80000
 80024b4:	080163bc 	.word	0x080163bc
 80024b8:	200051d8 	.word	0x200051d8
 80024bc:	20004f0c 	.word	0x20004f0c

080024c0 <valeur_TempH>:


// Fonction principale pour lire les données et les afficher
void valeur_TempH(void) {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af02      	add	r7, sp, #8
    // Ajouter un debug print
    printf("Reading temperature...\n");
 80024c6:	4827      	ldr	r0, [pc, #156]	@ (8002564 <valeur_TempH+0xa4>)
 80024c8:	f011 fd2e 	bl	8013f28 <puts>

    hts221_reg_t reg1;
    hts221_status_get(&dev_ctx1, &reg1.status_reg);
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	4825      	ldr	r0, [pc, #148]	@ (8002568 <valeur_TempH+0xa8>)
 80024d2:	f00d ffa8 	bl	8010426 <hts221_status_get>
    if (reg1.status_reg.t_da) {
 80024d6:	793b      	ldrb	r3, [r7, #4]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d039      	beq.n	8002556 <valeur_TempH+0x96>
        memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80024e2:	4b22      	ldr	r3, [pc, #136]	@ (800256c <valeur_TempH+0xac>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	801a      	strh	r2, [r3, #0]
        hts221_temperature_raw_get(&dev_ctx1, &data_raw_temperature);
 80024e8:	4920      	ldr	r1, [pc, #128]	@ (800256c <valeur_TempH+0xac>)
 80024ea:	481f      	ldr	r0, [pc, #124]	@ (8002568 <valeur_TempH+0xa8>)
 80024ec:	f00d ff42 	bl	8010374 <hts221_temperature_raw_get>
        temperature_degC = linear_interpolation(&lin_temp, data_raw_temperature);
 80024f0:	4b1e      	ldr	r3, [pc, #120]	@ (800256c <valeur_TempH+0xac>)
 80024f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f6:	4619      	mov	r1, r3
 80024f8:	481d      	ldr	r0, [pc, #116]	@ (8002570 <valeur_TempH+0xb0>)
 80024fa:	f7ff fecb 	bl	8002294 <linear_interpolation>
 80024fe:	eef0 7a40 	vmov.f32	s15, s0
 8002502:	4b1c      	ldr	r3, [pc, #112]	@ (8002574 <valeur_TempH+0xb4>)
 8002504:	edc3 7a00 	vstr	s15, [r3]
        snprintf((char *)tx_buffer, sizeof(tx_buffer), "%6.2f deg", temperature_degC);
 8002508:	4b1a      	ldr	r3, [pc, #104]	@ (8002574 <valeur_TempH+0xb4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f83b 	bl	8000588 <__aeabi_f2d>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	e9cd 2300 	strd	r2, r3, [sp]
 800251a:	4a17      	ldr	r2, [pc, #92]	@ (8002578 <valeur_TempH+0xb8>)
 800251c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002520:	4816      	ldr	r0, [pc, #88]	@ (800257c <valeur_TempH+0xbc>)
 8002522:	f011 fd09 	bl	8013f38 <sniprintf>

        // Debug print
        printf("Temperature: %6.2f deg\n", temperature_degC);
 8002526:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <valeur_TempH+0xb4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f82c 	bl	8000588 <__aeabi_f2d>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4812      	ldr	r0, [pc, #72]	@ (8002580 <valeur_TempH+0xc0>)
 8002536:	f011 fc8f 	bl	8013e58 <iprintf>

        BSP_LCD_SetFont(&Font16);
 800253a:	4812      	ldr	r0, [pc, #72]	@ (8002584 <valeur_TempH+0xc4>)
 800253c:	f003 fef6 	bl	800632c <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(startX+2, startY + 70, (uint8_t*)tx_buffer, LEFT_MODE);
 8002540:	2328      	movs	r3, #40	@ 0x28
 8002542:	3302      	adds	r3, #2
 8002544:	b298      	uxth	r0, r3
 8002546:	2350      	movs	r3, #80	@ 0x50
 8002548:	3346      	adds	r3, #70	@ 0x46
 800254a:	b299      	uxth	r1, r3
 800254c:	2303      	movs	r3, #3
 800254e:	4a0b      	ldr	r2, [pc, #44]	@ (800257c <valeur_TempH+0xbc>)
 8002550:	f003 ff72 	bl	8006438 <BSP_LCD_DisplayStringAt>
    } else {
        printf("Temperature data not available\n");
    }
}
 8002554:	e002      	b.n	800255c <valeur_TempH+0x9c>
        printf("Temperature data not available\n");
 8002556:	480c      	ldr	r0, [pc, #48]	@ (8002588 <valeur_TempH+0xc8>)
 8002558:	f011 fce6 	bl	8013f28 <puts>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	080163c8 	.word	0x080163c8
 8002568:	200055c0 	.word	0x200055c0
 800256c:	200051ca 	.word	0x200051ca
 8002570:	200055e0 	.word	0x200055e0
 8002574:	200051d0 	.word	0x200051d0
 8002578:	080163e0 	.word	0x080163e0
 800257c:	200051d8 	.word	0x200051d8
 8002580:	080163ec 	.word	0x080163ec
 8002584:	20004f0c 	.word	0x20004f0c
 8002588:	08016404 	.word	0x08016404

0800258c <valeur_graph_TempH>:

extern float temperatures[MAX_POINTS]; // Tableau pour stocker les températures
extern uint8_t temp_index;
extern int current_point;

void valeur_graph_TempH(void) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
    hts221_reg_t reg1;
    hts221_status_get(&dev_ctx1, &reg1.status_reg);
 8002592:	463b      	mov	r3, r7
 8002594:	4619      	mov	r1, r3
 8002596:	4815      	ldr	r0, [pc, #84]	@ (80025ec <valeur_graph_TempH+0x60>)
 8002598:	f00d ff45 	bl	8010426 <hts221_status_get>

    if (reg1.status_reg.t_da) {
 800259c:	783b      	ldrb	r3, [r7, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d01d      	beq.n	80025e4 <valeur_graph_TempH+0x58>
        // Lire la température brute du capteur
        memset(&data_raw_temperature, 0x00, sizeof(int16_t));
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <valeur_graph_TempH+0x64>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	801a      	strh	r2, [r3, #0]
        hts221_temperature_raw_get(&dev_ctx1, &data_raw_temperature);
 80025ae:	4910      	ldr	r1, [pc, #64]	@ (80025f0 <valeur_graph_TempH+0x64>)
 80025b0:	480e      	ldr	r0, [pc, #56]	@ (80025ec <valeur_graph_TempH+0x60>)
 80025b2:	f00d fedf 	bl	8010374 <hts221_temperature_raw_get>

        // Convertir la valeur brute en °C
        temperature_degC = linear_interpolation(&lin_temp, data_raw_temperature);
 80025b6:	4b0e      	ldr	r3, [pc, #56]	@ (80025f0 <valeur_graph_TempH+0x64>)
 80025b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025bc:	4619      	mov	r1, r3
 80025be:	480d      	ldr	r0, [pc, #52]	@ (80025f4 <valeur_graph_TempH+0x68>)
 80025c0:	f7ff fe68 	bl	8002294 <linear_interpolation>
 80025c4:	eef0 7a40 	vmov.f32	s15, s0
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <valeur_graph_TempH+0x6c>)
 80025ca:	edc3 7a00 	vstr	s15, [r3]

        // Obtenir l'heure actuelle en secondes depuis le début (ou autre base temporelle)
        uint32_t current_time = get_current_time_in_seconds();
 80025ce:	f7fe fcf7 	bl	8000fc0 <get_current_time_in_seconds>
 80025d2:	6078      	str	r0, [r7, #4]

        // Ajouter la nouvelle valeur et mettre à jour le graphique
        update_temperature_graph(temperature_degC, current_time);
 80025d4:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <valeur_graph_TempH+0x6c>)
 80025d6:	edd3 7a00 	vldr	s15, [r3]
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	eeb0 0a67 	vmov.f32	s0, s15
 80025e0:	f7ff fa54 	bl	8001a8c <update_temperature_graph>

        // Rafraîchir le graphique s'il est affiché
        //draw_temperature_graph(temperature_degC, current_time, current_point);
    }
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200055c0 	.word	0x200055c0
 80025f0:	200051ca 	.word	0x200051ca
 80025f4:	200055e0 	.word	0x200055e0
 80025f8:	200051d0 	.word	0x200051d0

080025fc <value_humidity_graph>:

void value_humidity_graph(void) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0

        hts221_reg_t reg1;
		hts221_status_get(&dev_ctx1, &reg1.status_reg);
 8002602:	463b      	mov	r3, r7
 8002604:	4619      	mov	r1, r3
 8002606:	4816      	ldr	r0, [pc, #88]	@ (8002660 <value_humidity_graph+0x64>)
 8002608:	f00d ff0d 	bl	8010426 <hts221_status_get>
		if (reg1.status_reg.h_da) {
 800260c:	783b      	ldrb	r3, [r7, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d01f      	beq.n	8002658 <value_humidity_graph+0x5c>
			memset(&data_raw_humidity, 0x00, sizeof(int16_t));
 8002618:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <value_humidity_graph+0x68>)
 800261a:	2200      	movs	r2, #0
 800261c:	801a      	strh	r2, [r3, #0]
			hts221_humidity_raw_get(&dev_ctx1, &data_raw_humidity);
 800261e:	4911      	ldr	r1, [pc, #68]	@ (8002664 <value_humidity_graph+0x68>)
 8002620:	480f      	ldr	r0, [pc, #60]	@ (8002660 <value_humidity_graph+0x64>)
 8002622:	f00d fe85 	bl	8010330 <hts221_humidity_raw_get>
			humidity_perc = linear_interpolation(&lin_hum, data_raw_humidity);
 8002626:	4b0f      	ldr	r3, [pc, #60]	@ (8002664 <value_humidity_graph+0x68>)
 8002628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262c:	4619      	mov	r1, r3
 800262e:	480e      	ldr	r0, [pc, #56]	@ (8002668 <value_humidity_graph+0x6c>)
 8002630:	f7ff fe30 	bl	8002294 <linear_interpolation>
 8002634:	eef0 7a40 	vmov.f32	s15, s0
 8002638:	4b0c      	ldr	r3, [pc, #48]	@ (800266c <value_humidity_graph+0x70>)
 800263a:	edc3 7a00 	vstr	s15, [r3]

			// Récupérer l'heure actuelle en minutes
			int32_t current_time = get_current_time_in_seconds();
 800263e:	f7fe fcbf 	bl	8000fc0 <get_current_time_in_seconds>
 8002642:	4603      	mov	r3, r0
 8002644:	607b      	str	r3, [r7, #4]
			// Ajouter les données
			update_humidity_graph(humidity_perc, current_time);
 8002646:	4b09      	ldr	r3, [pc, #36]	@ (800266c <value_humidity_graph+0x70>)
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4618      	mov	r0, r3
 8002650:	eeb0 0a67 	vmov.f32	s0, s15
 8002654:	f7ff fbde 	bl	8001e14 <update_humidity_graph>
        }
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	200055c0 	.word	0x200055c0
 8002664:	200051c8 	.word	0x200051c8
 8002668:	200055d0 	.word	0x200055d0
 800266c:	200051cc 	.word	0x200051cc

08002670 <platform_write_hts221>:



static int32_t platform_write_hts221(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af04      	add	r7, sp, #16
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	461a      	mov	r2, r3
 800267c:	460b      	mov	r3, r1
 800267e:	72fb      	strb	r3, [r7, #11]
 8002680:	4613      	mov	r3, r2
 8002682:	813b      	strh	r3, [r7, #8]
	  reg |= 0x80;
 8002684:	7afb      	ldrb	r3, [r7, #11]
 8002686:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800268a:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Write(handle, HTS221_I2C_ADDRESS, reg,
 800268c:	7afb      	ldrb	r3, [r7, #11]
 800268e:	b29a      	uxth	r2, r3
 8002690:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002694:	9302      	str	r3, [sp, #8]
 8002696:	893b      	ldrh	r3, [r7, #8]
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2301      	movs	r3, #1
 80026a0:	21bf      	movs	r1, #191	@ 0xbf
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f007 fa4c 	bl	8009b40 <HAL_I2C_Mem_Write>
	                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	  return 0;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <platform_read_hts221>:

static int32_t platform_read_hts221(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b088      	sub	sp, #32
 80026b6:	af04      	add	r7, sp, #16
 80026b8:	60f8      	str	r0, [r7, #12]
 80026ba:	607a      	str	r2, [r7, #4]
 80026bc:	461a      	mov	r2, r3
 80026be:	460b      	mov	r3, r1
 80026c0:	72fb      	strb	r3, [r7, #11]
 80026c2:	4613      	mov	r3, r2
 80026c4:	813b      	strh	r3, [r7, #8]
	  reg |= 0x80;
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80026cc:	72fb      	strb	r3, [r7, #11]
	  HAL_I2C_Mem_Read(handle, HTS221_I2C_ADDRESS, reg,
 80026ce:	7afb      	ldrb	r3, [r7, #11]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026d6:	9302      	str	r3, [sp, #8]
 80026d8:	893b      	ldrh	r3, [r7, #8]
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2301      	movs	r3, #1
 80026e2:	21bf      	movs	r1, #191	@ 0xbf
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f007 fb3f 	bl	8009d68 <HAL_I2C_Mem_Read>
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	  return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <platform_delay_hts221>:

static void platform_delay_hts221(uint32_t ms) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f005 faf7 	bl	8007cf0 <HAL_Delay>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <init_Pression>:
stmdev_ctx_t dev_ctx;

lps22hh_reg_t reg;


void init_Pression(void) {
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0

    dev_ctx.write_reg = platform_write;
 8002710:	4b18      	ldr	r3, [pc, #96]	@ (8002774 <init_Pression+0x68>)
 8002712:	4a19      	ldr	r2, [pc, #100]	@ (8002778 <init_Pression+0x6c>)
 8002714:	601a      	str	r2, [r3, #0]
    dev_ctx.read_reg = platform_read;
 8002716:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <init_Pression+0x68>)
 8002718:	4a18      	ldr	r2, [pc, #96]	@ (800277c <init_Pression+0x70>)
 800271a:	605a      	str	r2, [r3, #4]
    dev_ctx.mdelay = platform_delay;
 800271c:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <init_Pression+0x68>)
 800271e:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <init_Pression+0x74>)
 8002720:	609a      	str	r2, [r3, #8]
    dev_ctx.handle = &SENSOR_BUS;
 8002722:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <init_Pression+0x68>)
 8002724:	4a17      	ldr	r2, [pc, #92]	@ (8002784 <init_Pression+0x78>)
 8002726:	60da      	str	r2, [r3, #12]

    platform_delay(BOOT_TIME);
 8002728:	2005      	movs	r0, #5
 800272a:	f000 f90f 	bl	800294c <platform_delay>

    whoamI = 0;
 800272e:	4b16      	ldr	r3, [pc, #88]	@ (8002788 <init_Pression+0x7c>)
 8002730:	2200      	movs	r2, #0
 8002732:	701a      	strb	r2, [r3, #0]
    lps22hh_device_id_get(&dev_ctx, &whoamI);
 8002734:	4914      	ldr	r1, [pc, #80]	@ (8002788 <init_Pression+0x7c>)
 8002736:	480f      	ldr	r0, [pc, #60]	@ (8002774 <init_Pression+0x68>)
 8002738:	f00e f89d 	bl	8010876 <lps22hh_device_id_get>

    if (whoamI != LPS22HH_ID) {
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <init_Pression+0x7c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2bb3      	cmp	r3, #179	@ 0xb3
 8002742:	d001      	beq.n	8002748 <init_Pression+0x3c>
        while (1); // Gérer l'erreur si le capteur n'est pas trouvé
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <init_Pression+0x38>
    }

    lps22hh_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8002748:	2101      	movs	r1, #1
 800274a:	480a      	ldr	r0, [pc, #40]	@ (8002774 <init_Pression+0x68>)
 800274c:	f00e f8a4 	bl	8010898 <lps22hh_reset_set>

    do {
        lps22hh_reset_get(&dev_ctx, &rst);
 8002750:	490e      	ldr	r1, [pc, #56]	@ (800278c <init_Pression+0x80>)
 8002752:	4808      	ldr	r0, [pc, #32]	@ (8002774 <init_Pression+0x68>)
 8002754:	f00e f8c6 	bl	80108e4 <lps22hh_reset_get>
    } while (rst);
 8002758:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <init_Pression+0x80>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f7      	bne.n	8002750 <init_Pression+0x44>

    lps22hh_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8002760:	2101      	movs	r1, #1
 8002762:	4804      	ldr	r0, [pc, #16]	@ (8002774 <init_Pression+0x68>)
 8002764:	f00d ffea 	bl	801073c <lps22hh_block_data_update_set>
    lps22hh_data_rate_set(&dev_ctx, LPS22HH_10_Hz_LOW_NOISE);
 8002768:	2112      	movs	r1, #18
 800276a:	4802      	ldr	r0, [pc, #8]	@ (8002774 <init_Pression+0x68>)
 800276c:	f00e f80c 	bl	8010788 <lps22hh_data_rate_set>
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200059e4 	.word	0x200059e4
 8002778:	080028d9 	.word	0x080028d9
 800277c:	08002913 	.word	0x08002913
 8002780:	0800294d 	.word	0x0800294d
 8002784:	20005d14 	.word	0x20005d14
 8002788:	200055f8 	.word	0x200055f8
 800278c:	200055f9 	.word	0x200055f9

08002790 <valeur_Pression>:

void valeur_Pression(void) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af02      	add	r7, sp, #8


    lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8002796:	2301      	movs	r3, #1
 8002798:	4a21      	ldr	r2, [pc, #132]	@ (8002820 <valeur_Pression+0x90>)
 800279a:	2127      	movs	r1, #39	@ 0x27
 800279c:	4821      	ldr	r0, [pc, #132]	@ (8002824 <valeur_Pression+0x94>)
 800279e:	f00d ff79 	bl	8010694 <lps22hh_read_reg>

    if (reg.status.p_da) {
 80027a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <valeur_Pression+0x90>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d034      	beq.n	800281a <valeur_Pression+0x8a>
        memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 80027b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002828 <valeur_Pression+0x98>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
        lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 80027b6:	491c      	ldr	r1, [pc, #112]	@ (8002828 <valeur_Pression+0x98>)
 80027b8:	481a      	ldr	r0, [pc, #104]	@ (8002824 <valeur_Pression+0x94>)
 80027ba:	f00e f833 	bl	8010824 <lps22hh_pressure_raw_get>
        pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 80027be:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <valeur_Pression+0x98>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f00d ffa2 	bl	801070c <lps22hh_from_lsb_to_hpa>
 80027c8:	eef0 7a40 	vmov.f32	s15, s0
 80027cc:	4b17      	ldr	r3, [pc, #92]	@ (800282c <valeur_Pression+0x9c>)
 80027ce:	edc3 7a00 	vstr	s15, [r3]
        snprintf((char *)tx_buffer, sizeof(tx_buffer), "%6.2f hPa", pressure_hPa);
 80027d2:	4b16      	ldr	r3, [pc, #88]	@ (800282c <valeur_Pression+0x9c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fd fed6 	bl	8000588 <__aeabi_f2d>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	e9cd 2300 	strd	r2, r3, [sp]
 80027e4:	4a12      	ldr	r2, [pc, #72]	@ (8002830 <valeur_Pression+0xa0>)
 80027e6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80027ea:	4812      	ldr	r0, [pc, #72]	@ (8002834 <valeur_Pression+0xa4>)
 80027ec:	f011 fba4 	bl	8013f38 <sniprintf>
        //printf((char const *)tx_buffer);
        BSP_LCD_SetFont(&Font16);
 80027f0:	4811      	ldr	r0, [pc, #68]	@ (8002838 <valeur_Pression+0xa8>)
 80027f2:	f003 fd9b 	bl	800632c <BSP_LCD_SetFont>
        BSP_LCD_DisplayStringAt(startXP+2 * (squareSizeP + spacingP) + 20, startYP + 60, (uint8_t*)tx_buffer, LEFT_MODE);
 80027f6:	2278      	movs	r2, #120	@ 0x78
 80027f8:	2317      	movs	r3, #23
 80027fa:	4413      	add	r3, r2
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	b29b      	uxth	r3, r3
 8002802:	2228      	movs	r2, #40	@ 0x28
 8002804:	4413      	add	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	3314      	adds	r3, #20
 800280a:	b298      	uxth	r0, r3
 800280c:	2350      	movs	r3, #80	@ 0x50
 800280e:	333c      	adds	r3, #60	@ 0x3c
 8002810:	b299      	uxth	r1, r3
 8002812:	2303      	movs	r3, #3
 8002814:	4a07      	ldr	r2, [pc, #28]	@ (8002834 <valeur_Pression+0xa4>)
 8002816:	f003 fe0f 	bl	8006438 <BSP_LCD_DisplayStringAt>

    }
}
 800281a:	bf00      	nop
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	200059f4 	.word	0x200059f4
 8002824:	200059e4 	.word	0x200059e4
 8002828:	200055f0 	.word	0x200055f0
 800282c:	200055f4 	.word	0x200055f4
 8002830:	08016424 	.word	0x08016424
 8002834:	200055fc 	.word	0x200055fc
 8002838:	20004f0c 	.word	0x20004f0c

0800283c <valeur_Pression_graph>:


void valeur_Pression_graph(void) {
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0


    lps22hh_read_reg(&dev_ctx, LPS22HH_STATUS, (uint8_t *)&reg, 1);
 8002842:	2301      	movs	r3, #1
 8002844:	4a15      	ldr	r2, [pc, #84]	@ (800289c <valeur_Pression_graph+0x60>)
 8002846:	2127      	movs	r1, #39	@ 0x27
 8002848:	4815      	ldr	r0, [pc, #84]	@ (80028a0 <valeur_Pression_graph+0x64>)
 800284a:	f00d ff23 	bl	8010694 <lps22hh_read_reg>

    if (reg.status.p_da) {
 800284e:	4b13      	ldr	r3, [pc, #76]	@ (800289c <valeur_Pression_graph+0x60>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	f003 0301 	and.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <valeur_Pression_graph+0x58>
        memset(&data_raw_pressure, 0x00, sizeof(uint32_t));
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <valeur_Pression_graph+0x68>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
        lps22hh_pressure_raw_get(&dev_ctx, &data_raw_pressure);
 8002862:	4910      	ldr	r1, [pc, #64]	@ (80028a4 <valeur_Pression_graph+0x68>)
 8002864:	480e      	ldr	r0, [pc, #56]	@ (80028a0 <valeur_Pression_graph+0x64>)
 8002866:	f00d ffdd 	bl	8010824 <lps22hh_pressure_raw_get>
        pressure_hPa = lps22hh_from_lsb_to_hpa(data_raw_pressure);
 800286a:	4b0e      	ldr	r3, [pc, #56]	@ (80028a4 <valeur_Pression_graph+0x68>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f00d ff4c 	bl	801070c <lps22hh_from_lsb_to_hpa>
 8002874:	eef0 7a40 	vmov.f32	s15, s0
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <valeur_Pression_graph+0x6c>)
 800287a:	edc3 7a00 	vstr	s15, [r3]

        uint32_t current_time = get_current_time_in_seconds();
 800287e:	f7fe fb9f 	bl	8000fc0 <get_current_time_in_seconds>
 8002882:	6078      	str	r0, [r7, #4]

        update_pressure_graph(pressure_hPa, current_time);
 8002884:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <valeur_Pression_graph+0x6c>)
 8002886:	edd3 7a00 	vldr	s15, [r3]
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	eeb0 0a67 	vmov.f32	s0, s15
 8002890:	f7ff fcae 	bl	80021f0 <update_pressure_graph>

    }
}
 8002894:	bf00      	nop
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200059f4 	.word	0x200059f4
 80028a0:	200059e4 	.word	0x200059e4
 80028a4:	200055f0 	.word	0x200055f0
 80028a8:	200055f4 	.word	0x200055f4

080028ac <manage_pressure_graph>:

void manage_pressure_graph() {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
    static uint32_t last_second = 0;  // Dernière seconde enregistrée
    uint32_t current_second = get_current_time_in_seconds(); // Récupérer l'heure en secondes
 80028b2:	f7fe fb85 	bl	8000fc0 <get_current_time_in_seconds>
 80028b6:	6078      	str	r0, [r7, #4]

    // Si une seconde s'est écoulée, mettre à jour le graphique
    if (current_second != last_second) {
 80028b8:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <manage_pressure_graph+0x28>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d004      	beq.n	80028cc <manage_pressure_graph+0x20>
        last_second = current_second; // Mettre à jour la dernière seconde enregistrée
 80028c2:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <manage_pressure_graph+0x28>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6013      	str	r3, [r2, #0]
        valeur_Pression_graph(); // Lire la pression et mettre à jour le graphique
 80028c8:	f7ff ffb8 	bl	800283c <valeur_Pression_graph>
    }
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	200059f8 	.word	0x200059f8

080028d8 <platform_write>:

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len) {
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af04      	add	r7, sp, #16
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	72fb      	strb	r3, [r7, #11]
 80028e8:	4613      	mov	r3, r2
 80028ea:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Write(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 1000);
 80028ec:	7afb      	ldrb	r3, [r7, #11]
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028f4:	9302      	str	r3, [sp, #8]
 80028f6:	893b      	ldrh	r3, [r7, #8]
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2301      	movs	r3, #1
 8002900:	21bb      	movs	r1, #187	@ 0xbb
 8002902:	68f8      	ldr	r0, [r7, #12]
 8002904:	f007 f91c 	bl	8009b40 <HAL_I2C_Mem_Write>
    return 0;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len) {
 8002912:	b580      	push	{r7, lr}
 8002914:	b088      	sub	sp, #32
 8002916:	af04      	add	r7, sp, #16
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	461a      	mov	r2, r3
 800291e:	460b      	mov	r3, r1
 8002920:	72fb      	strb	r3, [r7, #11]
 8002922:	4613      	mov	r3, r2
 8002924:	813b      	strh	r3, [r7, #8]
    HAL_I2C_Mem_Read(handle, LPS22HH_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8002926:	7afb      	ldrb	r3, [r7, #11]
 8002928:	b29a      	uxth	r2, r3
 800292a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800292e:	9302      	str	r3, [sp, #8]
 8002930:	893b      	ldrh	r3, [r7, #8]
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2301      	movs	r3, #1
 800293a:	21bb      	movs	r1, #187	@ 0xbb
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f007 fa13 	bl	8009d68 <HAL_I2C_Mem_Read>
    return 0;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <platform_delay>:

static void platform_delay(uint32_t ms) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f005 f9cb 	bl	8007cf0 <HAL_Delay>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	0000      	movs	r0, r0
 8002964:	0000      	movs	r0, r0
	...

08002968 <Rain_Measure_Value>:
    }
}


//revoie les mesures de pluie
void Rain_Measure_Value(){
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0

	if(flagRain){
 800296e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a28 <Rain_Measure_Value+0xc0>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d050      	beq.n	8002a18 <Rain_Measure_Value+0xb0>
		  printf("raincount: %lu \r\n", rainCount);
 8002976:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <Rain_Measure_Value+0xc4>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	482c      	ldr	r0, [pc, #176]	@ (8002a30 <Rain_Measure_Value+0xc8>)
 800297e:	f011 fa6b 	bl	8013e58 <iprintf>
		  rainfallR = rainCount * VOLUME_PAR_IMPULSION;
 8002982:	4b2a      	ldr	r3, [pc, #168]	@ (8002a2c <Rain_Measure_Value+0xc4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fddc 	bl	8000544 <__aeabi_ui2d>
 800298c:	a324      	add	r3, pc, #144	@ (adr r3, 8002a20 <Rain_Measure_Value+0xb8>)
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	f7fd fe51 	bl	8000638 <__aeabi_dmul>
 8002996:	4602      	mov	r2, r0
 8002998:	460b      	mov	r3, r1
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	f7fe f923 	bl	8000be8 <__aeabi_d2f>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4a23      	ldr	r2, [pc, #140]	@ (8002a34 <Rain_Measure_Value+0xcc>)
 80029a6:	6013      	str	r3, [r2, #0]

		  printf("Volume d'eau par seconde: %.2f mm\r\n", rainfallR);
 80029a8:	4b22      	ldr	r3, [pc, #136]	@ (8002a34 <Rain_Measure_Value+0xcc>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fdeb 	bl	8000588 <__aeabi_f2d>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4820      	ldr	r0, [pc, #128]	@ (8002a38 <Rain_Measure_Value+0xd0>)
 80029b8:	f011 fa4e 	bl	8013e58 <iprintf>
		  // Afficher la valeur sur l'écran LCD à une position donnée (par exemple, ligne 50, colonne 50)
		  timeElapsed = 0;
 80029bc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <Rain_Measure_Value+0xd4>)
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
		  flagRain=0;
 80029c2:	4b19      	ldr	r3, [pc, #100]	@ (8002a28 <Rain_Measure_Value+0xc0>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	701a      	strb	r2, [r3, #0]
		  char rainfallStr[20];
		  sprintf(rainfallStr, "%.2f mm", rainfallR);
 80029c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <Rain_Measure_Value+0xcc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fddb 	bl	8000588 <__aeabi_f2d>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	1d38      	adds	r0, r7, #4
 80029d8:	4919      	ldr	r1, [pc, #100]	@ (8002a40 <Rain_Measure_Value+0xd8>)
 80029da:	f011 fae1 	bl	8013fa0 <siprintf>
		  BSP_LCD_SetFont(&Font16); // Police de caractères pour l'affichage
 80029de:	4819      	ldr	r0, [pc, #100]	@ (8002a44 <Rain_Measure_Value+0xdc>)
 80029e0:	f003 fca4 	bl	800632c <BSP_LCD_SetFont>
	      BSP_LCD_DisplayStringAt(startXR + 2 * (squareSizeR + spacingR) + 20, startYR + 70, (uint8_t*)rainfallStr, LEFT_MODE);
 80029e4:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <Rain_Measure_Value+0xe0>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	4b18      	ldr	r3, [pc, #96]	@ (8002a4c <Rain_Measure_Value+0xe4>)
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	4b15      	ldr	r3, [pc, #84]	@ (8002a50 <Rain_Measure_Value+0xe8>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4413      	add	r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3314      	adds	r3, #20
 8002a04:	b298      	uxth	r0, r3
 8002a06:	4b13      	ldr	r3, [pc, #76]	@ (8002a54 <Rain_Measure_Value+0xec>)
 8002a08:	881b      	ldrh	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3346      	adds	r3, #70	@ 0x46
 8002a0e:	b299      	uxth	r1, r3
 8002a10:	1d3a      	adds	r2, r7, #4
 8002a12:	2303      	movs	r3, #3
 8002a14:	f003 fd10 	bl	8006438 <BSP_LCD_DisplayStringAt>
	}



}
 8002a18:	bf00      	nop
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	89a02752 	.word	0x89a02752
 8002a24:	3fd1e1b0 	.word	0x3fd1e1b0
 8002a28:	20005a01 	.word	0x20005a01
 8002a2c:	200059fc 	.word	0x200059fc
 8002a30:	08016478 	.word	0x08016478
 8002a34:	20005a04 	.word	0x20005a04
 8002a38:	0801648c 	.word	0x0801648c
 8002a3c:	20005a00 	.word	0x20005a00
 8002a40:	080164b0 	.word	0x080164b0
 8002a44:	20004f0c 	.word	0x20004f0c
 8002a48:	20004e76 	.word	0x20004e76
 8002a4c:	20004e78 	.word	0x20004e78
 8002a50:	20004e7a 	.word	0x20004e7a
 8002a54:	20004e7c 	.word	0x20004e7c

08002a58 <HAL_GPIO_EXTI_Callback>:

//routine d'interruption pour un arret à durée paramétrable

//routine d'interruption pour comptage (PIN PA15)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	4603      	mov	r3, r0
 8002a60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin == GPIO_PIN_15){
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a68:	d107      	bne.n	8002a7a <HAL_GPIO_EXTI_Callback+0x22>
	  rainCount++;
 8002a6a:	4b07      	ldr	r3, [pc, #28]	@ (8002a88 <HAL_GPIO_EXTI_Callback+0x30>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	4a05      	ldr	r2, [pc, #20]	@ (8002a88 <HAL_GPIO_EXTI_Callback+0x30>)
 8002a72:	6013      	str	r3, [r2, #0]
	  flagRain=1;
 8002a74:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <HAL_GPIO_EXTI_Callback+0x34>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	701a      	strb	r2, [r3, #0]
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	200059fc 	.word	0x200059fc
 8002a8c:	20005a01 	.word	0x20005a01

08002a90 <init_sd_logging>:
uint8_t sd_logging_enabled = 0;
extern float humidity_perc;
extern float temperature_degC;

// Initialisation du système d'enregistrement
FRESULT init_sd_logging(void) {
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8002a96:	af00      	add	r7, sp, #0
    FRESULT res;
    uint32_t byteswritten;
    FIL SDFile;
    char header[] = "Date,Time,Value\n";
 8002a98:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002a9c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002aa0:	4a52      	ldr	r2, [pc, #328]	@ (8002bec <init_sd_logging+0x15c>)
 8002aa2:	461c      	mov	r4, r3
 8002aa4:	4615      	mov	r5, r2
 8002aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002aa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aaa:	682b      	ldr	r3, [r5, #0]
 8002aac:	7023      	strb	r3, [r4, #0]

    // Monter le système de fichiers
    res = f_mount(&fs, "", 1);
 8002aae:	2201      	movs	r2, #1
 8002ab0:	494f      	ldr	r1, [pc, #316]	@ (8002bf0 <init_sd_logging+0x160>)
 8002ab2:	4850      	ldr	r0, [pc, #320]	@ (8002bf4 <init_sd_logging+0x164>)
 8002ab4:	f00f fe36 	bl	8012724 <f_mount>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if (res != FR_OK) {
 8002abe:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d008      	beq.n	8002ad8 <init_sd_logging+0x48>
        printf("Erreur montage SD: %d\r\n", res);
 8002ac6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002aca:	4619      	mov	r1, r3
 8002acc:	484a      	ldr	r0, [pc, #296]	@ (8002bf8 <init_sd_logging+0x168>)
 8002ace:	f011 f9c3 	bl	8013e58 <iprintf>
        return res;
 8002ad2:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002ad6:	e083      	b.n	8002be0 <init_sd_logging+0x150>
    }

    // Créer le fichier température avec en-tête
    res = f_open(&SDFile, "TEMP.CSV", FA_CREATE_ALWAYS | FA_WRITE);
 8002ad8:	f107 0318 	add.w	r3, r7, #24
 8002adc:	220a      	movs	r2, #10
 8002ade:	4947      	ldr	r1, [pc, #284]	@ (8002bfc <init_sd_logging+0x16c>)
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f00f fe65 	bl	80127b0 <f_open>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if(res == FR_OK) {
 8002aec:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d135      	bne.n	8002b60 <init_sd_logging+0xd0>
        res = f_write(&SDFile, header, strlen(header), (void *)&byteswritten);
 8002af4:	1d3b      	adds	r3, r7, #4
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fbda 	bl	80002b0 <strlen>
 8002afc:	4602      	mov	r2, r0
 8002afe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002b02:	1d39      	adds	r1, r7, #4
 8002b04:	f107 0018 	add.w	r0, r7, #24
 8002b08:	f010 f80c 	bl	8012b24 <f_write>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
        if((byteswritten == 0) || (res != FR_OK)) {
 8002b12:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <init_sd_logging+0x92>
 8002b1a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <init_sd_logging+0xa8>
            printf("Erreur écriture en-tête température\n");
 8002b22:	4837      	ldr	r0, [pc, #220]	@ (8002c00 <init_sd_logging+0x170>)
 8002b24:	f011 fa00 	bl	8013f28 <puts>
            f_close(&SDFile);
 8002b28:	f107 0318 	add.w	r3, r7, #24
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f010 f9ec 	bl	8012f0a <f_close>
            return res;
 8002b32:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002b36:	e053      	b.n	8002be0 <init_sd_logging+0x150>
        }
        f_close(&SDFile);
 8002b38:	f107 0318 	add.w	r3, r7, #24
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f010 f9e4 	bl	8012f0a <f_close>
        printf("Erreur création fichier température: %d\n", res);
        return res;
    }

    // Créer le fichier humidité avec en-tête
    res = f_open(&SDFile, "HUM.CSV", FA_CREATE_ALWAYS | FA_WRITE);
 8002b42:	f107 0318 	add.w	r3, r7, #24
 8002b46:	220a      	movs	r2, #10
 8002b48:	492e      	ldr	r1, [pc, #184]	@ (8002c04 <init_sd_logging+0x174>)
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f00f fe30 	bl	80127b0 <f_open>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
    if(res == FR_OK) {
 8002b56:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d138      	bne.n	8002bd0 <init_sd_logging+0x140>
 8002b5e:	e008      	b.n	8002b72 <init_sd_logging+0xe2>
        printf("Erreur création fichier température: %d\n", res);
 8002b60:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002b64:	4619      	mov	r1, r3
 8002b66:	4828      	ldr	r0, [pc, #160]	@ (8002c08 <init_sd_logging+0x178>)
 8002b68:	f011 f976 	bl	8013e58 <iprintf>
        return res;
 8002b6c:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002b70:	e036      	b.n	8002be0 <init_sd_logging+0x150>
        res = f_write(&SDFile, header, strlen(header), (void *)&byteswritten);
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fb9b 	bl	80002b0 <strlen>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002b80:	1d39      	adds	r1, r7, #4
 8002b82:	f107 0018 	add.w	r0, r7, #24
 8002b86:	f00f ffcd 	bl	8012b24 <f_write>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
        if((byteswritten == 0) || (res != FR_OK)) {
 8002b90:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d003      	beq.n	8002ba0 <init_sd_logging+0x110>
 8002b98:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <init_sd_logging+0x126>
            printf("Erreur écriture en-tête humidité\n");
 8002ba0:	481a      	ldr	r0, [pc, #104]	@ (8002c0c <init_sd_logging+0x17c>)
 8002ba2:	f011 f9c1 	bl	8013f28 <puts>
            f_close(&SDFile);
 8002ba6:	f107 0318 	add.w	r3, r7, #24
 8002baa:	4618      	mov	r0, r3
 8002bac:	f010 f9ad 	bl	8012f0a <f_close>
            return res;
 8002bb0:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002bb4:	e014      	b.n	8002be0 <init_sd_logging+0x150>
        }
        f_close(&SDFile);
 8002bb6:	f107 0318 	add.w	r3, r7, #24
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f010 f9a5 	bl	8012f0a <f_close>
    } else {
        printf("Erreur création fichier humidité: %d\n", res);
        return res;
    }

    printf("Système d'enregistrement initialisé avec succès\n");
 8002bc0:	4813      	ldr	r0, [pc, #76]	@ (8002c10 <init_sd_logging+0x180>)
 8002bc2:	f011 f9b1 	bl	8013f28 <puts>
    sd_logging_enabled = 1;
 8002bc6:	4b13      	ldr	r3, [pc, #76]	@ (8002c14 <init_sd_logging+0x184>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
    return FR_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e007      	b.n	8002be0 <init_sd_logging+0x150>
        printf("Erreur création fichier humidité: %d\n", res);
 8002bd0:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4810      	ldr	r0, [pc, #64]	@ (8002c18 <init_sd_logging+0x188>)
 8002bd8:	f011 f93e 	bl	8013e58 <iprintf>
        return res;
 8002bdc:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bdb0      	pop	{r4, r5, r7, pc}
 8002bea:	bf00      	nop
 8002bec:	080165bc 	.word	0x080165bc
 8002bf0:	080164b8 	.word	0x080164b8
 8002bf4:	20005a08 	.word	0x20005a08
 8002bf8:	080164bc 	.word	0x080164bc
 8002bfc:	080164d4 	.word	0x080164d4
 8002c00:	080164e0 	.word	0x080164e0
 8002c04:	08016534 	.word	0x08016534
 8002c08:	08016508 	.word	0x08016508
 8002c0c:	0801653c 	.word	0x0801653c
 8002c10:	08016588 	.word	0x08016588
 8002c14:	20005c38 	.word	0x20005c38
 8002c18:	08016560 	.word	0x08016560

08002c1c <log_weather_data>:

// Fonction d'enregistrement appelée par l'interruption du timer
void log_weather_data(void) {
 8002c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c20:	f5ad 7d37 	sub.w	sp, sp, #732	@ 0x2dc
 8002c24:	af06      	add	r7, sp, #24
    uint32_t byteswritten;
    char buffer[100];
    FIL SDFile;

    // Vérifier si le système est initialisé
    if(!sd_logging_enabled) {
 8002c26:	4b89      	ldr	r3, [pc, #548]	@ (8002e4c <log_weather_data+0x230>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <log_weather_data+0x1a>
        printf("Logging non activé\n");
 8002c2e:	4888      	ldr	r0, [pc, #544]	@ (8002e50 <log_weather_data+0x234>)
 8002c30:	f011 f97a 	bl	8013f28 <puts>
 8002c34:	e104      	b.n	8002e40 <log_weather_data+0x224>
    }

    // Récupérer l'heure et la date
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002c36:	f107 0310 	add.w	r3, r7, #16
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4885      	ldr	r0, [pc, #532]	@ (8002e54 <log_weather_data+0x238>)
 8002c40:	f009 f9c2 	bl	800bfc8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002c44:	f107 030c 	add.w	r3, r7, #12
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4881      	ldr	r0, [pc, #516]	@ (8002e54 <log_weather_data+0x238>)
 8002c4e:	f009 fa9d 	bl	800c18c <HAL_RTC_GetDate>

    // Essayer d'ouvrir/créer le fichier température
    res = f_open(&SDFile, "TEMP.CSV", FA_OPEN_ALWAYS | FA_WRITE);
 8002c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c56:	2212      	movs	r2, #18
 8002c58:	497f      	ldr	r1, [pc, #508]	@ (8002e58 <log_weather_data+0x23c>)
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f00f fda8 	bl	80127b0 <f_open>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf
    if(res == FR_OK) {
 8002c66:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d165      	bne.n	8002d3a <log_weather_data+0x11e>
        // Se positionner à la fin du fichier
        f_lseek(&SDFile, f_size(&SDFile));
 8002c6e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002c72:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f010 f96d 	bl	8012f5e <f_lseek>

        // Préparer la ligne de données
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
                date.Year, date.Month, date.Date,
 8002c84:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002c88:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002c8c:	78db      	ldrb	r3, [r3, #3]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002c8e:	4698      	mov	r8, r3
                date.Year, date.Month, date.Date,
 8002c90:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002c94:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002c98:	785b      	ldrb	r3, [r3, #1]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002c9a:	4699      	mov	r9, r3
                date.Year, date.Month, date.Date,
 8002c9c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002ca0:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002ca4:	789b      	ldrb	r3, [r3, #2]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002ca6:	461c      	mov	r4, r3
                time.Hours, time.Minutes, time.Seconds,
 8002ca8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002cac:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002cb0:	781b      	ldrb	r3, [r3, #0]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002cb2:	461d      	mov	r5, r3
                time.Hours, time.Minutes, time.Seconds,
 8002cb4:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002cb8:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002cbc:	785b      	ldrb	r3, [r3, #1]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002cbe:	461e      	mov	r6, r3
                time.Hours, time.Minutes, time.Seconds,
 8002cc0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002cc4:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002cc8:	789b      	ldrb	r3, [r3, #2]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	4b63      	ldr	r3, [pc, #396]	@ (8002e5c <log_weather_data+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc59 	bl	8000588 <__aeabi_f2d>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	f507 7015 	add.w	r0, r7, #596	@ 0x254
 8002cde:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	9303      	str	r3, [sp, #12]
 8002ce6:	9602      	str	r6, [sp, #8]
 8002ce8:	9501      	str	r5, [sp, #4]
 8002cea:	9400      	str	r4, [sp, #0]
 8002cec:	464b      	mov	r3, r9
 8002cee:	4642      	mov	r2, r8
 8002cf0:	495b      	ldr	r1, [pc, #364]	@ (8002e60 <log_weather_data+0x244>)
 8002cf2:	f011 f955 	bl	8013fa0 <siprintf>
                temperature_degC);

        // Écrire les données
        res = f_write(&SDFile, buffer, strlen(buffer), (void *)&byteswritten);
 8002cf6:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fd fad8 	bl	80002b0 <strlen>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002d06:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 8002d0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002d0e:	f00f ff09 	bl	8012b24 <f_write>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf

        if((byteswritten == 0) || (res != FR_OK)) {
 8002d18:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <log_weather_data+0x10c>
 8002d20:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <log_weather_data+0x112>
            printf("Erreur d'écriture température\n");
 8002d28:	484e      	ldr	r0, [pc, #312]	@ (8002e64 <log_weather_data+0x248>)
 8002d2a:	f011 f8fd 	bl	8013f28 <puts>
        }

        // Fermer le fichier
        f_close(&SDFile);
 8002d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d32:	4618      	mov	r0, r3
 8002d34:	f010 f8e9 	bl	8012f0a <f_close>
 8002d38:	e005      	b.n	8002d46 <log_weather_data+0x12a>
    } else {
        printf("Erreur ouverture fichier température: %d\n", res);
 8002d3a:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4849      	ldr	r0, [pc, #292]	@ (8002e68 <log_weather_data+0x24c>)
 8002d42:	f011 f889 	bl	8013e58 <iprintf>
    }

    // Même chose pour l'humidité
    res = f_open(&SDFile, "HUM.CSV", FA_OPEN_ALWAYS | FA_WRITE);
 8002d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d4a:	2212      	movs	r2, #18
 8002d4c:	4947      	ldr	r1, [pc, #284]	@ (8002e6c <log_weather_data+0x250>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f00f fd2e 	bl	80127b0 <f_open>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf
    if(res == FR_OK) {
 8002d5a:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d165      	bne.n	8002e2e <log_weather_data+0x212>
        f_lseek(&SDFile, f_size(&SDFile));
 8002d62:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002d66:	f5a3 7327 	sub.w	r3, r3, #668	@ 0x29c
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f010 f8f3 	bl	8012f5e <f_lseek>

        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
                date.Year, date.Month, date.Date,
 8002d78:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002d7c:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002d80:	78db      	ldrb	r3, [r3, #3]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002d82:	4698      	mov	r8, r3
                date.Year, date.Month, date.Date,
 8002d84:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002d88:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002d8c:	785b      	ldrb	r3, [r3, #1]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002d8e:	4699      	mov	r9, r3
                date.Year, date.Month, date.Date,
 8002d90:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002d94:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002d98:	789b      	ldrb	r3, [r3, #2]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002d9a:	461c      	mov	r4, r3
                time.Hours, time.Minutes, time.Seconds,
 8002d9c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002da0:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002da4:	781b      	ldrb	r3, [r3, #0]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002da6:	461d      	mov	r5, r3
                time.Hours, time.Minutes, time.Seconds,
 8002da8:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002dac:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002db0:	785b      	ldrb	r3, [r3, #1]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002db2:	461e      	mov	r6, r3
                time.Hours, time.Minutes, time.Seconds,
 8002db4:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8002db8:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002dbc:	789b      	ldrb	r3, [r3, #2]
        sprintf(buffer, "20%02d-%02d-%02d,%02d:%02d:%02d,%.2f\n",
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e70 <log_weather_data+0x254>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fbdf 	bl	8000588 <__aeabi_f2d>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	f507 7015 	add.w	r0, r7, #596	@ 0x254
 8002dd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	9303      	str	r3, [sp, #12]
 8002dda:	9602      	str	r6, [sp, #8]
 8002ddc:	9501      	str	r5, [sp, #4]
 8002dde:	9400      	str	r4, [sp, #0]
 8002de0:	464b      	mov	r3, r9
 8002de2:	4642      	mov	r2, r8
 8002de4:	491e      	ldr	r1, [pc, #120]	@ (8002e60 <log_weather_data+0x244>)
 8002de6:	f011 f8db 	bl	8013fa0 <siprintf>
                humidity_perc);

        res = f_write(&SDFile, buffer, strlen(buffer), (void *)&byteswritten);
 8002dea:	f507 7315 	add.w	r3, r7, #596	@ 0x254
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fa5e 	bl	80002b0 <strlen>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002dfa:	f507 7115 	add.w	r1, r7, #596	@ 0x254
 8002dfe:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002e02:	f00f fe8f 	bl	8012b24 <f_write>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f887 32bf 	strb.w	r3, [r7, #703]	@ 0x2bf

        if((byteswritten == 0) || (res != FR_OK)) {
 8002e0c:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <log_weather_data+0x200>
 8002e14:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <log_weather_data+0x206>
            printf("Erreur d'écriture humidité\n");
 8002e1c:	4815      	ldr	r0, [pc, #84]	@ (8002e74 <log_weather_data+0x258>)
 8002e1e:	f011 f883 	bl	8013f28 <puts>
        }

        f_close(&SDFile);
 8002e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e26:	4618      	mov	r0, r3
 8002e28:	f010 f86f 	bl	8012f0a <f_close>
 8002e2c:	e005      	b.n	8002e3a <log_weather_data+0x21e>
    } else {
        printf("Erreur ouverture fichier humidité: %d\n", res);
 8002e2e:	f897 32bf 	ldrb.w	r3, [r7, #703]	@ 0x2bf
 8002e32:	4619      	mov	r1, r3
 8002e34:	4810      	ldr	r0, [pc, #64]	@ (8002e78 <log_weather_data+0x25c>)
 8002e36:	f011 f80f 	bl	8013e58 <iprintf>
    }

    printf("Enregistrement effectué\n");
 8002e3a:	4810      	ldr	r0, [pc, #64]	@ (8002e7c <log_weather_data+0x260>)
 8002e3c:	f011 f874 	bl	8013f28 <puts>
}
 8002e40:	f507 7731 	add.w	r7, r7, #708	@ 0x2c4
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20005c38 	.word	0x20005c38
 8002e50:	080165d0 	.word	0x080165d0
 8002e54:	20005ec8 	.word	0x20005ec8
 8002e58:	080164d4 	.word	0x080164d4
 8002e5c:	200051d0 	.word	0x200051d0
 8002e60:	080165e4 	.word	0x080165e4
 8002e64:	0801660c 	.word	0x0801660c
 8002e68:	0801662c 	.word	0x0801662c
 8002e6c:	08016534 	.word	0x08016534
 8002e70:	200051cc 	.word	0x200051cc
 8002e74:	08016658 	.word	0x08016658
 8002e78:	08016678 	.word	0x08016678
 8002e7c:	080166a0 	.word	0x080166a0

08002e80 <Wind_Dir_Value>:
float voltage;
uint32_t adcValue = 0;
float R_sensor;

//retourne la direction du vent
void Wind_Dir_Value() {
 8002e80:	b5b0      	push	{r4, r5, r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8002e86:	4876      	ldr	r0, [pc, #472]	@ (8003060 <Wind_Dir_Value+0x1e0>)
 8002e88:	f004 ff9a 	bl	8007dc0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e90:	4873      	ldr	r0, [pc, #460]	@ (8003060 <Wind_Dir_Value+0x1e0>)
 8002e92:	f005 f897 	bl	8007fc4 <HAL_ADC_PollForConversion>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d126      	bne.n	8002eea <Wind_Dir_Value+0x6a>
        adcValue = HAL_ADC_GetValue(&hadc1);
 8002e9c:	4870      	ldr	r0, [pc, #448]	@ (8003060 <Wind_Dir_Value+0x1e0>)
 8002e9e:	f005 f91c 	bl	80080da <HAL_ADC_GetValue>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4a6f      	ldr	r2, [pc, #444]	@ (8003064 <Wind_Dir_Value+0x1e4>)
 8002ea6:	6013      	str	r3, [r2, #0]
        voltage = ((float)adcValue / 4095.0) * Vref;
 8002ea8:	4b6e      	ldr	r3, [pc, #440]	@ (8003064 <Wind_Dir_Value+0x1e4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb4:	ee17 0a90 	vmov	r0, s15
 8002eb8:	f7fd fb66 	bl	8000588 <__aeabi_f2d>
 8002ebc:	a364      	add	r3, pc, #400	@ (adr r3, 8003050 <Wind_Dir_Value+0x1d0>)
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	f7fd fce3 	bl	800088c <__aeabi_ddiv>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	a362      	add	r3, pc, #392	@ (adr r3, 8003058 <Wind_Dir_Value+0x1d8>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd fbb0 	bl	8000638 <__aeabi_dmul>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	f7fd fe82 	bl	8000be8 <__aeabi_d2f>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	4a60      	ldr	r2, [pc, #384]	@ (8003068 <Wind_Dir_Value+0x1e8>)
 8002ee8:	6013      	str	r3, [r2, #0]
    }
    HAL_ADC_Stop(&hadc1);
 8002eea:	485d      	ldr	r0, [pc, #372]	@ (8003060 <Wind_Dir_Value+0x1e0>)
 8002eec:	f005 f836 	bl	8007f5c <HAL_ADC_Stop>

    printf("ADC Value: %lu, Voltage: %.2f V\r\n", adcValue, voltage);
 8002ef0:	4b5c      	ldr	r3, [pc, #368]	@ (8003064 <Wind_Dir_Value+0x1e4>)
 8002ef2:	681c      	ldr	r4, [r3, #0]
 8002ef4:	4b5c      	ldr	r3, [pc, #368]	@ (8003068 <Wind_Dir_Value+0x1e8>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fb45 	bl	8000588 <__aeabi_f2d>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4621      	mov	r1, r4
 8002f04:	4859      	ldr	r0, [pc, #356]	@ (800306c <Wind_Dir_Value+0x1ec>)
 8002f06:	f010 ffa7 	bl	8013e58 <iprintf>

    if (voltage > 0) {
 8002f0a:	4b57      	ldr	r3, [pc, #348]	@ (8003068 <Wind_Dir_Value+0x1e8>)
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f18:	f340 8091 	ble.w	800303e <Wind_Dir_Value+0x1be>
        R_sensor = (externalResistor * (Vref / voltage)) - externalResistor;
 8002f1c:	4b54      	ldr	r3, [pc, #336]	@ (8003070 <Wind_Dir_Value+0x1f0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fb31 	bl	8000588 <__aeabi_f2d>
 8002f26:	4604      	mov	r4, r0
 8002f28:	460d      	mov	r5, r1
 8002f2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003068 <Wind_Dir_Value+0x1e8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fd fb2a 	bl	8000588 <__aeabi_f2d>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	a147      	add	r1, pc, #284	@ (adr r1, 8003058 <Wind_Dir_Value+0x1d8>)
 8002f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f3e:	f7fd fca5 	bl	800088c <__aeabi_ddiv>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4620      	mov	r0, r4
 8002f48:	4629      	mov	r1, r5
 8002f4a:	f7fd fb75 	bl	8000638 <__aeabi_dmul>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4614      	mov	r4, r2
 8002f54:	461d      	mov	r5, r3
 8002f56:	4b46      	ldr	r3, [pc, #280]	@ (8003070 <Wind_Dir_Value+0x1f0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd fb14 	bl	8000588 <__aeabi_f2d>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4620      	mov	r0, r4
 8002f66:	4629      	mov	r1, r5
 8002f68:	f7fd f9ae 	bl	80002c8 <__aeabi_dsub>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f7fd fe38 	bl	8000be8 <__aeabi_d2f>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4a3e      	ldr	r2, [pc, #248]	@ (8003074 <Wind_Dir_Value+0x1f4>)
 8002f7c:	6013      	str	r3, [r2, #0]
        printf("Resistance: %.2f ohms\r\n", R_sensor);
 8002f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003074 <Wind_Dir_Value+0x1f4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fb00 	bl	8000588 <__aeabi_f2d>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	483a      	ldr	r0, [pc, #232]	@ (8003078 <Wind_Dir_Value+0x1f8>)
 8002f8e:	f010 ff63 	bl	8013e58 <iprintf>

        const char* direction = "Unknown";
 8002f92:	4b3a      	ldr	r3, [pc, #232]	@ (800307c <Wind_Dir_Value+0x1fc>)
 8002f94:	60fb      	str	r3, [r7, #12]
        float minDifference = 5000.0;  // Initialisation ajustée
 8002f96:	4b3a      	ldr	r3, [pc, #232]	@ (8003080 <Wind_Dir_Value+0x200>)
 8002f98:	60bb      	str	r3, [r7, #8]

        for (int i = 0; i < NUM_POSITIONS; i++) {
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	607b      	str	r3, [r7, #4]
 8002f9e:	e02e      	b.n	8002ffe <Wind_Dir_Value+0x17e>
            float difference = fabs(R_sensor - resistorValues[i]);
 8002fa0:	4b34      	ldr	r3, [pc, #208]	@ (8003074 <Wind_Dir_Value+0x1f4>)
 8002fa2:	ed93 7a00 	vldr	s14, [r3]
 8002fa6:	4a37      	ldr	r2, [pc, #220]	@ (8003084 <Wind_Dir_Value+0x204>)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	edd3 7a00 	vldr	s15, [r3]
 8002fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb6:	eef0 7ae7 	vabs.f32	s15, s15
 8002fba:	edc7 7a00 	vstr	s15, [r7]
            printf("Checking direction %s: Difference = %.2f ohms\r\n", directionStrings[i], difference);
 8002fbe:	4a32      	ldr	r2, [pc, #200]	@ (8003088 <Wind_Dir_Value+0x208>)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002fc6:	6838      	ldr	r0, [r7, #0]
 8002fc8:	f7fd fade 	bl	8000588 <__aeabi_f2d>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	482e      	ldr	r0, [pc, #184]	@ (800308c <Wind_Dir_Value+0x20c>)
 8002fd4:	f010 ff40 	bl	8013e58 <iprintf>
            if (difference < minDifference) {
 8002fd8:	ed97 7a00 	vldr	s14, [r7]
 8002fdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe8:	d506      	bpl.n	8002ff8 <Wind_Dir_Value+0x178>
                minDifference = difference;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	60bb      	str	r3, [r7, #8]
                direction = directionStrings[i];
 8002fee:	4a26      	ldr	r2, [pc, #152]	@ (8003088 <Wind_Dir_Value+0x208>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff6:	60fb      	str	r3, [r7, #12]
        for (int i = 0; i < NUM_POSITIONS; i++) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	607b      	str	r3, [r7, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b0f      	cmp	r3, #15
 8003002:	ddcd      	ble.n	8002fa0 <Wind_Dir_Value+0x120>
            }
        }
        BSP_LCD_DisplayStringAt(startXD + squareSizeD + spacingD + 20, startYD + 70, (uint8_t*)direction, LEFT_MODE);
 8003004:	4b22      	ldr	r3, [pc, #136]	@ (8003090 <Wind_Dir_Value+0x210>)
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29a      	uxth	r2, r3
 800300a:	4b22      	ldr	r3, [pc, #136]	@ (8003094 <Wind_Dir_Value+0x214>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b29b      	uxth	r3, r3
 8003010:	4413      	add	r3, r2
 8003012:	b29a      	uxth	r2, r3
 8003014:	4b20      	ldr	r3, [pc, #128]	@ (8003098 <Wind_Dir_Value+0x218>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	4413      	add	r3, r2
 800301c:	b29b      	uxth	r3, r3
 800301e:	3314      	adds	r3, #20
 8003020:	b298      	uxth	r0, r3
 8003022:	4b1e      	ldr	r3, [pc, #120]	@ (800309c <Wind_Dir_Value+0x21c>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	3346      	adds	r3, #70	@ 0x46
 800302a:	b299      	uxth	r1, r3
 800302c:	2303      	movs	r3, #3
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	f003 fa02 	bl	8006438 <BSP_LCD_DisplayStringAt>
        printf("Detected Wind Direction: %s\r\n", direction);
 8003034:	68f9      	ldr	r1, [r7, #12]
 8003036:	481a      	ldr	r0, [pc, #104]	@ (80030a0 <Wind_Dir_Value+0x220>)
 8003038:	f010 ff0e 	bl	8013e58 <iprintf>
    } else {
        printf("Voltage is too low. Check sensor connections.\r\n");
    }

}
 800303c:	e002      	b.n	8003044 <Wind_Dir_Value+0x1c4>
        printf("Voltage is too low. Check sensor connections.\r\n");
 800303e:	4819      	ldr	r0, [pc, #100]	@ (80030a4 <Wind_Dir_Value+0x224>)
 8003040:	f010 ff72 	bl	8013f28 <puts>
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bdb0      	pop	{r4, r5, r7, pc}
 800304c:	f3af 8000 	nop.w
 8003050:	00000000 	.word	0x00000000
 8003054:	40affe00 	.word	0x40affe00
 8003058:	66666666 	.word	0x66666666
 800305c:	400a6666 	.word	0x400a6666
 8003060:	20005c54 	.word	0x20005c54
 8003064:	20005c40 	.word	0x20005c40
 8003068:	20005c3c 	.word	0x20005c3c
 800306c:	080166fc 	.word	0x080166fc
 8003070:	20004ec8 	.word	0x20004ec8
 8003074:	20005c44 	.word	0x20005c44
 8003078:	08016720 	.word	0x08016720
 800307c:	08016738 	.word	0x08016738
 8003080:	459c4000 	.word	0x459c4000
 8003084:	080168b0 	.word	0x080168b0
 8003088:	20004e88 	.word	0x20004e88
 800308c:	08016740 	.word	0x08016740
 8003090:	20004e82 	.word	0x20004e82
 8003094:	20004e7e 	.word	0x20004e7e
 8003098:	20004e80 	.word	0x20004e80
 800309c:	20004e84 	.word	0x20004e84
 80030a0:	08016770 	.word	0x08016770
 80030a4:	08016790 	.word	0x08016790

080030a8 <Wind_Speed_Value>:
	HAL_TIM_Base_Start_IT(&htim6);
}

//renvoi la valeur de la vitesse du vent moyenne sur 1 minute (à appeler dans la boucle while)
void Wind_Speed_Value()
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0

	if (minute_flag) {
 80030ae:	4b22      	ldr	r3, [pc, #136]	@ (8003138 <Wind_Speed_Value+0x90>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d034      	beq.n	8003122 <Wind_Speed_Value+0x7a>
			  captureDone = 0;
 80030b8:	4b20      	ldr	r3, [pc, #128]	@ (800313c <Wind_Speed_Value+0x94>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
		      // Si 1 minute est écoulée, afficher les impulsions
		      printf("Impulsions sur 1 minute : %lu\r\n", pulse_count);
 80030be:	4b20      	ldr	r3, [pc, #128]	@ (8003140 <Wind_Speed_Value+0x98>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4619      	mov	r1, r3
 80030c4:	481f      	ldr	r0, [pc, #124]	@ (8003144 <Wind_Speed_Value+0x9c>)
 80030c6:	f010 fec7 	bl	8013e58 <iprintf>
		      float vitesse_Vent = pulse_count*VITESSE_PAR_IMPULSION_PAR_SECONDE/60;
 80030ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <Wind_Speed_Value+0x98>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd fa38 	bl	8000544 <__aeabi_ui2d>
 80030d4:	a316      	add	r3, pc, #88	@ (adr r3, 8003130 <Wind_Speed_Value+0x88>)
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	f7fd faad 	bl	8000638 <__aeabi_dmul>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	4b17      	ldr	r3, [pc, #92]	@ (8003148 <Wind_Speed_Value+0xa0>)
 80030ec:	f7fd fbce 	bl	800088c <__aeabi_ddiv>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	f7fd fd76 	bl	8000be8 <__aeabi_d2f>
 80030fc:	4603      	mov	r3, r0
 80030fe:	607b      	str	r3, [r7, #4]
		      printf("vitesse du vent: %.2f Km/h \r\n ", vitesse_Vent);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7fd fa41 	bl	8000588 <__aeabi_f2d>
 8003106:	4602      	mov	r2, r0
 8003108:	460b      	mov	r3, r1
 800310a:	4810      	ldr	r0, [pc, #64]	@ (800314c <Wind_Speed_Value+0xa4>)
 800310c:	f010 fea4 	bl	8013e58 <iprintf>
		      // Réinitialiser le computeur d'impulsions pour la prochaine minute
		      pulse_count = 0;
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <Wind_Speed_Value+0x98>)
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]

		      // Réinitialiser le flag pour le prochain intervalle de 1 minute
		      minute_flag = 0;
 8003116:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <Wind_Speed_Value+0x90>)
 8003118:	2200      	movs	r2, #0
 800311a:	701a      	strb	r2, [r3, #0]
		      printf("Minute flag reset!\r\n"); // Vérifier que le flag est réinitialisé
 800311c:	480c      	ldr	r0, [pc, #48]	@ (8003150 <Wind_Speed_Value+0xa8>)
 800311e:	f010 ff03 	bl	8013f28 <puts>
			  }
		  //}
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	f3af 8000 	nop.w
 8003130:	33333333 	.word	0x33333333
 8003134:	40033333 	.word	0x40033333
 8003138:	20005c50 	.word	0x20005c50
 800313c:	20005c48 	.word	0x20005c48
 8003140:	20005c4c 	.word	0x20005c4c
 8003144:	080167c0 	.word	0x080167c0
 8003148:	404e0000 	.word	0x404e0000
 800314c:	080167e0 	.word	0x080167e0
 8003150:	08016800 	.word	0x08016800

08003154 <HAL_TIM_IC_CaptureCallback>:


//routine de comptage par input capture (PIN PA8)
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM1) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <HAL_TIM_IC_CaptureCallback+0x30>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d108      	bne.n	8003178 <HAL_TIM_IC_CaptureCallback+0x24>
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	7f1b      	ldrb	r3, [r3, #28]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d104      	bne.n	8003178 <HAL_TIM_IC_CaptureCallback+0x24>
      //printf("bonjour");
        pulse_count++; // Incrémenter le compteur d'impulsions
 800316e:	4b06      	ldr	r3, [pc, #24]	@ (8003188 <HAL_TIM_IC_CaptureCallback+0x34>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3301      	adds	r3, #1
 8003174:	4a04      	ldr	r2, [pc, #16]	@ (8003188 <HAL_TIM_IC_CaptureCallback+0x34>)
 8003176:	6013      	str	r3, [r2, #0]
        //printf("Pulse captured: %lu\r\n", pulse_count); // Ajouter imprimé pour vérification

    }
  }
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40010000 	.word	0x40010000
 8003188:	20005c4c 	.word	0x20005c4c

0800318c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003192:	463b      	mov	r3, r7
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800319e:	4b21      	ldr	r3, [pc, #132]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031a0:	4a21      	ldr	r2, [pc, #132]	@ (8003228 <MX_ADC1_Init+0x9c>)
 80031a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80031a4:	4b1f      	ldr	r3, [pc, #124]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031ac:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80031b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80031b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031be:	4b19      	ldr	r3, [pc, #100]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031c6:	4b17      	ldr	r3, [pc, #92]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031cc:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031ce:	4a17      	ldr	r2, [pc, #92]	@ (800322c <MX_ADC1_Init+0xa0>)
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031d2:	4b14      	ldr	r3, [pc, #80]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80031d8:	4b12      	ldr	r3, [pc, #72]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031da:	2201      	movs	r2, #1
 80031dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80031de:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031ec:	480d      	ldr	r0, [pc, #52]	@ (8003224 <MX_ADC1_Init+0x98>)
 80031ee:	f004 fda3 	bl	8007d38 <HAL_ADC_Init>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80031f8:	f001 fca6 	bl	8004b48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80031fc:	2300      	movs	r3, #0
 80031fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003200:	2301      	movs	r3, #1
 8003202:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003208:	463b      	mov	r3, r7
 800320a:	4619      	mov	r1, r3
 800320c:	4805      	ldr	r0, [pc, #20]	@ (8003224 <MX_ADC1_Init+0x98>)
 800320e:	f004 ff71 	bl	80080f4 <HAL_ADC_ConfigChannel>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003218:	f001 fc96 	bl	8004b48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20005c54 	.word	0x20005c54
 8003228:	40012000 	.word	0x40012000
 800322c:	0f000001 	.word	0x0f000001

08003230 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	@ 0x28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a15      	ldr	r2, [pc, #84]	@ (80032a4 <HAL_ADC_MspInit+0x74>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d123      	bne.n	800329a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003252:	4b15      	ldr	r3, [pc, #84]	@ (80032a8 <HAL_ADC_MspInit+0x78>)
 8003254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003256:	4a14      	ldr	r2, [pc, #80]	@ (80032a8 <HAL_ADC_MspInit+0x78>)
 8003258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800325c:	6453      	str	r3, [r2, #68]	@ 0x44
 800325e:	4b12      	ldr	r3, [pc, #72]	@ (80032a8 <HAL_ADC_MspInit+0x78>)
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326a:	4b0f      	ldr	r3, [pc, #60]	@ (80032a8 <HAL_ADC_MspInit+0x78>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326e:	4a0e      	ldr	r2, [pc, #56]	@ (80032a8 <HAL_ADC_MspInit+0x78>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6313      	str	r3, [r2, #48]	@ 0x30
 8003276:	4b0c      	ldr	r3, [pc, #48]	@ (80032a8 <HAL_ADC_MspInit+0x78>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003282:	2301      	movs	r3, #1
 8003284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003286:	2303      	movs	r3, #3
 8003288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328e:	f107 0314 	add.w	r3, r7, #20
 8003292:	4619      	mov	r1, r3
 8003294:	4805      	ldr	r0, [pc, #20]	@ (80032ac <HAL_ADC_MspInit+0x7c>)
 8003296:	f006 f885 	bl	80093a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800329a:	bf00      	nop
 800329c:	3728      	adds	r7, #40	@ 0x28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40012000 	.word	0x40012000
 80032a8:	40023800 	.word	0x40023800
 80032ac:	40020000 	.word	0x40020000

080032b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80032b6:	4b10      	ldr	r3, [pc, #64]	@ (80032f8 <MX_DMA_Init+0x48>)
 80032b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ba:	4a0f      	ldr	r2, [pc, #60]	@ (80032f8 <MX_DMA_Init+0x48>)
 80032bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c2:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <MX_DMA_Init+0x48>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80032ce:	2200      	movs	r2, #0
 80032d0:	2100      	movs	r1, #0
 80032d2:	203b      	movs	r0, #59	@ 0x3b
 80032d4:	f005 fa39 	bl	800874a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80032d8:	203b      	movs	r0, #59	@ 0x3b
 80032da:	f005 fa52 	bl	8008782 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80032de:	2200      	movs	r2, #0
 80032e0:	2100      	movs	r1, #0
 80032e2:	2045      	movs	r0, #69	@ 0x45
 80032e4:	f005 fa31 	bl	800874a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80032e8:	2045      	movs	r0, #69	@ 0x45
 80032ea:	f005 fa4a 	bl	8008782 <HAL_NVIC_EnableIRQ>

}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800

080032fc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8003300:	4b15      	ldr	r3, [pc, #84]	@ (8003358 <MX_DMA2D_Init+0x5c>)
 8003302:	4a16      	ldr	r2, [pc, #88]	@ (800335c <MX_DMA2D_Init+0x60>)
 8003304:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8003306:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <MX_DMA2D_Init+0x5c>)
 8003308:	2200      	movs	r2, #0
 800330a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800330c:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <MX_DMA2D_Init+0x5c>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8003312:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <MX_DMA2D_Init+0x5c>)
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8003318:	4b0f      	ldr	r3, [pc, #60]	@ (8003358 <MX_DMA2D_Init+0x5c>)
 800331a:	2200      	movs	r2, #0
 800331c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800331e:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <MX_DMA2D_Init+0x5c>)
 8003320:	2200      	movs	r2, #0
 8003322:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003324:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <MX_DMA2D_Init+0x5c>)
 8003326:	2200      	movs	r2, #0
 8003328:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800332a:	4b0b      	ldr	r3, [pc, #44]	@ (8003358 <MX_DMA2D_Init+0x5c>)
 800332c:	2200      	movs	r2, #0
 800332e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8003330:	4809      	ldr	r0, [pc, #36]	@ (8003358 <MX_DMA2D_Init+0x5c>)
 8003332:	f005 fdab 	bl	8008e8c <HAL_DMA2D_Init>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800333c:	f001 fc04 	bl	8004b48 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8003340:	2101      	movs	r1, #1
 8003342:	4805      	ldr	r0, [pc, #20]	@ (8003358 <MX_DMA2D_Init+0x5c>)
 8003344:	f005 ff00 	bl	8009148 <HAL_DMA2D_ConfigLayer>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800334e:	f001 fbfb 	bl	8004b48 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	20005c9c 	.word	0x20005c9c
 800335c:	4002b000 	.word	0x4002b000

08003360 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0a      	ldr	r2, [pc, #40]	@ (8003398 <HAL_DMA2D_MspInit+0x38>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d10b      	bne.n	800338a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003372:	4b0a      	ldr	r3, [pc, #40]	@ (800339c <HAL_DMA2D_MspInit+0x3c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	4a09      	ldr	r2, [pc, #36]	@ (800339c <HAL_DMA2D_MspInit+0x3c>)
 8003378:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800337c:	6313      	str	r3, [r2, #48]	@ 0x30
 800337e:	4b07      	ldr	r3, [pc, #28]	@ (800339c <HAL_DMA2D_MspInit+0x3c>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800338a:	bf00      	nop
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	4002b000 	.word	0x4002b000
 800339c:	40023800 	.word	0x40023800

080033a0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80033a6:	1d3b      	adds	r3, r7, #4
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
 80033b4:	615a      	str	r2, [r3, #20]
 80033b6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80033b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003434 <MX_FMC_Init+0x94>)
 80033ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003438 <MX_FMC_Init+0x98>)
 80033bc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80033be:	4b1d      	ldr	r3, [pc, #116]	@ (8003434 <MX_FMC_Init+0x94>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80033c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003434 <MX_FMC_Init+0x94>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80033ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003434 <MX_FMC_Init+0x94>)
 80033cc:	2204      	movs	r2, #4
 80033ce:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80033d0:	4b18      	ldr	r3, [pc, #96]	@ (8003434 <MX_FMC_Init+0x94>)
 80033d2:	2210      	movs	r2, #16
 80033d4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80033d6:	4b17      	ldr	r3, [pc, #92]	@ (8003434 <MX_FMC_Init+0x94>)
 80033d8:	2240      	movs	r2, #64	@ 0x40
 80033da:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80033dc:	4b15      	ldr	r3, [pc, #84]	@ (8003434 <MX_FMC_Init+0x94>)
 80033de:	2280      	movs	r2, #128	@ 0x80
 80033e0:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80033e2:	4b14      	ldr	r3, [pc, #80]	@ (8003434 <MX_FMC_Init+0x94>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80033e8:	4b12      	ldr	r3, [pc, #72]	@ (8003434 <MX_FMC_Init+0x94>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80033ee:	4b11      	ldr	r3, [pc, #68]	@ (8003434 <MX_FMC_Init+0x94>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80033f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003434 <MX_FMC_Init+0x94>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80033fa:	2310      	movs	r3, #16
 80033fc:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80033fe:	2310      	movs	r3, #16
 8003400:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8003402:	2310      	movs	r3, #16
 8003404:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8003406:	2310      	movs	r3, #16
 8003408:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800340a:	2310      	movs	r3, #16
 800340c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 800340e:	2310      	movs	r3, #16
 8003410:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8003412:	2310      	movs	r3, #16
 8003414:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003416:	1d3b      	adds	r3, r7, #4
 8003418:	4619      	mov	r1, r3
 800341a:	4806      	ldr	r0, [pc, #24]	@ (8003434 <MX_FMC_Init+0x94>)
 800341c:	f00a fc76 	bl	800dd0c <HAL_SDRAM_Init>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8003426:	f001 fb8f 	bl	8004b48 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800342a:	bf00      	nop
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20005cdc 	.word	0x20005cdc
 8003438:	a0000140 	.word	0xa0000140

0800343c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003442:	1d3b      	adds	r3, r7, #4
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003450:	4b33      	ldr	r3, [pc, #204]	@ (8003520 <HAL_FMC_MspInit+0xe4>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d15e      	bne.n	8003516 <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8003458:	4b31      	ldr	r3, [pc, #196]	@ (8003520 <HAL_FMC_MspInit+0xe4>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800345e:	4b31      	ldr	r3, [pc, #196]	@ (8003524 <HAL_FMC_MspInit+0xe8>)
 8003460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003462:	4a30      	ldr	r2, [pc, #192]	@ (8003524 <HAL_FMC_MspInit+0xe8>)
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	6393      	str	r3, [r2, #56]	@ 0x38
 800346a:	4b2e      	ldr	r3, [pc, #184]	@ (8003524 <HAL_FMC_MspInit+0xe8>)
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8003476:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800347a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347c:	2302      	movs	r3, #2
 800347e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003484:	2303      	movs	r3, #3
 8003486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003488:	230c      	movs	r3, #12
 800348a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800348c:	1d3b      	adds	r3, r7, #4
 800348e:	4619      	mov	r1, r3
 8003490:	4825      	ldr	r0, [pc, #148]	@ (8003528 <HAL_FMC_MspInit+0xec>)
 8003492:	f005 ff87 	bl	80093a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8003496:	f248 1333 	movw	r3, #33075	@ 0x8133
 800349a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349c:	2302      	movs	r3, #2
 800349e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a4:	2303      	movs	r3, #3
 80034a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034a8:	230c      	movs	r3, #12
 80034aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034ac:	1d3b      	adds	r3, r7, #4
 80034ae:	4619      	mov	r1, r3
 80034b0:	481e      	ldr	r0, [pc, #120]	@ (800352c <HAL_FMC_MspInit+0xf0>)
 80034b2:	f005 ff77 	bl	80093a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80034b6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80034ba:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034bc:	2302      	movs	r3, #2
 80034be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c4:	2303      	movs	r3, #3
 80034c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034c8:	230c      	movs	r3, #12
 80034ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034cc:	1d3b      	adds	r3, r7, #4
 80034ce:	4619      	mov	r1, r3
 80034d0:	4817      	ldr	r0, [pc, #92]	@ (8003530 <HAL_FMC_MspInit+0xf4>)
 80034d2:	f005 ff67 	bl	80093a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80034d6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80034da:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034dc:	2302      	movs	r3, #2
 80034de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e4:	2303      	movs	r3, #3
 80034e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80034e8:	230c      	movs	r3, #12
 80034ea:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4810      	ldr	r0, [pc, #64]	@ (8003534 <HAL_FMC_MspInit+0xf8>)
 80034f2:	f005 ff57 	bl	80093a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 80034f6:	232c      	movs	r3, #44	@ 0x2c
 80034f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034fa:	2302      	movs	r3, #2
 80034fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003502:	2303      	movs	r3, #3
 8003504:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003506:	230c      	movs	r3, #12
 8003508:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	4619      	mov	r1, r3
 800350e:	480a      	ldr	r0, [pc, #40]	@ (8003538 <HAL_FMC_MspInit+0xfc>)
 8003510:	f005 ff48 	bl	80093a4 <HAL_GPIO_Init>
 8003514:	e000      	b.n	8003518 <HAL_FMC_MspInit+0xdc>
    return;
 8003516:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20005d10 	.word	0x20005d10
 8003524:	40023800 	.word	0x40023800
 8003528:	40021000 	.word	0x40021000
 800352c:	40021800 	.word	0x40021800
 8003530:	40020c00 	.word	0x40020c00
 8003534:	40021400 	.word	0x40021400
 8003538:	40021c00 	.word	0x40021c00

0800353c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003544:	f7ff ff7a 	bl	800343c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b090      	sub	sp, #64	@ 0x40
 8003554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003556:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003566:	4b9c      	ldr	r3, [pc, #624]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	4a9b      	ldr	r2, [pc, #620]	@ (80037d8 <MX_GPIO_Init+0x288>)
 800356c:	f043 0310 	orr.w	r3, r3, #16
 8003570:	6313      	str	r3, [r2, #48]	@ 0x30
 8003572:	4b99      	ldr	r3, [pc, #612]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800357c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800357e:	4b96      	ldr	r3, [pc, #600]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	4a95      	ldr	r2, [pc, #596]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003584:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003588:	6313      	str	r3, [r2, #48]	@ 0x30
 800358a:	4b93      	ldr	r3, [pc, #588]	@ (80037d8 <MX_GPIO_Init+0x288>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003592:	627b      	str	r3, [r7, #36]	@ 0x24
 8003594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003596:	4b90      	ldr	r3, [pc, #576]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	4a8f      	ldr	r2, [pc, #572]	@ (80037d8 <MX_GPIO_Init+0x288>)
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035a2:	4b8d      	ldr	r3, [pc, #564]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	623b      	str	r3, [r7, #32]
 80035ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ae:	4b8a      	ldr	r3, [pc, #552]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	4a89      	ldr	r2, [pc, #548]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ba:	4b87      	ldr	r3, [pc, #540]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035c6:	4b84      	ldr	r3, [pc, #528]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	4a83      	ldr	r2, [pc, #524]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035cc:	f043 0304 	orr.w	r3, r3, #4
 80035d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035d2:	4b81      	ldr	r3, [pc, #516]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	f003 0304 	and.w	r3, r3, #4
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035de:	4b7e      	ldr	r3, [pc, #504]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	4a7d      	ldr	r2, [pc, #500]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035e4:	f043 0301 	orr.w	r3, r3, #1
 80035e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ea:	4b7b      	ldr	r3, [pc, #492]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80035f6:	4b78      	ldr	r3, [pc, #480]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	4a77      	ldr	r2, [pc, #476]	@ (80037d8 <MX_GPIO_Init+0x288>)
 80035fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003600:	6313      	str	r3, [r2, #48]	@ 0x30
 8003602:	4b75      	ldr	r3, [pc, #468]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800360e:	4b72      	ldr	r3, [pc, #456]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	4a71      	ldr	r2, [pc, #452]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003618:	6313      	str	r3, [r2, #48]	@ 0x30
 800361a:	4b6f      	ldr	r3, [pc, #444]	@ (80037d8 <MX_GPIO_Init+0x288>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003622:	60fb      	str	r3, [r7, #12]
 8003624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003626:	4b6c      	ldr	r3, [pc, #432]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	4a6b      	ldr	r2, [pc, #428]	@ (80037d8 <MX_GPIO_Init+0x288>)
 800362c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003630:	6313      	str	r3, [r2, #48]	@ 0x30
 8003632:	4b69      	ldr	r3, [pc, #420]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800363e:	4b66      	ldr	r3, [pc, #408]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	4a65      	ldr	r2, [pc, #404]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003644:	f043 0320 	orr.w	r3, r3, #32
 8003648:	6313      	str	r3, [r2, #48]	@ 0x30
 800364a:	4b63      	ldr	r3, [pc, #396]	@ (80037d8 <MX_GPIO_Init+0x288>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003656:	4b60      	ldr	r3, [pc, #384]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	4a5f      	ldr	r2, [pc, #380]	@ (80037d8 <MX_GPIO_Init+0x288>)
 800365c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003660:	6313      	str	r3, [r2, #48]	@ 0x30
 8003662:	4b5d      	ldr	r3, [pc, #372]	@ (80037d8 <MX_GPIO_Init+0x288>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003666:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 800366e:	237c      	movs	r3, #124	@ 0x7c
 8003670:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003672:	2303      	movs	r3, #3
 8003674:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800367a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800367e:	4619      	mov	r1, r3
 8003680:	4856      	ldr	r0, [pc, #344]	@ (80037dc <MX_GPIO_Init+0x28c>)
 8003682:	f005 fe8f 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG12 PG9
                           PG7 PG3 PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
 8003686:	f247 238c 	movw	r3, #29324	@ 0x728c
 800368a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368c:	2303      	movs	r3, #3
 800368e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003694:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003698:	4619      	mov	r1, r3
 800369a:	4851      	ldr	r0, [pc, #324]	@ (80037e0 <MX_GPIO_Init+0x290>)
 800369c:	f005 fe82 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB3 PB6
                           PB13 PB12 PB2 PB10
                           PB0 PB11 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_6
 80036a0:	f64f 437d 	movw	r3, #64637	@ 0xfc7d
 80036a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036a6:	2303      	movs	r3, #3
 80036a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b2:	4619      	mov	r1, r3
 80036b4:	484b      	ldr	r0, [pc, #300]	@ (80037e4 <MX_GPIO_Init+0x294>)
 80036b6:	f005 fe75 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 80036ba:	f643 03f0 	movw	r3, #14576	@ 0x38f0
 80036be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036c0:	2303      	movs	r3, #3
 80036c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	2300      	movs	r3, #0
 80036c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036cc:	4619      	mov	r1, r3
 80036ce:	4846      	ldr	r0, [pc, #280]	@ (80037e8 <MX_GPIO_Init+0x298>)
 80036d0:	f005 fe68 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80036d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80036de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036e0:	2301      	movs	r3, #1
 80036e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036e8:	4619      	mov	r1, r3
 80036ea:	4840      	ldr	r0, [pc, #256]	@ (80037ec <MX_GPIO_Init+0x29c>)
 80036ec:	f005 fe5a 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80036f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f6:	2303      	movs	r3, #3
 80036f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80036fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003702:	4619      	mov	r1, r3
 8003704:	483a      	ldr	r0, [pc, #232]	@ (80037f0 <MX_GPIO_Init+0x2a0>)
 8003706:	f005 fe4d 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC10 PC9 PC7
                           PC6 PC3 PC0 PC1
                           PC2 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_7
 800370a:	f640 63ff 	movw	r3, #3839	@ 0xeff
 800370e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003710:	2303      	movs	r3, #3
 8003712:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003714:	2300      	movs	r3, #0
 8003716:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800371c:	4619      	mov	r1, r3
 800371e:	4835      	ldr	r0, [pc, #212]	@ (80037f4 <MX_GPIO_Init+0x2a4>)
 8003720:	f005 fe40 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI3 PI2 PI7
                           PI6 PI12 PI11 PI13
                           PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7
 8003724:	f64b 13cc 	movw	r3, #47564	@ 0xb9cc
 8003728:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_13
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800372a:	2303      	movs	r3, #3
 800372c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372e:	2300      	movs	r3, #0
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003732:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003736:	4619      	mov	r1, r3
 8003738:	482f      	ldr	r0, [pc, #188]	@ (80037f8 <MX_GPIO_Init+0x2a8>)
 800373a:	f005 fe33 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800373e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003744:	2300      	movs	r3, #0
 8003746:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003748:	2300      	movs	r3, #0
 800374a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800374c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003750:	4619      	mov	r1, r3
 8003752:	4828      	ldr	r0, [pc, #160]	@ (80037f4 <MX_GPIO_Init+0x2a4>)
 8003754:	f005 fe26 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK4 PK3 PK1 PK2
                           PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2
 8003758:	231f      	movs	r3, #31
 800375a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800375c:	2303      	movs	r3, #3
 800375e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003760:	2300      	movs	r3, #0
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003764:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003768:	4619      	mov	r1, r3
 800376a:	4824      	ldr	r0, [pc, #144]	@ (80037fc <MX_GPIO_Init+0x2ac>)
 800376c:	f005 fe1a 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA1 PA4 PA2
                           PA6 PA5 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_2
 8003770:	f240 437e 	movw	r3, #1150	@ 0x47e
 8003774:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003776:	2303      	movs	r3, #3
 8003778:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003782:	4619      	mov	r1, r3
 8003784:	4819      	ldr	r0, [pc, #100]	@ (80037ec <MX_GPIO_Init+0x29c>)
 8003786:	f005 fe0d 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH14 PH4 PH12 PH11
                           PH6 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_11
 800378a:	f645 4350 	movw	r3, #23632	@ 0x5c50
 800378e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003790:	2303      	movs	r3, #3
 8003792:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003798:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800379c:	4619      	mov	r1, r3
 800379e:	4818      	ldr	r0, [pc, #96]	@ (8003800 <MX_GPIO_Init+0x2b0>)
 80037a0:	f005 fe00 	bl	80093a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 80037a4:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 80037a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037aa:	2303      	movs	r3, #3
 80037ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80037b6:	4619      	mov	r1, r3
 80037b8:	4812      	ldr	r0, [pc, #72]	@ (8003804 <MX_GPIO_Init+0x2b4>)
 80037ba:	f005 fdf3 	bl	80093a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80037be:	2200      	movs	r2, #0
 80037c0:	2100      	movs	r1, #0
 80037c2:	2028      	movs	r0, #40	@ 0x28
 80037c4:	f004 ffc1 	bl	800874a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037c8:	2028      	movs	r0, #40	@ 0x28
 80037ca:	f004 ffda 	bl	8008782 <HAL_NVIC_EnableIRQ>

}
 80037ce:	bf00      	nop
 80037d0:	3740      	adds	r7, #64	@ 0x40
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40021800 	.word	0x40021800
 80037e4:	40020400 	.word	0x40020400
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	40020000 	.word	0x40020000
 80037f0:	40022400 	.word	0x40022400
 80037f4:	40020800 	.word	0x40020800
 80037f8:	40022000 	.word	0x40022000
 80037fc:	40022800 	.word	0x40022800
 8003800:	40021c00 	.word	0x40021c00
 8003804:	40021400 	.word	0x40021400

08003808 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800380c:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <MX_I2C1_Init+0x74>)
 800380e:	4a1c      	ldr	r2, [pc, #112]	@ (8003880 <MX_I2C1_Init+0x78>)
 8003810:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8003812:	4b1a      	ldr	r3, [pc, #104]	@ (800387c <MX_I2C1_Init+0x74>)
 8003814:	4a1b      	ldr	r2, [pc, #108]	@ (8003884 <MX_I2C1_Init+0x7c>)
 8003816:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003818:	4b18      	ldr	r3, [pc, #96]	@ (800387c <MX_I2C1_Init+0x74>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800381e:	4b17      	ldr	r3, [pc, #92]	@ (800387c <MX_I2C1_Init+0x74>)
 8003820:	2201      	movs	r2, #1
 8003822:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003824:	4b15      	ldr	r3, [pc, #84]	@ (800387c <MX_I2C1_Init+0x74>)
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800382a:	4b14      	ldr	r3, [pc, #80]	@ (800387c <MX_I2C1_Init+0x74>)
 800382c:	2200      	movs	r2, #0
 800382e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003830:	4b12      	ldr	r3, [pc, #72]	@ (800387c <MX_I2C1_Init+0x74>)
 8003832:	2200      	movs	r2, #0
 8003834:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003836:	4b11      	ldr	r3, [pc, #68]	@ (800387c <MX_I2C1_Init+0x74>)
 8003838:	2200      	movs	r2, #0
 800383a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800383c:	4b0f      	ldr	r3, [pc, #60]	@ (800387c <MX_I2C1_Init+0x74>)
 800383e:	2200      	movs	r2, #0
 8003840:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003842:	480e      	ldr	r0, [pc, #56]	@ (800387c <MX_I2C1_Init+0x74>)
 8003844:	f006 f8b0 	bl	80099a8 <HAL_I2C_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800384e:	f001 f97b 	bl	8004b48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003852:	2100      	movs	r1, #0
 8003854:	4809      	ldr	r0, [pc, #36]	@ (800387c <MX_I2C1_Init+0x74>)
 8003856:	f006 fe71 	bl	800a53c <HAL_I2CEx_ConfigAnalogFilter>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003860:	f001 f972 	bl	8004b48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003864:	2100      	movs	r1, #0
 8003866:	4805      	ldr	r0, [pc, #20]	@ (800387c <MX_I2C1_Init+0x74>)
 8003868:	f006 feb3 	bl	800a5d2 <HAL_I2CEx_ConfigDigitalFilter>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003872:	f001 f969 	bl	8004b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003876:	bf00      	nop
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20005d14 	.word	0x20005d14
 8003880:	40005400 	.word	0x40005400
 8003884:	20404768 	.word	0x20404768

08003888 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800388c:	4b1b      	ldr	r3, [pc, #108]	@ (80038fc <MX_I2C3_Init+0x74>)
 800388e:	4a1c      	ldr	r2, [pc, #112]	@ (8003900 <MX_I2C3_Init+0x78>)
 8003890:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8003892:	4b1a      	ldr	r3, [pc, #104]	@ (80038fc <MX_I2C3_Init+0x74>)
 8003894:	4a1b      	ldr	r2, [pc, #108]	@ (8003904 <MX_I2C3_Init+0x7c>)
 8003896:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003898:	4b18      	ldr	r3, [pc, #96]	@ (80038fc <MX_I2C3_Init+0x74>)
 800389a:	2200      	movs	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800389e:	4b17      	ldr	r3, [pc, #92]	@ (80038fc <MX_I2C3_Init+0x74>)
 80038a0:	2201      	movs	r2, #1
 80038a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038a4:	4b15      	ldr	r3, [pc, #84]	@ (80038fc <MX_I2C3_Init+0x74>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80038aa:	4b14      	ldr	r3, [pc, #80]	@ (80038fc <MX_I2C3_Init+0x74>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80038b0:	4b12      	ldr	r3, [pc, #72]	@ (80038fc <MX_I2C3_Init+0x74>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038b6:	4b11      	ldr	r3, [pc, #68]	@ (80038fc <MX_I2C3_Init+0x74>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038bc:	4b0f      	ldr	r3, [pc, #60]	@ (80038fc <MX_I2C3_Init+0x74>)
 80038be:	2200      	movs	r2, #0
 80038c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80038c2:	480e      	ldr	r0, [pc, #56]	@ (80038fc <MX_I2C3_Init+0x74>)
 80038c4:	f006 f870 	bl	80099a8 <HAL_I2C_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80038ce:	f001 f93b 	bl	8004b48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038d2:	2100      	movs	r1, #0
 80038d4:	4809      	ldr	r0, [pc, #36]	@ (80038fc <MX_I2C3_Init+0x74>)
 80038d6:	f006 fe31 	bl	800a53c <HAL_I2CEx_ConfigAnalogFilter>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80038e0:	f001 f932 	bl	8004b48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80038e4:	2100      	movs	r1, #0
 80038e6:	4805      	ldr	r0, [pc, #20]	@ (80038fc <MX_I2C3_Init+0x74>)
 80038e8:	f006 fe73 	bl	800a5d2 <HAL_I2CEx_ConfigDigitalFilter>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80038f2:	f001 f929 	bl	8004b48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80038f6:	bf00      	nop
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20005d68 	.word	0x20005d68
 8003900:	40005c00 	.word	0x40005c00
 8003904:	20404768 	.word	0x20404768

08003908 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b0ac      	sub	sp, #176	@ 0xb0
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003910:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003920:	f107 0318 	add.w	r3, r7, #24
 8003924:	2284      	movs	r2, #132	@ 0x84
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f010 fc31 	bl	8014190 <memset>
  if(i2cHandle->Instance==I2C1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a44      	ldr	r2, [pc, #272]	@ (8003a44 <HAL_I2C_MspInit+0x13c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d13d      	bne.n	80039b4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003938:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800393c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800393e:	2300      	movs	r3, #0
 8003940:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003942:	f107 0318 	add.w	r3, r7, #24
 8003946:	4618      	mov	r0, r3
 8003948:	f007 fe30 	bl	800b5ac <HAL_RCCEx_PeriphCLKConfig>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003952:	f001 f8f9 	bl	8004b48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003956:	4b3c      	ldr	r3, [pc, #240]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	4a3b      	ldr	r2, [pc, #236]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 800395c:	f043 0302 	orr.w	r3, r3, #2
 8003960:	6313      	str	r3, [r2, #48]	@ 0x30
 8003962:	4b39      	ldr	r3, [pc, #228]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800396e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003972:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003976:	2312      	movs	r3, #18
 8003978:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	2300      	movs	r3, #0
 800397e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003982:	2303      	movs	r3, #3
 8003984:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003988:	2304      	movs	r3, #4
 800398a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003992:	4619      	mov	r1, r3
 8003994:	482d      	ldr	r0, [pc, #180]	@ (8003a4c <HAL_I2C_MspInit+0x144>)
 8003996:	f005 fd05 	bl	80093a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800399a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 800399c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 80039a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80039a6:	4b28      	ldr	r3, [pc, #160]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80039b2:	e042      	b.n	8003a3a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a25      	ldr	r2, [pc, #148]	@ (8003a50 <HAL_I2C_MspInit+0x148>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d13d      	bne.n	8003a3a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80039be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80039c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80039c4:	2300      	movs	r3, #0
 80039c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039ca:	f107 0318 	add.w	r3, r7, #24
 80039ce:	4618      	mov	r0, r3
 80039d0:	f007 fdec 	bl	800b5ac <HAL_RCCEx_PeriphCLKConfig>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80039da:	f001 f8b5 	bl	8004b48 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80039de:	4b1a      	ldr	r3, [pc, #104]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	4a19      	ldr	r2, [pc, #100]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 80039e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039ea:	4b17      	ldr	r3, [pc, #92]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80039f6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80039fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039fe:	2312      	movs	r3, #18
 8003a00:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a10:	2304      	movs	r3, #4
 8003a12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a16:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	480d      	ldr	r0, [pc, #52]	@ (8003a54 <HAL_I2C_MspInit+0x14c>)
 8003a1e:	f005 fcc1 	bl	80093a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003a22:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	4a08      	ldr	r2, [pc, #32]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 8003a28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a2e:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <HAL_I2C_MspInit+0x140>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
}
 8003a3a:	bf00      	nop
 8003a3c:	37b0      	adds	r7, #176	@ 0xb0
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40005400 	.word	0x40005400
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	40020400 	.word	0x40020400
 8003a50:	40005c00 	.word	0x40005c00
 8003a54:	40021c00 	.word	0x40021c00

08003a58 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a15      	ldr	r2, [pc, #84]	@ (8003abc <HAL_I2C_MspDeInit+0x64>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d110      	bne.n	8003a8c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003a6a:	4b15      	ldr	r3, [pc, #84]	@ (8003ac0 <HAL_I2C_MspDeInit+0x68>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	4a14      	ldr	r2, [pc, #80]	@ (8003ac0 <HAL_I2C_MspDeInit+0x68>)
 8003a70:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003a74:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003a76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003a7a:	4812      	ldr	r0, [pc, #72]	@ (8003ac4 <HAL_I2C_MspDeInit+0x6c>)
 8003a7c:	f005 fe3e 	bl	80096fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003a80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003a84:	480f      	ldr	r0, [pc, #60]	@ (8003ac4 <HAL_I2C_MspDeInit+0x6c>)
 8003a86:	f005 fe39 	bl	80096fc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8003a8a:	e013      	b.n	8003ab4 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac8 <HAL_I2C_MspDeInit+0x70>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10e      	bne.n	8003ab4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003a96:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac0 <HAL_I2C_MspDeInit+0x68>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	4a09      	ldr	r2, [pc, #36]	@ (8003ac0 <HAL_I2C_MspDeInit+0x68>)
 8003a9c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003aa0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8003aa2:	2180      	movs	r1, #128	@ 0x80
 8003aa4:	4809      	ldr	r0, [pc, #36]	@ (8003acc <HAL_I2C_MspDeInit+0x74>)
 8003aa6:	f005 fe29 	bl	80096fc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8003aaa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003aae:	4807      	ldr	r0, [pc, #28]	@ (8003acc <HAL_I2C_MspDeInit+0x74>)
 8003ab0:	f005 fe24 	bl	80096fc <HAL_GPIO_DeInit>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40005400 	.word	0x40005400
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40020400 	.word	0x40020400
 8003ac8:	40005c00 	.word	0x40005c00
 8003acc:	40021c00 	.word	0x40021c00

08003ad0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08e      	sub	sp, #56	@ 0x38
 8003ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8003ad6:	1d3b      	adds	r3, r7, #4
 8003ad8:	2234      	movs	r2, #52	@ 0x34
 8003ada:	2100      	movs	r1, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	f010 fb57 	bl	8014190 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8003ae2:	4b3a      	ldr	r3, [pc, #232]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003ae4:	4a3a      	ldr	r2, [pc, #232]	@ (8003bd0 <MX_LTDC_Init+0x100>)
 8003ae6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003ae8:	4b38      	ldr	r3, [pc, #224]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003aee:	4b37      	ldr	r3, [pc, #220]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003af4:	4b35      	ldr	r3, [pc, #212]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003afa:	4b34      	ldr	r3, [pc, #208]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8003b00:	4b32      	ldr	r3, [pc, #200]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8003b06:	4b31      	ldr	r3, [pc, #196]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b08:	2209      	movs	r2, #9
 8003b0a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8003b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b0e:	222b      	movs	r2, #43	@ 0x2b
 8003b10:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8003b12:	4b2e      	ldr	r3, [pc, #184]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b14:	2215      	movs	r2, #21
 8003b16:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8003b18:	4b2c      	ldr	r3, [pc, #176]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b1a:	f240 220b 	movw	r2, #523	@ 0x20b
 8003b1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8003b20:	4b2a      	ldr	r3, [pc, #168]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b22:	f240 1225 	movw	r2, #293	@ 0x125
 8003b26:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 531;
 8003b28:	4b28      	ldr	r3, [pc, #160]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b2a:	f240 2213 	movw	r2, #531	@ 0x213
 8003b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 297;
 8003b30:	4b26      	ldr	r3, [pc, #152]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b32:	f240 1229 	movw	r2, #297	@ 0x129
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8003b38:	4b24      	ldr	r3, [pc, #144]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8003b40:	4b22      	ldr	r3, [pc, #136]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8003b48:	4b20      	ldr	r3, [pc, #128]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8003b50:	481e      	ldr	r0, [pc, #120]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003b52:	f006 fd8b 	bl	800a66c <HAL_LTDC_Init>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8003b5c:	f000 fff4 	bl	8004b48 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8003b60:	2300      	movs	r3, #0
 8003b62:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8003b64:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003b68:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8003b6e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003b72:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8003b74:	2302      	movs	r3, #2
 8003b76:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8003b78:	23ff      	movs	r3, #255	@ 0xff
 8003b7a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003b80:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003b84:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003b86:	2307      	movs	r3, #7
 8003b88:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8003b8e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8003b94:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003b98:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8003bac:	1d3b      	adds	r3, r7, #4
 8003bae:	2200      	movs	r2, #0
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4806      	ldr	r0, [pc, #24]	@ (8003bcc <MX_LTDC_Init+0xfc>)
 8003bb4:	f006 fe2a 	bl	800a80c <HAL_LTDC_ConfigLayer>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8003bbe:	f000 ffc3 	bl	8004b48 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8003bc2:	bf00      	nop
 8003bc4:	3738      	adds	r7, #56	@ 0x38
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20005dbc 	.word	0x20005dbc
 8003bd0:	40016800 	.word	0x40016800

08003bd4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b0b0      	sub	sp, #192	@ 0xc0
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bdc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003bf0:	2284      	movs	r2, #132	@ 0x84
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f010 facb 	bl	8014190 <memset>
  if(ltdcHandle->Instance==LTDC)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a97      	ldr	r2, [pc, #604]	@ (8003e5c <HAL_LTDC_MspInit+0x288>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	f040 8126 	bne.w	8003e52 <HAL_LTDC_MspInit+0x27e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003c06:	2308      	movs	r3, #8
 8003c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 100;
 8003c0a:	2364      	movs	r3, #100	@ 0x64
 8003c0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003c0e:	2304      	movs	r3, #4
 8003c10:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003c12:	2302      	movs	r3, #2
 8003c14:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8003c16:	2300      	movs	r3, #0
 8003c18:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003c1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c22:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f007 fcbf 	bl	800b5ac <HAL_RCCEx_PeriphCLKConfig>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 8003c34:	f000 ff88 	bl	8004b48 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003c38:	4b89      	ldr	r3, [pc, #548]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c3c:	4a88      	ldr	r2, [pc, #544]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c42:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c44:	4b86      	ldr	r3, [pc, #536]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003c50:	4b83      	ldr	r3, [pc, #524]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	4a82      	ldr	r2, [pc, #520]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c5c:	4b80      	ldr	r3, [pc, #512]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c64:	623b      	str	r3, [r7, #32]
 8003c66:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c68:	4b7d      	ldr	r3, [pc, #500]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6c:	4a7c      	ldr	r2, [pc, #496]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c74:	4b7a      	ldr	r3, [pc, #488]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c80:	4b77      	ldr	r3, [pc, #476]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c84:	4a76      	ldr	r2, [pc, #472]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c8c:	4b74      	ldr	r3, [pc, #464]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003c98:	4b71      	ldr	r3, [pc, #452]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	4a70      	ldr	r2, [pc, #448]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ca2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ca4:	4b6e      	ldr	r3, [pc, #440]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cb0:	4b6b      	ldr	r3, [pc, #428]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003cb6:	f043 0308 	orr.w	r3, r3, #8
 8003cba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cbc:	4b68      	ldr	r3, [pc, #416]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cc8:	4b65      	ldr	r3, [pc, #404]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ccc:	4a64      	ldr	r2, [pc, #400]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003cce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cd4:	4b62      	ldr	r3, [pc, #392]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cdc:	60fb      	str	r3, [r7, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce0:	4b5f      	ldr	r3, [pc, #380]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce4:	4a5e      	ldr	r2, [pc, #376]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003ce6:	f043 0302 	orr.w	r3, r3, #2
 8003cea:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cec:	4b5c      	ldr	r3, [pc, #368]	@ (8003e60 <HAL_LTDC_MspInit+0x28c>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	68bb      	ldr	r3, [r7, #8]
    PI14     ------> LTDC_CLK
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    PB1     ------> LTDC_R6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8003cf8:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8003cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	2302      	movs	r3, #2
 8003d02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d12:	230e      	movs	r3, #14
 8003d14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003d18:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4851      	ldr	r0, [pc, #324]	@ (8003e64 <HAL_LTDC_MspInit+0x290>)
 8003d20:	f005 fb40 	bl	80093a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8003d24:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003d28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d3e:	230e      	movs	r3, #14
 8003d40:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d44:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4847      	ldr	r0, [pc, #284]	@ (8003e68 <HAL_LTDC_MspInit+0x294>)
 8003d4c:	f005 fb2a 	bl	80093a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_1
 8003d50:	f244 6333 	movw	r3, #17971	@ 0x4633
 8003d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d6a:	230e      	movs	r3, #14
 8003d6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003d70:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003d74:	4619      	mov	r1, r3
 8003d76:	483d      	ldr	r0, [pc, #244]	@ (8003e6c <HAL_LTDC_MspInit+0x298>)
 8003d78:	f005 fb14 	bl	80093a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 8003d7c:	23e0      	movs	r3, #224	@ 0xe0
 8003d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d82:	2302      	movs	r3, #2
 8003d84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003d94:	230e      	movs	r3, #14
 8003d96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003d9a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4833      	ldr	r0, [pc, #204]	@ (8003e70 <HAL_LTDC_MspInit+0x29c>)
 8003da2:	f005 faff 	bl	80093a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003da6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dae:	2302      	movs	r3, #2
 8003db0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003dc0:	2309      	movs	r3, #9
 8003dc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003dc6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4825      	ldr	r0, [pc, #148]	@ (8003e64 <HAL_LTDC_MspInit+0x290>)
 8003dce:	f005 fae9 	bl	80093a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de4:	2300      	movs	r3, #0
 8003de6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003dea:	230e      	movs	r3, #14
 8003dec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003df0:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003df4:	4619      	mov	r1, r3
 8003df6:	481f      	ldr	r0, [pc, #124]	@ (8003e74 <HAL_LTDC_MspInit+0x2a0>)
 8003df8:	f005 fad4 	bl	80093a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 8003dfc:	f44f 4322 	mov.w	r3, #41472	@ 0xa200
 8003e00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e04:	2302      	movs	r3, #2
 8003e06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	2300      	movs	r3, #0
 8003e12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003e16:	230e      	movs	r3, #14
 8003e18:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003e1c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003e20:	4619      	mov	r1, r3
 8003e22:	4815      	ldr	r0, [pc, #84]	@ (8003e78 <HAL_LTDC_MspInit+0x2a4>)
 8003e24:	f005 fabe 	bl	80093a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2e:	2302      	movs	r3, #2
 8003e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003e40:	2309      	movs	r3, #9
 8003e42:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e46:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	480b      	ldr	r0, [pc, #44]	@ (8003e7c <HAL_LTDC_MspInit+0x2a8>)
 8003e4e:	f005 faa9 	bl	80093a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8003e52:	bf00      	nop
 8003e54:	37c0      	adds	r7, #192	@ 0xc0
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40016800 	.word	0x40016800
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40021800 	.word	0x40021800
 8003e68:	40020000 	.word	0x40020000
 8003e6c:	40022000 	.word	0x40022000
 8003e70:	40022800 	.word	0x40022800
 8003e74:	40020c00 	.word	0x40020c00
 8003e78:	40021c00 	.word	0x40021c00
 8003e7c:	40020400 	.word	0x40020400

08003e80 <getRTCDateStr>:

/**
 * @brief Récupère la date formatée depuis la RTC
 * @param dateStr: buffer pour stocker la chaîne formatée
 */
void getRTCDateStr(char* dateStr) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	6078      	str	r0, [r7, #4]
    // Lecture de l'heure (nécessaire avant la date)
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	490d      	ldr	r1, [pc, #52]	@ (8003ec0 <getRTCDateStr+0x40>)
 8003e8c:	480d      	ldr	r0, [pc, #52]	@ (8003ec4 <getRTCDateStr+0x44>)
 8003e8e:	f008 f89b 	bl	800bfc8 <HAL_RTC_GetTime>
    // Lecture de la date
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003e92:	2200      	movs	r2, #0
 8003e94:	490c      	ldr	r1, [pc, #48]	@ (8003ec8 <getRTCDateStr+0x48>)
 8003e96:	480b      	ldr	r0, [pc, #44]	@ (8003ec4 <getRTCDateStr+0x44>)
 8003e98:	f008 f978 	bl	800c18c <HAL_RTC_GetDate>

    // Format: "Jour JJ/MM/AAAA"
    sprintf(dateStr, "%02d/%02d/20%02d",
            sDate.Date,
 8003e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <getRTCDateStr+0x48>)
 8003e9e:	789b      	ldrb	r3, [r3, #2]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8003ea0:	461a      	mov	r2, r3
            sDate.Month,
 8003ea2:	4b09      	ldr	r3, [pc, #36]	@ (8003ec8 <getRTCDateStr+0x48>)
 8003ea4:	785b      	ldrb	r3, [r3, #1]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8003ea6:	4619      	mov	r1, r3
            sDate.Year);
 8003ea8:	4b07      	ldr	r3, [pc, #28]	@ (8003ec8 <getRTCDateStr+0x48>)
 8003eaa:	78db      	ldrb	r3, [r3, #3]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4906      	ldr	r1, [pc, #24]	@ (8003ecc <getRTCDateStr+0x4c>)
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f010 f874 	bl	8013fa0 <siprintf>
}
 8003eb8:	bf00      	nop
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	2000510c 	.word	0x2000510c
 8003ec4:	20005ec8 	.word	0x20005ec8
 8003ec8:	20005120 	.word	0x20005120
 8003ecc:	08016814 	.word	0x08016814

08003ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ed6:	f003 fea5 	bl	8007c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003eda:	f000 fd0f 	bl	80048fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ede:	f7ff fb37 	bl	8003550 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ee2:	f7ff f9e5 	bl	80032b0 <MX_DMA_Init>
  MX_DMA2D_Init();
 8003ee6:	f7ff fa09 	bl	80032fc <MX_DMA2D_Init>
  MX_FMC_Init();
 8003eea:	f7ff fa59 	bl	80033a0 <MX_FMC_Init>
  MX_LTDC_Init();
 8003eee:	f7ff fdef 	bl	8003ad0 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8003ef2:	f001 fb83 	bl	80055fc <MX_USART1_UART_Init>
  MX_I2C3_Init();
 8003ef6:	f7ff fcc7 	bl	8003888 <MX_I2C3_Init>
  MX_TIM3_Init();
 8003efa:	f001 fa15 	bl	8005328 <MX_TIM3_Init>
  MX_RTC_Init();
 8003efe:	f000 fe29 	bl	8004b54 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8003f02:	f000 fefb 	bl	8004cfc <MX_SDMMC1_SD_Init>
  MX_I2C1_Init();
 8003f06:	f7ff fc7f 	bl	8003808 <MX_I2C1_Init>
  MX_FATFS_Init();
 8003f0a:	f00c fd05 	bl	8010918 <MX_FATFS_Init>
  MX_ADC1_Init();
 8003f0e:	f7ff f93d 	bl	800318c <MX_ADC1_Init>
  MX_TIM1_Init();
 8003f12:	f001 f9af 	bl	8005274 <MX_TIM1_Init>
  MX_TIM6_Init();
 8003f16:	f001 fa57 	bl	80053c8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003f1a:	f001 fa8d 	bl	8005438 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8003f1e:	f002 f88d 	bl	800603c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, SDRAM_DEVICE_ADDR);
 8003f22:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8003f26:	2001      	movs	r0, #1
 8003f28:	f002 f920 	bl	800616c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SetLayerVisible(LTDC_ACTIVE_LAYER, ENABLE);
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	2001      	movs	r0, #1
 8003f30:	f002 f98c 	bl	800624c <BSP_LCD_SetLayerVisible>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003f34:	4899      	ldr	r0, [pc, #612]	@ (800419c <main+0x2cc>)
 8003f36:	f002 f9f9 	bl	800632c <BSP_LCD_SetFont>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	f002 f976 	bl	800622c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8003f40:	f04f 30ff 	mov.w	r0, #4294967295
 8003f44:	f002 fa0c 	bl	8006360 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8003f48:	f04f 30ff 	mov.w	r0, #4294967295
 8003f4c:	f002 f9d4 	bl	80062f8 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8003f50:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8003f54:	f002 f9b8 	bl	80062c8 <BSP_LCD_SetTextColor>

  init_HumTemp();
 8003f58:	f7fe f9da 	bl	8002310 <init_HumTemp>
  init_Pression();
 8003f5c:	f7fe fbd6 	bl	800270c <init_Pression>
  init_sd_logging();
 8003f60:	f7fe fd96 	bl	8002a90 <init_sd_logging>
  HAL_TIM_Base_Start_IT(&htim7);
 8003f64:	488e      	ldr	r0, [pc, #568]	@ (80041a0 <main+0x2d0>)
 8003f66:	f009 ffb9 	bl	800dedc <HAL_TIM_Base_Start_IT>
  //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
  TouchTimer_Init();
 8003f6a:	f000 fd39 	bl	80049e0 <TouchTimer_Init>
  //drawCreditsPage();
  //drawTempHumidRainPage();
  //drawWindDirPressurePage();
  //drawSettingsPage();

  int flag=0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	60fb      	str	r3, [r7, #12]
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
         //machine d' etat de l'inteface graphique
         if (needRedraw) {
 8003f72:	4b8c      	ldr	r3, [pc, #560]	@ (80041a4 <main+0x2d4>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d04d      	beq.n	8004016 <main+0x146>
             switch (flag) {
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b09      	cmp	r3, #9
 8003f7e:	d84a      	bhi.n	8004016 <main+0x146>
 8003f80:	a201      	add	r2, pc, #4	@ (adr r2, 8003f88 <main+0xb8>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003fb1 	.word	0x08003fb1
 8003f8c:	08003fbd 	.word	0x08003fbd
 8003f90:	08003fc9 	.word	0x08003fc9
 8003f94:	08003fd5 	.word	0x08003fd5
 8003f98:	08003fe1 	.word	0x08003fe1
 8003f9c:	08003fed 	.word	0x08003fed
 8003fa0:	08003ff3 	.word	0x08003ff3
 8003fa4:	08003ff9 	.word	0x08003ff9
 8003fa8:	08004005 	.word	0x08004005
 8003fac:	0800400b 	.word	0x0800400b
                 case 0:
                     drawMenuPage();
 8003fb0:	f7fd f836 	bl	8001020 <drawMenuPage>
                     needRedraw = 0; // Reset the redraw flag
 8003fb4:	4b7b      	ldr	r3, [pc, #492]	@ (80041a4 <main+0x2d4>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
                     break;
 8003fba:	e02c      	b.n	8004016 <main+0x146>

                 case 1:
                	 drawTempHumidRainPage();
 8003fbc:	f7fd f902 	bl	80011c4 <drawTempHumidRainPage>
                     needRedraw = 0; // Reset the redraw flag
 8003fc0:	4b78      	ldr	r3, [pc, #480]	@ (80041a4 <main+0x2d4>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
                     break;
 8003fc6:	e026      	b.n	8004016 <main+0x146>

                 case 2:
                      drawWindDirPressurePage();
 8003fc8:	f7fd f98a 	bl	80012e0 <drawWindDirPressurePage>
                      needRedraw = 0; // Reset the redraw flag
 8003fcc:	4b75      	ldr	r3, [pc, #468]	@ (80041a4 <main+0x2d4>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
                      break;
 8003fd2:	e020      	b.n	8004016 <main+0x146>

                 case 3:
                      drawSettingsPage();
 8003fd4:	f7fd fa10 	bl	80013f8 <drawSettingsPage>
                      needRedraw = 0; // Reset the redraw flag
 8003fd8:	4b72      	ldr	r3, [pc, #456]	@ (80041a4 <main+0x2d4>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
                      break;
 8003fde:	e01a      	b.n	8004016 <main+0x146>

                  case 4:
                      drawCreditsPage();
 8003fe0:	f7fd f8b0 	bl	8001144 <drawCreditsPage>
                      needRedraw = 0; // Reset the redraw flag
 8003fe4:	4b6f      	ldr	r3, [pc, #444]	@ (80041a4 <main+0x2d4>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
                      break;
 8003fea:	e014      	b.n	8004016 <main+0x146>

                  case 5:
                	  valeur_graph_TempH();
 8003fec:	f7fe face 	bl	800258c <valeur_graph_TempH>
                      //needRedraw = 0; // Reset the redraw flag
                      break;
 8003ff0:	e011      	b.n	8004016 <main+0x146>

                  case 6:
                	  value_humidity_graph();
 8003ff2:	f7fe fb03 	bl	80025fc <value_humidity_graph>
                      //needRedraw = 0; // Reset the redraw flag
                      break;
 8003ff6:	e00e      	b.n	8004016 <main+0x146>

                  case 7:
                	  drawTempHumGraphPage();
 8003ff8:	f7fd fb60 	bl	80016bc <drawTempHumGraphPage>
                      needRedraw = 0; // Reset the redraw flag
 8003ffc:	4b69      	ldr	r3, [pc, #420]	@ (80041a4 <main+0x2d4>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]
                      break;
 8004002:	e008      	b.n	8004016 <main+0x146>

                  case 8:
                	  manage_pressure_graph();
 8004004:	f7fe fc52 	bl	80028ac <manage_pressure_graph>
                      //needRedraw = 0; // Reset the redraw flag
                      break;
 8004008:	e005      	b.n	8004016 <main+0x146>

                  case 9:
                	  drawRainPressGraphPage();
 800400a:	f7fd fb9d 	bl	8001748 <drawRainPressGraphPage>
                      needRedraw = 0; // Reset the redraw flag
 800400e:	4b65      	ldr	r3, [pc, #404]	@ (80041a4 <main+0x2d4>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
                      break;
 8004014:	bf00      	nop
         /*if(I2c_Flag)
         {
			 }
			 I2c_Flag=0;
         }*/
  	  	  	 if(flag==1){
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d106      	bne.n	800402a <main+0x15a>
  				 valeur_TempH();
 800401c:	f7fe fa50 	bl	80024c0 <valeur_TempH>
  				 valeur_Hum();
 8004020:	f7fe f9dc 	bl	80023dc <valeur_Hum>
  				 Rain_Measure_Value();
 8004024:	f7fe fca0 	bl	8002968 <Rain_Measure_Value>
 8004028:	e008      	b.n	800403c <main+0x16c>
  			 }

  	  	  	 else if(flag==2){
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d105      	bne.n	800403c <main+0x16c>
  				 valeur_Pression();
 8004030:	f7fe fbae 	bl	8002790 <valeur_Pression>
  				 Wind_Dir_Value();
 8004034:	f7fe ff24 	bl	8002e80 <Wind_Dir_Value>
  				 Wind_Speed_Value();
 8004038:	f7ff f836 	bl	80030a8 <Wind_Speed_Value>

         }*/


         //changement d'état par interruption sur bouton du touch screen
         if (TS_State.touchDetected && !debounce) {
 800403c:	4b5a      	ldr	r3, [pc, #360]	@ (80041a8 <main+0x2d8>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 843c 	beq.w	80048c0 <main+0x9f0>
 8004048:	4b58      	ldr	r3, [pc, #352]	@ (80041ac <main+0x2dc>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f040 8437 	bne.w	80048c0 <main+0x9f0>
        	 debounce=1;
 8004052:	4b56      	ldr	r3, [pc, #344]	@ (80041ac <main+0x2dc>)
 8004054:	2201      	movs	r2, #1
 8004056:	601a      	str	r2, [r3, #0]
			   //hum Temp Rain button
			  if (flag == 0 && x > 40 && x < 220 && y > 60 && y < 220) {
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d11a      	bne.n	8004094 <main+0x1c4>
 800405e:	4b54      	ldr	r3, [pc, #336]	@ (80041b0 <main+0x2e0>)
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	2b28      	cmp	r3, #40	@ 0x28
 8004066:	d915      	bls.n	8004094 <main+0x1c4>
 8004068:	4b51      	ldr	r3, [pc, #324]	@ (80041b0 <main+0x2e0>)
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	b29b      	uxth	r3, r3
 800406e:	2bdb      	cmp	r3, #219	@ 0xdb
 8004070:	d810      	bhi.n	8004094 <main+0x1c4>
 8004072:	4b50      	ldr	r3, [pc, #320]	@ (80041b4 <main+0x2e4>)
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b3c      	cmp	r3, #60	@ 0x3c
 800407a:	d90b      	bls.n	8004094 <main+0x1c4>
 800407c:	4b4d      	ldr	r3, [pc, #308]	@ (80041b4 <main+0x2e4>)
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	b29b      	uxth	r3, r3
 8004082:	2bdb      	cmp	r3, #219	@ 0xdb
 8004084:	d806      	bhi.n	8004094 <main+0x1c4>
				  flag = 1;
 8004086:	2301      	movs	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 800408a:	4b46      	ldr	r3, [pc, #280]	@ (80041a4 <main+0x2d4>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	f000 bc15 	b.w	80048be <main+0x9ee>

			  //return menu button
			  } else if ((flag == 1 || flag == 2 || flag == 3 || flag == 4) && x > 10 && x < 40 && y > 10 && y < 40) {
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d008      	beq.n	80040ac <main+0x1dc>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b02      	cmp	r3, #2
 800409e:	d005      	beq.n	80040ac <main+0x1dc>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d002      	beq.n	80040ac <main+0x1dc>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d119      	bne.n	80040e0 <main+0x210>
 80040ac:	4b40      	ldr	r3, [pc, #256]	@ (80041b0 <main+0x2e0>)
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b0a      	cmp	r3, #10
 80040b4:	d914      	bls.n	80040e0 <main+0x210>
 80040b6:	4b3e      	ldr	r3, [pc, #248]	@ (80041b0 <main+0x2e0>)
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b27      	cmp	r3, #39	@ 0x27
 80040be:	d80f      	bhi.n	80040e0 <main+0x210>
 80040c0:	4b3c      	ldr	r3, [pc, #240]	@ (80041b4 <main+0x2e4>)
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b0a      	cmp	r3, #10
 80040c8:	d90a      	bls.n	80040e0 <main+0x210>
 80040ca:	4b3a      	ldr	r3, [pc, #232]	@ (80041b4 <main+0x2e4>)
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b27      	cmp	r3, #39	@ 0x27
 80040d2:	d805      	bhi.n	80040e0 <main+0x210>
				  flag = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 80040d8:	4b32      	ldr	r3, [pc, #200]	@ (80041a4 <main+0x2d4>)
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e3ee      	b.n	80048be <main+0x9ee>

			   //wind dir pressure button
			  } else if (flag == 0 && x > 260 && x < 440 && y > 60 && y < 220) {
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d11b      	bne.n	800411e <main+0x24e>
 80040e6:	4b32      	ldr	r3, [pc, #200]	@ (80041b0 <main+0x2e0>)
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040f0:	d915      	bls.n	800411e <main+0x24e>
 80040f2:	4b2f      	ldr	r3, [pc, #188]	@ (80041b0 <main+0x2e0>)
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 80040fc:	d20f      	bcs.n	800411e <main+0x24e>
 80040fe:	4b2d      	ldr	r3, [pc, #180]	@ (80041b4 <main+0x2e4>)
 8004100:	881b      	ldrh	r3, [r3, #0]
 8004102:	b29b      	uxth	r3, r3
 8004104:	2b3c      	cmp	r3, #60	@ 0x3c
 8004106:	d90a      	bls.n	800411e <main+0x24e>
 8004108:	4b2a      	ldr	r3, [pc, #168]	@ (80041b4 <main+0x2e4>)
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	2bdb      	cmp	r3, #219	@ 0xdb
 8004110:	d805      	bhi.n	800411e <main+0x24e>
				  flag = 2;
 8004112:	2302      	movs	r3, #2
 8004114:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8004116:	4b23      	ldr	r3, [pc, #140]	@ (80041a4 <main+0x2d4>)
 8004118:	2201      	movs	r2, #1
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e3cf      	b.n	80048be <main+0x9ee>

			   //setting button
			  } else if (flag == 0 && x > 438 && x < 480 && y > 235 && y < 272) {
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d11c      	bne.n	800415e <main+0x28e>
 8004124:	4b22      	ldr	r3, [pc, #136]	@ (80041b0 <main+0x2e0>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	b29b      	uxth	r3, r3
 800412a:	f5b3 7fdb 	cmp.w	r3, #438	@ 0x1b6
 800412e:	d916      	bls.n	800415e <main+0x28e>
 8004130:	4b1f      	ldr	r3, [pc, #124]	@ (80041b0 <main+0x2e0>)
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29b      	uxth	r3, r3
 8004136:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800413a:	d210      	bcs.n	800415e <main+0x28e>
 800413c:	4b1d      	ldr	r3, [pc, #116]	@ (80041b4 <main+0x2e4>)
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	b29b      	uxth	r3, r3
 8004142:	2beb      	cmp	r3, #235	@ 0xeb
 8004144:	d90b      	bls.n	800415e <main+0x28e>
 8004146:	4b1b      	ldr	r3, [pc, #108]	@ (80041b4 <main+0x2e4>)
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b29b      	uxth	r3, r3
 800414c:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8004150:	d205      	bcs.n	800415e <main+0x28e>
				  flag = 3;
 8004152:	2303      	movs	r3, #3
 8004154:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8004156:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <main+0x2d4>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e3af      	b.n	80048be <main+0x9ee>

			  //credits button
			  } else if (flag == 0 && x > 18 && x < 58 && y > 235 && y < 272) {
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d129      	bne.n	80041b8 <main+0x2e8>
 8004164:	4b12      	ldr	r3, [pc, #72]	@ (80041b0 <main+0x2e0>)
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b12      	cmp	r3, #18
 800416c:	d924      	bls.n	80041b8 <main+0x2e8>
 800416e:	4b10      	ldr	r3, [pc, #64]	@ (80041b0 <main+0x2e0>)
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b39      	cmp	r3, #57	@ 0x39
 8004176:	d81f      	bhi.n	80041b8 <main+0x2e8>
 8004178:	4b0e      	ldr	r3, [pc, #56]	@ (80041b4 <main+0x2e4>)
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	b29b      	uxth	r3, r3
 800417e:	2beb      	cmp	r3, #235	@ 0xeb
 8004180:	d91a      	bls.n	80041b8 <main+0x2e8>
 8004182:	4b0c      	ldr	r3, [pc, #48]	@ (80041b4 <main+0x2e4>)
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 800418c:	d214      	bcs.n	80041b8 <main+0x2e8>
				  flag = 4;
 800418e:	2304      	movs	r3, #4
 8004190:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8004192:	4b04      	ldr	r3, [pc, #16]	@ (80041a4 <main+0x2d4>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	e391      	b.n	80048be <main+0x9ee>
 800419a:	bf00      	nop
 800419c:	20004efc 	.word	0x20004efc
 80041a0:	20006114 	.word	0x20006114
 80041a4:	20004ecc 	.word	0x20004ecc
 80041a8:	20005e64 	.word	0x20005e64
 80041ac:	20005e94 	.word	0x20005e94
 80041b0:	20005e90 	.word	0x20005e90
 80041b4:	20005e92 	.word	0x20005e92

			  //Temperature graph
			  } else if (flag == 1 && x > 40 && x < 160 && y > 80 && y < 200) {
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d119      	bne.n	80041f2 <main+0x322>
 80041be:	4b7f      	ldr	r3, [pc, #508]	@ (80043bc <main+0x4ec>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b28      	cmp	r3, #40	@ 0x28
 80041c6:	d914      	bls.n	80041f2 <main+0x322>
 80041c8:	4b7c      	ldr	r3, [pc, #496]	@ (80043bc <main+0x4ec>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b9f      	cmp	r3, #159	@ 0x9f
 80041d0:	d80f      	bhi.n	80041f2 <main+0x322>
 80041d2:	4b7b      	ldr	r3, [pc, #492]	@ (80043c0 <main+0x4f0>)
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b50      	cmp	r3, #80	@ 0x50
 80041da:	d90a      	bls.n	80041f2 <main+0x322>
 80041dc:	4b78      	ldr	r3, [pc, #480]	@ (80043c0 <main+0x4f0>)
 80041de:	881b      	ldrh	r3, [r3, #0]
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80041e4:	d805      	bhi.n	80041f2 <main+0x322>
				  flag = 5;
 80041e6:	2305      	movs	r3, #5
 80041e8:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 80041ea:	4b76      	ldr	r3, [pc, #472]	@ (80043c4 <main+0x4f4>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e365      	b.n	80048be <main+0x9ee>

			  //humidity graph
         	  } else if (flag == 1 && x > 180 && x < 300 && y > 80 && y < 200){
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d11a      	bne.n	800422e <main+0x35e>
 80041f8:	4b70      	ldr	r3, [pc, #448]	@ (80043bc <main+0x4ec>)
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2bb4      	cmp	r3, #180	@ 0xb4
 8004200:	d915      	bls.n	800422e <main+0x35e>
 8004202:	4b6e      	ldr	r3, [pc, #440]	@ (80043bc <main+0x4ec>)
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800420c:	d20f      	bcs.n	800422e <main+0x35e>
 800420e:	4b6c      	ldr	r3, [pc, #432]	@ (80043c0 <main+0x4f0>)
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b50      	cmp	r3, #80	@ 0x50
 8004216:	d90a      	bls.n	800422e <main+0x35e>
 8004218:	4b69      	ldr	r3, [pc, #420]	@ (80043c0 <main+0x4f0>)
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b29b      	uxth	r3, r3
 800421e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004220:	d805      	bhi.n	800422e <main+0x35e>
         		 flag = 6;
 8004222:	2306      	movs	r3, #6
 8004224:	60fb      	str	r3, [r7, #12]
         		 needRedraw = 1; // Set the redraw flag
 8004226:	4b67      	ldr	r3, [pc, #412]	@ (80043c4 <main+0x4f4>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	e347      	b.n	80048be <main+0x9ee>

         	  //Rain graph
         	  } else if (flag == 1 && x > 320 && x < 440 && y > 80 && y < 200){
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d11b      	bne.n	800426c <main+0x39c>
 8004234:	4b61      	ldr	r3, [pc, #388]	@ (80043bc <main+0x4ec>)
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b29b      	uxth	r3, r3
 800423a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800423e:	d915      	bls.n	800426c <main+0x39c>
 8004240:	4b5e      	ldr	r3, [pc, #376]	@ (80043bc <main+0x4ec>)
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 800424a:	d20f      	bcs.n	800426c <main+0x39c>
 800424c:	4b5c      	ldr	r3, [pc, #368]	@ (80043c0 <main+0x4f0>)
 800424e:	881b      	ldrh	r3, [r3, #0]
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b50      	cmp	r3, #80	@ 0x50
 8004254:	d90a      	bls.n	800426c <main+0x39c>
 8004256:	4b5a      	ldr	r3, [pc, #360]	@ (80043c0 <main+0x4f0>)
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	b29b      	uxth	r3, r3
 800425c:	2bc7      	cmp	r3, #199	@ 0xc7
 800425e:	d805      	bhi.n	800426c <main+0x39c>
          		 flag = 7;
 8004260:	2307      	movs	r3, #7
 8004262:	60fb      	str	r3, [r7, #12]
          		 needRedraw = 1; // Set the redraw flag
 8004264:	4b57      	ldr	r3, [pc, #348]	@ (80043c4 <main+0x4f4>)
 8004266:	2201      	movs	r2, #1
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	e328      	b.n	80048be <main+0x9ee>

          	  //Pressure graph
         	  } else if (flag == 2 && x > 320 && x < 440 && y > 80 && y < 200){
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d11b      	bne.n	80042aa <main+0x3da>
 8004272:	4b52      	ldr	r3, [pc, #328]	@ (80043bc <main+0x4ec>)
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800427c:	d915      	bls.n	80042aa <main+0x3da>
 800427e:	4b4f      	ldr	r3, [pc, #316]	@ (80043bc <main+0x4ec>)
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	b29b      	uxth	r3, r3
 8004284:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8004288:	d20f      	bcs.n	80042aa <main+0x3da>
 800428a:	4b4d      	ldr	r3, [pc, #308]	@ (80043c0 <main+0x4f0>)
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b50      	cmp	r3, #80	@ 0x50
 8004292:	d90a      	bls.n	80042aa <main+0x3da>
 8004294:	4b4a      	ldr	r3, [pc, #296]	@ (80043c0 <main+0x4f0>)
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	b29b      	uxth	r3, r3
 800429a:	2bc7      	cmp	r3, #199	@ 0xc7
 800429c:	d805      	bhi.n	80042aa <main+0x3da>
				 flag = 8;
 800429e:	2308      	movs	r3, #8
 80042a0:	60fb      	str	r3, [r7, #12]
				 needRedraw = 1; // Set the redraw flag
 80042a2:	4b48      	ldr	r3, [pc, #288]	@ (80043c4 <main+0x4f4>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e309      	b.n	80048be <main+0x9ee>

			  //Wind Graph
			  }else if (flag == 2 && x > 40 && x < 160 && y > 80 && y < 200){
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d119      	bne.n	80042e4 <main+0x414>
 80042b0:	4b42      	ldr	r3, [pc, #264]	@ (80043bc <main+0x4ec>)
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b28      	cmp	r3, #40	@ 0x28
 80042b8:	d914      	bls.n	80042e4 <main+0x414>
 80042ba:	4b40      	ldr	r3, [pc, #256]	@ (80043bc <main+0x4ec>)
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b9f      	cmp	r3, #159	@ 0x9f
 80042c2:	d80f      	bhi.n	80042e4 <main+0x414>
 80042c4:	4b3e      	ldr	r3, [pc, #248]	@ (80043c0 <main+0x4f0>)
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	2b50      	cmp	r3, #80	@ 0x50
 80042cc:	d90a      	bls.n	80042e4 <main+0x414>
 80042ce:	4b3c      	ldr	r3, [pc, #240]	@ (80043c0 <main+0x4f0>)
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80042d6:	d805      	bhi.n	80042e4 <main+0x414>
				 flag = 9;
 80042d8:	2309      	movs	r3, #9
 80042da:	60fb      	str	r3, [r7, #12]
				 needRedraw = 1; // Set the redraw flag
 80042dc:	4b39      	ldr	r3, [pc, #228]	@ (80043c4 <main+0x4f4>)
 80042de:	2201      	movs	r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e2ec      	b.n	80048be <main+0x9ee>

			  //return data page 1 button
			  } else if ((flag == 5 || flag == 6 || flag == 7) && x > 10 && x < 40 && y > 10 && y < 40) {
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d005      	beq.n	80042f6 <main+0x426>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b06      	cmp	r3, #6
 80042ee:	d002      	beq.n	80042f6 <main+0x426>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b07      	cmp	r3, #7
 80042f4:	d119      	bne.n	800432a <main+0x45a>
 80042f6:	4b31      	ldr	r3, [pc, #196]	@ (80043bc <main+0x4ec>)
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b0a      	cmp	r3, #10
 80042fe:	d914      	bls.n	800432a <main+0x45a>
 8004300:	4b2e      	ldr	r3, [pc, #184]	@ (80043bc <main+0x4ec>)
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b27      	cmp	r3, #39	@ 0x27
 8004308:	d80f      	bhi.n	800432a <main+0x45a>
 800430a:	4b2d      	ldr	r3, [pc, #180]	@ (80043c0 <main+0x4f0>)
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b0a      	cmp	r3, #10
 8004312:	d90a      	bls.n	800432a <main+0x45a>
 8004314:	4b2a      	ldr	r3, [pc, #168]	@ (80043c0 <main+0x4f0>)
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b27      	cmp	r3, #39	@ 0x27
 800431c:	d805      	bhi.n	800432a <main+0x45a>
				  flag = 1;
 800431e:	2301      	movs	r3, #1
 8004320:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8004322:	4b28      	ldr	r3, [pc, #160]	@ (80043c4 <main+0x4f4>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e2c9      	b.n	80048be <main+0x9ee>

			  //return data page 2 button
			  } else if ((flag == 8 || flag == 9) && x > 10 && x < 40 && y > 10 && y < 40) {
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d002      	beq.n	8004336 <main+0x466>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2b09      	cmp	r3, #9
 8004334:	d119      	bne.n	800436a <main+0x49a>
 8004336:	4b21      	ldr	r3, [pc, #132]	@ (80043bc <main+0x4ec>)
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b0a      	cmp	r3, #10
 800433e:	d914      	bls.n	800436a <main+0x49a>
 8004340:	4b1e      	ldr	r3, [pc, #120]	@ (80043bc <main+0x4ec>)
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	b29b      	uxth	r3, r3
 8004346:	2b27      	cmp	r3, #39	@ 0x27
 8004348:	d80f      	bhi.n	800436a <main+0x49a>
 800434a:	4b1d      	ldr	r3, [pc, #116]	@ (80043c0 <main+0x4f0>)
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b0a      	cmp	r3, #10
 8004352:	d90a      	bls.n	800436a <main+0x49a>
 8004354:	4b1a      	ldr	r3, [pc, #104]	@ (80043c0 <main+0x4f0>)
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b27      	cmp	r3, #39	@ 0x27
 800435c:	d805      	bhi.n	800436a <main+0x49a>
				  flag = 2;
 800435e:	2302      	movs	r3, #2
 8004360:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8004362:	4b18      	ldr	r3, [pc, #96]	@ (80043c4 <main+0x4f4>)
 8004364:	2201      	movs	r2, #1
 8004366:	601a      	str	r2, [r3, #0]
 8004368:	e2a9      	b.n	80048be <main+0x9ee>
				  //Dans la partie où vous gérez les touches
			  } else if (flag == 3) {
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b03      	cmp	r3, #3
 800436e:	f040 82b2 	bne.w	80048d6 <main+0xa06>
				      const uint16_t col1 = 150;
 8004372:	2396      	movs	r3, #150	@ 0x96
 8004374:	817b      	strh	r3, [r7, #10]
				      const uint16_t col2 = col1 + 90;
 8004376:	897b      	ldrh	r3, [r7, #10]
 8004378:	335a      	adds	r3, #90	@ 0x5a
 800437a:	813b      	strh	r3, [r7, #8]
				      const uint16_t col3 = col2 + 90;
 800437c:	893b      	ldrh	r3, [r7, #8]
 800437e:	335a      	adds	r3, #90	@ 0x5a
 8004380:	80fb      	strh	r3, [r7, #6]
				      const uint16_t buttonSize = 30;
 8004382:	231e      	movs	r3, #30
 8004384:	80bb      	strh	r3, [r7, #4]

				      // Bouton retour
				      if (x > 10 && x < 40 && y > 10 && y < 40) {
 8004386:	4b0d      	ldr	r3, [pc, #52]	@ (80043bc <main+0x4ec>)
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	2b0a      	cmp	r3, #10
 800438e:	d91b      	bls.n	80043c8 <main+0x4f8>
 8004390:	4b0a      	ldr	r3, [pc, #40]	@ (80043bc <main+0x4ec>)
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b27      	cmp	r3, #39	@ 0x27
 8004398:	d816      	bhi.n	80043c8 <main+0x4f8>
 800439a:	4b09      	ldr	r3, [pc, #36]	@ (80043c0 <main+0x4f0>)
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	2b0a      	cmp	r3, #10
 80043a2:	d911      	bls.n	80043c8 <main+0x4f8>
 80043a4:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <main+0x4f0>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b27      	cmp	r3, #39	@ 0x27
 80043ac:	d80c      	bhi.n	80043c8 <main+0x4f8>
				          flag = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
				          needRedraw = 1;
 80043b2:	4b04      	ldr	r3, [pc, #16]	@ (80043c4 <main+0x4f4>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e26f      	b.n	800489a <main+0x9ca>
 80043ba:	bf00      	nop
 80043bc:	20005e90 	.word	0x20005e90
 80043c0:	20005e92 	.word	0x20005e92
 80043c4:	20004ecc 	.word	0x20004ecc
				      }
				      // === Boutons Date ===
				      // Jour +
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 40 && y <= 70) {
 80043c8:	4b86      	ldr	r3, [pc, #536]	@ (80045e4 <main+0x714>)
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	897a      	ldrh	r2, [r7, #10]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d832      	bhi.n	800443a <main+0x56a>
 80043d4:	4b83      	ldr	r3, [pc, #524]	@ (80045e4 <main+0x714>)
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	4619      	mov	r1, r3
 80043dc:	897a      	ldrh	r2, [r7, #10]
 80043de:	88bb      	ldrh	r3, [r7, #4]
 80043e0:	4413      	add	r3, r2
 80043e2:	4299      	cmp	r1, r3
 80043e4:	dc29      	bgt.n	800443a <main+0x56a>
 80043e6:	4b80      	ldr	r3, [pc, #512]	@ (80045e8 <main+0x718>)
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b27      	cmp	r3, #39	@ 0x27
 80043ee:	d924      	bls.n	800443a <main+0x56a>
 80043f0:	4b7d      	ldr	r3, [pc, #500]	@ (80045e8 <main+0x718>)
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	2b46      	cmp	r3, #70	@ 0x46
 80043f8:	d81f      	bhi.n	800443a <main+0x56a>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80043fa:	2200      	movs	r2, #0
 80043fc:	497b      	ldr	r1, [pc, #492]	@ (80045ec <main+0x71c>)
 80043fe:	487c      	ldr	r0, [pc, #496]	@ (80045f0 <main+0x720>)
 8004400:	f007 fde2 	bl	800bfc8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004404:	2200      	movs	r2, #0
 8004406:	497b      	ldr	r1, [pc, #492]	@ (80045f4 <main+0x724>)
 8004408:	4879      	ldr	r0, [pc, #484]	@ (80045f0 <main+0x720>)
 800440a:	f007 febf 	bl	800c18c <HAL_RTC_GetDate>
				          sDate.Date = (sDate.Date % 31) + 1;
 800440e:	4b79      	ldr	r3, [pc, #484]	@ (80045f4 <main+0x724>)
 8004410:	789a      	ldrb	r2, [r3, #2]
 8004412:	4b79      	ldr	r3, [pc, #484]	@ (80045f8 <main+0x728>)
 8004414:	fba3 1302 	umull	r1, r3, r3, r2
 8004418:	1ad1      	subs	r1, r2, r3
 800441a:	0849      	lsrs	r1, r1, #1
 800441c:	440b      	add	r3, r1
 800441e:	0919      	lsrs	r1, r3, #4
 8004420:	460b      	mov	r3, r1
 8004422:	015b      	lsls	r3, r3, #5
 8004424:	1a5b      	subs	r3, r3, r1
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	b2db      	uxtb	r3, r3
 800442a:	3301      	adds	r3, #1
 800442c:	b2da      	uxtb	r2, r3
 800442e:	4b71      	ldr	r3, [pc, #452]	@ (80045f4 <main+0x724>)
 8004430:	709a      	strb	r2, [r3, #2]
				          needRedraw = 1;
 8004432:	4b72      	ldr	r3, [pc, #456]	@ (80045fc <main+0x72c>)
 8004434:	2201      	movs	r2, #1
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e22f      	b.n	800489a <main+0x9ca>
				      }
				      // Jour -
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 105 && y <= 135) {
 800443a:	4b6a      	ldr	r3, [pc, #424]	@ (80045e4 <main+0x714>)
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	b29b      	uxth	r3, r3
 8004440:	897a      	ldrh	r2, [r7, #10]
 8004442:	429a      	cmp	r2, r3
 8004444:	d82c      	bhi.n	80044a0 <main+0x5d0>
 8004446:	4b67      	ldr	r3, [pc, #412]	@ (80045e4 <main+0x714>)
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b29b      	uxth	r3, r3
 800444c:	4619      	mov	r1, r3
 800444e:	897a      	ldrh	r2, [r7, #10]
 8004450:	88bb      	ldrh	r3, [r7, #4]
 8004452:	4413      	add	r3, r2
 8004454:	4299      	cmp	r1, r3
 8004456:	dc23      	bgt.n	80044a0 <main+0x5d0>
 8004458:	4b63      	ldr	r3, [pc, #396]	@ (80045e8 <main+0x718>)
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	b29b      	uxth	r3, r3
 800445e:	2b68      	cmp	r3, #104	@ 0x68
 8004460:	d91e      	bls.n	80044a0 <main+0x5d0>
 8004462:	4b61      	ldr	r3, [pc, #388]	@ (80045e8 <main+0x718>)
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b87      	cmp	r3, #135	@ 0x87
 800446a:	d819      	bhi.n	80044a0 <main+0x5d0>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800446c:	2200      	movs	r2, #0
 800446e:	495f      	ldr	r1, [pc, #380]	@ (80045ec <main+0x71c>)
 8004470:	485f      	ldr	r0, [pc, #380]	@ (80045f0 <main+0x720>)
 8004472:	f007 fda9 	bl	800bfc8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004476:	2200      	movs	r2, #0
 8004478:	495e      	ldr	r1, [pc, #376]	@ (80045f4 <main+0x724>)
 800447a:	485d      	ldr	r0, [pc, #372]	@ (80045f0 <main+0x720>)
 800447c:	f007 fe86 	bl	800c18c <HAL_RTC_GetDate>
				          sDate.Date = (sDate.Date > 1) ? sDate.Date - 1 : 31;
 8004480:	4b5c      	ldr	r3, [pc, #368]	@ (80045f4 <main+0x724>)
 8004482:	789b      	ldrb	r3, [r3, #2]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d904      	bls.n	8004492 <main+0x5c2>
 8004488:	4b5a      	ldr	r3, [pc, #360]	@ (80045f4 <main+0x724>)
 800448a:	789b      	ldrb	r3, [r3, #2]
 800448c:	3b01      	subs	r3, #1
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e000      	b.n	8004494 <main+0x5c4>
 8004492:	231f      	movs	r3, #31
 8004494:	4a57      	ldr	r2, [pc, #348]	@ (80045f4 <main+0x724>)
 8004496:	7093      	strb	r3, [r2, #2]
				          needRedraw = 1;
 8004498:	4b58      	ldr	r3, [pc, #352]	@ (80045fc <main+0x72c>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	e1fc      	b.n	800489a <main+0x9ca>
				      }
				      // Mois +
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 40 && y <= 70) {
 80044a0:	4b50      	ldr	r3, [pc, #320]	@ (80045e4 <main+0x714>)
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	893a      	ldrh	r2, [r7, #8]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d830      	bhi.n	800450e <main+0x63e>
 80044ac:	4b4d      	ldr	r3, [pc, #308]	@ (80045e4 <main+0x714>)
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	4619      	mov	r1, r3
 80044b4:	893a      	ldrh	r2, [r7, #8]
 80044b6:	88bb      	ldrh	r3, [r7, #4]
 80044b8:	4413      	add	r3, r2
 80044ba:	4299      	cmp	r1, r3
 80044bc:	dc27      	bgt.n	800450e <main+0x63e>
 80044be:	4b4a      	ldr	r3, [pc, #296]	@ (80045e8 <main+0x718>)
 80044c0:	881b      	ldrh	r3, [r3, #0]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b27      	cmp	r3, #39	@ 0x27
 80044c6:	d922      	bls.n	800450e <main+0x63e>
 80044c8:	4b47      	ldr	r3, [pc, #284]	@ (80045e8 <main+0x718>)
 80044ca:	881b      	ldrh	r3, [r3, #0]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b46      	cmp	r3, #70	@ 0x46
 80044d0:	d81d      	bhi.n	800450e <main+0x63e>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80044d2:	2200      	movs	r2, #0
 80044d4:	4945      	ldr	r1, [pc, #276]	@ (80045ec <main+0x71c>)
 80044d6:	4846      	ldr	r0, [pc, #280]	@ (80045f0 <main+0x720>)
 80044d8:	f007 fd76 	bl	800bfc8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80044dc:	2200      	movs	r2, #0
 80044de:	4945      	ldr	r1, [pc, #276]	@ (80045f4 <main+0x724>)
 80044e0:	4843      	ldr	r0, [pc, #268]	@ (80045f0 <main+0x720>)
 80044e2:	f007 fe53 	bl	800c18c <HAL_RTC_GetDate>
				          sDate.Month = (sDate.Month % 12) + 1;
 80044e6:	4b43      	ldr	r3, [pc, #268]	@ (80045f4 <main+0x724>)
 80044e8:	785a      	ldrb	r2, [r3, #1]
 80044ea:	4b45      	ldr	r3, [pc, #276]	@ (8004600 <main+0x730>)
 80044ec:	fba3 1302 	umull	r1, r3, r3, r2
 80044f0:	08d9      	lsrs	r1, r3, #3
 80044f2:	460b      	mov	r3, r1
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	440b      	add	r3, r1
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	3301      	adds	r3, #1
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4b3c      	ldr	r3, [pc, #240]	@ (80045f4 <main+0x724>)
 8004504:	705a      	strb	r2, [r3, #1]
				          needRedraw = 1;
 8004506:	4b3d      	ldr	r3, [pc, #244]	@ (80045fc <main+0x72c>)
 8004508:	2201      	movs	r2, #1
 800450a:	601a      	str	r2, [r3, #0]
 800450c:	e1c5      	b.n	800489a <main+0x9ca>
				      }
				      // Mois -
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 105 && y <= 135) {
 800450e:	4b35      	ldr	r3, [pc, #212]	@ (80045e4 <main+0x714>)
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	b29b      	uxth	r3, r3
 8004514:	893a      	ldrh	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d82c      	bhi.n	8004574 <main+0x6a4>
 800451a:	4b32      	ldr	r3, [pc, #200]	@ (80045e4 <main+0x714>)
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	4619      	mov	r1, r3
 8004522:	893a      	ldrh	r2, [r7, #8]
 8004524:	88bb      	ldrh	r3, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	4299      	cmp	r1, r3
 800452a:	dc23      	bgt.n	8004574 <main+0x6a4>
 800452c:	4b2e      	ldr	r3, [pc, #184]	@ (80045e8 <main+0x718>)
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b68      	cmp	r3, #104	@ 0x68
 8004534:	d91e      	bls.n	8004574 <main+0x6a4>
 8004536:	4b2c      	ldr	r3, [pc, #176]	@ (80045e8 <main+0x718>)
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	b29b      	uxth	r3, r3
 800453c:	2b87      	cmp	r3, #135	@ 0x87
 800453e:	d819      	bhi.n	8004574 <main+0x6a4>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004540:	2200      	movs	r2, #0
 8004542:	492a      	ldr	r1, [pc, #168]	@ (80045ec <main+0x71c>)
 8004544:	482a      	ldr	r0, [pc, #168]	@ (80045f0 <main+0x720>)
 8004546:	f007 fd3f 	bl	800bfc8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800454a:	2200      	movs	r2, #0
 800454c:	4929      	ldr	r1, [pc, #164]	@ (80045f4 <main+0x724>)
 800454e:	4828      	ldr	r0, [pc, #160]	@ (80045f0 <main+0x720>)
 8004550:	f007 fe1c 	bl	800c18c <HAL_RTC_GetDate>
				          sDate.Month = (sDate.Month > 1) ? sDate.Month - 1 : 12;
 8004554:	4b27      	ldr	r3, [pc, #156]	@ (80045f4 <main+0x724>)
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d904      	bls.n	8004566 <main+0x696>
 800455c:	4b25      	ldr	r3, [pc, #148]	@ (80045f4 <main+0x724>)
 800455e:	785b      	ldrb	r3, [r3, #1]
 8004560:	3b01      	subs	r3, #1
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e000      	b.n	8004568 <main+0x698>
 8004566:	230c      	movs	r3, #12
 8004568:	4a22      	ldr	r2, [pc, #136]	@ (80045f4 <main+0x724>)
 800456a:	7053      	strb	r3, [r2, #1]
				          needRedraw = 1;
 800456c:	4b23      	ldr	r3, [pc, #140]	@ (80045fc <main+0x72c>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e192      	b.n	800489a <main+0x9ca>
				      }
				      // === Boutons Heure ===
				      // Heures +
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 140 && y <= 170) {
 8004574:	4b1b      	ldr	r3, [pc, #108]	@ (80045e4 <main+0x714>)
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	897a      	ldrh	r2, [r7, #10]
 800457c:	429a      	cmp	r2, r3
 800457e:	d843      	bhi.n	8004608 <main+0x738>
 8004580:	4b18      	ldr	r3, [pc, #96]	@ (80045e4 <main+0x714>)
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	b29b      	uxth	r3, r3
 8004586:	4619      	mov	r1, r3
 8004588:	897a      	ldrh	r2, [r7, #10]
 800458a:	88bb      	ldrh	r3, [r7, #4]
 800458c:	4413      	add	r3, r2
 800458e:	4299      	cmp	r1, r3
 8004590:	dc3a      	bgt.n	8004608 <main+0x738>
 8004592:	4b15      	ldr	r3, [pc, #84]	@ (80045e8 <main+0x718>)
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b8b      	cmp	r3, #139	@ 0x8b
 800459a:	d935      	bls.n	8004608 <main+0x738>
 800459c:	4b12      	ldr	r3, [pc, #72]	@ (80045e8 <main+0x718>)
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2baa      	cmp	r3, #170	@ 0xaa
 80045a4:	d830      	bhi.n	8004608 <main+0x738>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80045a6:	2200      	movs	r2, #0
 80045a8:	4910      	ldr	r1, [pc, #64]	@ (80045ec <main+0x71c>)
 80045aa:	4811      	ldr	r0, [pc, #68]	@ (80045f0 <main+0x720>)
 80045ac:	f007 fd0c 	bl	800bfc8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80045b0:	2200      	movs	r2, #0
 80045b2:	4910      	ldr	r1, [pc, #64]	@ (80045f4 <main+0x724>)
 80045b4:	480e      	ldr	r0, [pc, #56]	@ (80045f0 <main+0x720>)
 80045b6:	f007 fde9 	bl	800c18c <HAL_RTC_GetDate>
				          sTime.Hours = (sTime.Hours + 1) % 24;
 80045ba:	4b0c      	ldr	r3, [pc, #48]	@ (80045ec <main+0x71c>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <main+0x734>)
 80045c2:	fb83 1302 	smull	r1, r3, r3, r2
 80045c6:	1099      	asrs	r1, r3, #2
 80045c8:	17d3      	asrs	r3, r2, #31
 80045ca:	1ac9      	subs	r1, r1, r3
 80045cc:	460b      	mov	r3, r1
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	440b      	add	r3, r1
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	1ad1      	subs	r1, r2, r3
 80045d6:	b2ca      	uxtb	r2, r1
 80045d8:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <main+0x71c>)
 80045da:	701a      	strb	r2, [r3, #0]
				          needRedraw = 1;
 80045dc:	4b07      	ldr	r3, [pc, #28]	@ (80045fc <main+0x72c>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	e15a      	b.n	800489a <main+0x9ca>
 80045e4:	20005e90 	.word	0x20005e90
 80045e8:	20005e92 	.word	0x20005e92
 80045ec:	2000510c 	.word	0x2000510c
 80045f0:	20005ec8 	.word	0x20005ec8
 80045f4:	20005120 	.word	0x20005120
 80045f8:	08421085 	.word	0x08421085
 80045fc:	20004ecc 	.word	0x20004ecc
 8004600:	aaaaaaab 	.word	0xaaaaaaab
 8004604:	2aaaaaab 	.word	0x2aaaaaab
				      }
				      // Heures -
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 200 && y <= 230) {
 8004608:	4b85      	ldr	r3, [pc, #532]	@ (8004820 <main+0x950>)
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	897a      	ldrh	r2, [r7, #10]
 8004610:	429a      	cmp	r2, r3
 8004612:	d82c      	bhi.n	800466e <main+0x79e>
 8004614:	4b82      	ldr	r3, [pc, #520]	@ (8004820 <main+0x950>)
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	b29b      	uxth	r3, r3
 800461a:	4619      	mov	r1, r3
 800461c:	897a      	ldrh	r2, [r7, #10]
 800461e:	88bb      	ldrh	r3, [r7, #4]
 8004620:	4413      	add	r3, r2
 8004622:	4299      	cmp	r1, r3
 8004624:	dc23      	bgt.n	800466e <main+0x79e>
 8004626:	4b7f      	ldr	r3, [pc, #508]	@ (8004824 <main+0x954>)
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	2bc7      	cmp	r3, #199	@ 0xc7
 800462e:	d91e      	bls.n	800466e <main+0x79e>
 8004630:	4b7c      	ldr	r3, [pc, #496]	@ (8004824 <main+0x954>)
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	b29b      	uxth	r3, r3
 8004636:	2be6      	cmp	r3, #230	@ 0xe6
 8004638:	d819      	bhi.n	800466e <main+0x79e>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800463a:	2200      	movs	r2, #0
 800463c:	497a      	ldr	r1, [pc, #488]	@ (8004828 <main+0x958>)
 800463e:	487b      	ldr	r0, [pc, #492]	@ (800482c <main+0x95c>)
 8004640:	f007 fcc2 	bl	800bfc8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004644:	2200      	movs	r2, #0
 8004646:	497a      	ldr	r1, [pc, #488]	@ (8004830 <main+0x960>)
 8004648:	4878      	ldr	r0, [pc, #480]	@ (800482c <main+0x95c>)
 800464a:	f007 fd9f 	bl	800c18c <HAL_RTC_GetDate>
				          sTime.Hours = (sTime.Hours > 0) ? sTime.Hours - 1 : 23;
 800464e:	4b76      	ldr	r3, [pc, #472]	@ (8004828 <main+0x958>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <main+0x790>
 8004656:	4b74      	ldr	r3, [pc, #464]	@ (8004828 <main+0x958>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	3b01      	subs	r3, #1
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e000      	b.n	8004662 <main+0x792>
 8004660:	2317      	movs	r3, #23
 8004662:	4a71      	ldr	r2, [pc, #452]	@ (8004828 <main+0x958>)
 8004664:	7013      	strb	r3, [r2, #0]
				          needRedraw = 1;
 8004666:	4b73      	ldr	r3, [pc, #460]	@ (8004834 <main+0x964>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	e115      	b.n	800489a <main+0x9ca>
				      }
				      // Minutes +
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 140 && y <= 170) {
 800466e:	4b6c      	ldr	r3, [pc, #432]	@ (8004820 <main+0x950>)
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	b29b      	uxth	r3, r3
 8004674:	893a      	ldrh	r2, [r7, #8]
 8004676:	429a      	cmp	r2, r3
 8004678:	d832      	bhi.n	80046e0 <main+0x810>
 800467a:	4b69      	ldr	r3, [pc, #420]	@ (8004820 <main+0x950>)
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	4619      	mov	r1, r3
 8004682:	893a      	ldrh	r2, [r7, #8]
 8004684:	88bb      	ldrh	r3, [r7, #4]
 8004686:	4413      	add	r3, r2
 8004688:	4299      	cmp	r1, r3
 800468a:	dc29      	bgt.n	80046e0 <main+0x810>
 800468c:	4b65      	ldr	r3, [pc, #404]	@ (8004824 <main+0x954>)
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b8b      	cmp	r3, #139	@ 0x8b
 8004694:	d924      	bls.n	80046e0 <main+0x810>
 8004696:	4b63      	ldr	r3, [pc, #396]	@ (8004824 <main+0x954>)
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	2baa      	cmp	r3, #170	@ 0xaa
 800469e:	d81f      	bhi.n	80046e0 <main+0x810>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80046a0:	2200      	movs	r2, #0
 80046a2:	4961      	ldr	r1, [pc, #388]	@ (8004828 <main+0x958>)
 80046a4:	4861      	ldr	r0, [pc, #388]	@ (800482c <main+0x95c>)
 80046a6:	f007 fc8f 	bl	800bfc8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80046aa:	2200      	movs	r2, #0
 80046ac:	4960      	ldr	r1, [pc, #384]	@ (8004830 <main+0x960>)
 80046ae:	485f      	ldr	r0, [pc, #380]	@ (800482c <main+0x95c>)
 80046b0:	f007 fd6c 	bl	800c18c <HAL_RTC_GetDate>
				          sTime.Minutes = (sTime.Minutes + 1) % 60;
 80046b4:	4b5c      	ldr	r3, [pc, #368]	@ (8004828 <main+0x958>)
 80046b6:	785b      	ldrb	r3, [r3, #1]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	4b5f      	ldr	r3, [pc, #380]	@ (8004838 <main+0x968>)
 80046bc:	fb83 1302 	smull	r1, r3, r3, r2
 80046c0:	4413      	add	r3, r2
 80046c2:	1159      	asrs	r1, r3, #5
 80046c4:	17d3      	asrs	r3, r2, #31
 80046c6:	1ac9      	subs	r1, r1, r3
 80046c8:	460b      	mov	r3, r1
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	1a5b      	subs	r3, r3, r1
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	1ad1      	subs	r1, r2, r3
 80046d2:	b2ca      	uxtb	r2, r1
 80046d4:	4b54      	ldr	r3, [pc, #336]	@ (8004828 <main+0x958>)
 80046d6:	705a      	strb	r2, [r3, #1]
				          needRedraw = 1;
 80046d8:	4b56      	ldr	r3, [pc, #344]	@ (8004834 <main+0x964>)
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e0dc      	b.n	800489a <main+0x9ca>
				      }
				      // Minutes -
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 200 && y <= 230) {
 80046e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004820 <main+0x950>)
 80046e2:	881b      	ldrh	r3, [r3, #0]
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	893a      	ldrh	r2, [r7, #8]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d82c      	bhi.n	8004746 <main+0x876>
 80046ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004820 <main+0x950>)
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	4619      	mov	r1, r3
 80046f4:	893a      	ldrh	r2, [r7, #8]
 80046f6:	88bb      	ldrh	r3, [r7, #4]
 80046f8:	4413      	add	r3, r2
 80046fa:	4299      	cmp	r1, r3
 80046fc:	dc23      	bgt.n	8004746 <main+0x876>
 80046fe:	4b49      	ldr	r3, [pc, #292]	@ (8004824 <main+0x954>)
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29b      	uxth	r3, r3
 8004704:	2bc7      	cmp	r3, #199	@ 0xc7
 8004706:	d91e      	bls.n	8004746 <main+0x876>
 8004708:	4b46      	ldr	r3, [pc, #280]	@ (8004824 <main+0x954>)
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	b29b      	uxth	r3, r3
 800470e:	2be6      	cmp	r3, #230	@ 0xe6
 8004710:	d819      	bhi.n	8004746 <main+0x876>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004712:	2200      	movs	r2, #0
 8004714:	4944      	ldr	r1, [pc, #272]	@ (8004828 <main+0x958>)
 8004716:	4845      	ldr	r0, [pc, #276]	@ (800482c <main+0x95c>)
 8004718:	f007 fc56 	bl	800bfc8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800471c:	2200      	movs	r2, #0
 800471e:	4944      	ldr	r1, [pc, #272]	@ (8004830 <main+0x960>)
 8004720:	4842      	ldr	r0, [pc, #264]	@ (800482c <main+0x95c>)
 8004722:	f007 fd33 	bl	800c18c <HAL_RTC_GetDate>
				          sTime.Minutes = (sTime.Minutes > 0) ? sTime.Minutes - 1 : 59;
 8004726:	4b40      	ldr	r3, [pc, #256]	@ (8004828 <main+0x958>)
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <main+0x868>
 800472e:	4b3e      	ldr	r3, [pc, #248]	@ (8004828 <main+0x958>)
 8004730:	785b      	ldrb	r3, [r3, #1]
 8004732:	3b01      	subs	r3, #1
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e000      	b.n	800473a <main+0x86a>
 8004738:	233b      	movs	r3, #59	@ 0x3b
 800473a:	4a3b      	ldr	r2, [pc, #236]	@ (8004828 <main+0x958>)
 800473c:	7053      	strb	r3, [r2, #1]
				          needRedraw = 1;
 800473e:	4b3d      	ldr	r3, [pc, #244]	@ (8004834 <main+0x964>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	e0a9      	b.n	800489a <main+0x9ca>
				      }
				      // Année +
				      else if (x >= col3 && x <= col3 + buttonSize && y >= 40 && y <= 70) {
 8004746:	4b36      	ldr	r3, [pc, #216]	@ (8004820 <main+0x950>)
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	88fa      	ldrh	r2, [r7, #6]
 800474e:	429a      	cmp	r2, r3
 8004750:	d830      	bhi.n	80047b4 <main+0x8e4>
 8004752:	4b33      	ldr	r3, [pc, #204]	@ (8004820 <main+0x950>)
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	4619      	mov	r1, r3
 800475a:	88fa      	ldrh	r2, [r7, #6]
 800475c:	88bb      	ldrh	r3, [r7, #4]
 800475e:	4413      	add	r3, r2
 8004760:	4299      	cmp	r1, r3
 8004762:	dc27      	bgt.n	80047b4 <main+0x8e4>
 8004764:	4b2f      	ldr	r3, [pc, #188]	@ (8004824 <main+0x954>)
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b27      	cmp	r3, #39	@ 0x27
 800476c:	d922      	bls.n	80047b4 <main+0x8e4>
 800476e:	4b2d      	ldr	r3, [pc, #180]	@ (8004824 <main+0x954>)
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b46      	cmp	r3, #70	@ 0x46
 8004776:	d81d      	bhi.n	80047b4 <main+0x8e4>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004778:	2200      	movs	r2, #0
 800477a:	492b      	ldr	r1, [pc, #172]	@ (8004828 <main+0x958>)
 800477c:	482b      	ldr	r0, [pc, #172]	@ (800482c <main+0x95c>)
 800477e:	f007 fc23 	bl	800bfc8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004782:	2200      	movs	r2, #0
 8004784:	492a      	ldr	r1, [pc, #168]	@ (8004830 <main+0x960>)
 8004786:	4829      	ldr	r0, [pc, #164]	@ (800482c <main+0x95c>)
 8004788:	f007 fd00 	bl	800c18c <HAL_RTC_GetDate>
				          if(sDate.Year < 99) {  // Limite pour format BCD
 800478c:	4b28      	ldr	r3, [pc, #160]	@ (8004830 <main+0x960>)
 800478e:	78db      	ldrb	r3, [r3, #3]
 8004790:	2b62      	cmp	r3, #98	@ 0x62
 8004792:	f200 8082 	bhi.w	800489a <main+0x9ca>
				              sDate.Year++;
 8004796:	4b26      	ldr	r3, [pc, #152]	@ (8004830 <main+0x960>)
 8004798:	78db      	ldrb	r3, [r3, #3]
 800479a:	3301      	adds	r3, #1
 800479c:	b2da      	uxtb	r2, r3
 800479e:	4b24      	ldr	r3, [pc, #144]	@ (8004830 <main+0x960>)
 80047a0:	70da      	strb	r2, [r3, #3]
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80047a2:	2200      	movs	r2, #0
 80047a4:	4922      	ldr	r1, [pc, #136]	@ (8004830 <main+0x960>)
 80047a6:	4821      	ldr	r0, [pc, #132]	@ (800482c <main+0x95c>)
 80047a8:	f007 fc6c 	bl	800c084 <HAL_RTC_SetDate>
				              needRedraw = 1;
 80047ac:	4b21      	ldr	r3, [pc, #132]	@ (8004834 <main+0x964>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
				          if(sDate.Year < 99) {  // Limite pour format BCD
 80047b2:	e072      	b.n	800489a <main+0x9ca>
				          }
				      }
				      // Année -
				      else if (x >= col3 && x <= col3 + buttonSize && y >= 105 && y <= 135) {
 80047b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004820 <main+0x950>)
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	88fa      	ldrh	r2, [r7, #6]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d83d      	bhi.n	800483c <main+0x96c>
 80047c0:	4b17      	ldr	r3, [pc, #92]	@ (8004820 <main+0x950>)
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	4619      	mov	r1, r3
 80047c8:	88fa      	ldrh	r2, [r7, #6]
 80047ca:	88bb      	ldrh	r3, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	4299      	cmp	r1, r3
 80047d0:	dc34      	bgt.n	800483c <main+0x96c>
 80047d2:	4b14      	ldr	r3, [pc, #80]	@ (8004824 <main+0x954>)
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b68      	cmp	r3, #104	@ 0x68
 80047da:	d92f      	bls.n	800483c <main+0x96c>
 80047dc:	4b11      	ldr	r3, [pc, #68]	@ (8004824 <main+0x954>)
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2b87      	cmp	r3, #135	@ 0x87
 80047e4:	d82a      	bhi.n	800483c <main+0x96c>

				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80047e6:	2200      	movs	r2, #0
 80047e8:	490f      	ldr	r1, [pc, #60]	@ (8004828 <main+0x958>)
 80047ea:	4810      	ldr	r0, [pc, #64]	@ (800482c <main+0x95c>)
 80047ec:	f007 fbec 	bl	800bfc8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80047f0:	2200      	movs	r2, #0
 80047f2:	490f      	ldr	r1, [pc, #60]	@ (8004830 <main+0x960>)
 80047f4:	480d      	ldr	r0, [pc, #52]	@ (800482c <main+0x95c>)
 80047f6:	f007 fcc9 	bl	800c18c <HAL_RTC_GetDate>
				          if(sDate.Year > 0) {
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <main+0x960>)
 80047fc:	78db      	ldrb	r3, [r3, #3]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d04b      	beq.n	800489a <main+0x9ca>
				              sDate.Year--;
 8004802:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <main+0x960>)
 8004804:	78db      	ldrb	r3, [r3, #3]
 8004806:	3b01      	subs	r3, #1
 8004808:	b2da      	uxtb	r2, r3
 800480a:	4b09      	ldr	r3, [pc, #36]	@ (8004830 <main+0x960>)
 800480c:	70da      	strb	r2, [r3, #3]
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800480e:	2200      	movs	r2, #0
 8004810:	4907      	ldr	r1, [pc, #28]	@ (8004830 <main+0x960>)
 8004812:	4806      	ldr	r0, [pc, #24]	@ (800482c <main+0x95c>)
 8004814:	f007 fc36 	bl	800c084 <HAL_RTC_SetDate>
				              needRedraw = 1;
 8004818:	4b06      	ldr	r3, [pc, #24]	@ (8004834 <main+0x964>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
				          if(sDate.Year > 0) {
 800481e:	e03c      	b.n	800489a <main+0x9ca>
 8004820:	20005e90 	.word	0x20005e90
 8004824:	20005e92 	.word	0x20005e92
 8004828:	2000510c 	.word	0x2000510c
 800482c:	20005ec8 	.word	0x20005ec8
 8004830:	20005120 	.word	0x20005120
 8004834:	20004ecc 	.word	0x20004ecc
 8004838:	88888889 	.word	0x88888889
				          }
				      }
				      // Bouton Valider
				      else if (x >= 340 && x <= 440 && y >= 220 && y <= 250) {
 800483c:	4b27      	ldr	r3, [pc, #156]	@ (80048dc <main+0xa0c>)
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8004846:	d328      	bcc.n	800489a <main+0x9ca>
 8004848:	4b24      	ldr	r3, [pc, #144]	@ (80048dc <main+0xa0c>)
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8004852:	d822      	bhi.n	800489a <main+0x9ca>
 8004854:	4b22      	ldr	r3, [pc, #136]	@ (80048e0 <main+0xa10>)
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	b29b      	uxth	r3, r3
 800485a:	2bdb      	cmp	r3, #219	@ 0xdb
 800485c:	d91d      	bls.n	800489a <main+0x9ca>
 800485e:	4b20      	ldr	r3, [pc, #128]	@ (80048e0 <main+0xa10>)
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	2bfa      	cmp	r3, #250	@ 0xfa
 8004866:	d818      	bhi.n	800489a <main+0x9ca>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004868:	2200      	movs	r2, #0
 800486a:	491e      	ldr	r1, [pc, #120]	@ (80048e4 <main+0xa14>)
 800486c:	481e      	ldr	r0, [pc, #120]	@ (80048e8 <main+0xa18>)
 800486e:	f007 fbab 	bl	800bfc8 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004872:	2200      	movs	r2, #0
 8004874:	491d      	ldr	r1, [pc, #116]	@ (80048ec <main+0xa1c>)
 8004876:	481c      	ldr	r0, [pc, #112]	@ (80048e8 <main+0xa18>)
 8004878:	f007 fc88 	bl	800c18c <HAL_RTC_GetDate>
				          // Mise à jour de la date et de l'heure
				          HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800487c:	2200      	movs	r2, #0
 800487e:	4919      	ldr	r1, [pc, #100]	@ (80048e4 <main+0xa14>)
 8004880:	4819      	ldr	r0, [pc, #100]	@ (80048e8 <main+0xa18>)
 8004882:	f007 fb07 	bl	800be94 <HAL_RTC_SetTime>
				          HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8004886:	2200      	movs	r2, #0
 8004888:	4918      	ldr	r1, [pc, #96]	@ (80048ec <main+0xa1c>)
 800488a:	4817      	ldr	r0, [pc, #92]	@ (80048e8 <main+0xa18>)
 800488c:	f007 fbfa 	bl	800c084 <HAL_RTC_SetDate>
				          flag = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
				          needRedraw = 1;
 8004894:	4b16      	ldr	r3, [pc, #88]	@ (80048f0 <main+0xa20>)
 8004896:	2201      	movs	r2, #1
 8004898:	601a      	str	r2, [r3, #0]
				      }

				      // Si une valeur a été modifiée, on met à jour la RTC
				      if (needRedraw) {
 800489a:	4b15      	ldr	r3, [pc, #84]	@ (80048f0 <main+0xa20>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d019      	beq.n	80048d6 <main+0xa06>
				          if (flag == 3) {  // Si on est toujours sur la page de réglage
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d116      	bne.n	80048d6 <main+0xa06>
				              HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80048a8:	2200      	movs	r2, #0
 80048aa:	490e      	ldr	r1, [pc, #56]	@ (80048e4 <main+0xa14>)
 80048ac:	480e      	ldr	r0, [pc, #56]	@ (80048e8 <main+0xa18>)
 80048ae:	f007 faf1 	bl	800be94 <HAL_RTC_SetTime>
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80048b2:	2200      	movs	r2, #0
 80048b4:	490d      	ldr	r1, [pc, #52]	@ (80048ec <main+0xa1c>)
 80048b6:	480c      	ldr	r0, [pc, #48]	@ (80048e8 <main+0xa18>)
 80048b8:	f007 fbe4 	bl	800c084 <HAL_RTC_SetDate>
			  if (flag == 0 && x > 40 && x < 220 && y > 60 && y < 220) {
 80048bc:	e00b      	b.n	80048d6 <main+0xa06>
 80048be:	e00a      	b.n	80048d6 <main+0xa06>
				          }
				      }
				  }

		  } else if (!TS_State.touchDetected) {
 80048c0:	4b0c      	ldr	r3, [pc, #48]	@ (80048f4 <main+0xa24>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f47f ab53 	bne.w	8003f72 <main+0xa2>
			  debounce = 0; // Reset debounce flag when touch is released
 80048cc:	4b0a      	ldr	r3, [pc, #40]	@ (80048f8 <main+0xa28>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	f7ff bb4e 	b.w	8003f72 <main+0xa2>
			  if (flag == 0 && x > 40 && x < 220 && y > 60 && y < 220) {
 80048d6:	bf00      	nop
         if (needRedraw) {
 80048d8:	f7ff bb4b 	b.w	8003f72 <main+0xa2>
 80048dc:	20005e90 	.word	0x20005e90
 80048e0:	20005e92 	.word	0x20005e92
 80048e4:	2000510c 	.word	0x2000510c
 80048e8:	20005ec8 	.word	0x20005ec8
 80048ec:	20005120 	.word	0x20005120
 80048f0:	20004ecc 	.word	0x20004ecc
 80048f4:	20005e64 	.word	0x20005e64
 80048f8:	20005e94 	.word	0x20005e94

080048fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b094      	sub	sp, #80	@ 0x50
 8004900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004902:	f107 0320 	add.w	r3, r7, #32
 8004906:	2230      	movs	r2, #48	@ 0x30
 8004908:	2100      	movs	r1, #0
 800490a:	4618      	mov	r0, r3
 800490c:	f00f fc40 	bl	8014190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004920:	f006 f95a 	bl	800abd8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004924:	4b2c      	ldr	r3, [pc, #176]	@ (80049d8 <SystemClock_Config+0xdc>)
 8004926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004928:	4a2b      	ldr	r2, [pc, #172]	@ (80049d8 <SystemClock_Config+0xdc>)
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800492e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004930:	4b29      	ldr	r3, [pc, #164]	@ (80049d8 <SystemClock_Config+0xdc>)
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800493c:	4b27      	ldr	r3, [pc, #156]	@ (80049dc <SystemClock_Config+0xe0>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a26      	ldr	r2, [pc, #152]	@ (80049dc <SystemClock_Config+0xe0>)
 8004942:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4b24      	ldr	r3, [pc, #144]	@ (80049dc <SystemClock_Config+0xe0>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004954:	2309      	movs	r3, #9
 8004956:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004958:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800495c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800495e:	2301      	movs	r3, #1
 8004960:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004962:	2302      	movs	r3, #2
 8004964:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004966:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800496a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800496c:	2319      	movs	r3, #25
 800496e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8004970:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 8004974:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004976:	2302      	movs	r3, #2
 8004978:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800497a:	2309      	movs	r3, #9
 800497c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800497e:	f107 0320 	add.w	r3, r7, #32
 8004982:	4618      	mov	r0, r3
 8004984:	f006 f988 	bl	800ac98 <HAL_RCC_OscConfig>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800498e:	f000 f8db 	bl	8004b48 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004992:	f006 f931 	bl	800abf8 <HAL_PWREx_EnableOverDrive>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d001      	beq.n	80049a0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800499c:	f000 f8d4 	bl	8004b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80049a0:	230f      	movs	r3, #15
 80049a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80049a4:	2302      	movs	r3, #2
 80049a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80049ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80049b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80049b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80049b8:	f107 030c 	add.w	r3, r7, #12
 80049bc:	2107      	movs	r1, #7
 80049be:	4618      	mov	r0, r3
 80049c0:	f006 fc0e 	bl	800b1e0 <HAL_RCC_ClockConfig>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80049ca:	f000 f8bd 	bl	8004b48 <Error_Handler>
  }
}
 80049ce:	bf00      	nop
 80049d0:	3750      	adds	r7, #80	@ 0x50
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800
 80049dc:	40007000 	.word	0x40007000

080049e0 <TouchTimer_Init>:

/* USER CODE BEGIN 4 */
void TouchTimer_Init() {
 80049e0:	b598      	push	{r3, r4, r7, lr}
 80049e2:	af00      	add	r7, sp, #0
    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80049e4:	f001 fb9a 	bl	800611c <BSP_LCD_GetXSize>
 80049e8:	4603      	mov	r3, r0
 80049ea:	b29c      	uxth	r4, r3
 80049ec:	f001 fbaa 	bl	8006144 <BSP_LCD_GetYSize>
 80049f0:	4603      	mov	r3, r0
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	4619      	mov	r1, r3
 80049f6:	4620      	mov	r0, r4
 80049f8:	f002 fe96 	bl	8007728 <BSP_TS_Init>

    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80049fc:	4808      	ldr	r0, [pc, #32]	@ (8004a20 <TouchTimer_Init+0x40>)
 80049fe:	f009 fa16 	bl	800de2e <HAL_TIM_Base_Init>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <TouchTimer_Init+0x2c>
        while (1);
 8004a08:	bf00      	nop
 8004a0a:	e7fd      	b.n	8004a08 <TouchTimer_Init+0x28>
    }
    if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 8004a0c:	4804      	ldr	r0, [pc, #16]	@ (8004a20 <TouchTimer_Init+0x40>)
 8004a0e:	f009 fa65 	bl	800dedc <HAL_TIM_Base_Start_IT>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <TouchTimer_Init+0x3c>
        while (1);
 8004a18:	bf00      	nop
 8004a1a:	e7fd      	b.n	8004a18 <TouchTimer_Init+0x38>
    }
}
 8004a1c:	bf00      	nop
 8004a1e:	bd98      	pop	{r3, r4, r7, pc}
 8004a20:	2000607c 	.word	0x2000607c

08004a24 <PollTouchScreen>:

void PollTouchScreen(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b08c      	sub	sp, #48	@ 0x30
 8004a28:	af00      	add	r7, sp, #0
	static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
	TS_StateTypeDef ts;                   /* Actual touch state from the touch sensor used from BSP package */
	BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API)*/
 8004a2a:	1d3b      	adds	r3, r7, #4
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f002 febb 	bl	80077a8 <BSP_TS_GetState>
	TS_State.touchDetected = ts.touchDetected;  /* Store pressed state */
 8004a32:	793a      	ldrb	r2, [r7, #4]
 8004a34:	4b10      	ldr	r3, [pc, #64]	@ (8004a78 <PollTouchScreen+0x54>)
 8004a36:	701a      	strb	r2, [r3, #0]

	/* Check if the touch is pressed */
	if ((prev_state.touchDetected != ts.touchDetected))
 8004a38:	4b10      	ldr	r3, [pc, #64]	@ (8004a7c <PollTouchScreen+0x58>)
 8004a3a:	781a      	ldrb	r2, [r3, #0]
 8004a3c:	793b      	ldrb	r3, [r7, #4]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d016      	beq.n	8004a70 <PollTouchScreen+0x4c>
	{
		prev_state.touchDetected = ts.touchDetected;
 8004a42:	793a      	ldrb	r2, [r7, #4]
 8004a44:	4b0d      	ldr	r3, [pc, #52]	@ (8004a7c <PollTouchScreen+0x58>)
 8004a46:	701a      	strb	r2, [r3, #0]
		/* Check touch variations */
		if ((ts.touchX[0] != 0) && (ts.touchY[0] != 0))
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d008      	beq.n	8004a60 <PollTouchScreen+0x3c>
 8004a4e:	8a3b      	ldrh	r3, [r7, #16]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <PollTouchScreen+0x3c>
		{
		  prev_state.touchX[0] = ts.touchX[0];
 8004a54:	88fa      	ldrh	r2, [r7, #6]
 8004a56:	4b09      	ldr	r3, [pc, #36]	@ (8004a7c <PollTouchScreen+0x58>)
 8004a58:	805a      	strh	r2, [r3, #2]
		  prev_state.touchY[0] = ts.touchY[0];
 8004a5a:	8a3a      	ldrh	r2, [r7, #16]
 8004a5c:	4b07      	ldr	r3, [pc, #28]	@ (8004a7c <PollTouchScreen+0x58>)
 8004a5e:	819a      	strh	r2, [r3, #12]
		}
		x = prev_state.touchX[0];
 8004a60:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <PollTouchScreen+0x58>)
 8004a62:	885a      	ldrh	r2, [r3, #2]
 8004a64:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <PollTouchScreen+0x5c>)
 8004a66:	801a      	strh	r2, [r3, #0]
		y = prev_state.touchY[0];
 8004a68:	4b04      	ldr	r3, [pc, #16]	@ (8004a7c <PollTouchScreen+0x58>)
 8004a6a:	899a      	ldrh	r2, [r3, #12]
 8004a6c:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <PollTouchScreen+0x60>)
 8004a6e:	801a      	strh	r2, [r3, #0]
	}
}
 8004a70:	bf00      	nop
 8004a72:	3730      	adds	r7, #48	@ 0x30
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20005e64 	.word	0x20005e64
 8004a7c:	20005e9c 	.word	0x20005e9c
 8004a80:	20005e90 	.word	0x20005e90
 8004a84:	20005e92 	.word	0x20005e92

08004a88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */
  //routine de l'écran tactile
  if (htim->Instance == TIM3)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d103      	bne.n	8004aa2 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
	  PollTouchScreen();
 8004a9a:	f7ff ffc3 	bl	8004a24 <PollTouchScreen>
 	  date_Heure();
 8004a9e:	f7fc fa9d 	bl	8000fdc <date_Heure>

  }
  //routine d'interruption pour un arret à 1 minute (Annemometre)
  if (htim->Instance == TIM6) {
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a18      	ldr	r2, [pc, #96]	@ (8004b08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d105      	bne.n	8004ab8 <HAL_TIM_PeriodElapsedCallback+0x30>
	  // Timer 1 minute atteint
	minute_flag = 1; // Activer le flag indiquant la fin de 1 minute
 8004aac:	4b17      	ldr	r3, [pc, #92]	@ (8004b0c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	701a      	strb	r2, [r3, #0]
	  printf("Minute flag set!\r\n"); // Pour vérifier que l'interruption est déclenchée
 8004ab2:	4817      	ldr	r0, [pc, #92]	@ (8004b10 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004ab4:	f00f fa38 	bl	8013f28 <puts>
  }

  //capteur I2C
  if(htim->Instance == TIM7) {
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a15      	ldr	r2, [pc, #84]	@ (8004b14 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d11b      	bne.n	8004afa <HAL_TIM_PeriodElapsedCallback+0x72>
      timer_15min_counter++;
 8004ac2:	4b15      	ldr	r3, [pc, #84]	@ (8004b18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3301      	adds	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	4b12      	ldr	r3, [pc, #72]	@ (8004b18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004ace:	801a      	strh	r2, [r3, #0]
      printf("Counter: %d\n", timer_15min_counter);  // Debug
 8004ad0:	4b11      	ldr	r3, [pc, #68]	@ (8004b18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4810      	ldr	r0, [pc, #64]	@ (8004b1c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004ada:	f00f f9bd 	bl	8013e58 <iprintf>

      if(timer_15min_counter >= TIMER_15MIN_MAX) {
 8004ade:	4b0e      	ldr	r3, [pc, #56]	@ (8004b18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	223c      	movs	r2, #60	@ 0x3c
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d307      	bcc.n	8004afa <HAL_TIM_PeriodElapsedCallback+0x72>
          printf("Tentative d'enregistrement...\n");  // Debug
 8004aea:	480d      	ldr	r0, [pc, #52]	@ (8004b20 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004aec:	f00f fa1c 	bl	8013f28 <puts>
          log_weather_data();
 8004af0:	f7fe f894 	bl	8002c1c <log_weather_data>
          timer_15min_counter = 0;
 8004af4:	4b08      	ldr	r3, [pc, #32]	@ (8004b18 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	801a      	strh	r2, [r3, #0]
      }
  }
  /* USER CODE END Callback 1 */
}
 8004afa:	bf00      	nop
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40001000 	.word	0x40001000
 8004b0c:	20005c50 	.word	0x20005c50
 8004b10:	08016828 	.word	0x08016828
 8004b14:	40001400 	.word	0x40001400
 8004b18:	20005e98 	.word	0x20005e98
 8004b1c:	0801683c 	.word	0x0801683c
 8004b20:	0801684c 	.word	0x0801684c

08004b24 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
/* Place your implementation of fputc here */
/* e.g. write a character to the USART1 and Loop until the end of transmission */
HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 100);
 8004b2c:	1d39      	adds	r1, r7, #4
 8004b2e:	2364      	movs	r3, #100	@ 0x64
 8004b30:	2201      	movs	r2, #1
 8004b32:	4804      	ldr	r0, [pc, #16]	@ (8004b44 <__io_putchar+0x20>)
 8004b34:	f00a f888 	bl	800ec48 <HAL_UART_Transmit>
return ch;
 8004b38:	687b      	ldr	r3, [r7, #4]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20006160 	.word	0x20006160

08004b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b4c:	b672      	cpsid	i
}
 8004b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004b50:	bf00      	nop
 8004b52:	e7fd      	b.n	8004b50 <Error_Handler+0x8>

08004b54 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b090      	sub	sp, #64	@ 0x40
 8004b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004b5a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	605a      	str	r2, [r3, #4]
 8004b64:	609a      	str	r2, [r3, #8]
 8004b66:	60da      	str	r2, [r3, #12]
 8004b68:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8004b6e:	463b      	mov	r3, r7
 8004b70:	2228      	movs	r2, #40	@ 0x28
 8004b72:	2100      	movs	r1, #0
 8004b74:	4618      	mov	r0, r3
 8004b76:	f00f fb0b 	bl	8014190 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004b7c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c7c <MX_RTC_Init+0x128>)
 8004b7e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004b80:	4b3d      	ldr	r3, [pc, #244]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004b86:	4b3c      	ldr	r3, [pc, #240]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004b88:	227f      	movs	r2, #127	@ 0x7f
 8004b8a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004b8e:	22ff      	movs	r2, #255	@ 0xff
 8004b90:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004b92:	4b39      	ldr	r3, [pc, #228]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004b98:	4b37      	ldr	r3, [pc, #220]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004b9e:	4b36      	ldr	r3, [pc, #216]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004ba4:	4834      	ldr	r0, [pc, #208]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004ba6:	f007 f8f1 	bl	800bd8c <HAL_RTC_Init>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8004bb0:	f7ff ffca 	bl	8004b48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004bce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4828      	ldr	r0, [pc, #160]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004bd8:	f007 f95c 	bl	800be94 <HAL_RTC_SetTime>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8004be2:	f7ff ffb1 	bl	8004b48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004be6:	2301      	movs	r3, #1
 8004be8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 1;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004bfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004c02:	2200      	movs	r2, #0
 8004c04:	4619      	mov	r1, r3
 8004c06:	481c      	ldr	r0, [pc, #112]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004c08:	f007 fa3c 	bl	800c084 <HAL_RTC_SetDate>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8004c12:	f7ff ff99 	bl	8004b48 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8004c40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8004c46:	463b      	mov	r3, r7
 8004c48:	2200      	movs	r2, #0
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	480a      	ldr	r0, [pc, #40]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004c4e:	f007 faed 	bl	800c22c <HAL_RTC_SetAlarm_IT>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8004c58:	f7ff ff76 	bl	8004b48 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4805      	ldr	r0, [pc, #20]	@ (8004c78 <MX_RTC_Init+0x124>)
 8004c62:	f007 fd35 	bl	800c6d0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8004c6c:	f7ff ff6c 	bl	8004b48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004c70:	bf00      	nop
 8004c72:	3740      	adds	r7, #64	@ 0x40
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20005ec8 	.word	0x20005ec8
 8004c7c:	40002800 	.word	0x40002800

08004c80 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b0a4      	sub	sp, #144	@ 0x90
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c88:	f107 030c 	add.w	r3, r7, #12
 8004c8c:	2284      	movs	r2, #132	@ 0x84
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4618      	mov	r0, r3
 8004c92:	f00f fa7d 	bl	8014190 <memset>
  if(rtcHandle->Instance==RTC)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	@ (8004cf4 <HAL_RTC_MspInit+0x74>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d124      	bne.n	8004cea <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004ca0:	2320      	movs	r3, #32
 8004ca2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004ca4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004caa:	f107 030c 	add.w	r3, r7, #12
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f006 fc7c 	bl	800b5ac <HAL_RCCEx_PeriphCLKConfig>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004cba:	f7ff ff45 	bl	8004b48 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf8 <HAL_RTC_MspInit+0x78>)
 8004cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf8 <HAL_RTC_MspInit+0x78>)
 8004cc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cc8:	6713      	str	r3, [r2, #112]	@ 0x70

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2100      	movs	r1, #0
 8004cce:	2003      	movs	r0, #3
 8004cd0:	f003 fd3b 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004cd4:	2003      	movs	r0, #3
 8004cd6:	f003 fd54 	bl	8008782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2100      	movs	r1, #0
 8004cde:	2029      	movs	r0, #41	@ 0x29
 8004ce0:	f003 fd33 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004ce4:	2029      	movs	r0, #41	@ 0x29
 8004ce6:	f003 fd4c 	bl	8008782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004cea:	bf00      	nop
 8004cec:	3790      	adds	r7, #144	@ 0x90
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40002800 	.word	0x40002800
 8004cf8:	40023800 	.word	0x40023800

08004cfc <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8004d00:	4b0c      	ldr	r3, [pc, #48]	@ (8004d34 <MX_SDMMC1_SD_Init+0x38>)
 8004d02:	4a0d      	ldr	r2, [pc, #52]	@ (8004d38 <MX_SDMMC1_SD_Init+0x3c>)
 8004d04:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004d06:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <MX_SDMMC1_SD_Init+0x38>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004d0c:	4b09      	ldr	r3, [pc, #36]	@ (8004d34 <MX_SDMMC1_SD_Init+0x38>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004d12:	4b08      	ldr	r3, [pc, #32]	@ (8004d34 <MX_SDMMC1_SD_Init+0x38>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004d18:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <MX_SDMMC1_SD_Init+0x38>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004d1e:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <MX_SDMMC1_SD_Init+0x38>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004d24:	4b03      	ldr	r3, [pc, #12]	@ (8004d34 <MX_SDMMC1_SD_Init+0x38>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8004d2a:	bf00      	nop
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	20005ee8 	.word	0x20005ee8
 8004d38:	40012c00 	.word	0x40012c00

08004d3c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b0ac      	sub	sp, #176	@ 0xb0
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	60da      	str	r2, [r3, #12]
 8004d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d54:	f107 0318 	add.w	r3, r7, #24
 8004d58:	2284      	movs	r2, #132	@ 0x84
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f00f fa17 	bl	8014190 <memset>
  if(sdHandle->Instance==SDMMC1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a74      	ldr	r2, [pc, #464]	@ (8004f38 <HAL_SD_MspInit+0x1fc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	f040 80e0 	bne.w	8004f2e <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8004d6e:	f44f 0320 	mov.w	r3, #10485760	@ 0xa00000
 8004d72:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d80:	f107 0318 	add.w	r3, r7, #24
 8004d84:	4618      	mov	r0, r3
 8004d86:	f006 fc11 	bl	800b5ac <HAL_RCCEx_PeriphCLKConfig>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8004d90:	f7ff feda 	bl	8004b48 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8004d94:	4b69      	ldr	r3, [pc, #420]	@ (8004f3c <HAL_SD_MspInit+0x200>)
 8004d96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d98:	4a68      	ldr	r2, [pc, #416]	@ (8004f3c <HAL_SD_MspInit+0x200>)
 8004d9a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004d9e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004da0:	4b66      	ldr	r3, [pc, #408]	@ (8004f3c <HAL_SD_MspInit+0x200>)
 8004da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dac:	4b63      	ldr	r3, [pc, #396]	@ (8004f3c <HAL_SD_MspInit+0x200>)
 8004dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db0:	4a62      	ldr	r2, [pc, #392]	@ (8004f3c <HAL_SD_MspInit+0x200>)
 8004db2:	f043 0304 	orr.w	r3, r3, #4
 8004db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004db8:	4b60      	ldr	r3, [pc, #384]	@ (8004f3c <HAL_SD_MspInit+0x200>)
 8004dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dbc:	f003 0304 	and.w	r3, r3, #4
 8004dc0:	613b      	str	r3, [r7, #16]
 8004dc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dc4:	4b5d      	ldr	r3, [pc, #372]	@ (8004f3c <HAL_SD_MspInit+0x200>)
 8004dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc8:	4a5c      	ldr	r2, [pc, #368]	@ (8004f3c <HAL_SD_MspInit+0x200>)
 8004dca:	f043 0308 	orr.w	r3, r3, #8
 8004dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8004f3c <HAL_SD_MspInit+0x200>)
 8004dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8004ddc:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8004de0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de4:	2302      	movs	r3, #2
 8004de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df0:	2303      	movs	r3, #3
 8004df2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004df6:	230c      	movs	r3, #12
 8004df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dfc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004e00:	4619      	mov	r1, r3
 8004e02:	484f      	ldr	r0, [pc, #316]	@ (8004f40 <HAL_SD_MspInit+0x204>)
 8004e04:	f004 face 	bl	80093a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004e08:	2304      	movs	r3, #4
 8004e0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0e:	2302      	movs	r3, #2
 8004e10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8004e20:	230c      	movs	r3, #12
 8004e22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4845      	ldr	r0, [pc, #276]	@ (8004f44 <HAL_SD_MspInit+0x208>)
 8004e2e:	f004 fab9 	bl	80093a4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8004e32:	4b45      	ldr	r3, [pc, #276]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e34:	4a45      	ldr	r2, [pc, #276]	@ (8004f4c <HAL_SD_MspInit+0x210>)
 8004e36:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8004e38:	4b43      	ldr	r3, [pc, #268]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004e3e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e40:	4b41      	ldr	r3, [pc, #260]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e46:	4b40      	ldr	r3, [pc, #256]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e4c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e52:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004e54:	4b3c      	ldr	r3, [pc, #240]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004e5a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004e5c:	4b3a      	ldr	r3, [pc, #232]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e62:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8004e64:	4b38      	ldr	r3, [pc, #224]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e66:	2220      	movs	r2, #32
 8004e68:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e6a:	4b37      	ldr	r3, [pc, #220]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004e70:	4b35      	ldr	r3, [pc, #212]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e72:	2204      	movs	r2, #4
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004e76:	4b34      	ldr	r3, [pc, #208]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e78:	2203      	movs	r2, #3
 8004e7a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004e7c:	4b32      	ldr	r3, [pc, #200]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e7e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004e82:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004e84:	4b30      	ldr	r3, [pc, #192]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e86:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8004e8c:	482e      	ldr	r0, [pc, #184]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004e8e:	f003 fc93 	bl	80087b8 <HAL_DMA_Init>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8004e98:	f7ff fe56 	bl	8004b48 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004ea0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ea2:	4a29      	ldr	r2, [pc, #164]	@ (8004f48 <HAL_SD_MspInit+0x20c>)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8004ea8:	4b29      	ldr	r3, [pc, #164]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8004f54 <HAL_SD_MspInit+0x218>)
 8004eac:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8004eae:	4b28      	ldr	r3, [pc, #160]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004eb0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004eb4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004eb6:	4b26      	ldr	r3, [pc, #152]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004eb8:	2240      	movs	r2, #64	@ 0x40
 8004eba:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ebc:	4b24      	ldr	r3, [pc, #144]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ec2:	4b23      	ldr	r3, [pc, #140]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004ec4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ec8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004eca:	4b21      	ldr	r3, [pc, #132]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004ecc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004ed0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004ed4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004ed8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8004eda:	4b1d      	ldr	r3, [pc, #116]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004edc:	2220      	movs	r2, #32
 8004ede:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004ee8:	2204      	movs	r2, #4
 8004eea:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004eec:	4b18      	ldr	r3, [pc, #96]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004eee:	2203      	movs	r2, #3
 8004ef0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004ef2:	4b17      	ldr	r3, [pc, #92]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004ef4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004ef8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004efa:	4b15      	ldr	r3, [pc, #84]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004efc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8004f02:	4813      	ldr	r0, [pc, #76]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004f04:	f003 fc58 	bl	80087b8 <HAL_DMA_Init>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8004f0e:	f7ff fe1b 	bl	8004b48 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a0e      	ldr	r2, [pc, #56]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004f16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004f18:	4a0d      	ldr	r2, [pc, #52]	@ (8004f50 <HAL_SD_MspInit+0x214>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2100      	movs	r1, #0
 8004f22:	2031      	movs	r0, #49	@ 0x31
 8004f24:	f003 fc11 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8004f28:	2031      	movs	r0, #49	@ 0x31
 8004f2a:	f003 fc2a 	bl	8008782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8004f2e:	bf00      	nop
 8004f30:	37b0      	adds	r7, #176	@ 0xb0
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	40020800 	.word	0x40020800
 8004f44:	40020c00 	.word	0x40020c00
 8004f48:	20005f6c 	.word	0x20005f6c
 8004f4c:	40026458 	.word	0x40026458
 8004f50:	20005fcc 	.word	0x20005fcc
 8004f54:	400264a0 	.word	0x400264a0

08004f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f9c <HAL_MspInit+0x44>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	4a0e      	ldr	r2, [pc, #56]	@ (8004f9c <HAL_MspInit+0x44>)
 8004f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f9c <HAL_MspInit+0x44>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f72:	607b      	str	r3, [r7, #4]
 8004f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f76:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <HAL_MspInit+0x44>)
 8004f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7a:	4a08      	ldr	r2, [pc, #32]	@ (8004f9c <HAL_MspInit+0x44>)
 8004f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f82:	4b06      	ldr	r3, [pc, #24]	@ (8004f9c <HAL_MspInit+0x44>)
 8004f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f8a:	603b      	str	r3, [r7, #0]
 8004f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	40023800 	.word	0x40023800

08004fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fa4:	bf00      	nop
 8004fa6:	e7fd      	b.n	8004fa4 <NMI_Handler+0x4>

08004fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fac:	bf00      	nop
 8004fae:	e7fd      	b.n	8004fac <HardFault_Handler+0x4>

08004fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <MemManage_Handler+0x4>

08004fb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fbc:	bf00      	nop
 8004fbe:	e7fd      	b.n	8004fbc <BusFault_Handler+0x4>

08004fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <UsageFault_Handler+0x4>

08004fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fda:	bf00      	nop
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fe8:	bf00      	nop
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ff6:	f002 fe5b 	bl	8007cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8005004:	4802      	ldr	r0, [pc, #8]	@ (8005010 <RTC_WKUP_IRQHandler+0x10>)
 8005006:	f007 fc25 	bl	800c854 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20005ec8 	.word	0x20005ec8

08005014 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005018:	4802      	ldr	r0, [pc, #8]	@ (8005024 <TIM1_CC_IRQHandler+0x10>)
 800501a:	f009 f82e 	bl	800e07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20006030 	.word	0x20006030

08005028 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800502c:	4802      	ldr	r0, [pc, #8]	@ (8005038 <TIM3_IRQHandler+0x10>)
 800502e:	f009 f824 	bl	800e07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	2000607c 	.word	0x2000607c

0800503c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8005040:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005044:	f004 fc98 	bl	8009978 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005048:	bf00      	nop
 800504a:	bd80      	pop	{r7, pc}

0800504c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms (A and B) interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005050:	4802      	ldr	r0, [pc, #8]	@ (800505c <RTC_Alarm_IRQHandler+0x10>)
 8005052:	f007 fa2f 	bl	800c4b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005056:	bf00      	nop
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20005ec8 	.word	0x20005ec8

08005060 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8005064:	4802      	ldr	r0, [pc, #8]	@ (8005070 <SDMMC1_IRQHandler+0x10>)
 8005066:	f008 f849 	bl	800d0fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800506a:	bf00      	nop
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20005ee8 	.word	0x20005ee8

08005074 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005078:	4802      	ldr	r0, [pc, #8]	@ (8005084 <TIM6_DAC_IRQHandler+0x10>)
 800507a:	f008 fffe 	bl	800e07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	200060c8 	.word	0x200060c8

08005088 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800508c:	4802      	ldr	r0, [pc, #8]	@ (8005098 <TIM7_IRQHandler+0x10>)
 800508e:	f008 fff4 	bl	800e07a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005092:	bf00      	nop
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20006114 	.word	0x20006114

0800509c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80050a0:	4802      	ldr	r0, [pc, #8]	@ (80050ac <DMA2_Stream3_IRQHandler+0x10>)
 80050a2:	f003 fcb7 	bl	8008a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80050a6:	bf00      	nop
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	20005f6c 	.word	0x20005f6c

080050b0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 80050b4:	4802      	ldr	r0, [pc, #8]	@ (80050c0 <DMA2_Stream6_IRQHandler+0x10>)
 80050b6:	f003 fcad 	bl	8008a14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	20005fcc 	.word	0x20005fcc

080050c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
  return 1;
 80050c8:	2301      	movs	r3, #1
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <_kill>:

int _kill(int pid, int sig)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050de:	f00f f8a9 	bl	8014234 <__errno>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2216      	movs	r2, #22
 80050e6:	601a      	str	r2, [r3, #0]
  return -1;
 80050e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_exit>:

void _exit (int status)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ffe7 	bl	80050d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005106:	bf00      	nop
 8005108:	e7fd      	b.n	8005106 <_exit+0x12>

0800510a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b086      	sub	sp, #24
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005116:	2300      	movs	r3, #0
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	e00a      	b.n	8005132 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800511c:	f3af 8000 	nop.w
 8005120:	4601      	mov	r1, r0
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	60ba      	str	r2, [r7, #8]
 8005128:	b2ca      	uxtb	r2, r1
 800512a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	3301      	adds	r3, #1
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	429a      	cmp	r2, r3
 8005138:	dbf0      	blt.n	800511c <_read+0x12>
  }

  return len;
 800513a:	687b      	ldr	r3, [r7, #4]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005150:	2300      	movs	r3, #0
 8005152:	617b      	str	r3, [r7, #20]
 8005154:	e009      	b.n	800516a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	60ba      	str	r2, [r7, #8]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fce0 	bl	8004b24 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	3301      	adds	r3, #1
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	429a      	cmp	r2, r3
 8005170:	dbf1      	blt.n	8005156 <_write+0x12>
  }
  return len;
 8005172:	687b      	ldr	r3, [r7, #4]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <_close>:

int _close(int file)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005184:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80051a4:	605a      	str	r2, [r3, #4]
  return 0;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <_isatty>:

int _isatty(int file)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80051bc:	2301      	movs	r3, #1
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051ec:	4a14      	ldr	r2, [pc, #80]	@ (8005240 <_sbrk+0x5c>)
 80051ee:	4b15      	ldr	r3, [pc, #84]	@ (8005244 <_sbrk+0x60>)
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051f8:	4b13      	ldr	r3, [pc, #76]	@ (8005248 <_sbrk+0x64>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d102      	bne.n	8005206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005200:	4b11      	ldr	r3, [pc, #68]	@ (8005248 <_sbrk+0x64>)
 8005202:	4a12      	ldr	r2, [pc, #72]	@ (800524c <_sbrk+0x68>)
 8005204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005206:	4b10      	ldr	r3, [pc, #64]	@ (8005248 <_sbrk+0x64>)
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	429a      	cmp	r2, r3
 8005212:	d207      	bcs.n	8005224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005214:	f00f f80e 	bl	8014234 <__errno>
 8005218:	4603      	mov	r3, r0
 800521a:	220c      	movs	r2, #12
 800521c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800521e:	f04f 33ff 	mov.w	r3, #4294967295
 8005222:	e009      	b.n	8005238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005224:	4b08      	ldr	r3, [pc, #32]	@ (8005248 <_sbrk+0x64>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800522a:	4b07      	ldr	r3, [pc, #28]	@ (8005248 <_sbrk+0x64>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4413      	add	r3, r2
 8005232:	4a05      	ldr	r2, [pc, #20]	@ (8005248 <_sbrk+0x64>)
 8005234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	20050000 	.word	0x20050000
 8005244:	00000800 	.word	0x00000800
 8005248:	2000602c 	.word	0x2000602c
 800524c:	20006650 	.word	0x20006650

08005250 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005254:	4b06      	ldr	r3, [pc, #24]	@ (8005270 <SystemInit+0x20>)
 8005256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525a:	4a05      	ldr	r2, [pc, #20]	@ (8005270 <SystemInit+0x20>)
 800525c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005264:	bf00      	nop
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	e000ed00 	.word	0xe000ed00

08005274 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800527a:	f107 0314 	add.w	r3, r7, #20
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	605a      	str	r2, [r3, #4]
 8005284:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	609a      	str	r2, [r3, #8]
 8005290:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005292:	4b23      	ldr	r3, [pc, #140]	@ (8005320 <MX_TIM1_Init+0xac>)
 8005294:	4a23      	ldr	r2, [pc, #140]	@ (8005324 <MX_TIM1_Init+0xb0>)
 8005296:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8005298:	4b21      	ldr	r3, [pc, #132]	@ (8005320 <MX_TIM1_Init+0xac>)
 800529a:	2263      	movs	r2, #99	@ 0x63
 800529c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800529e:	4b20      	ldr	r3, [pc, #128]	@ (8005320 <MX_TIM1_Init+0xac>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80052a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005320 <MX_TIM1_Init+0xac>)
 80052a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005320 <MX_TIM1_Init+0xac>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80052b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005320 <MX_TIM1_Init+0xac>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052b8:	4b19      	ldr	r3, [pc, #100]	@ (8005320 <MX_TIM1_Init+0xac>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80052be:	4818      	ldr	r0, [pc, #96]	@ (8005320 <MX_TIM1_Init+0xac>)
 80052c0:	f008 fe84 	bl	800dfcc <HAL_TIM_IC_Init>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80052ca:	f7ff fc3d 	bl	8004b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052d6:	2300      	movs	r3, #0
 80052d8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80052da:	f107 0314 	add.w	r3, r7, #20
 80052de:	4619      	mov	r1, r3
 80052e0:	480f      	ldr	r0, [pc, #60]	@ (8005320 <MX_TIM1_Init+0xac>)
 80052e2:	f009 fbb7 	bl	800ea54 <HAL_TIMEx_MasterConfigSynchronization>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80052ec:	f7ff fc2c 	bl	8004b48 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80052f0:	2300      	movs	r3, #0
 80052f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80052f4:	2301      	movs	r3, #1
 80052f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80052f8:	2300      	movs	r3, #0
 80052fa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	2200      	movs	r2, #0
 8005304:	4619      	mov	r1, r3
 8005306:	4806      	ldr	r0, [pc, #24]	@ (8005320 <MX_TIM1_Init+0xac>)
 8005308:	f008 ffbe 	bl	800e288 <HAL_TIM_IC_ConfigChannel>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8005312:	f7ff fc19 	bl	8004b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8005316:	bf00      	nop
 8005318:	3720      	adds	r7, #32
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	bf00      	nop
 8005320:	20006030 	.word	0x20006030
 8005324:	40010000 	.word	0x40010000

08005328 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800532e:	f107 030c 	add.w	r3, r7, #12
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	605a      	str	r2, [r3, #4]
 8005338:	609a      	str	r2, [r3, #8]
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800533e:	463b      	mov	r3, r7
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005348:	4b1d      	ldr	r3, [pc, #116]	@ (80053c0 <MX_TIM3_Init+0x98>)
 800534a:	4a1e      	ldr	r2, [pc, #120]	@ (80053c4 <MX_TIM3_Init+0x9c>)
 800534c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 800534e:	4b1c      	ldr	r3, [pc, #112]	@ (80053c0 <MX_TIM3_Init+0x98>)
 8005350:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005354:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005356:	4b1a      	ldr	r3, [pc, #104]	@ (80053c0 <MX_TIM3_Init+0x98>)
 8005358:	2200      	movs	r2, #0
 800535a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 800535c:	4b18      	ldr	r3, [pc, #96]	@ (80053c0 <MX_TIM3_Init+0x98>)
 800535e:	22c7      	movs	r2, #199	@ 0xc7
 8005360:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005362:	4b17      	ldr	r3, [pc, #92]	@ (80053c0 <MX_TIM3_Init+0x98>)
 8005364:	2200      	movs	r2, #0
 8005366:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005368:	4b15      	ldr	r3, [pc, #84]	@ (80053c0 <MX_TIM3_Init+0x98>)
 800536a:	2200      	movs	r2, #0
 800536c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800536e:	4814      	ldr	r0, [pc, #80]	@ (80053c0 <MX_TIM3_Init+0x98>)
 8005370:	f008 fd5d 	bl	800de2e <HAL_TIM_Base_Init>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800537a:	f7ff fbe5 	bl	8004b48 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800537e:	2304      	movs	r3, #4
 8005380:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8005382:	2300      	movs	r3, #0
 8005384:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8005386:	f107 030c 	add.w	r3, r7, #12
 800538a:	4619      	mov	r1, r3
 800538c:	480c      	ldr	r0, [pc, #48]	@ (80053c0 <MX_TIM3_Init+0x98>)
 800538e:	f009 f817 	bl	800e3c0 <HAL_TIM_SlaveConfigSynchro>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8005398:	f7ff fbd6 	bl	8004b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800539c:	2300      	movs	r3, #0
 800539e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80053a4:	463b      	mov	r3, r7
 80053a6:	4619      	mov	r1, r3
 80053a8:	4805      	ldr	r0, [pc, #20]	@ (80053c0 <MX_TIM3_Init+0x98>)
 80053aa:	f009 fb53 	bl	800ea54 <HAL_TIMEx_MasterConfigSynchronization>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80053b4:	f7ff fbc8 	bl	8004b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80053b8:	bf00      	nop
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	2000607c 	.word	0x2000607c
 80053c4:	40000400 	.word	0x40000400

080053c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053ce:	1d3b      	adds	r3, r7, #4
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80053d8:	4b15      	ldr	r3, [pc, #84]	@ (8005430 <MX_TIM6_Init+0x68>)
 80053da:	4a16      	ldr	r2, [pc, #88]	@ (8005434 <MX_TIM6_Init+0x6c>)
 80053dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 45776;
 80053de:	4b14      	ldr	r3, [pc, #80]	@ (8005430 <MX_TIM6_Init+0x68>)
 80053e0:	f24b 22d0 	movw	r2, #45776	@ 0xb2d0
 80053e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053e6:	4b12      	ldr	r3, [pc, #72]	@ (8005430 <MX_TIM6_Init+0x68>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80053ec:	4b10      	ldr	r3, [pc, #64]	@ (8005430 <MX_TIM6_Init+0x68>)
 80053ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80053f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005430 <MX_TIM6_Init+0x68>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80053fa:	480d      	ldr	r0, [pc, #52]	@ (8005430 <MX_TIM6_Init+0x68>)
 80053fc:	f008 fd17 	bl	800de2e <HAL_TIM_Base_Init>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8005406:	f7ff fb9f 	bl	8004b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005412:	1d3b      	adds	r3, r7, #4
 8005414:	4619      	mov	r1, r3
 8005416:	4806      	ldr	r0, [pc, #24]	@ (8005430 <MX_TIM6_Init+0x68>)
 8005418:	f009 fb1c 	bl	800ea54 <HAL_TIMEx_MasterConfigSynchronization>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8005422:	f7ff fb91 	bl	8004b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005426:	bf00      	nop
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	200060c8 	.word	0x200060c8
 8005434:	40001000 	.word	0x40001000

08005438 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800543e:	1d3b      	adds	r3, r7, #4
 8005440:	2200      	movs	r2, #0
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	605a      	str	r2, [r3, #4]
 8005446:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005448:	4b15      	ldr	r3, [pc, #84]	@ (80054a0 <MX_TIM7_Init+0x68>)
 800544a:	4a16      	ldr	r2, [pc, #88]	@ (80054a4 <MX_TIM7_Init+0x6c>)
 800544c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 9999;
 800544e:	4b14      	ldr	r3, [pc, #80]	@ (80054a0 <MX_TIM7_Init+0x68>)
 8005450:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005454:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005456:	4b12      	ldr	r3, [pc, #72]	@ (80054a0 <MX_TIM7_Init+0x68>)
 8005458:	2200      	movs	r2, #0
 800545a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800545c:	4b10      	ldr	r3, [pc, #64]	@ (80054a0 <MX_TIM7_Init+0x68>)
 800545e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8005462:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005464:	4b0e      	ldr	r3, [pc, #56]	@ (80054a0 <MX_TIM7_Init+0x68>)
 8005466:	2200      	movs	r2, #0
 8005468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800546a:	480d      	ldr	r0, [pc, #52]	@ (80054a0 <MX_TIM7_Init+0x68>)
 800546c:	f008 fcdf 	bl	800de2e <HAL_TIM_Base_Init>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8005476:	f7ff fb67 	bl	8004b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005482:	1d3b      	adds	r3, r7, #4
 8005484:	4619      	mov	r1, r3
 8005486:	4806      	ldr	r0, [pc, #24]	@ (80054a0 <MX_TIM7_Init+0x68>)
 8005488:	f009 fae4 	bl	800ea54 <HAL_TIMEx_MasterConfigSynchronization>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8005492:	f7ff fb59 	bl	8004b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005496:	bf00      	nop
 8005498:	3710      	adds	r7, #16
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20006114 	.word	0x20006114
 80054a4:	40001400 	.word	0x40001400

080054a8 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08a      	sub	sp, #40	@ 0x28
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054b0:	f107 0314 	add.w	r3, r7, #20
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	605a      	str	r2, [r3, #4]
 80054ba:	609a      	str	r2, [r3, #8]
 80054bc:	60da      	str	r2, [r3, #12]
 80054be:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005534 <HAL_TIM_IC_MspInit+0x8c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d130      	bne.n	800552c <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005538 <HAL_TIM_IC_MspInit+0x90>)
 80054cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ce:	4a1a      	ldr	r2, [pc, #104]	@ (8005538 <HAL_TIM_IC_MspInit+0x90>)
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80054d6:	4b18      	ldr	r3, [pc, #96]	@ (8005538 <HAL_TIM_IC_MspInit+0x90>)
 80054d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	613b      	str	r3, [r7, #16]
 80054e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054e2:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <HAL_TIM_IC_MspInit+0x90>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e6:	4a14      	ldr	r2, [pc, #80]	@ (8005538 <HAL_TIM_IC_MspInit+0x90>)
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80054ee:	4b12      	ldr	r3, [pc, #72]	@ (8005538 <HAL_TIM_IC_MspInit+0x90>)
 80054f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	60fb      	str	r3, [r7, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80054fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005500:	2302      	movs	r3, #2
 8005502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005504:	2301      	movs	r3, #1
 8005506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005508:	2300      	movs	r3, #0
 800550a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800550c:	2301      	movs	r3, #1
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005510:	f107 0314 	add.w	r3, r7, #20
 8005514:	4619      	mov	r1, r3
 8005516:	4809      	ldr	r0, [pc, #36]	@ (800553c <HAL_TIM_IC_MspInit+0x94>)
 8005518:	f003 ff44 	bl	80093a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800551c:	2200      	movs	r2, #0
 800551e:	2100      	movs	r1, #0
 8005520:	201b      	movs	r0, #27
 8005522:	f003 f912 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005526:	201b      	movs	r0, #27
 8005528:	f003 f92b 	bl	8008782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800552c:	bf00      	nop
 800552e:	3728      	adds	r7, #40	@ 0x28
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40010000 	.word	0x40010000
 8005538:	40023800 	.word	0x40023800
 800553c:	40020000 	.word	0x40020000

08005540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a27      	ldr	r2, [pc, #156]	@ (80055ec <HAL_TIM_Base_MspInit+0xac>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d114      	bne.n	800557c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005552:	4b27      	ldr	r3, [pc, #156]	@ (80055f0 <HAL_TIM_Base_MspInit+0xb0>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	4a26      	ldr	r2, [pc, #152]	@ (80055f0 <HAL_TIM_Base_MspInit+0xb0>)
 8005558:	f043 0302 	orr.w	r3, r3, #2
 800555c:	6413      	str	r3, [r2, #64]	@ 0x40
 800555e:	4b24      	ldr	r3, [pc, #144]	@ (80055f0 <HAL_TIM_Base_MspInit+0xb0>)
 8005560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800556a:	2200      	movs	r2, #0
 800556c:	2100      	movs	r1, #0
 800556e:	201d      	movs	r0, #29
 8005570:	f003 f8eb 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005574:	201d      	movs	r0, #29
 8005576:	f003 f904 	bl	8008782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800557a:	e032      	b.n	80055e2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM6)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a1c      	ldr	r2, [pc, #112]	@ (80055f4 <HAL_TIM_Base_MspInit+0xb4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d114      	bne.n	80055b0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005586:	4b1a      	ldr	r3, [pc, #104]	@ (80055f0 <HAL_TIM_Base_MspInit+0xb0>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558a:	4a19      	ldr	r2, [pc, #100]	@ (80055f0 <HAL_TIM_Base_MspInit+0xb0>)
 800558c:	f043 0310 	orr.w	r3, r3, #16
 8005590:	6413      	str	r3, [r2, #64]	@ 0x40
 8005592:	4b17      	ldr	r3, [pc, #92]	@ (80055f0 <HAL_TIM_Base_MspInit+0xb0>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	f003 0310 	and.w	r3, r3, #16
 800559a:	613b      	str	r3, [r7, #16]
 800559c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800559e:	2200      	movs	r2, #0
 80055a0:	2100      	movs	r1, #0
 80055a2:	2036      	movs	r0, #54	@ 0x36
 80055a4:	f003 f8d1 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80055a8:	2036      	movs	r0, #54	@ 0x36
 80055aa:	f003 f8ea 	bl	8008782 <HAL_NVIC_EnableIRQ>
}
 80055ae:	e018      	b.n	80055e2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM7)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a10      	ldr	r2, [pc, #64]	@ (80055f8 <HAL_TIM_Base_MspInit+0xb8>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d113      	bne.n	80055e2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80055ba:	4b0d      	ldr	r3, [pc, #52]	@ (80055f0 <HAL_TIM_Base_MspInit+0xb0>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	4a0c      	ldr	r2, [pc, #48]	@ (80055f0 <HAL_TIM_Base_MspInit+0xb0>)
 80055c0:	f043 0320 	orr.w	r3, r3, #32
 80055c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80055c6:	4b0a      	ldr	r3, [pc, #40]	@ (80055f0 <HAL_TIM_Base_MspInit+0xb0>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80055d2:	2200      	movs	r2, #0
 80055d4:	2100      	movs	r1, #0
 80055d6:	2037      	movs	r0, #55	@ 0x37
 80055d8:	f003 f8b7 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80055dc:	2037      	movs	r0, #55	@ 0x37
 80055de:	f003 f8d0 	bl	8008782 <HAL_NVIC_EnableIRQ>
}
 80055e2:	bf00      	nop
 80055e4:	3718      	adds	r7, #24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40001000 	.word	0x40001000
 80055f8:	40001400 	.word	0x40001400

080055fc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005600:	4b14      	ldr	r3, [pc, #80]	@ (8005654 <MX_USART1_UART_Init+0x58>)
 8005602:	4a15      	ldr	r2, [pc, #84]	@ (8005658 <MX_USART1_UART_Init+0x5c>)
 8005604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005606:	4b13      	ldr	r3, [pc, #76]	@ (8005654 <MX_USART1_UART_Init+0x58>)
 8005608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800560c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800560e:	4b11      	ldr	r3, [pc, #68]	@ (8005654 <MX_USART1_UART_Init+0x58>)
 8005610:	2200      	movs	r2, #0
 8005612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005614:	4b0f      	ldr	r3, [pc, #60]	@ (8005654 <MX_USART1_UART_Init+0x58>)
 8005616:	2200      	movs	r2, #0
 8005618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800561a:	4b0e      	ldr	r3, [pc, #56]	@ (8005654 <MX_USART1_UART_Init+0x58>)
 800561c:	2200      	movs	r2, #0
 800561e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005620:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <MX_USART1_UART_Init+0x58>)
 8005622:	220c      	movs	r2, #12
 8005624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005626:	4b0b      	ldr	r3, [pc, #44]	@ (8005654 <MX_USART1_UART_Init+0x58>)
 8005628:	2200      	movs	r2, #0
 800562a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800562c:	4b09      	ldr	r3, [pc, #36]	@ (8005654 <MX_USART1_UART_Init+0x58>)
 800562e:	2200      	movs	r2, #0
 8005630:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005632:	4b08      	ldr	r3, [pc, #32]	@ (8005654 <MX_USART1_UART_Init+0x58>)
 8005634:	2200      	movs	r2, #0
 8005636:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005638:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <MX_USART1_UART_Init+0x58>)
 800563a:	2200      	movs	r2, #0
 800563c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800563e:	4805      	ldr	r0, [pc, #20]	@ (8005654 <MX_USART1_UART_Init+0x58>)
 8005640:	f009 fab4 	bl	800ebac <HAL_UART_Init>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800564a:	f7ff fa7d 	bl	8004b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800564e:	bf00      	nop
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20006160 	.word	0x20006160
 8005658:	40011000 	.word	0x40011000

0800565c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b0ac      	sub	sp, #176	@ 0xb0
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005664:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	605a      	str	r2, [r3, #4]
 800566e:	609a      	str	r2, [r3, #8]
 8005670:	60da      	str	r2, [r3, #12]
 8005672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005674:	f107 0318 	add.w	r3, r7, #24
 8005678:	2284      	movs	r2, #132	@ 0x84
 800567a:	2100      	movs	r1, #0
 800567c:	4618      	mov	r0, r3
 800567e:	f00e fd87 	bl	8014190 <memset>
  if(uartHandle->Instance==USART1)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a32      	ldr	r2, [pc, #200]	@ (8005750 <HAL_UART_MspInit+0xf4>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d15c      	bne.n	8005746 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800568c:	2340      	movs	r3, #64	@ 0x40
 800568e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005690:	2300      	movs	r3, #0
 8005692:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005694:	f107 0318 	add.w	r3, r7, #24
 8005698:	4618      	mov	r0, r3
 800569a:	f005 ff87 	bl	800b5ac <HAL_RCCEx_PeriphCLKConfig>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80056a4:	f7ff fa50 	bl	8004b48 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80056a8:	4b2a      	ldr	r3, [pc, #168]	@ (8005754 <HAL_UART_MspInit+0xf8>)
 80056aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ac:	4a29      	ldr	r2, [pc, #164]	@ (8005754 <HAL_UART_MspInit+0xf8>)
 80056ae:	f043 0310 	orr.w	r3, r3, #16
 80056b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80056b4:	4b27      	ldr	r3, [pc, #156]	@ (8005754 <HAL_UART_MspInit+0xf8>)
 80056b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b8:	f003 0310 	and.w	r3, r3, #16
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056c0:	4b24      	ldr	r3, [pc, #144]	@ (8005754 <HAL_UART_MspInit+0xf8>)
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	4a23      	ldr	r2, [pc, #140]	@ (8005754 <HAL_UART_MspInit+0xf8>)
 80056c6:	f043 0302 	orr.w	r3, r3, #2
 80056ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80056cc:	4b21      	ldr	r3, [pc, #132]	@ (8005754 <HAL_UART_MspInit+0xf8>)
 80056ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	613b      	str	r3, [r7, #16]
 80056d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005754 <HAL_UART_MspInit+0xf8>)
 80056da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005754 <HAL_UART_MspInit+0xf8>)
 80056de:	f043 0301 	orr.w	r3, r3, #1
 80056e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80056e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005754 <HAL_UART_MspInit+0xf8>)
 80056e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80056f0:	2380      	movs	r3, #128	@ 0x80
 80056f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f6:	2302      	movs	r3, #2
 80056f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056fc:	2300      	movs	r3, #0
 80056fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005702:	2303      	movs	r3, #3
 8005704:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005708:	2307      	movs	r3, #7
 800570a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800570e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8005712:	4619      	mov	r1, r3
 8005714:	4810      	ldr	r0, [pc, #64]	@ (8005758 <HAL_UART_MspInit+0xfc>)
 8005716:	f003 fe45 	bl	80093a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800571a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800571e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005722:	2302      	movs	r3, #2
 8005724:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800572e:	2303      	movs	r3, #3
 8005730:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005734:	2307      	movs	r3, #7
 8005736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800573a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800573e:	4619      	mov	r1, r3
 8005740:	4806      	ldr	r0, [pc, #24]	@ (800575c <HAL_UART_MspInit+0x100>)
 8005742:	f003 fe2f 	bl	80093a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005746:	bf00      	nop
 8005748:	37b0      	adds	r7, #176	@ 0xb0
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40011000 	.word	0x40011000
 8005754:	40023800 	.word	0x40023800
 8005758:	40020400 	.word	0x40020400
 800575c:	40020000 	.word	0x40020000

08005760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005760:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005798 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005764:	480d      	ldr	r0, [pc, #52]	@ (800579c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005766:	490e      	ldr	r1, [pc, #56]	@ (80057a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005768:	4a0e      	ldr	r2, [pc, #56]	@ (80057a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800576a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800576c:	e002      	b.n	8005774 <LoopCopyDataInit>

0800576e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800576e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005772:	3304      	adds	r3, #4

08005774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005778:	d3f9      	bcc.n	800576e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800577a:	4a0b      	ldr	r2, [pc, #44]	@ (80057a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800577c:	4c0b      	ldr	r4, [pc, #44]	@ (80057ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800577e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005780:	e001      	b.n	8005786 <LoopFillZerobss>

08005782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005784:	3204      	adds	r2, #4

08005786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005788:	d3fb      	bcc.n	8005782 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800578a:	f7ff fd61 	bl	8005250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800578e:	f00e fd57 	bl	8014240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005792:	f7fe fb9d 	bl	8003ed0 <main>
  bx  lr    
 8005796:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005798:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800579c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057a0:	200050f0 	.word	0x200050f0
  ldr r2, =_sidata
 80057a4:	0801a708 	.word	0x0801a708
  ldr r2, =_sbss
 80057a8:	200050f0 	.word	0x200050f0
  ldr r4, =_ebss
 80057ac:	2000664c 	.word	0x2000664c

080057b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057b0:	e7fe      	b.n	80057b0 <ADC_IRQHandler>

080057b2 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b082      	sub	sp, #8
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	4603      	mov	r3, r0
 80057ba:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80057bc:	20c8      	movs	r0, #200	@ 0xc8
 80057be:	f000 fc31 	bl	8006024 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80057c2:	f000 fa79 	bl	8005cb8 <ft5336_I2C_InitializeIfRequired>
}
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	4603      	mov	r3, r0
 80057d6:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80057d8:	bf00      	nop
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80057ee:	2300      	movs	r3, #0
 80057f0:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80057f6:	2300      	movs	r3, #0
 80057f8:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80057fa:	f000 fa5d 	bl	8005cb8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80057fe:	2300      	movs	r3, #0
 8005800:	73fb      	strb	r3, [r7, #15]
 8005802:	e010      	b.n	8005826 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8005804:	88fb      	ldrh	r3, [r7, #6]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	21a8      	movs	r1, #168	@ 0xa8
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fbec 	bl	8005fe8 <TS_IO_Read>
 8005810:	4603      	mov	r3, r0
 8005812:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8005814:	7b7b      	ldrb	r3, [r7, #13]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b51      	cmp	r3, #81	@ 0x51
 800581a:	d101      	bne.n	8005820 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800581c:	2301      	movs	r3, #1
 800581e:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8005820:	7bfb      	ldrb	r3, [r7, #15]
 8005822:	3301      	adds	r3, #1
 8005824:	73fb      	strb	r3, [r7, #15]
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d802      	bhi.n	8005832 <ft5336_ReadID+0x4e>
 800582c:	7bbb      	ldrb	r3, [r7, #14]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0e8      	beq.n	8005804 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8005832:	7b7b      	ldrb	r3, [r7, #13]
 8005834:	b2db      	uxtb	r3, r3
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	4603      	mov	r3, r0
 8005846:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 fa44 	bl	8005cd8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f932 	bl	8005abc <ft5336_TS_DisableIT>
}
 8005858:	bf00      	nop
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	4603      	mov	r3, r0
 8005868:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800586e:	88fb      	ldrh	r3, [r7, #6]
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2102      	movs	r1, #2
 8005874:	4618      	mov	r0, r3
 8005876:	f000 fbb7 	bl	8005fe8 <TS_IO_Read>
 800587a:	4603      	mov	r3, r0
 800587c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800587e:	7bfb      	ldrb	r3, [r7, #15]
 8005880:	b2db      	uxtb	r3, r3
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	b2db      	uxtb	r3, r3
 8005888:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b05      	cmp	r3, #5
 8005890:	d901      	bls.n	8005896 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	b2da      	uxtb	r2, r3
 800589a:	4b05      	ldr	r3, [pc, #20]	@ (80058b0 <ft5336_TS_DetectTouch+0x50>)
 800589c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800589e:	4b04      	ldr	r3, [pc, #16]	@ (80058b0 <ft5336_TS_DetectTouch+0x50>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	b2db      	uxtb	r3, r3
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	200061e8 	.word	0x200061e8

080058b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80058c2:	2300      	movs	r3, #0
 80058c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80058c6:	2300      	movs	r3, #0
 80058c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80058ca:	2300      	movs	r3, #0
 80058cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80058ce:	2300      	movs	r3, #0
 80058d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80058d6:	4b6d      	ldr	r3, [pc, #436]	@ (8005a8c <ft5336_TS_GetXY+0x1d8>)
 80058d8:	789a      	ldrb	r2, [r3, #2]
 80058da:	4b6c      	ldr	r3, [pc, #432]	@ (8005a8c <ft5336_TS_GetXY+0x1d8>)
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	429a      	cmp	r2, r3
 80058e0:	f080 80cf 	bcs.w	8005a82 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80058e4:	4b69      	ldr	r3, [pc, #420]	@ (8005a8c <ft5336_TS_GetXY+0x1d8>)
 80058e6:	789b      	ldrb	r3, [r3, #2]
 80058e8:	2b09      	cmp	r3, #9
 80058ea:	d871      	bhi.n	80059d0 <ft5336_TS_GetXY+0x11c>
 80058ec:	a201      	add	r2, pc, #4	@ (adr r2, 80058f4 <ft5336_TS_GetXY+0x40>)
 80058ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	0800592f 	.word	0x0800592f
 80058fc:	08005941 	.word	0x08005941
 8005900:	08005953 	.word	0x08005953
 8005904:	08005965 	.word	0x08005965
 8005908:	08005977 	.word	0x08005977
 800590c:	08005989 	.word	0x08005989
 8005910:	0800599b 	.word	0x0800599b
 8005914:	080059ad 	.word	0x080059ad
 8005918:	080059bf 	.word	0x080059bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800591c:	2304      	movs	r3, #4
 800591e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8005920:	2303      	movs	r3, #3
 8005922:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8005924:	2306      	movs	r3, #6
 8005926:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8005928:	2305      	movs	r3, #5
 800592a:	753b      	strb	r3, [r7, #20]
      break;
 800592c:	e051      	b.n	80059d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800592e:	230a      	movs	r3, #10
 8005930:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8005932:	2309      	movs	r3, #9
 8005934:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8005936:	230c      	movs	r3, #12
 8005938:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800593a:	230b      	movs	r3, #11
 800593c:	753b      	strb	r3, [r7, #20]
      break;
 800593e:	e048      	b.n	80059d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8005940:	2310      	movs	r3, #16
 8005942:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8005944:	230f      	movs	r3, #15
 8005946:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8005948:	2312      	movs	r3, #18
 800594a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800594c:	2311      	movs	r3, #17
 800594e:	753b      	strb	r3, [r7, #20]
      break;
 8005950:	e03f      	b.n	80059d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8005952:	2316      	movs	r3, #22
 8005954:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8005956:	2315      	movs	r3, #21
 8005958:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800595a:	2318      	movs	r3, #24
 800595c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800595e:	2317      	movs	r3, #23
 8005960:	753b      	strb	r3, [r7, #20]
      break;
 8005962:	e036      	b.n	80059d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8005964:	231c      	movs	r3, #28
 8005966:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8005968:	231b      	movs	r3, #27
 800596a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800596c:	231e      	movs	r3, #30
 800596e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8005970:	231d      	movs	r3, #29
 8005972:	753b      	strb	r3, [r7, #20]
      break;
 8005974:	e02d      	b.n	80059d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8005976:	2322      	movs	r3, #34	@ 0x22
 8005978:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800597a:	2321      	movs	r3, #33	@ 0x21
 800597c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800597e:	2324      	movs	r3, #36	@ 0x24
 8005980:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8005982:	2323      	movs	r3, #35	@ 0x23
 8005984:	753b      	strb	r3, [r7, #20]
      break;
 8005986:	e024      	b.n	80059d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8005988:	2328      	movs	r3, #40	@ 0x28
 800598a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800598c:	2327      	movs	r3, #39	@ 0x27
 800598e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8005990:	232a      	movs	r3, #42	@ 0x2a
 8005992:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8005994:	2329      	movs	r3, #41	@ 0x29
 8005996:	753b      	strb	r3, [r7, #20]
      break;
 8005998:	e01b      	b.n	80059d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800599a:	232e      	movs	r3, #46	@ 0x2e
 800599c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800599e:	232d      	movs	r3, #45	@ 0x2d
 80059a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80059a2:	2330      	movs	r3, #48	@ 0x30
 80059a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80059a6:	232f      	movs	r3, #47	@ 0x2f
 80059a8:	753b      	strb	r3, [r7, #20]
      break;
 80059aa:	e012      	b.n	80059d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80059ac:	2334      	movs	r3, #52	@ 0x34
 80059ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80059b0:	2333      	movs	r3, #51	@ 0x33
 80059b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80059b4:	2336      	movs	r3, #54	@ 0x36
 80059b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80059b8:	2335      	movs	r3, #53	@ 0x35
 80059ba:	753b      	strb	r3, [r7, #20]
      break;
 80059bc:	e009      	b.n	80059d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80059be:	233a      	movs	r3, #58	@ 0x3a
 80059c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80059c2:	2339      	movs	r3, #57	@ 0x39
 80059c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80059c6:	233c      	movs	r3, #60	@ 0x3c
 80059c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80059ca:	233b      	movs	r3, #59	@ 0x3b
 80059cc:	753b      	strb	r3, [r7, #20]
      break;
 80059ce:	e000      	b.n	80059d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80059d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80059d2:	89fb      	ldrh	r3, [r7, #14]
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	7dfa      	ldrb	r2, [r7, #23]
 80059d8:	4611      	mov	r1, r2
 80059da:	4618      	mov	r0, r3
 80059dc:	f000 fb04 	bl	8005fe8 <TS_IO_Read>
 80059e0:	4603      	mov	r3, r0
 80059e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80059e4:	7cfb      	ldrb	r3, [r7, #19]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	4b29      	ldr	r3, [pc, #164]	@ (8005a90 <ft5336_TS_GetXY+0x1dc>)
 80059ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80059ee:	89fb      	ldrh	r3, [r7, #14]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	7dba      	ldrb	r2, [r7, #22]
 80059f4:	4611      	mov	r1, r2
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 faf6 	bl	8005fe8 <TS_IO_Read>
 80059fc:	4603      	mov	r3, r0
 80059fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005a00:	7cfb      	ldrb	r3, [r7, #19]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a0a:	b21a      	sxth	r2, r3
 8005a0c:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <ft5336_TS_GetXY+0x1dc>)
 8005a0e:	881b      	ldrh	r3, [r3, #0]
 8005a10:	b21b      	sxth	r3, r3
 8005a12:	4313      	orrs	r3, r2
 8005a14:	b21b      	sxth	r3, r3
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	4b1d      	ldr	r3, [pc, #116]	@ (8005a90 <ft5336_TS_GetXY+0x1dc>)
 8005a1a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8005a1c:	4b1c      	ldr	r3, [pc, #112]	@ (8005a90 <ft5336_TS_GetXY+0x1dc>)
 8005a1e:	881a      	ldrh	r2, [r3, #0]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8005a24:	89fb      	ldrh	r3, [r7, #14]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	7d7a      	ldrb	r2, [r7, #21]
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f000 fadb 	bl	8005fe8 <TS_IO_Read>
 8005a32:	4603      	mov	r3, r0
 8005a34:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8005a36:	7cfb      	ldrb	r3, [r7, #19]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <ft5336_TS_GetXY+0x1dc>)
 8005a3e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8005a40:	89fb      	ldrh	r3, [r7, #14]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	7d3a      	ldrb	r2, [r7, #20]
 8005a46:	4611      	mov	r1, r2
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f000 facd 	bl	8005fe8 <TS_IO_Read>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8005a52:	7cfb      	ldrb	r3, [r7, #19]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005a5c:	b21a      	sxth	r2, r3
 8005a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <ft5336_TS_GetXY+0x1dc>)
 8005a60:	881b      	ldrh	r3, [r3, #0]
 8005a62:	b21b      	sxth	r3, r3
 8005a64:	4313      	orrs	r3, r2
 8005a66:	b21b      	sxth	r3, r3
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	4b09      	ldr	r3, [pc, #36]	@ (8005a90 <ft5336_TS_GetXY+0x1dc>)
 8005a6c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8005a6e:	4b08      	ldr	r3, [pc, #32]	@ (8005a90 <ft5336_TS_GetXY+0x1dc>)
 8005a70:	881a      	ldrh	r2, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8005a76:	4b05      	ldr	r3, [pc, #20]	@ (8005a8c <ft5336_TS_GetXY+0x1d8>)
 8005a78:	789b      	ldrb	r3, [r3, #2]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4b03      	ldr	r3, [pc, #12]	@ (8005a8c <ft5336_TS_GetXY+0x1d8>)
 8005a80:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8005a82:	bf00      	nop
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	200061e8 	.word	0x200061e8
 8005a90:	200061ec 	.word	0x200061ec

08005a94 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	7bfa      	ldrb	r2, [r7, #15]
 8005aac:	21a4      	movs	r1, #164	@ 0xa4
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fa80 	bl	8005fb4 <TS_IO_Write>
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	7bfa      	ldrb	r2, [r7, #15]
 8005ad4:	21a4      	movs	r1, #164	@ 0xa4
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fa6c 	bl	8005fb4 <TS_IO_Write>
}
 8005adc:	bf00      	nop
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	4603      	mov	r3, r0
 8005aec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	4603      	mov	r3, r0
 8005b04:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	4603      	mov	r3, r0
 8005b1a:	6039      	str	r1, [r7, #0]
 8005b1c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2101      	movs	r1, #1
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 fa5d 	bl	8005fe8 <TS_IO_Read>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8005b32:	7bfb      	ldrb	r3, [r7, #15]
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	461a      	mov	r2, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	601a      	str	r2, [r3, #0]
}
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4603      	mov	r3, r0
 8005b52:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8005b54:	2300      	movs	r3, #0
 8005b56:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8005b64:	4b4d      	ldr	r3, [pc, #308]	@ (8005c9c <ft5336_TS_GetTouchInfo+0x158>)
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	f080 8090 	bcs.w	8005c92 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b09      	cmp	r3, #9
 8005b76:	d85d      	bhi.n	8005c34 <ft5336_TS_GetTouchInfo+0xf0>
 8005b78:	a201      	add	r2, pc, #4	@ (adr r2, 8005b80 <ft5336_TS_GetTouchInfo+0x3c>)
 8005b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7e:	bf00      	nop
 8005b80:	08005ba9 	.word	0x08005ba9
 8005b84:	08005bb7 	.word	0x08005bb7
 8005b88:	08005bc5 	.word	0x08005bc5
 8005b8c:	08005bd3 	.word	0x08005bd3
 8005b90:	08005be1 	.word	0x08005be1
 8005b94:	08005bef 	.word	0x08005bef
 8005b98:	08005bfd 	.word	0x08005bfd
 8005b9c:	08005c0b 	.word	0x08005c0b
 8005ba0:	08005c19 	.word	0x08005c19
 8005ba4:	08005c27 	.word	0x08005c27
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8005bac:	2307      	movs	r3, #7
 8005bae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	757b      	strb	r3, [r7, #21]
      break;
 8005bb4:	e03f      	b.n	8005c36 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8005bb6:	2309      	movs	r3, #9
 8005bb8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8005bba:	230d      	movs	r3, #13
 8005bbc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8005bbe:	230e      	movs	r3, #14
 8005bc0:	757b      	strb	r3, [r7, #21]
      break;
 8005bc2:	e038      	b.n	8005c36 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8005bc4:	230f      	movs	r3, #15
 8005bc6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8005bc8:	2313      	movs	r3, #19
 8005bca:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8005bcc:	2314      	movs	r3, #20
 8005bce:	757b      	strb	r3, [r7, #21]
      break;
 8005bd0:	e031      	b.n	8005c36 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8005bd2:	2315      	movs	r3, #21
 8005bd4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8005bd6:	2319      	movs	r3, #25
 8005bd8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8005bda:	231a      	movs	r3, #26
 8005bdc:	757b      	strb	r3, [r7, #21]
      break;
 8005bde:	e02a      	b.n	8005c36 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8005be0:	231b      	movs	r3, #27
 8005be2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8005be4:	231f      	movs	r3, #31
 8005be6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8005be8:	2320      	movs	r3, #32
 8005bea:	757b      	strb	r3, [r7, #21]
      break;
 8005bec:	e023      	b.n	8005c36 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8005bee:	2321      	movs	r3, #33	@ 0x21
 8005bf0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8005bf2:	2325      	movs	r3, #37	@ 0x25
 8005bf4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8005bf6:	2326      	movs	r3, #38	@ 0x26
 8005bf8:	757b      	strb	r3, [r7, #21]
      break;
 8005bfa:	e01c      	b.n	8005c36 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8005bfc:	2327      	movs	r3, #39	@ 0x27
 8005bfe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8005c00:	232b      	movs	r3, #43	@ 0x2b
 8005c02:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8005c04:	232c      	movs	r3, #44	@ 0x2c
 8005c06:	757b      	strb	r3, [r7, #21]
      break;
 8005c08:	e015      	b.n	8005c36 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8005c0a:	232d      	movs	r3, #45	@ 0x2d
 8005c0c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8005c0e:	2331      	movs	r3, #49	@ 0x31
 8005c10:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8005c12:	2332      	movs	r3, #50	@ 0x32
 8005c14:	757b      	strb	r3, [r7, #21]
      break;
 8005c16:	e00e      	b.n	8005c36 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8005c18:	2333      	movs	r3, #51	@ 0x33
 8005c1a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8005c1c:	2337      	movs	r3, #55	@ 0x37
 8005c1e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8005c20:	2338      	movs	r3, #56	@ 0x38
 8005c22:	757b      	strb	r3, [r7, #21]
      break;
 8005c24:	e007      	b.n	8005c36 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8005c26:	2339      	movs	r3, #57	@ 0x39
 8005c28:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8005c2a:	233d      	movs	r3, #61	@ 0x3d
 8005c2c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8005c2e:	233e      	movs	r3, #62	@ 0x3e
 8005c30:	757b      	strb	r3, [r7, #21]
      break;
 8005c32:	e000      	b.n	8005c36 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8005c34:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8005c36:	89fb      	ldrh	r3, [r7, #14]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	7dfa      	ldrb	r2, [r7, #23]
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f9d2 	bl	8005fe8 <TS_IO_Read>
 8005c44:	4603      	mov	r3, r0
 8005c46:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8005c48:	7d3b      	ldrb	r3, [r7, #20]
 8005c4a:	b2db      	uxtb	r3, r3
 8005c4c:	119b      	asrs	r3, r3, #6
 8005c4e:	f003 0203 	and.w	r2, r3, #3
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8005c56:	89fb      	ldrh	r3, [r7, #14]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	7dba      	ldrb	r2, [r7, #22]
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 f9c2 	bl	8005fe8 <TS_IO_Read>
 8005c64:	4603      	mov	r3, r0
 8005c66:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8005c68:	7d3b      	ldrb	r3, [r7, #20]
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8005c72:	89fb      	ldrh	r3, [r7, #14]
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	7d7a      	ldrb	r2, [r7, #21]
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f9b4 	bl	8005fe8 <TS_IO_Read>
 8005c80:	4603      	mov	r3, r0
 8005c82:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8005c84:	7d3b      	ldrb	r3, [r7, #20]
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	111b      	asrs	r3, r3, #4
 8005c8a:	f003 0204 	and.w	r2, r3, #4
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8005c92:	bf00      	nop
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200061e8 	.word	0x200061e8

08005ca0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8005ca4:	4b03      	ldr	r3, [pc, #12]	@ (8005cb4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	200061e8 	.word	0x200061e8

08005cb8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8005cbc:	f7ff fff0 	bl	8005ca0 <ft5336_Get_I2C_InitializedStatus>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d104      	bne.n	8005cd0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8005cc6:	f000 f96b 	bl	8005fa0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8005cca:	4b02      	ldr	r3, [pc, #8]	@ (8005cd4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8005ccc:	2201      	movs	r2, #1
 8005cce:	701a      	strb	r2, [r3, #0]
  }
}
 8005cd0:	bf00      	nop
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	200061e8 	.word	0x200061e8

08005cd8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08c      	sub	sp, #48	@ 0x30
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a51      	ldr	r2, [pc, #324]	@ (8005e44 <I2Cx_MspInit+0x150>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d14d      	bne.n	8005da0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005d04:	4b50      	ldr	r3, [pc, #320]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d08:	4a4f      	ldr	r2, [pc, #316]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d10:	4b4d      	ldr	r3, [pc, #308]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d18:	61bb      	str	r3, [r7, #24]
 8005d1a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8005d1c:	2380      	movs	r3, #128	@ 0x80
 8005d1e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005d20:	2312      	movs	r3, #18
 8005d22:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005d24:	2300      	movs	r3, #0
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005d30:	f107 031c 	add.w	r3, r7, #28
 8005d34:	4619      	mov	r1, r3
 8005d36:	4845      	ldr	r0, [pc, #276]	@ (8005e4c <I2Cx_MspInit+0x158>)
 8005d38:	f003 fb34 	bl	80093a4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8005d3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005d42:	f107 031c 	add.w	r3, r7, #28
 8005d46:	4619      	mov	r1, r3
 8005d48:	4840      	ldr	r0, [pc, #256]	@ (8005e4c <I2Cx_MspInit+0x158>)
 8005d4a:	f003 fb2b 	bl	80093a4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8005d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	4a3d      	ldr	r2, [pc, #244]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005d54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8005d66:	4b38      	ldr	r3, [pc, #224]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	4a37      	ldr	r2, [pc, #220]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005d6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d70:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8005d72:	4b35      	ldr	r3, [pc, #212]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005d74:	6a1b      	ldr	r3, [r3, #32]
 8005d76:	4a34      	ldr	r2, [pc, #208]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005d78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005d7c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8005d7e:	2200      	movs	r2, #0
 8005d80:	210f      	movs	r1, #15
 8005d82:	2048      	movs	r0, #72	@ 0x48
 8005d84:	f002 fce1 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8005d88:	2048      	movs	r0, #72	@ 0x48
 8005d8a:	f002 fcfa 	bl	8008782 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8005d8e:	2200      	movs	r2, #0
 8005d90:	210f      	movs	r1, #15
 8005d92:	2049      	movs	r0, #73	@ 0x49
 8005d94:	f002 fcd9 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8005d98:	2049      	movs	r0, #73	@ 0x49
 8005d9a:	f002 fcf2 	bl	8008782 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8005d9e:	e04d      	b.n	8005e3c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005da0:	4b29      	ldr	r3, [pc, #164]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da4:	4a28      	ldr	r2, [pc, #160]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005da6:	f043 0302 	orr.w	r3, r3, #2
 8005daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8005dac:	4b26      	ldr	r3, [pc, #152]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	613b      	str	r3, [r7, #16]
 8005db6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8005db8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005dbc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005dbe:	2312      	movs	r3, #18
 8005dc0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8005dca:	2304      	movs	r3, #4
 8005dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005dce:	f107 031c 	add.w	r3, r7, #28
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	481e      	ldr	r0, [pc, #120]	@ (8005e50 <I2Cx_MspInit+0x15c>)
 8005dd6:	f003 fae5 	bl	80093a4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8005dda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005de0:	f107 031c 	add.w	r3, r7, #28
 8005de4:	4619      	mov	r1, r3
 8005de6:	481a      	ldr	r0, [pc, #104]	@ (8005e50 <I2Cx_MspInit+0x15c>)
 8005de8:	f003 fadc 	bl	80093a4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8005dec:	4b16      	ldr	r3, [pc, #88]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df0:	4a15      	ldr	r2, [pc, #84]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005df2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005df6:	6413      	str	r3, [r2, #64]	@ 0x40
 8005df8:	4b13      	ldr	r3, [pc, #76]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8005e04:	4b10      	ldr	r3, [pc, #64]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	4a0f      	ldr	r2, [pc, #60]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005e0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e0e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8005e10:	4b0d      	ldr	r3, [pc, #52]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	4a0c      	ldr	r2, [pc, #48]	@ (8005e48 <I2Cx_MspInit+0x154>)
 8005e16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e1a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	210f      	movs	r1, #15
 8005e20:	201f      	movs	r0, #31
 8005e22:	f002 fc92 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8005e26:	201f      	movs	r0, #31
 8005e28:	f002 fcab 	bl	8008782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	210f      	movs	r1, #15
 8005e30:	2020      	movs	r0, #32
 8005e32:	f002 fc8a 	bl	800874a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8005e36:	2020      	movs	r0, #32
 8005e38:	f002 fca3 	bl	8008782 <HAL_NVIC_EnableIRQ>
}
 8005e3c:	bf00      	nop
 8005e3e:	3730      	adds	r7, #48	@ 0x30
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	200061f0 	.word	0x200061f0
 8005e48:	40023800 	.word	0x40023800
 8005e4c:	40021c00 	.word	0x40021c00
 8005e50:	40020400 	.word	0x40020400

08005e54 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f004 f89d 	bl	8009f9c <HAL_I2C_GetState>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d125      	bne.n	8005eb4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a14      	ldr	r2, [pc, #80]	@ (8005ebc <I2Cx_Init+0x68>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d103      	bne.n	8005e78 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a13      	ldr	r2, [pc, #76]	@ (8005ec0 <I2Cx_Init+0x6c>)
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	e002      	b.n	8005e7e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a12      	ldr	r2, [pc, #72]	@ (8005ec4 <I2Cx_Init+0x70>)
 8005e7c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a11      	ldr	r2, [pc, #68]	@ (8005ec8 <I2Cx_Init+0x74>)
 8005e82:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff ff23 	bl	8005cf4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f003 fd7a 	bl	80099a8 <HAL_I2C_Init>
  }
}
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	200061f0 	.word	0x200061f0
 8005ec0:	40005c00 	.word	0x40005c00
 8005ec4:	40005400 	.word	0x40005400
 8005ec8:	40912732 	.word	0x40912732

08005ecc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	@ 0x28
 8005ed0:	af04      	add	r7, sp, #16
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	461a      	mov	r2, r3
 8005eda:	4603      	mov	r3, r0
 8005edc:	72fb      	strb	r3, [r7, #11]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	813b      	strh	r3, [r7, #8]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005eea:	7afb      	ldrb	r3, [r7, #11]
 8005eec:	b299      	uxth	r1, r3
 8005eee:	88f8      	ldrh	r0, [r7, #6]
 8005ef0:	893a      	ldrh	r2, [r7, #8]
 8005ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005ef6:	9302      	str	r3, [sp, #8]
 8005ef8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	4603      	mov	r3, r0
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f003 ff30 	bl	8009d68 <HAL_I2C_Mem_Read>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8005f0c:	7dfb      	ldrb	r3, [r7, #23]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8005f12:	7afb      	ldrb	r3, [r7, #11]
 8005f14:	4619      	mov	r1, r3
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 f832 	bl	8005f80 <I2Cx_Error>
  }
  return status;    
 8005f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3718      	adds	r7, #24
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b08a      	sub	sp, #40	@ 0x28
 8005f2a:	af04      	add	r7, sp, #16
 8005f2c:	60f8      	str	r0, [r7, #12]
 8005f2e:	4608      	mov	r0, r1
 8005f30:	4611      	mov	r1, r2
 8005f32:	461a      	mov	r2, r3
 8005f34:	4603      	mov	r3, r0
 8005f36:	72fb      	strb	r3, [r7, #11]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	813b      	strh	r3, [r7, #8]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005f44:	7afb      	ldrb	r3, [r7, #11]
 8005f46:	b299      	uxth	r1, r3
 8005f48:	88f8      	ldrh	r0, [r7, #6]
 8005f4a:	893a      	ldrh	r2, [r7, #8]
 8005f4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f50:	9302      	str	r3, [sp, #8]
 8005f52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005f54:	9301      	str	r3, [sp, #4]
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	9300      	str	r3, [sp, #0]
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f003 fdef 	bl	8009b40 <HAL_I2C_Mem_Write>
 8005f62:	4603      	mov	r3, r0
 8005f64:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8005f66:	7dfb      	ldrb	r3, [r7, #23]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d004      	beq.n	8005f76 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8005f6c:	7afb      	ldrb	r3, [r7, #11]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 f805 	bl	8005f80 <I2Cx_Error>
  }
  return status;
 8005f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3718      	adds	r7, #24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	460b      	mov	r3, r1
 8005f8a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f003 fda7 	bl	8009ae0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff ff5e 	bl	8005e54 <I2Cx_Init>
}
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8005fa4:	4802      	ldr	r0, [pc, #8]	@ (8005fb0 <TS_IO_Init+0x10>)
 8005fa6:	f7ff ff55 	bl	8005e54 <I2Cx_Init>
}
 8005faa:	bf00      	nop
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	200061f0 	.word	0x200061f0

08005fb4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af02      	add	r7, sp, #8
 8005fba:	4603      	mov	r3, r0
 8005fbc:	71fb      	strb	r3, [r7, #7]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	71bb      	strb	r3, [r7, #6]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8005fc6:	79bb      	ldrb	r3, [r7, #6]
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	79f9      	ldrb	r1, [r7, #7]
 8005fcc:	2301      	movs	r3, #1
 8005fce:	9301      	str	r3, [sp, #4]
 8005fd0:	1d7b      	adds	r3, r7, #5
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	4803      	ldr	r0, [pc, #12]	@ (8005fe4 <TS_IO_Write+0x30>)
 8005fd8:	f7ff ffa5 	bl	8005f26 <I2Cx_WriteMultiple>
}
 8005fdc:	bf00      	nop
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	200061f0 	.word	0x200061f0

08005fe8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af02      	add	r7, sp, #8
 8005fee:	4603      	mov	r3, r0
 8005ff0:	460a      	mov	r2, r1
 8005ff2:	71fb      	strb	r3, [r7, #7]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8005ffc:	79bb      	ldrb	r3, [r7, #6]
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	79f9      	ldrb	r1, [r7, #7]
 8006002:	2301      	movs	r3, #1
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	f107 030f 	add.w	r3, r7, #15
 800600a:	9300      	str	r3, [sp, #0]
 800600c:	2301      	movs	r3, #1
 800600e:	4804      	ldr	r0, [pc, #16]	@ (8006020 <TS_IO_Read+0x38>)
 8006010:	f7ff ff5c 	bl	8005ecc <I2Cx_ReadMultiple>

  return read_value;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	200061f0 	.word	0x200061f0

08006024 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b082      	sub	sp, #8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 fe5f 	bl	8007cf0 <HAL_Delay>
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8006040:	4b31      	ldr	r3, [pc, #196]	@ (8006108 <BSP_LCD_Init+0xcc>)
 8006042:	2228      	movs	r2, #40	@ 0x28
 8006044:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8006046:	4b30      	ldr	r3, [pc, #192]	@ (8006108 <BSP_LCD_Init+0xcc>)
 8006048:	2209      	movs	r2, #9
 800604a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800604c:	4b2e      	ldr	r3, [pc, #184]	@ (8006108 <BSP_LCD_Init+0xcc>)
 800604e:	2235      	movs	r2, #53	@ 0x35
 8006050:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006052:	4b2d      	ldr	r3, [pc, #180]	@ (8006108 <BSP_LCD_Init+0xcc>)
 8006054:	220b      	movs	r2, #11
 8006056:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8006058:	4b2b      	ldr	r3, [pc, #172]	@ (8006108 <BSP_LCD_Init+0xcc>)
 800605a:	f240 121b 	movw	r2, #283	@ 0x11b
 800605e:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8006060:	4b29      	ldr	r3, [pc, #164]	@ (8006108 <BSP_LCD_Init+0xcc>)
 8006062:	f240 2215 	movw	r2, #533	@ 0x215
 8006066:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8006068:	4b27      	ldr	r3, [pc, #156]	@ (8006108 <BSP_LCD_Init+0xcc>)
 800606a:	f240 121d 	movw	r2, #285	@ 0x11d
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8006070:	4b25      	ldr	r3, [pc, #148]	@ (8006108 <BSP_LCD_Init+0xcc>)
 8006072:	f240 2235 	movw	r2, #565	@ 0x235
 8006076:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8006078:	2100      	movs	r1, #0
 800607a:	4823      	ldr	r0, [pc, #140]	@ (8006108 <BSP_LCD_Init+0xcc>)
 800607c:	f001 f83a 	bl	80070f4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8006080:	4b21      	ldr	r3, [pc, #132]	@ (8006108 <BSP_LCD_Init+0xcc>)
 8006082:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006086:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8006088:	4b1f      	ldr	r3, [pc, #124]	@ (8006108 <BSP_LCD_Init+0xcc>)
 800608a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800608e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8006090:	4b1d      	ldr	r3, [pc, #116]	@ (8006108 <BSP_LCD_Init+0xcc>)
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8006098:	4b1b      	ldr	r3, [pc, #108]	@ (8006108 <BSP_LCD_Init+0xcc>)
 800609a:	2200      	movs	r2, #0
 800609c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80060a0:	4b19      	ldr	r3, [pc, #100]	@ (8006108 <BSP_LCD_Init+0xcc>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80060a8:	4b17      	ldr	r3, [pc, #92]	@ (8006108 <BSP_LCD_Init+0xcc>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80060ae:	4b16      	ldr	r3, [pc, #88]	@ (8006108 <BSP_LCD_Init+0xcc>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80060b4:	4b14      	ldr	r3, [pc, #80]	@ (8006108 <BSP_LCD_Init+0xcc>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80060ba:	4b13      	ldr	r3, [pc, #76]	@ (8006108 <BSP_LCD_Init+0xcc>)
 80060bc:	2200      	movs	r2, #0
 80060be:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80060c0:	4b11      	ldr	r3, [pc, #68]	@ (8006108 <BSP_LCD_Init+0xcc>)
 80060c2:	4a12      	ldr	r2, [pc, #72]	@ (800610c <BSP_LCD_Init+0xd0>)
 80060c4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80060c6:	4810      	ldr	r0, [pc, #64]	@ (8006108 <BSP_LCD_Init+0xcc>)
 80060c8:	f004 fbde 	bl	800a888 <HAL_LTDC_GetState>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80060d2:	2100      	movs	r1, #0
 80060d4:	480c      	ldr	r0, [pc, #48]	@ (8006108 <BSP_LCD_Init+0xcc>)
 80060d6:	f000 ff33 	bl	8006f40 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80060da:	480b      	ldr	r0, [pc, #44]	@ (8006108 <BSP_LCD_Init+0xcc>)
 80060dc:	f004 fac6 	bl	800a66c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80060e0:	2201      	movs	r2, #1
 80060e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80060e6:	480a      	ldr	r0, [pc, #40]	@ (8006110 <BSP_LCD_Init+0xd4>)
 80060e8:	f003 fc2c 	bl	8009944 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80060ec:	2201      	movs	r2, #1
 80060ee:	2108      	movs	r1, #8
 80060f0:	4808      	ldr	r0, [pc, #32]	@ (8006114 <BSP_LCD_Init+0xd8>)
 80060f2:	f003 fc27 	bl	8009944 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80060f6:	f001 f961 	bl	80073bc <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80060fa:	4807      	ldr	r0, [pc, #28]	@ (8006118 <BSP_LCD_Init+0xdc>)
 80060fc:	f000 f916 	bl	800632c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20006244 	.word	0x20006244
 800610c:	40016800 	.word	0x40016800
 8006110:	40022000 	.word	0x40022000
 8006114:	40022800 	.word	0x40022800
 8006118:	20004efc 	.word	0x20004efc

0800611c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8006120:	4b06      	ldr	r3, [pc, #24]	@ (800613c <BSP_LCD_GetXSize+0x20>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a06      	ldr	r2, [pc, #24]	@ (8006140 <BSP_LCD_GetXSize+0x24>)
 8006126:	2134      	movs	r1, #52	@ 0x34
 8006128:	fb01 f303 	mul.w	r3, r1, r3
 800612c:	4413      	add	r3, r2
 800612e:	3360      	adds	r3, #96	@ 0x60
 8006130:	681b      	ldr	r3, [r3, #0]
}
 8006132:	4618      	mov	r0, r3
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	2000632c 	.word	0x2000632c
 8006140:	20006244 	.word	0x20006244

08006144 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8006148:	4b06      	ldr	r3, [pc, #24]	@ (8006164 <BSP_LCD_GetYSize+0x20>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a06      	ldr	r2, [pc, #24]	@ (8006168 <BSP_LCD_GetYSize+0x24>)
 800614e:	2134      	movs	r1, #52	@ 0x34
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	4413      	add	r3, r2
 8006156:	3364      	adds	r3, #100	@ 0x64
 8006158:	681b      	ldr	r3, [r3, #0]
}
 800615a:	4618      	mov	r0, r3
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	2000632c 	.word	0x2000632c
 8006168:	20006244 	.word	0x20006244

0800616c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800616c:	b580      	push	{r7, lr}
 800616e:	b090      	sub	sp, #64	@ 0x40
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	6039      	str	r1, [r7, #0]
 8006176:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800617c:	f7ff ffce 	bl	800611c <BSP_LCD_GetXSize>
 8006180:	4603      	mov	r3, r0
 8006182:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8006184:	2300      	movs	r3, #0
 8006186:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8006188:	f7ff ffdc 	bl	8006144 <BSP_LCD_GetYSize>
 800618c:	4603      	mov	r3, r0
 800618e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8006190:	2300      	movs	r3, #0
 8006192:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8006198:	23ff      	movs	r3, #255	@ 0xff
 800619a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80061b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80061b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80061b8:	2307      	movs	r3, #7
 80061ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80061bc:	f7ff ffae 	bl	800611c <BSP_LCD_GetXSize>
 80061c0:	4603      	mov	r3, r0
 80061c2:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80061c4:	f7ff ffbe 	bl	8006144 <BSP_LCD_GetYSize>
 80061c8:	4603      	mov	r3, r0
 80061ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80061cc:	88fa      	ldrh	r2, [r7, #6]
 80061ce:	f107 030c 	add.w	r3, r7, #12
 80061d2:	4619      	mov	r1, r3
 80061d4:	4812      	ldr	r0, [pc, #72]	@ (8006220 <BSP_LCD_LayerDefaultInit+0xb4>)
 80061d6:	f004 fb19 	bl	800a80c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80061da:	88fa      	ldrh	r2, [r7, #6]
 80061dc:	4911      	ldr	r1, [pc, #68]	@ (8006224 <BSP_LCD_LayerDefaultInit+0xb8>)
 80061de:	4613      	mov	r3, r2
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	3304      	adds	r3, #4
 80061ea:	f04f 32ff 	mov.w	r2, #4294967295
 80061ee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80061f0:	88fa      	ldrh	r2, [r7, #6]
 80061f2:	490c      	ldr	r1, [pc, #48]	@ (8006224 <BSP_LCD_LayerDefaultInit+0xb8>)
 80061f4:	4613      	mov	r3, r2
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	4413      	add	r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	440b      	add	r3, r1
 80061fe:	3308      	adds	r3, #8
 8006200:	4a09      	ldr	r2, [pc, #36]	@ (8006228 <BSP_LCD_LayerDefaultInit+0xbc>)
 8006202:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8006204:	88fa      	ldrh	r2, [r7, #6]
 8006206:	4907      	ldr	r1, [pc, #28]	@ (8006224 <BSP_LCD_LayerDefaultInit+0xb8>)
 8006208:	4613      	mov	r3, r2
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	440b      	add	r3, r1
 8006212:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8006216:	601a      	str	r2, [r3, #0]
}
 8006218:	bf00      	nop
 800621a:	3740      	adds	r7, #64	@ 0x40
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20006244 	.word	0x20006244
 8006224:	20006330 	.word	0x20006330
 8006228:	20004efc 	.word	0x20004efc

0800622c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8006234:	4a04      	ldr	r2, [pc, #16]	@ (8006248 <BSP_LCD_SelectLayer+0x1c>)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6013      	str	r3, [r2, #0]
} 
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	2000632c 	.word	0x2000632c

0800624c <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8006258:	78fb      	ldrb	r3, [r7, #3]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d112      	bne.n	8006284 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 800625e:	4b19      	ldr	r3, [pc, #100]	@ (80062c4 <BSP_LCD_SetLayerVisible+0x78>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	01db      	lsls	r3, r3, #7
 8006268:	4413      	add	r3, r2
 800626a:	3384      	adds	r3, #132	@ 0x84
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a15      	ldr	r2, [pc, #84]	@ (80062c4 <BSP_LCD_SetLayerVisible+0x78>)
 8006270:	6812      	ldr	r2, [r2, #0]
 8006272:	4611      	mov	r1, r2
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	01d2      	lsls	r2, r2, #7
 8006278:	440a      	add	r2, r1
 800627a:	3284      	adds	r2, #132	@ 0x84
 800627c:	f043 0301 	orr.w	r3, r3, #1
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	e011      	b.n	80062a8 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8006284:	4b0f      	ldr	r3, [pc, #60]	@ (80062c4 <BSP_LCD_SetLayerVisible+0x78>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	461a      	mov	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	01db      	lsls	r3, r3, #7
 800628e:	4413      	add	r3, r2
 8006290:	3384      	adds	r3, #132	@ 0x84
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a0b      	ldr	r2, [pc, #44]	@ (80062c4 <BSP_LCD_SetLayerVisible+0x78>)
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	4611      	mov	r1, r2
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	01d2      	lsls	r2, r2, #7
 800629e:	440a      	add	r2, r1
 80062a0:	3284      	adds	r2, #132	@ 0x84
 80062a2:	f023 0301 	bic.w	r3, r3, #1
 80062a6:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 80062a8:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <BSP_LCD_SetLayerVisible+0x78>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062ae:	4b05      	ldr	r3, [pc, #20]	@ (80062c4 <BSP_LCD_SetLayerVisible+0x78>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	625a      	str	r2, [r3, #36]	@ 0x24
} 
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	20006244 	.word	0x20006244

080062c8 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80062d0:	4b07      	ldr	r3, [pc, #28]	@ (80062f0 <BSP_LCD_SetTextColor+0x28>)
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	4907      	ldr	r1, [pc, #28]	@ (80062f4 <BSP_LCD_SetTextColor+0x2c>)
 80062d6:	4613      	mov	r3, r2
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	4413      	add	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	440b      	add	r3, r1
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	601a      	str	r2, [r3, #0]
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	2000632c 	.word	0x2000632c
 80062f4:	20006330 	.word	0x20006330

080062f8 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8006300:	4b08      	ldr	r3, [pc, #32]	@ (8006324 <BSP_LCD_SetBackColor+0x2c>)
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	4908      	ldr	r1, [pc, #32]	@ (8006328 <BSP_LCD_SetBackColor+0x30>)
 8006306:	4613      	mov	r3, r2
 8006308:	005b      	lsls	r3, r3, #1
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	440b      	add	r3, r1
 8006310:	3304      	adds	r3, #4
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	601a      	str	r2, [r3, #0]
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	2000632c 	.word	0x2000632c
 8006328:	20006330 	.word	0x20006330

0800632c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8006334:	4b08      	ldr	r3, [pc, #32]	@ (8006358 <BSP_LCD_SetFont+0x2c>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	4908      	ldr	r1, [pc, #32]	@ (800635c <BSP_LCD_SetFont+0x30>)
 800633a:	4613      	mov	r3, r2
 800633c:	005b      	lsls	r3, r3, #1
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	440b      	add	r3, r1
 8006344:	3308      	adds	r3, #8
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	601a      	str	r2, [r3, #0]
}
 800634a:	bf00      	nop
 800634c:	370c      	adds	r7, #12
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	2000632c 	.word	0x2000632c
 800635c:	20006330 	.word	0x20006330

08006360 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8006360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006362:	b085      	sub	sp, #20
 8006364:	af02      	add	r7, sp, #8
 8006366:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8006368:	4b0f      	ldr	r3, [pc, #60]	@ (80063a8 <BSP_LCD_Clear+0x48>)
 800636a:	681c      	ldr	r4, [r3, #0]
 800636c:	4b0e      	ldr	r3, [pc, #56]	@ (80063a8 <BSP_LCD_Clear+0x48>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a0e      	ldr	r2, [pc, #56]	@ (80063ac <BSP_LCD_Clear+0x4c>)
 8006372:	2134      	movs	r1, #52	@ 0x34
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	4413      	add	r3, r2
 800637a:	335c      	adds	r3, #92	@ 0x5c
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	461e      	mov	r6, r3
 8006380:	f7ff fecc 	bl	800611c <BSP_LCD_GetXSize>
 8006384:	4605      	mov	r5, r0
 8006386:	f7ff fedd 	bl	8006144 <BSP_LCD_GetYSize>
 800638a:	4602      	mov	r2, r0
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	2300      	movs	r3, #0
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	4613      	mov	r3, r2
 8006396:	462a      	mov	r2, r5
 8006398:	4631      	mov	r1, r6
 800639a:	4620      	mov	r0, r4
 800639c:	f000 ff7e 	bl	800729c <LL_FillBuffer>
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a8:	2000632c 	.word	0x2000632c
 80063ac:	20006244 	.word	0x20006244

080063b0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80063b0:	b590      	push	{r4, r7, lr}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	80fb      	strh	r3, [r7, #6]
 80063ba:	460b      	mov	r3, r1
 80063bc:	80bb      	strh	r3, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80063c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <BSP_LCD_DisplayChar+0x80>)
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	491b      	ldr	r1, [pc, #108]	@ (8006434 <BSP_LCD_DisplayChar+0x84>)
 80063c8:	4613      	mov	r3, r2
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	440b      	add	r3, r1
 80063d2:	3308      	adds	r3, #8
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6819      	ldr	r1, [r3, #0]
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80063de:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <BSP_LCD_DisplayChar+0x80>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4c14      	ldr	r4, [pc, #80]	@ (8006434 <BSP_LCD_DisplayChar+0x84>)
 80063e4:	4613      	mov	r3, r2
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4423      	add	r3, r4
 80063ee:	3308      	adds	r3, #8
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80063f4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80063f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006430 <BSP_LCD_DisplayChar+0x80>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	4c0d      	ldr	r4, [pc, #52]	@ (8006434 <BSP_LCD_DisplayChar+0x84>)
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	4423      	add	r3, r4
 8006408:	3308      	adds	r3, #8
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	889b      	ldrh	r3, [r3, #4]
 800640e:	3307      	adds	r3, #7
 8006410:	2b00      	cmp	r3, #0
 8006412:	da00      	bge.n	8006416 <BSP_LCD_DisplayChar+0x66>
 8006414:	3307      	adds	r3, #7
 8006416:	10db      	asrs	r3, r3, #3
 8006418:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800641c:	18ca      	adds	r2, r1, r3
 800641e:	88b9      	ldrh	r1, [r7, #4]
 8006420:	88fb      	ldrh	r3, [r7, #6]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fe82 	bl	800712c <DrawChar>
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	bd90      	pop	{r4, r7, pc}
 8006430:	2000632c 	.word	0x2000632c
 8006434:	20006330 	.word	0x20006330

08006438 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8006438:	b5b0      	push	{r4, r5, r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	60ba      	str	r2, [r7, #8]
 8006440:	461a      	mov	r2, r3
 8006442:	4603      	mov	r3, r0
 8006444:	81fb      	strh	r3, [r7, #14]
 8006446:	460b      	mov	r3, r1
 8006448:	81bb      	strh	r3, [r7, #12]
 800644a:	4613      	mov	r3, r2
 800644c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800644e:	2301      	movs	r3, #1
 8006450:	83fb      	strh	r3, [r7, #30]
 8006452:	2300      	movs	r3, #0
 8006454:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8006456:	2300      	movs	r3, #0
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8006462:	e002      	b.n	800646a <BSP_LCD_DisplayStringAt+0x32>
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	3301      	adds	r3, #1
 8006468:	61bb      	str	r3, [r7, #24]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	617a      	str	r2, [r7, #20]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f6      	bne.n	8006464 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8006476:	f7ff fe51 	bl	800611c <BSP_LCD_GetXSize>
 800647a:	4601      	mov	r1, r0
 800647c:	4b50      	ldr	r3, [pc, #320]	@ (80065c0 <BSP_LCD_DisplayStringAt+0x188>)
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	4850      	ldr	r0, [pc, #320]	@ (80065c4 <BSP_LCD_DisplayStringAt+0x18c>)
 8006482:	4613      	mov	r3, r2
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4403      	add	r3, r0
 800648c:	3308      	adds	r3, #8
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	889b      	ldrh	r3, [r3, #4]
 8006492:	fbb1 f3f3 	udiv	r3, r1, r3
 8006496:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	2b03      	cmp	r3, #3
 800649c:	d01c      	beq.n	80064d8 <BSP_LCD_DisplayStringAt+0xa0>
 800649e:	2b03      	cmp	r3, #3
 80064a0:	dc33      	bgt.n	800650a <BSP_LCD_DisplayStringAt+0xd2>
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d002      	beq.n	80064ac <BSP_LCD_DisplayStringAt+0x74>
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d019      	beq.n	80064de <BSP_LCD_DisplayStringAt+0xa6>
 80064aa:	e02e      	b.n	800650a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	1ad1      	subs	r1, r2, r3
 80064b2:	4b43      	ldr	r3, [pc, #268]	@ (80065c0 <BSP_LCD_DisplayStringAt+0x188>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4843      	ldr	r0, [pc, #268]	@ (80065c4 <BSP_LCD_DisplayStringAt+0x18c>)
 80064b8:	4613      	mov	r3, r2
 80064ba:	005b      	lsls	r3, r3, #1
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4403      	add	r3, r0
 80064c2:	3308      	adds	r3, #8
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	889b      	ldrh	r3, [r3, #4]
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	89fb      	ldrh	r3, [r7, #14]
 80064d2:	4413      	add	r3, r2
 80064d4:	83fb      	strh	r3, [r7, #30]
      break;
 80064d6:	e01b      	b.n	8006510 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80064d8:	89fb      	ldrh	r3, [r7, #14]
 80064da:	83fb      	strh	r3, [r7, #30]
      break;
 80064dc:	e018      	b.n	8006510 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	b299      	uxth	r1, r3
 80064e6:	4b36      	ldr	r3, [pc, #216]	@ (80065c0 <BSP_LCD_DisplayStringAt+0x188>)
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	4836      	ldr	r0, [pc, #216]	@ (80065c4 <BSP_LCD_DisplayStringAt+0x18c>)
 80064ec:	4613      	mov	r3, r2
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	4413      	add	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4403      	add	r3, r0
 80064f6:	3308      	adds	r3, #8
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	889b      	ldrh	r3, [r3, #4]
 80064fc:	fb11 f303 	smulbb	r3, r1, r3
 8006500:	b29a      	uxth	r2, r3
 8006502:	89fb      	ldrh	r3, [r7, #14]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	83fb      	strh	r3, [r7, #30]
      break;
 8006508:	e002      	b.n	8006510 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800650a:	89fb      	ldrh	r3, [r7, #14]
 800650c:	83fb      	strh	r3, [r7, #30]
      break;
 800650e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8006510:	8bfb      	ldrh	r3, [r7, #30]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <BSP_LCD_DisplayStringAt+0xe6>
 8006516:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800651a:	2b00      	cmp	r3, #0
 800651c:	da1d      	bge.n	800655a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800651e:	2301      	movs	r3, #1
 8006520:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8006522:	e01a      	b.n	800655a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	781a      	ldrb	r2, [r3, #0]
 8006528:	89b9      	ldrh	r1, [r7, #12]
 800652a:	8bfb      	ldrh	r3, [r7, #30]
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff ff3f 	bl	80063b0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8006532:	4b23      	ldr	r3, [pc, #140]	@ (80065c0 <BSP_LCD_DisplayStringAt+0x188>)
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	4923      	ldr	r1, [pc, #140]	@ (80065c4 <BSP_LCD_DisplayStringAt+0x18c>)
 8006538:	4613      	mov	r3, r2
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	4413      	add	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	3308      	adds	r3, #8
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	889a      	ldrh	r2, [r3, #4]
 8006548:	8bfb      	ldrh	r3, [r7, #30]
 800654a:	4413      	add	r3, r2
 800654c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	3301      	adds	r3, #1
 8006552:	60bb      	str	r3, [r7, #8]
    i++;
 8006554:	8bbb      	ldrh	r3, [r7, #28]
 8006556:	3301      	adds	r3, #1
 8006558:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	bf14      	ite	ne
 8006562:	2301      	movne	r3, #1
 8006564:	2300      	moveq	r3, #0
 8006566:	b2dc      	uxtb	r4, r3
 8006568:	f7ff fdd8 	bl	800611c <BSP_LCD_GetXSize>
 800656c:	8bb9      	ldrh	r1, [r7, #28]
 800656e:	4b14      	ldr	r3, [pc, #80]	@ (80065c0 <BSP_LCD_DisplayStringAt+0x188>)
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	4d14      	ldr	r5, [pc, #80]	@ (80065c4 <BSP_LCD_DisplayStringAt+0x18c>)
 8006574:	4613      	mov	r3, r2
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	442b      	add	r3, r5
 800657e:	3308      	adds	r3, #8
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	889b      	ldrh	r3, [r3, #4]
 8006584:	fb01 f303 	mul.w	r3, r1, r3
 8006588:	1ac3      	subs	r3, r0, r3
 800658a:	b299      	uxth	r1, r3
 800658c:	4b0c      	ldr	r3, [pc, #48]	@ (80065c0 <BSP_LCD_DisplayStringAt+0x188>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	480c      	ldr	r0, [pc, #48]	@ (80065c4 <BSP_LCD_DisplayStringAt+0x18c>)
 8006592:	4613      	mov	r3, r2
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4403      	add	r3, r0
 800659c:	3308      	adds	r3, #8
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	889b      	ldrh	r3, [r3, #4]
 80065a2:	4299      	cmp	r1, r3
 80065a4:	bf2c      	ite	cs
 80065a6:	2301      	movcs	r3, #1
 80065a8:	2300      	movcc	r3, #0
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	4023      	ands	r3, r4
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1b7      	bne.n	8006524 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80065b4:	bf00      	nop
 80065b6:	bf00      	nop
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bdb0      	pop	{r4, r5, r7, pc}
 80065be:	bf00      	nop
 80065c0:	2000632c 	.word	0x2000632c
 80065c4:	20006330 	.word	0x20006330

080065c8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80065c8:	b5b0      	push	{r4, r5, r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af02      	add	r7, sp, #8
 80065ce:	4603      	mov	r3, r0
 80065d0:	80fb      	strh	r3, [r7, #6]
 80065d2:	460b      	mov	r3, r1
 80065d4:	80bb      	strh	r3, [r7, #4]
 80065d6:	4613      	mov	r3, r2
 80065d8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80065de:	4b26      	ldr	r3, [pc, #152]	@ (8006678 <BSP_LCD_DrawHLine+0xb0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a26      	ldr	r2, [pc, #152]	@ (800667c <BSP_LCD_DrawHLine+0xb4>)
 80065e4:	2134      	movs	r1, #52	@ 0x34
 80065e6:	fb01 f303 	mul.w	r3, r1, r3
 80065ea:	4413      	add	r3, r2
 80065ec:	3348      	adds	r3, #72	@ 0x48
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d114      	bne.n	800661e <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80065f4:	4b20      	ldr	r3, [pc, #128]	@ (8006678 <BSP_LCD_DrawHLine+0xb0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a20      	ldr	r2, [pc, #128]	@ (800667c <BSP_LCD_DrawHLine+0xb4>)
 80065fa:	2134      	movs	r1, #52	@ 0x34
 80065fc:	fb01 f303 	mul.w	r3, r1, r3
 8006600:	4413      	add	r3, r2
 8006602:	335c      	adds	r3, #92	@ 0x5c
 8006604:	681c      	ldr	r4, [r3, #0]
 8006606:	f7ff fd89 	bl	800611c <BSP_LCD_GetXSize>
 800660a:	4602      	mov	r2, r0
 800660c:	88bb      	ldrh	r3, [r7, #4]
 800660e:	fb03 f202 	mul.w	r2, r3, r2
 8006612:	88fb      	ldrh	r3, [r7, #6]
 8006614:	4413      	add	r3, r2
 8006616:	005b      	lsls	r3, r3, #1
 8006618:	4423      	add	r3, r4
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	e013      	b.n	8006646 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800661e:	4b16      	ldr	r3, [pc, #88]	@ (8006678 <BSP_LCD_DrawHLine+0xb0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a16      	ldr	r2, [pc, #88]	@ (800667c <BSP_LCD_DrawHLine+0xb4>)
 8006624:	2134      	movs	r1, #52	@ 0x34
 8006626:	fb01 f303 	mul.w	r3, r1, r3
 800662a:	4413      	add	r3, r2
 800662c:	335c      	adds	r3, #92	@ 0x5c
 800662e:	681c      	ldr	r4, [r3, #0]
 8006630:	f7ff fd74 	bl	800611c <BSP_LCD_GetXSize>
 8006634:	4602      	mov	r2, r0
 8006636:	88bb      	ldrh	r3, [r7, #4]
 8006638:	fb03 f202 	mul.w	r2, r3, r2
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4423      	add	r3, r4
 8006644:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8006646:	4b0c      	ldr	r3, [pc, #48]	@ (8006678 <BSP_LCD_DrawHLine+0xb0>)
 8006648:	6818      	ldr	r0, [r3, #0]
 800664a:	68f9      	ldr	r1, [r7, #12]
 800664c:	887c      	ldrh	r4, [r7, #2]
 800664e:	4b0a      	ldr	r3, [pc, #40]	@ (8006678 <BSP_LCD_DrawHLine+0xb0>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4d0b      	ldr	r5, [pc, #44]	@ (8006680 <BSP_LCD_DrawHLine+0xb8>)
 8006654:	4613      	mov	r3, r2
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	4413      	add	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	442b      	add	r3, r5
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	2300      	movs	r3, #0
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	2301      	movs	r3, #1
 8006668:	4622      	mov	r2, r4
 800666a:	f000 fe17 	bl	800729c <LL_FillBuffer>
}
 800666e:	bf00      	nop
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bdb0      	pop	{r4, r5, r7, pc}
 8006676:	bf00      	nop
 8006678:	2000632c 	.word	0x2000632c
 800667c:	20006244 	.word	0x20006244
 8006680:	20006330 	.word	0x20006330

08006684 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8006684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006686:	b087      	sub	sp, #28
 8006688:	af02      	add	r7, sp, #8
 800668a:	4603      	mov	r3, r0
 800668c:	80fb      	strh	r3, [r7, #6]
 800668e:	460b      	mov	r3, r1
 8006690:	80bb      	strh	r3, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800669a:	4b28      	ldr	r3, [pc, #160]	@ (800673c <BSP_LCD_DrawVLine+0xb8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a28      	ldr	r2, [pc, #160]	@ (8006740 <BSP_LCD_DrawVLine+0xbc>)
 80066a0:	2134      	movs	r1, #52	@ 0x34
 80066a2:	fb01 f303 	mul.w	r3, r1, r3
 80066a6:	4413      	add	r3, r2
 80066a8:	3348      	adds	r3, #72	@ 0x48
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d114      	bne.n	80066da <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80066b0:	4b22      	ldr	r3, [pc, #136]	@ (800673c <BSP_LCD_DrawVLine+0xb8>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a22      	ldr	r2, [pc, #136]	@ (8006740 <BSP_LCD_DrawVLine+0xbc>)
 80066b6:	2134      	movs	r1, #52	@ 0x34
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	4413      	add	r3, r2
 80066be:	335c      	adds	r3, #92	@ 0x5c
 80066c0:	681c      	ldr	r4, [r3, #0]
 80066c2:	f7ff fd2b 	bl	800611c <BSP_LCD_GetXSize>
 80066c6:	4602      	mov	r2, r0
 80066c8:	88bb      	ldrh	r3, [r7, #4]
 80066ca:	fb03 f202 	mul.w	r2, r3, r2
 80066ce:	88fb      	ldrh	r3, [r7, #6]
 80066d0:	4413      	add	r3, r2
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	4423      	add	r3, r4
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	e013      	b.n	8006702 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80066da:	4b18      	ldr	r3, [pc, #96]	@ (800673c <BSP_LCD_DrawVLine+0xb8>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a18      	ldr	r2, [pc, #96]	@ (8006740 <BSP_LCD_DrawVLine+0xbc>)
 80066e0:	2134      	movs	r1, #52	@ 0x34
 80066e2:	fb01 f303 	mul.w	r3, r1, r3
 80066e6:	4413      	add	r3, r2
 80066e8:	335c      	adds	r3, #92	@ 0x5c
 80066ea:	681c      	ldr	r4, [r3, #0]
 80066ec:	f7ff fd16 	bl	800611c <BSP_LCD_GetXSize>
 80066f0:	4602      	mov	r2, r0
 80066f2:	88bb      	ldrh	r3, [r7, #4]
 80066f4:	fb03 f202 	mul.w	r2, r3, r2
 80066f8:	88fb      	ldrh	r3, [r7, #6]
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	4423      	add	r3, r4
 8006700:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8006702:	4b0e      	ldr	r3, [pc, #56]	@ (800673c <BSP_LCD_DrawVLine+0xb8>)
 8006704:	681c      	ldr	r4, [r3, #0]
 8006706:	68fd      	ldr	r5, [r7, #12]
 8006708:	887e      	ldrh	r6, [r7, #2]
 800670a:	f7ff fd07 	bl	800611c <BSP_LCD_GetXSize>
 800670e:	4603      	mov	r3, r0
 8006710:	1e59      	subs	r1, r3, #1
 8006712:	4b0a      	ldr	r3, [pc, #40]	@ (800673c <BSP_LCD_DrawVLine+0xb8>)
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	480b      	ldr	r0, [pc, #44]	@ (8006744 <BSP_LCD_DrawVLine+0xc0>)
 8006718:	4613      	mov	r3, r2
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4403      	add	r3, r0
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	9301      	str	r3, [sp, #4]
 8006726:	9100      	str	r1, [sp, #0]
 8006728:	4633      	mov	r3, r6
 800672a:	2201      	movs	r2, #1
 800672c:	4629      	mov	r1, r5
 800672e:	4620      	mov	r0, r4
 8006730:	f000 fdb4 	bl	800729c <LL_FillBuffer>
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800673c:	2000632c 	.word	0x2000632c
 8006740:	20006244 	.word	0x20006244
 8006744:	20006330 	.word	0x20006330

08006748 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8006748:	b590      	push	{r4, r7, lr}
 800674a:	b08b      	sub	sp, #44	@ 0x2c
 800674c:	af00      	add	r7, sp, #0
 800674e:	4604      	mov	r4, r0
 8006750:	4608      	mov	r0, r1
 8006752:	4611      	mov	r1, r2
 8006754:	461a      	mov	r2, r3
 8006756:	4623      	mov	r3, r4
 8006758:	80fb      	strh	r3, [r7, #6]
 800675a:	4603      	mov	r3, r0
 800675c:	80bb      	strh	r3, [r7, #4]
 800675e:	460b      	mov	r3, r1
 8006760:	807b      	strh	r3, [r7, #2]
 8006762:	4613      	mov	r3, r2
 8006764:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8006766:	2300      	movs	r3, #0
 8006768:	823b      	strh	r3, [r7, #16]
 800676a:	2300      	movs	r3, #0
 800676c:	81fb      	strh	r3, [r7, #14]
 800676e:	2300      	movs	r3, #0
 8006770:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006772:	2300      	movs	r3, #0
 8006774:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006776:	2300      	movs	r3, #0
 8006778:	847b      	strh	r3, [r7, #34]	@ 0x22
 800677a:	2300      	movs	r3, #0
 800677c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 800677e:	2300      	movs	r3, #0
 8006780:	83fb      	strh	r3, [r7, #30]
 8006782:	2300      	movs	r3, #0
 8006784:	83bb      	strh	r3, [r7, #28]
 8006786:	2300      	movs	r3, #0
 8006788:	837b      	strh	r3, [r7, #26]
 800678a:	2300      	movs	r3, #0
 800678c:	833b      	strh	r3, [r7, #24]
 800678e:	2300      	movs	r3, #0
 8006790:	82fb      	strh	r3, [r7, #22]
 8006792:	2300      	movs	r3, #0
 8006794:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800679a:	887a      	ldrh	r2, [r7, #2]
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bfb8      	it	lt
 80067a4:	425b      	neglt	r3, r3
 80067a6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80067a8:	883a      	ldrh	r2, [r7, #0]
 80067aa:	88bb      	ldrh	r3, [r7, #4]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	bfb8      	it	lt
 80067b2:	425b      	neglt	r3, r3
 80067b4:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 80067b6:	88fb      	ldrh	r3, [r7, #6]
 80067b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  y = y1;                       /* Start y off at the first pixel */
 80067ba:	88bb      	ldrh	r3, [r7, #4]
 80067bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 80067be:	887a      	ldrh	r2, [r7, #2]
 80067c0:	88fb      	ldrh	r3, [r7, #6]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d304      	bcc.n	80067d0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80067c6:	2301      	movs	r3, #1
 80067c8:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = 1;
 80067ca:	2301      	movs	r3, #1
 80067cc:	843b      	strh	r3, [r7, #32]
 80067ce:	e005      	b.n	80067dc <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80067d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067d4:	847b      	strh	r3, [r7, #34]	@ 0x22
    xinc2 = -1;
 80067d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067da:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80067dc:	883a      	ldrh	r2, [r7, #0]
 80067de:	88bb      	ldrh	r3, [r7, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d304      	bcc.n	80067ee <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80067e4:	2301      	movs	r3, #1
 80067e6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80067e8:	2301      	movs	r3, #1
 80067ea:	83bb      	strh	r3, [r7, #28]
 80067ec:	e005      	b.n	80067fa <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80067ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067f2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80067f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067f8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80067fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80067fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006802:	429a      	cmp	r2, r3
 8006804:	db11      	blt.n	800682a <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8006806:	2300      	movs	r3, #0
 8006808:	847b      	strh	r3, [r7, #34]	@ 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800680a:	2300      	movs	r3, #0
 800680c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800680e:	8a3b      	ldrh	r3, [r7, #16]
 8006810:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8006812:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	da00      	bge.n	800681c <BSP_LCD_DrawLine+0xd4>
 800681a:	3301      	adds	r3, #1
 800681c:	105b      	asrs	r3, r3, #1
 800681e:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8006820:	89fb      	ldrh	r3, [r7, #14]
 8006822:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8006824:	8a3b      	ldrh	r3, [r7, #16]
 8006826:	82bb      	strh	r3, [r7, #20]
 8006828:	e010      	b.n	800684c <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800682a:	2300      	movs	r3, #0
 800682c:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800682e:	2300      	movs	r3, #0
 8006830:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8006832:	89fb      	ldrh	r3, [r7, #14]
 8006834:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8006836:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800683a:	2b00      	cmp	r3, #0
 800683c:	da00      	bge.n	8006840 <BSP_LCD_DrawLine+0xf8>
 800683e:	3301      	adds	r3, #1
 8006840:	105b      	asrs	r3, r3, #1
 8006842:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8006844:	8a3b      	ldrh	r3, [r7, #16]
 8006846:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8006848:	89fb      	ldrh	r3, [r7, #14]
 800684a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800684c:	2300      	movs	r3, #0
 800684e:	827b      	strh	r3, [r7, #18]
 8006850:	e037      	b.n	80068c2 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8006852:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8006854:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8006856:	4b20      	ldr	r3, [pc, #128]	@ (80068d8 <BSP_LCD_DrawLine+0x190>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4c20      	ldr	r4, [pc, #128]	@ (80068dc <BSP_LCD_DrawLine+0x194>)
 800685c:	4613      	mov	r3, r2
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4423      	add	r3, r4
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	f000 f955 	bl	8006b18 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 800686e:	8b3a      	ldrh	r2, [r7, #24]
 8006870:	8afb      	ldrh	r3, [r7, #22]
 8006872:	4413      	add	r3, r2
 8006874:	b29b      	uxth	r3, r3
 8006876:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8006878:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800687c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8006880:	429a      	cmp	r2, r3
 8006882:	db0e      	blt.n	80068a2 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8006884:	8b3a      	ldrh	r2, [r7, #24]
 8006886:	8b7b      	ldrh	r3, [r7, #26]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	b29b      	uxth	r3, r3
 800688c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800688e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006890:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006892:	4413      	add	r3, r2
 8006894:	b29b      	uxth	r3, r3
 8006896:	84fb      	strh	r3, [r7, #38]	@ 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8006898:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800689a:	8bfb      	ldrh	r3, [r7, #30]
 800689c:	4413      	add	r3, r2
 800689e:	b29b      	uxth	r3, r3
 80068a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80068a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80068a4:	8c3b      	ldrh	r3, [r7, #32]
 80068a6:	4413      	add	r3, r2
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80068ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80068ae:	8bbb      	ldrh	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80068b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3301      	adds	r3, #1
 80068be:	b29b      	uxth	r3, r3
 80068c0:	827b      	strh	r3, [r7, #18]
 80068c2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80068c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	ddc1      	ble.n	8006852 <BSP_LCD_DrawLine+0x10a>
  }
}
 80068ce:	bf00      	nop
 80068d0:	bf00      	nop
 80068d2:	372c      	adds	r7, #44	@ 0x2c
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd90      	pop	{r4, r7, pc}
 80068d8:	2000632c 	.word	0x2000632c
 80068dc:	20006330 	.word	0x20006330

080068e0 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80068e0:	b590      	push	{r4, r7, lr}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4604      	mov	r4, r0
 80068e8:	4608      	mov	r0, r1
 80068ea:	4611      	mov	r1, r2
 80068ec:	461a      	mov	r2, r3
 80068ee:	4623      	mov	r3, r4
 80068f0:	80fb      	strh	r3, [r7, #6]
 80068f2:	4603      	mov	r3, r0
 80068f4:	80bb      	strh	r3, [r7, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	807b      	strh	r3, [r7, #2]
 80068fa:	4613      	mov	r3, r2
 80068fc:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 80068fe:	887a      	ldrh	r2, [r7, #2]
 8006900:	88b9      	ldrh	r1, [r7, #4]
 8006902:	88fb      	ldrh	r3, [r7, #6]
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff fe5f 	bl	80065c8 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800690a:	88ba      	ldrh	r2, [r7, #4]
 800690c:	883b      	ldrh	r3, [r7, #0]
 800690e:	4413      	add	r3, r2
 8006910:	b299      	uxth	r1, r3
 8006912:	887a      	ldrh	r2, [r7, #2]
 8006914:	88fb      	ldrh	r3, [r7, #6]
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff fe56 	bl	80065c8 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800691c:	883a      	ldrh	r2, [r7, #0]
 800691e:	88b9      	ldrh	r1, [r7, #4]
 8006920:	88fb      	ldrh	r3, [r7, #6]
 8006922:	4618      	mov	r0, r3
 8006924:	f7ff feae 	bl	8006684 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8006928:	88fa      	ldrh	r2, [r7, #6]
 800692a:	887b      	ldrh	r3, [r7, #2]
 800692c:	4413      	add	r3, r2
 800692e:	b29b      	uxth	r3, r3
 8006930:	883a      	ldrh	r2, [r7, #0]
 8006932:	88b9      	ldrh	r1, [r7, #4]
 8006934:	4618      	mov	r0, r3
 8006936:	f7ff fea5 	bl	8006684 <BSP_LCD_DrawVLine>
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	bd90      	pop	{r4, r7, pc}
	...

08006944 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8006944:	b590      	push	{r4, r7, lr}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	4603      	mov	r3, r0
 800694c:	80fb      	strh	r3, [r7, #6]
 800694e:	460b      	mov	r3, r1
 8006950:	80bb      	strh	r3, [r7, #4]
 8006952:	4613      	mov	r3, r2
 8006954:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8006956:	887b      	ldrh	r3, [r7, #2]
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	f1c3 0303 	rsb	r3, r3, #3
 800695e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8006964:	887b      	ldrh	r3, [r7, #2]
 8006966:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8006968:	e0c7      	b.n	8006afa <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	b29a      	uxth	r2, r3
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	4413      	add	r3, r2
 8006972:	b298      	uxth	r0, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	b29b      	uxth	r3, r3
 8006978:	88ba      	ldrh	r2, [r7, #4]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	b299      	uxth	r1, r3
 800697e:	4b64      	ldr	r3, [pc, #400]	@ (8006b10 <BSP_LCD_DrawCircle+0x1cc>)
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4c64      	ldr	r4, [pc, #400]	@ (8006b14 <BSP_LCD_DrawCircle+0x1d0>)
 8006984:	4613      	mov	r3, r2
 8006986:	005b      	lsls	r3, r3, #1
 8006988:	4413      	add	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4423      	add	r3, r4
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	f000 f8c1 	bl	8006b18 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	b29b      	uxth	r3, r3
 800699a:	88fa      	ldrh	r2, [r7, #6]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	b298      	uxth	r0, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	88ba      	ldrh	r2, [r7, #4]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	b299      	uxth	r1, r3
 80069aa:	4b59      	ldr	r3, [pc, #356]	@ (8006b10 <BSP_LCD_DrawCircle+0x1cc>)
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	4c59      	ldr	r4, [pc, #356]	@ (8006b14 <BSP_LCD_DrawCircle+0x1d0>)
 80069b0:	4613      	mov	r3, r2
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4423      	add	r3, r4
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	f000 f8ab 	bl	8006b18 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	4413      	add	r3, r2
 80069ca:	b298      	uxth	r0, r3
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	88ba      	ldrh	r2, [r7, #4]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	b299      	uxth	r1, r3
 80069d6:	4b4e      	ldr	r3, [pc, #312]	@ (8006b10 <BSP_LCD_DrawCircle+0x1cc>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4c4e      	ldr	r4, [pc, #312]	@ (8006b14 <BSP_LCD_DrawCircle+0x1d0>)
 80069dc:	4613      	mov	r3, r2
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4423      	add	r3, r4
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	f000 f895 	bl	8006b18 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	88fa      	ldrh	r2, [r7, #6]
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	b298      	uxth	r0, r3
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	88ba      	ldrh	r2, [r7, #4]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	b299      	uxth	r1, r3
 8006a02:	4b43      	ldr	r3, [pc, #268]	@ (8006b10 <BSP_LCD_DrawCircle+0x1cc>)
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4c43      	ldr	r4, [pc, #268]	@ (8006b14 <BSP_LCD_DrawCircle+0x1d0>)
 8006a08:	4613      	mov	r3, r2
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4423      	add	r3, r4
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	f000 f87f 	bl	8006b18 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	4413      	add	r3, r2
 8006a22:	b298      	uxth	r0, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	88bb      	ldrh	r3, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	b299      	uxth	r1, r3
 8006a2e:	4b38      	ldr	r3, [pc, #224]	@ (8006b10 <BSP_LCD_DrawCircle+0x1cc>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4c38      	ldr	r4, [pc, #224]	@ (8006b14 <BSP_LCD_DrawCircle+0x1d0>)
 8006a34:	4613      	mov	r3, r2
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	4413      	add	r3, r2
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4423      	add	r3, r4
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	f000 f869 	bl	8006b18 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	88fa      	ldrh	r2, [r7, #6]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	b298      	uxth	r0, r3
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	88bb      	ldrh	r3, [r7, #4]
 8006a56:	4413      	add	r3, r2
 8006a58:	b299      	uxth	r1, r3
 8006a5a:	4b2d      	ldr	r3, [pc, #180]	@ (8006b10 <BSP_LCD_DrawCircle+0x1cc>)
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	4c2d      	ldr	r4, [pc, #180]	@ (8006b14 <BSP_LCD_DrawCircle+0x1d0>)
 8006a60:	4613      	mov	r3, r2
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4423      	add	r3, r4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	f000 f853 	bl	8006b18 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	88fb      	ldrh	r3, [r7, #6]
 8006a78:	4413      	add	r3, r2
 8006a7a:	b298      	uxth	r0, r3
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	88bb      	ldrh	r3, [r7, #4]
 8006a82:	4413      	add	r3, r2
 8006a84:	b299      	uxth	r1, r3
 8006a86:	4b22      	ldr	r3, [pc, #136]	@ (8006b10 <BSP_LCD_DrawCircle+0x1cc>)
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4c22      	ldr	r4, [pc, #136]	@ (8006b14 <BSP_LCD_DrawCircle+0x1d0>)
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	4413      	add	r3, r2
 8006a92:	009b      	lsls	r3, r3, #2
 8006a94:	4423      	add	r3, r4
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f000 f83d 	bl	8006b18 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	88fa      	ldrh	r2, [r7, #6]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	b298      	uxth	r0, r3
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	88bb      	ldrh	r3, [r7, #4]
 8006aae:	4413      	add	r3, r2
 8006ab0:	b299      	uxth	r1, r3
 8006ab2:	4b17      	ldr	r3, [pc, #92]	@ (8006b10 <BSP_LCD_DrawCircle+0x1cc>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4c17      	ldr	r4, [pc, #92]	@ (8006b14 <BSP_LCD_DrawCircle+0x1d0>)
 8006ab8:	4613      	mov	r3, r2
 8006aba:	005b      	lsls	r3, r3, #1
 8006abc:	4413      	add	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4423      	add	r3, r4
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f000 f827 	bl	8006b18 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	da06      	bge.n	8006ade <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	009a      	lsls	r2, r3, #2
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	3306      	adds	r3, #6
 8006ada:	617b      	str	r3, [r7, #20]
 8006adc:	e00a      	b.n	8006af4 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	009a      	lsls	r2, r3, #2
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	4413      	add	r3, r2
 8006aea:	330a      	adds	r3, #10
 8006aec:	617b      	str	r3, [r7, #20]
      current_y--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	3301      	adds	r3, #1
 8006af8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8006afa:	693a      	ldr	r2, [r7, #16]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	f67f af33 	bls.w	800696a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd90      	pop	{r4, r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	2000632c 	.word	0x2000632c
 8006b14:	20006330 	.word	0x20006330

08006b18 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8006b18:	b5b0      	push	{r4, r5, r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	603a      	str	r2, [r7, #0]
 8006b22:	80fb      	strh	r3, [r7, #6]
 8006b24:	460b      	mov	r3, r1
 8006b26:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006b28:	4b1d      	ldr	r3, [pc, #116]	@ (8006ba0 <BSP_LCD_DrawPixel+0x88>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba4 <BSP_LCD_DrawPixel+0x8c>)
 8006b2e:	2134      	movs	r1, #52	@ 0x34
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	4413      	add	r3, r2
 8006b36:	3348      	adds	r3, #72	@ 0x48
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d116      	bne.n	8006b6c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8006b3e:	4b18      	ldr	r3, [pc, #96]	@ (8006ba0 <BSP_LCD_DrawPixel+0x88>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a18      	ldr	r2, [pc, #96]	@ (8006ba4 <BSP_LCD_DrawPixel+0x8c>)
 8006b44:	2134      	movs	r1, #52	@ 0x34
 8006b46:	fb01 f303 	mul.w	r3, r1, r3
 8006b4a:	4413      	add	r3, r2
 8006b4c:	335c      	adds	r3, #92	@ 0x5c
 8006b4e:	681c      	ldr	r4, [r3, #0]
 8006b50:	88bd      	ldrh	r5, [r7, #4]
 8006b52:	f7ff fae3 	bl	800611c <BSP_LCD_GetXSize>
 8006b56:	4603      	mov	r3, r0
 8006b58:	fb03 f205 	mul.w	r2, r3, r5
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	4413      	add	r3, r2
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	4423      	add	r3, r4
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	b292      	uxth	r2, r2
 8006b68:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8006b6a:	e015      	b.n	8006b98 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8006b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba0 <BSP_LCD_DrawPixel+0x88>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a0c      	ldr	r2, [pc, #48]	@ (8006ba4 <BSP_LCD_DrawPixel+0x8c>)
 8006b72:	2134      	movs	r1, #52	@ 0x34
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	4413      	add	r3, r2
 8006b7a:	335c      	adds	r3, #92	@ 0x5c
 8006b7c:	681c      	ldr	r4, [r3, #0]
 8006b7e:	88bd      	ldrh	r5, [r7, #4]
 8006b80:	f7ff facc 	bl	800611c <BSP_LCD_GetXSize>
 8006b84:	4603      	mov	r3, r0
 8006b86:	fb03 f205 	mul.w	r2, r3, r5
 8006b8a:	88fb      	ldrh	r3, [r7, #6]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4423      	add	r3, r4
 8006b92:	461a      	mov	r2, r3
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	6013      	str	r3, [r2, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8006ba0:	2000632c 	.word	0x2000632c
 8006ba4:	20006244 	.word	0x20006244

08006ba8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8006ba8:	b590      	push	{r4, r7, lr}
 8006baa:	b08b      	sub	sp, #44	@ 0x2c
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bb8:	2300      	movs	r3, #0
 8006bba:	61bb      	str	r3, [r7, #24]
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	330a      	adds	r3, #10
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	330b      	adds	r3, #11
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	441a      	add	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	330c      	adds	r3, #12
 8006bde:	781b      	ldrb	r3, [r3, #0]
 8006be0:	041b      	lsls	r3, r3, #16
 8006be2:	441a      	add	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	330d      	adds	r3, #13
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	061b      	lsls	r3, r3, #24
 8006bec:	4413      	add	r3, r2
 8006bee:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	3312      	adds	r3, #18
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	3313      	adds	r3, #19
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	441a      	add	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3314      	adds	r3, #20
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	441a      	add	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3315      	adds	r3, #21
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	061b      	lsls	r3, r3, #24
 8006c14:	4413      	add	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3316      	adds	r3, #22
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3317      	adds	r3, #23
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	441a      	add	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	3318      	adds	r3, #24
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	041b      	lsls	r3, r3, #16
 8006c32:	441a      	add	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	3319      	adds	r3, #25
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	061b      	lsls	r3, r3, #24
 8006c3c:	4413      	add	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	331c      	adds	r3, #28
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	331d      	adds	r3, #29
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	021b      	lsls	r3, r3, #8
 8006c50:	4413      	add	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8006c54:	4b2b      	ldr	r3, [pc, #172]	@ (8006d04 <BSP_LCD_DrawBitmap+0x15c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a2b      	ldr	r2, [pc, #172]	@ (8006d08 <BSP_LCD_DrawBitmap+0x160>)
 8006c5a:	2134      	movs	r1, #52	@ 0x34
 8006c5c:	fb01 f303 	mul.w	r3, r1, r3
 8006c60:	4413      	add	r3, r2
 8006c62:	335c      	adds	r3, #92	@ 0x5c
 8006c64:	681c      	ldr	r4, [r3, #0]
 8006c66:	f7ff fa59 	bl	800611c <BSP_LCD_GetXSize>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	fb03 f202 	mul.w	r2, r3, r2
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4423      	add	r3, r4
 8006c7a:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	3b20      	subs	r3, #32
 8006c80:	2b07      	cmp	r3, #7
 8006c82:	d802      	bhi.n	8006c8a <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8006c84:	2300      	movs	r3, #0
 8006c86:	61fb      	str	r3, [r7, #28]
 8006c88:	e008      	b.n	8006c9c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	3b10      	subs	r3, #16
 8006c8e:	2b07      	cmp	r3, #7
 8006c90:	d802      	bhi.n	8006c98 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8006c92:	2302      	movs	r3, #2
 8006c94:	61fb      	str	r3, [r7, #28]
 8006c96:	e001      	b.n	8006c9c <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	fb02 f303 	mul.w	r3, r2, r3
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	08d2      	lsrs	r2, r2, #3
 8006caa:	fb03 f202 	mul.w	r2, r3, r2
 8006cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb0:	4413      	add	r3, r2
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8006cb8:	2300      	movs	r3, #0
 8006cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cbc:	e018      	b.n	8006cf0 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8006cbe:	6a39      	ldr	r1, [r7, #32]
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	69ba      	ldr	r2, [r7, #24]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 fb35 	bl	8007334 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8006cca:	f7ff fa27 	bl	800611c <BSP_LCD_GetXSize>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	6a3a      	ldr	r2, [r7, #32]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	08db      	lsrs	r3, r3, #3
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
 8006ce2:	425b      	negs	r3, r3
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8006cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cec:	3301      	adds	r3, #1
 8006cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d3e2      	bcc.n	8006cbe <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	372c      	adds	r7, #44	@ 0x2c
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd90      	pop	{r4, r7, pc}
 8006d02:	bf00      	nop
 8006d04:	2000632c 	.word	0x2000632c
 8006d08:	20006244 	.word	0x20006244

08006d0c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8006d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d10:	b086      	sub	sp, #24
 8006d12:	af02      	add	r7, sp, #8
 8006d14:	4604      	mov	r4, r0
 8006d16:	4608      	mov	r0, r1
 8006d18:	4611      	mov	r1, r2
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	80fb      	strh	r3, [r7, #6]
 8006d20:	4603      	mov	r3, r0
 8006d22:	80bb      	strh	r3, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	807b      	strh	r3, [r7, #2]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006d30:	4b30      	ldr	r3, [pc, #192]	@ (8006df4 <BSP_LCD_FillRect+0xe8>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4930      	ldr	r1, [pc, #192]	@ (8006df8 <BSP_LCD_FillRect+0xec>)
 8006d36:	4613      	mov	r3, r2
 8006d38:	005b      	lsls	r3, r3, #1
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fac0 	bl	80062c8 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8006d48:	4b2a      	ldr	r3, [pc, #168]	@ (8006df4 <BSP_LCD_FillRect+0xe8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a2b      	ldr	r2, [pc, #172]	@ (8006dfc <BSP_LCD_FillRect+0xf0>)
 8006d4e:	2134      	movs	r1, #52	@ 0x34
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	4413      	add	r3, r2
 8006d56:	3348      	adds	r3, #72	@ 0x48
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b02      	cmp	r3, #2
 8006d5c:	d114      	bne.n	8006d88 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006d5e:	4b25      	ldr	r3, [pc, #148]	@ (8006df4 <BSP_LCD_FillRect+0xe8>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a26      	ldr	r2, [pc, #152]	@ (8006dfc <BSP_LCD_FillRect+0xf0>)
 8006d64:	2134      	movs	r1, #52	@ 0x34
 8006d66:	fb01 f303 	mul.w	r3, r1, r3
 8006d6a:	4413      	add	r3, r2
 8006d6c:	335c      	adds	r3, #92	@ 0x5c
 8006d6e:	681c      	ldr	r4, [r3, #0]
 8006d70:	f7ff f9d4 	bl	800611c <BSP_LCD_GetXSize>
 8006d74:	4602      	mov	r2, r0
 8006d76:	88bb      	ldrh	r3, [r7, #4]
 8006d78:	fb03 f202 	mul.w	r2, r3, r2
 8006d7c:	88fb      	ldrh	r3, [r7, #6]
 8006d7e:	4413      	add	r3, r2
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	4423      	add	r3, r4
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	e013      	b.n	8006db0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8006d88:	4b1a      	ldr	r3, [pc, #104]	@ (8006df4 <BSP_LCD_FillRect+0xe8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8006dfc <BSP_LCD_FillRect+0xf0>)
 8006d8e:	2134      	movs	r1, #52	@ 0x34
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	4413      	add	r3, r2
 8006d96:	335c      	adds	r3, #92	@ 0x5c
 8006d98:	681c      	ldr	r4, [r3, #0]
 8006d9a:	f7ff f9bf 	bl	800611c <BSP_LCD_GetXSize>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	88bb      	ldrh	r3, [r7, #4]
 8006da2:	fb03 f202 	mul.w	r2, r3, r2
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	4413      	add	r3, r2
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	4423      	add	r3, r4
 8006dae:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8006db0:	4b10      	ldr	r3, [pc, #64]	@ (8006df4 <BSP_LCD_FillRect+0xe8>)
 8006db2:	681c      	ldr	r4, [r3, #0]
 8006db4:	68fd      	ldr	r5, [r7, #12]
 8006db6:	887e      	ldrh	r6, [r7, #2]
 8006db8:	f8b7 8000 	ldrh.w	r8, [r7]
 8006dbc:	f7ff f9ae 	bl	800611c <BSP_LCD_GetXSize>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	887b      	ldrh	r3, [r7, #2]
 8006dc4:	1ad1      	subs	r1, r2, r3
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <BSP_LCD_FillRect+0xe8>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	480b      	ldr	r0, [pc, #44]	@ (8006df8 <BSP_LCD_FillRect+0xec>)
 8006dcc:	4613      	mov	r3, r2
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4403      	add	r3, r0
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	9301      	str	r3, [sp, #4]
 8006dda:	9100      	str	r1, [sp, #0]
 8006ddc:	4643      	mov	r3, r8
 8006dde:	4632      	mov	r2, r6
 8006de0:	4629      	mov	r1, r5
 8006de2:	4620      	mov	r0, r4
 8006de4:	f000 fa5a 	bl	800729c <LL_FillBuffer>
}
 8006de8:	bf00      	nop
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df2:	bf00      	nop
 8006df4:	2000632c 	.word	0x2000632c
 8006df8:	20006330 	.word	0x20006330
 8006dfc:	20006244 	.word	0x20006244

08006e00 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	4603      	mov	r3, r0
 8006e08:	80fb      	strh	r3, [r7, #6]
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	80bb      	strh	r3, [r7, #4]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8006e12:	887b      	ldrh	r3, [r7, #2]
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	f1c3 0303 	rsb	r3, r3, #3
 8006e1a:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8006e20:	887b      	ldrh	r3, [r7, #2]
 8006e22:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006e24:	4b44      	ldr	r3, [pc, #272]	@ (8006f38 <BSP_LCD_FillCircle+0x138>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	4944      	ldr	r1, [pc, #272]	@ (8006f3c <BSP_LCD_FillCircle+0x13c>)
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	005b      	lsls	r3, r3, #1
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	440b      	add	r3, r1
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fa46 	bl	80062c8 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8006e3c:	e061      	b.n	8006f02 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d021      	beq.n	8006e88 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	88fa      	ldrh	r2, [r7, #6]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	b298      	uxth	r0, r3
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	88bb      	ldrh	r3, [r7, #4]
 8006e54:	4413      	add	r3, r2
 8006e56:	b299      	uxth	r1, r3
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	f7ff fbb1 	bl	80065c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	88fa      	ldrh	r2, [r7, #6]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	b298      	uxth	r0, r3
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	88ba      	ldrh	r2, [r7, #4]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	b299      	uxth	r1, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	461a      	mov	r2, r3
 8006e84:	f7ff fba0 	bl	80065c8 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d021      	beq.n	8006ed2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	88fa      	ldrh	r2, [r7, #6]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	b298      	uxth	r0, r3
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	88ba      	ldrh	r2, [r7, #4]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	b299      	uxth	r1, r3
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	461a      	mov	r2, r3
 8006eac:	f7ff fb8c 	bl	80065c8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	88fa      	ldrh	r2, [r7, #6]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	b298      	uxth	r0, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	88bb      	ldrh	r3, [r7, #4]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	b299      	uxth	r1, r3
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	f7ff fb7b 	bl	80065c8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	da06      	bge.n	8006ee6 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	009a      	lsls	r2, r3, #2
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	4413      	add	r3, r2
 8006ee0:	3306      	adds	r3, #6
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	e00a      	b.n	8006efc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	009a      	lsls	r2, r3, #2
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	330a      	adds	r3, #10
 8006ef4:	617b      	str	r3, [r7, #20]
      current_y--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	3301      	adds	r3, #1
 8006f00:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d999      	bls.n	8006e3e <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8006f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f38 <BSP_LCD_FillCircle+0x138>)
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	490b      	ldr	r1, [pc, #44]	@ (8006f3c <BSP_LCD_FillCircle+0x13c>)
 8006f10:	4613      	mov	r3, r2
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7ff f9d3 	bl	80062c8 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8006f22:	887a      	ldrh	r2, [r7, #2]
 8006f24:	88b9      	ldrh	r1, [r7, #4]
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7ff fd0b 	bl	8006944 <BSP_LCD_DrawCircle>
}
 8006f2e:	bf00      	nop
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	2000632c 	.word	0x2000632c
 8006f3c:	20006330 	.word	0x20006330

08006f40 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b090      	sub	sp, #64	@ 0x40
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8006f4a:	4b64      	ldr	r3, [pc, #400]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4e:	4a63      	ldr	r2, [pc, #396]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006f50:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f56:	4b61      	ldr	r3, [pc, #388]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8006f62:	4b5e      	ldr	r3, [pc, #376]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f66:	4a5d      	ldr	r2, [pc, #372]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006f68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006f7a:	4b58      	ldr	r3, [pc, #352]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7e:	4a57      	ldr	r2, [pc, #348]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006f80:	f043 0310 	orr.w	r3, r3, #16
 8006f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f86:	4b55      	ldr	r3, [pc, #340]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	623b      	str	r3, [r7, #32]
 8006f90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006f92:	4b52      	ldr	r3, [pc, #328]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f96:	4a51      	ldr	r2, [pc, #324]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8006f9e:	4b4f      	ldr	r3, [pc, #316]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fa6:	61fb      	str	r3, [r7, #28]
 8006fa8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8006faa:	4b4c      	ldr	r3, [pc, #304]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fae:	4a4b      	ldr	r2, [pc, #300]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fb6:	4b49      	ldr	r3, [pc, #292]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fbe:	61bb      	str	r3, [r7, #24]
 8006fc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8006fc2:	4b46      	ldr	r3, [pc, #280]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc6:	4a45      	ldr	r2, [pc, #276]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006fc8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fce:	4b43      	ldr	r3, [pc, #268]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fd6:	617b      	str	r3, [r7, #20]
 8006fd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8006fda:	4b40      	ldr	r3, [pc, #256]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fde:	4a3f      	ldr	r2, [pc, #252]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006fe0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8006fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fee:	613b      	str	r3, [r7, #16]
 8006ff0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8006ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff6:	4a39      	ldr	r2, [pc, #228]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8006ff8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ffe:	4b37      	ldr	r3, [pc, #220]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8007000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800700a:	4b34      	ldr	r3, [pc, #208]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 800700c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800700e:	4a33      	ldr	r2, [pc, #204]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8007010:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007014:	6313      	str	r3, [r2, #48]	@ 0x30
 8007016:	4b31      	ldr	r3, [pc, #196]	@ (80070dc <BSP_LCD_MspInit+0x19c>)
 8007018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800701e:	60bb      	str	r3, [r7, #8]
 8007020:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8007022:	2310      	movs	r3, #16
 8007024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007026:	2302      	movs	r3, #2
 8007028:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800702a:	2300      	movs	r3, #0
 800702c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800702e:	2302      	movs	r3, #2
 8007030:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8007032:	230e      	movs	r3, #14
 8007034:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8007036:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800703a:	4619      	mov	r1, r3
 800703c:	4828      	ldr	r0, [pc, #160]	@ (80070e0 <BSP_LCD_MspInit+0x1a0>)
 800703e:	f002 f9b1 	bl	80093a4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8007042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007048:	2302      	movs	r3, #2
 800704a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 800704c:	2309      	movs	r3, #9
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8007050:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007054:	4619      	mov	r1, r3
 8007056:	4823      	ldr	r0, [pc, #140]	@ (80070e4 <BSP_LCD_MspInit+0x1a4>)
 8007058:	f002 f9a4 	bl	80093a4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800705c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8007060:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007062:	2302      	movs	r3, #2
 8007064:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007066:	230e      	movs	r3, #14
 8007068:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800706a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800706e:	4619      	mov	r1, r3
 8007070:	481d      	ldr	r0, [pc, #116]	@ (80070e8 <BSP_LCD_MspInit+0x1a8>)
 8007072:	f002 f997 	bl	80093a4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8007076:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800707a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800707c:	2302      	movs	r3, #2
 800707e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007080:	230e      	movs	r3, #14
 8007082:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8007084:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007088:	4619      	mov	r1, r3
 800708a:	4818      	ldr	r0, [pc, #96]	@ (80070ec <BSP_LCD_MspInit+0x1ac>)
 800708c:	f002 f98a 	bl	80093a4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8007090:	23f7      	movs	r3, #247	@ 0xf7
 8007092:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007094:	2302      	movs	r3, #2
 8007096:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8007098:	230e      	movs	r3, #14
 800709a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800709c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80070a0:	4619      	mov	r1, r3
 80070a2:	4813      	ldr	r0, [pc, #76]	@ (80070f0 <BSP_LCD_MspInit+0x1b0>)
 80070a4:	f002 f97e 	bl	80093a4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80070a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80070ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80070ae:	2301      	movs	r3, #1
 80070b0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80070b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80070b6:	4619      	mov	r1, r3
 80070b8:	480b      	ldr	r0, [pc, #44]	@ (80070e8 <BSP_LCD_MspInit+0x1a8>)
 80070ba:	f002 f973 	bl	80093a4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80070be:	2308      	movs	r3, #8
 80070c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80070c2:	2301      	movs	r3, #1
 80070c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80070c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80070ca:	4619      	mov	r1, r3
 80070cc:	4808      	ldr	r0, [pc, #32]	@ (80070f0 <BSP_LCD_MspInit+0x1b0>)
 80070ce:	f002 f969 	bl	80093a4 <HAL_GPIO_Init>
}
 80070d2:	bf00      	nop
 80070d4:	3740      	adds	r7, #64	@ 0x40
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40023800 	.word	0x40023800
 80070e0:	40021000 	.word	0x40021000
 80070e4:	40021800 	.word	0x40021800
 80070e8:	40022000 	.word	0x40022000
 80070ec:	40022400 	.word	0x40022400
 80070f0:	40022800 	.word	0x40022800

080070f4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80070fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007128 <BSP_LCD_ClockConfig+0x34>)
 8007100:	2208      	movs	r2, #8
 8007102:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8007104:	4b08      	ldr	r3, [pc, #32]	@ (8007128 <BSP_LCD_ClockConfig+0x34>)
 8007106:	22c0      	movs	r2, #192	@ 0xc0
 8007108:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800710a:	4b07      	ldr	r3, [pc, #28]	@ (8007128 <BSP_LCD_ClockConfig+0x34>)
 800710c:	2205      	movs	r2, #5
 800710e:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8007110:	4b05      	ldr	r3, [pc, #20]	@ (8007128 <BSP_LCD_ClockConfig+0x34>)
 8007112:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007116:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8007118:	4803      	ldr	r0, [pc, #12]	@ (8007128 <BSP_LCD_ClockConfig+0x34>)
 800711a:	f004 fa47 	bl	800b5ac <HAL_RCCEx_PeriphCLKConfig>
}
 800711e:	bf00      	nop
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20006348 	.word	0x20006348

0800712c <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b088      	sub	sp, #32
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	603a      	str	r2, [r7, #0]
 8007136:	80fb      	strh	r3, [r7, #6]
 8007138:	460b      	mov	r3, r1
 800713a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800713c:	2300      	movs	r3, #0
 800713e:	61fb      	str	r3, [r7, #28]
 8007140:	2300      	movs	r3, #0
 8007142:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8007144:	4b53      	ldr	r3, [pc, #332]	@ (8007294 <DrawChar+0x168>)
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4953      	ldr	r1, [pc, #332]	@ (8007298 <DrawChar+0x16c>)
 800714a:	4613      	mov	r3, r2
 800714c:	005b      	lsls	r3, r3, #1
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	440b      	add	r3, r1
 8007154:	3308      	adds	r3, #8
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	88db      	ldrh	r3, [r3, #6]
 800715a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800715c:	4b4d      	ldr	r3, [pc, #308]	@ (8007294 <DrawChar+0x168>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	494d      	ldr	r1, [pc, #308]	@ (8007298 <DrawChar+0x16c>)
 8007162:	4613      	mov	r3, r2
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	3308      	adds	r3, #8
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	889b      	ldrh	r3, [r3, #4]
 8007172:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8007174:	8a3b      	ldrh	r3, [r7, #16]
 8007176:	3307      	adds	r3, #7
 8007178:	2b00      	cmp	r3, #0
 800717a:	da00      	bge.n	800717e <DrawChar+0x52>
 800717c:	3307      	adds	r3, #7
 800717e:	10db      	asrs	r3, r3, #3
 8007180:	b2db      	uxtb	r3, r3
 8007182:	00db      	lsls	r3, r3, #3
 8007184:	b2da      	uxtb	r2, r3
 8007186:	8a3b      	ldrh	r3, [r7, #16]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800718e:	2300      	movs	r3, #0
 8007190:	61fb      	str	r3, [r7, #28]
 8007192:	e076      	b.n	8007282 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8007194:	8a3b      	ldrh	r3, [r7, #16]
 8007196:	3307      	adds	r3, #7
 8007198:	2b00      	cmp	r3, #0
 800719a:	da00      	bge.n	800719e <DrawChar+0x72>
 800719c:	3307      	adds	r3, #7
 800719e:	10db      	asrs	r3, r3, #3
 80071a0:	461a      	mov	r2, r3
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	fb02 f303 	mul.w	r3, r2, r3
 80071a8:	683a      	ldr	r2, [r7, #0]
 80071aa:	4413      	add	r3, r2
 80071ac:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80071ae:	8a3b      	ldrh	r3, [r7, #16]
 80071b0:	3307      	adds	r3, #7
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	da00      	bge.n	80071b8 <DrawChar+0x8c>
 80071b6:	3307      	adds	r3, #7
 80071b8:	10db      	asrs	r3, r3, #3
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d002      	beq.n	80071c4 <DrawChar+0x98>
 80071be:	2b02      	cmp	r3, #2
 80071c0:	d004      	beq.n	80071cc <DrawChar+0xa0>
 80071c2:	e00c      	b.n	80071de <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	617b      	str	r3, [r7, #20]
      break;
 80071ca:	e016      	b.n	80071fa <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	3201      	adds	r2, #1
 80071d6:	7812      	ldrb	r2, [r2, #0]
 80071d8:	4313      	orrs	r3, r2
 80071da:	617b      	str	r3, [r7, #20]
      break;
 80071dc:	e00d      	b.n	80071fa <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	041a      	lsls	r2, r3, #16
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	3301      	adds	r3, #1
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	021b      	lsls	r3, r3, #8
 80071ec:	4313      	orrs	r3, r2
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	3202      	adds	r2, #2
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]
      break;
 80071f8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80071fa:	2300      	movs	r3, #0
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	e036      	b.n	800726e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8007200:	8a3a      	ldrh	r2, [r7, #16]
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	1ad2      	subs	r2, r2, r3
 8007206:	7bfb      	ldrb	r3, [r7, #15]
 8007208:	4413      	add	r3, r2
 800720a:	3b01      	subs	r3, #1
 800720c:	2201      	movs	r2, #1
 800720e:	fa02 f303 	lsl.w	r3, r2, r3
 8007212:	461a      	mov	r2, r3
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	4013      	ands	r3, r2
 8007218:	2b00      	cmp	r3, #0
 800721a:	d012      	beq.n	8007242 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	b29a      	uxth	r2, r3
 8007220:	88fb      	ldrh	r3, [r7, #6]
 8007222:	4413      	add	r3, r2
 8007224:	b298      	uxth	r0, r3
 8007226:	4b1b      	ldr	r3, [pc, #108]	@ (8007294 <DrawChar+0x168>)
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	491b      	ldr	r1, [pc, #108]	@ (8007298 <DrawChar+0x16c>)
 800722c:	4613      	mov	r3, r2
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	4413      	add	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	440b      	add	r3, r1
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	88bb      	ldrh	r3, [r7, #4]
 800723a:	4619      	mov	r1, r3
 800723c:	f7ff fc6c 	bl	8006b18 <BSP_LCD_DrawPixel>
 8007240:	e012      	b.n	8007268 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	b29a      	uxth	r2, r3
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	4413      	add	r3, r2
 800724a:	b298      	uxth	r0, r3
 800724c:	4b11      	ldr	r3, [pc, #68]	@ (8007294 <DrawChar+0x168>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	4911      	ldr	r1, [pc, #68]	@ (8007298 <DrawChar+0x16c>)
 8007252:	4613      	mov	r3, r2
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	440b      	add	r3, r1
 800725c:	3304      	adds	r3, #4
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	88bb      	ldrh	r3, [r7, #4]
 8007262:	4619      	mov	r1, r3
 8007264:	f7ff fc58 	bl	8006b18 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	3301      	adds	r3, #1
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	8a3b      	ldrh	r3, [r7, #16]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	429a      	cmp	r2, r3
 8007274:	d3c4      	bcc.n	8007200 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8007276:	88bb      	ldrh	r3, [r7, #4]
 8007278:	3301      	adds	r3, #1
 800727a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	3301      	adds	r3, #1
 8007280:	61fb      	str	r3, [r7, #28]
 8007282:	8a7b      	ldrh	r3, [r7, #18]
 8007284:	69fa      	ldr	r2, [r7, #28]
 8007286:	429a      	cmp	r2, r3
 8007288:	d384      	bcc.n	8007194 <DrawChar+0x68>
  }
}
 800728a:	bf00      	nop
 800728c:	bf00      	nop
 800728e:	3720      	adds	r7, #32
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	2000632c 	.word	0x2000632c
 8007298:	20006330 	.word	0x20006330

0800729c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80072aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007324 <LL_FillBuffer+0x88>)
 80072ac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80072b0:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80072b2:	4b1d      	ldr	r3, [pc, #116]	@ (8007328 <LL_FillBuffer+0x8c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1d      	ldr	r2, [pc, #116]	@ (800732c <LL_FillBuffer+0x90>)
 80072b8:	2134      	movs	r1, #52	@ 0x34
 80072ba:	fb01 f303 	mul.w	r3, r1, r3
 80072be:	4413      	add	r3, r2
 80072c0:	3348      	adds	r3, #72	@ 0x48
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d103      	bne.n	80072d0 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80072c8:	4b16      	ldr	r3, [pc, #88]	@ (8007324 <LL_FillBuffer+0x88>)
 80072ca:	2202      	movs	r2, #2
 80072cc:	609a      	str	r2, [r3, #8]
 80072ce:	e002      	b.n	80072d6 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80072d0:	4b14      	ldr	r3, [pc, #80]	@ (8007324 <LL_FillBuffer+0x88>)
 80072d2:	2200      	movs	r2, #0
 80072d4:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80072d6:	4a13      	ldr	r2, [pc, #76]	@ (8007324 <LL_FillBuffer+0x88>)
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80072dc:	4b11      	ldr	r3, [pc, #68]	@ (8007324 <LL_FillBuffer+0x88>)
 80072de:	4a14      	ldr	r2, [pc, #80]	@ (8007330 <LL_FillBuffer+0x94>)
 80072e0:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80072e2:	4810      	ldr	r0, [pc, #64]	@ (8007324 <LL_FillBuffer+0x88>)
 80072e4:	f001 fdd2 	bl	8008e8c <HAL_DMA2D_Init>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d115      	bne.n	800731a <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	480c      	ldr	r0, [pc, #48]	@ (8007324 <LL_FillBuffer+0x88>)
 80072f2:	f001 ff29 	bl	8009148 <HAL_DMA2D_ConfigLayer>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10e      	bne.n	800731a <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69f9      	ldr	r1, [r7, #28]
 8007306:	4807      	ldr	r0, [pc, #28]	@ (8007324 <LL_FillBuffer+0x88>)
 8007308:	f001 fe0a 	bl	8008f20 <HAL_DMA2D_Start>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d103      	bne.n	800731a <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8007312:	210a      	movs	r1, #10
 8007314:	4803      	ldr	r0, [pc, #12]	@ (8007324 <LL_FillBuffer+0x88>)
 8007316:	f001 fe2e 	bl	8008f76 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800731a:	bf00      	nop
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	200062ec 	.word	0x200062ec
 8007328:	2000632c 	.word	0x2000632c
 800732c:	20006244 	.word	0x20006244
 8007330:	4002b000 	.word	0x4002b000

08007334 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af02      	add	r7, sp, #8
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8007342:	4b1c      	ldr	r3, [pc, #112]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 8007344:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007348:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800734a:	4b1a      	ldr	r3, [pc, #104]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 800734c:	2200      	movs	r2, #0
 800734e:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8007350:	4b18      	ldr	r3, [pc, #96]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 8007352:	2200      	movs	r2, #0
 8007354:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8007356:	4b17      	ldr	r3, [pc, #92]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 8007358:	2200      	movs	r2, #0
 800735a:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 800735c:	4b15      	ldr	r3, [pc, #84]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 800735e:	22ff      	movs	r2, #255	@ 0xff
 8007360:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8007362:	4a14      	ldr	r2, [pc, #80]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8007368:	4b12      	ldr	r3, [pc, #72]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 800736a:	2200      	movs	r2, #0
 800736c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800736e:	4b11      	ldr	r3, [pc, #68]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 8007370:	4a11      	ldr	r2, [pc, #68]	@ (80073b8 <LL_ConvertLineToARGB8888+0x84>)
 8007372:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8007374:	480f      	ldr	r0, [pc, #60]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 8007376:	f001 fd89 	bl	8008e8c <HAL_DMA2D_Init>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d115      	bne.n	80073ac <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8007380:	2101      	movs	r1, #1
 8007382:	480c      	ldr	r0, [pc, #48]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 8007384:	f001 fee0 	bl	8009148 <HAL_DMA2D_ConfigLayer>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10e      	bne.n	80073ac <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800738e:	68f9      	ldr	r1, [r7, #12]
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	2301      	movs	r3, #1
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4806      	ldr	r0, [pc, #24]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 800739a:	f001 fdc1 	bl	8008f20 <HAL_DMA2D_Start>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d103      	bne.n	80073ac <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80073a4:	210a      	movs	r1, #10
 80073a6:	4803      	ldr	r0, [pc, #12]	@ (80073b4 <LL_ConvertLineToARGB8888+0x80>)
 80073a8:	f001 fde5 	bl	8008f76 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80073ac:	bf00      	nop
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	200062ec 	.word	0x200062ec
 80073b8:	4002b000 	.word	0x4002b000

080073bc <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80073bc:	b580      	push	{r7, lr}
 80073be:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80073c0:	4b29      	ldr	r3, [pc, #164]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 80073c2:	4a2a      	ldr	r2, [pc, #168]	@ (800746c <BSP_SDRAM_Init+0xb0>)
 80073c4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80073c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007470 <BSP_SDRAM_Init+0xb4>)
 80073c8:	2202      	movs	r2, #2
 80073ca:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80073cc:	4b28      	ldr	r3, [pc, #160]	@ (8007470 <BSP_SDRAM_Init+0xb4>)
 80073ce:	2207      	movs	r2, #7
 80073d0:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80073d2:	4b27      	ldr	r3, [pc, #156]	@ (8007470 <BSP_SDRAM_Init+0xb4>)
 80073d4:	2204      	movs	r2, #4
 80073d6:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80073d8:	4b25      	ldr	r3, [pc, #148]	@ (8007470 <BSP_SDRAM_Init+0xb4>)
 80073da:	2207      	movs	r2, #7
 80073dc:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80073de:	4b24      	ldr	r3, [pc, #144]	@ (8007470 <BSP_SDRAM_Init+0xb4>)
 80073e0:	2202      	movs	r2, #2
 80073e2:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80073e4:	4b22      	ldr	r3, [pc, #136]	@ (8007470 <BSP_SDRAM_Init+0xb4>)
 80073e6:	2202      	movs	r2, #2
 80073e8:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80073ea:	4b21      	ldr	r3, [pc, #132]	@ (8007470 <BSP_SDRAM_Init+0xb4>)
 80073ec:	2202      	movs	r2, #2
 80073ee:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80073f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80073f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80073fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 80073fe:	2204      	movs	r2, #4
 8007400:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8007402:	4b19      	ldr	r3, [pc, #100]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 8007404:	2210      	movs	r2, #16
 8007406:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8007408:	4b17      	ldr	r3, [pc, #92]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 800740a:	2240      	movs	r2, #64	@ 0x40
 800740c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800740e:	4b16      	ldr	r3, [pc, #88]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 8007410:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007414:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8007416:	4b14      	ldr	r3, [pc, #80]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 8007418:	2200      	movs	r2, #0
 800741a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800741c:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 800741e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007422:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8007424:	4b10      	ldr	r3, [pc, #64]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 8007426:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800742a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800742c:	4b0e      	ldr	r3, [pc, #56]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 800742e:	2200      	movs	r2, #0
 8007430:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8007432:	2100      	movs	r1, #0
 8007434:	480c      	ldr	r0, [pc, #48]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 8007436:	f000 f87f 	bl	8007538 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800743a:	490d      	ldr	r1, [pc, #52]	@ (8007470 <BSP_SDRAM_Init+0xb4>)
 800743c:	480a      	ldr	r0, [pc, #40]	@ (8007468 <BSP_SDRAM_Init+0xac>)
 800743e:	f006 fc65 	bl	800dd0c <HAL_SDRAM_Init>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8007448:	4b0a      	ldr	r3, [pc, #40]	@ (8007474 <BSP_SDRAM_Init+0xb8>)
 800744a:	2201      	movs	r2, #1
 800744c:	701a      	strb	r2, [r3, #0]
 800744e:	e002      	b.n	8007456 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8007450:	4b08      	ldr	r3, [pc, #32]	@ (8007474 <BSP_SDRAM_Init+0xb8>)
 8007452:	2200      	movs	r2, #0
 8007454:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8007456:	f240 6003 	movw	r0, #1539	@ 0x603
 800745a:	f000 f80d 	bl	8007478 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800745e:	4b05      	ldr	r3, [pc, #20]	@ (8007474 <BSP_SDRAM_Init+0xb8>)
 8007460:	781b      	ldrb	r3, [r3, #0]
}
 8007462:	4618      	mov	r0, r3
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	200063cc 	.word	0x200063cc
 800746c:	a0000140 	.word	0xa0000140
 8007470:	20006400 	.word	0x20006400
 8007474:	20004f1c 	.word	0x20004f1c

08007478 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8007484:	4b2a      	ldr	r3, [pc, #168]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007486:	2201      	movs	r2, #1
 8007488:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800748a:	4b29      	ldr	r3, [pc, #164]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800748c:	2210      	movs	r2, #16
 800748e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007490:	4b27      	ldr	r3, [pc, #156]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007492:	2201      	movs	r2, #1
 8007494:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8007496:	4b26      	ldr	r3, [pc, #152]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007498:	2200      	movs	r2, #0
 800749a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800749c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074a0:	4923      	ldr	r1, [pc, #140]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074a2:	4824      	ldr	r0, [pc, #144]	@ (8007534 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80074a4:	f006 fc66 	bl	800dd74 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80074a8:	2001      	movs	r0, #1
 80074aa:	f000 fc21 	bl	8007cf0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80074ae:	4b20      	ldr	r3, [pc, #128]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074b0:	2202      	movs	r2, #2
 80074b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80074b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074b6:	2210      	movs	r2, #16
 80074b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80074ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074bc:	2201      	movs	r2, #1
 80074be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80074c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80074c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074ca:	4919      	ldr	r1, [pc, #100]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074cc:	4819      	ldr	r0, [pc, #100]	@ (8007534 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80074ce:	f006 fc51 	bl	800dd74 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80074d2:	4b17      	ldr	r3, [pc, #92]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074d4:	2203      	movs	r2, #3
 80074d6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80074d8:	4b15      	ldr	r3, [pc, #84]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074da:	2210      	movs	r2, #16
 80074dc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80074de:	4b14      	ldr	r3, [pc, #80]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074e0:	2208      	movs	r2, #8
 80074e2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80074e4:	4b12      	ldr	r3, [pc, #72]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80074ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074ee:	4910      	ldr	r1, [pc, #64]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074f0:	4810      	ldr	r0, [pc, #64]	@ (8007534 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80074f2:	f006 fc3f 	bl	800dd74 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80074f6:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80074fa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80074fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80074fe:	2204      	movs	r2, #4
 8007500:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8007502:	4b0b      	ldr	r3, [pc, #44]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007504:	2210      	movs	r2, #16
 8007506:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8007508:	4b09      	ldr	r3, [pc, #36]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800750a:	2201      	movs	r2, #1
 800750c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4a07      	ldr	r2, [pc, #28]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8007512:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8007514:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007518:	4905      	ldr	r1, [pc, #20]	@ (8007530 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800751a:	4806      	ldr	r0, [pc, #24]	@ (8007534 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800751c:	f006 fc2a 	bl	800dd74 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8007520:	6879      	ldr	r1, [r7, #4]
 8007522:	4804      	ldr	r0, [pc, #16]	@ (8007534 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8007524:	f006 fc5b 	bl	800ddde <HAL_SDRAM_ProgramRefreshRate>
}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	2000641c 	.word	0x2000641c
 8007534:	200063cc 	.word	0x200063cc

08007538 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8007538:	b580      	push	{r7, lr}
 800753a:	b090      	sub	sp, #64	@ 0x40
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8007542:	4b70      	ldr	r3, [pc, #448]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 8007544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007546:	4a6f      	ldr	r2, [pc, #444]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 8007548:	f043 0301 	orr.w	r3, r3, #1
 800754c:	6393      	str	r3, [r2, #56]	@ 0x38
 800754e:	4b6d      	ldr	r3, [pc, #436]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 8007550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800755a:	4b6a      	ldr	r3, [pc, #424]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755e:	4a69      	ldr	r2, [pc, #420]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 8007560:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007564:	6313      	str	r3, [r2, #48]	@ 0x30
 8007566:	4b67      	ldr	r3, [pc, #412]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 8007568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800756e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007572:	4b64      	ldr	r3, [pc, #400]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007576:	4a63      	ldr	r2, [pc, #396]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 8007578:	f043 0304 	orr.w	r3, r3, #4
 800757c:	6313      	str	r3, [r2, #48]	@ 0x30
 800757e:	4b61      	ldr	r3, [pc, #388]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 8007580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007582:	f003 0304 	and.w	r3, r3, #4
 8007586:	623b      	str	r3, [r7, #32]
 8007588:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800758a:	4b5e      	ldr	r3, [pc, #376]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 800758c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800758e:	4a5d      	ldr	r2, [pc, #372]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 8007590:	f043 0308 	orr.w	r3, r3, #8
 8007594:	6313      	str	r3, [r2, #48]	@ 0x30
 8007596:	4b5b      	ldr	r3, [pc, #364]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 8007598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759a:	f003 0308 	and.w	r3, r3, #8
 800759e:	61fb      	str	r3, [r7, #28]
 80075a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80075a2:	4b58      	ldr	r3, [pc, #352]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a6:	4a57      	ldr	r2, [pc, #348]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075a8:	f043 0310 	orr.w	r3, r3, #16
 80075ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80075ae:	4b55      	ldr	r3, [pc, #340]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b2:	f003 0310 	and.w	r3, r3, #16
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80075ba:	4b52      	ldr	r3, [pc, #328]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075be:	4a51      	ldr	r2, [pc, #324]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075c0:	f043 0320 	orr.w	r3, r3, #32
 80075c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80075c6:	4b4f      	ldr	r3, [pc, #316]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80075d2:	4b4c      	ldr	r3, [pc, #304]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d6:	4a4b      	ldr	r2, [pc, #300]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80075de:	4b49      	ldr	r3, [pc, #292]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e6:	613b      	str	r3, [r7, #16]
 80075e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80075ea:	4b46      	ldr	r3, [pc, #280]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ee:	4a45      	ldr	r2, [pc, #276]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80075f6:	4b43      	ldr	r3, [pc, #268]	@ (8007704 <BSP_SDRAM_MspInit+0x1cc>)
 80075f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fe:	60fb      	str	r3, [r7, #12]
 8007600:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8007602:	2302      	movs	r3, #2
 8007604:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007606:	2301      	movs	r3, #1
 8007608:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800760a:	2302      	movs	r3, #2
 800760c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800760e:	230c      	movs	r3, #12
 8007610:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8007612:	2308      	movs	r3, #8
 8007614:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8007616:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800761a:	4619      	mov	r1, r3
 800761c:	483a      	ldr	r0, [pc, #232]	@ (8007708 <BSP_SDRAM_MspInit+0x1d0>)
 800761e:	f001 fec1 	bl	80093a4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8007622:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8007626:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007628:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800762c:	4619      	mov	r1, r3
 800762e:	4837      	ldr	r0, [pc, #220]	@ (800770c <BSP_SDRAM_MspInit+0x1d4>)
 8007630:	f001 feb8 	bl	80093a4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007634:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8007638:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800763a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800763e:	4619      	mov	r1, r3
 8007640:	4833      	ldr	r0, [pc, #204]	@ (8007710 <BSP_SDRAM_MspInit+0x1d8>)
 8007642:	f001 feaf 	bl	80093a4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8007646:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800764a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800764c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007650:	4619      	mov	r1, r3
 8007652:	4830      	ldr	r0, [pc, #192]	@ (8007714 <BSP_SDRAM_MspInit+0x1dc>)
 8007654:	f001 fea6 	bl	80093a4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8007658:	f248 1333 	movw	r3, #33075	@ 0x8133
 800765c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800765e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007662:	4619      	mov	r1, r3
 8007664:	482c      	ldr	r0, [pc, #176]	@ (8007718 <BSP_SDRAM_MspInit+0x1e0>)
 8007666:	f001 fe9d 	bl	80093a4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800766a:	2328      	movs	r3, #40	@ 0x28
 800766c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800766e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007672:	4619      	mov	r1, r3
 8007674:	4829      	ldr	r0, [pc, #164]	@ (800771c <BSP_SDRAM_MspInit+0x1e4>)
 8007676:	f001 fe95 	bl	80093a4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800767a:	4b29      	ldr	r3, [pc, #164]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 800767c:	2200      	movs	r2, #0
 800767e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8007680:	4b27      	ldr	r3, [pc, #156]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 8007682:	2280      	movs	r2, #128	@ 0x80
 8007684:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8007686:	4b26      	ldr	r3, [pc, #152]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 8007688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800768c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800768e:	4b24      	ldr	r3, [pc, #144]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 8007690:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007694:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007696:	4b22      	ldr	r3, [pc, #136]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 8007698:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800769c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800769e:	4b20      	ldr	r3, [pc, #128]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80076a4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80076a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80076ac:	4b1c      	ldr	r3, [pc, #112]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80076b2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80076b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80076ba:	4b19      	ldr	r3, [pc, #100]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076bc:	2203      	movs	r2, #3
 80076be:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80076c0:	4b17      	ldr	r3, [pc, #92]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80076c6:	4b16      	ldr	r3, [pc, #88]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80076cc:	4b14      	ldr	r3, [pc, #80]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076ce:	4a15      	ldr	r2, [pc, #84]	@ (8007724 <BSP_SDRAM_MspInit+0x1ec>)
 80076d0:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a12      	ldr	r2, [pc, #72]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80076d8:	4a11      	ldr	r2, [pc, #68]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80076de:	4810      	ldr	r0, [pc, #64]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076e0:	f001 f918 	bl	8008914 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80076e4:	480e      	ldr	r0, [pc, #56]	@ (8007720 <BSP_SDRAM_MspInit+0x1e8>)
 80076e6:	f001 f867 	bl	80087b8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80076ea:	2200      	movs	r2, #0
 80076ec:	210f      	movs	r1, #15
 80076ee:	2038      	movs	r0, #56	@ 0x38
 80076f0:	f001 f82b 	bl	800874a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80076f4:	2038      	movs	r0, #56	@ 0x38
 80076f6:	f001 f844 	bl	8008782 <HAL_NVIC_EnableIRQ>
}
 80076fa:	bf00      	nop
 80076fc:	3740      	adds	r7, #64	@ 0x40
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	40023800 	.word	0x40023800
 8007708:	40020800 	.word	0x40020800
 800770c:	40020c00 	.word	0x40020c00
 8007710:	40021000 	.word	0x40021000
 8007714:	40021400 	.word	0x40021400
 8007718:	40021800 	.word	0x40021800
 800771c:	40021c00 	.word	0x40021c00
 8007720:	2000642c 	.word	0x2000642c
 8007724:	40026410 	.word	0x40026410

08007728 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	4603      	mov	r3, r0
 8007730:	460a      	mov	r2, r1
 8007732:	80fb      	strh	r3, [r7, #6]
 8007734:	4613      	mov	r3, r2
 8007736:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800773c:	4a14      	ldr	r2, [pc, #80]	@ (8007790 <BSP_TS_Init+0x68>)
 800773e:	88fb      	ldrh	r3, [r7, #6]
 8007740:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8007742:	4a14      	ldr	r2, [pc, #80]	@ (8007794 <BSP_TS_Init+0x6c>)
 8007744:	88bb      	ldrh	r3, [r7, #4]
 8007746:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8007748:	4b13      	ldr	r3, [pc, #76]	@ (8007798 <BSP_TS_Init+0x70>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2070      	movs	r0, #112	@ 0x70
 800774e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8007750:	4b11      	ldr	r3, [pc, #68]	@ (8007798 <BSP_TS_Init+0x70>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	2070      	movs	r0, #112	@ 0x70
 8007756:	4798      	blx	r3
 8007758:	4603      	mov	r3, r0
 800775a:	2b51      	cmp	r3, #81	@ 0x51
 800775c:	d110      	bne.n	8007780 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800775e:	4b0f      	ldr	r3, [pc, #60]	@ (800779c <BSP_TS_Init+0x74>)
 8007760:	4a0d      	ldr	r2, [pc, #52]	@ (8007798 <BSP_TS_Init+0x70>)
 8007762:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8007764:	4b0e      	ldr	r3, [pc, #56]	@ (80077a0 <BSP_TS_Init+0x78>)
 8007766:	2270      	movs	r2, #112	@ 0x70
 8007768:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800776a:	4b0e      	ldr	r3, [pc, #56]	@ (80077a4 <BSP_TS_Init+0x7c>)
 800776c:	2208      	movs	r2, #8
 800776e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8007770:	4b0a      	ldr	r3, [pc, #40]	@ (800779c <BSP_TS_Init+0x74>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	4a0a      	ldr	r2, [pc, #40]	@ (80077a0 <BSP_TS_Init+0x78>)
 8007778:	7812      	ldrb	r2, [r2, #0]
 800777a:	4610      	mov	r0, r2
 800777c:	4798      	blx	r3
 800777e:	e001      	b.n	8007784 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8007780:	2303      	movs	r3, #3
 8007782:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007784:	7bfb      	ldrb	r3, [r7, #15]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20006490 	.word	0x20006490
 8007794:	20006492 	.word	0x20006492
 8007798:	20004ed4 	.word	0x20004ed4
 800779c:	2000648c 	.word	0x2000648c
 80077a0:	20006495 	.word	0x20006495
 80077a4:	20006494 	.word	0x20006494

080077a8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80077a8:	b590      	push	{r4, r7, lr}
 80077aa:	b097      	sub	sp, #92	@ 0x5c
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80077be:	2300      	movs	r3, #0
 80077c0:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80077c2:	4bb8      	ldr	r3, [pc, #736]	@ (8007aa4 <BSP_TS_GetState+0x2fc>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	4ab7      	ldr	r2, [pc, #732]	@ (8007aa8 <BSP_TS_GetState+0x300>)
 80077ca:	7812      	ldrb	r2, [r2, #0]
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	4603      	mov	r3, r0
 80077d2:	461a      	mov	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 8198 	beq.w	8007b12 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80077e2:	2300      	movs	r3, #0
 80077e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077e6:	e187      	b.n	8007af8 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80077e8:	4bae      	ldr	r3, [pc, #696]	@ (8007aa4 <BSP_TS_GetState+0x2fc>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	4aae      	ldr	r2, [pc, #696]	@ (8007aa8 <BSP_TS_GetState+0x300>)
 80077f0:	7812      	ldrb	r2, [r2, #0]
 80077f2:	4614      	mov	r4, r2
 80077f4:	f107 0120 	add.w	r1, r7, #32
 80077f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077fa:	0052      	lsls	r2, r2, #1
 80077fc:	1888      	adds	r0, r1, r2
 80077fe:	f107 0114 	add.w	r1, r7, #20
 8007802:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007804:	0052      	lsls	r2, r2, #1
 8007806:	440a      	add	r2, r1
 8007808:	4601      	mov	r1, r0
 800780a:	4620      	mov	r0, r4
 800780c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800780e:	4ba7      	ldr	r3, [pc, #668]	@ (8007aac <BSP_TS_GetState+0x304>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d117      	bne.n	8007846 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8007816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	3350      	adds	r3, #80	@ 0x50
 800781c:	443b      	add	r3, r7
 800781e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8007822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007824:	005b      	lsls	r3, r3, #1
 8007826:	3350      	adds	r3, #80	@ 0x50
 8007828:	443b      	add	r3, r7
 800782a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800782e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	3350      	adds	r3, #80	@ 0x50
 8007834:	443b      	add	r3, r7
 8007836:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800783a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	3350      	adds	r3, #80	@ 0x50
 8007840:	443b      	add	r3, r7
 8007842:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8007846:	4b99      	ldr	r3, [pc, #612]	@ (8007aac <BSP_TS_GetState+0x304>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00e      	beq.n	8007870 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8007852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	3350      	adds	r3, #80	@ 0x50
 8007858:	443b      	add	r3, r7
 800785a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800785e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8007862:	b29a      	uxth	r2, r3
 8007864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007866:	005b      	lsls	r3, r3, #1
 8007868:	3350      	adds	r3, #80	@ 0x50
 800786a:	443b      	add	r3, r7
 800786c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8007870:	4b8e      	ldr	r3, [pc, #568]	@ (8007aac <BSP_TS_GetState+0x304>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00e      	beq.n	800789a <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 800787c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	3350      	adds	r3, #80	@ 0x50
 8007882:	443b      	add	r3, r7
 8007884:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8007888:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800788c:	b29a      	uxth	r2, r3
 800788e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	3350      	adds	r3, #80	@ 0x50
 8007894:	443b      	add	r3, r7
 8007896:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800789a:	4b84      	ldr	r3, [pc, #528]	@ (8007aac <BSP_TS_GetState+0x304>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	f003 0308 	and.w	r3, r3, #8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d017      	beq.n	80078d6 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 80078a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	3350      	adds	r3, #80	@ 0x50
 80078ac:	443b      	add	r3, r7
 80078ae:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80078b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078b4:	005b      	lsls	r3, r3, #1
 80078b6:	3350      	adds	r3, #80	@ 0x50
 80078b8:	443b      	add	r3, r7
 80078ba:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80078be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	3350      	adds	r3, #80	@ 0x50
 80078c4:	443b      	add	r3, r7
 80078c6:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80078ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	3350      	adds	r3, #80	@ 0x50
 80078d0:	443b      	add	r3, r7
 80078d2:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80078d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078d8:	005b      	lsls	r3, r3, #1
 80078da:	3350      	adds	r3, #80	@ 0x50
 80078dc:	443b      	add	r3, r7
 80078de:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80078e2:	4619      	mov	r1, r3
 80078e4:	4a72      	ldr	r2, [pc, #456]	@ (8007ab0 <BSP_TS_GetState+0x308>)
 80078e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ec:	4299      	cmp	r1, r3
 80078ee:	d90d      	bls.n	800790c <BSP_TS_GetState+0x164>
 80078f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078f2:	005b      	lsls	r3, r3, #1
 80078f4:	3350      	adds	r3, #80	@ 0x50
 80078f6:	443b      	add	r3, r7
 80078f8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80078fc:	496c      	ldr	r1, [pc, #432]	@ (8007ab0 <BSP_TS_GetState+0x308>)
 80078fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007900:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007904:	b29b      	uxth	r3, r3
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	b29b      	uxth	r3, r3
 800790a:	e00c      	b.n	8007926 <BSP_TS_GetState+0x17e>
 800790c:	4a68      	ldr	r2, [pc, #416]	@ (8007ab0 <BSP_TS_GetState+0x308>)
 800790e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007914:	b29a      	uxth	r2, r3
 8007916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	3350      	adds	r3, #80	@ 0x50
 800791c:	443b      	add	r3, r7
 800791e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	b29b      	uxth	r3, r3
 8007926:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800792a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	3350      	adds	r3, #80	@ 0x50
 8007930:	443b      	add	r3, r7
 8007932:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007936:	4619      	mov	r1, r3
 8007938:	4a5e      	ldr	r2, [pc, #376]	@ (8007ab4 <BSP_TS_GetState+0x30c>)
 800793a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800793c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007940:	4299      	cmp	r1, r3
 8007942:	d90d      	bls.n	8007960 <BSP_TS_GetState+0x1b8>
 8007944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007946:	005b      	lsls	r3, r3, #1
 8007948:	3350      	adds	r3, #80	@ 0x50
 800794a:	443b      	add	r3, r7
 800794c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8007950:	4958      	ldr	r1, [pc, #352]	@ (8007ab4 <BSP_TS_GetState+0x30c>)
 8007952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007954:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007958:	b29b      	uxth	r3, r3
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	b29b      	uxth	r3, r3
 800795e:	e00c      	b.n	800797a <BSP_TS_GetState+0x1d2>
 8007960:	4a54      	ldr	r2, [pc, #336]	@ (8007ab4 <BSP_TS_GetState+0x30c>)
 8007962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007968:	b29a      	uxth	r2, r3
 800796a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	3350      	adds	r3, #80	@ 0x50
 8007970:	443b      	add	r3, r7
 8007972:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	b29b      	uxth	r3, r3
 800797a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 800797e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007982:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007986:	4413      	add	r3, r2
 8007988:	2b05      	cmp	r3, #5
 800798a:	dd15      	ble.n	80079b8 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 800798c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800798e:	005b      	lsls	r3, r3, #1
 8007990:	3350      	adds	r3, #80	@ 0x50
 8007992:	443b      	add	r3, r7
 8007994:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8007998:	4619      	mov	r1, r3
 800799a:	4a45      	ldr	r2, [pc, #276]	@ (8007ab0 <BSP_TS_GetState+0x308>)
 800799c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800799e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80079a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	3350      	adds	r3, #80	@ 0x50
 80079a8:	443b      	add	r3, r7
 80079aa:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80079ae:	4619      	mov	r1, r3
 80079b0:	4a40      	ldr	r2, [pc, #256]	@ (8007ab4 <BSP_TS_GetState+0x30c>)
 80079b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80079b8:	4b3b      	ldr	r3, [pc, #236]	@ (8007aa8 <BSP_TS_GetState+0x300>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b70      	cmp	r3, #112	@ 0x70
 80079be:	d119      	bne.n	80079f4 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 80079c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	3350      	adds	r3, #80	@ 0x50
 80079c6:	443b      	add	r3, r7
 80079c8:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	4413      	add	r3, r2
 80079d4:	460a      	mov	r2, r1
 80079d6:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80079d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	3350      	adds	r3, #80	@ 0x50
 80079de:	443b      	add	r3, r7
 80079e0:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079e8:	3304      	adds	r3, #4
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	4413      	add	r3, r2
 80079ee:	460a      	mov	r2, r1
 80079f0:	809a      	strh	r2, [r3, #4]
 80079f2:	e022      	b.n	8007a3a <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 80079f4:	4b30      	ldr	r3, [pc, #192]	@ (8007ab8 <BSP_TS_GetState+0x310>)
 80079f6:	881b      	ldrh	r3, [r3, #0]
 80079f8:	4619      	mov	r1, r3
 80079fa:	4a2d      	ldr	r2, [pc, #180]	@ (8007ab0 <BSP_TS_GetState+0x308>)
 80079fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a02:	fb01 f303 	mul.w	r3, r1, r3
 8007a06:	0b1b      	lsrs	r3, r3, #12
 8007a08:	b299      	uxth	r1, r3
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	4413      	add	r3, r2
 8007a12:	460a      	mov	r2, r1
 8007a14:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8007a16:	4b29      	ldr	r3, [pc, #164]	@ (8007abc <BSP_TS_GetState+0x314>)
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4a25      	ldr	r2, [pc, #148]	@ (8007ab4 <BSP_TS_GetState+0x30c>)
 8007a1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a24:	fb01 f303 	mul.w	r3, r1, r3
 8007a28:	0b1b      	lsrs	r3, r3, #12
 8007a2a:	b299      	uxth	r1, r3
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a30:	3304      	adds	r3, #4
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	4413      	add	r3, r2
 8007a36:	460a      	mov	r2, r1
 8007a38:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8007a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007aa8 <BSP_TS_GetState+0x300>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f107 010c 	add.w	r1, r7, #12
 8007a44:	f107 0210 	add.w	r2, r7, #16
 8007a48:	f107 0308 	add.w	r3, r7, #8
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	460b      	mov	r3, r1
 8007a50:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007a52:	f7fe f877 	bl	8005b44 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	b2d9      	uxtb	r1, r3
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a5e:	4413      	add	r3, r2
 8007a60:	3316      	adds	r3, #22
 8007a62:	460a      	mov	r2, r1
 8007a64:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	b2d9      	uxtb	r1, r3
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a6e:	4413      	add	r3, r2
 8007a70:	3320      	adds	r3, #32
 8007a72:	460a      	mov	r2, r1
 8007a74:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d836      	bhi.n	8007aea <BSP_TS_GetState+0x342>
 8007a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8007a84 <BSP_TS_GetState+0x2dc>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	08007ac1 	.word	0x08007ac1
 8007a8c:	08007acf 	.word	0x08007acf
 8007a90:	08007add 	.word	0x08007add
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a98:	4413      	add	r3, r2
 8007a9a:	331b      	adds	r3, #27
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	701a      	strb	r2, [r3, #0]
          break;
 8007aa0:	e027      	b.n	8007af2 <BSP_TS_GetState+0x34a>
 8007aa2:	bf00      	nop
 8007aa4:	2000648c 	.word	0x2000648c
 8007aa8:	20006495 	.word	0x20006495
 8007aac:	20006494 	.word	0x20006494
 8007ab0:	20006498 	.word	0x20006498
 8007ab4:	200064ac 	.word	0x200064ac
 8007ab8:	20006490 	.word	0x20006490
 8007abc:	20006492 	.word	0x20006492
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ac4:	4413      	add	r3, r2
 8007ac6:	331b      	adds	r3, #27
 8007ac8:	2202      	movs	r2, #2
 8007aca:	701a      	strb	r2, [r3, #0]
          break;
 8007acc:	e011      	b.n	8007af2 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ad2:	4413      	add	r3, r2
 8007ad4:	331b      	adds	r3, #27
 8007ad6:	2203      	movs	r2, #3
 8007ad8:	701a      	strb	r2, [r3, #0]
          break;
 8007ada:	e00a      	b.n	8007af2 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ae0:	4413      	add	r3, r2
 8007ae2:	331b      	adds	r3, #27
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	701a      	strb	r2, [r3, #0]
          break;
 8007ae8:	e003      	b.n	8007af2 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8007af0:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8007af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007af4:	3301      	adds	r3, #1
 8007af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b00:	4293      	cmp	r3, r2
 8007b02:	f4ff ae71 	bcc.w	80077e8 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f80a 	bl	8007b20 <BSP_TS_Get_GestureId>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8007b12:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3754      	adds	r7, #84	@ 0x54
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd90      	pop	{r4, r7, pc}
 8007b1e:	bf00      	nop

08007b20 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8007b30:	4b3b      	ldr	r3, [pc, #236]	@ (8007c20 <BSP_TS_Get_GestureId+0x100>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	f107 0308 	add.w	r3, r7, #8
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f7fd ffe8 	bl	8005b12 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	2b49      	cmp	r3, #73	@ 0x49
 8007b46:	d05e      	beq.n	8007c06 <BSP_TS_Get_GestureId+0xe6>
 8007b48:	2b49      	cmp	r3, #73	@ 0x49
 8007b4a:	d860      	bhi.n	8007c0e <BSP_TS_Get_GestureId+0xee>
 8007b4c:	2b1c      	cmp	r3, #28
 8007b4e:	d83f      	bhi.n	8007bd0 <BSP_TS_Get_GestureId+0xb0>
 8007b50:	2b1c      	cmp	r3, #28
 8007b52:	d85c      	bhi.n	8007c0e <BSP_TS_Get_GestureId+0xee>
 8007b54:	a201      	add	r2, pc, #4	@ (adr r2, 8007b5c <BSP_TS_Get_GestureId+0x3c>)
 8007b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5a:	bf00      	nop
 8007b5c:	08007bd7 	.word	0x08007bd7
 8007b60:	08007c0f 	.word	0x08007c0f
 8007b64:	08007c0f 	.word	0x08007c0f
 8007b68:	08007c0f 	.word	0x08007c0f
 8007b6c:	08007c0f 	.word	0x08007c0f
 8007b70:	08007c0f 	.word	0x08007c0f
 8007b74:	08007c0f 	.word	0x08007c0f
 8007b78:	08007c0f 	.word	0x08007c0f
 8007b7c:	08007c0f 	.word	0x08007c0f
 8007b80:	08007c0f 	.word	0x08007c0f
 8007b84:	08007c0f 	.word	0x08007c0f
 8007b88:	08007c0f 	.word	0x08007c0f
 8007b8c:	08007c0f 	.word	0x08007c0f
 8007b90:	08007c0f 	.word	0x08007c0f
 8007b94:	08007c0f 	.word	0x08007c0f
 8007b98:	08007c0f 	.word	0x08007c0f
 8007b9c:	08007bdf 	.word	0x08007bdf
 8007ba0:	08007c0f 	.word	0x08007c0f
 8007ba4:	08007c0f 	.word	0x08007c0f
 8007ba8:	08007c0f 	.word	0x08007c0f
 8007bac:	08007be7 	.word	0x08007be7
 8007bb0:	08007c0f 	.word	0x08007c0f
 8007bb4:	08007c0f 	.word	0x08007c0f
 8007bb8:	08007c0f 	.word	0x08007c0f
 8007bbc:	08007bef 	.word	0x08007bef
 8007bc0:	08007c0f 	.word	0x08007c0f
 8007bc4:	08007c0f 	.word	0x08007c0f
 8007bc8:	08007c0f 	.word	0x08007c0f
 8007bcc:	08007bf7 	.word	0x08007bf7
 8007bd0:	2b40      	cmp	r3, #64	@ 0x40
 8007bd2:	d014      	beq.n	8007bfe <BSP_TS_Get_GestureId+0xde>
 8007bd4:	e01b      	b.n	8007c0e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8007bdc:	e01a      	b.n	8007c14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8007be4:	e016      	b.n	8007c14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2202      	movs	r2, #2
 8007bea:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8007bec:	e012      	b.n	8007c14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8007bf4:	e00e      	b.n	8007c14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2204      	movs	r2, #4
 8007bfa:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8007bfc:	e00a      	b.n	8007c14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2205      	movs	r2, #5
 8007c02:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8007c04:	e006      	b.n	8007c14 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2206      	movs	r2, #6
 8007c0a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8007c0c:	e002      	b.n	8007c14 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	73fb      	strb	r3, [r7, #15]
      break;
 8007c12:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20006495 	.word	0x20006495

08007c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8007c28:	4b08      	ldr	r3, [pc, #32]	@ (8007c4c <HAL_Init+0x28>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a07      	ldr	r2, [pc, #28]	@ (8007c4c <HAL_Init+0x28>)
 8007c2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c32:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c34:	2003      	movs	r0, #3
 8007c36:	f000 fd7d 	bl	8008734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	f000 f808 	bl	8007c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007c40:	f7fd f98a 	bl	8004f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	40023c00 	.word	0x40023c00

08007c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b082      	sub	sp, #8
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007c58:	4b12      	ldr	r3, [pc, #72]	@ (8007ca4 <HAL_InitTick+0x54>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	4b12      	ldr	r3, [pc, #72]	@ (8007ca8 <HAL_InitTick+0x58>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	4619      	mov	r1, r3
 8007c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 fd95 	bl	800879e <HAL_SYSTICK_Config>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d001      	beq.n	8007c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e00e      	b.n	8007c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b0f      	cmp	r3, #15
 8007c82:	d80a      	bhi.n	8007c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007c84:	2200      	movs	r2, #0
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	f04f 30ff 	mov.w	r0, #4294967295
 8007c8c:	f000 fd5d 	bl	800874a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007c90:	4a06      	ldr	r2, [pc, #24]	@ (8007cac <HAL_InitTick+0x5c>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007c96:	2300      	movs	r3, #0
 8007c98:	e000      	b.n	8007c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20004ed0 	.word	0x20004ed0
 8007ca8:	20004f24 	.word	0x20004f24
 8007cac:	20004f20 	.word	0x20004f20

08007cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007cb4:	4b06      	ldr	r3, [pc, #24]	@ (8007cd0 <HAL_IncTick+0x20>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4b06      	ldr	r3, [pc, #24]	@ (8007cd4 <HAL_IncTick+0x24>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	4a04      	ldr	r2, [pc, #16]	@ (8007cd4 <HAL_IncTick+0x24>)
 8007cc2:	6013      	str	r3, [r2, #0]
}
 8007cc4:	bf00      	nop
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	20004f24 	.word	0x20004f24
 8007cd4:	200064c0 	.word	0x200064c0

08007cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	af00      	add	r7, sp, #0
  return uwTick;
 8007cdc:	4b03      	ldr	r3, [pc, #12]	@ (8007cec <HAL_GetTick+0x14>)
 8007cde:	681b      	ldr	r3, [r3, #0]
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	200064c0 	.word	0x200064c0

08007cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007cf8:	f7ff ffee 	bl	8007cd8 <HAL_GetTick>
 8007cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d08:	d005      	beq.n	8007d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d34 <HAL_Delay+0x44>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4413      	add	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007d16:	bf00      	nop
 8007d18:	f7ff ffde 	bl	8007cd8 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d8f7      	bhi.n	8007d18 <HAL_Delay+0x28>
  {
  }
}
 8007d28:	bf00      	nop
 8007d2a:	bf00      	nop
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20004f24 	.word	0x20004f24

08007d38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e031      	b.n	8007db2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d109      	bne.n	8007d6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7fb fa6a 	bl	8003230 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6e:	f003 0310 	and.w	r3, r3, #16
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d116      	bne.n	8007da4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d7a:	4b10      	ldr	r3, [pc, #64]	@ (8007dbc <HAL_ADC_Init+0x84>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	f043 0202 	orr.w	r2, r3, #2
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fb0a 	bl	80083a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d96:	f023 0303 	bic.w	r3, r3, #3
 8007d9a:	f043 0201 	orr.w	r2, r3, #1
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	641a      	str	r2, [r3, #64]	@ 0x40
 8007da2:	e001      	b.n	8007da8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007da4:	2301      	movs	r3, #1
 8007da6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3710      	adds	r7, #16
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	bf00      	nop
 8007dbc:	ffffeefd 	.word	0xffffeefd

08007dc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d101      	bne.n	8007dda <HAL_ADC_Start+0x1a>
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	e0ad      	b.n	8007f36 <HAL_ADC_Start+0x176>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d018      	beq.n	8007e22 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	689a      	ldr	r2, [r3, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007e00:	4b50      	ldr	r3, [pc, #320]	@ (8007f44 <HAL_ADC_Start+0x184>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a50      	ldr	r2, [pc, #320]	@ (8007f48 <HAL_ADC_Start+0x188>)
 8007e06:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0a:	0c9a      	lsrs	r2, r3, #18
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	4413      	add	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8007e14:	e002      	b.n	8007e1c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f9      	bne.n	8007e16 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d175      	bne.n	8007f1c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e34:	4b45      	ldr	r3, [pc, #276]	@ (8007f4c <HAL_ADC_Start+0x18c>)
 8007e36:	4013      	ands	r3, r2
 8007e38:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d007      	beq.n	8007e5e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e52:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007e56:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007e66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e6a:	d106      	bne.n	8007e7a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e70:	f023 0206 	bic.w	r2, r3, #6
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	645a      	str	r2, [r3, #68]	@ 0x44
 8007e78:	e002      	b.n	8007e80 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007e90:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007e92:	4b2f      	ldr	r3, [pc, #188]	@ (8007f50 <HAL_ADC_Start+0x190>)
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f003 031f 	and.w	r3, r3, #31
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10f      	bne.n	8007ebe <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d143      	bne.n	8007f34 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689a      	ldr	r2, [r3, #8]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007eba:	609a      	str	r2, [r3, #8]
 8007ebc:	e03a      	b.n	8007f34 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a24      	ldr	r2, [pc, #144]	@ (8007f54 <HAL_ADC_Start+0x194>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d10e      	bne.n	8007ee6 <HAL_ADC_Start+0x126>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d107      	bne.n	8007ee6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007ee4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8007f50 <HAL_ADC_Start+0x190>)
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	f003 0310 	and.w	r3, r3, #16
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d120      	bne.n	8007f34 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a18      	ldr	r2, [pc, #96]	@ (8007f58 <HAL_ADC_Start+0x198>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d11b      	bne.n	8007f34 <HAL_ADC_Start+0x174>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d114      	bne.n	8007f34 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007f18:	609a      	str	r2, [r3, #8]
 8007f1a:	e00b      	b.n	8007f34 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f20:	f043 0210 	orr.w	r2, r3, #16
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f2c:	f043 0201 	orr.w	r2, r3, #1
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007f34:	2300      	movs	r3, #0
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop
 8007f44:	20004ed0 	.word	0x20004ed0
 8007f48:	431bde83 	.word	0x431bde83
 8007f4c:	fffff8fe 	.word	0xfffff8fe
 8007f50:	40012300 	.word	0x40012300
 8007f54:	40012000 	.word	0x40012000
 8007f58:	40012200 	.word	0x40012200

08007f5c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d101      	bne.n	8007f72 <HAL_ADC_Stop+0x16>
 8007f6e:	2302      	movs	r3, #2
 8007f70:	e01f      	b.n	8007fb2 <HAL_ADC_Stop+0x56>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f022 0201 	bic.w	r2, r2, #1
 8007f88:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d107      	bne.n	8007fa8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f9c:	4b08      	ldr	r3, [pc, #32]	@ (8007fc0 <HAL_ADC_Stop+0x64>)
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	f043 0201 	orr.w	r2, r3, #1
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007fb0:	2300      	movs	r3, #0
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	ffffeefe 	.word	0xffffeefe

08007fc4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fe0:	d113      	bne.n	800800a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8007fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ff0:	d10b      	bne.n	800800a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff6:	f043 0220 	orr.w	r2, r3, #32
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2200      	movs	r2, #0
 8008002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e063      	b.n	80080d2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800800a:	f7ff fe65 	bl	8007cd8 <HAL_GetTick>
 800800e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008010:	e021      	b.n	8008056 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008018:	d01d      	beq.n	8008056 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d007      	beq.n	8008030 <HAL_ADC_PollForConversion+0x6c>
 8008020:	f7ff fe5a 	bl	8007cd8 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	429a      	cmp	r2, r3
 800802e:	d212      	bcs.n	8008056 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0302 	and.w	r3, r3, #2
 800803a:	2b02      	cmp	r3, #2
 800803c:	d00b      	beq.n	8008056 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008042:	f043 0204 	orr.w	r2, r3, #4
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e03d      	b.n	80080d2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b02      	cmp	r3, #2
 8008062:	d1d6      	bne.n	8008012 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f06f 0212 	mvn.w	r2, #18
 800806c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008072:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d123      	bne.n	80080d0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800808c:	2b00      	cmp	r3, #0
 800808e:	d11f      	bne.n	80080d0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008096:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800809a:	2b00      	cmp	r3, #0
 800809c:	d006      	beq.n	80080ac <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d111      	bne.n	80080d0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d105      	bne.n	80080d0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080c8:	f043 0201 	orr.w	r2, r3, #1
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80080fe:	2300      	movs	r3, #0
 8008100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_ADC_ConfigChannel+0x1c>
 800810c:	2302      	movs	r3, #2
 800810e:	e136      	b.n	800837e <HAL_ADC_ConfigChannel+0x28a>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b09      	cmp	r3, #9
 800811e:	d93a      	bls.n	8008196 <HAL_ADC_ConfigChannel+0xa2>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008128:	d035      	beq.n	8008196 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68d9      	ldr	r1, [r3, #12]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	b29b      	uxth	r3, r3
 8008136:	461a      	mov	r2, r3
 8008138:	4613      	mov	r3, r2
 800813a:	005b      	lsls	r3, r3, #1
 800813c:	4413      	add	r3, r2
 800813e:	3b1e      	subs	r3, #30
 8008140:	2207      	movs	r2, #7
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	43da      	mvns	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	400a      	ands	r2, r1
 800814e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a8d      	ldr	r2, [pc, #564]	@ (800838c <HAL_ADC_ConfigChannel+0x298>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d10a      	bne.n	8008170 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68d9      	ldr	r1, [r3, #12]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	061a      	lsls	r2, r3, #24
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	430a      	orrs	r2, r1
 800816c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800816e:	e035      	b.n	80081dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68d9      	ldr	r1, [r3, #12]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	b29b      	uxth	r3, r3
 8008180:	4618      	mov	r0, r3
 8008182:	4603      	mov	r3, r0
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	4403      	add	r3, r0
 8008188:	3b1e      	subs	r3, #30
 800818a:	409a      	lsls	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008194:	e022      	b.n	80081dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	6919      	ldr	r1, [r3, #16]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	461a      	mov	r2, r3
 80081a4:	4613      	mov	r3, r2
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	4413      	add	r3, r2
 80081aa:	2207      	movs	r2, #7
 80081ac:	fa02 f303 	lsl.w	r3, r2, r3
 80081b0:	43da      	mvns	r2, r3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	400a      	ands	r2, r1
 80081b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	6919      	ldr	r1, [r3, #16]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	4618      	mov	r0, r3
 80081cc:	4603      	mov	r3, r0
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	4403      	add	r3, r0
 80081d2:	409a      	lsls	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	2b06      	cmp	r3, #6
 80081e2:	d824      	bhi.n	800822e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	4613      	mov	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	3b05      	subs	r3, #5
 80081f6:	221f      	movs	r2, #31
 80081f8:	fa02 f303 	lsl.w	r3, r2, r3
 80081fc:	43da      	mvns	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	400a      	ands	r2, r1
 8008204:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	4618      	mov	r0, r3
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685a      	ldr	r2, [r3, #4]
 8008218:	4613      	mov	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	3b05      	subs	r3, #5
 8008220:	fa00 f203 	lsl.w	r2, r0, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	430a      	orrs	r2, r1
 800822a:	635a      	str	r2, [r3, #52]	@ 0x34
 800822c:	e04c      	b.n	80082c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2b0c      	cmp	r3, #12
 8008234:	d824      	bhi.n	8008280 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	685a      	ldr	r2, [r3, #4]
 8008240:	4613      	mov	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	3b23      	subs	r3, #35	@ 0x23
 8008248:	221f      	movs	r2, #31
 800824a:	fa02 f303 	lsl.w	r3, r2, r3
 800824e:	43da      	mvns	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	400a      	ands	r2, r1
 8008256:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	b29b      	uxth	r3, r3
 8008264:	4618      	mov	r0, r3
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	4613      	mov	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	3b23      	subs	r3, #35	@ 0x23
 8008272:	fa00 f203 	lsl.w	r2, r0, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	430a      	orrs	r2, r1
 800827c:	631a      	str	r2, [r3, #48]	@ 0x30
 800827e:	e023      	b.n	80082c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	3b41      	subs	r3, #65	@ 0x41
 8008292:	221f      	movs	r2, #31
 8008294:	fa02 f303 	lsl.w	r3, r2, r3
 8008298:	43da      	mvns	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	400a      	ands	r2, r1
 80082a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	4618      	mov	r0, r3
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	3b41      	subs	r3, #65	@ 0x41
 80082bc:	fa00 f203 	lsl.w	r2, r0, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	430a      	orrs	r2, r1
 80082c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a30      	ldr	r2, [pc, #192]	@ (8008390 <HAL_ADC_ConfigChannel+0x29c>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d10a      	bne.n	80082e8 <HAL_ADC_ConfigChannel+0x1f4>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082da:	d105      	bne.n	80082e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80082dc:	4b2d      	ldr	r3, [pc, #180]	@ (8008394 <HAL_ADC_ConfigChannel+0x2a0>)
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	4a2c      	ldr	r2, [pc, #176]	@ (8008394 <HAL_ADC_ConfigChannel+0x2a0>)
 80082e2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80082e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a28      	ldr	r2, [pc, #160]	@ (8008390 <HAL_ADC_ConfigChannel+0x29c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d10f      	bne.n	8008312 <HAL_ADC_ConfigChannel+0x21e>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b12      	cmp	r3, #18
 80082f8:	d10b      	bne.n	8008312 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80082fa:	4b26      	ldr	r3, [pc, #152]	@ (8008394 <HAL_ADC_ConfigChannel+0x2a0>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	4a25      	ldr	r2, [pc, #148]	@ (8008394 <HAL_ADC_ConfigChannel+0x2a0>)
 8008300:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008304:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8008306:	4b23      	ldr	r3, [pc, #140]	@ (8008394 <HAL_ADC_ConfigChannel+0x2a0>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	4a22      	ldr	r2, [pc, #136]	@ (8008394 <HAL_ADC_ConfigChannel+0x2a0>)
 800830c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008310:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a1e      	ldr	r2, [pc, #120]	@ (8008390 <HAL_ADC_ConfigChannel+0x29c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d12b      	bne.n	8008374 <HAL_ADC_ConfigChannel+0x280>
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a1a      	ldr	r2, [pc, #104]	@ (800838c <HAL_ADC_ConfigChannel+0x298>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d003      	beq.n	800832e <HAL_ADC_ConfigChannel+0x23a>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b11      	cmp	r3, #17
 800832c:	d122      	bne.n	8008374 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800832e:	4b19      	ldr	r3, [pc, #100]	@ (8008394 <HAL_ADC_ConfigChannel+0x2a0>)
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	4a18      	ldr	r2, [pc, #96]	@ (8008394 <HAL_ADC_ConfigChannel+0x2a0>)
 8008334:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8008338:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800833a:	4b16      	ldr	r3, [pc, #88]	@ (8008394 <HAL_ADC_ConfigChannel+0x2a0>)
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	4a15      	ldr	r2, [pc, #84]	@ (8008394 <HAL_ADC_ConfigChannel+0x2a0>)
 8008340:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008344:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a10      	ldr	r2, [pc, #64]	@ (800838c <HAL_ADC_ConfigChannel+0x298>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d111      	bne.n	8008374 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8008350:	4b11      	ldr	r3, [pc, #68]	@ (8008398 <HAL_ADC_ConfigChannel+0x2a4>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a11      	ldr	r2, [pc, #68]	@ (800839c <HAL_ADC_ConfigChannel+0x2a8>)
 8008356:	fba2 2303 	umull	r2, r3, r2, r3
 800835a:	0c9a      	lsrs	r2, r3, #18
 800835c:	4613      	mov	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	005b      	lsls	r3, r3, #1
 8008364:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8008366:	e002      	b.n	800836e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	3b01      	subs	r3, #1
 800836c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1f9      	bne.n	8008368 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3714      	adds	r7, #20
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	10000012 	.word	0x10000012
 8008390:	40012000 	.word	0x40012000
 8008394:	40012300 	.word	0x40012300
 8008398:	20004ed0 	.word	0x20004ed0
 800839c:	431bde83 	.word	0x431bde83

080083a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80083a8:	4b78      	ldr	r3, [pc, #480]	@ (800858c <ADC_Init+0x1ec>)
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	4a77      	ldr	r2, [pc, #476]	@ (800858c <ADC_Init+0x1ec>)
 80083ae:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80083b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80083b4:	4b75      	ldr	r3, [pc, #468]	@ (800858c <ADC_Init+0x1ec>)
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	4973      	ldr	r1, [pc, #460]	@ (800858c <ADC_Init+0x1ec>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80083d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6859      	ldr	r1, [r3, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	021a      	lsls	r2, r3, #8
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	430a      	orrs	r2, r1
 80083e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80083f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	6859      	ldr	r1, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	689a      	ldr	r2, [r3, #8]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	430a      	orrs	r2, r1
 8008406:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	689a      	ldr	r2, [r3, #8]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6899      	ldr	r1, [r3, #8]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	430a      	orrs	r2, r1
 8008428:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842e:	4a58      	ldr	r2, [pc, #352]	@ (8008590 <ADC_Init+0x1f0>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d022      	beq.n	800847a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689a      	ldr	r2, [r3, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008442:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6899      	ldr	r1, [r3, #8]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6899      	ldr	r1, [r3, #8]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	609a      	str	r2, [r3, #8]
 8008478:	e00f      	b.n	800849a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689a      	ldr	r2, [r3, #8]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8008498:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689a      	ldr	r2, [r3, #8]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0202 	bic.w	r2, r2, #2
 80084a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6899      	ldr	r1, [r3, #8]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	005a      	lsls	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d01b      	beq.n	8008500 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80084e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6859      	ldr	r1, [r3, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f2:	3b01      	subs	r3, #1
 80084f4:	035a      	lsls	r2, r3, #13
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	605a      	str	r2, [r3, #4]
 80084fe:	e007      	b.n	8008510 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800850e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800851e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	3b01      	subs	r3, #1
 800852c:	051a      	lsls	r2, r3, #20
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	430a      	orrs	r2, r1
 8008534:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6899      	ldr	r1, [r3, #8]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008552:	025a      	lsls	r2, r3, #9
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	430a      	orrs	r2, r1
 800855a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800856a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6899      	ldr	r1, [r3, #8]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	029a      	lsls	r2, r3, #10
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	609a      	str	r2, [r3, #8]
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	40012300 	.word	0x40012300
 8008590:	0f000001 	.word	0x0f000001

08008594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085a4:	4b0b      	ldr	r3, [pc, #44]	@ (80085d4 <__NVIC_SetPriorityGrouping+0x40>)
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80085b0:	4013      	ands	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80085bc:	4b06      	ldr	r3, [pc, #24]	@ (80085d8 <__NVIC_SetPriorityGrouping+0x44>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085c2:	4a04      	ldr	r2, [pc, #16]	@ (80085d4 <__NVIC_SetPriorityGrouping+0x40>)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	60d3      	str	r3, [r2, #12]
}
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr
 80085d4:	e000ed00 	.word	0xe000ed00
 80085d8:	05fa0000 	.word	0x05fa0000

080085dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085e0:	4b04      	ldr	r3, [pc, #16]	@ (80085f4 <__NVIC_GetPriorityGrouping+0x18>)
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	0a1b      	lsrs	r3, r3, #8
 80085e6:	f003 0307 	and.w	r3, r3, #7
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr
 80085f4:	e000ed00 	.word	0xe000ed00

080085f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	4603      	mov	r3, r0
 8008600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008606:	2b00      	cmp	r3, #0
 8008608:	db0b      	blt.n	8008622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	f003 021f 	and.w	r2, r3, #31
 8008610:	4907      	ldr	r1, [pc, #28]	@ (8008630 <__NVIC_EnableIRQ+0x38>)
 8008612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008616:	095b      	lsrs	r3, r3, #5
 8008618:	2001      	movs	r0, #1
 800861a:	fa00 f202 	lsl.w	r2, r0, r2
 800861e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008622:	bf00      	nop
 8008624:	370c      	adds	r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr
 800862e:	bf00      	nop
 8008630:	e000e100 	.word	0xe000e100

08008634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	6039      	str	r1, [r7, #0]
 800863e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008644:	2b00      	cmp	r3, #0
 8008646:	db0a      	blt.n	800865e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	b2da      	uxtb	r2, r3
 800864c:	490c      	ldr	r1, [pc, #48]	@ (8008680 <__NVIC_SetPriority+0x4c>)
 800864e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008652:	0112      	lsls	r2, r2, #4
 8008654:	b2d2      	uxtb	r2, r2
 8008656:	440b      	add	r3, r1
 8008658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800865c:	e00a      	b.n	8008674 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	4908      	ldr	r1, [pc, #32]	@ (8008684 <__NVIC_SetPriority+0x50>)
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	f003 030f 	and.w	r3, r3, #15
 800866a:	3b04      	subs	r3, #4
 800866c:	0112      	lsls	r2, r2, #4
 800866e:	b2d2      	uxtb	r2, r2
 8008670:	440b      	add	r3, r1
 8008672:	761a      	strb	r2, [r3, #24]
}
 8008674:	bf00      	nop
 8008676:	370c      	adds	r7, #12
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	e000e100 	.word	0xe000e100
 8008684:	e000ed00 	.word	0xe000ed00

08008688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008688:	b480      	push	{r7}
 800868a:	b089      	sub	sp, #36	@ 0x24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f003 0307 	and.w	r3, r3, #7
 800869a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	f1c3 0307 	rsb	r3, r3, #7
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	bf28      	it	cs
 80086a6:	2304      	movcs	r3, #4
 80086a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	3304      	adds	r3, #4
 80086ae:	2b06      	cmp	r3, #6
 80086b0:	d902      	bls.n	80086b8 <NVIC_EncodePriority+0x30>
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	3b03      	subs	r3, #3
 80086b6:	e000      	b.n	80086ba <NVIC_EncodePriority+0x32>
 80086b8:	2300      	movs	r3, #0
 80086ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086bc:	f04f 32ff 	mov.w	r2, #4294967295
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	fa02 f303 	lsl.w	r3, r2, r3
 80086c6:	43da      	mvns	r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	401a      	ands	r2, r3
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086d0:	f04f 31ff 	mov.w	r1, #4294967295
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	fa01 f303 	lsl.w	r3, r1, r3
 80086da:	43d9      	mvns	r1, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086e0:	4313      	orrs	r3, r2
         );
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3724      	adds	r7, #36	@ 0x24
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
	...

080086f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	3b01      	subs	r3, #1
 80086fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008700:	d301      	bcc.n	8008706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008702:	2301      	movs	r3, #1
 8008704:	e00f      	b.n	8008726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008706:	4a0a      	ldr	r2, [pc, #40]	@ (8008730 <SysTick_Config+0x40>)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3b01      	subs	r3, #1
 800870c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800870e:	210f      	movs	r1, #15
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	f7ff ff8e 	bl	8008634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008718:	4b05      	ldr	r3, [pc, #20]	@ (8008730 <SysTick_Config+0x40>)
 800871a:	2200      	movs	r2, #0
 800871c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800871e:	4b04      	ldr	r3, [pc, #16]	@ (8008730 <SysTick_Config+0x40>)
 8008720:	2207      	movs	r2, #7
 8008722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	e000e010 	.word	0xe000e010

08008734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7ff ff29 	bl	8008594 <__NVIC_SetPriorityGrouping>
}
 8008742:	bf00      	nop
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800874a:	b580      	push	{r7, lr}
 800874c:	b086      	sub	sp, #24
 800874e:	af00      	add	r7, sp, #0
 8008750:	4603      	mov	r3, r0
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008758:	2300      	movs	r3, #0
 800875a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800875c:	f7ff ff3e 	bl	80085dc <__NVIC_GetPriorityGrouping>
 8008760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	68b9      	ldr	r1, [r7, #8]
 8008766:	6978      	ldr	r0, [r7, #20]
 8008768:	f7ff ff8e 	bl	8008688 <NVIC_EncodePriority>
 800876c:	4602      	mov	r2, r0
 800876e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008772:	4611      	mov	r1, r2
 8008774:	4618      	mov	r0, r3
 8008776:	f7ff ff5d 	bl	8008634 <__NVIC_SetPriority>
}
 800877a:	bf00      	nop
 800877c:	3718      	adds	r7, #24
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}

08008782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008782:	b580      	push	{r7, lr}
 8008784:	b082      	sub	sp, #8
 8008786:	af00      	add	r7, sp, #0
 8008788:	4603      	mov	r3, r0
 800878a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800878c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff ff31 	bl	80085f8 <__NVIC_EnableIRQ>
}
 8008796:	bf00      	nop
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f7ff ffa2 	bl	80086f0 <SysTick_Config>
 80087ac:	4603      	mov	r3, r0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80087c0:	2300      	movs	r3, #0
 80087c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80087c4:	f7ff fa88 	bl	8007cd8 <HAL_GetTick>
 80087c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d101      	bne.n	80087d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e099      	b.n	8008908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2202      	movs	r2, #2
 80087d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0201 	bic.w	r2, r2, #1
 80087f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80087f4:	e00f      	b.n	8008816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80087f6:	f7ff fa6f 	bl	8007cd8 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b05      	cmp	r3, #5
 8008802:	d908      	bls.n	8008816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2220      	movs	r2, #32
 8008808:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2203      	movs	r2, #3
 800880e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8008812:	2303      	movs	r3, #3
 8008814:	e078      	b.n	8008908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1e8      	bne.n	80087f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	4b38      	ldr	r3, [pc, #224]	@ (8008910 <HAL_DMA_Init+0x158>)
 8008830:	4013      	ands	r3, r2
 8008832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800884e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800885a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6a1b      	ldr	r3, [r3, #32]
 8008860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008862:	697a      	ldr	r2, [r7, #20]
 8008864:	4313      	orrs	r3, r2
 8008866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800886c:	2b04      	cmp	r3, #4
 800886e:	d107      	bne.n	8008880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008878:	4313      	orrs	r3, r2
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	695b      	ldr	r3, [r3, #20]
 800888e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f023 0307 	bic.w	r3, r3, #7
 8008896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	4313      	orrs	r3, r2
 80088a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	d117      	bne.n	80088da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00e      	beq.n	80088da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 fa69 	bl	8008d94 <DMA_CheckFifoParam>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d008      	beq.n	80088da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2240      	movs	r2, #64	@ 0x40
 80088cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80088d6:	2301      	movs	r3, #1
 80088d8:	e016      	b.n	8008908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fa20 	bl	8008d28 <DMA_CalcBaseAndBitshift>
 80088e8:	4603      	mov	r3, r0
 80088ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088f0:	223f      	movs	r2, #63	@ 0x3f
 80088f2:	409a      	lsls	r2, r3
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3718      	adds	r7, #24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}
 8008910:	f010803f 	.word	0xf010803f

08008914 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e050      	b.n	80089c8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b02      	cmp	r3, #2
 8008930:	d101      	bne.n	8008936 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8008932:	2302      	movs	r3, #2
 8008934:	e048      	b.n	80089c8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0201 	bic.w	r2, r2, #1
 8008944:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2200      	movs	r2, #0
 800894c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2200      	movs	r2, #0
 8008954:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2200      	movs	r2, #0
 800895c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	2200      	movs	r2, #0
 8008964:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2200      	movs	r2, #0
 800896c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2221      	movs	r2, #33	@ 0x21
 8008974:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f9d6 	bl	8008d28 <DMA_CalcBaseAndBitshift>
 800897c:	4603      	mov	r3, r0
 800897e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008984:	223f      	movs	r2, #63	@ 0x3f
 8008986:	409a      	lsls	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d004      	beq.n	80089ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2280      	movs	r2, #128	@ 0x80
 80089e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e00c      	b.n	8008a08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2205      	movs	r2, #5
 80089f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f022 0201 	bic.w	r2, r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008a20:	4b8e      	ldr	r3, [pc, #568]	@ (8008c5c <HAL_DMA_IRQHandler+0x248>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a8e      	ldr	r2, [pc, #568]	@ (8008c60 <HAL_DMA_IRQHandler+0x24c>)
 8008a26:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2a:	0a9b      	lsrs	r3, r3, #10
 8008a2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a3e:	2208      	movs	r2, #8
 8008a40:	409a      	lsls	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4013      	ands	r3, r2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d01a      	beq.n	8008a80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 0304 	and.w	r3, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d013      	beq.n	8008a80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0204 	bic.w	r2, r2, #4
 8008a66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a6c:	2208      	movs	r2, #8
 8008a6e:	409a      	lsls	r2, r3
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a78:	f043 0201 	orr.w	r2, r3, #1
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a84:	2201      	movs	r2, #1
 8008a86:	409a      	lsls	r2, r3
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d012      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	695b      	ldr	r3, [r3, #20]
 8008a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	409a      	lsls	r2, r3
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aae:	f043 0202 	orr.w	r2, r3, #2
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aba:	2204      	movs	r2, #4
 8008abc:	409a      	lsls	r2, r3
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d012      	beq.n	8008aec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00b      	beq.n	8008aec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ad8:	2204      	movs	r2, #4
 8008ada:	409a      	lsls	r2, r3
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ae4:	f043 0204 	orr.w	r2, r3, #4
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008af0:	2210      	movs	r2, #16
 8008af2:	409a      	lsls	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4013      	ands	r3, r2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d043      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0308 	and.w	r3, r3, #8
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d03c      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b0e:	2210      	movs	r2, #16
 8008b10:	409a      	lsls	r2, r3
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d018      	beq.n	8008b56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d108      	bne.n	8008b44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d024      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	4798      	blx	r3
 8008b42:	e01f      	b.n	8008b84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01b      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	4798      	blx	r3
 8008b54:	e016      	b.n	8008b84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d107      	bne.n	8008b74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f022 0208 	bic.w	r2, r2, #8
 8008b72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b88:	2220      	movs	r2, #32
 8008b8a:	409a      	lsls	r2, r3
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	4013      	ands	r3, r2
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 808f 	beq.w	8008cb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f003 0310 	and.w	r3, r3, #16
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 8087 	beq.w	8008cb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008baa:	2220      	movs	r2, #32
 8008bac:	409a      	lsls	r2, r3
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b05      	cmp	r3, #5
 8008bbc:	d136      	bne.n	8008c2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f022 0216 	bic.w	r2, r2, #22
 8008bcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	695a      	ldr	r2, [r3, #20]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008bdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d103      	bne.n	8008bee <HAL_DMA_IRQHandler+0x1da>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d007      	beq.n	8008bfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f022 0208 	bic.w	r2, r2, #8
 8008bfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c02:	223f      	movs	r2, #63	@ 0x3f
 8008c04:	409a      	lsls	r2, r3
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d07e      	beq.n	8008d20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	4798      	blx	r3
        }
        return;
 8008c2a:	e079      	b.n	8008d20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d01d      	beq.n	8008c76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10d      	bne.n	8008c64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d031      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	4798      	blx	r3
 8008c58:	e02c      	b.n	8008cb4 <HAL_DMA_IRQHandler+0x2a0>
 8008c5a:	bf00      	nop
 8008c5c:	20004ed0 	.word	0x20004ed0
 8008c60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d023      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	4798      	blx	r3
 8008c74:	e01e      	b.n	8008cb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10f      	bne.n	8008ca4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f022 0210 	bic.w	r2, r2, #16
 8008c92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d032      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d022      	beq.n	8008d0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2205      	movs	r2, #5
 8008ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f022 0201 	bic.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	60bb      	str	r3, [r7, #8]
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d307      	bcc.n	8008cfc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1f2      	bne.n	8008ce0 <HAL_DMA_IRQHandler+0x2cc>
 8008cfa:	e000      	b.n	8008cfe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008cfc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d005      	beq.n	8008d22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	4798      	blx	r3
 8008d1e:	e000      	b.n	8008d22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008d20:	bf00      	nop
    }
  }
}
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	3b10      	subs	r3, #16
 8008d38:	4a13      	ldr	r2, [pc, #76]	@ (8008d88 <DMA_CalcBaseAndBitshift+0x60>)
 8008d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3e:	091b      	lsrs	r3, r3, #4
 8008d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008d42:	4a12      	ldr	r2, [pc, #72]	@ (8008d8c <DMA_CalcBaseAndBitshift+0x64>)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4413      	add	r3, r2
 8008d48:	781b      	ldrb	r3, [r3, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b03      	cmp	r3, #3
 8008d54:	d908      	bls.n	8008d68 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d90 <DMA_CalcBaseAndBitshift+0x68>)
 8008d5e:	4013      	ands	r3, r2
 8008d60:	1d1a      	adds	r2, r3, #4
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	659a      	str	r2, [r3, #88]	@ 0x58
 8008d66:	e006      	b.n	8008d76 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	4b08      	ldr	r3, [pc, #32]	@ (8008d90 <DMA_CalcBaseAndBitshift+0x68>)
 8008d70:	4013      	ands	r3, r2
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	aaaaaaab 	.word	0xaaaaaaab
 8008d8c:	0801a2ec 	.word	0x0801a2ec
 8008d90:	fffffc00 	.word	0xfffffc00

08008d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d11f      	bne.n	8008dee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d856      	bhi.n	8008e62 <DMA_CheckFifoParam+0xce>
 8008db4:	a201      	add	r2, pc, #4	@ (adr r2, 8008dbc <DMA_CheckFifoParam+0x28>)
 8008db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dba:	bf00      	nop
 8008dbc:	08008dcd 	.word	0x08008dcd
 8008dc0:	08008ddf 	.word	0x08008ddf
 8008dc4:	08008dcd 	.word	0x08008dcd
 8008dc8:	08008e63 	.word	0x08008e63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d046      	beq.n	8008e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ddc:	e043      	b.n	8008e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008de6:	d140      	bne.n	8008e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008dec:	e03d      	b.n	8008e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008df6:	d121      	bne.n	8008e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d837      	bhi.n	8008e6e <DMA_CheckFifoParam+0xda>
 8008dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008e04 <DMA_CheckFifoParam+0x70>)
 8008e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e04:	08008e15 	.word	0x08008e15
 8008e08:	08008e1b 	.word	0x08008e1b
 8008e0c:	08008e15 	.word	0x08008e15
 8008e10:	08008e2d 	.word	0x08008e2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
      break;
 8008e18:	e030      	b.n	8008e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d025      	beq.n	8008e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e2a:	e022      	b.n	8008e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008e34:	d11f      	bne.n	8008e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
 8008e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008e3a:	e01c      	b.n	8008e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d903      	bls.n	8008e4a <DMA_CheckFifoParam+0xb6>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b03      	cmp	r3, #3
 8008e46:	d003      	beq.n	8008e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008e48:	e018      	b.n	8008e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e4e:	e015      	b.n	8008e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00e      	beq.n	8008e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e60:	e00b      	b.n	8008e7a <DMA_CheckFifoParam+0xe6>
      break;
 8008e62:	bf00      	nop
 8008e64:	e00a      	b.n	8008e7c <DMA_CheckFifoParam+0xe8>
      break;
 8008e66:	bf00      	nop
 8008e68:	e008      	b.n	8008e7c <DMA_CheckFifoParam+0xe8>
      break;
 8008e6a:	bf00      	nop
 8008e6c:	e006      	b.n	8008e7c <DMA_CheckFifoParam+0xe8>
      break;
 8008e6e:	bf00      	nop
 8008e70:	e004      	b.n	8008e7c <DMA_CheckFifoParam+0xe8>
      break;
 8008e72:	bf00      	nop
 8008e74:	e002      	b.n	8008e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8008e76:	bf00      	nop
 8008e78:	e000      	b.n	8008e7c <DMA_CheckFifoParam+0xe8>
      break;
 8008e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3714      	adds	r7, #20
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop

08008e8c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e039      	b.n	8008f12 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d106      	bne.n	8008eb8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7fa fa54 	bl	8003360 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008edc:	f023 0107 	bic.w	r1, r3, #7
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	689a      	ldr	r2, [r3, #8]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8008f1c <HAL_DMA2D_Init+0x90>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	68d1      	ldr	r1, [r2, #12]
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	6812      	ldr	r2, [r2, #0]
 8008efe:	430b      	orrs	r3, r1
 8008f00:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	ffffc000 	.word	0xffffc000

08008f20 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_DMA2D_Start+0x1c>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e018      	b.n	8008f6e <HAL_DMA2D_Start+0x4e>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	9300      	str	r3, [sp, #0]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	68b9      	ldr	r1, [r7, #8]
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	f000 f988 	bl	800926c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f042 0201 	orr.w	r2, r2, #1
 8008f6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008f6c:	2300      	movs	r3, #0
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8008f76:	b580      	push	{r7, lr}
 8008f78:	b086      	sub	sp, #24
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8008f80:	2300      	movs	r3, #0
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0301 	and.w	r3, r3, #1
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d056      	beq.n	8009040 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f92:	f7fe fea1 	bl	8007cd8 <HAL_GetTick>
 8008f96:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8008f98:	e04b      	b.n	8009032 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d023      	beq.n	8008ff4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f003 0320 	and.w	r3, r3, #32
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d005      	beq.n	8008fc2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fba:	f043 0202 	orr.w	r2, r3, #2
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d005      	beq.n	8008fd8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fd0:	f043 0201 	orr.w	r2, r3, #1
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2221      	movs	r2, #33	@ 0x21
 8008fde:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2204      	movs	r2, #4
 8008fe4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	e0a5      	b.n	8009140 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffa:	d01a      	beq.n	8009032 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ffc:	f7fe fe6c 	bl	8007cd8 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	429a      	cmp	r2, r3
 800900a:	d302      	bcc.n	8009012 <HAL_DMA2D_PollForTransfer+0x9c>
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d10f      	bne.n	8009032 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009016:	f043 0220 	orr.w	r2, r3, #32
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2203      	movs	r2, #3
 8009022:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e086      	b.n	8009140 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f003 0302 	and.w	r3, r3, #2
 800903c:	2b00      	cmp	r3, #0
 800903e:	d0ac      	beq.n	8008f9a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009052:	f003 0320 	and.w	r3, r3, #32
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	4313      	orrs	r3, r2
 800905a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d061      	beq.n	8009126 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8009062:	f7fe fe39 	bl	8007cd8 <HAL_GetTick>
 8009066:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8009068:	e056      	b.n	8009118 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8009078:	2b00      	cmp	r3, #0
 800907a:	d02e      	beq.n	80090da <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f003 0308 	and.w	r3, r3, #8
 8009082:	2b00      	cmp	r3, #0
 8009084:	d005      	beq.n	8009092 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800908a:	f043 0204 	orr.w	r2, r3, #4
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f003 0320 	and.w	r3, r3, #32
 8009098:	2b00      	cmp	r3, #0
 800909a:	d005      	beq.n	80090a8 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090a0:	f043 0202 	orr.w	r2, r3, #2
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d005      	beq.n	80090be <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b6:	f043 0201 	orr.w	r2, r3, #1
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2229      	movs	r2, #41	@ 0x29
 80090c4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2204      	movs	r2, #4
 80090ca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 80090d6:	2301      	movs	r3, #1
 80090d8:	e032      	b.n	8009140 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e0:	d01a      	beq.n	8009118 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80090e2:	f7fe fdf9 	bl	8007cd8 <HAL_GetTick>
 80090e6:	4602      	mov	r2, r0
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d302      	bcc.n	80090f8 <HAL_DMA2D_PollForTransfer+0x182>
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10f      	bne.n	8009118 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090fc:	f043 0220 	orr.w	r2, r3, #32
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2203      	movs	r2, #3
 8009108:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e013      	b.n	8009140 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f003 0310 	and.w	r3, r3, #16
 8009122:	2b00      	cmp	r3, #0
 8009124:	d0a1      	beq.n	800906a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2212      	movs	r2, #18
 800912c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009160:	2b01      	cmp	r3, #1
 8009162:	d101      	bne.n	8009168 <HAL_DMA2D_ConfigLayer+0x20>
 8009164:	2302      	movs	r3, #2
 8009166:	e079      	b.n	800925c <HAL_DMA2D_ConfigLayer+0x114>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2202      	movs	r2, #2
 8009174:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	011b      	lsls	r3, r3, #4
 800917c:	3318      	adds	r3, #24
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	4413      	add	r3, r2
 8009182:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	041b      	lsls	r3, r3, #16
 800918e:	4313      	orrs	r3, r2
 8009190:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8009192:	4b35      	ldr	r3, [pc, #212]	@ (8009268 <HAL_DMA2D_ConfigLayer+0x120>)
 8009194:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	2b0a      	cmp	r3, #10
 800919c:	d003      	beq.n	80091a6 <HAL_DMA2D_ConfigLayer+0x5e>
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	2b09      	cmp	r3, #9
 80091a4:	d107      	bne.n	80091b6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]
 80091b4:	e005      	b.n	80091c2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	061b      	lsls	r3, r3, #24
 80091bc:	697a      	ldr	r2, [r7, #20]
 80091be:	4313      	orrs	r3, r2
 80091c0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d120      	bne.n	800920a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	43db      	mvns	r3, r3
 80091d2:	ea02 0103 	and.w	r1, r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	430a      	orrs	r2, r1
 80091de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	693a      	ldr	r2, [r7, #16]
 80091e6:	6812      	ldr	r2, [r2, #0]
 80091e8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	2b0a      	cmp	r3, #10
 80091f0:	d003      	beq.n	80091fa <HAL_DMA2D_ConfigLayer+0xb2>
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	2b09      	cmp	r3, #9
 80091f8:	d127      	bne.n	800924a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	68da      	ldr	r2, [r3, #12]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8009206:	629a      	str	r2, [r3, #40]	@ 0x28
 8009208:	e01f      	b.n	800924a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	69da      	ldr	r2, [r3, #28]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	43db      	mvns	r3, r3
 8009214:	ea02 0103 	and.w	r1, r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	430a      	orrs	r2, r1
 8009220:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	6812      	ldr	r2, [r2, #0]
 800922a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2b0a      	cmp	r3, #10
 8009232:	d003      	beq.n	800923c <HAL_DMA2D_ConfigLayer+0xf4>
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	2b09      	cmp	r3, #9
 800923a:	d106      	bne.n	800924a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	68da      	ldr	r2, [r3, #12]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8009248:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	371c      	adds	r7, #28
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	ff03000f 	.word	0xff03000f

0800926c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800926c:	b480      	push	{r7}
 800926e:	b08b      	sub	sp, #44	@ 0x2c
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	607a      	str	r2, [r7, #4]
 8009278:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009280:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	041a      	lsls	r2, r3, #16
 8009288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928a:	431a      	orrs	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80092a4:	d174      	bne.n	8009390 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80092ac:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80092b4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80092bc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d108      	bne.n	80092de <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	431a      	orrs	r2, r3
 80092d2:	6a3b      	ldr	r3, [r7, #32]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4313      	orrs	r3, r2
 80092da:	627b      	str	r3, [r7, #36]	@ 0x24
 80092dc:	e053      	b.n	8009386 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d106      	bne.n	80092f4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	69fb      	ldr	r3, [r7, #28]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	697a      	ldr	r2, [r7, #20]
 80092ee:	4313      	orrs	r3, r2
 80092f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80092f2:	e048      	b.n	8009386 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d111      	bne.n	8009320 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	0cdb      	lsrs	r3, r3, #19
 8009300:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	0a9b      	lsrs	r3, r3, #10
 8009306:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	08db      	lsrs	r3, r3, #3
 800930c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800930e:	69bb      	ldr	r3, [r7, #24]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	02db      	lsls	r3, r3, #11
 8009316:	4313      	orrs	r3, r2
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	4313      	orrs	r3, r2
 800931c:	627b      	str	r3, [r7, #36]	@ 0x24
 800931e:	e032      	b.n	8009386 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	2b03      	cmp	r3, #3
 8009326:	d117      	bne.n	8009358 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8009328:	6a3b      	ldr	r3, [r7, #32]
 800932a:	0fdb      	lsrs	r3, r3, #31
 800932c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	0cdb      	lsrs	r3, r3, #19
 8009332:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	0adb      	lsrs	r3, r3, #11
 8009338:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	08db      	lsrs	r3, r3, #3
 800933e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	029b      	lsls	r3, r3, #10
 8009348:	431a      	orrs	r2, r3
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	03db      	lsls	r3, r3, #15
 800934e:	4313      	orrs	r3, r2
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	4313      	orrs	r3, r2
 8009354:	627b      	str	r3, [r7, #36]	@ 0x24
 8009356:	e016      	b.n	8009386 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8009358:	6a3b      	ldr	r3, [r7, #32]
 800935a:	0f1b      	lsrs	r3, r3, #28
 800935c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	0d1b      	lsrs	r3, r3, #20
 8009362:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	0b1b      	lsrs	r3, r3, #12
 8009368:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	091b      	lsrs	r3, r3, #4
 800936e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8009370:	69bb      	ldr	r3, [r7, #24]
 8009372:	011a      	lsls	r2, r3, #4
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	021b      	lsls	r3, r3, #8
 8009378:	431a      	orrs	r2, r3
 800937a:	6a3b      	ldr	r3, [r7, #32]
 800937c:	031b      	lsls	r3, r3, #12
 800937e:	4313      	orrs	r3, r2
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4313      	orrs	r3, r2
 8009384:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800938c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800938e:	e003      	b.n	8009398 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	60da      	str	r2, [r3, #12]
}
 8009398:	bf00      	nop
 800939a:	372c      	adds	r7, #44	@ 0x2c
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b089      	sub	sp, #36	@ 0x24
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80093ae:	2300      	movs	r3, #0
 80093b0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80093b2:	2300      	movs	r3, #0
 80093b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80093b6:	2300      	movs	r3, #0
 80093b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80093ba:	2300      	movs	r3, #0
 80093bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80093be:	2300      	movs	r3, #0
 80093c0:	61fb      	str	r3, [r7, #28]
 80093c2:	e175      	b.n	80096b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80093c4:	2201      	movs	r2, #1
 80093c6:	69fb      	ldr	r3, [r7, #28]
 80093c8:	fa02 f303 	lsl.w	r3, r2, r3
 80093cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	697a      	ldr	r2, [r7, #20]
 80093d4:	4013      	ands	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	429a      	cmp	r2, r3
 80093de:	f040 8164 	bne.w	80096aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d005      	beq.n	80093fa <HAL_GPIO_Init+0x56>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	f003 0303 	and.w	r3, r3, #3
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d130      	bne.n	800945c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	2203      	movs	r2, #3
 8009406:	fa02 f303 	lsl.w	r3, r2, r3
 800940a:	43db      	mvns	r3, r3
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	4013      	ands	r3, r2
 8009410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	68da      	ldr	r2, [r3, #12]
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	005b      	lsls	r3, r3, #1
 800941a:	fa02 f303 	lsl.w	r3, r2, r3
 800941e:	69ba      	ldr	r2, [r7, #24]
 8009420:	4313      	orrs	r3, r2
 8009422:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	69ba      	ldr	r2, [r7, #24]
 8009428:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009430:	2201      	movs	r2, #1
 8009432:	69fb      	ldr	r3, [r7, #28]
 8009434:	fa02 f303 	lsl.w	r3, r2, r3
 8009438:	43db      	mvns	r3, r3
 800943a:	69ba      	ldr	r2, [r7, #24]
 800943c:	4013      	ands	r3, r2
 800943e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	091b      	lsrs	r3, r3, #4
 8009446:	f003 0201 	and.w	r2, r3, #1
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	fa02 f303 	lsl.w	r3, r2, r3
 8009450:	69ba      	ldr	r2, [r7, #24]
 8009452:	4313      	orrs	r3, r2
 8009454:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	69ba      	ldr	r2, [r7, #24]
 800945a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	2b03      	cmp	r3, #3
 8009466:	d017      	beq.n	8009498 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	005b      	lsls	r3, r3, #1
 8009472:	2203      	movs	r2, #3
 8009474:	fa02 f303 	lsl.w	r3, r2, r3
 8009478:	43db      	mvns	r3, r3
 800947a:	69ba      	ldr	r2, [r7, #24]
 800947c:	4013      	ands	r3, r2
 800947e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	689a      	ldr	r2, [r3, #8]
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	005b      	lsls	r3, r3, #1
 8009488:	fa02 f303 	lsl.w	r3, r2, r3
 800948c:	69ba      	ldr	r2, [r7, #24]
 800948e:	4313      	orrs	r3, r2
 8009490:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	69ba      	ldr	r2, [r7, #24]
 8009496:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	f003 0303 	and.w	r3, r3, #3
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d123      	bne.n	80094ec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80094a4:	69fb      	ldr	r3, [r7, #28]
 80094a6:	08da      	lsrs	r2, r3, #3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	3208      	adds	r2, #8
 80094ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	f003 0307 	and.w	r3, r3, #7
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	220f      	movs	r2, #15
 80094bc:	fa02 f303 	lsl.w	r3, r2, r3
 80094c0:	43db      	mvns	r3, r3
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	4013      	ands	r3, r2
 80094c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	f003 0307 	and.w	r3, r3, #7
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	fa02 f303 	lsl.w	r3, r2, r3
 80094d8:	69ba      	ldr	r2, [r7, #24]
 80094da:	4313      	orrs	r3, r2
 80094dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	08da      	lsrs	r2, r3, #3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	3208      	adds	r2, #8
 80094e6:	69b9      	ldr	r1, [r7, #24]
 80094e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	2203      	movs	r2, #3
 80094f8:	fa02 f303 	lsl.w	r3, r2, r3
 80094fc:	43db      	mvns	r3, r3
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	4013      	ands	r3, r2
 8009502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f003 0203 	and.w	r2, r3, #3
 800950c:	69fb      	ldr	r3, [r7, #28]
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	fa02 f303 	lsl.w	r3, r2, r3
 8009514:	69ba      	ldr	r2, [r7, #24]
 8009516:	4313      	orrs	r3, r2
 8009518:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	69ba      	ldr	r2, [r7, #24]
 800951e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 80be 	beq.w	80096aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800952e:	4b66      	ldr	r3, [pc, #408]	@ (80096c8 <HAL_GPIO_Init+0x324>)
 8009530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009532:	4a65      	ldr	r2, [pc, #404]	@ (80096c8 <HAL_GPIO_Init+0x324>)
 8009534:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009538:	6453      	str	r3, [r2, #68]	@ 0x44
 800953a:	4b63      	ldr	r3, [pc, #396]	@ (80096c8 <HAL_GPIO_Init+0x324>)
 800953c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800953e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009542:	60fb      	str	r3, [r7, #12]
 8009544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8009546:	4a61      	ldr	r2, [pc, #388]	@ (80096cc <HAL_GPIO_Init+0x328>)
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	089b      	lsrs	r3, r3, #2
 800954c:	3302      	adds	r3, #2
 800954e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009552:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	f003 0303 	and.w	r3, r3, #3
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	220f      	movs	r2, #15
 800955e:	fa02 f303 	lsl.w	r3, r2, r3
 8009562:	43db      	mvns	r3, r3
 8009564:	69ba      	ldr	r2, [r7, #24]
 8009566:	4013      	ands	r3, r2
 8009568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a58      	ldr	r2, [pc, #352]	@ (80096d0 <HAL_GPIO_Init+0x32c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d037      	beq.n	80095e2 <HAL_GPIO_Init+0x23e>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4a57      	ldr	r2, [pc, #348]	@ (80096d4 <HAL_GPIO_Init+0x330>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d031      	beq.n	80095de <HAL_GPIO_Init+0x23a>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a56      	ldr	r2, [pc, #344]	@ (80096d8 <HAL_GPIO_Init+0x334>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d02b      	beq.n	80095da <HAL_GPIO_Init+0x236>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a55      	ldr	r2, [pc, #340]	@ (80096dc <HAL_GPIO_Init+0x338>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d025      	beq.n	80095d6 <HAL_GPIO_Init+0x232>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a54      	ldr	r2, [pc, #336]	@ (80096e0 <HAL_GPIO_Init+0x33c>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d01f      	beq.n	80095d2 <HAL_GPIO_Init+0x22e>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a53      	ldr	r2, [pc, #332]	@ (80096e4 <HAL_GPIO_Init+0x340>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d019      	beq.n	80095ce <HAL_GPIO_Init+0x22a>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4a52      	ldr	r2, [pc, #328]	@ (80096e8 <HAL_GPIO_Init+0x344>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d013      	beq.n	80095ca <HAL_GPIO_Init+0x226>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a51      	ldr	r2, [pc, #324]	@ (80096ec <HAL_GPIO_Init+0x348>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d00d      	beq.n	80095c6 <HAL_GPIO_Init+0x222>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a50      	ldr	r2, [pc, #320]	@ (80096f0 <HAL_GPIO_Init+0x34c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d007      	beq.n	80095c2 <HAL_GPIO_Init+0x21e>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	4a4f      	ldr	r2, [pc, #316]	@ (80096f4 <HAL_GPIO_Init+0x350>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d101      	bne.n	80095be <HAL_GPIO_Init+0x21a>
 80095ba:	2309      	movs	r3, #9
 80095bc:	e012      	b.n	80095e4 <HAL_GPIO_Init+0x240>
 80095be:	230a      	movs	r3, #10
 80095c0:	e010      	b.n	80095e4 <HAL_GPIO_Init+0x240>
 80095c2:	2308      	movs	r3, #8
 80095c4:	e00e      	b.n	80095e4 <HAL_GPIO_Init+0x240>
 80095c6:	2307      	movs	r3, #7
 80095c8:	e00c      	b.n	80095e4 <HAL_GPIO_Init+0x240>
 80095ca:	2306      	movs	r3, #6
 80095cc:	e00a      	b.n	80095e4 <HAL_GPIO_Init+0x240>
 80095ce:	2305      	movs	r3, #5
 80095d0:	e008      	b.n	80095e4 <HAL_GPIO_Init+0x240>
 80095d2:	2304      	movs	r3, #4
 80095d4:	e006      	b.n	80095e4 <HAL_GPIO_Init+0x240>
 80095d6:	2303      	movs	r3, #3
 80095d8:	e004      	b.n	80095e4 <HAL_GPIO_Init+0x240>
 80095da:	2302      	movs	r3, #2
 80095dc:	e002      	b.n	80095e4 <HAL_GPIO_Init+0x240>
 80095de:	2301      	movs	r3, #1
 80095e0:	e000      	b.n	80095e4 <HAL_GPIO_Init+0x240>
 80095e2:	2300      	movs	r3, #0
 80095e4:	69fa      	ldr	r2, [r7, #28]
 80095e6:	f002 0203 	and.w	r2, r2, #3
 80095ea:	0092      	lsls	r2, r2, #2
 80095ec:	4093      	lsls	r3, r2
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80095f4:	4935      	ldr	r1, [pc, #212]	@ (80096cc <HAL_GPIO_Init+0x328>)
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	089b      	lsrs	r3, r3, #2
 80095fa:	3302      	adds	r3, #2
 80095fc:	69ba      	ldr	r2, [r7, #24]
 80095fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009602:	4b3d      	ldr	r3, [pc, #244]	@ (80096f8 <HAL_GPIO_Init+0x354>)
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	43db      	mvns	r3, r3
 800960c:	69ba      	ldr	r2, [r7, #24]
 800960e:	4013      	ands	r3, r2
 8009610:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800961e:	69ba      	ldr	r2, [r7, #24]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	4313      	orrs	r3, r2
 8009624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009626:	4a34      	ldr	r2, [pc, #208]	@ (80096f8 <HAL_GPIO_Init+0x354>)
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800962c:	4b32      	ldr	r3, [pc, #200]	@ (80096f8 <HAL_GPIO_Init+0x354>)
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	43db      	mvns	r3, r3
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	4013      	ands	r3, r2
 800963a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009644:	2b00      	cmp	r3, #0
 8009646:	d003      	beq.n	8009650 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	4313      	orrs	r3, r2
 800964e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009650:	4a29      	ldr	r2, [pc, #164]	@ (80096f8 <HAL_GPIO_Init+0x354>)
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009656:	4b28      	ldr	r3, [pc, #160]	@ (80096f8 <HAL_GPIO_Init+0x354>)
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	43db      	mvns	r3, r3
 8009660:	69ba      	ldr	r2, [r7, #24]
 8009662:	4013      	ands	r3, r2
 8009664:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d003      	beq.n	800967a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	693b      	ldr	r3, [r7, #16]
 8009676:	4313      	orrs	r3, r2
 8009678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800967a:	4a1f      	ldr	r2, [pc, #124]	@ (80096f8 <HAL_GPIO_Init+0x354>)
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009680:	4b1d      	ldr	r3, [pc, #116]	@ (80096f8 <HAL_GPIO_Init+0x354>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	43db      	mvns	r3, r3
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	4013      	ands	r3, r2
 800968e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80096a4:	4a14      	ldr	r2, [pc, #80]	@ (80096f8 <HAL_GPIO_Init+0x354>)
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	3301      	adds	r3, #1
 80096ae:	61fb      	str	r3, [r7, #28]
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	2b0f      	cmp	r3, #15
 80096b4:	f67f ae86 	bls.w	80093c4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80096b8:	bf00      	nop
 80096ba:	bf00      	nop
 80096bc:	3724      	adds	r7, #36	@ 0x24
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	40023800 	.word	0x40023800
 80096cc:	40013800 	.word	0x40013800
 80096d0:	40020000 	.word	0x40020000
 80096d4:	40020400 	.word	0x40020400
 80096d8:	40020800 	.word	0x40020800
 80096dc:	40020c00 	.word	0x40020c00
 80096e0:	40021000 	.word	0x40021000
 80096e4:	40021400 	.word	0x40021400
 80096e8:	40021800 	.word	0x40021800
 80096ec:	40021c00 	.word	0x40021c00
 80096f0:	40022000 	.word	0x40022000
 80096f4:	40022400 	.word	0x40022400
 80096f8:	40013c00 	.word	0x40013c00

080096fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8009706:	2300      	movs	r3, #0
 8009708:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800970a:	2300      	movs	r3, #0
 800970c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800970e:	2300      	movs	r3, #0
 8009710:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8009712:	2300      	movs	r3, #0
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	e0d9      	b.n	80098cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8009718:	2201      	movs	r2, #1
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	fa02 f303 	lsl.w	r3, r2, r3
 8009720:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8009722:	683a      	ldr	r2, [r7, #0]
 8009724:	693b      	ldr	r3, [r7, #16]
 8009726:	4013      	ands	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	429a      	cmp	r2, r3
 8009730:	f040 80c9 	bne.w	80098c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8009734:	4a6b      	ldr	r2, [pc, #428]	@ (80098e4 <HAL_GPIO_DeInit+0x1e8>)
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	089b      	lsrs	r3, r3, #2
 800973a:	3302      	adds	r3, #2
 800973c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009740:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f003 0303 	and.w	r3, r3, #3
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	220f      	movs	r2, #15
 800974c:	fa02 f303 	lsl.w	r3, r2, r3
 8009750:	68ba      	ldr	r2, [r7, #8]
 8009752:	4013      	ands	r3, r2
 8009754:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a63      	ldr	r2, [pc, #396]	@ (80098e8 <HAL_GPIO_DeInit+0x1ec>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d037      	beq.n	80097ce <HAL_GPIO_DeInit+0xd2>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a62      	ldr	r2, [pc, #392]	@ (80098ec <HAL_GPIO_DeInit+0x1f0>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d031      	beq.n	80097ca <HAL_GPIO_DeInit+0xce>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a61      	ldr	r2, [pc, #388]	@ (80098f0 <HAL_GPIO_DeInit+0x1f4>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d02b      	beq.n	80097c6 <HAL_GPIO_DeInit+0xca>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a60      	ldr	r2, [pc, #384]	@ (80098f4 <HAL_GPIO_DeInit+0x1f8>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d025      	beq.n	80097c2 <HAL_GPIO_DeInit+0xc6>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a5f      	ldr	r2, [pc, #380]	@ (80098f8 <HAL_GPIO_DeInit+0x1fc>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d01f      	beq.n	80097be <HAL_GPIO_DeInit+0xc2>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a5e      	ldr	r2, [pc, #376]	@ (80098fc <HAL_GPIO_DeInit+0x200>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d019      	beq.n	80097ba <HAL_GPIO_DeInit+0xbe>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a5d      	ldr	r2, [pc, #372]	@ (8009900 <HAL_GPIO_DeInit+0x204>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d013      	beq.n	80097b6 <HAL_GPIO_DeInit+0xba>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a5c      	ldr	r2, [pc, #368]	@ (8009904 <HAL_GPIO_DeInit+0x208>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00d      	beq.n	80097b2 <HAL_GPIO_DeInit+0xb6>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a5b      	ldr	r2, [pc, #364]	@ (8009908 <HAL_GPIO_DeInit+0x20c>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d007      	beq.n	80097ae <HAL_GPIO_DeInit+0xb2>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a5a      	ldr	r2, [pc, #360]	@ (800990c <HAL_GPIO_DeInit+0x210>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d101      	bne.n	80097aa <HAL_GPIO_DeInit+0xae>
 80097a6:	2309      	movs	r3, #9
 80097a8:	e012      	b.n	80097d0 <HAL_GPIO_DeInit+0xd4>
 80097aa:	230a      	movs	r3, #10
 80097ac:	e010      	b.n	80097d0 <HAL_GPIO_DeInit+0xd4>
 80097ae:	2308      	movs	r3, #8
 80097b0:	e00e      	b.n	80097d0 <HAL_GPIO_DeInit+0xd4>
 80097b2:	2307      	movs	r3, #7
 80097b4:	e00c      	b.n	80097d0 <HAL_GPIO_DeInit+0xd4>
 80097b6:	2306      	movs	r3, #6
 80097b8:	e00a      	b.n	80097d0 <HAL_GPIO_DeInit+0xd4>
 80097ba:	2305      	movs	r3, #5
 80097bc:	e008      	b.n	80097d0 <HAL_GPIO_DeInit+0xd4>
 80097be:	2304      	movs	r3, #4
 80097c0:	e006      	b.n	80097d0 <HAL_GPIO_DeInit+0xd4>
 80097c2:	2303      	movs	r3, #3
 80097c4:	e004      	b.n	80097d0 <HAL_GPIO_DeInit+0xd4>
 80097c6:	2302      	movs	r3, #2
 80097c8:	e002      	b.n	80097d0 <HAL_GPIO_DeInit+0xd4>
 80097ca:	2301      	movs	r3, #1
 80097cc:	e000      	b.n	80097d0 <HAL_GPIO_DeInit+0xd4>
 80097ce:	2300      	movs	r3, #0
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	f002 0203 	and.w	r2, r2, #3
 80097d6:	0092      	lsls	r2, r2, #2
 80097d8:	4093      	lsls	r3, r2
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d132      	bne.n	8009846 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80097e0:	4b4b      	ldr	r3, [pc, #300]	@ (8009910 <HAL_GPIO_DeInit+0x214>)
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	43db      	mvns	r3, r3
 80097e8:	4949      	ldr	r1, [pc, #292]	@ (8009910 <HAL_GPIO_DeInit+0x214>)
 80097ea:	4013      	ands	r3, r2
 80097ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80097ee:	4b48      	ldr	r3, [pc, #288]	@ (8009910 <HAL_GPIO_DeInit+0x214>)
 80097f0:	685a      	ldr	r2, [r3, #4]
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	43db      	mvns	r3, r3
 80097f6:	4946      	ldr	r1, [pc, #280]	@ (8009910 <HAL_GPIO_DeInit+0x214>)
 80097f8:	4013      	ands	r3, r2
 80097fa:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80097fc:	4b44      	ldr	r3, [pc, #272]	@ (8009910 <HAL_GPIO_DeInit+0x214>)
 80097fe:	68da      	ldr	r2, [r3, #12]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	43db      	mvns	r3, r3
 8009804:	4942      	ldr	r1, [pc, #264]	@ (8009910 <HAL_GPIO_DeInit+0x214>)
 8009806:	4013      	ands	r3, r2
 8009808:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800980a:	4b41      	ldr	r3, [pc, #260]	@ (8009910 <HAL_GPIO_DeInit+0x214>)
 800980c:	689a      	ldr	r2, [r3, #8]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	43db      	mvns	r3, r3
 8009812:	493f      	ldr	r1, [pc, #252]	@ (8009910 <HAL_GPIO_DeInit+0x214>)
 8009814:	4013      	ands	r3, r2
 8009816:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	f003 0303 	and.w	r3, r3, #3
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	220f      	movs	r2, #15
 8009822:	fa02 f303 	lsl.w	r3, r2, r3
 8009826:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8009828:	4a2e      	ldr	r2, [pc, #184]	@ (80098e4 <HAL_GPIO_DeInit+0x1e8>)
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	089b      	lsrs	r3, r3, #2
 800982e:	3302      	adds	r3, #2
 8009830:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	43da      	mvns	r2, r3
 8009838:	482a      	ldr	r0, [pc, #168]	@ (80098e4 <HAL_GPIO_DeInit+0x1e8>)
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	089b      	lsrs	r3, r3, #2
 800983e:	400a      	ands	r2, r1
 8009840:	3302      	adds	r3, #2
 8009842:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	005b      	lsls	r3, r3, #1
 800984e:	2103      	movs	r1, #3
 8009850:	fa01 f303 	lsl.w	r3, r1, r3
 8009854:	43db      	mvns	r3, r3
 8009856:	401a      	ands	r2, r3
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	08da      	lsrs	r2, r3, #3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	3208      	adds	r2, #8
 8009864:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f003 0307 	and.w	r3, r3, #7
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	220f      	movs	r2, #15
 8009872:	fa02 f303 	lsl.w	r3, r2, r3
 8009876:	43db      	mvns	r3, r3
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	08d2      	lsrs	r2, r2, #3
 800987c:	4019      	ands	r1, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	3208      	adds	r2, #8
 8009882:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	005b      	lsls	r3, r3, #1
 800988e:	2103      	movs	r1, #3
 8009890:	fa01 f303 	lsl.w	r3, r1, r3
 8009894:	43db      	mvns	r3, r3
 8009896:	401a      	ands	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	2101      	movs	r1, #1
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	fa01 f303 	lsl.w	r3, r1, r3
 80098a8:	43db      	mvns	r3, r3
 80098aa:	401a      	ands	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	005b      	lsls	r3, r3, #1
 80098b8:	2103      	movs	r1, #3
 80098ba:	fa01 f303 	lsl.w	r3, r1, r3
 80098be:	43db      	mvns	r3, r3
 80098c0:	401a      	ands	r2, r3
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	3301      	adds	r3, #1
 80098ca:	617b      	str	r3, [r7, #20]
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2b0f      	cmp	r3, #15
 80098d0:	f67f af22 	bls.w	8009718 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	40013800 	.word	0x40013800
 80098e8:	40020000 	.word	0x40020000
 80098ec:	40020400 	.word	0x40020400
 80098f0:	40020800 	.word	0x40020800
 80098f4:	40020c00 	.word	0x40020c00
 80098f8:	40021000 	.word	0x40021000
 80098fc:	40021400 	.word	0x40021400
 8009900:	40021800 	.word	0x40021800
 8009904:	40021c00 	.word	0x40021c00
 8009908:	40022000 	.word	0x40022000
 800990c:	40022400 	.word	0x40022400
 8009910:	40013c00 	.word	0x40013c00

08009914 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	691a      	ldr	r2, [r3, #16]
 8009924:	887b      	ldrh	r3, [r7, #2]
 8009926:	4013      	ands	r3, r2
 8009928:	2b00      	cmp	r3, #0
 800992a:	d002      	beq.n	8009932 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800992c:	2301      	movs	r3, #1
 800992e:	73fb      	strb	r3, [r7, #15]
 8009930:	e001      	b.n	8009936 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009936:	7bfb      	ldrb	r3, [r7, #15]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	807b      	strh	r3, [r7, #2]
 8009950:	4613      	mov	r3, r2
 8009952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009954:	787b      	ldrb	r3, [r7, #1]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800995a:	887a      	ldrh	r2, [r7, #2]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8009960:	e003      	b.n	800996a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8009962:	887b      	ldrh	r3, [r7, #2]
 8009964:	041a      	lsls	r2, r3, #16
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	619a      	str	r2, [r3, #24]
}
 800996a:	bf00      	nop
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
	...

08009978 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009982:	4b08      	ldr	r3, [pc, #32]	@ (80099a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009984:	695a      	ldr	r2, [r3, #20]
 8009986:	88fb      	ldrh	r3, [r7, #6]
 8009988:	4013      	ands	r3, r2
 800998a:	2b00      	cmp	r3, #0
 800998c:	d006      	beq.n	800999c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800998e:	4a05      	ldr	r2, [pc, #20]	@ (80099a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009990:	88fb      	ldrh	r3, [r7, #6]
 8009992:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009994:	88fb      	ldrh	r3, [r7, #6]
 8009996:	4618      	mov	r0, r3
 8009998:	f7f9 f85e 	bl	8002a58 <HAL_GPIO_EXTI_Callback>
  }
}
 800999c:	bf00      	nop
 800999e:	3708      	adds	r7, #8
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	40013c00 	.word	0x40013c00

080099a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d101      	bne.n	80099ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80099b6:	2301      	movs	r3, #1
 80099b8:	e08b      	b.n	8009ad2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80099c0:	b2db      	uxtb	r3, r3
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d106      	bne.n	80099d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f7f9 ff9a 	bl	8003908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2224      	movs	r2, #36	@ 0x24
 80099d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f022 0201 	bic.w	r2, r2, #1
 80099ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685a      	ldr	r2, [r3, #4]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80099f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009a08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d107      	bne.n	8009a22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	689a      	ldr	r2, [r3, #8]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a1e:	609a      	str	r2, [r3, #8]
 8009a20:	e006      	b.n	8009a30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	689a      	ldr	r2, [r3, #8]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009a2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	68db      	ldr	r3, [r3, #12]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d108      	bne.n	8009a4a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009a46:	605a      	str	r2, [r3, #4]
 8009a48:	e007      	b.n	8009a5a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6859      	ldr	r1, [r3, #4]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	4b1d      	ldr	r3, [pc, #116]	@ (8009adc <HAL_I2C_Init+0x134>)
 8009a66:	430b      	orrs	r3, r1
 8009a68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68da      	ldr	r2, [r3, #12]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009a78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	691a      	ldr	r2, [r3, #16]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	695b      	ldr	r3, [r3, #20]
 8009a82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	430a      	orrs	r2, r1
 8009a92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	69d9      	ldr	r1, [r3, #28]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6a1a      	ldr	r2, [r3, #32]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0201 	orr.w	r2, r2, #1
 8009ab2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2220      	movs	r2, #32
 8009abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3708      	adds	r7, #8
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	02008000 	.word	0x02008000

08009ae0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e021      	b.n	8009b36 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2224      	movs	r2, #36	@ 0x24
 8009af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 0201 	bic.w	r2, r2, #1
 8009b08:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f7f9 ffa4 	bl	8003a58 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009b34:	2300      	movs	r3, #0
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af02      	add	r7, sp, #8
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	4608      	mov	r0, r1
 8009b4a:	4611      	mov	r1, r2
 8009b4c:	461a      	mov	r2, r3
 8009b4e:	4603      	mov	r3, r0
 8009b50:	817b      	strh	r3, [r7, #10]
 8009b52:	460b      	mov	r3, r1
 8009b54:	813b      	strh	r3, [r7, #8]
 8009b56:	4613      	mov	r3, r2
 8009b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	2b20      	cmp	r3, #32
 8009b64:	f040 80f9 	bne.w	8009d5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <HAL_I2C_Mem_Write+0x34>
 8009b6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d105      	bne.n	8009b80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b7a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e0ed      	b.n	8009d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d101      	bne.n	8009b8e <HAL_I2C_Mem_Write+0x4e>
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	e0e6      	b.n	8009d5c <HAL_I2C_Mem_Write+0x21c>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009b96:	f7fe f89f 	bl	8007cd8 <HAL_GetTick>
 8009b9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	9300      	str	r3, [sp, #0]
 8009ba0:	2319      	movs	r3, #25
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 fad1 	bl	800a150 <I2C_WaitOnFlagUntilTimeout>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d001      	beq.n	8009bb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e0d1      	b.n	8009d5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2221      	movs	r2, #33	@ 0x21
 8009bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2240      	movs	r2, #64	@ 0x40
 8009bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6a3a      	ldr	r2, [r7, #32]
 8009bd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009bd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009be0:	88f8      	ldrh	r0, [r7, #6]
 8009be2:	893a      	ldrh	r2, [r7, #8]
 8009be4:	8979      	ldrh	r1, [r7, #10]
 8009be6:	697b      	ldr	r3, [r7, #20]
 8009be8:	9301      	str	r3, [sp, #4]
 8009bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	4603      	mov	r3, r0
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 f9e1 	bl	8009fb8 <I2C_RequestMemoryWrite>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e0a9      	b.n	8009d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	2bff      	cmp	r3, #255	@ 0xff
 8009c10:	d90e      	bls.n	8009c30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	22ff      	movs	r2, #255	@ 0xff
 8009c16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	8979      	ldrh	r1, [r7, #10]
 8009c20:	2300      	movs	r3, #0
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	f000 fc55 	bl	800a4d8 <I2C_TransferConfig>
 8009c2e:	e00f      	b.n	8009c50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	8979      	ldrh	r1, [r7, #10]
 8009c42:	2300      	movs	r3, #0
 8009c44:	9300      	str	r3, [sp, #0]
 8009c46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 fc44 	bl	800a4d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c50:	697a      	ldr	r2, [r7, #20]
 8009c52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f000 fad4 	bl	800a202 <I2C_WaitOnTXISFlagUntilTimeout>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e07b      	b.n	8009d5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c68:	781a      	ldrb	r2, [r3, #0]
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c7e:	b29b      	uxth	r3, r3
 8009c80:	3b01      	subs	r3, #1
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c8c:	3b01      	subs	r3, #1
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d034      	beq.n	8009d08 <HAL_I2C_Mem_Write+0x1c8>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d130      	bne.n	8009d08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	9300      	str	r3, [sp, #0]
 8009caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cac:	2200      	movs	r2, #0
 8009cae:	2180      	movs	r1, #128	@ 0x80
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 fa4d 	bl	800a150 <I2C_WaitOnFlagUntilTimeout>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e04d      	b.n	8009d5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	2bff      	cmp	r3, #255	@ 0xff
 8009cc8:	d90e      	bls.n	8009ce8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	22ff      	movs	r2, #255	@ 0xff
 8009cce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	8979      	ldrh	r1, [r7, #10]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 fbf9 	bl	800a4d8 <I2C_TransferConfig>
 8009ce6:	e00f      	b.n	8009d08 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cf6:	b2da      	uxtb	r2, r3
 8009cf8:	8979      	ldrh	r1, [r7, #10]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009d02:	68f8      	ldr	r0, [r7, #12]
 8009d04:	f000 fbe8 	bl	800a4d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d19e      	bne.n	8009c50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 faba 	bl	800a290 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e01a      	b.n	8009d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6859      	ldr	r1, [r3, #4]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	4b0a      	ldr	r3, [pc, #40]	@ (8009d64 <HAL_I2C_Mem_Write+0x224>)
 8009d3a:	400b      	ands	r3, r1
 8009d3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	2220      	movs	r2, #32
 8009d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e000      	b.n	8009d5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009d5a:	2302      	movs	r3, #2
  }
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3718      	adds	r7, #24
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	fe00e800 	.word	0xfe00e800

08009d68 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b088      	sub	sp, #32
 8009d6c:	af02      	add	r7, sp, #8
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	4608      	mov	r0, r1
 8009d72:	4611      	mov	r1, r2
 8009d74:	461a      	mov	r2, r3
 8009d76:	4603      	mov	r3, r0
 8009d78:	817b      	strh	r3, [r7, #10]
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	813b      	strh	r3, [r7, #8]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b20      	cmp	r3, #32
 8009d8c:	f040 80fd 	bne.w	8009f8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d90:	6a3b      	ldr	r3, [r7, #32]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d002      	beq.n	8009d9c <HAL_I2C_Mem_Read+0x34>
 8009d96:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d105      	bne.n	8009da8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009da2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e0f1      	b.n	8009f8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d101      	bne.n	8009db6 <HAL_I2C_Mem_Read+0x4e>
 8009db2:	2302      	movs	r3, #2
 8009db4:	e0ea      	b.n	8009f8c <HAL_I2C_Mem_Read+0x224>
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009dbe:	f7fd ff8b 	bl	8007cd8 <HAL_GetTick>
 8009dc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	2319      	movs	r3, #25
 8009dca:	2201      	movs	r2, #1
 8009dcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f000 f9bd 	bl	800a150 <I2C_WaitOnFlagUntilTimeout>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d001      	beq.n	8009de0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e0d5      	b.n	8009f8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2222      	movs	r2, #34	@ 0x22
 8009de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2240      	movs	r2, #64	@ 0x40
 8009dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2200      	movs	r2, #0
 8009df4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6a3a      	ldr	r2, [r7, #32]
 8009dfa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009e00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009e08:	88f8      	ldrh	r0, [r7, #6]
 8009e0a:	893a      	ldrh	r2, [r7, #8]
 8009e0c:	8979      	ldrh	r1, [r7, #10]
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	9301      	str	r3, [sp, #4]
 8009e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	4603      	mov	r3, r0
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 f921 	bl	800a060 <I2C_RequestMemoryRead>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d005      	beq.n	8009e30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e0ad      	b.n	8009f8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	2bff      	cmp	r3, #255	@ 0xff
 8009e38:	d90e      	bls.n	8009e58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	8979      	ldrh	r1, [r7, #10]
 8009e48:	4b52      	ldr	r3, [pc, #328]	@ (8009f94 <HAL_I2C_Mem_Read+0x22c>)
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 fb41 	bl	800a4d8 <I2C_TransferConfig>
 8009e56:	e00f      	b.n	8009e78 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e66:	b2da      	uxtb	r2, r3
 8009e68:	8979      	ldrh	r1, [r7, #10]
 8009e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8009f94 <HAL_I2C_Mem_Read+0x22c>)
 8009e6c:	9300      	str	r3, [sp, #0]
 8009e6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e72:	68f8      	ldr	r0, [r7, #12]
 8009e74:	f000 fb30 	bl	800a4d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7e:	2200      	movs	r2, #0
 8009e80:	2104      	movs	r1, #4
 8009e82:	68f8      	ldr	r0, [r7, #12]
 8009e84:	f000 f964 	bl	800a150 <I2C_WaitOnFlagUntilTimeout>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d001      	beq.n	8009e92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e07c      	b.n	8009f8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e9c:	b2d2      	uxtb	r2, r2
 8009e9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ea4:	1c5a      	adds	r2, r3, #1
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	b29a      	uxth	r2, r3
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d034      	beq.n	8009f38 <HAL_I2C_Mem_Read+0x1d0>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d130      	bne.n	8009f38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009edc:	2200      	movs	r2, #0
 8009ede:	2180      	movs	r1, #128	@ 0x80
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 f935 	bl	800a150 <I2C_WaitOnFlagUntilTimeout>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	e04d      	b.n	8009f8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	2bff      	cmp	r3, #255	@ 0xff
 8009ef8:	d90e      	bls.n	8009f18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f04:	b2da      	uxtb	r2, r3
 8009f06:	8979      	ldrh	r1, [r7, #10]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009f10:	68f8      	ldr	r0, [r7, #12]
 8009f12:	f000 fae1 	bl	800a4d8 <I2C_TransferConfig>
 8009f16:	e00f      	b.n	8009f38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	8979      	ldrh	r1, [r7, #10]
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009f32:	68f8      	ldr	r0, [r7, #12]
 8009f34:	f000 fad0 	bl	800a4d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d19a      	bne.n	8009e78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f42:	697a      	ldr	r2, [r7, #20]
 8009f44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f000 f9a2 	bl	800a290 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e01a      	b.n	8009f8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6859      	ldr	r1, [r3, #4]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	4b0b      	ldr	r3, [pc, #44]	@ (8009f98 <HAL_I2C_Mem_Read+0x230>)
 8009f6a:	400b      	ands	r3, r1
 8009f6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2220      	movs	r2, #32
 8009f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	e000      	b.n	8009f8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009f8a:	2302      	movs	r3, #2
  }
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	80002400 	.word	0x80002400
 8009f98:	fe00e800 	.word	0xfe00e800

08009f9c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009faa:	b2db      	uxtb	r3, r3
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af02      	add	r7, sp, #8
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	4608      	mov	r0, r1
 8009fc2:	4611      	mov	r1, r2
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	817b      	strh	r3, [r7, #10]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	813b      	strh	r3, [r7, #8]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009fd2:	88fb      	ldrh	r3, [r7, #6]
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	8979      	ldrh	r1, [r7, #10]
 8009fd8:	4b20      	ldr	r3, [pc, #128]	@ (800a05c <I2C_RequestMemoryWrite+0xa4>)
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f000 fa79 	bl	800a4d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fe6:	69fa      	ldr	r2, [r7, #28]
 8009fe8:	69b9      	ldr	r1, [r7, #24]
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 f909 	bl	800a202 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e02c      	b.n	800a054 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ffa:	88fb      	ldrh	r3, [r7, #6]
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d105      	bne.n	800a00c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a000:	893b      	ldrh	r3, [r7, #8]
 800a002:	b2da      	uxtb	r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	629a      	str	r2, [r3, #40]	@ 0x28
 800a00a:	e015      	b.n	800a038 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a00c:	893b      	ldrh	r3, [r7, #8]
 800a00e:	0a1b      	lsrs	r3, r3, #8
 800a010:	b29b      	uxth	r3, r3
 800a012:	b2da      	uxtb	r2, r3
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a01a:	69fa      	ldr	r2, [r7, #28]
 800a01c:	69b9      	ldr	r1, [r7, #24]
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f000 f8ef 	bl	800a202 <I2C_WaitOnTXISFlagUntilTimeout>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e012      	b.n	800a054 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a02e:	893b      	ldrh	r3, [r7, #8]
 800a030:	b2da      	uxtb	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a038:	69fb      	ldr	r3, [r7, #28]
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	2200      	movs	r2, #0
 800a040:	2180      	movs	r1, #128	@ 0x80
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f000 f884 	bl	800a150 <I2C_WaitOnFlagUntilTimeout>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	80002000 	.word	0x80002000

0800a060 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af02      	add	r7, sp, #8
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	4608      	mov	r0, r1
 800a06a:	4611      	mov	r1, r2
 800a06c:	461a      	mov	r2, r3
 800a06e:	4603      	mov	r3, r0
 800a070:	817b      	strh	r3, [r7, #10]
 800a072:	460b      	mov	r3, r1
 800a074:	813b      	strh	r3, [r7, #8]
 800a076:	4613      	mov	r3, r2
 800a078:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a07a:	88fb      	ldrh	r3, [r7, #6]
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	8979      	ldrh	r1, [r7, #10]
 800a080:	4b20      	ldr	r3, [pc, #128]	@ (800a104 <I2C_RequestMemoryRead+0xa4>)
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	2300      	movs	r3, #0
 800a086:	68f8      	ldr	r0, [r7, #12]
 800a088:	f000 fa26 	bl	800a4d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a08c:	69fa      	ldr	r2, [r7, #28]
 800a08e:	69b9      	ldr	r1, [r7, #24]
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f000 f8b6 	bl	800a202 <I2C_WaitOnTXISFlagUntilTimeout>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	e02c      	b.n	800a0fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0a0:	88fb      	ldrh	r3, [r7, #6]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d105      	bne.n	800a0b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0a6:	893b      	ldrh	r3, [r7, #8]
 800a0a8:	b2da      	uxtb	r2, r3
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	629a      	str	r2, [r3, #40]	@ 0x28
 800a0b0:	e015      	b.n	800a0de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a0b2:	893b      	ldrh	r3, [r7, #8]
 800a0b4:	0a1b      	lsrs	r3, r3, #8
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	b2da      	uxtb	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0c0:	69fa      	ldr	r2, [r7, #28]
 800a0c2:	69b9      	ldr	r1, [r7, #24]
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f000 f89c 	bl	800a202 <I2C_WaitOnTXISFlagUntilTimeout>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d001      	beq.n	800a0d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e012      	b.n	800a0fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a0d4:	893b      	ldrh	r3, [r7, #8]
 800a0d6:	b2da      	uxtb	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	2140      	movs	r1, #64	@ 0x40
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 f831 	bl	800a150 <I2C_WaitOnFlagUntilTimeout>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e000      	b.n	800a0fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	80002000 	.word	0x80002000

0800a108 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	f003 0302 	and.w	r3, r3, #2
 800a11a:	2b02      	cmp	r3, #2
 800a11c:	d103      	bne.n	800a126 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	2200      	movs	r2, #0
 800a124:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	f003 0301 	and.w	r3, r3, #1
 800a130:	2b01      	cmp	r3, #1
 800a132:	d007      	beq.n	800a144 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	699a      	ldr	r2, [r3, #24]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f042 0201 	orr.w	r2, r2, #1
 800a142:	619a      	str	r2, [r3, #24]
  }
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	60b9      	str	r1, [r7, #8]
 800a15a:	603b      	str	r3, [r7, #0]
 800a15c:	4613      	mov	r3, r2
 800a15e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a160:	e03b      	b.n	800a1da <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	6839      	ldr	r1, [r7, #0]
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f000 f8d6 	bl	800a318 <I2C_IsErrorOccurred>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a172:	2301      	movs	r3, #1
 800a174:	e041      	b.n	800a1fa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17c:	d02d      	beq.n	800a1da <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a17e:	f7fd fdab 	bl	8007cd8 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d302      	bcc.n	800a194 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d122      	bne.n	800a1da <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	699a      	ldr	r2, [r3, #24]
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	4013      	ands	r3, r2
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	bf0c      	ite	eq
 800a1a4:	2301      	moveq	r3, #1
 800a1a6:	2300      	movne	r3, #0
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	79fb      	ldrb	r3, [r7, #7]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d113      	bne.n	800a1da <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1b6:	f043 0220 	orr.w	r2, r3, #32
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2220      	movs	r2, #32
 800a1c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e00f      	b.n	800a1fa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	699a      	ldr	r2, [r3, #24]
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	68ba      	ldr	r2, [r7, #8]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	bf0c      	ite	eq
 800a1ea:	2301      	moveq	r3, #1
 800a1ec:	2300      	movne	r3, #0
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	79fb      	ldrb	r3, [r7, #7]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d0b4      	beq.n	800a162 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b084      	sub	sp, #16
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a20e:	e033      	b.n	800a278 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	68b9      	ldr	r1, [r7, #8]
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 f87f 	bl	800a318 <I2C_IsErrorOccurred>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a220:	2301      	movs	r3, #1
 800a222:	e031      	b.n	800a288 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a22a:	d025      	beq.n	800a278 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a22c:	f7fd fd54 	bl	8007cd8 <HAL_GetTick>
 800a230:	4602      	mov	r2, r0
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	429a      	cmp	r2, r3
 800a23a:	d302      	bcc.n	800a242 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d11a      	bne.n	800a278 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	f003 0302 	and.w	r3, r3, #2
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	d013      	beq.n	800a278 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a254:	f043 0220 	orr.w	r2, r3, #32
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2220      	movs	r2, #32
 800a260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	e007      	b.n	800a288 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	699b      	ldr	r3, [r3, #24]
 800a27e:	f003 0302 	and.w	r3, r3, #2
 800a282:	2b02      	cmp	r3, #2
 800a284:	d1c4      	bne.n	800a210 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b084      	sub	sp, #16
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a29c:	e02f      	b.n	800a2fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	68b9      	ldr	r1, [r7, #8]
 800a2a2:	68f8      	ldr	r0, [r7, #12]
 800a2a4:	f000 f838 	bl	800a318 <I2C_IsErrorOccurred>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e02d      	b.n	800a30e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2b2:	f7fd fd11 	bl	8007cd8 <HAL_GetTick>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	1ad3      	subs	r3, r2, r3
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d302      	bcc.n	800a2c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d11a      	bne.n	800a2fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699b      	ldr	r3, [r3, #24]
 800a2ce:	f003 0320 	and.w	r3, r3, #32
 800a2d2:	2b20      	cmp	r3, #32
 800a2d4:	d013      	beq.n	800a2fe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a2da:	f043 0220 	orr.w	r2, r3, #32
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2220      	movs	r2, #32
 800a2e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e007      	b.n	800a30e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	f003 0320 	and.w	r3, r3, #32
 800a308:	2b20      	cmp	r3, #32
 800a30a:	d1c8      	bne.n	800a29e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b08a      	sub	sp, #40	@ 0x28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	f003 0310 	and.w	r3, r3, #16
 800a340:	2b00      	cmp	r3, #0
 800a342:	d068      	beq.n	800a416 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	2210      	movs	r2, #16
 800a34a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a34c:	e049      	b.n	800a3e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a354:	d045      	beq.n	800a3e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a356:	f7fd fcbf 	bl	8007cd8 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	429a      	cmp	r2, r3
 800a364:	d302      	bcc.n	800a36c <I2C_IsErrorOccurred+0x54>
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d13a      	bne.n	800a3e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a376:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a37e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	699b      	ldr	r3, [r3, #24]
 800a386:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a38a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a38e:	d121      	bne.n	800a3d4 <I2C_IsErrorOccurred+0xbc>
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a396:	d01d      	beq.n	800a3d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a398:	7cfb      	ldrb	r3, [r7, #19]
 800a39a:	2b20      	cmp	r3, #32
 800a39c:	d01a      	beq.n	800a3d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a3ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a3ae:	f7fd fc93 	bl	8007cd8 <HAL_GetTick>
 800a3b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a3b4:	e00e      	b.n	800a3d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a3b6:	f7fd fc8f 	bl	8007cd8 <HAL_GetTick>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	69fb      	ldr	r3, [r7, #28]
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	2b19      	cmp	r3, #25
 800a3c2:	d907      	bls.n	800a3d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	f043 0320 	orr.w	r3, r3, #32
 800a3ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a3d2:	e006      	b.n	800a3e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	f003 0320 	and.w	r3, r3, #32
 800a3de:	2b20      	cmp	r3, #32
 800a3e0:	d1e9      	bne.n	800a3b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	f003 0320 	and.w	r3, r3, #32
 800a3ec:	2b20      	cmp	r3, #32
 800a3ee:	d003      	beq.n	800a3f8 <I2C_IsErrorOccurred+0xe0>
 800a3f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d0aa      	beq.n	800a34e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d103      	bne.n	800a408 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2220      	movs	r2, #32
 800a406:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a408:	6a3b      	ldr	r3, [r7, #32]
 800a40a:	f043 0304 	orr.w	r3, r3, #4
 800a40e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00b      	beq.n	800a440 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a428:	6a3b      	ldr	r3, [r7, #32]
 800a42a:	f043 0301 	orr.w	r3, r3, #1
 800a42e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a438:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00b      	beq.n	800a462 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	f043 0308 	orr.w	r3, r3, #8
 800a450:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a45a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00b      	beq.n	800a484 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a46c:	6a3b      	ldr	r3, [r7, #32]
 800a46e:	f043 0302 	orr.w	r3, r3, #2
 800a472:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a47c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d01c      	beq.n	800a4c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f7ff fe3b 	bl	800a108 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6859      	ldr	r1, [r3, #4]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d4 <I2C_IsErrorOccurred+0x1bc>)
 800a49e:	400b      	ands	r3, r1
 800a4a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4a6:	6a3b      	ldr	r3, [r7, #32]
 800a4a8:	431a      	orrs	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800a4c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3728      	adds	r7, #40	@ 0x28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	fe00e800 	.word	0xfe00e800

0800a4d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b087      	sub	sp, #28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	607b      	str	r3, [r7, #4]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	817b      	strh	r3, [r7, #10]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a4ea:	897b      	ldrh	r3, [r7, #10]
 800a4ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a4f0:	7a7b      	ldrb	r3, [r7, #9]
 800a4f2:	041b      	lsls	r3, r3, #16
 800a4f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a4f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a4fe:	6a3b      	ldr	r3, [r7, #32]
 800a500:	4313      	orrs	r3, r2
 800a502:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a506:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	685a      	ldr	r2, [r3, #4]
 800a50e:	6a3b      	ldr	r3, [r7, #32]
 800a510:	0d5b      	lsrs	r3, r3, #21
 800a512:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800a516:	4b08      	ldr	r3, [pc, #32]	@ (800a538 <I2C_TransferConfig+0x60>)
 800a518:	430b      	orrs	r3, r1
 800a51a:	43db      	mvns	r3, r3
 800a51c:	ea02 0103 	and.w	r1, r2, r3
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	697a      	ldr	r2, [r7, #20]
 800a526:	430a      	orrs	r2, r1
 800a528:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a52a:	bf00      	nop
 800a52c:	371c      	adds	r7, #28
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	03ff63ff 	.word	0x03ff63ff

0800a53c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
 800a544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b20      	cmp	r3, #32
 800a550:	d138      	bne.n	800a5c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d101      	bne.n	800a560 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a55c:	2302      	movs	r3, #2
 800a55e:	e032      	b.n	800a5c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2201      	movs	r2, #1
 800a564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2224      	movs	r2, #36	@ 0x24
 800a56c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 0201 	bic.w	r2, r2, #1
 800a57e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a58e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	6819      	ldr	r1, [r3, #0]
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	683a      	ldr	r2, [r7, #0]
 800a59c:	430a      	orrs	r2, r1
 800a59e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	681a      	ldr	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f042 0201 	orr.w	r2, r2, #1
 800a5ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2220      	movs	r2, #32
 800a5b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	e000      	b.n	800a5c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a5c4:	2302      	movs	r3, #2
  }
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b085      	sub	sp, #20
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b20      	cmp	r3, #32
 800a5e6:	d139      	bne.n	800a65c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d101      	bne.n	800a5f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	e033      	b.n	800a65e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2224      	movs	r2, #36	@ 0x24
 800a602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 0201 	bic.w	r2, r2, #1
 800a614:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a624:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	021b      	lsls	r3, r3, #8
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4313      	orrs	r3, r2
 800a62e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68fa      	ldr	r2, [r7, #12]
 800a636:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0201 	orr.w	r2, r2, #1
 800a646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2220      	movs	r2, #32
 800a64c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2200      	movs	r2, #0
 800a654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	e000      	b.n	800a65e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a65c:	2302      	movs	r3, #2
  }
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr
	...

0800a66c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e0bf      	b.n	800a7fe <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7f9 fa9e 	bl	8003bd4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2202      	movs	r2, #2
 800a69c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699a      	ldr	r2, [r3, #24]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a6ae:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6999      	ldr	r1, [r3, #24]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a6c4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6899      	ldr	r1, [r3, #8]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	4b4a      	ldr	r3, [pc, #296]	@ (800a808 <HAL_LTDC_Init+0x19c>)
 800a6e0:	400b      	ands	r3, r1
 800a6e2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	695b      	ldr	r3, [r3, #20]
 800a6e8:	041b      	lsls	r3, r3, #16
 800a6ea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6899      	ldr	r1, [r3, #8]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	699a      	ldr	r2, [r3, #24]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	431a      	orrs	r2, r3
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	430a      	orrs	r2, r1
 800a700:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	68d9      	ldr	r1, [r3, #12]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	4b3e      	ldr	r3, [pc, #248]	@ (800a808 <HAL_LTDC_Init+0x19c>)
 800a70e:	400b      	ands	r3, r1
 800a710:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	69db      	ldr	r3, [r3, #28]
 800a716:	041b      	lsls	r3, r3, #16
 800a718:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	68d9      	ldr	r1, [r3, #12]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a1a      	ldr	r2, [r3, #32]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	431a      	orrs	r2, r3
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	430a      	orrs	r2, r1
 800a72e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6919      	ldr	r1, [r3, #16]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	4b33      	ldr	r3, [pc, #204]	@ (800a808 <HAL_LTDC_Init+0x19c>)
 800a73c:	400b      	ands	r3, r1
 800a73e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a744:	041b      	lsls	r3, r3, #16
 800a746:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6919      	ldr	r1, [r3, #16]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	431a      	orrs	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	430a      	orrs	r2, r1
 800a75c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6959      	ldr	r1, [r3, #20]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	4b27      	ldr	r3, [pc, #156]	@ (800a808 <HAL_LTDC_Init+0x19c>)
 800a76a:	400b      	ands	r3, r1
 800a76c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a772:	041b      	lsls	r3, r3, #16
 800a774:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	6959      	ldr	r1, [r3, #20]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	431a      	orrs	r2, r3
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	430a      	orrs	r2, r1
 800a78a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800a79c:	041b      	lsls	r3, r3, #16
 800a79e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800a7ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800a7b6:	68ba      	ldr	r2, [r7, #8]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800a7c2:	431a      	orrs	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f042 0206 	orr.w	r2, r2, #6
 800a7da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	699a      	ldr	r2, [r3, #24]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f042 0201 	orr.w	r2, r2, #1
 800a7ea:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	f000f800 	.word	0xf000f800

0800a80c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a80c:	b5b0      	push	{r4, r5, r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d101      	bne.n	800a826 <HAL_LTDC_ConfigLayer+0x1a>
 800a822:	2302      	movs	r3, #2
 800a824:	e02c      	b.n	800a880 <HAL_LTDC_ConfigLayer+0x74>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2201      	movs	r2, #1
 800a82a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2202      	movs	r2, #2
 800a832:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2134      	movs	r1, #52	@ 0x34
 800a83c:	fb01 f303 	mul.w	r3, r1, r3
 800a840:	4413      	add	r3, r2
 800a842:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	4614      	mov	r4, r2
 800a84a:	461d      	mov	r5, r3
 800a84c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a84e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	68b9      	ldr	r1, [r7, #8]
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f000 f81f 	bl	800a8a4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2201      	movs	r2, #1
 800a86c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2201      	movs	r2, #1
 800a872:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bdb0      	pop	{r4, r5, r7, pc}

0800a888 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800a896:	b2db      	uxtb	r3, r3
}
 800a898:	4618      	mov	r0, r3
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b089      	sub	sp, #36	@ 0x24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	0c1b      	lsrs	r3, r3, #16
 800a8bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8c0:	4413      	add	r3, r2
 800a8c2:	041b      	lsls	r3, r3, #16
 800a8c4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	01db      	lsls	r3, r3, #7
 800a8d0:	4413      	add	r3, r2
 800a8d2:	3384      	adds	r3, #132	@ 0x84
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	68fa      	ldr	r2, [r7, #12]
 800a8d8:	6812      	ldr	r2, [r2, #0]
 800a8da:	4611      	mov	r1, r2
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	01d2      	lsls	r2, r2, #7
 800a8e0:	440a      	add	r2, r1
 800a8e2:	3284      	adds	r2, #132	@ 0x84
 800a8e4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a8e8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	0c1b      	lsrs	r3, r3, #16
 800a8f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a8fa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a8fc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4619      	mov	r1, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	01db      	lsls	r3, r3, #7
 800a908:	440b      	add	r3, r1
 800a90a:	3384      	adds	r3, #132	@ 0x84
 800a90c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a912:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	68da      	ldr	r2, [r3, #12]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a922:	4413      	add	r3, r2
 800a924:	041b      	lsls	r3, r3, #16
 800a926:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	01db      	lsls	r3, r3, #7
 800a932:	4413      	add	r3, r2
 800a934:	3384      	adds	r3, #132	@ 0x84
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	6812      	ldr	r2, [r2, #0]
 800a93c:	4611      	mov	r1, r2
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	01d2      	lsls	r2, r2, #7
 800a942:	440a      	add	r2, r1
 800a944:	3284      	adds	r2, #132	@ 0x84
 800a946:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a94a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	689a      	ldr	r2, [r3, #8]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68db      	ldr	r3, [r3, #12]
 800a956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a95a:	4413      	add	r3, r2
 800a95c:	1c5a      	adds	r2, r3, #1
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4619      	mov	r1, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	01db      	lsls	r3, r3, #7
 800a968:	440b      	add	r3, r1
 800a96a:	3384      	adds	r3, #132	@ 0x84
 800a96c:	4619      	mov	r1, r3
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	4313      	orrs	r3, r2
 800a972:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	461a      	mov	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	01db      	lsls	r3, r3, #7
 800a97e:	4413      	add	r3, r2
 800a980:	3384      	adds	r3, #132	@ 0x84
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	68fa      	ldr	r2, [r7, #12]
 800a986:	6812      	ldr	r2, [r2, #0]
 800a988:	4611      	mov	r1, r2
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	01d2      	lsls	r2, r2, #7
 800a98e:	440a      	add	r2, r1
 800a990:	3284      	adds	r2, #132	@ 0x84
 800a992:	f023 0307 	bic.w	r3, r3, #7
 800a996:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	461a      	mov	r2, r3
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	01db      	lsls	r3, r3, #7
 800a9a2:	4413      	add	r3, r2
 800a9a4:	3384      	adds	r3, #132	@ 0x84
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a9b4:	021b      	lsls	r3, r3, #8
 800a9b6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a9be:	041b      	lsls	r3, r3, #16
 800a9c0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	061b      	lsls	r3, r3, #24
 800a9c8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	01db      	lsls	r3, r3, #7
 800a9d4:	4413      	add	r3, r2
 800a9d6:	3384      	adds	r3, #132	@ 0x84
 800a9d8:	699b      	ldr	r3, [r3, #24]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	01db      	lsls	r3, r3, #7
 800a9e4:	4413      	add	r3, r2
 800a9e6:	3384      	adds	r3, #132	@ 0x84
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	431a      	orrs	r2, r3
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	431a      	orrs	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	4619      	mov	r1, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	01db      	lsls	r3, r3, #7
 800aa08:	440b      	add	r3, r1
 800aa0a:	3384      	adds	r3, #132	@ 0x84
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	01db      	lsls	r3, r3, #7
 800aa1e:	4413      	add	r3, r2
 800aa20:	3384      	adds	r3, #132	@ 0x84
 800aa22:	695b      	ldr	r3, [r3, #20]
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	6812      	ldr	r2, [r2, #0]
 800aa28:	4611      	mov	r1, r2
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	01d2      	lsls	r2, r2, #7
 800aa2e:	440a      	add	r2, r1
 800aa30:	3284      	adds	r2, #132	@ 0x84
 800aa32:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800aa36:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	01db      	lsls	r3, r3, #7
 800aa42:	4413      	add	r3, r2
 800aa44:	3384      	adds	r3, #132	@ 0x84
 800aa46:	461a      	mov	r2, r3
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	695b      	ldr	r3, [r3, #20]
 800aa4c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	461a      	mov	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	01db      	lsls	r3, r3, #7
 800aa58:	4413      	add	r3, r2
 800aa5a:	3384      	adds	r3, #132	@ 0x84
 800aa5c:	69da      	ldr	r2, [r3, #28]
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4619      	mov	r1, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	01db      	lsls	r3, r3, #7
 800aa68:	440b      	add	r3, r1
 800aa6a:	3384      	adds	r3, #132	@ 0x84
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4b58      	ldr	r3, [pc, #352]	@ (800abd0 <LTDC_SetConfig+0x32c>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	69da      	ldr	r2, [r3, #28]
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	6a1b      	ldr	r3, [r3, #32]
 800aa7c:	68f9      	ldr	r1, [r7, #12]
 800aa7e:	6809      	ldr	r1, [r1, #0]
 800aa80:	4608      	mov	r0, r1
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	01c9      	lsls	r1, r1, #7
 800aa86:	4401      	add	r1, r0
 800aa88:	3184      	adds	r1, #132	@ 0x84
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	461a      	mov	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	01db      	lsls	r3, r3, #7
 800aa98:	4413      	add	r3, r2
 800aa9a:	3384      	adds	r3, #132	@ 0x84
 800aa9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	01db      	lsls	r3, r3, #7
 800aaa8:	4413      	add	r3, r2
 800aaaa:	3384      	adds	r3, #132	@ 0x84
 800aaac:	461a      	mov	r2, r3
 800aaae:	2300      	movs	r3, #0
 800aab0:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	461a      	mov	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	01db      	lsls	r3, r3, #7
 800aabc:	4413      	add	r3, r2
 800aabe:	3384      	adds	r3, #132	@ 0x84
 800aac0:	461a      	mov	r2, r3
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac6:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	691b      	ldr	r3, [r3, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d102      	bne.n	800aad6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800aad0:	2304      	movs	r3, #4
 800aad2:	61fb      	str	r3, [r7, #28]
 800aad4:	e01b      	b.n	800ab0e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d102      	bne.n	800aae4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800aade:	2303      	movs	r3, #3
 800aae0:	61fb      	str	r3, [r7, #28]
 800aae2:	e014      	b.n	800ab0e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	2b04      	cmp	r3, #4
 800aaea:	d00b      	beq.n	800ab04 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d007      	beq.n	800ab04 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d003      	beq.n	800ab04 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800ab00:	2b07      	cmp	r3, #7
 800ab02:	d102      	bne.n	800ab0a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800ab04:	2302      	movs	r3, #2
 800ab06:	61fb      	str	r3, [r7, #28]
 800ab08:	e001      	b.n	800ab0e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	461a      	mov	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	01db      	lsls	r3, r3, #7
 800ab18:	4413      	add	r3, r2
 800ab1a:	3384      	adds	r3, #132	@ 0x84
 800ab1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	6812      	ldr	r2, [r2, #0]
 800ab22:	4611      	mov	r1, r2
 800ab24:	687a      	ldr	r2, [r7, #4]
 800ab26:	01d2      	lsls	r2, r2, #7
 800ab28:	440a      	add	r2, r1
 800ab2a:	3284      	adds	r2, #132	@ 0x84
 800ab2c:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800ab30:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab36:	69fa      	ldr	r2, [r7, #28]
 800ab38:	fb02 f303 	mul.w	r3, r2, r3
 800ab3c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	6859      	ldr	r1, [r3, #4]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	1acb      	subs	r3, r1, r3
 800ab48:	69f9      	ldr	r1, [r7, #28]
 800ab4a:	fb01 f303 	mul.w	r3, r1, r3
 800ab4e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800ab50:	68f9      	ldr	r1, [r7, #12]
 800ab52:	6809      	ldr	r1, [r1, #0]
 800ab54:	4608      	mov	r0, r1
 800ab56:	6879      	ldr	r1, [r7, #4]
 800ab58:	01c9      	lsls	r1, r1, #7
 800ab5a:	4401      	add	r1, r0
 800ab5c:	3184      	adds	r1, #132	@ 0x84
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	01db      	lsls	r3, r3, #7
 800ab6c:	4413      	add	r3, r2
 800ab6e:	3384      	adds	r3, #132	@ 0x84
 800ab70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4619      	mov	r1, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	01db      	lsls	r3, r3, #7
 800ab7c:	440b      	add	r3, r1
 800ab7e:	3384      	adds	r3, #132	@ 0x84
 800ab80:	4619      	mov	r1, r3
 800ab82:	4b14      	ldr	r3, [pc, #80]	@ (800abd4 <LTDC_SetConfig+0x330>)
 800ab84:	4013      	ands	r3, r2
 800ab86:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	01db      	lsls	r3, r3, #7
 800ab92:	4413      	add	r3, r2
 800ab94:	3384      	adds	r3, #132	@ 0x84
 800ab96:	461a      	mov	r2, r3
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab9c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	461a      	mov	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	01db      	lsls	r3, r3, #7
 800aba8:	4413      	add	r3, r2
 800abaa:	3384      	adds	r3, #132	@ 0x84
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	6812      	ldr	r2, [r2, #0]
 800abb2:	4611      	mov	r1, r2
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	01d2      	lsls	r2, r2, #7
 800abb8:	440a      	add	r2, r1
 800abba:	3284      	adds	r2, #132	@ 0x84
 800abbc:	f043 0301 	orr.w	r3, r3, #1
 800abc0:	6013      	str	r3, [r2, #0]
}
 800abc2:	bf00      	nop
 800abc4:	3724      	adds	r7, #36	@ 0x24
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr
 800abce:	bf00      	nop
 800abd0:	fffff8f8 	.word	0xfffff8f8
 800abd4:	fffff800 	.word	0xfffff800

0800abd8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800abd8:	b480      	push	{r7}
 800abda:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800abdc:	4b05      	ldr	r3, [pc, #20]	@ (800abf4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a04      	ldr	r2, [pc, #16]	@ (800abf4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800abe2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800abe6:	6013      	str	r3, [r2, #0]
}
 800abe8:	bf00      	nop
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	40007000 	.word	0x40007000

0800abf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac02:	4b23      	ldr	r3, [pc, #140]	@ (800ac90 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac06:	4a22      	ldr	r2, [pc, #136]	@ (800ac90 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac0c:	6413      	str	r3, [r2, #64]	@ 0x40
 800ac0e:	4b20      	ldr	r3, [pc, #128]	@ (800ac90 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac16:	603b      	str	r3, [r7, #0]
 800ac18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ac1a:	4b1e      	ldr	r3, [pc, #120]	@ (800ac94 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a1d      	ldr	r2, [pc, #116]	@ (800ac94 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac26:	f7fd f857 	bl	8007cd8 <HAL_GetTick>
 800ac2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac2c:	e009      	b.n	800ac42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac2e:	f7fd f853 	bl	8007cd8 <HAL_GetTick>
 800ac32:	4602      	mov	r2, r0
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac3c:	d901      	bls.n	800ac42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e022      	b.n	800ac88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac42:	4b14      	ldr	r3, [pc, #80]	@ (800ac94 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ac4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac4e:	d1ee      	bne.n	800ac2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ac50:	4b10      	ldr	r3, [pc, #64]	@ (800ac94 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a0f      	ldr	r2, [pc, #60]	@ (800ac94 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac5c:	f7fd f83c 	bl	8007cd8 <HAL_GetTick>
 800ac60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ac62:	e009      	b.n	800ac78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac64:	f7fd f838 	bl	8007cd8 <HAL_GetTick>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ac72:	d901      	bls.n	800ac78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800ac74:	2303      	movs	r3, #3
 800ac76:	e007      	b.n	800ac88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ac78:	4b06      	ldr	r3, [pc, #24]	@ (800ac94 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac84:	d1ee      	bne.n	800ac64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	40023800 	.word	0x40023800
 800ac94:	40007000 	.word	0x40007000

0800ac98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800aca0:	2300      	movs	r3, #0
 800aca2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e291      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	f000 8087 	beq.w	800adca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800acbc:	4b96      	ldr	r3, [pc, #600]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f003 030c 	and.w	r3, r3, #12
 800acc4:	2b04      	cmp	r3, #4
 800acc6:	d00c      	beq.n	800ace2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800acc8:	4b93      	ldr	r3, [pc, #588]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	f003 030c 	and.w	r3, r3, #12
 800acd0:	2b08      	cmp	r3, #8
 800acd2:	d112      	bne.n	800acfa <HAL_RCC_OscConfig+0x62>
 800acd4:	4b90      	ldr	r3, [pc, #576]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800acdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ace0:	d10b      	bne.n	800acfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ace2:	4b8d      	ldr	r3, [pc, #564]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acea:	2b00      	cmp	r3, #0
 800acec:	d06c      	beq.n	800adc8 <HAL_RCC_OscConfig+0x130>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d168      	bne.n	800adc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e26b      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad02:	d106      	bne.n	800ad12 <HAL_RCC_OscConfig+0x7a>
 800ad04:	4b84      	ldr	r3, [pc, #528]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a83      	ldr	r2, [pc, #524]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad0e:	6013      	str	r3, [r2, #0]
 800ad10:	e02e      	b.n	800ad70 <HAL_RCC_OscConfig+0xd8>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10c      	bne.n	800ad34 <HAL_RCC_OscConfig+0x9c>
 800ad1a:	4b7f      	ldr	r3, [pc, #508]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a7e      	ldr	r2, [pc, #504]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad24:	6013      	str	r3, [r2, #0]
 800ad26:	4b7c      	ldr	r3, [pc, #496]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a7b      	ldr	r2, [pc, #492]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad30:	6013      	str	r3, [r2, #0]
 800ad32:	e01d      	b.n	800ad70 <HAL_RCC_OscConfig+0xd8>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ad3c:	d10c      	bne.n	800ad58 <HAL_RCC_OscConfig+0xc0>
 800ad3e:	4b76      	ldr	r3, [pc, #472]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a75      	ldr	r2, [pc, #468]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad48:	6013      	str	r3, [r2, #0]
 800ad4a:	4b73      	ldr	r3, [pc, #460]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a72      	ldr	r2, [pc, #456]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad54:	6013      	str	r3, [r2, #0]
 800ad56:	e00b      	b.n	800ad70 <HAL_RCC_OscConfig+0xd8>
 800ad58:	4b6f      	ldr	r3, [pc, #444]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a6e      	ldr	r2, [pc, #440]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad62:	6013      	str	r3, [r2, #0]
 800ad64:	4b6c      	ldr	r3, [pc, #432]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a6b      	ldr	r2, [pc, #428]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ad6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d013      	beq.n	800ada0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad78:	f7fc ffae 	bl	8007cd8 <HAL_GetTick>
 800ad7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad7e:	e008      	b.n	800ad92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad80:	f7fc ffaa 	bl	8007cd8 <HAL_GetTick>
 800ad84:	4602      	mov	r2, r0
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	2b64      	cmp	r3, #100	@ 0x64
 800ad8c:	d901      	bls.n	800ad92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e21f      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad92:	4b61      	ldr	r3, [pc, #388]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d0f0      	beq.n	800ad80 <HAL_RCC_OscConfig+0xe8>
 800ad9e:	e014      	b.n	800adca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ada0:	f7fc ff9a 	bl	8007cd8 <HAL_GetTick>
 800ada4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ada6:	e008      	b.n	800adba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ada8:	f7fc ff96 	bl	8007cd8 <HAL_GetTick>
 800adac:	4602      	mov	r2, r0
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	2b64      	cmp	r3, #100	@ 0x64
 800adb4:	d901      	bls.n	800adba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e20b      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800adba:	4b57      	ldr	r3, [pc, #348]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1f0      	bne.n	800ada8 <HAL_RCC_OscConfig+0x110>
 800adc6:	e000      	b.n	800adca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800adc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0302 	and.w	r3, r3, #2
 800add2:	2b00      	cmp	r3, #0
 800add4:	d069      	beq.n	800aeaa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800add6:	4b50      	ldr	r3, [pc, #320]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f003 030c 	and.w	r3, r3, #12
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00b      	beq.n	800adfa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ade2:	4b4d      	ldr	r3, [pc, #308]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ade4:	689b      	ldr	r3, [r3, #8]
 800ade6:	f003 030c 	and.w	r3, r3, #12
 800adea:	2b08      	cmp	r3, #8
 800adec:	d11c      	bne.n	800ae28 <HAL_RCC_OscConfig+0x190>
 800adee:	4b4a      	ldr	r3, [pc, #296]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d116      	bne.n	800ae28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800adfa:	4b47      	ldr	r3, [pc, #284]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0302 	and.w	r3, r3, #2
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d005      	beq.n	800ae12 <HAL_RCC_OscConfig+0x17a>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	68db      	ldr	r3, [r3, #12]
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d001      	beq.n	800ae12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	e1df      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae12:	4b41      	ldr	r3, [pc, #260]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	00db      	lsls	r3, r3, #3
 800ae20:	493d      	ldr	r1, [pc, #244]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ae22:	4313      	orrs	r3, r2
 800ae24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae26:	e040      	b.n	800aeaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d023      	beq.n	800ae78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae30:	4b39      	ldr	r3, [pc, #228]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	4a38      	ldr	r2, [pc, #224]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ae36:	f043 0301 	orr.w	r3, r3, #1
 800ae3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae3c:	f7fc ff4c 	bl	8007cd8 <HAL_GetTick>
 800ae40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae42:	e008      	b.n	800ae56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae44:	f7fc ff48 	bl	8007cd8 <HAL_GetTick>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	1ad3      	subs	r3, r2, r3
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d901      	bls.n	800ae56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800ae52:	2303      	movs	r3, #3
 800ae54:	e1bd      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae56:	4b30      	ldr	r3, [pc, #192]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d0f0      	beq.n	800ae44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae62:	4b2d      	ldr	r3, [pc, #180]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	691b      	ldr	r3, [r3, #16]
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	4929      	ldr	r1, [pc, #164]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ae72:	4313      	orrs	r3, r2
 800ae74:	600b      	str	r3, [r1, #0]
 800ae76:	e018      	b.n	800aeaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae78:	4b27      	ldr	r3, [pc, #156]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a26      	ldr	r2, [pc, #152]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800ae7e:	f023 0301 	bic.w	r3, r3, #1
 800ae82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae84:	f7fc ff28 	bl	8007cd8 <HAL_GetTick>
 800ae88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae8a:	e008      	b.n	800ae9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae8c:	f7fc ff24 	bl	8007cd8 <HAL_GetTick>
 800ae90:	4602      	mov	r2, r0
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	1ad3      	subs	r3, r2, r3
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d901      	bls.n	800ae9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	e199      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae9e:	4b1e      	ldr	r3, [pc, #120]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d1f0      	bne.n	800ae8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0308 	and.w	r3, r3, #8
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d038      	beq.n	800af28 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	695b      	ldr	r3, [r3, #20]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d019      	beq.n	800aef2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aebe:	4b16      	ldr	r3, [pc, #88]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800aec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aec2:	4a15      	ldr	r2, [pc, #84]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800aec4:	f043 0301 	orr.w	r3, r3, #1
 800aec8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aeca:	f7fc ff05 	bl	8007cd8 <HAL_GetTick>
 800aece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aed0:	e008      	b.n	800aee4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aed2:	f7fc ff01 	bl	8007cd8 <HAL_GetTick>
 800aed6:	4602      	mov	r2, r0
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	2b02      	cmp	r3, #2
 800aede:	d901      	bls.n	800aee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e176      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aee4:	4b0c      	ldr	r3, [pc, #48]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800aee6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0f0      	beq.n	800aed2 <HAL_RCC_OscConfig+0x23a>
 800aef0:	e01a      	b.n	800af28 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aef2:	4b09      	ldr	r3, [pc, #36]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800aef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aef6:	4a08      	ldr	r2, [pc, #32]	@ (800af18 <HAL_RCC_OscConfig+0x280>)
 800aef8:	f023 0301 	bic.w	r3, r3, #1
 800aefc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aefe:	f7fc feeb 	bl	8007cd8 <HAL_GetTick>
 800af02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af04:	e00a      	b.n	800af1c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af06:	f7fc fee7 	bl	8007cd8 <HAL_GetTick>
 800af0a:	4602      	mov	r2, r0
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	1ad3      	subs	r3, r2, r3
 800af10:	2b02      	cmp	r3, #2
 800af12:	d903      	bls.n	800af1c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	e15c      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
 800af18:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af1c:	4b91      	ldr	r3, [pc, #580]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800af1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af20:	f003 0302 	and.w	r3, r3, #2
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1ee      	bne.n	800af06 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f003 0304 	and.w	r3, r3, #4
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 80a4 	beq.w	800b07e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af36:	4b8b      	ldr	r3, [pc, #556]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800af38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d10d      	bne.n	800af5e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800af42:	4b88      	ldr	r3, [pc, #544]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800af44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af46:	4a87      	ldr	r2, [pc, #540]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800af48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af4c:	6413      	str	r3, [r2, #64]	@ 0x40
 800af4e:	4b85      	ldr	r3, [pc, #532]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800af50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af56:	60bb      	str	r3, [r7, #8]
 800af58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af5a:	2301      	movs	r3, #1
 800af5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af5e:	4b82      	ldr	r3, [pc, #520]	@ (800b168 <HAL_RCC_OscConfig+0x4d0>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af66:	2b00      	cmp	r3, #0
 800af68:	d118      	bne.n	800af9c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800af6a:	4b7f      	ldr	r3, [pc, #508]	@ (800b168 <HAL_RCC_OscConfig+0x4d0>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a7e      	ldr	r2, [pc, #504]	@ (800b168 <HAL_RCC_OscConfig+0x4d0>)
 800af70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af76:	f7fc feaf 	bl	8007cd8 <HAL_GetTick>
 800af7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af7c:	e008      	b.n	800af90 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af7e:	f7fc feab 	bl	8007cd8 <HAL_GetTick>
 800af82:	4602      	mov	r2, r0
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	1ad3      	subs	r3, r2, r3
 800af88:	2b64      	cmp	r3, #100	@ 0x64
 800af8a:	d901      	bls.n	800af90 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800af8c:	2303      	movs	r3, #3
 800af8e:	e120      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800af90:	4b75      	ldr	r3, [pc, #468]	@ (800b168 <HAL_RCC_OscConfig+0x4d0>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d0f0      	beq.n	800af7e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d106      	bne.n	800afb2 <HAL_RCC_OscConfig+0x31a>
 800afa4:	4b6f      	ldr	r3, [pc, #444]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800afa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afa8:	4a6e      	ldr	r2, [pc, #440]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800afaa:	f043 0301 	orr.w	r3, r3, #1
 800afae:	6713      	str	r3, [r2, #112]	@ 0x70
 800afb0:	e02d      	b.n	800b00e <HAL_RCC_OscConfig+0x376>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10c      	bne.n	800afd4 <HAL_RCC_OscConfig+0x33c>
 800afba:	4b6a      	ldr	r3, [pc, #424]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800afbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afbe:	4a69      	ldr	r2, [pc, #420]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800afc0:	f023 0301 	bic.w	r3, r3, #1
 800afc4:	6713      	str	r3, [r2, #112]	@ 0x70
 800afc6:	4b67      	ldr	r3, [pc, #412]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800afc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afca:	4a66      	ldr	r2, [pc, #408]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800afcc:	f023 0304 	bic.w	r3, r3, #4
 800afd0:	6713      	str	r3, [r2, #112]	@ 0x70
 800afd2:	e01c      	b.n	800b00e <HAL_RCC_OscConfig+0x376>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	2b05      	cmp	r3, #5
 800afda:	d10c      	bne.n	800aff6 <HAL_RCC_OscConfig+0x35e>
 800afdc:	4b61      	ldr	r3, [pc, #388]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800afde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afe0:	4a60      	ldr	r2, [pc, #384]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800afe2:	f043 0304 	orr.w	r3, r3, #4
 800afe6:	6713      	str	r3, [r2, #112]	@ 0x70
 800afe8:	4b5e      	ldr	r3, [pc, #376]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800afea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800afec:	4a5d      	ldr	r2, [pc, #372]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800afee:	f043 0301 	orr.w	r3, r3, #1
 800aff2:	6713      	str	r3, [r2, #112]	@ 0x70
 800aff4:	e00b      	b.n	800b00e <HAL_RCC_OscConfig+0x376>
 800aff6:	4b5b      	ldr	r3, [pc, #364]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800aff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800affa:	4a5a      	ldr	r2, [pc, #360]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800affc:	f023 0301 	bic.w	r3, r3, #1
 800b000:	6713      	str	r3, [r2, #112]	@ 0x70
 800b002:	4b58      	ldr	r3, [pc, #352]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b006:	4a57      	ldr	r2, [pc, #348]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b008:	f023 0304 	bic.w	r3, r3, #4
 800b00c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	689b      	ldr	r3, [r3, #8]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d015      	beq.n	800b042 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b016:	f7fc fe5f 	bl	8007cd8 <HAL_GetTick>
 800b01a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b01c:	e00a      	b.n	800b034 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b01e:	f7fc fe5b 	bl	8007cd8 <HAL_GetTick>
 800b022:	4602      	mov	r2, r0
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d901      	bls.n	800b034 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e0ce      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b034:	4b4b      	ldr	r3, [pc, #300]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b038:	f003 0302 	and.w	r3, r3, #2
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d0ee      	beq.n	800b01e <HAL_RCC_OscConfig+0x386>
 800b040:	e014      	b.n	800b06c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b042:	f7fc fe49 	bl	8007cd8 <HAL_GetTick>
 800b046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b048:	e00a      	b.n	800b060 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b04a:	f7fc fe45 	bl	8007cd8 <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b058:	4293      	cmp	r3, r2
 800b05a:	d901      	bls.n	800b060 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800b05c:	2303      	movs	r3, #3
 800b05e:	e0b8      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b060:	4b40      	ldr	r3, [pc, #256]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b064:	f003 0302 	and.w	r3, r3, #2
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d1ee      	bne.n	800b04a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b06c:	7dfb      	ldrb	r3, [r7, #23]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d105      	bne.n	800b07e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b072:	4b3c      	ldr	r3, [pc, #240]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b076:	4a3b      	ldr	r2, [pc, #236]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b07c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	2b00      	cmp	r3, #0
 800b084:	f000 80a4 	beq.w	800b1d0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b088:	4b36      	ldr	r3, [pc, #216]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	f003 030c 	and.w	r3, r3, #12
 800b090:	2b08      	cmp	r3, #8
 800b092:	d06b      	beq.n	800b16c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d149      	bne.n	800b130 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b09c:	4b31      	ldr	r3, [pc, #196]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a30      	ldr	r2, [pc, #192]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b0a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0a8:	f7fc fe16 	bl	8007cd8 <HAL_GetTick>
 800b0ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0ae:	e008      	b.n	800b0c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0b0:	f7fc fe12 	bl	8007cd8 <HAL_GetTick>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	1ad3      	subs	r3, r2, r3
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d901      	bls.n	800b0c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	e087      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0c2:	4b28      	ldr	r3, [pc, #160]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1f0      	bne.n	800b0b0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	69da      	ldr	r2, [r3, #28]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a1b      	ldr	r3, [r3, #32]
 800b0d6:	431a      	orrs	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0dc:	019b      	lsls	r3, r3, #6
 800b0de:	431a      	orrs	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0e4:	085b      	lsrs	r3, r3, #1
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	041b      	lsls	r3, r3, #16
 800b0ea:	431a      	orrs	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f0:	061b      	lsls	r3, r3, #24
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	4a1b      	ldr	r2, [pc, #108]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b0f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b0fa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0fc:	4b19      	ldr	r3, [pc, #100]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a18      	ldr	r2, [pc, #96]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b108:	f7fc fde6 	bl	8007cd8 <HAL_GetTick>
 800b10c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b10e:	e008      	b.n	800b122 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b110:	f7fc fde2 	bl	8007cd8 <HAL_GetTick>
 800b114:	4602      	mov	r2, r0
 800b116:	693b      	ldr	r3, [r7, #16]
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d901      	bls.n	800b122 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800b11e:	2303      	movs	r3, #3
 800b120:	e057      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b122:	4b10      	ldr	r3, [pc, #64]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d0f0      	beq.n	800b110 <HAL_RCC_OscConfig+0x478>
 800b12e:	e04f      	b.n	800b1d0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b130:	4b0c      	ldr	r3, [pc, #48]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a0b      	ldr	r2, [pc, #44]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b13a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b13c:	f7fc fdcc 	bl	8007cd8 <HAL_GetTick>
 800b140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b142:	e008      	b.n	800b156 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b144:	f7fc fdc8 	bl	8007cd8 <HAL_GetTick>
 800b148:	4602      	mov	r2, r0
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d901      	bls.n	800b156 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800b152:	2303      	movs	r3, #3
 800b154:	e03d      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b156:	4b03      	ldr	r3, [pc, #12]	@ (800b164 <HAL_RCC_OscConfig+0x4cc>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1f0      	bne.n	800b144 <HAL_RCC_OscConfig+0x4ac>
 800b162:	e035      	b.n	800b1d0 <HAL_RCC_OscConfig+0x538>
 800b164:	40023800 	.word	0x40023800
 800b168:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800b16c:	4b1b      	ldr	r3, [pc, #108]	@ (800b1dc <HAL_RCC_OscConfig+0x544>)
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	699b      	ldr	r3, [r3, #24]
 800b176:	2b01      	cmp	r3, #1
 800b178:	d028      	beq.n	800b1cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b184:	429a      	cmp	r2, r3
 800b186:	d121      	bne.n	800b1cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b192:	429a      	cmp	r2, r3
 800b194:	d11a      	bne.n	800b1cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b19c:	4013      	ands	r3, r2
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b1a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d111      	bne.n	800b1cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b2:	085b      	lsrs	r3, r3, #1
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d107      	bne.n	800b1cc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d001      	beq.n	800b1d0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e000      	b.n	800b1d2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3718      	adds	r7, #24
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	40023800 	.word	0x40023800

0800b1e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b084      	sub	sp, #16
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e0d0      	b.n	800b39a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b1f8:	4b6a      	ldr	r3, [pc, #424]	@ (800b3a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 030f 	and.w	r3, r3, #15
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	429a      	cmp	r2, r3
 800b204:	d910      	bls.n	800b228 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b206:	4b67      	ldr	r3, [pc, #412]	@ (800b3a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f023 020f 	bic.w	r2, r3, #15
 800b20e:	4965      	ldr	r1, [pc, #404]	@ (800b3a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	4313      	orrs	r3, r2
 800b214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b216:	4b63      	ldr	r3, [pc, #396]	@ (800b3a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 030f 	and.w	r3, r3, #15
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	429a      	cmp	r2, r3
 800b222:	d001      	beq.n	800b228 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	e0b8      	b.n	800b39a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 0302 	and.w	r3, r3, #2
 800b230:	2b00      	cmp	r3, #0
 800b232:	d020      	beq.n	800b276 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 0304 	and.w	r3, r3, #4
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d005      	beq.n	800b24c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b240:	4b59      	ldr	r3, [pc, #356]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b242:	689b      	ldr	r3, [r3, #8]
 800b244:	4a58      	ldr	r2, [pc, #352]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b246:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b24a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0308 	and.w	r3, r3, #8
 800b254:	2b00      	cmp	r3, #0
 800b256:	d005      	beq.n	800b264 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b258:	4b53      	ldr	r3, [pc, #332]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b25a:	689b      	ldr	r3, [r3, #8]
 800b25c:	4a52      	ldr	r2, [pc, #328]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b25e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b262:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b264:	4b50      	ldr	r3, [pc, #320]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	494d      	ldr	r1, [pc, #308]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b272:	4313      	orrs	r3, r2
 800b274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d040      	beq.n	800b304 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	2b01      	cmp	r3, #1
 800b288:	d107      	bne.n	800b29a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b28a:	4b47      	ldr	r3, [pc, #284]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d115      	bne.n	800b2c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e07f      	b.n	800b39a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d107      	bne.n	800b2b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2a2:	4b41      	ldr	r3, [pc, #260]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d109      	bne.n	800b2c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e073      	b.n	800b39a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2b2:	4b3d      	ldr	r3, [pc, #244]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 0302 	and.w	r3, r3, #2
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d101      	bne.n	800b2c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e06b      	b.n	800b39a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b2c2:	4b39      	ldr	r3, [pc, #228]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	f023 0203 	bic.w	r2, r3, #3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	4936      	ldr	r1, [pc, #216]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2d4:	f7fc fd00 	bl	8007cd8 <HAL_GetTick>
 800b2d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2da:	e00a      	b.n	800b2f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2dc:	f7fc fcfc 	bl	8007cd8 <HAL_GetTick>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	1ad3      	subs	r3, r2, r3
 800b2e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d901      	bls.n	800b2f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e053      	b.n	800b39a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2f2:	4b2d      	ldr	r3, [pc, #180]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b2f4:	689b      	ldr	r3, [r3, #8]
 800b2f6:	f003 020c 	and.w	r2, r3, #12
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	429a      	cmp	r2, r3
 800b302:	d1eb      	bne.n	800b2dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b304:	4b27      	ldr	r3, [pc, #156]	@ (800b3a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 030f 	and.w	r3, r3, #15
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d210      	bcs.n	800b334 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b312:	4b24      	ldr	r3, [pc, #144]	@ (800b3a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f023 020f 	bic.w	r2, r3, #15
 800b31a:	4922      	ldr	r1, [pc, #136]	@ (800b3a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	4313      	orrs	r3, r2
 800b320:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b322:	4b20      	ldr	r3, [pc, #128]	@ (800b3a4 <HAL_RCC_ClockConfig+0x1c4>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f003 030f 	and.w	r3, r3, #15
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d001      	beq.n	800b334 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e032      	b.n	800b39a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f003 0304 	and.w	r3, r3, #4
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d008      	beq.n	800b352 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b340:	4b19      	ldr	r3, [pc, #100]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	4916      	ldr	r1, [pc, #88]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b34e:	4313      	orrs	r3, r2
 800b350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 0308 	and.w	r3, r3, #8
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d009      	beq.n	800b372 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b35e:	4b12      	ldr	r3, [pc, #72]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	00db      	lsls	r3, r3, #3
 800b36c:	490e      	ldr	r1, [pc, #56]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b36e:	4313      	orrs	r3, r2
 800b370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b372:	f000 f821 	bl	800b3b8 <HAL_RCC_GetSysClockFreq>
 800b376:	4602      	mov	r2, r0
 800b378:	4b0b      	ldr	r3, [pc, #44]	@ (800b3a8 <HAL_RCC_ClockConfig+0x1c8>)
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	091b      	lsrs	r3, r3, #4
 800b37e:	f003 030f 	and.w	r3, r3, #15
 800b382:	490a      	ldr	r1, [pc, #40]	@ (800b3ac <HAL_RCC_ClockConfig+0x1cc>)
 800b384:	5ccb      	ldrb	r3, [r1, r3]
 800b386:	fa22 f303 	lsr.w	r3, r2, r3
 800b38a:	4a09      	ldr	r2, [pc, #36]	@ (800b3b0 <HAL_RCC_ClockConfig+0x1d0>)
 800b38c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b38e:	4b09      	ldr	r3, [pc, #36]	@ (800b3b4 <HAL_RCC_ClockConfig+0x1d4>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4618      	mov	r0, r3
 800b394:	f7fc fc5c 	bl	8007c50 <HAL_InitTick>

  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	40023c00 	.word	0x40023c00
 800b3a8:	40023800 	.word	0x40023800
 800b3ac:	080168f0 	.word	0x080168f0
 800b3b0:	20004ed0 	.word	0x20004ed0
 800b3b4:	20004f20 	.word	0x20004f20

0800b3b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3bc:	b090      	sub	sp, #64	@ 0x40
 800b3be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3d0:	4b59      	ldr	r3, [pc, #356]	@ (800b538 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	f003 030c 	and.w	r3, r3, #12
 800b3d8:	2b08      	cmp	r3, #8
 800b3da:	d00d      	beq.n	800b3f8 <HAL_RCC_GetSysClockFreq+0x40>
 800b3dc:	2b08      	cmp	r3, #8
 800b3de:	f200 80a1 	bhi.w	800b524 <HAL_RCC_GetSysClockFreq+0x16c>
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <HAL_RCC_GetSysClockFreq+0x34>
 800b3e6:	2b04      	cmp	r3, #4
 800b3e8:	d003      	beq.n	800b3f2 <HAL_RCC_GetSysClockFreq+0x3a>
 800b3ea:	e09b      	b.n	800b524 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b3ec:	4b53      	ldr	r3, [pc, #332]	@ (800b53c <HAL_RCC_GetSysClockFreq+0x184>)
 800b3ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b3f0:	e09b      	b.n	800b52a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b3f2:	4b53      	ldr	r3, [pc, #332]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x188>)
 800b3f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b3f6:	e098      	b.n	800b52a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b3f8:	4b4f      	ldr	r3, [pc, #316]	@ (800b538 <HAL_RCC_GetSysClockFreq+0x180>)
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b400:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800b402:	4b4d      	ldr	r3, [pc, #308]	@ (800b538 <HAL_RCC_GetSysClockFreq+0x180>)
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d028      	beq.n	800b460 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b40e:	4b4a      	ldr	r3, [pc, #296]	@ (800b538 <HAL_RCC_GetSysClockFreq+0x180>)
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	099b      	lsrs	r3, r3, #6
 800b414:	2200      	movs	r2, #0
 800b416:	623b      	str	r3, [r7, #32]
 800b418:	627a      	str	r2, [r7, #36]	@ 0x24
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b420:	2100      	movs	r1, #0
 800b422:	4b47      	ldr	r3, [pc, #284]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x188>)
 800b424:	fb03 f201 	mul.w	r2, r3, r1
 800b428:	2300      	movs	r3, #0
 800b42a:	fb00 f303 	mul.w	r3, r0, r3
 800b42e:	4413      	add	r3, r2
 800b430:	4a43      	ldr	r2, [pc, #268]	@ (800b540 <HAL_RCC_GetSysClockFreq+0x188>)
 800b432:	fba0 1202 	umull	r1, r2, r0, r2
 800b436:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b438:	460a      	mov	r2, r1
 800b43a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b43c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b43e:	4413      	add	r3, r2
 800b440:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b444:	2200      	movs	r2, #0
 800b446:	61bb      	str	r3, [r7, #24]
 800b448:	61fa      	str	r2, [r7, #28]
 800b44a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b44e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800b452:	f7f5 fc19 	bl	8000c88 <__aeabi_uldivmod>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4613      	mov	r3, r2
 800b45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b45e:	e053      	b.n	800b508 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b460:	4b35      	ldr	r3, [pc, #212]	@ (800b538 <HAL_RCC_GetSysClockFreq+0x180>)
 800b462:	685b      	ldr	r3, [r3, #4]
 800b464:	099b      	lsrs	r3, r3, #6
 800b466:	2200      	movs	r2, #0
 800b468:	613b      	str	r3, [r7, #16]
 800b46a:	617a      	str	r2, [r7, #20]
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800b472:	f04f 0b00 	mov.w	fp, #0
 800b476:	4652      	mov	r2, sl
 800b478:	465b      	mov	r3, fp
 800b47a:	f04f 0000 	mov.w	r0, #0
 800b47e:	f04f 0100 	mov.w	r1, #0
 800b482:	0159      	lsls	r1, r3, #5
 800b484:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b488:	0150      	lsls	r0, r2, #5
 800b48a:	4602      	mov	r2, r0
 800b48c:	460b      	mov	r3, r1
 800b48e:	ebb2 080a 	subs.w	r8, r2, sl
 800b492:	eb63 090b 	sbc.w	r9, r3, fp
 800b496:	f04f 0200 	mov.w	r2, #0
 800b49a:	f04f 0300 	mov.w	r3, #0
 800b49e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800b4a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800b4a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800b4aa:	ebb2 0408 	subs.w	r4, r2, r8
 800b4ae:	eb63 0509 	sbc.w	r5, r3, r9
 800b4b2:	f04f 0200 	mov.w	r2, #0
 800b4b6:	f04f 0300 	mov.w	r3, #0
 800b4ba:	00eb      	lsls	r3, r5, #3
 800b4bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4c0:	00e2      	lsls	r2, r4, #3
 800b4c2:	4614      	mov	r4, r2
 800b4c4:	461d      	mov	r5, r3
 800b4c6:	eb14 030a 	adds.w	r3, r4, sl
 800b4ca:	603b      	str	r3, [r7, #0]
 800b4cc:	eb45 030b 	adc.w	r3, r5, fp
 800b4d0:	607b      	str	r3, [r7, #4]
 800b4d2:	f04f 0200 	mov.w	r2, #0
 800b4d6:	f04f 0300 	mov.w	r3, #0
 800b4da:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b4de:	4629      	mov	r1, r5
 800b4e0:	028b      	lsls	r3, r1, #10
 800b4e2:	4621      	mov	r1, r4
 800b4e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	028a      	lsls	r2, r1, #10
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	60bb      	str	r3, [r7, #8]
 800b4f6:	60fa      	str	r2, [r7, #12]
 800b4f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b4fc:	f7f5 fbc4 	bl	8000c88 <__aeabi_uldivmod>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4613      	mov	r3, r2
 800b506:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800b508:	4b0b      	ldr	r3, [pc, #44]	@ (800b538 <HAL_RCC_GetSysClockFreq+0x180>)
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	0c1b      	lsrs	r3, r3, #16
 800b50e:	f003 0303 	and.w	r3, r3, #3
 800b512:	3301      	adds	r3, #1
 800b514:	005b      	lsls	r3, r3, #1
 800b516:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800b518:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b520:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b522:	e002      	b.n	800b52a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b524:	4b05      	ldr	r3, [pc, #20]	@ (800b53c <HAL_RCC_GetSysClockFreq+0x184>)
 800b526:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800b528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3740      	adds	r7, #64	@ 0x40
 800b530:	46bd      	mov	sp, r7
 800b532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b536:	bf00      	nop
 800b538:	40023800 	.word	0x40023800
 800b53c:	00f42400 	.word	0x00f42400
 800b540:	017d7840 	.word	0x017d7840

0800b544 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b544:	b480      	push	{r7}
 800b546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b548:	4b03      	ldr	r3, [pc, #12]	@ (800b558 <HAL_RCC_GetHCLKFreq+0x14>)
 800b54a:	681b      	ldr	r3, [r3, #0]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
 800b556:	bf00      	nop
 800b558:	20004ed0 	.word	0x20004ed0

0800b55c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b560:	f7ff fff0 	bl	800b544 <HAL_RCC_GetHCLKFreq>
 800b564:	4602      	mov	r2, r0
 800b566:	4b05      	ldr	r3, [pc, #20]	@ (800b57c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	0a9b      	lsrs	r3, r3, #10
 800b56c:	f003 0307 	and.w	r3, r3, #7
 800b570:	4903      	ldr	r1, [pc, #12]	@ (800b580 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b572:	5ccb      	ldrb	r3, [r1, r3]
 800b574:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b578:	4618      	mov	r0, r3
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	40023800 	.word	0x40023800
 800b580:	08016900 	.word	0x08016900

0800b584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b588:	f7ff ffdc 	bl	800b544 <HAL_RCC_GetHCLKFreq>
 800b58c:	4602      	mov	r2, r0
 800b58e:	4b05      	ldr	r3, [pc, #20]	@ (800b5a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	0b5b      	lsrs	r3, r3, #13
 800b594:	f003 0307 	and.w	r3, r3, #7
 800b598:	4903      	ldr	r1, [pc, #12]	@ (800b5a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b59a:	5ccb      	ldrb	r3, [r1, r3]
 800b59c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	40023800 	.word	0x40023800
 800b5a8:	08016900 	.word	0x08016900

0800b5ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f003 0301 	and.w	r3, r3, #1
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d012      	beq.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b5d4:	4b69      	ldr	r3, [pc, #420]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	4a68      	ldr	r2, [pc, #416]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b5de:	6093      	str	r3, [r2, #8]
 800b5e0:	4b66      	ldr	r3, [pc, #408]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5e8:	4964      	ldr	r1, [pc, #400]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b602:	2b00      	cmp	r3, #0
 800b604:	d017      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b606:	4b5d      	ldr	r3, [pc, #372]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b608:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b60c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b614:	4959      	ldr	r1, [pc, #356]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b616:	4313      	orrs	r3, r2
 800b618:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b624:	d101      	bne.n	800b62a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800b626:	2301      	movs	r3, #1
 800b628:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d101      	bne.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800b632:	2301      	movs	r3, #1
 800b634:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d017      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b642:	4b4e      	ldr	r3, [pc, #312]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b648:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b650:	494a      	ldr	r1, [pc, #296]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b652:	4313      	orrs	r3, r2
 800b654:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b65c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b660:	d101      	bne.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800b662:	2301      	movs	r3, #1
 800b664:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800b66e:	2301      	movs	r3, #1
 800b670:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800b67e:	2301      	movs	r3, #1
 800b680:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f003 0320 	and.w	r3, r3, #32
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 808b 	beq.w	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b690:	4b3a      	ldr	r3, [pc, #232]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b694:	4a39      	ldr	r2, [pc, #228]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b69a:	6413      	str	r3, [r2, #64]	@ 0x40
 800b69c:	4b37      	ldr	r3, [pc, #220]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b69e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6a4:	60bb      	str	r3, [r7, #8]
 800b6a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b6a8:	4b35      	ldr	r3, [pc, #212]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a34      	ldr	r2, [pc, #208]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6b4:	f7fc fb10 	bl	8007cd8 <HAL_GetTick>
 800b6b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b6ba:	e008      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6bc:	f7fc fb0c 	bl	8007cd8 <HAL_GetTick>
 800b6c0:	4602      	mov	r2, r0
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	2b64      	cmp	r3, #100	@ 0x64
 800b6c8:	d901      	bls.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800b6ca:	2303      	movs	r3, #3
 800b6cc:	e357      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800b6ce:	4b2c      	ldr	r3, [pc, #176]	@ (800b780 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d0f0      	beq.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b6da:	4b28      	ldr	r3, [pc, #160]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d035      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d02e      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b6f8:	4b20      	ldr	r3, [pc, #128]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b6fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b700:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b702:	4b1e      	ldr	r3, [pc, #120]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b706:	4a1d      	ldr	r2, [pc, #116]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b70c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b70e:	4b1b      	ldr	r3, [pc, #108]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b712:	4a1a      	ldr	r2, [pc, #104]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b714:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b718:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800b71a:	4a18      	ldr	r2, [pc, #96]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b720:	4b16      	ldr	r3, [pc, #88]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b722:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d114      	bne.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b72c:	f7fc fad4 	bl	8007cd8 <HAL_GetTick>
 800b730:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b732:	e00a      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b734:	f7fc fad0 	bl	8007cd8 <HAL_GetTick>
 800b738:	4602      	mov	r2, r0
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	1ad3      	subs	r3, r2, r3
 800b73e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b742:	4293      	cmp	r3, r2
 800b744:	d901      	bls.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800b746:	2303      	movs	r3, #3
 800b748:	e319      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b74a:	4b0c      	ldr	r3, [pc, #48]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b74c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b74e:	f003 0302 	and.w	r3, r3, #2
 800b752:	2b00      	cmp	r3, #0
 800b754:	d0ee      	beq.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b75e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b762:	d111      	bne.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800b764:	4b05      	ldr	r3, [pc, #20]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800b770:	4b04      	ldr	r3, [pc, #16]	@ (800b784 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800b772:	400b      	ands	r3, r1
 800b774:	4901      	ldr	r1, [pc, #4]	@ (800b77c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800b776:	4313      	orrs	r3, r2
 800b778:	608b      	str	r3, [r1, #8]
 800b77a:	e00b      	b.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800b77c:	40023800 	.word	0x40023800
 800b780:	40007000 	.word	0x40007000
 800b784:	0ffffcff 	.word	0x0ffffcff
 800b788:	4baa      	ldr	r3, [pc, #680]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	4aa9      	ldr	r2, [pc, #676]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b78e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b792:	6093      	str	r3, [r2, #8]
 800b794:	4ba7      	ldr	r3, [pc, #668]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b796:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b79c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7a0:	49a4      	ldr	r1, [pc, #656]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7a2:	4313      	orrs	r3, r2
 800b7a4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f003 0310 	and.w	r3, r3, #16
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d010      	beq.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b7b2:	4ba0      	ldr	r3, [pc, #640]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7b8:	4a9e      	ldr	r2, [pc, #632]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b7be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800b7c2:	4b9c      	ldr	r3, [pc, #624]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7cc:	4999      	ldr	r1, [pc, #612]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d00a      	beq.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b7e0:	4b94      	ldr	r3, [pc, #592]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7e6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b7ee:	4991      	ldr	r1, [pc, #580]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b7f0:	4313      	orrs	r3, r2
 800b7f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d00a      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b802:	4b8c      	ldr	r3, [pc, #560]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b808:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b810:	4988      	ldr	r1, [pc, #544]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b812:	4313      	orrs	r3, r2
 800b814:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00a      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b824:	4b83      	ldr	r3, [pc, #524]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b82a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b832:	4980      	ldr	r1, [pc, #512]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b834:	4313      	orrs	r3, r2
 800b836:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00a      	beq.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b846:	4b7b      	ldr	r3, [pc, #492]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b84c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b854:	4977      	ldr	r1, [pc, #476]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b856:	4313      	orrs	r3, r2
 800b858:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b864:	2b00      	cmp	r3, #0
 800b866:	d00a      	beq.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b868:	4b72      	ldr	r3, [pc, #456]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b86a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b86e:	f023 0203 	bic.w	r2, r3, #3
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b876:	496f      	ldr	r1, [pc, #444]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b878:	4313      	orrs	r3, r2
 800b87a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00a      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b88a:	4b6a      	ldr	r3, [pc, #424]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b88c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b890:	f023 020c 	bic.w	r2, r3, #12
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b898:	4966      	ldr	r1, [pc, #408]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b89a:	4313      	orrs	r3, r2
 800b89c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d00a      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b8ac:	4b61      	ldr	r3, [pc, #388]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8b2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8ba:	495e      	ldr	r1, [pc, #376]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00a      	beq.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b8ce:	4b59      	ldr	r3, [pc, #356]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8d4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8dc:	4955      	ldr	r1, [pc, #340]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00a      	beq.n	800b906 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b8f0:	4b50      	ldr	r3, [pc, #320]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b8f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8fe:	494d      	ldr	r1, [pc, #308]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b900:	4313      	orrs	r3, r2
 800b902:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800b912:	4b48      	ldr	r3, [pc, #288]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b918:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b920:	4944      	ldr	r1, [pc, #272]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b922:	4313      	orrs	r3, r2
 800b924:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00a      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800b934:	4b3f      	ldr	r3, [pc, #252]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b93a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b942:	493c      	ldr	r1, [pc, #240]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b944:	4313      	orrs	r3, r2
 800b946:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800b956:	4b37      	ldr	r3, [pc, #220]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b95c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b964:	4933      	ldr	r1, [pc, #204]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b966:	4313      	orrs	r3, r2
 800b968:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00a      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b978:	4b2e      	ldr	r3, [pc, #184]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b97a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b97e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b986:	492b      	ldr	r1, [pc, #172]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b988:	4313      	orrs	r3, r2
 800b98a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b996:	2b00      	cmp	r3, #0
 800b998:	d011      	beq.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b99a:	4b26      	ldr	r3, [pc, #152]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9a0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9a8:	4922      	ldr	r1, [pc, #136]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b9b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9b8:	d101      	bne.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 0308 	and.w	r3, r3, #8
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00a      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b9da:	4b16      	ldr	r3, [pc, #88]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9e0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b9e8:	4912      	ldr	r1, [pc, #72]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00b      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b9fc:	4b0d      	ldr	r3, [pc, #52]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800b9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba02:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba0c:	4909      	ldr	r1, [pc, #36]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba0e:	4313      	orrs	r3, r2
 800ba10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d006      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f000 80d9 	beq.w	800bbda <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ba28:	4b02      	ldr	r3, [pc, #8]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a01      	ldr	r2, [pc, #4]	@ (800ba34 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ba2e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ba32:	e001      	b.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800ba34:	40023800 	.word	0x40023800
 800ba38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba3a:	f7fc f94d 	bl	8007cd8 <HAL_GetTick>
 800ba3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ba40:	e008      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ba42:	f7fc f949 	bl	8007cd8 <HAL_GetTick>
 800ba46:	4602      	mov	r2, r0
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	2b64      	cmp	r3, #100	@ 0x64
 800ba4e:	d901      	bls.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e194      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ba54:	4b6c      	ldr	r3, [pc, #432]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1f0      	bne.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 0301 	and.w	r3, r3, #1
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d021      	beq.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d11d      	bne.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ba74:	4b64      	ldr	r3, [pc, #400]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba7a:	0c1b      	lsrs	r3, r3, #16
 800ba7c:	f003 0303 	and.w	r3, r3, #3
 800ba80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ba82:	4b61      	ldr	r3, [pc, #388]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ba84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ba88:	0e1b      	lsrs	r3, r3, #24
 800ba8a:	f003 030f 	and.w	r3, r3, #15
 800ba8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	019a      	lsls	r2, r3, #6
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	041b      	lsls	r3, r3, #16
 800ba9a:	431a      	orrs	r2, r3
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	061b      	lsls	r3, r3, #24
 800baa0:	431a      	orrs	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	071b      	lsls	r3, r3, #28
 800baa8:	4957      	ldr	r1, [pc, #348]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800baaa:	4313      	orrs	r3, r2
 800baac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d004      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bac4:	d00a      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d02e      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bad6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bada:	d129      	bne.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800badc:	4b4a      	ldr	r3, [pc, #296]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bae2:	0c1b      	lsrs	r3, r3, #16
 800bae4:	f003 0303 	and.w	r3, r3, #3
 800bae8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800baea:	4b47      	ldr	r3, [pc, #284]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800baec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800baf0:	0f1b      	lsrs	r3, r3, #28
 800baf2:	f003 0307 	and.w	r3, r3, #7
 800baf6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	019a      	lsls	r2, r3, #6
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	041b      	lsls	r3, r3, #16
 800bb02:	431a      	orrs	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	061b      	lsls	r3, r3, #24
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	071b      	lsls	r3, r3, #28
 800bb10:	493d      	ldr	r1, [pc, #244]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb12:	4313      	orrs	r3, r2
 800bb14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bb18:	4b3b      	ldr	r3, [pc, #236]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb1e:	f023 021f 	bic.w	r2, r3, #31
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb26:	3b01      	subs	r3, #1
 800bb28:	4937      	ldr	r1, [pc, #220]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d01d      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bb3c:	4b32      	ldr	r3, [pc, #200]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb42:	0e1b      	lsrs	r3, r3, #24
 800bb44:	f003 030f 	and.w	r3, r3, #15
 800bb48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bb4a:	4b2f      	ldr	r3, [pc, #188]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bb50:	0f1b      	lsrs	r3, r3, #28
 800bb52:	f003 0307 	and.w	r3, r3, #7
 800bb56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	019a      	lsls	r2, r3, #6
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	041b      	lsls	r3, r3, #16
 800bb64:	431a      	orrs	r2, r3
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	061b      	lsls	r3, r3, #24
 800bb6a:	431a      	orrs	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	071b      	lsls	r3, r3, #28
 800bb70:	4925      	ldr	r1, [pc, #148]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bb72:	4313      	orrs	r3, r2
 800bb74:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d011      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	019a      	lsls	r2, r3, #6
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	041b      	lsls	r3, r3, #16
 800bb90:	431a      	orrs	r2, r3
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	061b      	lsls	r3, r3, #24
 800bb98:	431a      	orrs	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	071b      	lsls	r3, r3, #28
 800bba0:	4919      	ldr	r1, [pc, #100]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bba2:	4313      	orrs	r3, r2
 800bba4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bba8:	4b17      	ldr	r3, [pc, #92]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	4a16      	ldr	r2, [pc, #88]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bbb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbb4:	f7fc f890 	bl	8007cd8 <HAL_GetTick>
 800bbb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bbba:	e008      	b.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800bbbc:	f7fc f88c 	bl	8007cd8 <HAL_GetTick>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	2b64      	cmp	r3, #100	@ 0x64
 800bbc8:	d901      	bls.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	e0d7      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bbce:	4b0e      	ldr	r3, [pc, #56]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d0f0      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	f040 80cd 	bne.w	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bbe2:	4b09      	ldr	r3, [pc, #36]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	4a08      	ldr	r2, [pc, #32]	@ (800bc08 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800bbe8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbee:	f7fc f873 	bl	8007cd8 <HAL_GetTick>
 800bbf2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bbf4:	e00a      	b.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bbf6:	f7fc f86f 	bl	8007cd8 <HAL_GetTick>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	2b64      	cmp	r3, #100	@ 0x64
 800bc02:	d903      	bls.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bc04:	2303      	movs	r3, #3
 800bc06:	e0ba      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800bc08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bc0c:	4b5e      	ldr	r3, [pc, #376]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc18:	d0ed      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d009      	beq.n	800bc42 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d02e      	beq.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d12a      	bne.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bc42:	4b51      	ldr	r3, [pc, #324]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc48:	0c1b      	lsrs	r3, r3, #16
 800bc4a:	f003 0303 	and.w	r3, r3, #3
 800bc4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bc50:	4b4d      	ldr	r3, [pc, #308]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc56:	0f1b      	lsrs	r3, r3, #28
 800bc58:	f003 0307 	and.w	r3, r3, #7
 800bc5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	019a      	lsls	r2, r3, #6
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	041b      	lsls	r3, r3, #16
 800bc68:	431a      	orrs	r2, r3
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	699b      	ldr	r3, [r3, #24]
 800bc6e:	061b      	lsls	r3, r3, #24
 800bc70:	431a      	orrs	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	071b      	lsls	r3, r3, #28
 800bc76:	4944      	ldr	r1, [pc, #272]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bc7e:	4b42      	ldr	r3, [pc, #264]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc84:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	021b      	lsls	r3, r3, #8
 800bc90:	493d      	ldr	r1, [pc, #244]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bc92:	4313      	orrs	r3, r2
 800bc94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d022      	beq.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bcac:	d11d      	bne.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bcae:	4b36      	ldr	r3, [pc, #216]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcb4:	0e1b      	lsrs	r3, r3, #24
 800bcb6:	f003 030f 	and.w	r3, r3, #15
 800bcba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bcbc:	4b32      	ldr	r3, [pc, #200]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcc2:	0f1b      	lsrs	r3, r3, #28
 800bcc4:	f003 0307 	and.w	r3, r3, #7
 800bcc8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	695b      	ldr	r3, [r3, #20]
 800bcce:	019a      	lsls	r2, r3, #6
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a1b      	ldr	r3, [r3, #32]
 800bcd4:	041b      	lsls	r3, r3, #16
 800bcd6:	431a      	orrs	r2, r3
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	061b      	lsls	r3, r3, #24
 800bcdc:	431a      	orrs	r2, r3
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	071b      	lsls	r3, r3, #28
 800bce2:	4929      	ldr	r1, [pc, #164]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bce4:	4313      	orrs	r3, r2
 800bce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f003 0308 	and.w	r3, r3, #8
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d028      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bcf6:	4b24      	ldr	r3, [pc, #144]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bcf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bcfc:	0e1b      	lsrs	r3, r3, #24
 800bcfe:	f003 030f 	and.w	r3, r3, #15
 800bd02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800bd04:	4b20      	ldr	r3, [pc, #128]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd0a:	0c1b      	lsrs	r3, r3, #16
 800bd0c:	f003 0303 	and.w	r3, r3, #3
 800bd10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	695b      	ldr	r3, [r3, #20]
 800bd16:	019a      	lsls	r2, r3, #6
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	041b      	lsls	r3, r3, #16
 800bd1c:	431a      	orrs	r2, r3
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	061b      	lsls	r3, r3, #24
 800bd22:	431a      	orrs	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	69db      	ldr	r3, [r3, #28]
 800bd28:	071b      	lsls	r3, r3, #28
 800bd2a:	4917      	ldr	r1, [pc, #92]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd2c:	4313      	orrs	r3, r2
 800bd2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800bd32:	4b15      	ldr	r3, [pc, #84]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd38:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd40:	4911      	ldr	r1, [pc, #68]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd42:	4313      	orrs	r3, r2
 800bd44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bd48:	4b0f      	ldr	r3, [pc, #60]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a0e      	ldr	r2, [pc, #56]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd54:	f7fb ffc0 	bl	8007cd8 <HAL_GetTick>
 800bd58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bd5a:	e008      	b.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800bd5c:	f7fb ffbc 	bl	8007cd8 <HAL_GetTick>
 800bd60:	4602      	mov	r2, r0
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	1ad3      	subs	r3, r2, r3
 800bd66:	2b64      	cmp	r3, #100	@ 0x64
 800bd68:	d901      	bls.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	e007      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bd6e:	4b06      	ldr	r3, [pc, #24]	@ (800bd88 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd7a:	d1ef      	bne.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800bd7c:	2300      	movs	r3, #0
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3720      	adds	r7, #32
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop
 800bd88:	40023800 	.word	0x40023800

0800bd8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	e071      	b.n	800be86 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	7f5b      	ldrb	r3, [r3, #29]
 800bda6:	b2db      	uxtb	r3, r3
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d105      	bne.n	800bdb8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2200      	movs	r2, #0
 800bdb0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7f8 ff64 	bl	8004c80 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	f003 0310 	and.w	r3, r3, #16
 800bdc8:	2b10      	cmp	r3, #16
 800bdca:	d053      	beq.n	800be74 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	22ca      	movs	r2, #202	@ 0xca
 800bdd2:	625a      	str	r2, [r3, #36]	@ 0x24
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	2253      	movs	r2, #83	@ 0x53
 800bdda:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 fbdf 	bl	800c5a0 <RTC_EnterInitMode>
 800bde2:	4603      	mov	r3, r0
 800bde4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800bde6:	7bfb      	ldrb	r3, [r7, #15]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d12a      	bne.n	800be42 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	6899      	ldr	r1, [r3, #8]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	4b26      	ldr	r3, [pc, #152]	@ (800be90 <HAL_RTC_Init+0x104>)
 800bdf8:	400b      	ands	r3, r1
 800bdfa:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6899      	ldr	r1, [r3, #8]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	685a      	ldr	r2, [r3, #4]
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	431a      	orrs	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	695b      	ldr	r3, [r3, #20]
 800be10:	431a      	orrs	r2, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	430a      	orrs	r2, r1
 800be18:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	68d2      	ldr	r2, [r2, #12]
 800be22:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6919      	ldr	r1, [r3, #16]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	041a      	lsls	r2, r3, #16
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	430a      	orrs	r2, r1
 800be36:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fbe8 	bl	800c60e <RTC_ExitInitMode>
 800be3e:	4603      	mov	r3, r0
 800be40:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800be42:	7bfb      	ldrb	r3, [r7, #15]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d110      	bne.n	800be6a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f022 0208 	bic.w	r2, r2, #8
 800be56:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	699a      	ldr	r2, [r3, #24]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	430a      	orrs	r2, r1
 800be68:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	22ff      	movs	r2, #255	@ 0xff
 800be70:	625a      	str	r2, [r3, #36]	@ 0x24
 800be72:	e001      	b.n	800be78 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800be74:	2300      	movs	r3, #0
 800be76:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800be78:	7bfb      	ldrb	r3, [r7, #15]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d102      	bne.n	800be84 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800be84:	7bfb      	ldrb	r3, [r7, #15]
}
 800be86:	4618      	mov	r0, r3
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	ff8fffbf 	.word	0xff8fffbf

0800be94 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800be94:	b590      	push	{r4, r7, lr}
 800be96:	b087      	sub	sp, #28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bea0:	2300      	movs	r3, #0
 800bea2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	7f1b      	ldrb	r3, [r3, #28]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d101      	bne.n	800beb0 <HAL_RTC_SetTime+0x1c>
 800beac:	2302      	movs	r3, #2
 800beae:	e085      	b.n	800bfbc <HAL_RTC_SetTime+0x128>
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2201      	movs	r2, #1
 800beb4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2202      	movs	r2, #2
 800beba:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d126      	bne.n	800bf10 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800becc:	2b00      	cmp	r3, #0
 800bece:	d102      	bne.n	800bed6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	2200      	movs	r2, #0
 800bed4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	4618      	mov	r0, r3
 800bedc:	f000 fbbc 	bl	800c658 <RTC_ByteToBcd2>
 800bee0:	4603      	mov	r3, r0
 800bee2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	785b      	ldrb	r3, [r3, #1]
 800bee8:	4618      	mov	r0, r3
 800beea:	f000 fbb5 	bl	800c658 <RTC_ByteToBcd2>
 800beee:	4603      	mov	r3, r0
 800bef0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bef2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	789b      	ldrb	r3, [r3, #2]
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 fbad 	bl	800c658 <RTC_ByteToBcd2>
 800befe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bf00:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	78db      	ldrb	r3, [r3, #3]
 800bf08:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	617b      	str	r3, [r7, #20]
 800bf0e:	e018      	b.n	800bf42 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d102      	bne.n	800bf24 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	2200      	movs	r2, #0
 800bf22:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	785b      	ldrb	r3, [r3, #1]
 800bf2e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bf30:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bf36:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	78db      	ldrb	r3, [r3, #3]
 800bf3c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	22ca      	movs	r2, #202	@ 0xca
 800bf48:	625a      	str	r2, [r3, #36]	@ 0x24
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	2253      	movs	r2, #83	@ 0x53
 800bf50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bf52:	68f8      	ldr	r0, [r7, #12]
 800bf54:	f000 fb24 	bl	800c5a0 <RTC_EnterInitMode>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bf5c:	7cfb      	ldrb	r3, [r7, #19]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d11e      	bne.n	800bfa0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	6979      	ldr	r1, [r7, #20]
 800bf68:	4b16      	ldr	r3, [pc, #88]	@ (800bfc4 <HAL_RTC_SetTime+0x130>)
 800bf6a:	400b      	ands	r3, r1
 800bf6c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bf7c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6899      	ldr	r1, [r3, #8]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	68da      	ldr	r2, [r3, #12]
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	431a      	orrs	r2, r3
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	430a      	orrs	r2, r1
 800bf94:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bf96:	68f8      	ldr	r0, [r7, #12]
 800bf98:	f000 fb39 	bl	800c60e <RTC_ExitInitMode>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bfa0:	7cfb      	ldrb	r3, [r7, #19]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d102      	bne.n	800bfac <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2201      	movs	r2, #1
 800bfaa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	22ff      	movs	r2, #255	@ 0xff
 800bfb2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	771a      	strb	r2, [r3, #28]

  return status;
 800bfba:	7cfb      	ldrb	r3, [r7, #19]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd90      	pop	{r4, r7, pc}
 800bfc4:	007f7f7f 	.word	0x007f7f7f

0800bfc8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	691b      	ldr	r3, [r3, #16]
 800bfe8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	4b22      	ldr	r3, [pc, #136]	@ (800c080 <HAL_RTC_GetTime+0xb8>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	0c1b      	lsrs	r3, r3, #16
 800c000:	b2db      	uxtb	r3, r3
 800c002:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c006:	b2da      	uxtb	r2, r3
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	0a1b      	lsrs	r3, r3, #8
 800c010:	b2db      	uxtb	r3, r3
 800c012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c016:	b2da      	uxtb	r2, r3
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800c01c:	697b      	ldr	r3, [r7, #20]
 800c01e:	b2db      	uxtb	r3, r3
 800c020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c024:	b2da      	uxtb	r2, r3
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	0d9b      	lsrs	r3, r3, #22
 800c02e:	b2db      	uxtb	r3, r3
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	b2da      	uxtb	r2, r3
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d11a      	bne.n	800c076 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	4618      	mov	r0, r3
 800c046:	f000 fb25 	bl	800c694 <RTC_Bcd2ToByte>
 800c04a:	4603      	mov	r3, r0
 800c04c:	461a      	mov	r2, r3
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	785b      	ldrb	r3, [r3, #1]
 800c056:	4618      	mov	r0, r3
 800c058:	f000 fb1c 	bl	800c694 <RTC_Bcd2ToByte>
 800c05c:	4603      	mov	r3, r0
 800c05e:	461a      	mov	r2, r3
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	789b      	ldrb	r3, [r3, #2]
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 fb13 	bl	800c694 <RTC_Bcd2ToByte>
 800c06e:	4603      	mov	r3, r0
 800c070:	461a      	mov	r2, r3
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3718      	adds	r7, #24
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	007f7f7f 	.word	0x007f7f7f

0800c084 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c084:	b590      	push	{r4, r7, lr}
 800c086:	b087      	sub	sp, #28
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c090:	2300      	movs	r3, #0
 800c092:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	7f1b      	ldrb	r3, [r3, #28]
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d101      	bne.n	800c0a0 <HAL_RTC_SetDate+0x1c>
 800c09c:	2302      	movs	r3, #2
 800c09e:	e06f      	b.n	800c180 <HAL_RTC_SetDate+0xfc>
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2202      	movs	r2, #2
 800c0aa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d10e      	bne.n	800c0d0 <HAL_RTC_SetDate+0x4c>
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	785b      	ldrb	r3, [r3, #1]
 800c0b6:	f003 0310 	and.w	r3, r3, #16
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d008      	beq.n	800c0d0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	785b      	ldrb	r3, [r3, #1]
 800c0c2:	f023 0310 	bic.w	r3, r3, #16
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	330a      	adds	r3, #10
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d11c      	bne.n	800c110 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	78db      	ldrb	r3, [r3, #3]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 fabc 	bl	800c658 <RTC_ByteToBcd2>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	785b      	ldrb	r3, [r3, #1]
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f000 fab5 	bl	800c658 <RTC_ByteToBcd2>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c0f2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	789b      	ldrb	r3, [r3, #2]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f000 faad 	bl	800c658 <RTC_ByteToBcd2>
 800c0fe:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c100:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c10a:	4313      	orrs	r3, r2
 800c10c:	617b      	str	r3, [r7, #20]
 800c10e:	e00e      	b.n	800c12e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	78db      	ldrb	r3, [r3, #3]
 800c114:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	785b      	ldrb	r3, [r3, #1]
 800c11a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c11c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c122:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c12a:	4313      	orrs	r3, r2
 800c12c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	22ca      	movs	r2, #202	@ 0xca
 800c134:	625a      	str	r2, [r3, #36]	@ 0x24
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2253      	movs	r2, #83	@ 0x53
 800c13c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c13e:	68f8      	ldr	r0, [r7, #12]
 800c140:	f000 fa2e 	bl	800c5a0 <RTC_EnterInitMode>
 800c144:	4603      	mov	r3, r0
 800c146:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c148:	7cfb      	ldrb	r3, [r7, #19]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10a      	bne.n	800c164 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	6979      	ldr	r1, [r7, #20]
 800c154:	4b0c      	ldr	r3, [pc, #48]	@ (800c188 <HAL_RTC_SetDate+0x104>)
 800c156:	400b      	ands	r3, r1
 800c158:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c15a:	68f8      	ldr	r0, [r7, #12]
 800c15c:	f000 fa57 	bl	800c60e <RTC_ExitInitMode>
 800c160:	4603      	mov	r3, r0
 800c162:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c164:	7cfb      	ldrb	r3, [r7, #19]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d102      	bne.n	800c170 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2201      	movs	r2, #1
 800c16e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	22ff      	movs	r2, #255	@ 0xff
 800c176:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	2200      	movs	r2, #0
 800c17c:	771a      	strb	r2, [r3, #28]

  return status;
 800c17e:	7cfb      	ldrb	r3, [r7, #19]
}
 800c180:	4618      	mov	r0, r3
 800c182:	371c      	adds	r7, #28
 800c184:	46bd      	mov	sp, r7
 800c186:	bd90      	pop	{r4, r7, pc}
 800c188:	00ffff3f 	.word	0x00ffff3f

0800c18c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b086      	sub	sp, #24
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c198:	2300      	movs	r3, #0
 800c19a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	4b21      	ldr	r3, [pc, #132]	@ (800c228 <HAL_RTC_GetDate+0x9c>)
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	0c1b      	lsrs	r3, r3, #16
 800c1ac:	b2da      	uxtb	r2, r3
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	0a1b      	lsrs	r3, r3, #8
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	f003 031f 	and.w	r3, r3, #31
 800c1bc:	b2da      	uxtb	r2, r3
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1ca:	b2da      	uxtb	r2, r3
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	0b5b      	lsrs	r3, r3, #13
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	f003 0307 	and.w	r3, r3, #7
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d11a      	bne.n	800c21c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c1e6:	68bb      	ldr	r3, [r7, #8]
 800c1e8:	78db      	ldrb	r3, [r3, #3]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f000 fa52 	bl	800c694 <RTC_Bcd2ToByte>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	785b      	ldrb	r3, [r3, #1]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f000 fa49 	bl	800c694 <RTC_Bcd2ToByte>
 800c202:	4603      	mov	r3, r0
 800c204:	461a      	mov	r2, r3
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	789b      	ldrb	r3, [r3, #2]
 800c20e:	4618      	mov	r0, r3
 800c210:	f000 fa40 	bl	800c694 <RTC_Bcd2ToByte>
 800c214:	4603      	mov	r3, r0
 800c216:	461a      	mov	r2, r3
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3718      	adds	r7, #24
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	00ffff3f 	.word	0x00ffff3f

0800c22c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800c22c:	b590      	push	{r4, r7, lr}
 800c22e:	b089      	sub	sp, #36	@ 0x24
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800c238:	4b9b      	ldr	r3, [pc, #620]	@ (800c4a8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a9b      	ldr	r2, [pc, #620]	@ (800c4ac <HAL_RTC_SetAlarm_IT+0x280>)
 800c23e:	fba2 2303 	umull	r2, r3, r2, r3
 800c242:	0adb      	lsrs	r3, r3, #11
 800c244:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c248:	fb02 f303 	mul.w	r3, r2, r3
 800c24c:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800c24e:	2300      	movs	r3, #0
 800c250:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800c252:	2300      	movs	r3, #0
 800c254:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	7f1b      	ldrb	r3, [r3, #28]
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d101      	bne.n	800c262 <HAL_RTC_SetAlarm_IT+0x36>
 800c25e:	2302      	movs	r3, #2
 800c260:	e11e      	b.n	800c4a0 <HAL_RTC_SetAlarm_IT+0x274>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2201      	movs	r2, #1
 800c266:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2202      	movs	r2, #2
 800c26c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d137      	bne.n	800c2e4 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d102      	bne.n	800c288 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	2200      	movs	r2, #0
 800c286:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	4618      	mov	r0, r3
 800c28e:	f000 f9e3 	bl	800c658 <RTC_ByteToBcd2>
 800c292:	4603      	mov	r3, r0
 800c294:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	785b      	ldrb	r3, [r3, #1]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f000 f9dc 	bl	800c658 <RTC_ByteToBcd2>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c2a4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	789b      	ldrb	r3, [r3, #2]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 f9d4 	bl	800c658 <RTC_ByteToBcd2>
 800c2b0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800c2b2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	78db      	ldrb	r3, [r3, #3]
 800c2ba:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800c2bc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 f9c6 	bl	800c658 <RTC_ByteToBcd2>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800c2d0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800c2d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	61fb      	str	r3, [r7, #28]
 800c2e2:	e023      	b.n	800c32c <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d102      	bne.n	800c2f8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800c2f2:	68bb      	ldr	r3, [r7, #8]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	785b      	ldrb	r3, [r3, #1]
 800c302:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c304:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800c30a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	78db      	ldrb	r3, [r3, #3]
 800c310:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800c312:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c31a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800c31c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800c322:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800c328:	4313      	orrs	r3, r2
 800c32a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800c334:	4313      	orrs	r3, r2
 800c336:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	22ca      	movs	r2, #202	@ 0xca
 800c33e:	625a      	str	r2, [r3, #36]	@ 0x24
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	2253      	movs	r2, #83	@ 0x53
 800c346:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c34c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c350:	d142      	bne.n	800c3d8 <HAL_RTC_SetAlarm_IT+0x1ac>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	689a      	ldr	r2, [r3, #8]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c360:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	b2da      	uxtb	r2, r3
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800c372:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	3b01      	subs	r3, #1
 800c378:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d10b      	bne.n	800c398 <HAL_RTC_SetAlarm_IT+0x16c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	22ff      	movs	r2, #255	@ 0xff
 800c386:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2203      	movs	r2, #3
 800c38c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2200      	movs	r2, #0
 800c392:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c394:	2303      	movs	r3, #3
 800c396:	e083      	b.n	800c4a0 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	f003 0301 	and.w	r3, r3, #1
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d0e6      	beq.n	800c374 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	69fa      	ldr	r2, [r7, #28]
 800c3ac:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	69ba      	ldr	r2, [r7, #24]
 800c3b4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	689a      	ldr	r2, [r3, #8]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c3c4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	689a      	ldr	r2, [r3, #8]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c3d4:	609a      	str	r2, [r3, #8]
 800c3d6:	e04c      	b.n	800c472 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	689a      	ldr	r2, [r3, #8]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800c3e6:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800c3f8:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800c3fa:	4b2b      	ldr	r3, [pc, #172]	@ (800c4a8 <HAL_RTC_SetAlarm_IT+0x27c>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a2b      	ldr	r2, [pc, #172]	@ (800c4ac <HAL_RTC_SetAlarm_IT+0x280>)
 800c400:	fba2 2303 	umull	r2, r3, r2, r3
 800c404:	0adb      	lsrs	r3, r3, #11
 800c406:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c40a:	fb02 f303 	mul.w	r3, r2, r3
 800c40e:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	3b01      	subs	r3, #1
 800c414:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d10b      	bne.n	800c434 <HAL_RTC_SetAlarm_IT+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	22ff      	movs	r2, #255	@ 0xff
 800c422:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2203      	movs	r2, #3
 800c428:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2200      	movs	r2, #0
 800c42e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c430:	2303      	movs	r3, #3
 800c432:	e035      	b.n	800c4a0 <HAL_RTC_SetAlarm_IT+0x274>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	f003 0302 	and.w	r3, r3, #2
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0e6      	beq.n	800c410 <HAL_RTC_SetAlarm_IT+0x1e4>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	69fa      	ldr	r2, [r7, #28]
 800c448:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	69ba      	ldr	r2, [r7, #24]
 800c450:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	689a      	ldr	r2, [r3, #8]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c460:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	689a      	ldr	r2, [r3, #8]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c470:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800c472:	4b0f      	ldr	r3, [pc, #60]	@ (800c4b0 <HAL_RTC_SetAlarm_IT+0x284>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a0e      	ldr	r2, [pc, #56]	@ (800c4b0 <HAL_RTC_SetAlarm_IT+0x284>)
 800c478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c47c:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800c47e:	4b0c      	ldr	r3, [pc, #48]	@ (800c4b0 <HAL_RTC_SetAlarm_IT+0x284>)
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	4a0b      	ldr	r2, [pc, #44]	@ (800c4b0 <HAL_RTC_SetAlarm_IT+0x284>)
 800c484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c488:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	22ff      	movs	r2, #255	@ 0xff
 800c490:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2201      	movs	r2, #1
 800c496:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2200      	movs	r2, #0
 800c49c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c49e:	2300      	movs	r3, #0
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3724      	adds	r7, #36	@ 0x24
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd90      	pop	{r4, r7, pc}
 800c4a8:	20004ed0 	.word	0x20004ed0
 800c4ac:	10624dd3 	.word	0x10624dd3
 800c4b0:	40013c00 	.word	0x40013c00

0800c4b4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800c4bc:	4b1f      	ldr	r3, [pc, #124]	@ (800c53c <HAL_RTC_AlarmIRQHandler+0x88>)
 800c4be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800c4c2:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d012      	beq.n	800c4f8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	68db      	ldr	r3, [r3, #12]
 800c4d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d00b      	beq.n	800c4f8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 800c4f0:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f824 	bl	800c540 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	689b      	ldr	r3, [r3, #8]
 800c4fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d012      	beq.n	800c52c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00b      	beq.n	800c52c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	b2da      	uxtb	r2, r3
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800c524:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 f9c2 	bl	800c8b0 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2201      	movs	r2, #1
 800c530:	775a      	strb	r2, [r3, #29]
}
 800c532:	bf00      	nop
 800c534:	3708      	adds	r7, #8
 800c536:	46bd      	mov	sp, r7
 800c538:	bd80      	pop	{r7, pc}
 800c53a:	bf00      	nop
 800c53c:	40013c00 	.word	0x40013c00

0800c540 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800c548:	bf00      	nop
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr

0800c554 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b084      	sub	sp, #16
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c55c:	2300      	movs	r3, #0
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a0d      	ldr	r2, [pc, #52]	@ (800c59c <HAL_RTC_WaitForSynchro+0x48>)
 800c566:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c568:	f7fb fbb6 	bl	8007cd8 <HAL_GetTick>
 800c56c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c56e:	e009      	b.n	800c584 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c570:	f7fb fbb2 	bl	8007cd8 <HAL_GetTick>
 800c574:	4602      	mov	r2, r0
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c57e:	d901      	bls.n	800c584 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800c580:	2303      	movs	r3, #3
 800c582:	e007      	b.n	800c594 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	f003 0320 	and.w	r3, r3, #32
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d0ee      	beq.n	800c570 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800c592:	2300      	movs	r3, #0
}
 800c594:	4618      	mov	r0, r3
 800c596:	3710      	adds	r7, #16
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	0001ff5f 	.word	0x0001ff5f

0800c5a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b084      	sub	sp, #16
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d122      	bne.n	800c604 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68da      	ldr	r2, [r3, #12]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c5cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c5ce:	f7fb fb83 	bl	8007cd8 <HAL_GetTick>
 800c5d2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c5d4:	e00c      	b.n	800c5f0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c5d6:	f7fb fb7f 	bl	8007cd8 <HAL_GetTick>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c5e4:	d904      	bls.n	800c5f0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2204      	movs	r2, #4
 800c5ea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d102      	bne.n	800c604 <RTC_EnterInitMode+0x64>
 800c5fe:	7bfb      	ldrb	r3, [r7, #15]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d1e8      	bne.n	800c5d6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800c604:	7bfb      	ldrb	r3, [r7, #15]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}

0800c60e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c60e:	b580      	push	{r7, lr}
 800c610:	b084      	sub	sp, #16
 800c612:	af00      	add	r7, sp, #0
 800c614:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	68da      	ldr	r2, [r3, #12]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c628:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	689b      	ldr	r3, [r3, #8]
 800c630:	f003 0320 	and.w	r3, r3, #32
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10a      	bne.n	800c64e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f7ff ff8b 	bl	800c554 <HAL_RTC_WaitForSynchro>
 800c63e:	4603      	mov	r3, r0
 800c640:	2b00      	cmp	r3, #0
 800c642:	d004      	beq.n	800c64e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2204      	movs	r2, #4
 800c648:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800c64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c650:	4618      	mov	r0, r3
 800c652:	3710      	adds	r7, #16
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800c658:	b480      	push	{r7}
 800c65a:	b085      	sub	sp, #20
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	4603      	mov	r3, r0
 800c660:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c662:	2300      	movs	r3, #0
 800c664:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800c666:	e005      	b.n	800c674 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	3301      	adds	r3, #1
 800c66c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800c66e:	79fb      	ldrb	r3, [r7, #7]
 800c670:	3b0a      	subs	r3, #10
 800c672:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c674:	79fb      	ldrb	r3, [r7, #7]
 800c676:	2b09      	cmp	r3, #9
 800c678:	d8f6      	bhi.n	800c668 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	011b      	lsls	r3, r3, #4
 800c680:	b2da      	uxtb	r2, r3
 800c682:	79fb      	ldrb	r3, [r7, #7]
 800c684:	4313      	orrs	r3, r2
 800c686:	b2db      	uxtb	r3, r3
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3714      	adds	r7, #20
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800c694:	b480      	push	{r7}
 800c696:	b085      	sub	sp, #20
 800c698:	af00      	add	r7, sp, #0
 800c69a:	4603      	mov	r3, r0
 800c69c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800c6a2:	79fb      	ldrb	r3, [r7, #7]
 800c6a4:	091b      	lsrs	r3, r3, #4
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4613      	mov	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4413      	add	r3, r2
 800c6b0:	005b      	lsls	r3, r3, #1
 800c6b2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	79fb      	ldrb	r3, [r7, #7]
 800c6ba:	f003 030f 	and.w	r3, r3, #15
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	4413      	add	r3, r2
 800c6c2:	b2db      	uxtb	r3, r3
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3714      	adds	r7, #20
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b087      	sub	sp, #28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800c6dc:	4b5a      	ldr	r3, [pc, #360]	@ (800c848 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a5a      	ldr	r2, [pc, #360]	@ (800c84c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e6:	0adb      	lsrs	r3, r3, #11
 800c6e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c6ec:	fb02 f303 	mul.w	r3, r2, r3
 800c6f0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	7f1b      	ldrb	r3, [r3, #28]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d101      	bne.n	800c6fe <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800c6fa:	2302      	movs	r3, #2
 800c6fc:	e09d      	b.n	800c83a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2201      	movs	r2, #1
 800c702:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2202      	movs	r2, #2
 800c708:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	22ca      	movs	r2, #202	@ 0xca
 800c710:	625a      	str	r2, [r3, #36]	@ 0x24
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	2253      	movs	r2, #83	@ 0x53
 800c718:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c724:	2b00      	cmp	r3, #0
 800c726:	d018      	beq.n	800c75a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800c728:	697b      	ldr	r3, [r7, #20]
 800c72a:	3b01      	subs	r3, #1
 800c72c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d10b      	bne.n	800c74c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	22ff      	movs	r2, #255	@ 0xff
 800c73a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2203      	movs	r2, #3
 800c740:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2200      	movs	r2, #0
 800c746:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800c748:	2303      	movs	r3, #3
 800c74a:	e076      	b.n	800c83a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	f003 0304 	and.w	r3, r3, #4
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1e6      	bne.n	800c728 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c768:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	b2da      	uxtb	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800c77a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800c77c:	4b32      	ldr	r3, [pc, #200]	@ (800c848 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a32      	ldr	r2, [pc, #200]	@ (800c84c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800c782:	fba2 2303 	umull	r2, r3, r2, r3
 800c786:	0adb      	lsrs	r3, r3, #11
 800c788:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c78c:	fb02 f303 	mul.w	r3, r2, r3
 800c790:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	3b01      	subs	r3, #1
 800c796:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10b      	bne.n	800c7b6 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	22ff      	movs	r2, #255	@ 0xff
 800c7a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2203      	movs	r2, #3
 800c7aa:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800c7b2:	2303      	movs	r3, #3
 800c7b4:	e041      	b.n	800c83a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	f003 0304 	and.w	r3, r3, #4
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d0e6      	beq.n	800c792 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	689a      	ldr	r2, [r3, #8]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f022 0207 	bic.w	r2, r2, #7
 800c7d2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	6899      	ldr	r1, [r3, #8]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	430a      	orrs	r2, r1
 800c7e2:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	68ba      	ldr	r2, [r7, #8]
 800c7ea:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800c7ec:	4b18      	ldr	r3, [pc, #96]	@ (800c850 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a17      	ldr	r2, [pc, #92]	@ (800c850 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800c7f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c7f6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800c7f8:	4b15      	ldr	r3, [pc, #84]	@ (800c850 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	4a14      	ldr	r2, [pc, #80]	@ (800c850 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800c7fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c802:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	689a      	ldr	r2, [r3, #8]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c812:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	689a      	ldr	r2, [r3, #8]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c822:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	22ff      	movs	r2, #255	@ 0xff
 800c82a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	2201      	movs	r2, #1
 800c830:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2200      	movs	r2, #0
 800c836:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	371c      	adds	r7, #28
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr
 800c846:	bf00      	nop
 800c848:	20004ed0 	.word	0x20004ed0
 800c84c:	10624dd3 	.word	0x10624dd3
 800c850:	40013c00 	.word	0x40013c00

0800c854 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800c85c:	4b0e      	ldr	r3, [pc, #56]	@ (800c898 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800c85e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800c862:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	68db      	ldr	r3, [r3, #12]
 800c86a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00b      	beq.n	800c88a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800c882:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	f000 f809 	bl	800c89c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	775a      	strb	r2, [r3, #29]
}
 800c890:	bf00      	nop
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	40013c00 	.word	0x40013c00

0800c89c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800c8a4:	bf00      	nop
 800c8a6:	370c      	adds	r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ae:	4770      	bx	lr

0800c8b0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800c8b8:	bf00      	nop
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr

0800c8c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b082      	sub	sp, #8
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d101      	bne.n	800c8d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e022      	b.n	800c91c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d105      	bne.n	800c8ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f7f8 fa27 	bl	8004d3c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2203      	movs	r2, #3
 800c8f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f000 f814 	bl	800c924 <HAL_SD_InitCard>
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d001      	beq.n	800c906 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	e00a      	b.n	800c91c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2201      	movs	r2, #1
 800c916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c924:	b5b0      	push	{r4, r5, r7, lr}
 800c926:	b08e      	sub	sp, #56	@ 0x38
 800c928:	af04      	add	r7, sp, #16
 800c92a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c92c:	2300      	movs	r3, #0
 800c92e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800c930:	2300      	movs	r3, #0
 800c932:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c934:	2300      	movs	r3, #0
 800c936:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c938:	2300      	movs	r3, #0
 800c93a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c93c:	2300      	movs	r3, #0
 800c93e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800c940:	2376      	movs	r3, #118	@ 0x76
 800c942:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681d      	ldr	r5, [r3, #0]
 800c948:	466c      	mov	r4, sp
 800c94a:	f107 0314 	add.w	r3, r7, #20
 800c94e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c952:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c956:	f107 0308 	add.w	r3, r7, #8
 800c95a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c95c:	4628      	mov	r0, r5
 800c95e:	f002 ff2d 	bl	800f7bc <SDMMC_Init>
 800c962:	4603      	mov	r3, r0
 800c964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 800c968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d001      	beq.n	800c974 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	e059      	b.n	800ca28 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	685a      	ldr	r2, [r3, #4]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c982:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4618      	mov	r0, r3
 800c98a:	f002 ff61 	bl	800f850 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	685a      	ldr	r2, [r3, #4]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c99c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800c99e:	2002      	movs	r0, #2
 800c9a0:	f7fb f9a6 	bl	8007cf0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f001 f855 	bl	800da54 <SD_PowerON>
 800c9aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9ac:	6a3b      	ldr	r3, [r7, #32]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00b      	beq.n	800c9ca <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9be:	6a3b      	ldr	r3, [r7, #32]
 800c9c0:	431a      	orrs	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e02e      	b.n	800ca28 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f000 ff74 	bl	800d8b8 <SD_InitCard>
 800c9d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d00b      	beq.n	800c9f0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c9e4:	6a3b      	ldr	r3, [r7, #32]
 800c9e6:	431a      	orrs	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e01b      	b.n	800ca28 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f002 ffbb 	bl	800f974 <SDMMC_CmdBlockLength>
 800c9fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca00:	6a3b      	ldr	r3, [r7, #32]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d00f      	beq.n	800ca26 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a09      	ldr	r2, [pc, #36]	@ (800ca30 <HAL_SD_InitCard+0x10c>)
 800ca0c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca12:	6a3b      	ldr	r3, [r7, #32]
 800ca14:	431a      	orrs	r2, r3
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	2201      	movs	r2, #1
 800ca1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e000      	b.n	800ca28 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800ca26:	2300      	movs	r3, #0
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3728      	adds	r7, #40	@ 0x28
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bdb0      	pop	{r4, r5, r7, pc}
 800ca30:	004005ff 	.word	0x004005ff

0800ca34 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b092      	sub	sp, #72	@ 0x48
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
 800ca40:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ca42:	f7fb f949 	bl	8007cd8 <HAL_GetTick>
 800ca46:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d107      	bne.n	800ca66 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca5a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	e1bd      	b.n	800cde2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	f040 81b0 	bne.w	800cdd4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2200      	movs	r2, #0
 800ca78:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	441a      	add	r2, r3
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d907      	bls.n	800ca98 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca8c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ca94:	2301      	movs	r3, #1
 800ca96:	e1a4      	b.n	800cde2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	2203      	movs	r2, #3
 800ca9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	2200      	movs	r2, #0
 800caa6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caac:	2b01      	cmp	r3, #1
 800caae:	d002      	beq.n	800cab6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab2:	025b      	lsls	r3, r3, #9
 800cab4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cab6:	f04f 33ff 	mov.w	r3, #4294967295
 800caba:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	025b      	lsls	r3, r3, #9
 800cac0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cac2:	2390      	movs	r3, #144	@ 0x90
 800cac4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cac6:	2302      	movs	r3, #2
 800cac8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800caca:	2300      	movs	r3, #0
 800cacc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800cace:	2301      	movs	r3, #1
 800cad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f107 0214 	add.w	r2, r7, #20
 800cada:	4611      	mov	r1, r2
 800cadc:	4618      	mov	r0, r3
 800cade:	f002 ff1d 	bl	800f91c <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d90a      	bls.n	800cafe <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2202      	movs	r2, #2
 800caec:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800caf4:	4618      	mov	r0, r3
 800caf6:	f002 ff81 	bl	800f9fc <SDMMC_CmdReadMultiBlock>
 800cafa:	6478      	str	r0, [r7, #68]	@ 0x44
 800cafc:	e009      	b.n	800cb12 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2201      	movs	r2, #1
 800cb02:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f002 ff54 	bl	800f9b8 <SDMMC_CmdReadSingleBlock>
 800cb10:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cb12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d012      	beq.n	800cb3e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a7a      	ldr	r2, [pc, #488]	@ (800cd08 <HAL_SD_ReadBlocks+0x2d4>)
 800cb1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb26:	431a      	orrs	r2, r3
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cb3a:	2301      	movs	r3, #1
 800cb3c:	e151      	b.n	800cde2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cb42:	e061      	b.n	800cc08 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d03c      	beq.n	800cbcc <HAL_SD_ReadBlocks+0x198>
 800cb52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d039      	beq.n	800cbcc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb5c:	e033      	b.n	800cbc6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	4618      	mov	r0, r3
 800cb64:	f002 fe56 	bl	800f814 <SDMMC_ReadFIFO>
 800cb68:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cb6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb70:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cb72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb74:	3301      	adds	r3, #1
 800cb76:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cb78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cb7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb80:	0a1b      	lsrs	r3, r3, #8
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb86:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cb88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cb8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb90:	3b01      	subs	r3, #1
 800cb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb96:	0c1b      	lsrs	r3, r3, #16
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb9c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cb9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cba0:	3301      	adds	r3, #1
 800cba2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba6:	3b01      	subs	r3, #1
 800cba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cbaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbac:	0e1b      	lsrs	r3, r3, #24
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cbb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cbba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800cbc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbc8:	2b07      	cmp	r3, #7
 800cbca:	d9c8      	bls.n	800cb5e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cbcc:	f7fb f884 	bl	8007cd8 <HAL_GetTick>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd4:	1ad3      	subs	r3, r2, r3
 800cbd6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d902      	bls.n	800cbe2 <HAL_SD_ReadBlocks+0x1ae>
 800cbdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d112      	bne.n	800cc08 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4a48      	ldr	r2, [pc, #288]	@ (800cd08 <HAL_SD_ReadBlocks+0x2d4>)
 800cbe8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cbee:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2200      	movs	r2, #0
 800cc02:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800cc04:	2303      	movs	r3, #3
 800cc06:	e0ec      	b.n	800cde2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc0e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d096      	beq.n	800cb44 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d022      	beq.n	800cc6a <HAL_SD_ReadBlocks+0x236>
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d91f      	bls.n	800cc6a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc2e:	2b03      	cmp	r3, #3
 800cc30:	d01b      	beq.n	800cc6a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f002 ff46 	bl	800fac8 <SDMMC_CmdStopTransfer>
 800cc3c:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800cc3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d012      	beq.n	800cc6a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a2f      	ldr	r2, [pc, #188]	@ (800cd08 <HAL_SD_ReadBlocks+0x2d4>)
 800cc4a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc52:	431a      	orrs	r2, r3
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2200      	movs	r2, #0
 800cc64:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	e0bb      	b.n	800cde2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc70:	f003 0308 	and.w	r3, r3, #8
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d012      	beq.n	800cc9e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a22      	ldr	r2, [pc, #136]	@ (800cd08 <HAL_SD_ReadBlocks+0x2d4>)
 800cc7e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc84:	f043 0208 	orr.w	r2, r3, #8
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2200      	movs	r2, #0
 800cc98:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	e0a1      	b.n	800cde2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cca4:	f003 0302 	and.w	r3, r3, #2
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d012      	beq.n	800ccd2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4a15      	ldr	r2, [pc, #84]	@ (800cd08 <HAL_SD_ReadBlocks+0x2d4>)
 800ccb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccb8:	f043 0202 	orr.w	r2, r3, #2
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2200      	movs	r2, #0
 800cccc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800ccce:	2301      	movs	r3, #1
 800ccd0:	e087      	b.n	800cde2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccd8:	f003 0320 	and.w	r3, r3, #32
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d064      	beq.n	800cdaa <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a08      	ldr	r2, [pc, #32]	@ (800cd08 <HAL_SD_ReadBlocks+0x2d4>)
 800cce6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccec:	f043 0220 	orr.w	r2, r3, #32
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	e06d      	b.n	800cde2 <HAL_SD_ReadBlocks+0x3ae>
 800cd06:	bf00      	nop
 800cd08:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f002 fd7f 	bl	800f814 <SDMMC_ReadFIFO>
 800cd16:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800cd18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd1a:	b2da      	uxtb	r2, r3
 800cd1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd1e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cd20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd22:	3301      	adds	r3, #1
 800cd24:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cd26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd28:	3b01      	subs	r3, #1
 800cd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd2e:	0a1b      	lsrs	r3, r3, #8
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd34:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cd36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd38:	3301      	adds	r3, #1
 800cd3a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cd3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd3e:	3b01      	subs	r3, #1
 800cd40:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cd42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd44:	0c1b      	lsrs	r3, r3, #16
 800cd46:	b2da      	uxtb	r2, r3
 800cd48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd4a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd4e:	3301      	adds	r3, #1
 800cd50:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cd52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd54:	3b01      	subs	r3, #1
 800cd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5a:	0e1b      	lsrs	r3, r3, #24
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd60:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800cd62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd64:	3301      	adds	r3, #1
 800cd66:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800cd68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cd6e:	f7fa ffb3 	bl	8007cd8 <HAL_GetTick>
 800cd72:	4602      	mov	r2, r0
 800cd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd76:	1ad3      	subs	r3, r2, r3
 800cd78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cd7a:	429a      	cmp	r2, r3
 800cd7c:	d902      	bls.n	800cd84 <HAL_SD_ReadBlocks+0x350>
 800cd7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d112      	bne.n	800cdaa <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a18      	ldr	r2, [pc, #96]	@ (800cdec <HAL_SD_ReadBlocks+0x3b8>)
 800cd8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2200      	movs	r2, #0
 800cda4:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800cda6:	2301      	movs	r3, #1
 800cda8:	e01b      	b.n	800cde2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d002      	beq.n	800cdbe <HAL_SD_ReadBlocks+0x38a>
 800cdb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d1a6      	bne.n	800cd0c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f240 523a 	movw	r2, #1338	@ 0x53a
 800cdc6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	e006      	b.n	800cde2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
  }
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3748      	adds	r7, #72	@ 0x48
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	004005ff 	.word	0x004005ff

0800cdf0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b092      	sub	sp, #72	@ 0x48
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	607a      	str	r2, [r7, #4]
 800cdfc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cdfe:	f7fa ff6b 	bl	8007cd8 <HAL_GetTick>
 800ce02:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d107      	bne.n	800ce22 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce16:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e165      	b.n	800d0ee <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ce28:	b2db      	uxtb	r3, r3
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	f040 8158 	bne.w	800d0e0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2200      	movs	r2, #0
 800ce34:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ce36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	441a      	add	r2, r3
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d907      	bls.n	800ce54 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce48:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800ce50:	2301      	movs	r3, #1
 800ce52:	e14c      	b.n	800d0ee <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2203      	movs	r2, #3
 800ce58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2200      	movs	r2, #0
 800ce62:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce68:	2b01      	cmp	r3, #1
 800ce6a:	d002      	beq.n	800ce72 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800ce6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6e:	025b      	lsls	r3, r3, #9
 800ce70:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ce72:	f04f 33ff 	mov.w	r3, #4294967295
 800ce76:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	025b      	lsls	r3, r3, #9
 800ce7c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ce7e:	2390      	movs	r3, #144	@ 0x90
 800ce80:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ce82:	2300      	movs	r3, #0
 800ce84:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ce86:	2300      	movs	r3, #0
 800ce88:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f107 0218 	add.w	r2, r7, #24
 800ce96:	4611      	mov	r1, r2
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f002 fd3f 	bl	800f91c <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d90a      	bls.n	800ceba <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2220      	movs	r2, #32
 800cea8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f002 fde7 	bl	800fa84 <SDMMC_CmdWriteMultiBlock>
 800ceb6:	6478      	str	r0, [r7, #68]	@ 0x44
 800ceb8:	e009      	b.n	800cece <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2210      	movs	r2, #16
 800cebe:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cec6:	4618      	mov	r0, r3
 800cec8:	f002 fdba 	bl	800fa40 <SDMMC_CmdWriteSingleBlock>
 800cecc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d012      	beq.n	800cefa <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	4a87      	ldr	r2, [pc, #540]	@ (800d0f8 <HAL_SD_WriteBlocks+0x308>)
 800ceda:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cee2:	431a      	orrs	r2, r3
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2201      	movs	r2, #1
 800ceec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	2200      	movs	r2, #0
 800cef4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800cef6:	2301      	movs	r3, #1
 800cef8:	e0f9      	b.n	800d0ee <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cefe:	e065      	b.n	800cfcc <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d040      	beq.n	800cf90 <HAL_SD_WriteBlocks+0x1a0>
 800cf0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d03d      	beq.n	800cf90 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800cf14:	2300      	movs	r3, #0
 800cf16:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf18:	e037      	b.n	800cf8a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800cf1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cf20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf22:	3301      	adds	r3, #1
 800cf24:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cf26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800cf2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	021a      	lsls	r2, r3, #8
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cf38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cf3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf40:	3b01      	subs	r3, #1
 800cf42:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800cf44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	041a      	lsls	r2, r3, #16
 800cf4a:	697b      	ldr	r3, [r7, #20]
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cf50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf52:	3301      	adds	r3, #1
 800cf54:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cf56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf58:	3b01      	subs	r3, #1
 800cf5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800cf5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	061a      	lsls	r2, r3, #24
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	4313      	orrs	r3, r2
 800cf66:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cf68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf6a:	3301      	adds	r3, #1
 800cf6c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800cf6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf70:	3b01      	subs	r3, #1
 800cf72:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f107 0214 	add.w	r2, r7, #20
 800cf7c:	4611      	mov	r1, r2
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f002 fc55 	bl	800f82e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800cf84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf86:	3301      	adds	r3, #1
 800cf88:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf8c:	2b07      	cmp	r3, #7
 800cf8e:	d9c4      	bls.n	800cf1a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cf90:	f7fa fea2 	bl	8007cd8 <HAL_GetTick>
 800cf94:	4602      	mov	r2, r0
 800cf96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf98:	1ad3      	subs	r3, r2, r3
 800cf9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cf9c:	429a      	cmp	r2, r3
 800cf9e:	d902      	bls.n	800cfa6 <HAL_SD_WriteBlocks+0x1b6>
 800cfa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d112      	bne.n	800cfcc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a53      	ldr	r2, [pc, #332]	@ (800d0f8 <HAL_SD_WriteBlocks+0x308>)
 800cfac:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cfb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfb4:	431a      	orrs	r2, r3
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800cfc8:	2303      	movs	r3, #3
 800cfca:	e090      	b.n	800d0ee <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfd2:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d092      	beq.n	800cf00 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d022      	beq.n	800d02e <HAL_SD_WriteBlocks+0x23e>
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d91f      	bls.n	800d02e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cff2:	2b03      	cmp	r3, #3
 800cff4:	d01b      	beq.n	800d02e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4618      	mov	r0, r3
 800cffc:	f002 fd64 	bl	800fac8 <SDMMC_CmdStopTransfer>
 800d000:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d004:	2b00      	cmp	r3, #0
 800d006:	d012      	beq.n	800d02e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	4a3a      	ldr	r2, [pc, #232]	@ (800d0f8 <HAL_SD_WriteBlocks+0x308>)
 800d00e:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d016:	431a      	orrs	r2, r3
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	2201      	movs	r2, #1
 800d020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2200      	movs	r2, #0
 800d028:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	e05f      	b.n	800d0ee <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d034:	f003 0308 	and.w	r3, r3, #8
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d012      	beq.n	800d062 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a2d      	ldr	r2, [pc, #180]	@ (800d0f8 <HAL_SD_WriteBlocks+0x308>)
 800d042:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d048:	f043 0208 	orr.w	r2, r3, #8
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2201      	movs	r2, #1
 800d054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2200      	movs	r2, #0
 800d05c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	e045      	b.n	800d0ee <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d068:	f003 0302 	and.w	r3, r3, #2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d012      	beq.n	800d096 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a20      	ldr	r2, [pc, #128]	@ (800d0f8 <HAL_SD_WriteBlocks+0x308>)
 800d076:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d07c:	f043 0202 	orr.w	r2, r3, #2
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2201      	movs	r2, #1
 800d088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2200      	movs	r2, #0
 800d090:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d092:	2301      	movs	r3, #1
 800d094:	e02b      	b.n	800d0ee <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d09c:	f003 0310 	and.w	r3, r3, #16
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d012      	beq.n	800d0ca <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a13      	ldr	r2, [pc, #76]	@ (800d0f8 <HAL_SD_WriteBlocks+0x308>)
 800d0aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0b0:	f043 0210 	orr.w	r2, r3, #16
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e011      	b.n	800d0ee <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d0d2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	e006      	b.n	800d0ee <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0e4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800d0ec:	2301      	movs	r3, #1
  }
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3748      	adds	r7, #72	@ 0x48
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	004005ff 	.word	0x004005ff

0800d0fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d108:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d110:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d114:	2b00      	cmp	r3, #0
 800d116:	d008      	beq.n	800d12a <HAL_SD_IRQHandler+0x2e>
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f003 0308 	and.w	r3, r3, #8
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d003      	beq.n	800d12a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 fd4c 	bl	800dbc0 <SD_Read_IT>
 800d128:	e15a      	b.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 808d 	beq.w	800d254 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d142:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681a      	ldr	r2, [r3, #0]
 800d14e:	4b9a      	ldr	r3, [pc, #616]	@ (800d3b8 <HAL_SD_IRQHandler+0x2bc>)
 800d150:	400b      	ands	r3, r1
 800d152:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f022 0201 	bic.w	r2, r2, #1
 800d162:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f003 0308 	and.w	r3, r3, #8
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d039      	beq.n	800d1e2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f003 0302 	and.w	r3, r3, #2
 800d174:	2b00      	cmp	r3, #0
 800d176:	d104      	bne.n	800d182 <HAL_SD_IRQHandler+0x86>
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	f003 0320 	and.w	r3, r3, #32
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d011      	beq.n	800d1a6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	4618      	mov	r0, r3
 800d188:	f002 fc9e 	bl	800fac8 <SDMMC_CmdStopTransfer>
 800d18c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d008      	beq.n	800d1a6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	431a      	orrs	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d1a0:	6878      	ldr	r0, [r7, #4]
 800d1a2:	f000 f921 	bl	800d3e8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d1ae:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2201      	movs	r2, #1
 800d1b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	f003 0301 	and.w	r3, r3, #1
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d104      	bne.n	800d1d2 <HAL_SD_IRQHandler+0xd6>
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f003 0302 	and.w	r3, r3, #2
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d003      	beq.n	800d1da <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f003 fc40 	bl	8010a58 <HAL_SD_RxCpltCallback>
 800d1d8:	e102      	b.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f003 fc32 	bl	8010a44 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d1e0:	e0fe      	b.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f000 80f9 	beq.w	800d3e0 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f003 0320 	and.w	r3, r3, #32
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d011      	beq.n	800d21c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f002 fc63 	bl	800fac8 <SDMMC_CmdStopTransfer>
 800d202:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d008      	beq.n	800d21c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	431a      	orrs	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f000 f8e6 	bl	800d3e8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f003 0301 	and.w	r3, r3, #1
 800d222:	2b00      	cmp	r3, #0
 800d224:	f040 80dc 	bne.w	800d3e0 <HAL_SD_IRQHandler+0x2e4>
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f003 0302 	and.w	r3, r3, #2
 800d22e:	2b00      	cmp	r3, #0
 800d230:	f040 80d6 	bne.w	800d3e0 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f022 0208 	bic.w	r2, r2, #8
 800d242:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f003 fbf9 	bl	8010a44 <HAL_SD_TxCpltCallback>
}
 800d252:	e0c5      	b.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d25a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d008      	beq.n	800d274 <HAL_SD_IRQHandler+0x178>
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f003 0308 	and.w	r3, r3, #8
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fcf8 	bl	800dc62 <SD_Write_IT>
 800d272:	e0b5      	b.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d27a:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f000 80ae 	beq.w	800d3e0 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d28a:	f003 0302 	and.w	r3, r3, #2
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d005      	beq.n	800d29e <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d296:	f043 0202 	orr.w	r2, r3, #2
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2a4:	f003 0308 	and.w	r3, r3, #8
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d005      	beq.n	800d2b8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b0:	f043 0208 	orr.w	r2, r3, #8
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2be:	f003 0320 	and.w	r3, r3, #32
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d005      	beq.n	800d2d2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ca:	f043 0220 	orr.w	r2, r3, #32
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2d8:	f003 0310 	and.w	r3, r3, #16
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d005      	beq.n	800d2ec <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2e4:	f043 0210 	orr.w	r2, r3, #16
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d2f4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800d304:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f002 fbdc 	bl	800fac8 <SDMMC_CmdStopTransfer>
 800d310:	4602      	mov	r2, r0
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d316:	431a      	orrs	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f003 0308 	and.w	r3, r3, #8
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00a      	beq.n	800d33c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2201      	movs	r2, #1
 800d32a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f000 f857 	bl	800d3e8 <HAL_SD_ErrorCallback>
}
 800d33a:	e051      	b.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d342:	2b00      	cmp	r3, #0
 800d344:	d04c      	beq.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	f003 0310 	and.w	r3, r3, #16
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d104      	bne.n	800d35a <HAL_SD_IRQHandler+0x25e>
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f003 0320 	and.w	r3, r3, #32
 800d356:	2b00      	cmp	r3, #0
 800d358:	d011      	beq.n	800d37e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d35e:	4a17      	ldr	r2, [pc, #92]	@ (800d3bc <HAL_SD_IRQHandler+0x2c0>)
 800d360:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d366:	4618      	mov	r0, r3
 800d368:	f7fb fb32 	bl	80089d0 <HAL_DMA_Abort_IT>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d036      	beq.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d376:	4618      	mov	r0, r3
 800d378:	f000 fa30 	bl	800d7dc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d37c:	e030      	b.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	f003 0301 	and.w	r3, r3, #1
 800d384:	2b00      	cmp	r3, #0
 800d386:	d104      	bne.n	800d392 <HAL_SD_IRQHandler+0x296>
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f003 0302 	and.w	r3, r3, #2
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d018      	beq.n	800d3c4 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d396:	4a0a      	ldr	r2, [pc, #40]	@ (800d3c0 <HAL_SD_IRQHandler+0x2c4>)
 800d398:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d39e:	4618      	mov	r0, r3
 800d3a0:	f7fb fb16 	bl	80089d0 <HAL_DMA_Abort_IT>
 800d3a4:	4603      	mov	r3, r0
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d01a      	beq.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f000 fa4b 	bl	800d84a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d3b4:	e014      	b.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
 800d3b6:	bf00      	nop
 800d3b8:	ffff3ec5 	.word	0xffff3ec5
 800d3bc:	0800d7dd 	.word	0x0800d7dd
 800d3c0:	0800d84b 	.word	0x0800d84b
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2201      	movs	r2, #1
 800d3ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f003 fb29 	bl	8010a30 <HAL_SD_AbortCallback>
}
 800d3de:	e7ff      	b.n	800d3e0 <HAL_SD_IRQHandler+0x2e4>
 800d3e0:	bf00      	nop
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d3f0:	bf00      	nop
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d40a:	0f9b      	lsrs	r3, r3, #30
 800d40c:	b2da      	uxtb	r2, r3
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d416:	0e9b      	lsrs	r3, r3, #26
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	f003 030f 	and.w	r3, r3, #15
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d428:	0e1b      	lsrs	r3, r3, #24
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	f003 0303 	and.w	r3, r3, #3
 800d430:	b2da      	uxtb	r2, r3
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d43a:	0c1b      	lsrs	r3, r3, #16
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d446:	0a1b      	lsrs	r3, r3, #8
 800d448:	b2da      	uxtb	r2, r3
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d452:	b2da      	uxtb	r2, r3
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d45c:	0d1b      	lsrs	r3, r3, #20
 800d45e:	b29a      	uxth	r2, r3
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d468:	0c1b      	lsrs	r3, r3, #16
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	f003 030f 	and.w	r3, r3, #15
 800d470:	b2da      	uxtb	r2, r3
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d47a:	0bdb      	lsrs	r3, r3, #15
 800d47c:	b2db      	uxtb	r3, r3
 800d47e:	f003 0301 	and.w	r3, r3, #1
 800d482:	b2da      	uxtb	r2, r3
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d48c:	0b9b      	lsrs	r3, r3, #14
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	f003 0301 	and.w	r3, r3, #1
 800d494:	b2da      	uxtb	r2, r3
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d49e:	0b5b      	lsrs	r3, r3, #13
 800d4a0:	b2db      	uxtb	r3, r3
 800d4a2:	f003 0301 	and.w	r3, r3, #1
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d4b0:	0b1b      	lsrs	r3, r3, #12
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	f003 0301 	and.w	r3, r3, #1
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d163      	bne.n	800d594 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d4d0:	009a      	lsls	r2, r3, #2
 800d4d2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800d4d6:	4013      	ands	r3, r2
 800d4d8:	687a      	ldr	r2, [r7, #4]
 800d4da:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800d4dc:	0f92      	lsrs	r2, r2, #30
 800d4de:	431a      	orrs	r2, r3
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4e8:	0edb      	lsrs	r3, r3, #27
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	f003 0307 	and.w	r3, r3, #7
 800d4f0:	b2da      	uxtb	r2, r3
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4fa:	0e1b      	lsrs	r3, r3, #24
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	f003 0307 	and.w	r3, r3, #7
 800d502:	b2da      	uxtb	r2, r3
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d50c:	0d5b      	lsrs	r3, r3, #21
 800d50e:	b2db      	uxtb	r3, r3
 800d510:	f003 0307 	and.w	r3, r3, #7
 800d514:	b2da      	uxtb	r2, r3
 800d516:	683b      	ldr	r3, [r7, #0]
 800d518:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d51e:	0c9b      	lsrs	r3, r3, #18
 800d520:	b2db      	uxtb	r3, r3
 800d522:	f003 0307 	and.w	r3, r3, #7
 800d526:	b2da      	uxtb	r2, r3
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d530:	0bdb      	lsrs	r3, r3, #15
 800d532:	b2db      	uxtb	r3, r3
 800d534:	f003 0307 	and.w	r3, r3, #7
 800d538:	b2da      	uxtb	r2, r3
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	691b      	ldr	r3, [r3, #16]
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	7e1b      	ldrb	r3, [r3, #24]
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	f003 0307 	and.w	r3, r3, #7
 800d552:	3302      	adds	r3, #2
 800d554:	2201      	movs	r2, #1
 800d556:	fa02 f303 	lsl.w	r3, r2, r3
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d55e:	fb03 f202 	mul.w	r2, r3, r2
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	7a1b      	ldrb	r3, [r3, #8]
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	f003 030f 	and.w	r3, r3, #15
 800d570:	2201      	movs	r2, #1
 800d572:	409a      	lsls	r2, r3
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d57c:	687a      	ldr	r2, [r7, #4]
 800d57e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800d580:	0a52      	lsrs	r2, r2, #9
 800d582:	fb03 f202 	mul.w	r2, r3, r2
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d590:	661a      	str	r2, [r3, #96]	@ 0x60
 800d592:	e031      	b.n	800d5f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d598:	2b01      	cmp	r3, #1
 800d59a:	d11d      	bne.n	800d5d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d5a0:	041b      	lsls	r3, r3, #16
 800d5a2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5aa:	0c1b      	lsrs	r3, r3, #16
 800d5ac:	431a      	orrs	r2, r3
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	691b      	ldr	r3, [r3, #16]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	029a      	lsls	r2, r3, #10
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d5cc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	661a      	str	r2, [r3, #96]	@ 0x60
 800d5d6:	e00f      	b.n	800d5f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4a58      	ldr	r2, [pc, #352]	@ (800d740 <HAL_SD_GetCardCSD+0x344>)
 800d5de:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e09d      	b.n	800d734 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5fc:	0b9b      	lsrs	r3, r3, #14
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	f003 0301 	and.w	r3, r3, #1
 800d604:	b2da      	uxtb	r2, r3
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d60e:	09db      	lsrs	r3, r3, #7
 800d610:	b2db      	uxtb	r3, r3
 800d612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d616:	b2da      	uxtb	r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d620:	b2db      	uxtb	r3, r3
 800d622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d626:	b2da      	uxtb	r2, r3
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d630:	0fdb      	lsrs	r3, r3, #31
 800d632:	b2da      	uxtb	r2, r3
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d63c:	0f5b      	lsrs	r3, r3, #29
 800d63e:	b2db      	uxtb	r3, r3
 800d640:	f003 0303 	and.w	r3, r3, #3
 800d644:	b2da      	uxtb	r2, r3
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d64e:	0e9b      	lsrs	r3, r3, #26
 800d650:	b2db      	uxtb	r3, r3
 800d652:	f003 0307 	and.w	r3, r3, #7
 800d656:	b2da      	uxtb	r2, r3
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d660:	0d9b      	lsrs	r3, r3, #22
 800d662:	b2db      	uxtb	r3, r3
 800d664:	f003 030f 	and.w	r3, r3, #15
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d672:	0d5b      	lsrs	r3, r3, #21
 800d674:	b2db      	uxtb	r3, r3
 800d676:	f003 0301 	and.w	r3, r3, #1
 800d67a:	b2da      	uxtb	r2, r3
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	2200      	movs	r2, #0
 800d686:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d68e:	0c1b      	lsrs	r3, r3, #16
 800d690:	b2db      	uxtb	r3, r3
 800d692:	f003 0301 	and.w	r3, r3, #1
 800d696:	b2da      	uxtb	r2, r3
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6a2:	0bdb      	lsrs	r3, r3, #15
 800d6a4:	b2db      	uxtb	r3, r3
 800d6a6:	f003 0301 	and.w	r3, r3, #1
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6b6:	0b9b      	lsrs	r3, r3, #14
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	f003 0301 	and.w	r3, r3, #1
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6ca:	0b5b      	lsrs	r3, r3, #13
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	f003 0301 	and.w	r3, r3, #1
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6de:	0b1b      	lsrs	r3, r3, #12
 800d6e0:	b2db      	uxtb	r3, r3
 800d6e2:	f003 0301 	and.w	r3, r3, #1
 800d6e6:	b2da      	uxtb	r2, r3
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d6f2:	0a9b      	lsrs	r3, r3, #10
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	f003 0303 	and.w	r3, r3, #3
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d706:	0a1b      	lsrs	r3, r3, #8
 800d708:	b2db      	uxtb	r3, r3
 800d70a:	f003 0303 	and.w	r3, r3, #3
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d71a:	085b      	lsrs	r3, r3, #1
 800d71c:	b2db      	uxtb	r3, r3
 800d71e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d722:	b2da      	uxtb	r2, r3
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800d732:	2300      	movs	r3, #0
}
 800d734:	4618      	mov	r0, r3
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr
 800d740:	004005ff 	.word	0x004005ff

0800d744 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d744:	b480      	push	{r7}
 800d746:	b083      	sub	sp, #12
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b086      	sub	sp, #24
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d7a8:	f107 030c 	add.w	r3, r7, #12
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 f9de 	bl	800db70 <SD_SendStatus>
 800d7b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d005      	beq.n	800d7c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	431a      	orrs	r2, r3
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	0a5b      	lsrs	r3, r3, #9
 800d7cc:	f003 030f 	and.w	r3, r3, #15
 800d7d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d7d2:	693b      	ldr	r3, [r7, #16]
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3718      	adds	r7, #24
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7e8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d7f2:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d7f4:	68f8      	ldr	r0, [r7, #12]
 800d7f6:	f7ff ffd1 	bl	800d79c <HAL_SD_GetCardState>
 800d7fa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2200      	movs	r2, #0
 800d808:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	2b06      	cmp	r3, #6
 800d80e:	d002      	beq.n	800d816 <SD_DMATxAbort+0x3a>
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	2b05      	cmp	r3, #5
 800d814:	d10a      	bne.n	800d82c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4618      	mov	r0, r3
 800d81c:	f002 f954 	bl	800fac8 <SDMMC_CmdStopTransfer>
 800d820:	4602      	mov	r2, r0
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d826:	431a      	orrs	r2, r3
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d830:	2b00      	cmp	r3, #0
 800d832:	d103      	bne.n	800d83c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	f003 f8fb 	bl	8010a30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d83a:	e002      	b.n	800d842 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d83c:	68f8      	ldr	r0, [r7, #12]
 800d83e:	f7ff fdd3 	bl	800d3e8 <HAL_SD_ErrorCallback>
}
 800d842:	bf00      	nop
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b084      	sub	sp, #16
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d856:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800d860:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f7ff ff9a 	bl	800d79c <HAL_SD_GetCardState>
 800d868:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	2200      	movs	r2, #0
 800d876:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	2b06      	cmp	r3, #6
 800d87c:	d002      	beq.n	800d884 <SD_DMARxAbort+0x3a>
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	2b05      	cmp	r3, #5
 800d882:	d10a      	bne.n	800d89a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	4618      	mov	r0, r3
 800d88a:	f002 f91d 	bl	800fac8 <SDMMC_CmdStopTransfer>
 800d88e:	4602      	mov	r2, r0
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d894:	431a      	orrs	r2, r3
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d103      	bne.n	800d8aa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f003 f8c4 	bl	8010a30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d8a8:	e002      	b.n	800d8b0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	f7ff fd9c 	bl	800d3e8 <HAL_SD_ErrorCallback>
}
 800d8b0:	bf00      	nop
 800d8b2:	3710      	adds	r7, #16
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}

0800d8b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d8b8:	b5b0      	push	{r4, r5, r7, lr}
 800d8ba:	b094      	sub	sp, #80	@ 0x50
 800d8bc:	af04      	add	r7, sp, #16
 800d8be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f001 ffcf 	bl	800f86c <SDMMC_GetPowerState>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d102      	bne.n	800d8da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d8d4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800d8d8:	e0b8      	b.n	800da4c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8de:	2b03      	cmp	r3, #3
 800d8e0:	d02f      	beq.n	800d942 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f002 f9b6 	bl	800fc58 <SDMMC_CmdSendCID>
 800d8ec:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d001      	beq.n	800d8f8 <SD_InitCard+0x40>
    {
      return errorstate;
 800d8f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8f6:	e0a9      	b.n	800da4c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	2100      	movs	r1, #0
 800d8fe:	4618      	mov	r0, r3
 800d900:	f001 fff9 	bl	800f8f6 <SDMMC_GetResponse>
 800d904:	4602      	mov	r2, r0
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2104      	movs	r1, #4
 800d910:	4618      	mov	r0, r3
 800d912:	f001 fff0 	bl	800f8f6 <SDMMC_GetResponse>
 800d916:	4602      	mov	r2, r0
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2108      	movs	r1, #8
 800d922:	4618      	mov	r0, r3
 800d924:	f001 ffe7 	bl	800f8f6 <SDMMC_GetResponse>
 800d928:	4602      	mov	r2, r0
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	210c      	movs	r1, #12
 800d934:	4618      	mov	r0, r3
 800d936:	f001 ffde 	bl	800f8f6 <SDMMC_GetResponse>
 800d93a:	4602      	mov	r2, r0
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d946:	2b03      	cmp	r3, #3
 800d948:	d00d      	beq.n	800d966 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f107 020e 	add.w	r2, r7, #14
 800d952:	4611      	mov	r1, r2
 800d954:	4618      	mov	r0, r3
 800d956:	f002 f9bc 	bl	800fcd2 <SDMMC_CmdSetRelAdd>
 800d95a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d95c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d001      	beq.n	800d966 <SD_InitCard+0xae>
    {
      return errorstate;
 800d962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d964:	e072      	b.n	800da4c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d96a:	2b03      	cmp	r3, #3
 800d96c:	d036      	beq.n	800d9dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d96e:	89fb      	ldrh	r3, [r7, #14]
 800d970:	461a      	mov	r2, r3
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d97e:	041b      	lsls	r3, r3, #16
 800d980:	4619      	mov	r1, r3
 800d982:	4610      	mov	r0, r2
 800d984:	f002 f986 	bl	800fc94 <SDMMC_CmdSendCSD>
 800d988:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d98a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d001      	beq.n	800d994 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d992:	e05b      	b.n	800da4c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	2100      	movs	r1, #0
 800d99a:	4618      	mov	r0, r3
 800d99c:	f001 ffab 	bl	800f8f6 <SDMMC_GetResponse>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2104      	movs	r1, #4
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	f001 ffa2 	bl	800f8f6 <SDMMC_GetResponse>
 800d9b2:	4602      	mov	r2, r0
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2108      	movs	r1, #8
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f001 ff99 	bl	800f8f6 <SDMMC_GetResponse>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	210c      	movs	r1, #12
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f001 ff90 	bl	800f8f6 <SDMMC_GetResponse>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2104      	movs	r1, #4
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f001 ff87 	bl	800f8f6 <SDMMC_GetResponse>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	0d1a      	lsrs	r2, r3, #20
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d9f0:	f107 0310 	add.w	r3, r7, #16
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f7ff fd00 	bl	800d3fc <HAL_SD_GetCardCSD>
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d002      	beq.n	800da08 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da02:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800da06:	e021      	b.n	800da4c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6819      	ldr	r1, [r3, #0]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da10:	041b      	lsls	r3, r3, #16
 800da12:	2200      	movs	r2, #0
 800da14:	461c      	mov	r4, r3
 800da16:	4615      	mov	r5, r2
 800da18:	4622      	mov	r2, r4
 800da1a:	462b      	mov	r3, r5
 800da1c:	4608      	mov	r0, r1
 800da1e:	f002 f875 	bl	800fb0c <SDMMC_CmdSelDesel>
 800da22:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800da24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <SD_InitCard+0x176>
  {
    return errorstate;
 800da2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da2c:	e00e      	b.n	800da4c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681d      	ldr	r5, [r3, #0]
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	466c      	mov	r4, sp
 800da36:	f103 0210 	add.w	r2, r3, #16
 800da3a:	ca07      	ldmia	r2, {r0, r1, r2}
 800da3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800da40:	3304      	adds	r3, #4
 800da42:	cb0e      	ldmia	r3, {r1, r2, r3}
 800da44:	4628      	mov	r0, r5
 800da46:	f001 feb9 	bl	800f7bc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3740      	adds	r7, #64	@ 0x40
 800da50:	46bd      	mov	sp, r7
 800da52:	bdb0      	pop	{r4, r5, r7, pc}

0800da54 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b086      	sub	sp, #24
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800da5c:	2300      	movs	r3, #0
 800da5e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800da60:	2300      	movs	r3, #0
 800da62:	617b      	str	r3, [r7, #20]
 800da64:	2300      	movs	r3, #0
 800da66:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f002 f870 	bl	800fb52 <SDMMC_CmdGoIdleState>
 800da72:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d001      	beq.n	800da7e <SD_PowerON+0x2a>
  {
    return errorstate;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	e072      	b.n	800db64 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4618      	mov	r0, r3
 800da84:	f002 f883 	bl	800fb8e <SDMMC_CmdOperCond>
 800da88:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d00d      	beq.n	800daac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f002 f859 	bl	800fb52 <SDMMC_CmdGoIdleState>
 800daa0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d004      	beq.n	800dab2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	e05b      	b.n	800db64 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	2201      	movs	r2, #1
 800dab0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d137      	bne.n	800db2a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2100      	movs	r1, #0
 800dac0:	4618      	mov	r0, r3
 800dac2:	f002 f883 	bl	800fbcc <SDMMC_CmdAppCommand>
 800dac6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d02d      	beq.n	800db2a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dace:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800dad2:	e047      	b.n	800db64 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2100      	movs	r1, #0
 800dada:	4618      	mov	r0, r3
 800dadc:	f002 f876 	bl	800fbcc <SDMMC_CmdAppCommand>
 800dae0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d001      	beq.n	800daec <SD_PowerON+0x98>
    {
      return errorstate;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	e03b      	b.n	800db64 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	491e      	ldr	r1, [pc, #120]	@ (800db6c <SD_PowerON+0x118>)
 800daf2:	4618      	mov	r0, r3
 800daf4:	f002 f88c 	bl	800fc10 <SDMMC_CmdAppOperCommand>
 800daf8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db00:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800db04:	e02e      	b.n	800db64 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2100      	movs	r1, #0
 800db0c:	4618      	mov	r0, r3
 800db0e:	f001 fef2 	bl	800f8f6 <SDMMC_GetResponse>
 800db12:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	0fdb      	lsrs	r3, r3, #31
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d101      	bne.n	800db20 <SD_PowerON+0xcc>
 800db1c:	2301      	movs	r3, #1
 800db1e:	e000      	b.n	800db22 <SD_PowerON+0xce>
 800db20:	2300      	movs	r3, #0
 800db22:	613b      	str	r3, [r7, #16]

    count++;
 800db24:	68bb      	ldr	r3, [r7, #8]
 800db26:	3301      	adds	r3, #1
 800db28:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800db30:	4293      	cmp	r3, r2
 800db32:	d802      	bhi.n	800db3a <SD_PowerON+0xe6>
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d0cc      	beq.n	800dad4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800db40:	4293      	cmp	r3, r2
 800db42:	d902      	bls.n	800db4a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800db44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800db48:	e00c      	b.n	800db64 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800db50:	2b00      	cmp	r3, #0
 800db52:	d003      	beq.n	800db5c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2201      	movs	r2, #1
 800db58:	645a      	str	r2, [r3, #68]	@ 0x44
 800db5a:	e002      	b.n	800db62 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800db62:	2300      	movs	r3, #0
}
 800db64:	4618      	mov	r0, r3
 800db66:	3718      	adds	r7, #24
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}
 800db6c:	c1100000 	.word	0xc1100000

0800db70 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d102      	bne.n	800db86 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800db80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800db84:	e018      	b.n	800dbb8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681a      	ldr	r2, [r3, #0]
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db8e:	041b      	lsls	r3, r3, #16
 800db90:	4619      	mov	r1, r3
 800db92:	4610      	mov	r0, r2
 800db94:	f002 f8be 	bl	800fd14 <SDMMC_CmdSendStatus>
 800db98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d001      	beq.n	800dba4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	e009      	b.n	800dbb8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	2100      	movs	r1, #0
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f001 fea3 	bl	800f8f6 <SDMMC_GetResponse>
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800dbb6:	2300      	movs	r3, #0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3710      	adds	r7, #16
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbcc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbd2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d03f      	beq.n	800dc5a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800dbda:	2300      	movs	r3, #0
 800dbdc:	617b      	str	r3, [r7, #20]
 800dbde:	e033      	b.n	800dc48 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f001 fe15 	bl	800f814 <SDMMC_ReadFIFO>
 800dbea:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	3b01      	subs	r3, #1
 800dbfe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	0a1b      	lsrs	r3, r3, #8
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	3b01      	subs	r3, #1
 800dc14:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	0c1b      	lsrs	r3, r3, #16
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	3301      	adds	r3, #1
 800dc24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	3b01      	subs	r3, #1
 800dc2a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	0e1b      	lsrs	r3, r3, #24
 800dc30:	b2da      	uxtb	r2, r3
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	3301      	adds	r3, #1
 800dc46:	617b      	str	r3, [r7, #20]
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	2b07      	cmp	r3, #7
 800dc4c:	d9c8      	bls.n	800dbe0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	68fa      	ldr	r2, [r7, #12]
 800dc52:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	693a      	ldr	r2, [r7, #16]
 800dc58:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800dc5a:	bf00      	nop
 800dc5c:	3718      	adds	r7, #24
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dc62:	b580      	push	{r7, lr}
 800dc64:	b086      	sub	sp, #24
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a1b      	ldr	r3, [r3, #32]
 800dc6e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc74:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d043      	beq.n	800dd04 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	617b      	str	r3, [r7, #20]
 800dc80:	e037      	b.n	800dcf2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	021a      	lsls	r2, r3, #8
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	4313      	orrs	r3, r2
 800dc9e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	3301      	adds	r3, #1
 800dca4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	781b      	ldrb	r3, [r3, #0]
 800dcb0:	041a      	lsls	r2, r3, #16
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	4313      	orrs	r3, r2
 800dcb6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	3301      	adds	r3, #1
 800dcbc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	3b01      	subs	r3, #1
 800dcc2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	061a      	lsls	r2, r3, #24
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	4313      	orrs	r3, r2
 800dcce:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f107 0208 	add.w	r2, r7, #8
 800dce4:	4611      	mov	r1, r2
 800dce6:	4618      	mov	r0, r3
 800dce8:	f001 fda1 	bl	800f82e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	617b      	str	r3, [r7, #20]
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	2b07      	cmp	r3, #7
 800dcf6:	d9c4      	bls.n	800dc82 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	693a      	ldr	r2, [r7, #16]
 800dd02:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800dd04:	bf00      	nop
 800dd06:	3718      	adds	r7, #24
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d101      	bne.n	800dd20 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e025      	b.n	800dd6c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d106      	bne.n	800dd3a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f7f5 fc01 	bl	800353c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2202      	movs	r2, #2
 800dd3e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	3304      	adds	r3, #4
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	f001 fc33 	bl	800f5b8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6818      	ldr	r0, [r3, #0]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	f001 fc87 	bl	800f670 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b086      	sub	sp, #24
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800dd86:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800dd88:	7dfb      	ldrb	r3, [r7, #23]
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	d101      	bne.n	800dd92 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800dd8e:	2302      	movs	r3, #2
 800dd90:	e021      	b.n	800ddd6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800dd92:	7dfb      	ldrb	r3, [r7, #23]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d002      	beq.n	800dd9e <HAL_SDRAM_SendCommand+0x2a>
 800dd98:	7dfb      	ldrb	r3, [r7, #23]
 800dd9a:	2b05      	cmp	r3, #5
 800dd9c:	d118      	bne.n	800ddd0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2202      	movs	r2, #2
 800dda2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	68b9      	ldr	r1, [r7, #8]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f001 fcc8 	bl	800f744 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	d104      	bne.n	800ddc6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2205      	movs	r2, #5
 800ddc0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ddc4:	e006      	b.n	800ddd4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ddce:	e001      	b.n	800ddd4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	e000      	b.n	800ddd6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3718      	adds	r7, #24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b082      	sub	sp, #8
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	d101      	bne.n	800ddf8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800ddf4:	2302      	movs	r3, #2
 800ddf6:	e016      	b.n	800de26 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	2b01      	cmp	r3, #1
 800de02:	d10f      	bne.n	800de24 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2202      	movs	r2, #2
 800de08:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	6839      	ldr	r1, [r7, #0]
 800de12:	4618      	mov	r0, r3
 800de14:	f001 fcba 	bl	800f78c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2201      	movs	r2, #1
 800de1c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800de20:	2300      	movs	r3, #0
 800de22:	e000      	b.n	800de26 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800de24:	2301      	movs	r3, #1
}
 800de26:	4618      	mov	r0, r3
 800de28:	3708      	adds	r7, #8
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de2e:	b580      	push	{r7, lr}
 800de30:	b082      	sub	sp, #8
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d101      	bne.n	800de40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de3c:	2301      	movs	r3, #1
 800de3e:	e049      	b.n	800ded4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de46:	b2db      	uxtb	r3, r3
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d106      	bne.n	800de5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f7f7 fb73 	bl	8005540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2202      	movs	r2, #2
 800de5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	3304      	adds	r3, #4
 800de6a:	4619      	mov	r1, r3
 800de6c:	4610      	mov	r0, r2
 800de6e:	f000 fb07 	bl	800e480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2201      	movs	r2, #1
 800de76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2201      	movs	r2, #1
 800de7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2201      	movs	r2, #1
 800de86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2201      	movs	r2, #1
 800de8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2201      	movs	r2, #1
 800de96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2201      	movs	r2, #1
 800de9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2201      	movs	r2, #1
 800dea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2201      	movs	r2, #1
 800deae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2201      	movs	r2, #1
 800deb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2201      	movs	r2, #1
 800debe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2201      	movs	r2, #1
 800dec6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2201      	movs	r2, #1
 800dece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ded2:	2300      	movs	r3, #0
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3708      	adds	r7, #8
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}

0800dedc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dedc:	b480      	push	{r7}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800deea:	b2db      	uxtb	r3, r3
 800deec:	2b01      	cmp	r3, #1
 800deee:	d001      	beq.n	800def4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800def0:	2301      	movs	r3, #1
 800def2:	e054      	b.n	800df9e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2202      	movs	r2, #2
 800def8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68da      	ldr	r2, [r3, #12]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	f042 0201 	orr.w	r2, r2, #1
 800df0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	4a26      	ldr	r2, [pc, #152]	@ (800dfac <HAL_TIM_Base_Start_IT+0xd0>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d022      	beq.n	800df5c <HAL_TIM_Base_Start_IT+0x80>
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df1e:	d01d      	beq.n	800df5c <HAL_TIM_Base_Start_IT+0x80>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a22      	ldr	r2, [pc, #136]	@ (800dfb0 <HAL_TIM_Base_Start_IT+0xd4>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d018      	beq.n	800df5c <HAL_TIM_Base_Start_IT+0x80>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	4a21      	ldr	r2, [pc, #132]	@ (800dfb4 <HAL_TIM_Base_Start_IT+0xd8>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d013      	beq.n	800df5c <HAL_TIM_Base_Start_IT+0x80>
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	4a1f      	ldr	r2, [pc, #124]	@ (800dfb8 <HAL_TIM_Base_Start_IT+0xdc>)
 800df3a:	4293      	cmp	r3, r2
 800df3c:	d00e      	beq.n	800df5c <HAL_TIM_Base_Start_IT+0x80>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a1e      	ldr	r2, [pc, #120]	@ (800dfbc <HAL_TIM_Base_Start_IT+0xe0>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d009      	beq.n	800df5c <HAL_TIM_Base_Start_IT+0x80>
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4a1c      	ldr	r2, [pc, #112]	@ (800dfc0 <HAL_TIM_Base_Start_IT+0xe4>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d004      	beq.n	800df5c <HAL_TIM_Base_Start_IT+0x80>
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	4a1b      	ldr	r2, [pc, #108]	@ (800dfc4 <HAL_TIM_Base_Start_IT+0xe8>)
 800df58:	4293      	cmp	r3, r2
 800df5a:	d115      	bne.n	800df88 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	689a      	ldr	r2, [r3, #8]
 800df62:	4b19      	ldr	r3, [pc, #100]	@ (800dfc8 <HAL_TIM_Base_Start_IT+0xec>)
 800df64:	4013      	ands	r3, r2
 800df66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2b06      	cmp	r3, #6
 800df6c:	d015      	beq.n	800df9a <HAL_TIM_Base_Start_IT+0xbe>
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800df74:	d011      	beq.n	800df9a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f042 0201 	orr.w	r2, r2, #1
 800df84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df86:	e008      	b.n	800df9a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f042 0201 	orr.w	r2, r2, #1
 800df96:	601a      	str	r2, [r3, #0]
 800df98:	e000      	b.n	800df9c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800df9c:	2300      	movs	r3, #0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3714      	adds	r7, #20
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	40010000 	.word	0x40010000
 800dfb0:	40000400 	.word	0x40000400
 800dfb4:	40000800 	.word	0x40000800
 800dfb8:	40000c00 	.word	0x40000c00
 800dfbc:	40010400 	.word	0x40010400
 800dfc0:	40014000 	.word	0x40014000
 800dfc4:	40001800 	.word	0x40001800
 800dfc8:	00010007 	.word	0x00010007

0800dfcc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d101      	bne.n	800dfde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e049      	b.n	800e072 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d106      	bne.n	800dff8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f7f7 fa58 	bl	80054a8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2202      	movs	r2, #2
 800dffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681a      	ldr	r2, [r3, #0]
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	3304      	adds	r3, #4
 800e008:	4619      	mov	r1, r3
 800e00a:	4610      	mov	r0, r2
 800e00c:	f000 fa38 	bl	800e480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2201      	movs	r2, #1
 800e014:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	2201      	movs	r2, #1
 800e01c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2201      	movs	r2, #1
 800e034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2201      	movs	r2, #1
 800e044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2201      	movs	r2, #1
 800e04c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2201      	movs	r2, #1
 800e054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2201      	movs	r2, #1
 800e05c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2201      	movs	r2, #1
 800e064:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2201      	movs	r2, #1
 800e06c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e070:	2300      	movs	r3, #0
}
 800e072:	4618      	mov	r0, r3
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b084      	sub	sp, #16
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	68db      	ldr	r3, [r3, #12]
 800e088:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	691b      	ldr	r3, [r3, #16]
 800e090:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	f003 0302 	and.w	r3, r3, #2
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d020      	beq.n	800e0de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f003 0302 	and.w	r3, r3, #2
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d01b      	beq.n	800e0de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f06f 0202 	mvn.w	r2, #2
 800e0ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	699b      	ldr	r3, [r3, #24]
 800e0bc:	f003 0303 	and.w	r3, r3, #3
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d003      	beq.n	800e0cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7f5 f845 	bl	8003154 <HAL_TIM_IC_CaptureCallback>
 800e0ca:	e005      	b.n	800e0d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f000 f9b9 	bl	800e444 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f9c0 	bl	800e458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2200      	movs	r2, #0
 800e0dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e0de:	68bb      	ldr	r3, [r7, #8]
 800e0e0:	f003 0304 	and.w	r3, r3, #4
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d020      	beq.n	800e12a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f003 0304 	and.w	r3, r3, #4
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d01b      	beq.n	800e12a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f06f 0204 	mvn.w	r2, #4
 800e0fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2202      	movs	r2, #2
 800e100:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	699b      	ldr	r3, [r3, #24]
 800e108:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d003      	beq.n	800e118 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f7f5 f81f 	bl	8003154 <HAL_TIM_IC_CaptureCallback>
 800e116:	e005      	b.n	800e124 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f000 f993 	bl	800e444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 f99a 	bl	800e458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	f003 0308 	and.w	r3, r3, #8
 800e130:	2b00      	cmp	r3, #0
 800e132:	d020      	beq.n	800e176 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f003 0308 	and.w	r3, r3, #8
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d01b      	beq.n	800e176 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f06f 0208 	mvn.w	r2, #8
 800e146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2204      	movs	r2, #4
 800e14c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	69db      	ldr	r3, [r3, #28]
 800e154:	f003 0303 	and.w	r3, r3, #3
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d003      	beq.n	800e164 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e15c:	6878      	ldr	r0, [r7, #4]
 800e15e:	f7f4 fff9 	bl	8003154 <HAL_TIM_IC_CaptureCallback>
 800e162:	e005      	b.n	800e170 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 f96d 	bl	800e444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 f974 	bl	800e458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	f003 0310 	and.w	r3, r3, #16
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d020      	beq.n	800e1c2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f003 0310 	and.w	r3, r3, #16
 800e186:	2b00      	cmp	r3, #0
 800e188:	d01b      	beq.n	800e1c2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	f06f 0210 	mvn.w	r2, #16
 800e192:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2208      	movs	r2, #8
 800e198:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	69db      	ldr	r3, [r3, #28]
 800e1a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d003      	beq.n	800e1b0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f7f4 ffd3 	bl	8003154 <HAL_TIM_IC_CaptureCallback>
 800e1ae:	e005      	b.n	800e1bc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f000 f947 	bl	800e444 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f000 f94e 	bl	800e458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	f003 0301 	and.w	r3, r3, #1
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d00c      	beq.n	800e1e6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f003 0301 	and.w	r3, r3, #1
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d007      	beq.n	800e1e6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	f06f 0201 	mvn.w	r2, #1
 800e1de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f7f6 fc51 	bl	8004a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d104      	bne.n	800e1fa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00c      	beq.n	800e214 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e200:	2b00      	cmp	r3, #0
 800e202:	d007      	beq.n	800e214 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800e20c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 fcb8 	bl	800eb84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00c      	beq.n	800e238 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e224:	2b00      	cmp	r3, #0
 800e226:	d007      	beq.n	800e238 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800e230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 fcb0 	bl	800eb98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00c      	beq.n	800e25c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d007      	beq.n	800e25c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 f908 	bl	800e46c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	f003 0320 	and.w	r3, r3, #32
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00c      	beq.n	800e280 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f003 0320 	and.w	r3, r3, #32
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d007      	beq.n	800e280 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	f06f 0220 	mvn.w	r2, #32
 800e278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fc78 	bl	800eb70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e280:	bf00      	nop
 800e282:	3710      	adds	r7, #16
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}

0800e288 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b086      	sub	sp, #24
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e294:	2300      	movs	r3, #0
 800e296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d101      	bne.n	800e2a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e2a2:	2302      	movs	r3, #2
 800e2a4:	e088      	b.n	800e3b8 <HAL_TIM_IC_ConfigChannel+0x130>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2201      	movs	r2, #1
 800e2aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d11b      	bne.n	800e2ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800e2c4:	f000 fa1c 	bl	800e700 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	699a      	ldr	r2, [r3, #24]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f022 020c 	bic.w	r2, r2, #12
 800e2d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6999      	ldr	r1, [r3, #24]
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	689a      	ldr	r2, [r3, #8]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	430a      	orrs	r2, r1
 800e2e8:	619a      	str	r2, [r3, #24]
 800e2ea:	e060      	b.n	800e3ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2b04      	cmp	r3, #4
 800e2f0:	d11c      	bne.n	800e32c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800e302:	f000 faa0 	bl	800e846 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	699a      	ldr	r2, [r3, #24]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e314:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6999      	ldr	r1, [r3, #24]
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	021a      	lsls	r2, r3, #8
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	430a      	orrs	r2, r1
 800e328:	619a      	str	r2, [r3, #24]
 800e32a:	e040      	b.n	800e3ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b08      	cmp	r3, #8
 800e330:	d11b      	bne.n	800e36a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800e342:	f000 faed 	bl	800e920 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	69da      	ldr	r2, [r3, #28]
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	f022 020c 	bic.w	r2, r2, #12
 800e354:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	69d9      	ldr	r1, [r3, #28]
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	689a      	ldr	r2, [r3, #8]
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	430a      	orrs	r2, r1
 800e366:	61da      	str	r2, [r3, #28]
 800e368:	e021      	b.n	800e3ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2b0c      	cmp	r3, #12
 800e36e:	d11c      	bne.n	800e3aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e374:	68bb      	ldr	r3, [r7, #8]
 800e376:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800e380:	f000 fb0a 	bl	800e998 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	69da      	ldr	r2, [r3, #28]
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e392:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	69d9      	ldr	r1, [r3, #28]
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	689b      	ldr	r3, [r3, #8]
 800e39e:	021a      	lsls	r2, r3, #8
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	430a      	orrs	r2, r1
 800e3a6:	61da      	str	r2, [r3, #28]
 800e3a8:	e001      	b.n	800e3ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e3b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3718      	adds	r7, #24
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d101      	bne.n	800e3d8 <HAL_TIM_SlaveConfigSynchro+0x18>
 800e3d4:	2302      	movs	r3, #2
 800e3d6:	e031      	b.n	800e43c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2202      	movs	r2, #2
 800e3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800e3e8:	6839      	ldr	r1, [r7, #0]
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 f8f4 	bl	800e5d8 <TIM_SlaveTimer_SetConfig>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d009      	beq.n	800e40a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800e406:	2301      	movs	r3, #1
 800e408:	e018      	b.n	800e43c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	68da      	ldr	r2, [r3, #12]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e418:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	68da      	ldr	r2, [r3, #12]
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e428:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2201      	movs	r2, #1
 800e42e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2200      	movs	r2, #0
 800e436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e43a:	2300      	movs	r3, #0
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e44c:	bf00      	nop
 800e44e:	370c      	adds	r7, #12
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e458:	b480      	push	{r7}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e460:	bf00      	nop
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e474:	bf00      	nop
 800e476:	370c      	adds	r7, #12
 800e478:	46bd      	mov	sp, r7
 800e47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47e:	4770      	bx	lr

0800e480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	4a46      	ldr	r2, [pc, #280]	@ (800e5ac <TIM_Base_SetConfig+0x12c>)
 800e494:	4293      	cmp	r3, r2
 800e496:	d013      	beq.n	800e4c0 <TIM_Base_SetConfig+0x40>
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e49e:	d00f      	beq.n	800e4c0 <TIM_Base_SetConfig+0x40>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a43      	ldr	r2, [pc, #268]	@ (800e5b0 <TIM_Base_SetConfig+0x130>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d00b      	beq.n	800e4c0 <TIM_Base_SetConfig+0x40>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a42      	ldr	r2, [pc, #264]	@ (800e5b4 <TIM_Base_SetConfig+0x134>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d007      	beq.n	800e4c0 <TIM_Base_SetConfig+0x40>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a41      	ldr	r2, [pc, #260]	@ (800e5b8 <TIM_Base_SetConfig+0x138>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d003      	beq.n	800e4c0 <TIM_Base_SetConfig+0x40>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a40      	ldr	r2, [pc, #256]	@ (800e5bc <TIM_Base_SetConfig+0x13c>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d108      	bne.n	800e4d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e4c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	68fa      	ldr	r2, [r7, #12]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4a35      	ldr	r2, [pc, #212]	@ (800e5ac <TIM_Base_SetConfig+0x12c>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d02b      	beq.n	800e532 <TIM_Base_SetConfig+0xb2>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4e0:	d027      	beq.n	800e532 <TIM_Base_SetConfig+0xb2>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	4a32      	ldr	r2, [pc, #200]	@ (800e5b0 <TIM_Base_SetConfig+0x130>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d023      	beq.n	800e532 <TIM_Base_SetConfig+0xb2>
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4a31      	ldr	r2, [pc, #196]	@ (800e5b4 <TIM_Base_SetConfig+0x134>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d01f      	beq.n	800e532 <TIM_Base_SetConfig+0xb2>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4a30      	ldr	r2, [pc, #192]	@ (800e5b8 <TIM_Base_SetConfig+0x138>)
 800e4f6:	4293      	cmp	r3, r2
 800e4f8:	d01b      	beq.n	800e532 <TIM_Base_SetConfig+0xb2>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4a2f      	ldr	r2, [pc, #188]	@ (800e5bc <TIM_Base_SetConfig+0x13c>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d017      	beq.n	800e532 <TIM_Base_SetConfig+0xb2>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4a2e      	ldr	r2, [pc, #184]	@ (800e5c0 <TIM_Base_SetConfig+0x140>)
 800e506:	4293      	cmp	r3, r2
 800e508:	d013      	beq.n	800e532 <TIM_Base_SetConfig+0xb2>
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	4a2d      	ldr	r2, [pc, #180]	@ (800e5c4 <TIM_Base_SetConfig+0x144>)
 800e50e:	4293      	cmp	r3, r2
 800e510:	d00f      	beq.n	800e532 <TIM_Base_SetConfig+0xb2>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	4a2c      	ldr	r2, [pc, #176]	@ (800e5c8 <TIM_Base_SetConfig+0x148>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d00b      	beq.n	800e532 <TIM_Base_SetConfig+0xb2>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4a2b      	ldr	r2, [pc, #172]	@ (800e5cc <TIM_Base_SetConfig+0x14c>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d007      	beq.n	800e532 <TIM_Base_SetConfig+0xb2>
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	4a2a      	ldr	r2, [pc, #168]	@ (800e5d0 <TIM_Base_SetConfig+0x150>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d003      	beq.n	800e532 <TIM_Base_SetConfig+0xb2>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	4a29      	ldr	r2, [pc, #164]	@ (800e5d4 <TIM_Base_SetConfig+0x154>)
 800e52e:	4293      	cmp	r3, r2
 800e530:	d108      	bne.n	800e544 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	68db      	ldr	r3, [r3, #12]
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	4313      	orrs	r3, r2
 800e542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	695b      	ldr	r3, [r3, #20]
 800e54e:	4313      	orrs	r3, r2
 800e550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	68fa      	ldr	r2, [r7, #12]
 800e556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	689a      	ldr	r2, [r3, #8]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	681a      	ldr	r2, [r3, #0]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4a10      	ldr	r2, [pc, #64]	@ (800e5ac <TIM_Base_SetConfig+0x12c>)
 800e56c:	4293      	cmp	r3, r2
 800e56e:	d003      	beq.n	800e578 <TIM_Base_SetConfig+0xf8>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	4a12      	ldr	r2, [pc, #72]	@ (800e5bc <TIM_Base_SetConfig+0x13c>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d103      	bne.n	800e580 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	691a      	ldr	r2, [r3, #16]
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	691b      	ldr	r3, [r3, #16]
 800e58a:	f003 0301 	and.w	r3, r3, #1
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d105      	bne.n	800e59e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	691b      	ldr	r3, [r3, #16]
 800e596:	f023 0201 	bic.w	r2, r3, #1
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	611a      	str	r2, [r3, #16]
  }
}
 800e59e:	bf00      	nop
 800e5a0:	3714      	adds	r7, #20
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	40010000 	.word	0x40010000
 800e5b0:	40000400 	.word	0x40000400
 800e5b4:	40000800 	.word	0x40000800
 800e5b8:	40000c00 	.word	0x40000c00
 800e5bc:	40010400 	.word	0x40010400
 800e5c0:	40014000 	.word	0x40014000
 800e5c4:	40014400 	.word	0x40014400
 800e5c8:	40014800 	.word	0x40014800
 800e5cc:	40001800 	.word	0x40001800
 800e5d0:	40001c00 	.word	0x40001c00
 800e5d4:	40002000 	.word	0x40002000

0800e5d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
 800e5e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e5f4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	693a      	ldr	r2, [r7, #16]
 800e5fc:	4313      	orrs	r3, r2
 800e5fe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800e600:	693a      	ldr	r2, [r7, #16]
 800e602:	4b3e      	ldr	r3, [pc, #248]	@ (800e6fc <TIM_SlaveTimer_SetConfig+0x124>)
 800e604:	4013      	ands	r3, r2
 800e606:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	693a      	ldr	r2, [r7, #16]
 800e60e:	4313      	orrs	r3, r2
 800e610:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	693a      	ldr	r2, [r7, #16]
 800e618:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800e61a:	683b      	ldr	r3, [r7, #0]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	2b70      	cmp	r3, #112	@ 0x70
 800e620:	d01a      	beq.n	800e658 <TIM_SlaveTimer_SetConfig+0x80>
 800e622:	2b70      	cmp	r3, #112	@ 0x70
 800e624:	d860      	bhi.n	800e6e8 <TIM_SlaveTimer_SetConfig+0x110>
 800e626:	2b60      	cmp	r3, #96	@ 0x60
 800e628:	d054      	beq.n	800e6d4 <TIM_SlaveTimer_SetConfig+0xfc>
 800e62a:	2b60      	cmp	r3, #96	@ 0x60
 800e62c:	d85c      	bhi.n	800e6e8 <TIM_SlaveTimer_SetConfig+0x110>
 800e62e:	2b50      	cmp	r3, #80	@ 0x50
 800e630:	d046      	beq.n	800e6c0 <TIM_SlaveTimer_SetConfig+0xe8>
 800e632:	2b50      	cmp	r3, #80	@ 0x50
 800e634:	d858      	bhi.n	800e6e8 <TIM_SlaveTimer_SetConfig+0x110>
 800e636:	2b40      	cmp	r3, #64	@ 0x40
 800e638:	d019      	beq.n	800e66e <TIM_SlaveTimer_SetConfig+0x96>
 800e63a:	2b40      	cmp	r3, #64	@ 0x40
 800e63c:	d854      	bhi.n	800e6e8 <TIM_SlaveTimer_SetConfig+0x110>
 800e63e:	2b30      	cmp	r3, #48	@ 0x30
 800e640:	d055      	beq.n	800e6ee <TIM_SlaveTimer_SetConfig+0x116>
 800e642:	2b30      	cmp	r3, #48	@ 0x30
 800e644:	d850      	bhi.n	800e6e8 <TIM_SlaveTimer_SetConfig+0x110>
 800e646:	2b20      	cmp	r3, #32
 800e648:	d051      	beq.n	800e6ee <TIM_SlaveTimer_SetConfig+0x116>
 800e64a:	2b20      	cmp	r3, #32
 800e64c:	d84c      	bhi.n	800e6e8 <TIM_SlaveTimer_SetConfig+0x110>
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d04d      	beq.n	800e6ee <TIM_SlaveTimer_SetConfig+0x116>
 800e652:	2b10      	cmp	r3, #16
 800e654:	d04b      	beq.n	800e6ee <TIM_SlaveTimer_SetConfig+0x116>
 800e656:	e047      	b.n	800e6e8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800e668:	f000 f9d3 	bl	800ea12 <TIM_ETR_SetConfig>
      break;
 800e66c:	e040      	b.n	800e6f0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	2b05      	cmp	r3, #5
 800e674:	d101      	bne.n	800e67a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800e676:	2301      	movs	r3, #1
 800e678:	e03b      	b.n	800e6f2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	6a1b      	ldr	r3, [r3, #32]
 800e680:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	6a1a      	ldr	r2, [r3, #32]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f022 0201 	bic.w	r2, r2, #1
 800e690:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	699b      	ldr	r3, [r3, #24]
 800e698:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e6a0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	691b      	ldr	r3, [r3, #16]
 800e6a6:	011b      	lsls	r3, r3, #4
 800e6a8:	68ba      	ldr	r2, [r7, #8]
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	68ba      	ldr	r2, [r7, #8]
 800e6b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	68fa      	ldr	r2, [r7, #12]
 800e6bc:	621a      	str	r2, [r3, #32]
      break;
 800e6be:	e017      	b.n	800e6f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	f000 f88b 	bl	800e7e8 <TIM_TI1_ConfigInputStage>
      break;
 800e6d2:	e00d      	b.n	800e6f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	f000 f8ed 	bl	800e8c0 <TIM_TI2_ConfigInputStage>
      break;
 800e6e6:	e003      	b.n	800e6f0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	75fb      	strb	r3, [r7, #23]
      break;
 800e6ec:	e000      	b.n	800e6f0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800e6ee:	bf00      	nop
  }

  return status;
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3718      	adds	r7, #24
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	fffefff8 	.word	0xfffefff8

0800e700 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800e700:	b480      	push	{r7}
 800e702:	b087      	sub	sp, #28
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
 800e70c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6a1b      	ldr	r3, [r3, #32]
 800e712:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6a1b      	ldr	r3, [r3, #32]
 800e718:	f023 0201 	bic.w	r2, r3, #1
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	699b      	ldr	r3, [r3, #24]
 800e724:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	4a28      	ldr	r2, [pc, #160]	@ (800e7cc <TIM_TI1_SetConfig+0xcc>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d01b      	beq.n	800e766 <TIM_TI1_SetConfig+0x66>
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e734:	d017      	beq.n	800e766 <TIM_TI1_SetConfig+0x66>
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	4a25      	ldr	r2, [pc, #148]	@ (800e7d0 <TIM_TI1_SetConfig+0xd0>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d013      	beq.n	800e766 <TIM_TI1_SetConfig+0x66>
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	4a24      	ldr	r2, [pc, #144]	@ (800e7d4 <TIM_TI1_SetConfig+0xd4>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d00f      	beq.n	800e766 <TIM_TI1_SetConfig+0x66>
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	4a23      	ldr	r2, [pc, #140]	@ (800e7d8 <TIM_TI1_SetConfig+0xd8>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d00b      	beq.n	800e766 <TIM_TI1_SetConfig+0x66>
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	4a22      	ldr	r2, [pc, #136]	@ (800e7dc <TIM_TI1_SetConfig+0xdc>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d007      	beq.n	800e766 <TIM_TI1_SetConfig+0x66>
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	4a21      	ldr	r2, [pc, #132]	@ (800e7e0 <TIM_TI1_SetConfig+0xe0>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d003      	beq.n	800e766 <TIM_TI1_SetConfig+0x66>
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	4a20      	ldr	r2, [pc, #128]	@ (800e7e4 <TIM_TI1_SetConfig+0xe4>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d101      	bne.n	800e76a <TIM_TI1_SetConfig+0x6a>
 800e766:	2301      	movs	r3, #1
 800e768:	e000      	b.n	800e76c <TIM_TI1_SetConfig+0x6c>
 800e76a:	2300      	movs	r3, #0
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d008      	beq.n	800e782 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	f023 0303 	bic.w	r3, r3, #3
 800e776:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800e778:	697a      	ldr	r2, [r7, #20]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4313      	orrs	r3, r2
 800e77e:	617b      	str	r3, [r7, #20]
 800e780:	e003      	b.n	800e78a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	f043 0301 	orr.w	r3, r3, #1
 800e788:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e78a:	697b      	ldr	r3, [r7, #20]
 800e78c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e790:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800e792:	683b      	ldr	r3, [r7, #0]
 800e794:	011b      	lsls	r3, r3, #4
 800e796:	b2db      	uxtb	r3, r3
 800e798:	697a      	ldr	r2, [r7, #20]
 800e79a:	4313      	orrs	r3, r2
 800e79c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	f023 030a 	bic.w	r3, r3, #10
 800e7a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	f003 030a 	and.w	r3, r3, #10
 800e7ac:	693a      	ldr	r2, [r7, #16]
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	697a      	ldr	r2, [r7, #20]
 800e7b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	693a      	ldr	r2, [r7, #16]
 800e7bc:	621a      	str	r2, [r3, #32]
}
 800e7be:	bf00      	nop
 800e7c0:	371c      	adds	r7, #28
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop
 800e7cc:	40010000 	.word	0x40010000
 800e7d0:	40000400 	.word	0x40000400
 800e7d4:	40000800 	.word	0x40000800
 800e7d8:	40000c00 	.word	0x40000c00
 800e7dc:	40010400 	.word	0x40010400
 800e7e0:	40014000 	.word	0x40014000
 800e7e4:	40001800 	.word	0x40001800

0800e7e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b087      	sub	sp, #28
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	60f8      	str	r0, [r7, #12]
 800e7f0:	60b9      	str	r1, [r7, #8]
 800e7f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	6a1b      	ldr	r3, [r3, #32]
 800e7f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6a1b      	ldr	r3, [r3, #32]
 800e7fe:	f023 0201 	bic.w	r2, r3, #1
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	699b      	ldr	r3, [r3, #24]
 800e80a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	011b      	lsls	r3, r3, #4
 800e818:	693a      	ldr	r2, [r7, #16]
 800e81a:	4313      	orrs	r3, r2
 800e81c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	f023 030a 	bic.w	r3, r3, #10
 800e824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e826:	697a      	ldr	r2, [r7, #20]
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	4313      	orrs	r3, r2
 800e82c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	693a      	ldr	r2, [r7, #16]
 800e832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	621a      	str	r2, [r3, #32]
}
 800e83a:	bf00      	nop
 800e83c:	371c      	adds	r7, #28
 800e83e:	46bd      	mov	sp, r7
 800e840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e844:	4770      	bx	lr

0800e846 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e846:	b480      	push	{r7}
 800e848:	b087      	sub	sp, #28
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	60f8      	str	r0, [r7, #12]
 800e84e:	60b9      	str	r1, [r7, #8]
 800e850:	607a      	str	r2, [r7, #4]
 800e852:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	6a1b      	ldr	r3, [r3, #32]
 800e858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	6a1b      	ldr	r3, [r3, #32]
 800e85e:	f023 0210 	bic.w	r2, r3, #16
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	699b      	ldr	r3, [r3, #24]
 800e86a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e872:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	021b      	lsls	r3, r3, #8
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	4313      	orrs	r3, r2
 800e87c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	031b      	lsls	r3, r3, #12
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	693a      	ldr	r2, [r7, #16]
 800e88e:	4313      	orrs	r3, r2
 800e890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e898:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	011b      	lsls	r3, r3, #4
 800e89e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e8a2:	697a      	ldr	r2, [r7, #20]
 800e8a4:	4313      	orrs	r3, r2
 800e8a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	693a      	ldr	r2, [r7, #16]
 800e8ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	697a      	ldr	r2, [r7, #20]
 800e8b2:	621a      	str	r2, [r3, #32]
}
 800e8b4:	bf00      	nop
 800e8b6:	371c      	adds	r7, #28
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6a1b      	ldr	r3, [r3, #32]
 800e8d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	6a1b      	ldr	r3, [r3, #32]
 800e8d6:	f023 0210 	bic.w	r2, r3, #16
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	699b      	ldr	r3, [r3, #24]
 800e8e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e8ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	031b      	lsls	r3, r3, #12
 800e8f0:	693a      	ldr	r2, [r7, #16]
 800e8f2:	4313      	orrs	r3, r2
 800e8f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e8fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e8fe:	68bb      	ldr	r3, [r7, #8]
 800e900:	011b      	lsls	r3, r3, #4
 800e902:	697a      	ldr	r2, [r7, #20]
 800e904:	4313      	orrs	r3, r2
 800e906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	697a      	ldr	r2, [r7, #20]
 800e912:	621a      	str	r2, [r3, #32]
}
 800e914:	bf00      	nop
 800e916:	371c      	adds	r7, #28
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e920:	b480      	push	{r7}
 800e922:	b087      	sub	sp, #28
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
 800e92c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	6a1b      	ldr	r3, [r3, #32]
 800e932:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	6a1b      	ldr	r3, [r3, #32]
 800e938:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	69db      	ldr	r3, [r3, #28]
 800e944:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800e946:	693b      	ldr	r3, [r7, #16]
 800e948:	f023 0303 	bic.w	r3, r3, #3
 800e94c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800e94e:	693a      	ldr	r2, [r7, #16]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	4313      	orrs	r3, r2
 800e954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e95c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	011b      	lsls	r3, r3, #4
 800e962:	b2db      	uxtb	r3, r3
 800e964:	693a      	ldr	r2, [r7, #16]
 800e966:	4313      	orrs	r3, r2
 800e968:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800e970:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800e972:	68bb      	ldr	r3, [r7, #8]
 800e974:	021b      	lsls	r3, r3, #8
 800e976:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800e97a:	697a      	ldr	r2, [r7, #20]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	693a      	ldr	r2, [r7, #16]
 800e984:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	621a      	str	r2, [r3, #32]
}
 800e98c:	bf00      	nop
 800e98e:	371c      	adds	r7, #28
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800e998:	b480      	push	{r7}
 800e99a:	b087      	sub	sp, #28
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	60f8      	str	r0, [r7, #12]
 800e9a0:	60b9      	str	r1, [r7, #8]
 800e9a2:	607a      	str	r2, [r7, #4]
 800e9a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	6a1b      	ldr	r3, [r3, #32]
 800e9aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	6a1b      	ldr	r3, [r3, #32]
 800e9b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	69db      	ldr	r3, [r3, #28]
 800e9bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e9c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	021b      	lsls	r3, r3, #8
 800e9ca:	693a      	ldr	r2, [r7, #16]
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e9d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	031b      	lsls	r3, r3, #12
 800e9dc:	b29b      	uxth	r3, r3
 800e9de:	693a      	ldr	r2, [r7, #16]
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800e9ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	031b      	lsls	r3, r3, #12
 800e9f0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800e9f4:	697a      	ldr	r2, [r7, #20]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	693a      	ldr	r2, [r7, #16]
 800e9fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	697a      	ldr	r2, [r7, #20]
 800ea04:	621a      	str	r2, [r3, #32]
}
 800ea06:	bf00      	nop
 800ea08:	371c      	adds	r7, #28
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ea12:	b480      	push	{r7}
 800ea14:	b087      	sub	sp, #28
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	60f8      	str	r0, [r7, #12]
 800ea1a:	60b9      	str	r1, [r7, #8]
 800ea1c:	607a      	str	r2, [r7, #4]
 800ea1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	689b      	ldr	r3, [r3, #8]
 800ea24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ea2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	021a      	lsls	r2, r3, #8
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	431a      	orrs	r2, r3
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	697a      	ldr	r2, [r7, #20]
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	697a      	ldr	r2, [r7, #20]
 800ea44:	609a      	str	r2, [r3, #8]
}
 800ea46:	bf00      	nop
 800ea48:	371c      	adds	r7, #28
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
	...

0800ea54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b085      	sub	sp, #20
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d101      	bne.n	800ea6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea68:	2302      	movs	r3, #2
 800ea6a:	e06d      	b.n	800eb48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2202      	movs	r2, #2
 800ea78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	689b      	ldr	r3, [r3, #8]
 800ea8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	4a30      	ldr	r2, [pc, #192]	@ (800eb54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d004      	beq.n	800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4a2f      	ldr	r2, [pc, #188]	@ (800eb58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	d108      	bne.n	800eab2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800eaa6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	4313      	orrs	r3, r2
 800eab0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eab8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	4313      	orrs	r3, r2
 800eac2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	68fa      	ldr	r2, [r7, #12]
 800eaca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	4a20      	ldr	r2, [pc, #128]	@ (800eb54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ead2:	4293      	cmp	r3, r2
 800ead4:	d022      	beq.n	800eb1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eade:	d01d      	beq.n	800eb1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a1d      	ldr	r2, [pc, #116]	@ (800eb5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800eae6:	4293      	cmp	r3, r2
 800eae8:	d018      	beq.n	800eb1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4a1c      	ldr	r2, [pc, #112]	@ (800eb60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d013      	beq.n	800eb1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	4a1a      	ldr	r2, [pc, #104]	@ (800eb64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eafa:	4293      	cmp	r3, r2
 800eafc:	d00e      	beq.n	800eb1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	4a15      	ldr	r2, [pc, #84]	@ (800eb58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d009      	beq.n	800eb1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a16      	ldr	r2, [pc, #88]	@ (800eb68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d004      	beq.n	800eb1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	4a15      	ldr	r2, [pc, #84]	@ (800eb6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d10c      	bne.n	800eb36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	689b      	ldr	r3, [r3, #8]
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	68ba      	ldr	r2, [r7, #8]
 800eb34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2201      	movs	r2, #1
 800eb3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eb46:	2300      	movs	r3, #0
}
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3714      	adds	r7, #20
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb52:	4770      	bx	lr
 800eb54:	40010000 	.word	0x40010000
 800eb58:	40010400 	.word	0x40010400
 800eb5c:	40000400 	.word	0x40000400
 800eb60:	40000800 	.word	0x40000800
 800eb64:	40000c00 	.word	0x40000c00
 800eb68:	40014000 	.word	0x40014000
 800eb6c:	40001800 	.word	0x40001800

0800eb70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb78:	bf00      	nop
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb8c:	bf00      	nop
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eba0:	bf00      	nop
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b082      	sub	sp, #8
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d101      	bne.n	800ebbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ebba:	2301      	movs	r3, #1
 800ebbc:	e040      	b.n	800ec40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d106      	bne.n	800ebd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f7f6 fd44 	bl	800565c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2224      	movs	r2, #36	@ 0x24
 800ebd8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	f022 0201 	bic.w	r2, r2, #1
 800ebe8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d002      	beq.n	800ebf8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f000 fb16 	bl	800f224 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 f8af 	bl	800ed5c <UART_SetConfig>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b01      	cmp	r3, #1
 800ec02:	d101      	bne.n	800ec08 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ec04:	2301      	movs	r3, #1
 800ec06:	e01b      	b.n	800ec40 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	685a      	ldr	r2, [r3, #4]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ec16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	689a      	ldr	r2, [r3, #8]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ec26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f042 0201 	orr.w	r2, r2, #1
 800ec36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 fb95 	bl	800f368 <UART_CheckIdleState>
 800ec3e:	4603      	mov	r3, r0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3708      	adds	r7, #8
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b08a      	sub	sp, #40	@ 0x28
 800ec4c:	af02      	add	r7, sp, #8
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	603b      	str	r3, [r7, #0]
 800ec54:	4613      	mov	r3, r2
 800ec56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ec5c:	2b20      	cmp	r3, #32
 800ec5e:	d177      	bne.n	800ed50 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d002      	beq.n	800ec6c <HAL_UART_Transmit+0x24>
 800ec66:	88fb      	ldrh	r3, [r7, #6]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d101      	bne.n	800ec70 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	e070      	b.n	800ed52 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2200      	movs	r2, #0
 800ec74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	2221      	movs	r2, #33	@ 0x21
 800ec7c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ec7e:	f7f9 f82b 	bl	8007cd8 <HAL_GetTick>
 800ec82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	88fa      	ldrh	r2, [r7, #6]
 800ec88:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	88fa      	ldrh	r2, [r7, #6]
 800ec90:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	689b      	ldr	r3, [r3, #8]
 800ec98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ec9c:	d108      	bne.n	800ecb0 <HAL_UART_Transmit+0x68>
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	691b      	ldr	r3, [r3, #16]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d104      	bne.n	800ecb0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800eca6:	2300      	movs	r3, #0
 800eca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	61bb      	str	r3, [r7, #24]
 800ecae:	e003      	b.n	800ecb8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ecb8:	e02f      	b.n	800ed1a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	2180      	movs	r1, #128	@ 0x80
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f000 fba6 	bl	800f416 <UART_WaitOnFlagUntilTimeout>
 800ecca:	4603      	mov	r3, r0
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d004      	beq.n	800ecda <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2220      	movs	r2, #32
 800ecd4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800ecd6:	2303      	movs	r3, #3
 800ecd8:	e03b      	b.n	800ed52 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800ecda:	69fb      	ldr	r3, [r7, #28]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10b      	bne.n	800ecf8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ece0:	69bb      	ldr	r3, [r7, #24]
 800ece2:	881b      	ldrh	r3, [r3, #0]
 800ece4:	461a      	mov	r2, r3
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ecee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ecf0:	69bb      	ldr	r3, [r7, #24]
 800ecf2:	3302      	adds	r3, #2
 800ecf4:	61bb      	str	r3, [r7, #24]
 800ecf6:	e007      	b.n	800ed08 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	781a      	ldrb	r2, [r3, #0]
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	3301      	adds	r3, #1
 800ed06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ed0e:	b29b      	uxth	r3, r3
 800ed10:	3b01      	subs	r3, #1
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1c9      	bne.n	800ecba <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	9300      	str	r3, [sp, #0]
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	2140      	movs	r1, #64	@ 0x40
 800ed30:	68f8      	ldr	r0, [r7, #12]
 800ed32:	f000 fb70 	bl	800f416 <UART_WaitOnFlagUntilTimeout>
 800ed36:	4603      	mov	r3, r0
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d004      	beq.n	800ed46 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2220      	movs	r2, #32
 800ed40:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ed42:	2303      	movs	r3, #3
 800ed44:	e005      	b.n	800ed52 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2220      	movs	r2, #32
 800ed4a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	e000      	b.n	800ed52 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ed50:	2302      	movs	r3, #2
  }
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3720      	adds	r7, #32
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
	...

0800ed5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b088      	sub	sp, #32
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ed64:	2300      	movs	r3, #0
 800ed66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	689a      	ldr	r2, [r3, #8]
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	691b      	ldr	r3, [r3, #16]
 800ed70:	431a      	orrs	r2, r3
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	695b      	ldr	r3, [r3, #20]
 800ed76:	431a      	orrs	r2, r3
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	69db      	ldr	r3, [r3, #28]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	681a      	ldr	r2, [r3, #0]
 800ed86:	4ba6      	ldr	r3, [pc, #664]	@ (800f020 <UART_SetConfig+0x2c4>)
 800ed88:	4013      	ands	r3, r2
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	6812      	ldr	r2, [r2, #0]
 800ed8e:	6979      	ldr	r1, [r7, #20]
 800ed90:	430b      	orrs	r3, r1
 800ed92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	68da      	ldr	r2, [r3, #12]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	430a      	orrs	r2, r1
 800eda8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	699b      	ldr	r3, [r3, #24]
 800edae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6a1b      	ldr	r3, [r3, #32]
 800edb4:	697a      	ldr	r2, [r7, #20]
 800edb6:	4313      	orrs	r3, r2
 800edb8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	697a      	ldr	r2, [r7, #20]
 800edca:	430a      	orrs	r2, r1
 800edcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	4a94      	ldr	r2, [pc, #592]	@ (800f024 <UART_SetConfig+0x2c8>)
 800edd4:	4293      	cmp	r3, r2
 800edd6:	d120      	bne.n	800ee1a <UART_SetConfig+0xbe>
 800edd8:	4b93      	ldr	r3, [pc, #588]	@ (800f028 <UART_SetConfig+0x2cc>)
 800edda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edde:	f003 0303 	and.w	r3, r3, #3
 800ede2:	2b03      	cmp	r3, #3
 800ede4:	d816      	bhi.n	800ee14 <UART_SetConfig+0xb8>
 800ede6:	a201      	add	r2, pc, #4	@ (adr r2, 800edec <UART_SetConfig+0x90>)
 800ede8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edec:	0800edfd 	.word	0x0800edfd
 800edf0:	0800ee09 	.word	0x0800ee09
 800edf4:	0800ee03 	.word	0x0800ee03
 800edf8:	0800ee0f 	.word	0x0800ee0f
 800edfc:	2301      	movs	r3, #1
 800edfe:	77fb      	strb	r3, [r7, #31]
 800ee00:	e150      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ee02:	2302      	movs	r3, #2
 800ee04:	77fb      	strb	r3, [r7, #31]
 800ee06:	e14d      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ee08:	2304      	movs	r3, #4
 800ee0a:	77fb      	strb	r3, [r7, #31]
 800ee0c:	e14a      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ee0e:	2308      	movs	r3, #8
 800ee10:	77fb      	strb	r3, [r7, #31]
 800ee12:	e147      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ee14:	2310      	movs	r3, #16
 800ee16:	77fb      	strb	r3, [r7, #31]
 800ee18:	e144      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	4a83      	ldr	r2, [pc, #524]	@ (800f02c <UART_SetConfig+0x2d0>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d132      	bne.n	800ee8a <UART_SetConfig+0x12e>
 800ee24:	4b80      	ldr	r3, [pc, #512]	@ (800f028 <UART_SetConfig+0x2cc>)
 800ee26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee2a:	f003 030c 	and.w	r3, r3, #12
 800ee2e:	2b0c      	cmp	r3, #12
 800ee30:	d828      	bhi.n	800ee84 <UART_SetConfig+0x128>
 800ee32:	a201      	add	r2, pc, #4	@ (adr r2, 800ee38 <UART_SetConfig+0xdc>)
 800ee34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee38:	0800ee6d 	.word	0x0800ee6d
 800ee3c:	0800ee85 	.word	0x0800ee85
 800ee40:	0800ee85 	.word	0x0800ee85
 800ee44:	0800ee85 	.word	0x0800ee85
 800ee48:	0800ee79 	.word	0x0800ee79
 800ee4c:	0800ee85 	.word	0x0800ee85
 800ee50:	0800ee85 	.word	0x0800ee85
 800ee54:	0800ee85 	.word	0x0800ee85
 800ee58:	0800ee73 	.word	0x0800ee73
 800ee5c:	0800ee85 	.word	0x0800ee85
 800ee60:	0800ee85 	.word	0x0800ee85
 800ee64:	0800ee85 	.word	0x0800ee85
 800ee68:	0800ee7f 	.word	0x0800ee7f
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	77fb      	strb	r3, [r7, #31]
 800ee70:	e118      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ee72:	2302      	movs	r3, #2
 800ee74:	77fb      	strb	r3, [r7, #31]
 800ee76:	e115      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ee78:	2304      	movs	r3, #4
 800ee7a:	77fb      	strb	r3, [r7, #31]
 800ee7c:	e112      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ee7e:	2308      	movs	r3, #8
 800ee80:	77fb      	strb	r3, [r7, #31]
 800ee82:	e10f      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ee84:	2310      	movs	r3, #16
 800ee86:	77fb      	strb	r3, [r7, #31]
 800ee88:	e10c      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a68      	ldr	r2, [pc, #416]	@ (800f030 <UART_SetConfig+0x2d4>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d120      	bne.n	800eed6 <UART_SetConfig+0x17a>
 800ee94:	4b64      	ldr	r3, [pc, #400]	@ (800f028 <UART_SetConfig+0x2cc>)
 800ee96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ee9a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ee9e:	2b30      	cmp	r3, #48	@ 0x30
 800eea0:	d013      	beq.n	800eeca <UART_SetConfig+0x16e>
 800eea2:	2b30      	cmp	r3, #48	@ 0x30
 800eea4:	d814      	bhi.n	800eed0 <UART_SetConfig+0x174>
 800eea6:	2b20      	cmp	r3, #32
 800eea8:	d009      	beq.n	800eebe <UART_SetConfig+0x162>
 800eeaa:	2b20      	cmp	r3, #32
 800eeac:	d810      	bhi.n	800eed0 <UART_SetConfig+0x174>
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d002      	beq.n	800eeb8 <UART_SetConfig+0x15c>
 800eeb2:	2b10      	cmp	r3, #16
 800eeb4:	d006      	beq.n	800eec4 <UART_SetConfig+0x168>
 800eeb6:	e00b      	b.n	800eed0 <UART_SetConfig+0x174>
 800eeb8:	2300      	movs	r3, #0
 800eeba:	77fb      	strb	r3, [r7, #31]
 800eebc:	e0f2      	b.n	800f0a4 <UART_SetConfig+0x348>
 800eebe:	2302      	movs	r3, #2
 800eec0:	77fb      	strb	r3, [r7, #31]
 800eec2:	e0ef      	b.n	800f0a4 <UART_SetConfig+0x348>
 800eec4:	2304      	movs	r3, #4
 800eec6:	77fb      	strb	r3, [r7, #31]
 800eec8:	e0ec      	b.n	800f0a4 <UART_SetConfig+0x348>
 800eeca:	2308      	movs	r3, #8
 800eecc:	77fb      	strb	r3, [r7, #31]
 800eece:	e0e9      	b.n	800f0a4 <UART_SetConfig+0x348>
 800eed0:	2310      	movs	r3, #16
 800eed2:	77fb      	strb	r3, [r7, #31]
 800eed4:	e0e6      	b.n	800f0a4 <UART_SetConfig+0x348>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4a56      	ldr	r2, [pc, #344]	@ (800f034 <UART_SetConfig+0x2d8>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d120      	bne.n	800ef22 <UART_SetConfig+0x1c6>
 800eee0:	4b51      	ldr	r3, [pc, #324]	@ (800f028 <UART_SetConfig+0x2cc>)
 800eee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800eee6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800eeea:	2bc0      	cmp	r3, #192	@ 0xc0
 800eeec:	d013      	beq.n	800ef16 <UART_SetConfig+0x1ba>
 800eeee:	2bc0      	cmp	r3, #192	@ 0xc0
 800eef0:	d814      	bhi.n	800ef1c <UART_SetConfig+0x1c0>
 800eef2:	2b80      	cmp	r3, #128	@ 0x80
 800eef4:	d009      	beq.n	800ef0a <UART_SetConfig+0x1ae>
 800eef6:	2b80      	cmp	r3, #128	@ 0x80
 800eef8:	d810      	bhi.n	800ef1c <UART_SetConfig+0x1c0>
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d002      	beq.n	800ef04 <UART_SetConfig+0x1a8>
 800eefe:	2b40      	cmp	r3, #64	@ 0x40
 800ef00:	d006      	beq.n	800ef10 <UART_SetConfig+0x1b4>
 800ef02:	e00b      	b.n	800ef1c <UART_SetConfig+0x1c0>
 800ef04:	2300      	movs	r3, #0
 800ef06:	77fb      	strb	r3, [r7, #31]
 800ef08:	e0cc      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ef0a:	2302      	movs	r3, #2
 800ef0c:	77fb      	strb	r3, [r7, #31]
 800ef0e:	e0c9      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ef10:	2304      	movs	r3, #4
 800ef12:	77fb      	strb	r3, [r7, #31]
 800ef14:	e0c6      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ef16:	2308      	movs	r3, #8
 800ef18:	77fb      	strb	r3, [r7, #31]
 800ef1a:	e0c3      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ef1c:	2310      	movs	r3, #16
 800ef1e:	77fb      	strb	r3, [r7, #31]
 800ef20:	e0c0      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4a44      	ldr	r2, [pc, #272]	@ (800f038 <UART_SetConfig+0x2dc>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d125      	bne.n	800ef78 <UART_SetConfig+0x21c>
 800ef2c:	4b3e      	ldr	r3, [pc, #248]	@ (800f028 <UART_SetConfig+0x2cc>)
 800ef2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ef36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ef3a:	d017      	beq.n	800ef6c <UART_SetConfig+0x210>
 800ef3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ef40:	d817      	bhi.n	800ef72 <UART_SetConfig+0x216>
 800ef42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef46:	d00b      	beq.n	800ef60 <UART_SetConfig+0x204>
 800ef48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef4c:	d811      	bhi.n	800ef72 <UART_SetConfig+0x216>
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d003      	beq.n	800ef5a <UART_SetConfig+0x1fe>
 800ef52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ef56:	d006      	beq.n	800ef66 <UART_SetConfig+0x20a>
 800ef58:	e00b      	b.n	800ef72 <UART_SetConfig+0x216>
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	77fb      	strb	r3, [r7, #31]
 800ef5e:	e0a1      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ef60:	2302      	movs	r3, #2
 800ef62:	77fb      	strb	r3, [r7, #31]
 800ef64:	e09e      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ef66:	2304      	movs	r3, #4
 800ef68:	77fb      	strb	r3, [r7, #31]
 800ef6a:	e09b      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ef6c:	2308      	movs	r3, #8
 800ef6e:	77fb      	strb	r3, [r7, #31]
 800ef70:	e098      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ef72:	2310      	movs	r3, #16
 800ef74:	77fb      	strb	r3, [r7, #31]
 800ef76:	e095      	b.n	800f0a4 <UART_SetConfig+0x348>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a2f      	ldr	r2, [pc, #188]	@ (800f03c <UART_SetConfig+0x2e0>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d125      	bne.n	800efce <UART_SetConfig+0x272>
 800ef82:	4b29      	ldr	r3, [pc, #164]	@ (800f028 <UART_SetConfig+0x2cc>)
 800ef84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ef88:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ef8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ef90:	d017      	beq.n	800efc2 <UART_SetConfig+0x266>
 800ef92:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ef96:	d817      	bhi.n	800efc8 <UART_SetConfig+0x26c>
 800ef98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ef9c:	d00b      	beq.n	800efb6 <UART_SetConfig+0x25a>
 800ef9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800efa2:	d811      	bhi.n	800efc8 <UART_SetConfig+0x26c>
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d003      	beq.n	800efb0 <UART_SetConfig+0x254>
 800efa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800efac:	d006      	beq.n	800efbc <UART_SetConfig+0x260>
 800efae:	e00b      	b.n	800efc8 <UART_SetConfig+0x26c>
 800efb0:	2301      	movs	r3, #1
 800efb2:	77fb      	strb	r3, [r7, #31]
 800efb4:	e076      	b.n	800f0a4 <UART_SetConfig+0x348>
 800efb6:	2302      	movs	r3, #2
 800efb8:	77fb      	strb	r3, [r7, #31]
 800efba:	e073      	b.n	800f0a4 <UART_SetConfig+0x348>
 800efbc:	2304      	movs	r3, #4
 800efbe:	77fb      	strb	r3, [r7, #31]
 800efc0:	e070      	b.n	800f0a4 <UART_SetConfig+0x348>
 800efc2:	2308      	movs	r3, #8
 800efc4:	77fb      	strb	r3, [r7, #31]
 800efc6:	e06d      	b.n	800f0a4 <UART_SetConfig+0x348>
 800efc8:	2310      	movs	r3, #16
 800efca:	77fb      	strb	r3, [r7, #31]
 800efcc:	e06a      	b.n	800f0a4 <UART_SetConfig+0x348>
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	4a1b      	ldr	r2, [pc, #108]	@ (800f040 <UART_SetConfig+0x2e4>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d138      	bne.n	800f04a <UART_SetConfig+0x2ee>
 800efd8:	4b13      	ldr	r3, [pc, #76]	@ (800f028 <UART_SetConfig+0x2cc>)
 800efda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800efde:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800efe2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800efe6:	d017      	beq.n	800f018 <UART_SetConfig+0x2bc>
 800efe8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800efec:	d82a      	bhi.n	800f044 <UART_SetConfig+0x2e8>
 800efee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eff2:	d00b      	beq.n	800f00c <UART_SetConfig+0x2b0>
 800eff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eff8:	d824      	bhi.n	800f044 <UART_SetConfig+0x2e8>
 800effa:	2b00      	cmp	r3, #0
 800effc:	d003      	beq.n	800f006 <UART_SetConfig+0x2aa>
 800effe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f002:	d006      	beq.n	800f012 <UART_SetConfig+0x2b6>
 800f004:	e01e      	b.n	800f044 <UART_SetConfig+0x2e8>
 800f006:	2300      	movs	r3, #0
 800f008:	77fb      	strb	r3, [r7, #31]
 800f00a:	e04b      	b.n	800f0a4 <UART_SetConfig+0x348>
 800f00c:	2302      	movs	r3, #2
 800f00e:	77fb      	strb	r3, [r7, #31]
 800f010:	e048      	b.n	800f0a4 <UART_SetConfig+0x348>
 800f012:	2304      	movs	r3, #4
 800f014:	77fb      	strb	r3, [r7, #31]
 800f016:	e045      	b.n	800f0a4 <UART_SetConfig+0x348>
 800f018:	2308      	movs	r3, #8
 800f01a:	77fb      	strb	r3, [r7, #31]
 800f01c:	e042      	b.n	800f0a4 <UART_SetConfig+0x348>
 800f01e:	bf00      	nop
 800f020:	efff69f3 	.word	0xefff69f3
 800f024:	40011000 	.word	0x40011000
 800f028:	40023800 	.word	0x40023800
 800f02c:	40004400 	.word	0x40004400
 800f030:	40004800 	.word	0x40004800
 800f034:	40004c00 	.word	0x40004c00
 800f038:	40005000 	.word	0x40005000
 800f03c:	40011400 	.word	0x40011400
 800f040:	40007800 	.word	0x40007800
 800f044:	2310      	movs	r3, #16
 800f046:	77fb      	strb	r3, [r7, #31]
 800f048:	e02c      	b.n	800f0a4 <UART_SetConfig+0x348>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	4a72      	ldr	r2, [pc, #456]	@ (800f218 <UART_SetConfig+0x4bc>)
 800f050:	4293      	cmp	r3, r2
 800f052:	d125      	bne.n	800f0a0 <UART_SetConfig+0x344>
 800f054:	4b71      	ldr	r3, [pc, #452]	@ (800f21c <UART_SetConfig+0x4c0>)
 800f056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f05a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800f05e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f062:	d017      	beq.n	800f094 <UART_SetConfig+0x338>
 800f064:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f068:	d817      	bhi.n	800f09a <UART_SetConfig+0x33e>
 800f06a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f06e:	d00b      	beq.n	800f088 <UART_SetConfig+0x32c>
 800f070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f074:	d811      	bhi.n	800f09a <UART_SetConfig+0x33e>
 800f076:	2b00      	cmp	r3, #0
 800f078:	d003      	beq.n	800f082 <UART_SetConfig+0x326>
 800f07a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f07e:	d006      	beq.n	800f08e <UART_SetConfig+0x332>
 800f080:	e00b      	b.n	800f09a <UART_SetConfig+0x33e>
 800f082:	2300      	movs	r3, #0
 800f084:	77fb      	strb	r3, [r7, #31]
 800f086:	e00d      	b.n	800f0a4 <UART_SetConfig+0x348>
 800f088:	2302      	movs	r3, #2
 800f08a:	77fb      	strb	r3, [r7, #31]
 800f08c:	e00a      	b.n	800f0a4 <UART_SetConfig+0x348>
 800f08e:	2304      	movs	r3, #4
 800f090:	77fb      	strb	r3, [r7, #31]
 800f092:	e007      	b.n	800f0a4 <UART_SetConfig+0x348>
 800f094:	2308      	movs	r3, #8
 800f096:	77fb      	strb	r3, [r7, #31]
 800f098:	e004      	b.n	800f0a4 <UART_SetConfig+0x348>
 800f09a:	2310      	movs	r3, #16
 800f09c:	77fb      	strb	r3, [r7, #31]
 800f09e:	e001      	b.n	800f0a4 <UART_SetConfig+0x348>
 800f0a0:	2310      	movs	r3, #16
 800f0a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	69db      	ldr	r3, [r3, #28]
 800f0a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f0ac:	d15b      	bne.n	800f166 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800f0ae:	7ffb      	ldrb	r3, [r7, #31]
 800f0b0:	2b08      	cmp	r3, #8
 800f0b2:	d828      	bhi.n	800f106 <UART_SetConfig+0x3aa>
 800f0b4:	a201      	add	r2, pc, #4	@ (adr r2, 800f0bc <UART_SetConfig+0x360>)
 800f0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ba:	bf00      	nop
 800f0bc:	0800f0e1 	.word	0x0800f0e1
 800f0c0:	0800f0e9 	.word	0x0800f0e9
 800f0c4:	0800f0f1 	.word	0x0800f0f1
 800f0c8:	0800f107 	.word	0x0800f107
 800f0cc:	0800f0f7 	.word	0x0800f0f7
 800f0d0:	0800f107 	.word	0x0800f107
 800f0d4:	0800f107 	.word	0x0800f107
 800f0d8:	0800f107 	.word	0x0800f107
 800f0dc:	0800f0ff 	.word	0x0800f0ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0e0:	f7fc fa3c 	bl	800b55c <HAL_RCC_GetPCLK1Freq>
 800f0e4:	61b8      	str	r0, [r7, #24]
        break;
 800f0e6:	e013      	b.n	800f110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0e8:	f7fc fa4c 	bl	800b584 <HAL_RCC_GetPCLK2Freq>
 800f0ec:	61b8      	str	r0, [r7, #24]
        break;
 800f0ee:	e00f      	b.n	800f110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f0f0:	4b4b      	ldr	r3, [pc, #300]	@ (800f220 <UART_SetConfig+0x4c4>)
 800f0f2:	61bb      	str	r3, [r7, #24]
        break;
 800f0f4:	e00c      	b.n	800f110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0f6:	f7fc f95f 	bl	800b3b8 <HAL_RCC_GetSysClockFreq>
 800f0fa:	61b8      	str	r0, [r7, #24]
        break;
 800f0fc:	e008      	b.n	800f110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f102:	61bb      	str	r3, [r7, #24]
        break;
 800f104:	e004      	b.n	800f110 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800f106:	2300      	movs	r3, #0
 800f108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f10a:	2301      	movs	r3, #1
 800f10c:	77bb      	strb	r3, [r7, #30]
        break;
 800f10e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f110:	69bb      	ldr	r3, [r7, #24]
 800f112:	2b00      	cmp	r3, #0
 800f114:	d074      	beq.n	800f200 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800f116:	69bb      	ldr	r3, [r7, #24]
 800f118:	005a      	lsls	r2, r3, #1
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	685b      	ldr	r3, [r3, #4]
 800f11e:	085b      	lsrs	r3, r3, #1
 800f120:	441a      	add	r2, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	685b      	ldr	r3, [r3, #4]
 800f126:	fbb2 f3f3 	udiv	r3, r2, r3
 800f12a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	2b0f      	cmp	r3, #15
 800f130:	d916      	bls.n	800f160 <UART_SetConfig+0x404>
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f138:	d212      	bcs.n	800f160 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	f023 030f 	bic.w	r3, r3, #15
 800f142:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f144:	693b      	ldr	r3, [r7, #16]
 800f146:	085b      	lsrs	r3, r3, #1
 800f148:	b29b      	uxth	r3, r3
 800f14a:	f003 0307 	and.w	r3, r3, #7
 800f14e:	b29a      	uxth	r2, r3
 800f150:	89fb      	ldrh	r3, [r7, #14]
 800f152:	4313      	orrs	r3, r2
 800f154:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	89fa      	ldrh	r2, [r7, #14]
 800f15c:	60da      	str	r2, [r3, #12]
 800f15e:	e04f      	b.n	800f200 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f160:	2301      	movs	r3, #1
 800f162:	77bb      	strb	r3, [r7, #30]
 800f164:	e04c      	b.n	800f200 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f166:	7ffb      	ldrb	r3, [r7, #31]
 800f168:	2b08      	cmp	r3, #8
 800f16a:	d828      	bhi.n	800f1be <UART_SetConfig+0x462>
 800f16c:	a201      	add	r2, pc, #4	@ (adr r2, 800f174 <UART_SetConfig+0x418>)
 800f16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f172:	bf00      	nop
 800f174:	0800f199 	.word	0x0800f199
 800f178:	0800f1a1 	.word	0x0800f1a1
 800f17c:	0800f1a9 	.word	0x0800f1a9
 800f180:	0800f1bf 	.word	0x0800f1bf
 800f184:	0800f1af 	.word	0x0800f1af
 800f188:	0800f1bf 	.word	0x0800f1bf
 800f18c:	0800f1bf 	.word	0x0800f1bf
 800f190:	0800f1bf 	.word	0x0800f1bf
 800f194:	0800f1b7 	.word	0x0800f1b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f198:	f7fc f9e0 	bl	800b55c <HAL_RCC_GetPCLK1Freq>
 800f19c:	61b8      	str	r0, [r7, #24]
        break;
 800f19e:	e013      	b.n	800f1c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1a0:	f7fc f9f0 	bl	800b584 <HAL_RCC_GetPCLK2Freq>
 800f1a4:	61b8      	str	r0, [r7, #24]
        break;
 800f1a6:	e00f      	b.n	800f1c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f1a8:	4b1d      	ldr	r3, [pc, #116]	@ (800f220 <UART_SetConfig+0x4c4>)
 800f1aa:	61bb      	str	r3, [r7, #24]
        break;
 800f1ac:	e00c      	b.n	800f1c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f1ae:	f7fc f903 	bl	800b3b8 <HAL_RCC_GetSysClockFreq>
 800f1b2:	61b8      	str	r0, [r7, #24]
        break;
 800f1b4:	e008      	b.n	800f1c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f1ba:	61bb      	str	r3, [r7, #24]
        break;
 800f1bc:	e004      	b.n	800f1c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	77bb      	strb	r3, [r7, #30]
        break;
 800f1c6:	bf00      	nop
    }

    if (pclk != 0U)
 800f1c8:	69bb      	ldr	r3, [r7, #24]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d018      	beq.n	800f200 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	085a      	lsrs	r2, r3, #1
 800f1d4:	69bb      	ldr	r3, [r7, #24]
 800f1d6:	441a      	add	r2, r3
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	685b      	ldr	r3, [r3, #4]
 800f1dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1e2:	693b      	ldr	r3, [r7, #16]
 800f1e4:	2b0f      	cmp	r3, #15
 800f1e6:	d909      	bls.n	800f1fc <UART_SetConfig+0x4a0>
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f1ee:	d205      	bcs.n	800f1fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	b29a      	uxth	r2, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	60da      	str	r2, [r3, #12]
 800f1fa:	e001      	b.n	800f200 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	2200      	movs	r2, #0
 800f20a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800f20c:	7fbb      	ldrb	r3, [r7, #30]
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3720      	adds	r7, #32
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	40007c00 	.word	0x40007c00
 800f21c:	40023800 	.word	0x40023800
 800f220:	00f42400 	.word	0x00f42400

0800f224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f224:	b480      	push	{r7}
 800f226:	b083      	sub	sp, #12
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f230:	f003 0308 	and.w	r3, r3, #8
 800f234:	2b00      	cmp	r3, #0
 800f236:	d00a      	beq.n	800f24e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	430a      	orrs	r2, r1
 800f24c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f252:	f003 0301 	and.w	r3, r3, #1
 800f256:	2b00      	cmp	r3, #0
 800f258:	d00a      	beq.n	800f270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	685b      	ldr	r3, [r3, #4]
 800f260:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	430a      	orrs	r2, r1
 800f26e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f274:	f003 0302 	and.w	r3, r3, #2
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d00a      	beq.n	800f292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	430a      	orrs	r2, r1
 800f290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f296:	f003 0304 	and.w	r3, r3, #4
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d00a      	beq.n	800f2b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	430a      	orrs	r2, r1
 800f2b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2b8:	f003 0310 	and.w	r3, r3, #16
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d00a      	beq.n	800f2d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	689b      	ldr	r3, [r3, #8]
 800f2c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	430a      	orrs	r2, r1
 800f2d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2da:	f003 0320 	and.w	r3, r3, #32
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d00a      	beq.n	800f2f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	430a      	orrs	r2, r1
 800f2f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f300:	2b00      	cmp	r3, #0
 800f302:	d01a      	beq.n	800f33a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	430a      	orrs	r2, r1
 800f318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f31e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f322:	d10a      	bne.n	800f33a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	430a      	orrs	r2, r1
 800f338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f33e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f342:	2b00      	cmp	r3, #0
 800f344:	d00a      	beq.n	800f35c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	430a      	orrs	r2, r1
 800f35a:	605a      	str	r2, [r3, #4]
  }
}
 800f35c:	bf00      	nop
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b08c      	sub	sp, #48	@ 0x30
 800f36c:	af02      	add	r7, sp, #8
 800f36e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	2200      	movs	r2, #0
 800f374:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f378:	f7f8 fcae 	bl	8007cd8 <HAL_GetTick>
 800f37c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	f003 0308 	and.w	r3, r3, #8
 800f388:	2b08      	cmp	r3, #8
 800f38a:	d12e      	bne.n	800f3ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f38c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800f390:	9300      	str	r3, [sp, #0]
 800f392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f394:	2200      	movs	r2, #0
 800f396:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f83b 	bl	800f416 <UART_WaitOnFlagUntilTimeout>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d021      	beq.n	800f3ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	e853 3f00 	ldrex	r3, [r3]
 800f3b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f3ba:	623b      	str	r3, [r7, #32]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	6a3b      	ldr	r3, [r7, #32]
 800f3c4:	61fb      	str	r3, [r7, #28]
 800f3c6:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3c8:	69b9      	ldr	r1, [r7, #24]
 800f3ca:	69fa      	ldr	r2, [r7, #28]
 800f3cc:	e841 2300 	strex	r3, r2, [r1]
 800f3d0:	617b      	str	r3, [r7, #20]
   return(result);
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d1e6      	bne.n	800f3a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2220      	movs	r2, #32
 800f3dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f3e6:	2303      	movs	r3, #3
 800f3e8:	e011      	b.n	800f40e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2220      	movs	r2, #32
 800f3ee:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2220      	movs	r2, #32
 800f3f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2200      	movs	r2, #0
 800f402:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2200      	movs	r2, #0
 800f408:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3728      	adds	r7, #40	@ 0x28
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f416:	b580      	push	{r7, lr}
 800f418:	b084      	sub	sp, #16
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	60f8      	str	r0, [r7, #12]
 800f41e:	60b9      	str	r1, [r7, #8]
 800f420:	603b      	str	r3, [r7, #0]
 800f422:	4613      	mov	r3, r2
 800f424:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f426:	e04f      	b.n	800f4c8 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f428:	69bb      	ldr	r3, [r7, #24]
 800f42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f42e:	d04b      	beq.n	800f4c8 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f430:	f7f8 fc52 	bl	8007cd8 <HAL_GetTick>
 800f434:	4602      	mov	r2, r0
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	69ba      	ldr	r2, [r7, #24]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d302      	bcc.n	800f446 <UART_WaitOnFlagUntilTimeout+0x30>
 800f440:	69bb      	ldr	r3, [r7, #24]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d101      	bne.n	800f44a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f446:	2303      	movs	r3, #3
 800f448:	e04e      	b.n	800f4e8 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	f003 0304 	and.w	r3, r3, #4
 800f454:	2b00      	cmp	r3, #0
 800f456:	d037      	beq.n	800f4c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	2b80      	cmp	r3, #128	@ 0x80
 800f45c:	d034      	beq.n	800f4c8 <UART_WaitOnFlagUntilTimeout+0xb2>
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2b40      	cmp	r3, #64	@ 0x40
 800f462:	d031      	beq.n	800f4c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	69db      	ldr	r3, [r3, #28]
 800f46a:	f003 0308 	and.w	r3, r3, #8
 800f46e:	2b08      	cmp	r3, #8
 800f470:	d110      	bne.n	800f494 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	2208      	movs	r2, #8
 800f478:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f47a:	68f8      	ldr	r0, [r7, #12]
 800f47c:	f000 f838 	bl	800f4f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2208      	movs	r2, #8
 800f484:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2200      	movs	r2, #0
 800f48c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800f490:	2301      	movs	r3, #1
 800f492:	e029      	b.n	800f4e8 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	69db      	ldr	r3, [r3, #28]
 800f49a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f49e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f4a2:	d111      	bne.n	800f4c8 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f4ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f4ae:	68f8      	ldr	r0, [r7, #12]
 800f4b0:	f000 f81e 	bl	800f4f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	2220      	movs	r2, #32
 800f4b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800f4c4:	2303      	movs	r3, #3
 800f4c6:	e00f      	b.n	800f4e8 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	69da      	ldr	r2, [r3, #28]
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	4013      	ands	r3, r2
 800f4d2:	68ba      	ldr	r2, [r7, #8]
 800f4d4:	429a      	cmp	r2, r3
 800f4d6:	bf0c      	ite	eq
 800f4d8:	2301      	moveq	r3, #1
 800f4da:	2300      	movne	r3, #0
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	461a      	mov	r2, r3
 800f4e0:	79fb      	ldrb	r3, [r7, #7]
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d0a0      	beq.n	800f428 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f4e6:	2300      	movs	r3, #0
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	3710      	adds	r7, #16
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	bd80      	pop	{r7, pc}

0800f4f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f4f0:	b480      	push	{r7}
 800f4f2:	b095      	sub	sp, #84	@ 0x54
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f500:	e853 3f00 	ldrex	r3, [r3]
 800f504:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f50c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	461a      	mov	r2, r3
 800f514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f516:	643b      	str	r3, [r7, #64]	@ 0x40
 800f518:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f51a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f51c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f51e:	e841 2300 	strex	r3, r2, [r1]
 800f522:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f526:	2b00      	cmp	r3, #0
 800f528:	d1e6      	bne.n	800f4f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	3308      	adds	r3, #8
 800f530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f532:	6a3b      	ldr	r3, [r7, #32]
 800f534:	e853 3f00 	ldrex	r3, [r3]
 800f538:	61fb      	str	r3, [r7, #28]
   return(result);
 800f53a:	69fb      	ldr	r3, [r7, #28]
 800f53c:	f023 0301 	bic.w	r3, r3, #1
 800f540:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	3308      	adds	r3, #8
 800f548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f54a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f54c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f54e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f552:	e841 2300 	strex	r3, r2, [r1]
 800f556:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d1e5      	bne.n	800f52a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f562:	2b01      	cmp	r3, #1
 800f564:	d118      	bne.n	800f598 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	e853 3f00 	ldrex	r3, [r3]
 800f572:	60bb      	str	r3, [r7, #8]
   return(result);
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	f023 0310 	bic.w	r3, r3, #16
 800f57a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	461a      	mov	r2, r3
 800f582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f584:	61bb      	str	r3, [r7, #24]
 800f586:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f588:	6979      	ldr	r1, [r7, #20]
 800f58a:	69ba      	ldr	r2, [r7, #24]
 800f58c:	e841 2300 	strex	r3, r2, [r1]
 800f590:	613b      	str	r3, [r7, #16]
   return(result);
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d1e6      	bne.n	800f566 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2220      	movs	r2, #32
 800f59c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2200      	movs	r2, #0
 800f5a4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800f5ac:	bf00      	nop
 800f5ae:	3754      	adds	r7, #84	@ 0x54
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr

0800f5b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d121      	bne.n	800f60e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	4b27      	ldr	r3, [pc, #156]	@ (800f66c <FMC_SDRAM_Init+0xb4>)
 800f5d0:	4013      	ands	r3, r2
 800f5d2:	683a      	ldr	r2, [r7, #0]
 800f5d4:	6851      	ldr	r1, [r2, #4]
 800f5d6:	683a      	ldr	r2, [r7, #0]
 800f5d8:	6892      	ldr	r2, [r2, #8]
 800f5da:	4311      	orrs	r1, r2
 800f5dc:	683a      	ldr	r2, [r7, #0]
 800f5de:	68d2      	ldr	r2, [r2, #12]
 800f5e0:	4311      	orrs	r1, r2
 800f5e2:	683a      	ldr	r2, [r7, #0]
 800f5e4:	6912      	ldr	r2, [r2, #16]
 800f5e6:	4311      	orrs	r1, r2
 800f5e8:	683a      	ldr	r2, [r7, #0]
 800f5ea:	6952      	ldr	r2, [r2, #20]
 800f5ec:	4311      	orrs	r1, r2
 800f5ee:	683a      	ldr	r2, [r7, #0]
 800f5f0:	6992      	ldr	r2, [r2, #24]
 800f5f2:	4311      	orrs	r1, r2
 800f5f4:	683a      	ldr	r2, [r7, #0]
 800f5f6:	69d2      	ldr	r2, [r2, #28]
 800f5f8:	4311      	orrs	r1, r2
 800f5fa:	683a      	ldr	r2, [r7, #0]
 800f5fc:	6a12      	ldr	r2, [r2, #32]
 800f5fe:	4311      	orrs	r1, r2
 800f600:	683a      	ldr	r2, [r7, #0]
 800f602:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800f604:	430a      	orrs	r2, r1
 800f606:	431a      	orrs	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	601a      	str	r2, [r3, #0]
 800f60c:	e026      	b.n	800f65c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	69d9      	ldr	r1, [r3, #28]
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	6a1b      	ldr	r3, [r3, #32]
 800f61e:	4319      	orrs	r1, r3
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f624:	430b      	orrs	r3, r1
 800f626:	431a      	orrs	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	685a      	ldr	r2, [r3, #4]
 800f630:	4b0e      	ldr	r3, [pc, #56]	@ (800f66c <FMC_SDRAM_Init+0xb4>)
 800f632:	4013      	ands	r3, r2
 800f634:	683a      	ldr	r2, [r7, #0]
 800f636:	6851      	ldr	r1, [r2, #4]
 800f638:	683a      	ldr	r2, [r7, #0]
 800f63a:	6892      	ldr	r2, [r2, #8]
 800f63c:	4311      	orrs	r1, r2
 800f63e:	683a      	ldr	r2, [r7, #0]
 800f640:	68d2      	ldr	r2, [r2, #12]
 800f642:	4311      	orrs	r1, r2
 800f644:	683a      	ldr	r2, [r7, #0]
 800f646:	6912      	ldr	r2, [r2, #16]
 800f648:	4311      	orrs	r1, r2
 800f64a:	683a      	ldr	r2, [r7, #0]
 800f64c:	6952      	ldr	r2, [r2, #20]
 800f64e:	4311      	orrs	r1, r2
 800f650:	683a      	ldr	r2, [r7, #0]
 800f652:	6992      	ldr	r2, [r2, #24]
 800f654:	430a      	orrs	r2, r1
 800f656:	431a      	orrs	r2, r3
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f65c:	2300      	movs	r3, #0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	370c      	adds	r7, #12
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	ffff8000 	.word	0xffff8000

0800f670 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f670:	b480      	push	{r7}
 800f672:	b085      	sub	sp, #20
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d128      	bne.n	800f6d4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	1e59      	subs	r1, r3, #1
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	3b01      	subs	r3, #1
 800f696:	011b      	lsls	r3, r3, #4
 800f698:	4319      	orrs	r1, r3
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	021b      	lsls	r3, r3, #8
 800f6a2:	4319      	orrs	r1, r3
 800f6a4:	68bb      	ldr	r3, [r7, #8]
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	3b01      	subs	r3, #1
 800f6aa:	031b      	lsls	r3, r3, #12
 800f6ac:	4319      	orrs	r1, r3
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	691b      	ldr	r3, [r3, #16]
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	041b      	lsls	r3, r3, #16
 800f6b6:	4319      	orrs	r1, r3
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	695b      	ldr	r3, [r3, #20]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	051b      	lsls	r3, r3, #20
 800f6c0:	4319      	orrs	r1, r3
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	699b      	ldr	r3, [r3, #24]
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	061b      	lsls	r3, r3, #24
 800f6ca:	430b      	orrs	r3, r1
 800f6cc:	431a      	orrs	r2, r3
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	609a      	str	r2, [r3, #8]
 800f6d2:	e02d      	b.n	800f730 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	689a      	ldr	r2, [r3, #8]
 800f6d8:	4b19      	ldr	r3, [pc, #100]	@ (800f740 <FMC_SDRAM_Timing_Init+0xd0>)
 800f6da:	4013      	ands	r3, r2
 800f6dc:	68ba      	ldr	r2, [r7, #8]
 800f6de:	68d2      	ldr	r2, [r2, #12]
 800f6e0:	3a01      	subs	r2, #1
 800f6e2:	0311      	lsls	r1, r2, #12
 800f6e4:	68ba      	ldr	r2, [r7, #8]
 800f6e6:	6952      	ldr	r2, [r2, #20]
 800f6e8:	3a01      	subs	r2, #1
 800f6ea:	0512      	lsls	r2, r2, #20
 800f6ec:	430a      	orrs	r2, r1
 800f6ee:	431a      	orrs	r2, r3
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	68db      	ldr	r3, [r3, #12]
 800f6f8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	1e59      	subs	r1, r3, #1
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	3b01      	subs	r3, #1
 800f708:	011b      	lsls	r3, r3, #4
 800f70a:	4319      	orrs	r1, r3
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	3b01      	subs	r3, #1
 800f712:	021b      	lsls	r3, r3, #8
 800f714:	4319      	orrs	r1, r3
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	691b      	ldr	r3, [r3, #16]
 800f71a:	3b01      	subs	r3, #1
 800f71c:	041b      	lsls	r3, r3, #16
 800f71e:	4319      	orrs	r1, r3
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	699b      	ldr	r3, [r3, #24]
 800f724:	3b01      	subs	r3, #1
 800f726:	061b      	lsls	r3, r3, #24
 800f728:	430b      	orrs	r3, r1
 800f72a:	431a      	orrs	r2, r3
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800f730:	2300      	movs	r3, #0
}
 800f732:	4618      	mov	r0, r3
 800f734:	3714      	adds	r7, #20
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
 800f73e:	bf00      	nop
 800f740:	ff0f0fff 	.word	0xff0f0fff

0800f744 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f744:	b480      	push	{r7}
 800f746:	b085      	sub	sp, #20
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	691a      	ldr	r2, [r3, #16]
 800f754:	4b0c      	ldr	r3, [pc, #48]	@ (800f788 <FMC_SDRAM_SendCommand+0x44>)
 800f756:	4013      	ands	r3, r2
 800f758:	68ba      	ldr	r2, [r7, #8]
 800f75a:	6811      	ldr	r1, [r2, #0]
 800f75c:	68ba      	ldr	r2, [r7, #8]
 800f75e:	6852      	ldr	r2, [r2, #4]
 800f760:	4311      	orrs	r1, r2
 800f762:	68ba      	ldr	r2, [r7, #8]
 800f764:	6892      	ldr	r2, [r2, #8]
 800f766:	3a01      	subs	r2, #1
 800f768:	0152      	lsls	r2, r2, #5
 800f76a:	4311      	orrs	r1, r2
 800f76c:	68ba      	ldr	r2, [r7, #8]
 800f76e:	68d2      	ldr	r2, [r2, #12]
 800f770:	0252      	lsls	r2, r2, #9
 800f772:	430a      	orrs	r2, r1
 800f774:	431a      	orrs	r2, r3
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800f77a:	2300      	movs	r3, #0
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3714      	adds	r7, #20
 800f780:	46bd      	mov	sp, r7
 800f782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f786:	4770      	bx	lr
 800f788:	ffc00000 	.word	0xffc00000

0800f78c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	695a      	ldr	r2, [r3, #20]
 800f79a:	4b07      	ldr	r3, [pc, #28]	@ (800f7b8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800f79c:	4013      	ands	r3, r2
 800f79e:	683a      	ldr	r2, [r7, #0]
 800f7a0:	0052      	lsls	r2, r2, #1
 800f7a2:	431a      	orrs	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800f7a8:	2300      	movs	r3, #0
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	370c      	adds	r7, #12
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b4:	4770      	bx	lr
 800f7b6:	bf00      	nop
 800f7b8:	ffffc001 	.word	0xffffc001

0800f7bc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f7bc:	b084      	sub	sp, #16
 800f7be:	b480      	push	{r7}
 800f7c0:	b085      	sub	sp, #20
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
 800f7c6:	f107 001c 	add.w	r0, r7, #28
 800f7ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f7d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f7d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f7d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f7d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800f7da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800f7de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800f7e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800f7e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	4313      	orrs	r3, r2
 800f7ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	685a      	ldr	r2, [r3, #4]
 800f7f2:	4b07      	ldr	r3, [pc, #28]	@ (800f810 <SDMMC_Init+0x54>)
 800f7f4:	4013      	ands	r3, r2
 800f7f6:	68fa      	ldr	r2, [r7, #12]
 800f7f8:	431a      	orrs	r2, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f7fe:	2300      	movs	r3, #0
}
 800f800:	4618      	mov	r0, r3
 800f802:	3714      	adds	r7, #20
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	b004      	add	sp, #16
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop
 800f810:	ffff8100 	.word	0xffff8100

0800f814 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f814:	b480      	push	{r7}
 800f816:	b083      	sub	sp, #12
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800f822:	4618      	mov	r0, r3
 800f824:	370c      	adds	r7, #12
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr

0800f82e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800f82e:	b480      	push	{r7}
 800f830:	b083      	sub	sp, #12
 800f832:	af00      	add	r7, sp, #0
 800f834:	6078      	str	r0, [r7, #4]
 800f836:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800f842:	2300      	movs	r3, #0
}
 800f844:	4618      	mov	r0, r3
 800f846:	370c      	adds	r7, #12
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr

0800f850 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800f850:	b480      	push	{r7}
 800f852:	b083      	sub	sp, #12
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2203      	movs	r2, #3
 800f85c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f85e:	2300      	movs	r3, #0
}
 800f860:	4618      	mov	r0, r3
 800f862:	370c      	adds	r7, #12
 800f864:	46bd      	mov	sp, r7
 800f866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86a:	4770      	bx	lr

0800f86c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800f86c:	b480      	push	{r7}
 800f86e:	b083      	sub	sp, #12
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f003 0303 	and.w	r3, r3, #3
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	370c      	adds	r7, #12
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f888:	b480      	push	{r7}
 800f88a:	b085      	sub	sp, #20
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	6078      	str	r0, [r7, #4]
 800f890:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f892:	2300      	movs	r3, #0
 800f894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	681a      	ldr	r2, [r3, #0]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f8a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f8ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f8b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	4313      	orrs	r3, r2
 800f8b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	68da      	ldr	r2, [r3, #12]
 800f8be:	4b06      	ldr	r3, [pc, #24]	@ (800f8d8 <SDMMC_SendCommand+0x50>)
 800f8c0:	4013      	ands	r3, r2
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	431a      	orrs	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f8ca:	2300      	movs	r3, #0
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3714      	adds	r7, #20
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d6:	4770      	bx	lr
 800f8d8:	fffff000 	.word	0xfffff000

0800f8dc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	691b      	ldr	r3, [r3, #16]
 800f8e8:	b2db      	uxtb	r3, r3
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	370c      	adds	r7, #12
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr

0800f8f6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f8f6:	b480      	push	{r7}
 800f8f8:	b085      	sub	sp, #20
 800f8fa:	af00      	add	r7, sp, #0
 800f8fc:	6078      	str	r0, [r7, #4]
 800f8fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	3314      	adds	r3, #20
 800f904:	461a      	mov	r2, r3
 800f906:	683b      	ldr	r3, [r7, #0]
 800f908:	4413      	add	r3, r2
 800f90a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	681b      	ldr	r3, [r3, #0]
}  
 800f910:	4618      	mov	r0, r3
 800f912:	3714      	adds	r7, #20
 800f914:	46bd      	mov	sp, r7
 800f916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91a:	4770      	bx	lr

0800f91c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800f91c:	b480      	push	{r7}
 800f91e:	b085      	sub	sp, #20
 800f920:	af00      	add	r7, sp, #0
 800f922:	6078      	str	r0, [r7, #4]
 800f924:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f926:	2300      	movs	r3, #0
 800f928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f92a:	683b      	ldr	r3, [r7, #0]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	685a      	ldr	r2, [r3, #4]
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f942:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f948:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f94e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	4313      	orrs	r3, r2
 800f954:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f95a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	431a      	orrs	r2, r3
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800f966:	2300      	movs	r3, #0

}
 800f968:	4618      	mov	r0, r3
 800f96a:	3714      	adds	r7, #20
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr

0800f974 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b088      	sub	sp, #32
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f982:	2310      	movs	r3, #16
 800f984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f986:	2340      	movs	r3, #64	@ 0x40
 800f988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f98a:	2300      	movs	r3, #0
 800f98c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f98e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f994:	f107 0308 	add.w	r3, r7, #8
 800f998:	4619      	mov	r1, r3
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f7ff ff74 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f9a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f9a4:	2110      	movs	r1, #16
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	f000 f9d6 	bl	800fd58 <SDMMC_GetCmdResp1>
 800f9ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9ae:	69fb      	ldr	r3, [r7, #28]
}
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3720      	adds	r7, #32
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b088      	sub	sp, #32
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f9c6:	2311      	movs	r3, #17
 800f9c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f9ca:	2340      	movs	r3, #64	@ 0x40
 800f9cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f9d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f9d8:	f107 0308 	add.w	r3, r7, #8
 800f9dc:	4619      	mov	r1, r3
 800f9de:	6878      	ldr	r0, [r7, #4]
 800f9e0:	f7ff ff52 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f9e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f9e8:	2111      	movs	r1, #17
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f000 f9b4 	bl	800fd58 <SDMMC_GetCmdResp1>
 800f9f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9f2:	69fb      	ldr	r3, [r7, #28]
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3720      	adds	r7, #32
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b088      	sub	sp, #32
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800fa0a:	2312      	movs	r3, #18
 800fa0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa0e:	2340      	movs	r3, #64	@ 0x40
 800fa10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa12:	2300      	movs	r3, #0
 800fa14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa1c:	f107 0308 	add.w	r3, r7, #8
 800fa20:	4619      	mov	r1, r3
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	f7ff ff30 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fa28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa2c:	2112      	movs	r1, #18
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f000 f992 	bl	800fd58 <SDMMC_GetCmdResp1>
 800fa34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa36:	69fb      	ldr	r3, [r7, #28]
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3720      	adds	r7, #32
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b088      	sub	sp, #32
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fa4e:	2318      	movs	r3, #24
 800fa50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa52:	2340      	movs	r3, #64	@ 0x40
 800fa54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa56:	2300      	movs	r3, #0
 800fa58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fa60:	f107 0308 	add.w	r3, r7, #8
 800fa64:	4619      	mov	r1, r3
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f7ff ff0e 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800fa6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fa70:	2118      	movs	r1, #24
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 f970 	bl	800fd58 <SDMMC_GetCmdResp1>
 800fa78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa7a:	69fb      	ldr	r3, [r7, #28]
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3720      	adds	r7, #32
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b088      	sub	sp, #32
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800fa92:	2319      	movs	r3, #25
 800fa94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fa96:	2340      	movs	r3, #64	@ 0x40
 800fa98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fa9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800faa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800faa4:	f107 0308 	add.w	r3, r7, #8
 800faa8:	4619      	mov	r1, r3
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7ff feec 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800fab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fab4:	2119      	movs	r1, #25
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 f94e 	bl	800fd58 <SDMMC_GetCmdResp1>
 800fabc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fabe:	69fb      	ldr	r3, [r7, #28]
}
 800fac0:	4618      	mov	r0, r3
 800fac2:	3720      	adds	r7, #32
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}

0800fac8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b088      	sub	sp, #32
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800fad0:	2300      	movs	r3, #0
 800fad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800fad4:	230c      	movs	r3, #12
 800fad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fad8:	2340      	movs	r3, #64	@ 0x40
 800fada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fadc:	2300      	movs	r3, #0
 800fade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fae0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fae4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fae6:	f107 0308 	add.w	r3, r7, #8
 800faea:	4619      	mov	r1, r3
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7ff fecb 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800faf2:	4a05      	ldr	r2, [pc, #20]	@ (800fb08 <SDMMC_CmdStopTransfer+0x40>)
 800faf4:	210c      	movs	r1, #12
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f000 f92e 	bl	800fd58 <SDMMC_GetCmdResp1>
 800fafc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fafe:	69fb      	ldr	r3, [r7, #28]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3720      	adds	r7, #32
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	05f5e100 	.word	0x05f5e100

0800fb0c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b08a      	sub	sp, #40	@ 0x28
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800fb1c:	2307      	movs	r3, #7
 800fb1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fb20:	2340      	movs	r3, #64	@ 0x40
 800fb22:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb24:	2300      	movs	r3, #0
 800fb26:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb2c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb2e:	f107 0310 	add.w	r3, r7, #16
 800fb32:	4619      	mov	r1, r3
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	f7ff fea7 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800fb3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fb3e:	2107      	movs	r1, #7
 800fb40:	68f8      	ldr	r0, [r7, #12]
 800fb42:	f000 f909 	bl	800fd58 <SDMMC_GetCmdResp1>
 800fb46:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800fb48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3728      	adds	r7, #40	@ 0x28
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd80      	pop	{r7, pc}

0800fb52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800fb52:	b580      	push	{r7, lr}
 800fb54:	b088      	sub	sp, #32
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800fb5a:	2300      	movs	r3, #0
 800fb5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800fb62:	2300      	movs	r3, #0
 800fb64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fb66:	2300      	movs	r3, #0
 800fb68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fb6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fb70:	f107 0308 	add.w	r3, r7, #8
 800fb74:	4619      	mov	r1, r3
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f7ff fe86 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f000 fb23 	bl	80101c8 <SDMMC_GetCmdError>
 800fb82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fb84:	69fb      	ldr	r3, [r7, #28]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3720      	adds	r7, #32
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}

0800fb8e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800fb8e:	b580      	push	{r7, lr}
 800fb90:	b088      	sub	sp, #32
 800fb92:	af00      	add	r7, sp, #0
 800fb94:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800fb96:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800fb9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800fb9c:	2308      	movs	r3, #8
 800fb9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fba0:	2340      	movs	r3, #64	@ 0x40
 800fba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fba4:	2300      	movs	r3, #0
 800fba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fba8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fbac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbae:	f107 0308 	add.w	r3, r7, #8
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f7ff fe67 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	f000 fab6 	bl	801012c <SDMMC_GetCmdResp7>
 800fbc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fbc2:	69fb      	ldr	r3, [r7, #28]
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3720      	adds	r7, #32
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b088      	sub	sp, #32
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800fbda:	2337      	movs	r3, #55	@ 0x37
 800fbdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fbde:	2340      	movs	r3, #64	@ 0x40
 800fbe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fbe6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fbea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fbec:	f107 0308 	add.w	r3, r7, #8
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f7ff fe48 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800fbf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbfc:	2137      	movs	r1, #55	@ 0x37
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 f8aa 	bl	800fd58 <SDMMC_GetCmdResp1>
 800fc04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc06:	69fb      	ldr	r3, [r7, #28]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3720      	adds	r7, #32
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b088      	sub	sp, #32
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800fc1a:	683a      	ldr	r2, [r7, #0]
 800fc1c:	4b0d      	ldr	r3, [pc, #52]	@ (800fc54 <SDMMC_CmdAppOperCommand+0x44>)
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800fc22:	2329      	movs	r3, #41	@ 0x29
 800fc24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fc26:	2340      	movs	r3, #64	@ 0x40
 800fc28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc34:	f107 0308 	add.w	r3, r7, #8
 800fc38:	4619      	mov	r1, r3
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f7ff fe24 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 f9bf 	bl	800ffc4 <SDMMC_GetCmdResp3>
 800fc46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc48:	69fb      	ldr	r3, [r7, #28]
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3720      	adds	r7, #32
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	bd80      	pop	{r7, pc}
 800fc52:	bf00      	nop
 800fc54:	80100000 	.word	0x80100000

0800fc58 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b088      	sub	sp, #32
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800fc60:	2300      	movs	r3, #0
 800fc62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800fc64:	2302      	movs	r3, #2
 800fc66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fc68:	23c0      	movs	r3, #192	@ 0xc0
 800fc6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fc70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fc76:	f107 0308 	add.w	r3, r7, #8
 800fc7a:	4619      	mov	r1, r3
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f7ff fe03 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 f956 	bl	800ff34 <SDMMC_GetCmdResp2>
 800fc88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fc8a:	69fb      	ldr	r3, [r7, #28]
}
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	3720      	adds	r7, #32
 800fc90:	46bd      	mov	sp, r7
 800fc92:	bd80      	pop	{r7, pc}

0800fc94 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b088      	sub	sp, #32
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800fca2:	2309      	movs	r3, #9
 800fca4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800fca6:	23c0      	movs	r3, #192	@ 0xc0
 800fca8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fcb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcb4:	f107 0308 	add.w	r3, r7, #8
 800fcb8:	4619      	mov	r1, r3
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f7ff fde4 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 f937 	bl	800ff34 <SDMMC_GetCmdResp2>
 800fcc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fcc8:	69fb      	ldr	r3, [r7, #28]
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3720      	adds	r7, #32
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}

0800fcd2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800fcd2:	b580      	push	{r7, lr}
 800fcd4:	b088      	sub	sp, #32
 800fcd6:	af00      	add	r7, sp, #0
 800fcd8:	6078      	str	r0, [r7, #4]
 800fcda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800fcdc:	2300      	movs	r3, #0
 800fcde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800fce0:	2303      	movs	r3, #3
 800fce2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fce4:	2340      	movs	r3, #64	@ 0x40
 800fce6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fce8:	2300      	movs	r3, #0
 800fcea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fcec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fcf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fcf2:	f107 0308 	add.w	r3, r7, #8
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	6878      	ldr	r0, [r7, #4]
 800fcfa:	f7ff fdc5 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800fcfe:	683a      	ldr	r2, [r7, #0]
 800fd00:	2103      	movs	r1, #3
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f99c 	bl	8010040 <SDMMC_GetCmdResp6>
 800fd08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd0a:	69fb      	ldr	r3, [r7, #28]
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3720      	adds	r7, #32
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd80      	pop	{r7, pc}

0800fd14 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b088      	sub	sp, #32
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800fd22:	230d      	movs	r3, #13
 800fd24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800fd26:	2340      	movs	r3, #64	@ 0x40
 800fd28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800fd2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800fd34:	f107 0308 	add.w	r3, r7, #8
 800fd38:	4619      	mov	r1, r3
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f7ff fda4 	bl	800f888 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800fd40:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fd44:	210d      	movs	r1, #13
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f000 f806 	bl	800fd58 <SDMMC_GetCmdResp1>
 800fd4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fd4e:	69fb      	ldr	r3, [r7, #28]
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	3720      	adds	r7, #32
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b088      	sub	sp, #32
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	460b      	mov	r3, r1
 800fd62:	607a      	str	r2, [r7, #4]
 800fd64:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fd66:	4b70      	ldr	r3, [pc, #448]	@ (800ff28 <SDMMC_GetCmdResp1+0x1d0>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	4a70      	ldr	r2, [pc, #448]	@ (800ff2c <SDMMC_GetCmdResp1+0x1d4>)
 800fd6c:	fba2 2303 	umull	r2, r3, r2, r3
 800fd70:	0a5a      	lsrs	r2, r3, #9
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	fb02 f303 	mul.w	r3, r2, r3
 800fd78:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fd7a:	69fb      	ldr	r3, [r7, #28]
 800fd7c:	1e5a      	subs	r2, r3, #1
 800fd7e:	61fa      	str	r2, [r7, #28]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d102      	bne.n	800fd8a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fd88:	e0c9      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd8e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d0ef      	beq.n	800fd7a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d1ea      	bne.n	800fd7a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fda8:	f003 0304 	and.w	r3, r3, #4
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d004      	beq.n	800fdba <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	2204      	movs	r2, #4
 800fdb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fdb6:	2304      	movs	r3, #4
 800fdb8:	e0b1      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdbe:	f003 0301 	and.w	r3, r3, #1
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d004      	beq.n	800fdd0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	2201      	movs	r2, #1
 800fdca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fdcc:	2301      	movs	r3, #1
 800fdce:	e0a6      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	22c5      	movs	r2, #197	@ 0xc5
 800fdd4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800fdd6:	68f8      	ldr	r0, [r7, #12]
 800fdd8:	f7ff fd80 	bl	800f8dc <SDMMC_GetCommandResponse>
 800fddc:	4603      	mov	r3, r0
 800fdde:	461a      	mov	r2, r3
 800fde0:	7afb      	ldrb	r3, [r7, #11]
 800fde2:	4293      	cmp	r3, r2
 800fde4:	d001      	beq.n	800fdea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fde6:	2301      	movs	r3, #1
 800fde8:	e099      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800fdea:	2100      	movs	r1, #0
 800fdec:	68f8      	ldr	r0, [r7, #12]
 800fdee:	f7ff fd82 	bl	800f8f6 <SDMMC_GetResponse>
 800fdf2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fdf4:	697a      	ldr	r2, [r7, #20]
 800fdf6:	4b4e      	ldr	r3, [pc, #312]	@ (800ff30 <SDMMC_GetCmdResp1+0x1d8>)
 800fdf8:	4013      	ands	r3, r2
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d101      	bne.n	800fe02 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	e08d      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	da02      	bge.n	800fe0e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fe08:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800fe0c:	e087      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fe0e:	697b      	ldr	r3, [r7, #20]
 800fe10:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d001      	beq.n	800fe1c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fe18:	2340      	movs	r3, #64	@ 0x40
 800fe1a:	e080      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fe1c:	697b      	ldr	r3, [r7, #20]
 800fe1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d001      	beq.n	800fe2a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fe26:	2380      	movs	r3, #128	@ 0x80
 800fe28:	e079      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d002      	beq.n	800fe3a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fe34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fe38:	e071      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d002      	beq.n	800fe4a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fe44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fe48:	e069      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d002      	beq.n	800fe5a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fe54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe58:	e061      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d002      	beq.n	800fe6a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fe64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fe68:	e059      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d002      	beq.n	800fe7a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fe74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800fe78:	e051      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d002      	beq.n	800fe8a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fe84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800fe88:	e049      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d002      	beq.n	800fe9a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fe94:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800fe98:	e041      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d002      	beq.n	800feaa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800fea8:	e039      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d002      	beq.n	800feba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800feb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800feb8:	e031      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d002      	beq.n	800feca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fec4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800fec8:	e029      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800feca:	697b      	ldr	r3, [r7, #20]
 800fecc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d002      	beq.n	800feda <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fed4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800fed8:	e021      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d002      	beq.n	800feea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fee4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800fee8:	e019      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d002      	beq.n	800fefa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fef4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800fef8:	e011      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d002      	beq.n	800ff0a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ff04:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ff08:	e009      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	f003 0308 	and.w	r3, r3, #8
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d002      	beq.n	800ff1a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ff14:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800ff18:	e001      	b.n	800ff1e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ff1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3720      	adds	r7, #32
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	20004ed0 	.word	0x20004ed0
 800ff2c:	10624dd3 	.word	0x10624dd3
 800ff30:	fdffe008 	.word	0xfdffe008

0800ff34 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b085      	sub	sp, #20
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ff3c:	4b1f      	ldr	r3, [pc, #124]	@ (800ffbc <SDMMC_GetCmdResp2+0x88>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4a1f      	ldr	r2, [pc, #124]	@ (800ffc0 <SDMMC_GetCmdResp2+0x8c>)
 800ff42:	fba2 2303 	umull	r2, r3, r2, r3
 800ff46:	0a5b      	lsrs	r3, r3, #9
 800ff48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ff4c:	fb02 f303 	mul.w	r3, r2, r3
 800ff50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	1e5a      	subs	r2, r3, #1
 800ff56:	60fa      	str	r2, [r7, #12]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d102      	bne.n	800ff62 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ff5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ff60:	e026      	b.n	800ffb0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff66:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d0ef      	beq.n	800ff52 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d1ea      	bne.n	800ff52 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff80:	f003 0304 	and.w	r3, r3, #4
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d004      	beq.n	800ff92 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2204      	movs	r2, #4
 800ff8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ff8e:	2304      	movs	r3, #4
 800ff90:	e00e      	b.n	800ffb0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff96:	f003 0301 	and.w	r3, r3, #1
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d004      	beq.n	800ffa8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2201      	movs	r2, #1
 800ffa2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	e003      	b.n	800ffb0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	22c5      	movs	r2, #197	@ 0xc5
 800ffac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800ffae:	2300      	movs	r3, #0
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3714      	adds	r7, #20
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr
 800ffbc:	20004ed0 	.word	0x20004ed0
 800ffc0:	10624dd3 	.word	0x10624dd3

0800ffc4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800ffc4:	b480      	push	{r7}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ffcc:	4b1a      	ldr	r3, [pc, #104]	@ (8010038 <SDMMC_GetCmdResp3+0x74>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4a1a      	ldr	r2, [pc, #104]	@ (801003c <SDMMC_GetCmdResp3+0x78>)
 800ffd2:	fba2 2303 	umull	r2, r3, r2, r3
 800ffd6:	0a5b      	lsrs	r3, r3, #9
 800ffd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ffdc:	fb02 f303 	mul.w	r3, r2, r3
 800ffe0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	1e5a      	subs	r2, r3, #1
 800ffe6:	60fa      	str	r2, [r7, #12]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d102      	bne.n	800fff2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ffec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800fff0:	e01b      	b.n	801002a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fff6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d0ef      	beq.n	800ffe2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010008:	2b00      	cmp	r3, #0
 801000a:	d1ea      	bne.n	800ffe2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010010:	f003 0304 	and.w	r3, r3, #4
 8010014:	2b00      	cmp	r3, #0
 8010016:	d004      	beq.n	8010022 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2204      	movs	r2, #4
 801001c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801001e:	2304      	movs	r3, #4
 8010020:	e003      	b.n	801002a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	22c5      	movs	r2, #197	@ 0xc5
 8010026:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010028:	2300      	movs	r3, #0
}
 801002a:	4618      	mov	r0, r3
 801002c:	3714      	adds	r7, #20
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop
 8010038:	20004ed0 	.word	0x20004ed0
 801003c:	10624dd3 	.word	0x10624dd3

08010040 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010040:	b580      	push	{r7, lr}
 8010042:	b088      	sub	sp, #32
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	460b      	mov	r3, r1
 801004a:	607a      	str	r2, [r7, #4]
 801004c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801004e:	4b35      	ldr	r3, [pc, #212]	@ (8010124 <SDMMC_GetCmdResp6+0xe4>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	4a35      	ldr	r2, [pc, #212]	@ (8010128 <SDMMC_GetCmdResp6+0xe8>)
 8010054:	fba2 2303 	umull	r2, r3, r2, r3
 8010058:	0a5b      	lsrs	r3, r3, #9
 801005a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801005e:	fb02 f303 	mul.w	r3, r2, r3
 8010062:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	1e5a      	subs	r2, r3, #1
 8010068:	61fa      	str	r2, [r7, #28]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d102      	bne.n	8010074 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801006e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010072:	e052      	b.n	801011a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010078:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010080:	2b00      	cmp	r3, #0
 8010082:	d0ef      	beq.n	8010064 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8010084:	69bb      	ldr	r3, [r7, #24]
 8010086:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801008a:	2b00      	cmp	r3, #0
 801008c:	d1ea      	bne.n	8010064 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010092:	f003 0304 	and.w	r3, r3, #4
 8010096:	2b00      	cmp	r3, #0
 8010098:	d004      	beq.n	80100a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	2204      	movs	r2, #4
 801009e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80100a0:	2304      	movs	r3, #4
 80100a2:	e03a      	b.n	801011a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80100a8:	f003 0301 	and.w	r3, r3, #1
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d004      	beq.n	80100ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2201      	movs	r2, #1
 80100b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80100b6:	2301      	movs	r3, #1
 80100b8:	e02f      	b.n	801011a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80100ba:	68f8      	ldr	r0, [r7, #12]
 80100bc:	f7ff fc0e 	bl	800f8dc <SDMMC_GetCommandResponse>
 80100c0:	4603      	mov	r3, r0
 80100c2:	461a      	mov	r2, r3
 80100c4:	7afb      	ldrb	r3, [r7, #11]
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d001      	beq.n	80100ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80100ca:	2301      	movs	r3, #1
 80100cc:	e025      	b.n	801011a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	22c5      	movs	r2, #197	@ 0xc5
 80100d2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80100d4:	2100      	movs	r1, #0
 80100d6:	68f8      	ldr	r0, [r7, #12]
 80100d8:	f7ff fc0d 	bl	800f8f6 <SDMMC_GetResponse>
 80100dc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d106      	bne.n	80100f6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	0c1b      	lsrs	r3, r3, #16
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80100f2:	2300      	movs	r3, #0
 80100f4:	e011      	b.n	801011a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80100f6:	697b      	ldr	r3, [r7, #20]
 80100f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d002      	beq.n	8010106 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010100:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010104:	e009      	b.n	801011a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801010c:	2b00      	cmp	r3, #0
 801010e:	d002      	beq.n	8010116 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8010114:	e001      	b.n	801011a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010116:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 801011a:	4618      	mov	r0, r3
 801011c:	3720      	adds	r7, #32
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	20004ed0 	.word	0x20004ed0
 8010128:	10624dd3 	.word	0x10624dd3

0801012c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801012c:	b480      	push	{r7}
 801012e:	b085      	sub	sp, #20
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010134:	4b22      	ldr	r3, [pc, #136]	@ (80101c0 <SDMMC_GetCmdResp7+0x94>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	4a22      	ldr	r2, [pc, #136]	@ (80101c4 <SDMMC_GetCmdResp7+0x98>)
 801013a:	fba2 2303 	umull	r2, r3, r2, r3
 801013e:	0a5b      	lsrs	r3, r3, #9
 8010140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010144:	fb02 f303 	mul.w	r3, r2, r3
 8010148:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	1e5a      	subs	r2, r3, #1
 801014e:	60fa      	str	r2, [r7, #12]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d102      	bne.n	801015a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010154:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8010158:	e02c      	b.n	80101b4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801015e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8010166:	2b00      	cmp	r3, #0
 8010168:	d0ef      	beq.n	801014a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010170:	2b00      	cmp	r3, #0
 8010172:	d1ea      	bne.n	801014a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010178:	f003 0304 	and.w	r3, r3, #4
 801017c:	2b00      	cmp	r3, #0
 801017e:	d004      	beq.n	801018a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2204      	movs	r2, #4
 8010184:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010186:	2304      	movs	r3, #4
 8010188:	e014      	b.n	80101b4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801018e:	f003 0301 	and.w	r3, r3, #1
 8010192:	2b00      	cmp	r3, #0
 8010194:	d004      	beq.n	80101a0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2201      	movs	r2, #1
 801019a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801019c:	2301      	movs	r3, #1
 801019e:	e009      	b.n	80101b4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d002      	beq.n	80101b2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2240      	movs	r2, #64	@ 0x40
 80101b0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80101b2:	2300      	movs	r3, #0
  
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3714      	adds	r7, #20
 80101b8:	46bd      	mov	sp, r7
 80101ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101be:	4770      	bx	lr
 80101c0:	20004ed0 	.word	0x20004ed0
 80101c4:	10624dd3 	.word	0x10624dd3

080101c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b085      	sub	sp, #20
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80101d0:	4b11      	ldr	r3, [pc, #68]	@ (8010218 <SDMMC_GetCmdError+0x50>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4a11      	ldr	r2, [pc, #68]	@ (801021c <SDMMC_GetCmdError+0x54>)
 80101d6:	fba2 2303 	umull	r2, r3, r2, r3
 80101da:	0a5b      	lsrs	r3, r3, #9
 80101dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80101e0:	fb02 f303 	mul.w	r3, r2, r3
 80101e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	1e5a      	subs	r2, r3, #1
 80101ea:	60fa      	str	r2, [r7, #12]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d102      	bne.n	80101f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80101f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80101f4:	e009      	b.n	801020a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80101fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d0f1      	beq.n	80101e6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	22c5      	movs	r2, #197	@ 0xc5
 8010206:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8010208:	2300      	movs	r3, #0
}
 801020a:	4618      	mov	r0, r3
 801020c:	3714      	adds	r7, #20
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr
 8010216:	bf00      	nop
 8010218:	20004ed0 	.word	0x20004ed0
 801021c:	10624dd3 	.word	0x10624dd3

08010220 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t __weak hts221_read_reg(const stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                               uint16_t len)
{
 8010220:	b590      	push	{r4, r7, lr}
 8010222:	b087      	sub	sp, #28
 8010224:	af00      	add	r7, sp, #0
 8010226:	60f8      	str	r0, [r7, #12]
 8010228:	607a      	str	r2, [r7, #4]
 801022a:	461a      	mov	r2, r3
 801022c:	460b      	mov	r3, r1
 801022e:	72fb      	strb	r3, [r7, #11]
 8010230:	4613      	mov	r3, r2
 8010232:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d102      	bne.n	8010240 <hts221_read_reg+0x20>
 801023a:	f04f 33ff 	mov.w	r3, #4294967295
 801023e:	e009      	b.n	8010254 <hts221_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	685c      	ldr	r4, [r3, #4]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	68d8      	ldr	r0, [r3, #12]
 8010248:	893b      	ldrh	r3, [r7, #8]
 801024a:	7af9      	ldrb	r1, [r7, #11]
 801024c:	687a      	ldr	r2, [r7, #4]
 801024e:	47a0      	blx	r4
 8010250:	6178      	str	r0, [r7, #20]

  return ret;
 8010252:	697b      	ldr	r3, [r7, #20]
}
 8010254:	4618      	mov	r0, r3
 8010256:	371c      	adds	r7, #28
 8010258:	46bd      	mov	sp, r7
 801025a:	bd90      	pop	{r4, r7, pc}

0801025c <hts221_write_reg>:
  *
  */
int32_t __weak hts221_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 801025c:	b590      	push	{r4, r7, lr}
 801025e:	b087      	sub	sp, #28
 8010260:	af00      	add	r7, sp, #0
 8010262:	60f8      	str	r0, [r7, #12]
 8010264:	607a      	str	r2, [r7, #4]
 8010266:	461a      	mov	r2, r3
 8010268:	460b      	mov	r3, r1
 801026a:	72fb      	strb	r3, [r7, #11]
 801026c:	4613      	mov	r3, r2
 801026e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d102      	bne.n	801027c <hts221_write_reg+0x20>
 8010276:	f04f 33ff 	mov.w	r3, #4294967295
 801027a:	e009      	b.n	8010290 <hts221_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	681c      	ldr	r4, [r3, #0]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	68d8      	ldr	r0, [r3, #12]
 8010284:	893b      	ldrh	r3, [r7, #8]
 8010286:	7af9      	ldrb	r1, [r7, #11]
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	47a0      	blx	r4
 801028c:	6178      	str	r0, [r7, #20]

  return ret;
 801028e:	697b      	ldr	r3, [r7, #20]
}
 8010290:	4618      	mov	r0, r3
 8010292:	371c      	adds	r7, #28
 8010294:	46bd      	mov	sp, r7
 8010296:	bd90      	pop	{r4, r7, pc}

08010298 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(const stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b084      	sub	sp, #16
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
 80102a0:	460b      	mov	r3, r1
 80102a2:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80102a4:	f107 0208 	add.w	r2, r7, #8
 80102a8:	2301      	movs	r3, #1
 80102aa:	2120      	movs	r1, #32
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f7ff ffb7 	bl	8010220 <hts221_read_reg>
 80102b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d10f      	bne.n	80102da <hts221_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 80102ba:	78fb      	ldrb	r3, [r7, #3]
 80102bc:	f003 0303 	and.w	r3, r3, #3
 80102c0:	b2da      	uxtb	r2, r3
 80102c2:	7a3b      	ldrb	r3, [r7, #8]
 80102c4:	f362 0301 	bfi	r3, r2, #0, #2
 80102c8:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80102ca:	f107 0208 	add.w	r2, r7, #8
 80102ce:	2301      	movs	r3, #1
 80102d0:	2120      	movs	r1, #32
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7ff ffc2 	bl	801025c <hts221_write_reg>
 80102d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80102da:	68fb      	ldr	r3, [r7, #12]
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3710      	adds	r7, #16
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}

080102e4 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	460b      	mov	r3, r1
 80102ee:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80102f0:	f107 0208 	add.w	r2, r7, #8
 80102f4:	2301      	movs	r3, #1
 80102f6:	2120      	movs	r1, #32
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f7ff ff91 	bl	8010220 <hts221_read_reg>
 80102fe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d10f      	bne.n	8010326 <hts221_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8010306:	78fb      	ldrb	r3, [r7, #3]
 8010308:	f003 0301 	and.w	r3, r3, #1
 801030c:	b2da      	uxtb	r2, r3
 801030e:	7a3b      	ldrb	r3, [r7, #8]
 8010310:	f362 0382 	bfi	r3, r2, #2, #1
 8010314:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8010316:	f107 0208 	add.w	r2, r7, #8
 801031a:	2301      	movs	r3, #1
 801031c:	2120      	movs	r1, #32
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f7ff ff9c 	bl	801025c <hts221_write_reg>
 8010324:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8010326:	68fb      	ldr	r3, [r7, #12]
}
 8010328:	4618      	mov	r0, r3
 801032a:	3710      	adds	r7, #16
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 801033a:	f107 0208 	add.w	r2, r7, #8
 801033e:	2302      	movs	r3, #2
 8010340:	2128      	movs	r1, #40	@ 0x28
 8010342:	6878      	ldr	r0, [r7, #4]
 8010344:	f7ff ff6c 	bl	8010220 <hts221_read_reg>
 8010348:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 801034a:	7a7b      	ldrb	r3, [r7, #9]
 801034c:	b21a      	sxth	r2, r3
 801034e:	683b      	ldr	r3, [r7, #0]
 8010350:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8010352:	683b      	ldr	r3, [r7, #0]
 8010354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010358:	b29b      	uxth	r3, r3
 801035a:	021b      	lsls	r3, r3, #8
 801035c:	b29b      	uxth	r3, r3
 801035e:	7a3a      	ldrb	r2, [r7, #8]
 8010360:	4413      	add	r3, r2
 8010362:	b29b      	uxth	r3, r3
 8010364:	b21a      	sxth	r2, r3
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	801a      	strh	r2, [r3, #0]

  return ret;
 801036a:	68fb      	ldr	r3, [r7, #12]
}
 801036c:	4618      	mov	r0, r3
 801036e:	3710      	adds	r7, #16
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}

08010374 <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 801037e:	f107 0208 	add.w	r2, r7, #8
 8010382:	2302      	movs	r3, #2
 8010384:	212a      	movs	r1, #42	@ 0x2a
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f7ff ff4a 	bl	8010220 <hts221_read_reg>
 801038c:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 801038e:	7a7b      	ldrb	r3, [r7, #9]
 8010390:	b21a      	sxth	r2, r3
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	f9b3 3000 	ldrsh.w	r3, [r3]
 801039c:	b29b      	uxth	r3, r3
 801039e:	021b      	lsls	r3, r3, #8
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	7a3a      	ldrb	r2, [r7, #8]
 80103a4:	4413      	add	r3, r2
 80103a6:	b29b      	uxth	r3, r3
 80103a8:	b21a      	sxth	r2, r3
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	801a      	strh	r2, [r3, #0]

  return ret;
 80103ae:	68fb      	ldr	r3, [r7, #12]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 80103c2:	2301      	movs	r3, #1
 80103c4:	683a      	ldr	r2, [r7, #0]
 80103c6:	210f      	movs	r1, #15
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	f7ff ff29 	bl	8010220 <hts221_read_reg>
 80103ce:	60f8      	str	r0, [r7, #12]

  return ret;
 80103d0:	68fb      	ldr	r3, [r7, #12]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b084      	sub	sp, #16
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
 80103e2:	460b      	mov	r3, r1
 80103e4:	70fb      	strb	r3, [r7, #3]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80103e6:	f107 0208 	add.w	r2, r7, #8
 80103ea:	2301      	movs	r3, #1
 80103ec:	2120      	movs	r1, #32
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f7ff ff16 	bl	8010220 <hts221_read_reg>
 80103f4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d10f      	bne.n	801041c <hts221_power_on_set+0x42>
  {
    reg.pd = val;
 80103fc:	78fb      	ldrb	r3, [r7, #3]
 80103fe:	f003 0301 	and.w	r3, r3, #1
 8010402:	b2da      	uxtb	r2, r3
 8010404:	7a3b      	ldrb	r3, [r7, #8]
 8010406:	f362 13c7 	bfi	r3, r2, #7, #1
 801040a:	723b      	strb	r3, [r7, #8]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 801040c:	f107 0208 	add.w	r2, r7, #8
 8010410:	2301      	movs	r3, #1
 8010412:	2120      	movs	r1, #32
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f7ff ff21 	bl	801025c <hts221_write_reg>
 801041a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 801041c:	68fb      	ldr	r3, [r7, #12]
}
 801041e:	4618      	mov	r0, r3
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}

08010426 <hts221_status_get>:
  * @param  val     Registers STATUS_REG
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_status_get(const stmdev_ctx_t *ctx, hts221_status_reg_t *val)
{
 8010426:	b580      	push	{r7, lr}
 8010428:	b084      	sub	sp, #16
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
 801042e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_STATUS_REG, (uint8_t *) val, 1);
 8010430:	2301      	movs	r3, #1
 8010432:	683a      	ldr	r2, [r7, #0]
 8010434:	2127      	movs	r1, #39	@ 0x27
 8010436:	6878      	ldr	r0, [r7, #4]
 8010438:	f7ff fef2 	bl	8010220 <hts221_read_reg>
 801043c:	60f8      	str	r0, [r7, #12]

  return ret;
 801043e:	68fb      	ldr	r3, [r7, #12]
}
 8010440:	4618      	mov	r0, r3
 8010442:	3710      	adds	r7, #16
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}

08010448 <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 8010452:	f107 020b 	add.w	r2, r7, #11
 8010456:	2301      	movs	r3, #1
 8010458:	2130      	movs	r1, #48	@ 0x30
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7ff fee0 	bl	8010220 <hts221_read_reg>
 8010460:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 8010462:	7afb      	ldrb	r3, [r7, #11]
 8010464:	ee07 3a90 	vmov	s15, r3
 8010468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801046c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 801047a:	68fb      	ldr	r3, [r7, #12]
}
 801047c:	4618      	mov	r0, r3
 801047e:	3710      	adds	r7, #16
 8010480:	46bd      	mov	sp, r7
 8010482:	bd80      	pop	{r7, pc}

08010484 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 801048e:	f107 020b 	add.w	r2, r7, #11
 8010492:	2301      	movs	r3, #1
 8010494:	2131      	movs	r1, #49	@ 0x31
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f7ff fec2 	bl	8010220 <hts221_read_reg>
 801049c:	60f8      	str	r0, [r7, #12]
  *val = coeff / 2.0f;
 801049e:	7afb      	ldrb	r3, [r7, #11]
 80104a0:	ee07 3a90 	vmov	s15, r3
 80104a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80104a8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80104ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80104b6:	68fb      	ldr	r3, [r7, #12]
}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3710      	adds	r7, #16
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b086      	sub	sp, #24
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 80104ca:	f107 020f 	add.w	r2, r7, #15
 80104ce:	2301      	movs	r3, #1
 80104d0:	2132      	movs	r1, #50	@ 0x32
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f7ff fea4 	bl	8010220 <hts221_read_reg>
 80104d8:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80104da:	697b      	ldr	r3, [r7, #20]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d11b      	bne.n	8010518 <hts221_temp_deg_point_0_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80104e0:	f107 0210 	add.w	r2, r7, #16
 80104e4:	2301      	movs	r3, #1
 80104e6:	2135      	movs	r1, #53	@ 0x35
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f7ff fe99 	bl	8010220 <hts221_read_reg>
 80104ee:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t0_msb;
 80104f0:	7c3b      	ldrb	r3, [r7, #16]
 80104f2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80104f6:	b2db      	uxtb	r3, r3
 80104f8:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80104fa:	7cfb      	ldrb	r3, [r7, #19]
 80104fc:	021b      	lsls	r3, r3, #8
 80104fe:	7bfa      	ldrb	r2, [r7, #15]
 8010500:	4413      	add	r3, r2
 8010502:	ee07 3a90 	vmov	s15, r3
 8010506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801050a:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 801050e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 8010518:	697b      	ldr	r3, [r7, #20]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3718      	adds	r7, #24
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}

08010522 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010522:	b580      	push	{r7, lr}
 8010524:	b086      	sub	sp, #24
 8010526:	af00      	add	r7, sp, #0
 8010528:	6078      	str	r0, [r7, #4]
 801052a:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h;
  uint8_t coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 801052c:	f107 020f 	add.w	r2, r7, #15
 8010530:	2301      	movs	r3, #1
 8010532:	2133      	movs	r1, #51	@ 0x33
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7ff fe73 	bl	8010220 <hts221_read_reg>
 801053a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d11b      	bne.n	801057a <hts221_temp_deg_point_1_get+0x58>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8010542:	f107 0210 	add.w	r2, r7, #16
 8010546:	2301      	movs	r3, #1
 8010548:	2135      	movs	r1, #53	@ 0x35
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f7ff fe68 	bl	8010220 <hts221_read_reg>
 8010550:	6178      	str	r0, [r7, #20]
    coeff_h = reg.t1_msb;
 8010552:	7c3b      	ldrb	r3, [r7, #16]
 8010554:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010558:	b2db      	uxtb	r3, r3
 801055a:	74fb      	strb	r3, [r7, #19]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 801055c:	7cfb      	ldrb	r3, [r7, #19]
 801055e:	021b      	lsls	r3, r3, #8
 8010560:	7bfa      	ldrb	r2, [r7, #15]
 8010562:	4413      	add	r3, r2
 8010564:	ee07 3a90 	vmov	s15, r3
 8010568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801056c:	eef2 6a00 	vmov.f32	s13, #32	@ 0x41000000  8.0
 8010570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	edc3 7a00 	vstr	s15, [r3]
  }

  return ret;
 801057a:	697b      	ldr	r3, [r7, #20]
}
 801057c:	4618      	mov	r0, r3
 801057e:	3718      	adds	r7, #24
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}

08010584 <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010584:	b580      	push	{r7, lr}
 8010586:	b084      	sub	sp, #16
 8010588:	af00      	add	r7, sp, #0
 801058a:	6078      	str	r0, [r7, #4]
 801058c:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 801058e:	f107 0208 	add.w	r2, r7, #8
 8010592:	2302      	movs	r3, #2
 8010594:	2136      	movs	r1, #54	@ 0x36
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f7ff fe42 	bl	8010220 <hts221_read_reg>
 801059c:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 801059e:	7a7b      	ldrb	r3, [r7, #9]
 80105a0:	021b      	lsls	r3, r3, #8
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	7a3a      	ldrb	r2, [r7, #8]
 80105a6:	4413      	add	r3, r2
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80105ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80105b0:	ee07 3a90 	vmov	s15, r3
 80105b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 80105be:	68fb      	ldr	r3, [r7, #12]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3710      	adds	r7, #16
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b084      	sub	sp, #16
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 80105d2:	f107 0208 	add.w	r2, r7, #8
 80105d6:	2302      	movs	r3, #2
 80105d8:	213a      	movs	r1, #58	@ 0x3a
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	f7ff fe20 	bl	8010220 <hts221_read_reg>
 80105e0:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 80105e2:	7a7b      	ldrb	r3, [r7, #9]
 80105e4:	021b      	lsls	r3, r3, #8
 80105e6:	b29b      	uxth	r3, r3
 80105e8:	7a3a      	ldrb	r2, [r7, #8]
 80105ea:	4413      	add	r3, r2
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 80105f0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80105f4:	ee07 3a90 	vmov	s15, r3
 80105f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8010602:	68fb      	ldr	r3, [r7, #12]
}
 8010604:	4618      	mov	r0, r3
 8010606:	3710      	adds	r7, #16
 8010608:	46bd      	mov	sp, r7
 801060a:	bd80      	pop	{r7, pc}

0801060c <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(const stmdev_ctx_t *ctx, float_t *val)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b084      	sub	sp, #16
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8010616:	f107 0208 	add.w	r2, r7, #8
 801061a:	2302      	movs	r3, #2
 801061c:	213c      	movs	r1, #60	@ 0x3c
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f7ff fdfe 	bl	8010220 <hts221_read_reg>
 8010624:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8010626:	7a7b      	ldrb	r3, [r7, #9]
 8010628:	021b      	lsls	r3, r3, #8
 801062a:	b29b      	uxth	r3, r3
 801062c:	7a3a      	ldrb	r2, [r7, #8]
 801062e:	4413      	add	r3, r2
 8010630:	b29b      	uxth	r3, r3
 8010632:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8010634:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010638:	ee07 3a90 	vmov	s15, r3
 801063c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 8010646:	68fb      	ldr	r3, [r7, #12]
}
 8010648:	4618      	mov	r0, r3
 801064a:	3710      	adds	r7, #16
 801064c:	46bd      	mov	sp, r7
 801064e:	bd80      	pop	{r7, pc}

08010650 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(const stmdev_ctx_t *ctx, float_t *val)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 801065a:	f107 0208 	add.w	r2, r7, #8
 801065e:	2302      	movs	r3, #2
 8010660:	213e      	movs	r1, #62	@ 0x3e
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	f7ff fddc 	bl	8010220 <hts221_read_reg>
 8010668:	60f8      	str	r0, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 801066a:	7a7b      	ldrb	r3, [r7, #9]
 801066c:	021b      	lsls	r3, r3, #8
 801066e:	b29b      	uxth	r3, r3
 8010670:	7a3a      	ldrb	r2, [r7, #8]
 8010672:	4413      	add	r3, r2
 8010674:	b29b      	uxth	r3, r3
 8010676:	817b      	strh	r3, [r7, #10]
  *val = coeff * 1.0f;
 8010678:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801067c:	ee07 3a90 	vmov	s15, r3
 8010680:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010684:	683b      	ldr	r3, [r7, #0]
 8010686:	edc3 7a00 	vstr	s15, [r3]

  return ret;
 801068a:	68fb      	ldr	r3, [r7, #12]
}
 801068c:	4618      	mov	r0, r3
 801068e:	3710      	adds	r7, #16
 8010690:	46bd      	mov	sp, r7
 8010692:	bd80      	pop	{r7, pc}

08010694 <lps22hh_read_reg>:
  *
  */
int32_t __weak lps22hh_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8010694:	b590      	push	{r4, r7, lr}
 8010696:	b087      	sub	sp, #28
 8010698:	af00      	add	r7, sp, #0
 801069a:	60f8      	str	r0, [r7, #12]
 801069c:	607a      	str	r2, [r7, #4]
 801069e:	461a      	mov	r2, r3
 80106a0:	460b      	mov	r3, r1
 80106a2:	72fb      	strb	r3, [r7, #11]
 80106a4:	4613      	mov	r3, r2
 80106a6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d102      	bne.n	80106b4 <lps22hh_read_reg+0x20>
  {
    return -1;
 80106ae:	f04f 33ff 	mov.w	r3, #4294967295
 80106b2:	e009      	b.n	80106c8 <lps22hh_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	685c      	ldr	r4, [r3, #4]
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	68d8      	ldr	r0, [r3, #12]
 80106bc:	893b      	ldrh	r3, [r7, #8]
 80106be:	7af9      	ldrb	r1, [r7, #11]
 80106c0:	687a      	ldr	r2, [r7, #4]
 80106c2:	47a0      	blx	r4
 80106c4:	6178      	str	r0, [r7, #20]

  return ret;
 80106c6:	697b      	ldr	r3, [r7, #20]
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	371c      	adds	r7, #28
 80106cc:	46bd      	mov	sp, r7
 80106ce:	bd90      	pop	{r4, r7, pc}

080106d0 <lps22hh_write_reg>:
  *
  */
int32_t __weak lps22hh_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80106d0:	b590      	push	{r4, r7, lr}
 80106d2:	b087      	sub	sp, #28
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	607a      	str	r2, [r7, #4]
 80106da:	461a      	mov	r2, r3
 80106dc:	460b      	mov	r3, r1
 80106de:	72fb      	strb	r3, [r7, #11]
 80106e0:	4613      	mov	r3, r2
 80106e2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d102      	bne.n	80106f0 <lps22hh_write_reg+0x20>
  {
    return -1;
 80106ea:	f04f 33ff 	mov.w	r3, #4294967295
 80106ee:	e009      	b.n	8010704 <lps22hh_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	681c      	ldr	r4, [r3, #0]
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	68d8      	ldr	r0, [r3, #12]
 80106f8:	893b      	ldrh	r3, [r7, #8]
 80106fa:	7af9      	ldrb	r1, [r7, #11]
 80106fc:	687a      	ldr	r2, [r7, #4]
 80106fe:	47a0      	blx	r4
 8010700:	6178      	str	r0, [r7, #20]

  return ret;
 8010702:	697b      	ldr	r3, [r7, #20]
}
 8010704:	4618      	mov	r0, r3
 8010706:	371c      	adds	r7, #28
 8010708:	46bd      	mov	sp, r7
 801070a:	bd90      	pop	{r4, r7, pc}

0801070c <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	ee07 3a90 	vmov	s15, r3
 801071a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801071e:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8010738 <lps22hh_from_lsb_to_hpa+0x2c>
 8010722:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8010726:	eef0 7a66 	vmov.f32	s15, s13
}
 801072a:	eeb0 0a67 	vmov.f32	s0, s15
 801072e:	370c      	adds	r7, #12
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr
 8010738:	49800000 	.word	0x49800000

0801073c <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	460b      	mov	r3, r1
 8010746:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8010748:	f107 0208 	add.w	r2, r7, #8
 801074c:	2301      	movs	r3, #1
 801074e:	2110      	movs	r1, #16
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	f7ff ff9f 	bl	8010694 <lps22hh_read_reg>
 8010756:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d10f      	bne.n	801077e <lps22hh_block_data_update_set+0x42>
  {
    reg.bdu = val;
 801075e:	78fb      	ldrb	r3, [r7, #3]
 8010760:	f003 0301 	and.w	r3, r3, #1
 8010764:	b2da      	uxtb	r2, r3
 8010766:	7a3b      	ldrb	r3, [r7, #8]
 8010768:	f362 0341 	bfi	r3, r2, #1, #1
 801076c:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 801076e:	f107 0208 	add.w	r2, r7, #8
 8010772:	2301      	movs	r3, #1
 8010774:	2110      	movs	r1, #16
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f7ff ffaa 	bl	80106d0 <lps22hh_write_reg>
 801077c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 801077e:	68fb      	ldr	r3, [r7, #12]
}
 8010780:	4618      	mov	r0, r3
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}

08010788 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(const stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b086      	sub	sp, #24
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	460b      	mov	r3, r1
 8010792:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8010794:	f107 0210 	add.w	r2, r7, #16
 8010798:	2301      	movs	r3, #1
 801079a:	2110      	movs	r1, #16
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f7ff ff79 	bl	8010694 <lps22hh_read_reg>
 80107a2:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d107      	bne.n	80107ba <lps22hh_data_rate_set+0x32>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80107aa:	f107 020c 	add.w	r2, r7, #12
 80107ae:	2301      	movs	r3, #1
 80107b0:	2111      	movs	r1, #17
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f7ff ff6e 	bl	8010694 <lps22hh_read_reg>
 80107b8:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d10f      	bne.n	80107e0 <lps22hh_data_rate_set+0x58>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 80107c0:	78fb      	ldrb	r3, [r7, #3]
 80107c2:	f003 0307 	and.w	r3, r3, #7
 80107c6:	b2da      	uxtb	r2, r3
 80107c8:	7c3b      	ldrb	r3, [r7, #16]
 80107ca:	f362 1306 	bfi	r3, r2, #4, #3
 80107ce:	743b      	strb	r3, [r7, #16]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80107d0:	f107 0210 	add.w	r2, r7, #16
 80107d4:	2301      	movs	r3, #1
 80107d6:	2110      	movs	r1, #16
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f7ff ff79 	bl	80106d0 <lps22hh_write_reg>
 80107de:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d119      	bne.n	801081a <lps22hh_data_rate_set+0x92>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 80107e6:	78fb      	ldrb	r3, [r7, #3]
 80107e8:	091b      	lsrs	r3, r3, #4
 80107ea:	f003 0301 	and.w	r3, r3, #1
 80107ee:	b2da      	uxtb	r2, r3
 80107f0:	7b3b      	ldrb	r3, [r7, #12]
 80107f2:	f362 0341 	bfi	r3, r2, #1, #1
 80107f6:	733b      	strb	r3, [r7, #12]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80107f8:	78fb      	ldrb	r3, [r7, #3]
 80107fa:	08db      	lsrs	r3, r3, #3
 80107fc:	f003 0301 	and.w	r3, r3, #1
 8010800:	b2da      	uxtb	r2, r3
 8010802:	7b3b      	ldrb	r3, [r7, #12]
 8010804:	f362 0300 	bfi	r3, r2, #0, #1
 8010808:	733b      	strb	r3, [r7, #12]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 801080a:	f107 020c 	add.w	r2, r7, #12
 801080e:	2301      	movs	r3, #1
 8010810:	2111      	movs	r1, #17
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f7ff ff5c 	bl	80106d0 <lps22hh_write_reg>
 8010818:	6178      	str	r0, [r7, #20]
  }

  return ret;
 801081a:	697b      	ldr	r3, [r7, #20]
}
 801081c:	4618      	mov	r0, r3
 801081e:	3718      	adds	r7, #24
 8010820:	46bd      	mov	sp, r7
 8010822:	bd80      	pop	{r7, pc}

08010824 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(const stmdev_ctx_t *ctx, uint32_t *buff)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 801082e:	f107 0208 	add.w	r2, r7, #8
 8010832:	2303      	movs	r3, #3
 8010834:	2128      	movs	r1, #40	@ 0x28
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f7ff ff2c 	bl	8010694 <lps22hh_read_reg>
 801083c:	60f8      	str	r0, [r7, #12]
  *buff = reg[2];
 801083e:	7abb      	ldrb	r3, [r7, #10]
 8010840:	461a      	mov	r2, r3
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[1];
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	021b      	lsls	r3, r3, #8
 801084c:	7a7a      	ldrb	r2, [r7, #9]
 801084e:	441a      	add	r2, r3
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256U) + reg[0];
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	021b      	lsls	r3, r3, #8
 801085a:	7a3a      	ldrb	r2, [r7, #8]
 801085c:	441a      	add	r2, r3
 801085e:	683b      	ldr	r3, [r7, #0]
 8010860:	601a      	str	r2, [r3, #0]
  *buff *= 256U;
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	021a      	lsls	r2, r3, #8
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	601a      	str	r2, [r3, #0]

  return ret;
 801086c:	68fb      	ldr	r3, [r7, #12]
}
 801086e:	4618      	mov	r0, r3
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8010876:	b580      	push	{r7, lr}
 8010878:	b084      	sub	sp, #16
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8010880:	2301      	movs	r3, #1
 8010882:	683a      	ldr	r2, [r7, #0]
 8010884:	210f      	movs	r1, #15
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f7ff ff04 	bl	8010694 <lps22hh_read_reg>
 801088c:	60f8      	str	r0, [r7, #12]

  return ret;
 801088e:	68fb      	ldr	r3, [r7, #12]
}
 8010890:	4618      	mov	r0, r3
 8010892:	3710      	adds	r7, #16
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <lps22hh_reset_set>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b084      	sub	sp, #16
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	460b      	mov	r3, r1
 80108a2:	70fb      	strb	r3, [r7, #3]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80108a4:	f107 0208 	add.w	r2, r7, #8
 80108a8:	2301      	movs	r3, #1
 80108aa:	2111      	movs	r1, #17
 80108ac:	6878      	ldr	r0, [r7, #4]
 80108ae:	f7ff fef1 	bl	8010694 <lps22hh_read_reg>
 80108b2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d10f      	bne.n	80108da <lps22hh_reset_set+0x42>
  {
    reg.swreset = val;
 80108ba:	78fb      	ldrb	r3, [r7, #3]
 80108bc:	f003 0301 	and.w	r3, r3, #1
 80108c0:	b2da      	uxtb	r2, r3
 80108c2:	7a3b      	ldrb	r3, [r7, #8]
 80108c4:	f362 0382 	bfi	r3, r2, #2, #1
 80108c8:	723b      	strb	r3, [r7, #8]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80108ca:	f107 0208 	add.w	r2, r7, #8
 80108ce:	2301      	movs	r3, #1
 80108d0:	2111      	movs	r1, #17
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f7ff fefc 	bl	80106d0 <lps22hh_write_reg>
 80108d8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80108da:	68fb      	ldr	r3, [r7, #12]
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3710      	adds	r7, #16
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <lps22hh_reset_get>:
  * @param  val      change the values of swreset in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b084      	sub	sp, #16
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 80108ee:	f107 0208 	add.w	r2, r7, #8
 80108f2:	2301      	movs	r3, #1
 80108f4:	2111      	movs	r1, #17
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f7ff fecc 	bl	8010694 <lps22hh_read_reg>
 80108fc:	60f8      	str	r0, [r7, #12]
  *val = reg.swreset;
 80108fe:	7a3b      	ldrb	r3, [r7, #8]
 8010900:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8010904:	b2db      	uxtb	r3, r3
 8010906:	461a      	mov	r2, r3
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	701a      	strb	r2, [r3, #0]

  return ret;
 801090c:	68fb      	ldr	r3, [r7, #12]
}
 801090e:	4618      	mov	r0, r3
 8010910:	3710      	adds	r7, #16
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
	...

08010918 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801091c:	4904      	ldr	r1, [pc, #16]	@ (8010930 <MX_FATFS_Init+0x18>)
 801091e:	4805      	ldr	r0, [pc, #20]	@ (8010934 <MX_FATFS_Init+0x1c>)
 8010920:	f002 fd72 	bl	8013408 <FATFS_LinkDriver>
 8010924:	4603      	mov	r3, r0
 8010926:	461a      	mov	r2, r3
 8010928:	4b03      	ldr	r3, [pc, #12]	@ (8010938 <MX_FATFS_Init+0x20>)
 801092a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801092c:	bf00      	nop
 801092e:	bd80      	pop	{r7, pc}
 8010930:	200064c8 	.word	0x200064c8
 8010934:	0801a2f4 	.word	0x0801a2f4
 8010938:	200064c4 	.word	0x200064c4

0801093c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801093c:	b480      	push	{r7}
 801093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010940:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010942:	4618      	mov	r0, r3
 8010944:	46bd      	mov	sp, r7
 8010946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094a:	4770      	bx	lr

0801094c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010952:	2300      	movs	r3, #0
 8010954:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010956:	f000 f89e 	bl	8010a96 <BSP_SD_IsDetected>
 801095a:	4603      	mov	r3, r0
 801095c:	2b01      	cmp	r3, #1
 801095e:	d001      	beq.n	8010964 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010960:	2302      	movs	r3, #2
 8010962:	e005      	b.n	8010970 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010964:	4804      	ldr	r0, [pc, #16]	@ (8010978 <BSP_SD_Init+0x2c>)
 8010966:	f7fb ffad 	bl	800c8c4 <HAL_SD_Init>
 801096a:	4603      	mov	r3, r0
 801096c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 801096e:	79fb      	ldrb	r3, [r7, #7]
}
 8010970:	4618      	mov	r0, r3
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	20005ee8 	.word	0x20005ee8

0801097c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b088      	sub	sp, #32
 8010980:	af02      	add	r7, sp, #8
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
 8010988:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801098a:	2300      	movs	r3, #0
 801098c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	9300      	str	r3, [sp, #0]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	68ba      	ldr	r2, [r7, #8]
 8010996:	68f9      	ldr	r1, [r7, #12]
 8010998:	4806      	ldr	r0, [pc, #24]	@ (80109b4 <BSP_SD_ReadBlocks+0x38>)
 801099a:	f7fc f84b 	bl	800ca34 <HAL_SD_ReadBlocks>
 801099e:	4603      	mov	r3, r0
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d001      	beq.n	80109a8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80109a4:	2301      	movs	r3, #1
 80109a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80109a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3718      	adds	r7, #24
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	20005ee8 	.word	0x20005ee8

080109b8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b088      	sub	sp, #32
 80109bc:	af02      	add	r7, sp, #8
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
 80109c4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80109c6:	2300      	movs	r3, #0
 80109c8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	9300      	str	r3, [sp, #0]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	68ba      	ldr	r2, [r7, #8]
 80109d2:	68f9      	ldr	r1, [r7, #12]
 80109d4:	4806      	ldr	r0, [pc, #24]	@ (80109f0 <BSP_SD_WriteBlocks+0x38>)
 80109d6:	f7fc fa0b 	bl	800cdf0 <HAL_SD_WriteBlocks>
 80109da:	4603      	mov	r3, r0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d001      	beq.n	80109e4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80109e0:	2301      	movs	r3, #1
 80109e2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80109e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3718      	adds	r7, #24
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
 80109ee:	bf00      	nop
 80109f0:	20005ee8 	.word	0x20005ee8

080109f4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80109f8:	4805      	ldr	r0, [pc, #20]	@ (8010a10 <BSP_SD_GetCardState+0x1c>)
 80109fa:	f7fc fecf 	bl	800d79c <HAL_SD_GetCardState>
 80109fe:	4603      	mov	r3, r0
 8010a00:	2b04      	cmp	r3, #4
 8010a02:	bf14      	ite	ne
 8010a04:	2301      	movne	r3, #1
 8010a06:	2300      	moveq	r3, #0
 8010a08:	b2db      	uxtb	r3, r3
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	20005ee8 	.word	0x20005ee8

08010a14 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b082      	sub	sp, #8
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010a1c:	6879      	ldr	r1, [r7, #4]
 8010a1e:	4803      	ldr	r0, [pc, #12]	@ (8010a2c <BSP_SD_GetCardInfo+0x18>)
 8010a20:	f7fc fe90 	bl	800d744 <HAL_SD_GetCardInfo>
}
 8010a24:	bf00      	nop
 8010a26:	3708      	adds	r7, #8
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}
 8010a2c:	20005ee8 	.word	0x20005ee8

08010a30 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b082      	sub	sp, #8
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010a38:	f000 f818 	bl	8010a6c <BSP_SD_AbortCallback>
}
 8010a3c:	bf00      	nop
 8010a3e:	3708      	adds	r7, #8
 8010a40:	46bd      	mov	sp, r7
 8010a42:	bd80      	pop	{r7, pc}

08010a44 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010a4c:	f000 f815 	bl	8010a7a <BSP_SD_WriteCpltCallback>
}
 8010a50:	bf00      	nop
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}

08010a58 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010a60:	f000 f812 	bl	8010a88 <BSP_SD_ReadCpltCallback>
}
 8010a64:	bf00      	nop
 8010a66:	3708      	adds	r7, #8
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	af00      	add	r7, sp, #0

}
 8010a70:	bf00      	nop
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr

08010a7a <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8010a7a:	b480      	push	{r7}
 8010a7c:	af00      	add	r7, sp, #0

}
 8010a7e:	bf00      	nop
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr

08010a88 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	af00      	add	r7, sp, #0

}
 8010a8c:	bf00      	nop
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a94:	4770      	bx	lr

08010a96 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010a96:	b580      	push	{r7, lr}
 8010a98:	b082      	sub	sp, #8
 8010a9a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010a9c:	2301      	movs	r3, #1
 8010a9e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010aa0:	f000 f80c 	bl	8010abc <BSP_PlatformIsDetected>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d101      	bne.n	8010aae <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010aaa:	2300      	movs	r3, #0
 8010aac:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010aae:	79fb      	ldrb	r3, [r7, #7]
 8010ab0:	b2db      	uxtb	r3, r3
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3708      	adds	r7, #8
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
	...

08010abc <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b082      	sub	sp, #8
 8010ac0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010ac6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8010aca:	4806      	ldr	r0, [pc, #24]	@ (8010ae4 <BSP_PlatformIsDetected+0x28>)
 8010acc:	f7f8 ff22 	bl	8009914 <HAL_GPIO_ReadPin>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d001      	beq.n	8010ada <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010ada:	79fb      	ldrb	r3, [r7, #7]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3708      	adds	r7, #8
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	40020800 	.word	0x40020800

08010ae8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b082      	sub	sp, #8
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	4603      	mov	r3, r0
 8010af0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010af2:	4b0b      	ldr	r3, [pc, #44]	@ (8010b20 <SD_CheckStatus+0x38>)
 8010af4:	2201      	movs	r2, #1
 8010af6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010af8:	f7ff ff7c 	bl	80109f4 <BSP_SD_GetCardState>
 8010afc:	4603      	mov	r3, r0
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d107      	bne.n	8010b12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010b02:	4b07      	ldr	r3, [pc, #28]	@ (8010b20 <SD_CheckStatus+0x38>)
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	f023 0301 	bic.w	r3, r3, #1
 8010b0c:	b2da      	uxtb	r2, r3
 8010b0e:	4b04      	ldr	r3, [pc, #16]	@ (8010b20 <SD_CheckStatus+0x38>)
 8010b10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010b12:	4b03      	ldr	r3, [pc, #12]	@ (8010b20 <SD_CheckStatus+0x38>)
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	b2db      	uxtb	r3, r3
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	3708      	adds	r7, #8
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	20004f25 	.word	0x20004f25

08010b24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8010b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8010b5c <SD_initialize+0x38>)
 8010b30:	2201      	movs	r2, #1
 8010b32:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010b34:	f7ff ff0a 	bl	801094c <BSP_SD_Init>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d107      	bne.n	8010b4e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8010b3e:	79fb      	ldrb	r3, [r7, #7]
 8010b40:	4618      	mov	r0, r3
 8010b42:	f7ff ffd1 	bl	8010ae8 <SD_CheckStatus>
 8010b46:	4603      	mov	r3, r0
 8010b48:	461a      	mov	r2, r3
 8010b4a:	4b04      	ldr	r3, [pc, #16]	@ (8010b5c <SD_initialize+0x38>)
 8010b4c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010b4e:	4b03      	ldr	r3, [pc, #12]	@ (8010b5c <SD_initialize+0x38>)
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	b2db      	uxtb	r3, r3
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3708      	adds	r7, #8
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}
 8010b5c:	20004f25 	.word	0x20004f25

08010b60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	4603      	mov	r3, r0
 8010b68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010b6a:	79fb      	ldrb	r3, [r7, #7]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7ff ffbb 	bl	8010ae8 <SD_CheckStatus>
 8010b72:	4603      	mov	r3, r0
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b086      	sub	sp, #24
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	60b9      	str	r1, [r7, #8]
 8010b84:	607a      	str	r2, [r7, #4]
 8010b86:	603b      	str	r3, [r7, #0]
 8010b88:	4603      	mov	r3, r0
 8010b8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010b8c:	2301      	movs	r3, #1
 8010b8e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8010b90:	f04f 33ff 	mov.w	r3, #4294967295
 8010b94:	683a      	ldr	r2, [r7, #0]
 8010b96:	6879      	ldr	r1, [r7, #4]
 8010b98:	68b8      	ldr	r0, [r7, #8]
 8010b9a:	f7ff feef 	bl	801097c <BSP_SD_ReadBlocks>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d107      	bne.n	8010bb4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8010ba4:	bf00      	nop
 8010ba6:	f7ff ff25 	bl	80109f4 <BSP_SD_GetCardState>
 8010baa:	4603      	mov	r3, r0
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d1fa      	bne.n	8010ba6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3718      	adds	r7, #24
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd80      	pop	{r7, pc}

08010bbe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010bbe:	b580      	push	{r7, lr}
 8010bc0:	b086      	sub	sp, #24
 8010bc2:	af00      	add	r7, sp, #0
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	607a      	str	r2, [r7, #4]
 8010bc8:	603b      	str	r3, [r7, #0]
 8010bca:	4603      	mov	r3, r0
 8010bcc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8010bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8010bd6:	683a      	ldr	r2, [r7, #0]
 8010bd8:	6879      	ldr	r1, [r7, #4]
 8010bda:	68b8      	ldr	r0, [r7, #8]
 8010bdc:	f7ff feec 	bl	80109b8 <BSP_SD_WriteBlocks>
 8010be0:	4603      	mov	r3, r0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d107      	bne.n	8010bf6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8010be6:	bf00      	nop
 8010be8:	f7ff ff04 	bl	80109f4 <BSP_SD_GetCardState>
 8010bec:	4603      	mov	r3, r0
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d1fa      	bne.n	8010be8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8010bf2:	2300      	movs	r3, #0
 8010bf4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8010bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	3718      	adds	r7, #24
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}

08010c00 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	b08c      	sub	sp, #48	@ 0x30
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	4603      	mov	r3, r0
 8010c08:	603a      	str	r2, [r7, #0]
 8010c0a:	71fb      	strb	r3, [r7, #7]
 8010c0c:	460b      	mov	r3, r1
 8010c0e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010c10:	2301      	movs	r3, #1
 8010c12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010c16:	4b25      	ldr	r3, [pc, #148]	@ (8010cac <SD_ioctl+0xac>)
 8010c18:	781b      	ldrb	r3, [r3, #0]
 8010c1a:	b2db      	uxtb	r3, r3
 8010c1c:	f003 0301 	and.w	r3, r3, #1
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d001      	beq.n	8010c28 <SD_ioctl+0x28>
 8010c24:	2303      	movs	r3, #3
 8010c26:	e03c      	b.n	8010ca2 <SD_ioctl+0xa2>

  switch (cmd)
 8010c28:	79bb      	ldrb	r3, [r7, #6]
 8010c2a:	2b03      	cmp	r3, #3
 8010c2c:	d834      	bhi.n	8010c98 <SD_ioctl+0x98>
 8010c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8010c34 <SD_ioctl+0x34>)
 8010c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c34:	08010c45 	.word	0x08010c45
 8010c38:	08010c4d 	.word	0x08010c4d
 8010c3c:	08010c65 	.word	0x08010c65
 8010c40:	08010c7f 	.word	0x08010c7f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010c44:	2300      	movs	r3, #0
 8010c46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010c4a:	e028      	b.n	8010c9e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c4c:	f107 030c 	add.w	r3, r7, #12
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7ff fedf 	bl	8010a14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010c62:	e01c      	b.n	8010c9e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c64:	f107 030c 	add.w	r3, r7, #12
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f7ff fed3 	bl	8010a14 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c70:	b29a      	uxth	r2, r3
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010c76:	2300      	movs	r3, #0
 8010c78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010c7c:	e00f      	b.n	8010c9e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010c7e:	f107 030c 	add.w	r3, r7, #12
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7ff fec6 	bl	8010a14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c8a:	0a5a      	lsrs	r2, r3, #9
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010c90:	2300      	movs	r3, #0
 8010c92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8010c96:	e002      	b.n	8010c9e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010c98:	2304      	movs	r3, #4
 8010c9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8010c9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3730      	adds	r7, #48	@ 0x30
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	20004f25 	.word	0x20004f25

08010cb0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b084      	sub	sp, #16
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010cba:	79fb      	ldrb	r3, [r7, #7]
 8010cbc:	4a08      	ldr	r2, [pc, #32]	@ (8010ce0 <disk_status+0x30>)
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	4413      	add	r3, r2
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	79fa      	ldrb	r2, [r7, #7]
 8010cc8:	4905      	ldr	r1, [pc, #20]	@ (8010ce0 <disk_status+0x30>)
 8010cca:	440a      	add	r2, r1
 8010ccc:	7a12      	ldrb	r2, [r2, #8]
 8010cce:	4610      	mov	r0, r2
 8010cd0:	4798      	blx	r3
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3710      	adds	r7, #16
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}
 8010ce0:	200064f4 	.word	0x200064f4

08010ce4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b084      	sub	sp, #16
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	4603      	mov	r3, r0
 8010cec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010cf2:	79fb      	ldrb	r3, [r7, #7]
 8010cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8010d2c <disk_initialize+0x48>)
 8010cf6:	5cd3      	ldrb	r3, [r2, r3]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d111      	bne.n	8010d20 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010cfc:	79fb      	ldrb	r3, [r7, #7]
 8010cfe:	4a0b      	ldr	r2, [pc, #44]	@ (8010d2c <disk_initialize+0x48>)
 8010d00:	2101      	movs	r1, #1
 8010d02:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010d04:	79fb      	ldrb	r3, [r7, #7]
 8010d06:	4a09      	ldr	r2, [pc, #36]	@ (8010d2c <disk_initialize+0x48>)
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	4413      	add	r3, r2
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	79fa      	ldrb	r2, [r7, #7]
 8010d12:	4906      	ldr	r1, [pc, #24]	@ (8010d2c <disk_initialize+0x48>)
 8010d14:	440a      	add	r2, r1
 8010d16:	7a12      	ldrb	r2, [r2, #8]
 8010d18:	4610      	mov	r0, r2
 8010d1a:	4798      	blx	r3
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3710      	adds	r7, #16
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	200064f4 	.word	0x200064f4

08010d30 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010d30:	b590      	push	{r4, r7, lr}
 8010d32:	b087      	sub	sp, #28
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	60b9      	str	r1, [r7, #8]
 8010d38:	607a      	str	r2, [r7, #4]
 8010d3a:	603b      	str	r3, [r7, #0]
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d40:	7bfb      	ldrb	r3, [r7, #15]
 8010d42:	4a0a      	ldr	r2, [pc, #40]	@ (8010d6c <disk_read+0x3c>)
 8010d44:	009b      	lsls	r3, r3, #2
 8010d46:	4413      	add	r3, r2
 8010d48:	685b      	ldr	r3, [r3, #4]
 8010d4a:	689c      	ldr	r4, [r3, #8]
 8010d4c:	7bfb      	ldrb	r3, [r7, #15]
 8010d4e:	4a07      	ldr	r2, [pc, #28]	@ (8010d6c <disk_read+0x3c>)
 8010d50:	4413      	add	r3, r2
 8010d52:	7a18      	ldrb	r0, [r3, #8]
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	68b9      	ldr	r1, [r7, #8]
 8010d5a:	47a0      	blx	r4
 8010d5c:	4603      	mov	r3, r0
 8010d5e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	371c      	adds	r7, #28
 8010d66:	46bd      	mov	sp, r7
 8010d68:	bd90      	pop	{r4, r7, pc}
 8010d6a:	bf00      	nop
 8010d6c:	200064f4 	.word	0x200064f4

08010d70 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010d70:	b590      	push	{r4, r7, lr}
 8010d72:	b087      	sub	sp, #28
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60b9      	str	r1, [r7, #8]
 8010d78:	607a      	str	r2, [r7, #4]
 8010d7a:	603b      	str	r3, [r7, #0]
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010d80:	7bfb      	ldrb	r3, [r7, #15]
 8010d82:	4a0a      	ldr	r2, [pc, #40]	@ (8010dac <disk_write+0x3c>)
 8010d84:	009b      	lsls	r3, r3, #2
 8010d86:	4413      	add	r3, r2
 8010d88:	685b      	ldr	r3, [r3, #4]
 8010d8a:	68dc      	ldr	r4, [r3, #12]
 8010d8c:	7bfb      	ldrb	r3, [r7, #15]
 8010d8e:	4a07      	ldr	r2, [pc, #28]	@ (8010dac <disk_write+0x3c>)
 8010d90:	4413      	add	r3, r2
 8010d92:	7a18      	ldrb	r0, [r3, #8]
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	68b9      	ldr	r1, [r7, #8]
 8010d9a:	47a0      	blx	r4
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	75fb      	strb	r3, [r7, #23]
  return res;
 8010da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	371c      	adds	r7, #28
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd90      	pop	{r4, r7, pc}
 8010daa:	bf00      	nop
 8010dac:	200064f4 	.word	0x200064f4

08010db0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	4603      	mov	r3, r0
 8010db8:	603a      	str	r2, [r7, #0]
 8010dba:	71fb      	strb	r3, [r7, #7]
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010dc0:	79fb      	ldrb	r3, [r7, #7]
 8010dc2:	4a09      	ldr	r2, [pc, #36]	@ (8010de8 <disk_ioctl+0x38>)
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	4413      	add	r3, r2
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	691b      	ldr	r3, [r3, #16]
 8010dcc:	79fa      	ldrb	r2, [r7, #7]
 8010dce:	4906      	ldr	r1, [pc, #24]	@ (8010de8 <disk_ioctl+0x38>)
 8010dd0:	440a      	add	r2, r1
 8010dd2:	7a10      	ldrb	r0, [r2, #8]
 8010dd4:	79b9      	ldrb	r1, [r7, #6]
 8010dd6:	683a      	ldr	r2, [r7, #0]
 8010dd8:	4798      	blx	r3
 8010dda:	4603      	mov	r3, r0
 8010ddc:	73fb      	strb	r3, [r7, #15]
  return res;
 8010dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8010de0:	4618      	mov	r0, r3
 8010de2:	3710      	adds	r7, #16
 8010de4:	46bd      	mov	sp, r7
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	200064f4 	.word	0x200064f4

08010dec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010dec:	b480      	push	{r7}
 8010dee:	b085      	sub	sp, #20
 8010df0:	af00      	add	r7, sp, #0
 8010df2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	3301      	adds	r3, #1
 8010df8:	781b      	ldrb	r3, [r3, #0]
 8010dfa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010dfc:	89fb      	ldrh	r3, [r7, #14]
 8010dfe:	021b      	lsls	r3, r3, #8
 8010e00:	b21a      	sxth	r2, r3
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	781b      	ldrb	r3, [r3, #0]
 8010e06:	b21b      	sxth	r3, r3
 8010e08:	4313      	orrs	r3, r2
 8010e0a:	b21b      	sxth	r3, r3
 8010e0c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010e0e:	89fb      	ldrh	r3, [r7, #14]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b085      	sub	sp, #20
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	3303      	adds	r3, #3
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	021b      	lsls	r3, r3, #8
 8010e30:	687a      	ldr	r2, [r7, #4]
 8010e32:	3202      	adds	r2, #2
 8010e34:	7812      	ldrb	r2, [r2, #0]
 8010e36:	4313      	orrs	r3, r2
 8010e38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	021b      	lsls	r3, r3, #8
 8010e3e:	687a      	ldr	r2, [r7, #4]
 8010e40:	3201      	adds	r2, #1
 8010e42:	7812      	ldrb	r2, [r2, #0]
 8010e44:	4313      	orrs	r3, r2
 8010e46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	021b      	lsls	r3, r3, #8
 8010e4c:	687a      	ldr	r2, [r7, #4]
 8010e4e:	7812      	ldrb	r2, [r2, #0]
 8010e50:	4313      	orrs	r3, r2
 8010e52:	60fb      	str	r3, [r7, #12]
	return rv;
 8010e54:	68fb      	ldr	r3, [r7, #12]
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3714      	adds	r7, #20
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e60:	4770      	bx	lr

08010e62 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010e62:	b480      	push	{r7}
 8010e64:	b083      	sub	sp, #12
 8010e66:	af00      	add	r7, sp, #0
 8010e68:	6078      	str	r0, [r7, #4]
 8010e6a:	460b      	mov	r3, r1
 8010e6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	1c5a      	adds	r2, r3, #1
 8010e72:	607a      	str	r2, [r7, #4]
 8010e74:	887a      	ldrh	r2, [r7, #2]
 8010e76:	b2d2      	uxtb	r2, r2
 8010e78:	701a      	strb	r2, [r3, #0]
 8010e7a:	887b      	ldrh	r3, [r7, #2]
 8010e7c:	0a1b      	lsrs	r3, r3, #8
 8010e7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	1c5a      	adds	r2, r3, #1
 8010e84:	607a      	str	r2, [r7, #4]
 8010e86:	887a      	ldrh	r2, [r7, #2]
 8010e88:	b2d2      	uxtb	r2, r2
 8010e8a:	701a      	strb	r2, [r3, #0]
}
 8010e8c:	bf00      	nop
 8010e8e:	370c      	adds	r7, #12
 8010e90:	46bd      	mov	sp, r7
 8010e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e96:	4770      	bx	lr

08010e98 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010e98:	b480      	push	{r7}
 8010e9a:	b083      	sub	sp, #12
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	6078      	str	r0, [r7, #4]
 8010ea0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	1c5a      	adds	r2, r3, #1
 8010ea6:	607a      	str	r2, [r7, #4]
 8010ea8:	683a      	ldr	r2, [r7, #0]
 8010eaa:	b2d2      	uxtb	r2, r2
 8010eac:	701a      	strb	r2, [r3, #0]
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	0a1b      	lsrs	r3, r3, #8
 8010eb2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	1c5a      	adds	r2, r3, #1
 8010eb8:	607a      	str	r2, [r7, #4]
 8010eba:	683a      	ldr	r2, [r7, #0]
 8010ebc:	b2d2      	uxtb	r2, r2
 8010ebe:	701a      	strb	r2, [r3, #0]
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	0a1b      	lsrs	r3, r3, #8
 8010ec4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	1c5a      	adds	r2, r3, #1
 8010eca:	607a      	str	r2, [r7, #4]
 8010ecc:	683a      	ldr	r2, [r7, #0]
 8010ece:	b2d2      	uxtb	r2, r2
 8010ed0:	701a      	strb	r2, [r3, #0]
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	0a1b      	lsrs	r3, r3, #8
 8010ed6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	1c5a      	adds	r2, r3, #1
 8010edc:	607a      	str	r2, [r7, #4]
 8010ede:	683a      	ldr	r2, [r7, #0]
 8010ee0:	b2d2      	uxtb	r2, r2
 8010ee2:	701a      	strb	r2, [r3, #0]
}
 8010ee4:	bf00      	nop
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr

08010ef0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010ef0:	b480      	push	{r7}
 8010ef2:	b087      	sub	sp, #28
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010f00:	68bb      	ldr	r3, [r7, #8]
 8010f02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d00d      	beq.n	8010f26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010f0a:	693a      	ldr	r2, [r7, #16]
 8010f0c:	1c53      	adds	r3, r2, #1
 8010f0e:	613b      	str	r3, [r7, #16]
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	1c59      	adds	r1, r3, #1
 8010f14:	6179      	str	r1, [r7, #20]
 8010f16:	7812      	ldrb	r2, [r2, #0]
 8010f18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	3b01      	subs	r3, #1
 8010f1e:	607b      	str	r3, [r7, #4]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d1f1      	bne.n	8010f0a <mem_cpy+0x1a>
	}
}
 8010f26:	bf00      	nop
 8010f28:	371c      	adds	r7, #28
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr

08010f32 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010f32:	b480      	push	{r7}
 8010f34:	b087      	sub	sp, #28
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	60f8      	str	r0, [r7, #12]
 8010f3a:	60b9      	str	r1, [r7, #8]
 8010f3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	1c5a      	adds	r2, r3, #1
 8010f46:	617a      	str	r2, [r7, #20]
 8010f48:	68ba      	ldr	r2, [r7, #8]
 8010f4a:	b2d2      	uxtb	r2, r2
 8010f4c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	3b01      	subs	r3, #1
 8010f52:	607b      	str	r3, [r7, #4]
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d1f3      	bne.n	8010f42 <mem_set+0x10>
}
 8010f5a:	bf00      	nop
 8010f5c:	bf00      	nop
 8010f5e:	371c      	adds	r7, #28
 8010f60:	46bd      	mov	sp, r7
 8010f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f66:	4770      	bx	lr

08010f68 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010f68:	b480      	push	{r7}
 8010f6a:	b089      	sub	sp, #36	@ 0x24
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	60b9      	str	r1, [r7, #8]
 8010f72:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	61fb      	str	r3, [r7, #28]
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010f80:	69fb      	ldr	r3, [r7, #28]
 8010f82:	1c5a      	adds	r2, r3, #1
 8010f84:	61fa      	str	r2, [r7, #28]
 8010f86:	781b      	ldrb	r3, [r3, #0]
 8010f88:	4619      	mov	r1, r3
 8010f8a:	69bb      	ldr	r3, [r7, #24]
 8010f8c:	1c5a      	adds	r2, r3, #1
 8010f8e:	61ba      	str	r2, [r7, #24]
 8010f90:	781b      	ldrb	r3, [r3, #0]
 8010f92:	1acb      	subs	r3, r1, r3
 8010f94:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	3b01      	subs	r3, #1
 8010f9a:	607b      	str	r3, [r7, #4]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d002      	beq.n	8010fa8 <mem_cmp+0x40>
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d0eb      	beq.n	8010f80 <mem_cmp+0x18>

	return r;
 8010fa8:	697b      	ldr	r3, [r7, #20]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3724      	adds	r7, #36	@ 0x24
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb4:	4770      	bx	lr

08010fb6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010fb6:	b480      	push	{r7}
 8010fb8:	b083      	sub	sp, #12
 8010fba:	af00      	add	r7, sp, #0
 8010fbc:	6078      	str	r0, [r7, #4]
 8010fbe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010fc0:	e002      	b.n	8010fc8 <chk_chr+0x12>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	607b      	str	r3, [r7, #4]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	781b      	ldrb	r3, [r3, #0]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d005      	beq.n	8010fdc <chk_chr+0x26>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	781b      	ldrb	r3, [r3, #0]
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	4293      	cmp	r3, r2
 8010fda:	d1f2      	bne.n	8010fc2 <chk_chr+0xc>
	return *str;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	781b      	ldrb	r3, [r3, #0]
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	370c      	adds	r7, #12
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr

08010fec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b085      	sub	sp, #20
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	60bb      	str	r3, [r7, #8]
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	60fb      	str	r3, [r7, #12]
 8010ffe:	e029      	b.n	8011054 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011000:	4a27      	ldr	r2, [pc, #156]	@ (80110a0 <chk_lock+0xb4>)
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	011b      	lsls	r3, r3, #4
 8011006:	4413      	add	r3, r2
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d01d      	beq.n	801104a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801100e:	4a24      	ldr	r2, [pc, #144]	@ (80110a0 <chk_lock+0xb4>)
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	011b      	lsls	r3, r3, #4
 8011014:	4413      	add	r3, r2
 8011016:	681a      	ldr	r2, [r3, #0]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	429a      	cmp	r2, r3
 801101e:	d116      	bne.n	801104e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011020:	4a1f      	ldr	r2, [pc, #124]	@ (80110a0 <chk_lock+0xb4>)
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	011b      	lsls	r3, r3, #4
 8011026:	4413      	add	r3, r2
 8011028:	3304      	adds	r3, #4
 801102a:	681a      	ldr	r2, [r3, #0]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011030:	429a      	cmp	r2, r3
 8011032:	d10c      	bne.n	801104e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011034:	4a1a      	ldr	r2, [pc, #104]	@ (80110a0 <chk_lock+0xb4>)
 8011036:	68fb      	ldr	r3, [r7, #12]
 8011038:	011b      	lsls	r3, r3, #4
 801103a:	4413      	add	r3, r2
 801103c:	3308      	adds	r3, #8
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011044:	429a      	cmp	r2, r3
 8011046:	d102      	bne.n	801104e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011048:	e007      	b.n	801105a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801104a:	2301      	movs	r3, #1
 801104c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	3301      	adds	r3, #1
 8011052:	60fb      	str	r3, [r7, #12]
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2b01      	cmp	r3, #1
 8011058:	d9d2      	bls.n	8011000 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	2b02      	cmp	r3, #2
 801105e:	d109      	bne.n	8011074 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d102      	bne.n	801106c <chk_lock+0x80>
 8011066:	683b      	ldr	r3, [r7, #0]
 8011068:	2b02      	cmp	r3, #2
 801106a:	d101      	bne.n	8011070 <chk_lock+0x84>
 801106c:	2300      	movs	r3, #0
 801106e:	e010      	b.n	8011092 <chk_lock+0xa6>
 8011070:	2312      	movs	r3, #18
 8011072:	e00e      	b.n	8011092 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d108      	bne.n	801108c <chk_lock+0xa0>
 801107a:	4a09      	ldr	r2, [pc, #36]	@ (80110a0 <chk_lock+0xb4>)
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	011b      	lsls	r3, r3, #4
 8011080:	4413      	add	r3, r2
 8011082:	330c      	adds	r3, #12
 8011084:	881b      	ldrh	r3, [r3, #0]
 8011086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801108a:	d101      	bne.n	8011090 <chk_lock+0xa4>
 801108c:	2310      	movs	r3, #16
 801108e:	e000      	b.n	8011092 <chk_lock+0xa6>
 8011090:	2300      	movs	r3, #0
}
 8011092:	4618      	mov	r0, r3
 8011094:	3714      	adds	r7, #20
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	200064d4 	.word	0x200064d4

080110a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80110a4:	b480      	push	{r7}
 80110a6:	b083      	sub	sp, #12
 80110a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80110aa:	2300      	movs	r3, #0
 80110ac:	607b      	str	r3, [r7, #4]
 80110ae:	e002      	b.n	80110b6 <enq_lock+0x12>
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	3301      	adds	r3, #1
 80110b4:	607b      	str	r3, [r7, #4]
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	2b01      	cmp	r3, #1
 80110ba:	d806      	bhi.n	80110ca <enq_lock+0x26>
 80110bc:	4a09      	ldr	r2, [pc, #36]	@ (80110e4 <enq_lock+0x40>)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	011b      	lsls	r3, r3, #4
 80110c2:	4413      	add	r3, r2
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1f2      	bne.n	80110b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2b02      	cmp	r3, #2
 80110ce:	bf14      	ite	ne
 80110d0:	2301      	movne	r3, #1
 80110d2:	2300      	moveq	r3, #0
 80110d4:	b2db      	uxtb	r3, r3
}
 80110d6:	4618      	mov	r0, r3
 80110d8:	370c      	adds	r7, #12
 80110da:	46bd      	mov	sp, r7
 80110dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e0:	4770      	bx	lr
 80110e2:	bf00      	nop
 80110e4:	200064d4 	.word	0x200064d4

080110e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80110e8:	b480      	push	{r7}
 80110ea:	b085      	sub	sp, #20
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	6078      	str	r0, [r7, #4]
 80110f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80110f2:	2300      	movs	r3, #0
 80110f4:	60fb      	str	r3, [r7, #12]
 80110f6:	e01f      	b.n	8011138 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80110f8:	4a41      	ldr	r2, [pc, #260]	@ (8011200 <inc_lock+0x118>)
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	011b      	lsls	r3, r3, #4
 80110fe:	4413      	add	r3, r2
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	429a      	cmp	r2, r3
 8011108:	d113      	bne.n	8011132 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801110a:	4a3d      	ldr	r2, [pc, #244]	@ (8011200 <inc_lock+0x118>)
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	011b      	lsls	r3, r3, #4
 8011110:	4413      	add	r3, r2
 8011112:	3304      	adds	r3, #4
 8011114:	681a      	ldr	r2, [r3, #0]
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801111a:	429a      	cmp	r2, r3
 801111c:	d109      	bne.n	8011132 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801111e:	4a38      	ldr	r2, [pc, #224]	@ (8011200 <inc_lock+0x118>)
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	011b      	lsls	r3, r3, #4
 8011124:	4413      	add	r3, r2
 8011126:	3308      	adds	r3, #8
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801112e:	429a      	cmp	r2, r3
 8011130:	d006      	beq.n	8011140 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	3301      	adds	r3, #1
 8011136:	60fb      	str	r3, [r7, #12]
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2b01      	cmp	r3, #1
 801113c:	d9dc      	bls.n	80110f8 <inc_lock+0x10>
 801113e:	e000      	b.n	8011142 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011140:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	2b02      	cmp	r3, #2
 8011146:	d132      	bne.n	80111ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011148:	2300      	movs	r3, #0
 801114a:	60fb      	str	r3, [r7, #12]
 801114c:	e002      	b.n	8011154 <inc_lock+0x6c>
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	3301      	adds	r3, #1
 8011152:	60fb      	str	r3, [r7, #12]
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2b01      	cmp	r3, #1
 8011158:	d806      	bhi.n	8011168 <inc_lock+0x80>
 801115a:	4a29      	ldr	r2, [pc, #164]	@ (8011200 <inc_lock+0x118>)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	011b      	lsls	r3, r3, #4
 8011160:	4413      	add	r3, r2
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1f2      	bne.n	801114e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2b02      	cmp	r3, #2
 801116c:	d101      	bne.n	8011172 <inc_lock+0x8a>
 801116e:	2300      	movs	r3, #0
 8011170:	e040      	b.n	80111f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681a      	ldr	r2, [r3, #0]
 8011176:	4922      	ldr	r1, [pc, #136]	@ (8011200 <inc_lock+0x118>)
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	011b      	lsls	r3, r3, #4
 801117c:	440b      	add	r3, r1
 801117e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	689a      	ldr	r2, [r3, #8]
 8011184:	491e      	ldr	r1, [pc, #120]	@ (8011200 <inc_lock+0x118>)
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	011b      	lsls	r3, r3, #4
 801118a:	440b      	add	r3, r1
 801118c:	3304      	adds	r3, #4
 801118e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	695a      	ldr	r2, [r3, #20]
 8011194:	491a      	ldr	r1, [pc, #104]	@ (8011200 <inc_lock+0x118>)
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	011b      	lsls	r3, r3, #4
 801119a:	440b      	add	r3, r1
 801119c:	3308      	adds	r3, #8
 801119e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80111a0:	4a17      	ldr	r2, [pc, #92]	@ (8011200 <inc_lock+0x118>)
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	011b      	lsls	r3, r3, #4
 80111a6:	4413      	add	r3, r2
 80111a8:	330c      	adds	r3, #12
 80111aa:	2200      	movs	r2, #0
 80111ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d009      	beq.n	80111c8 <inc_lock+0xe0>
 80111b4:	4a12      	ldr	r2, [pc, #72]	@ (8011200 <inc_lock+0x118>)
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	011b      	lsls	r3, r3, #4
 80111ba:	4413      	add	r3, r2
 80111bc:	330c      	adds	r3, #12
 80111be:	881b      	ldrh	r3, [r3, #0]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d001      	beq.n	80111c8 <inc_lock+0xe0>
 80111c4:	2300      	movs	r3, #0
 80111c6:	e015      	b.n	80111f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80111c8:	683b      	ldr	r3, [r7, #0]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d108      	bne.n	80111e0 <inc_lock+0xf8>
 80111ce:	4a0c      	ldr	r2, [pc, #48]	@ (8011200 <inc_lock+0x118>)
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	011b      	lsls	r3, r3, #4
 80111d4:	4413      	add	r3, r2
 80111d6:	330c      	adds	r3, #12
 80111d8:	881b      	ldrh	r3, [r3, #0]
 80111da:	3301      	adds	r3, #1
 80111dc:	b29a      	uxth	r2, r3
 80111de:	e001      	b.n	80111e4 <inc_lock+0xfc>
 80111e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80111e4:	4906      	ldr	r1, [pc, #24]	@ (8011200 <inc_lock+0x118>)
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	011b      	lsls	r3, r3, #4
 80111ea:	440b      	add	r3, r1
 80111ec:	330c      	adds	r3, #12
 80111ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	3301      	adds	r3, #1
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3714      	adds	r7, #20
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr
 8011200:	200064d4 	.word	0x200064d4

08011204 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011204:	b480      	push	{r7}
 8011206:	b085      	sub	sp, #20
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	3b01      	subs	r3, #1
 8011210:	607b      	str	r3, [r7, #4]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2b01      	cmp	r3, #1
 8011216:	d825      	bhi.n	8011264 <dec_lock+0x60>
		n = Files[i].ctr;
 8011218:	4a17      	ldr	r2, [pc, #92]	@ (8011278 <dec_lock+0x74>)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	011b      	lsls	r3, r3, #4
 801121e:	4413      	add	r3, r2
 8011220:	330c      	adds	r3, #12
 8011222:	881b      	ldrh	r3, [r3, #0]
 8011224:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011226:	89fb      	ldrh	r3, [r7, #14]
 8011228:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801122c:	d101      	bne.n	8011232 <dec_lock+0x2e>
 801122e:	2300      	movs	r3, #0
 8011230:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011232:	89fb      	ldrh	r3, [r7, #14]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d002      	beq.n	801123e <dec_lock+0x3a>
 8011238:	89fb      	ldrh	r3, [r7, #14]
 801123a:	3b01      	subs	r3, #1
 801123c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801123e:	4a0e      	ldr	r2, [pc, #56]	@ (8011278 <dec_lock+0x74>)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	011b      	lsls	r3, r3, #4
 8011244:	4413      	add	r3, r2
 8011246:	330c      	adds	r3, #12
 8011248:	89fa      	ldrh	r2, [r7, #14]
 801124a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801124c:	89fb      	ldrh	r3, [r7, #14]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d105      	bne.n	801125e <dec_lock+0x5a>
 8011252:	4a09      	ldr	r2, [pc, #36]	@ (8011278 <dec_lock+0x74>)
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	011b      	lsls	r3, r3, #4
 8011258:	4413      	add	r3, r2
 801125a:	2200      	movs	r2, #0
 801125c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801125e:	2300      	movs	r3, #0
 8011260:	737b      	strb	r3, [r7, #13]
 8011262:	e001      	b.n	8011268 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011264:	2302      	movs	r3, #2
 8011266:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011268:	7b7b      	ldrb	r3, [r7, #13]
}
 801126a:	4618      	mov	r0, r3
 801126c:	3714      	adds	r7, #20
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr
 8011276:	bf00      	nop
 8011278:	200064d4 	.word	0x200064d4

0801127c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801127c:	b480      	push	{r7}
 801127e:	b085      	sub	sp, #20
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011284:	2300      	movs	r3, #0
 8011286:	60fb      	str	r3, [r7, #12]
 8011288:	e010      	b.n	80112ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801128a:	4a0d      	ldr	r2, [pc, #52]	@ (80112c0 <clear_lock+0x44>)
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	011b      	lsls	r3, r3, #4
 8011290:	4413      	add	r3, r2
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	687a      	ldr	r2, [r7, #4]
 8011296:	429a      	cmp	r2, r3
 8011298:	d105      	bne.n	80112a6 <clear_lock+0x2a>
 801129a:	4a09      	ldr	r2, [pc, #36]	@ (80112c0 <clear_lock+0x44>)
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	011b      	lsls	r3, r3, #4
 80112a0:	4413      	add	r3, r2
 80112a2:	2200      	movs	r2, #0
 80112a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	3301      	adds	r3, #1
 80112aa:	60fb      	str	r3, [r7, #12]
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d9eb      	bls.n	801128a <clear_lock+0xe>
	}
}
 80112b2:	bf00      	nop
 80112b4:	bf00      	nop
 80112b6:	3714      	adds	r7, #20
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr
 80112c0:	200064d4 	.word	0x200064d4

080112c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b086      	sub	sp, #24
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80112cc:	2300      	movs	r3, #0
 80112ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	78db      	ldrb	r3, [r3, #3]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d034      	beq.n	8011342 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	7858      	ldrb	r0, [r3, #1]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80112e8:	2301      	movs	r3, #1
 80112ea:	697a      	ldr	r2, [r7, #20]
 80112ec:	f7ff fd40 	bl	8010d70 <disk_write>
 80112f0:	4603      	mov	r3, r0
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d002      	beq.n	80112fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80112f6:	2301      	movs	r3, #1
 80112f8:	73fb      	strb	r3, [r7, #15]
 80112fa:	e022      	b.n	8011342 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2200      	movs	r2, #0
 8011300:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6a1b      	ldr	r3, [r3, #32]
 8011306:	697a      	ldr	r2, [r7, #20]
 8011308:	1ad2      	subs	r2, r2, r3
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	699b      	ldr	r3, [r3, #24]
 801130e:	429a      	cmp	r2, r3
 8011310:	d217      	bcs.n	8011342 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	789b      	ldrb	r3, [r3, #2]
 8011316:	613b      	str	r3, [r7, #16]
 8011318:	e010      	b.n	801133c <sync_window+0x78>
					wsect += fs->fsize;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	699b      	ldr	r3, [r3, #24]
 801131e:	697a      	ldr	r2, [r7, #20]
 8011320:	4413      	add	r3, r2
 8011322:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	7858      	ldrb	r0, [r3, #1]
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801132e:	2301      	movs	r3, #1
 8011330:	697a      	ldr	r2, [r7, #20]
 8011332:	f7ff fd1d 	bl	8010d70 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	3b01      	subs	r3, #1
 801133a:	613b      	str	r3, [r7, #16]
 801133c:	693b      	ldr	r3, [r7, #16]
 801133e:	2b01      	cmp	r3, #1
 8011340:	d8eb      	bhi.n	801131a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011342:	7bfb      	ldrb	r3, [r7, #15]
}
 8011344:	4618      	mov	r0, r3
 8011346:	3718      	adds	r7, #24
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}

0801134c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b084      	sub	sp, #16
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011356:	2300      	movs	r3, #0
 8011358:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801135e:	683a      	ldr	r2, [r7, #0]
 8011360:	429a      	cmp	r2, r3
 8011362:	d01b      	beq.n	801139c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f7ff ffad 	bl	80112c4 <sync_window>
 801136a:	4603      	mov	r3, r0
 801136c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801136e:	7bfb      	ldrb	r3, [r7, #15]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d113      	bne.n	801139c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	7858      	ldrb	r0, [r3, #1]
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801137e:	2301      	movs	r3, #1
 8011380:	683a      	ldr	r2, [r7, #0]
 8011382:	f7ff fcd5 	bl	8010d30 <disk_read>
 8011386:	4603      	mov	r3, r0
 8011388:	2b00      	cmp	r3, #0
 801138a:	d004      	beq.n	8011396 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801138c:	f04f 33ff 	mov.w	r3, #4294967295
 8011390:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011392:	2301      	movs	r3, #1
 8011394:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	683a      	ldr	r2, [r7, #0]
 801139a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 801139c:	7bfb      	ldrb	r3, [r7, #15]
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3710      	adds	r7, #16
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
	...

080113a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b084      	sub	sp, #16
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80113b0:	6878      	ldr	r0, [r7, #4]
 80113b2:	f7ff ff87 	bl	80112c4 <sync_window>
 80113b6:	4603      	mov	r3, r0
 80113b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80113ba:	7bfb      	ldrb	r3, [r7, #15]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d158      	bne.n	8011472 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	2b03      	cmp	r3, #3
 80113c6:	d148      	bne.n	801145a <sync_fs+0xb2>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	791b      	ldrb	r3, [r3, #4]
 80113cc:	2b01      	cmp	r3, #1
 80113ce:	d144      	bne.n	801145a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	3330      	adds	r3, #48	@ 0x30
 80113d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80113d8:	2100      	movs	r1, #0
 80113da:	4618      	mov	r0, r3
 80113dc:	f7ff fda9 	bl	8010f32 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	3330      	adds	r3, #48	@ 0x30
 80113e4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80113e8:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7ff fd38 	bl	8010e62 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	3330      	adds	r3, #48	@ 0x30
 80113f6:	4921      	ldr	r1, [pc, #132]	@ (801147c <sync_fs+0xd4>)
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7ff fd4d 	bl	8010e98 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	3330      	adds	r3, #48	@ 0x30
 8011402:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011406:	491e      	ldr	r1, [pc, #120]	@ (8011480 <sync_fs+0xd8>)
 8011408:	4618      	mov	r0, r3
 801140a:	f7ff fd45 	bl	8010e98 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	3330      	adds	r3, #48	@ 0x30
 8011412:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	691b      	ldr	r3, [r3, #16]
 801141a:	4619      	mov	r1, r3
 801141c:	4610      	mov	r0, r2
 801141e:	f7ff fd3b 	bl	8010e98 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	3330      	adds	r3, #48	@ 0x30
 8011426:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	68db      	ldr	r3, [r3, #12]
 801142e:	4619      	mov	r1, r3
 8011430:	4610      	mov	r0, r2
 8011432:	f7ff fd31 	bl	8010e98 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	69db      	ldr	r3, [r3, #28]
 801143a:	1c5a      	adds	r2, r3, #1
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	7858      	ldrb	r0, [r3, #1]
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801144e:	2301      	movs	r3, #1
 8011450:	f7ff fc8e 	bl	8010d70 <disk_write>
			fs->fsi_flag = 0;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2200      	movs	r2, #0
 8011458:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	785b      	ldrb	r3, [r3, #1]
 801145e:	2200      	movs	r2, #0
 8011460:	2100      	movs	r1, #0
 8011462:	4618      	mov	r0, r3
 8011464:	f7ff fca4 	bl	8010db0 <disk_ioctl>
 8011468:	4603      	mov	r3, r0
 801146a:	2b00      	cmp	r3, #0
 801146c:	d001      	beq.n	8011472 <sync_fs+0xca>
 801146e:	2301      	movs	r3, #1
 8011470:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011472:	7bfb      	ldrb	r3, [r7, #15]
}
 8011474:	4618      	mov	r0, r3
 8011476:	3710      	adds	r7, #16
 8011478:	46bd      	mov	sp, r7
 801147a:	bd80      	pop	{r7, pc}
 801147c:	41615252 	.word	0x41615252
 8011480:	61417272 	.word	0x61417272

08011484 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	3b02      	subs	r3, #2
 8011492:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	695b      	ldr	r3, [r3, #20]
 8011498:	3b02      	subs	r3, #2
 801149a:	683a      	ldr	r2, [r7, #0]
 801149c:	429a      	cmp	r2, r3
 801149e:	d301      	bcc.n	80114a4 <clust2sect+0x20>
 80114a0:	2300      	movs	r3, #0
 80114a2:	e008      	b.n	80114b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	895b      	ldrh	r3, [r3, #10]
 80114a8:	461a      	mov	r2, r3
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	fb03 f202 	mul.w	r2, r3, r2
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114b4:	4413      	add	r3, r2
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	370c      	adds	r7, #12
 80114ba:	46bd      	mov	sp, r7
 80114bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c0:	4770      	bx	lr

080114c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b086      	sub	sp, #24
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
 80114ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	d904      	bls.n	80114e2 <get_fat+0x20>
 80114d8:	693b      	ldr	r3, [r7, #16]
 80114da:	695b      	ldr	r3, [r3, #20]
 80114dc:	683a      	ldr	r2, [r7, #0]
 80114de:	429a      	cmp	r2, r3
 80114e0:	d302      	bcc.n	80114e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80114e2:	2301      	movs	r3, #1
 80114e4:	617b      	str	r3, [r7, #20]
 80114e6:	e08e      	b.n	8011606 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80114e8:	f04f 33ff 	mov.w	r3, #4294967295
 80114ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	781b      	ldrb	r3, [r3, #0]
 80114f2:	2b03      	cmp	r3, #3
 80114f4:	d061      	beq.n	80115ba <get_fat+0xf8>
 80114f6:	2b03      	cmp	r3, #3
 80114f8:	dc7b      	bgt.n	80115f2 <get_fat+0x130>
 80114fa:	2b01      	cmp	r3, #1
 80114fc:	d002      	beq.n	8011504 <get_fat+0x42>
 80114fe:	2b02      	cmp	r3, #2
 8011500:	d041      	beq.n	8011586 <get_fat+0xc4>
 8011502:	e076      	b.n	80115f2 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	60fb      	str	r3, [r7, #12]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	085b      	lsrs	r3, r3, #1
 801150c:	68fa      	ldr	r2, [r7, #12]
 801150e:	4413      	add	r3, r2
 8011510:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	6a1a      	ldr	r2, [r3, #32]
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	0a5b      	lsrs	r3, r3, #9
 801151a:	4413      	add	r3, r2
 801151c:	4619      	mov	r1, r3
 801151e:	6938      	ldr	r0, [r7, #16]
 8011520:	f7ff ff14 	bl	801134c <move_window>
 8011524:	4603      	mov	r3, r0
 8011526:	2b00      	cmp	r3, #0
 8011528:	d166      	bne.n	80115f8 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	1c5a      	adds	r2, r3, #1
 801152e:	60fa      	str	r2, [r7, #12]
 8011530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011534:	693a      	ldr	r2, [r7, #16]
 8011536:	4413      	add	r3, r2
 8011538:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801153c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	6a1a      	ldr	r2, [r3, #32]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	0a5b      	lsrs	r3, r3, #9
 8011546:	4413      	add	r3, r2
 8011548:	4619      	mov	r1, r3
 801154a:	6938      	ldr	r0, [r7, #16]
 801154c:	f7ff fefe 	bl	801134c <move_window>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d152      	bne.n	80115fc <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801155c:	693a      	ldr	r2, [r7, #16]
 801155e:	4413      	add	r3, r2
 8011560:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011564:	021b      	lsls	r3, r3, #8
 8011566:	68ba      	ldr	r2, [r7, #8]
 8011568:	4313      	orrs	r3, r2
 801156a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	f003 0301 	and.w	r3, r3, #1
 8011572:	2b00      	cmp	r3, #0
 8011574:	d002      	beq.n	801157c <get_fat+0xba>
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	091b      	lsrs	r3, r3, #4
 801157a:	e002      	b.n	8011582 <get_fat+0xc0>
 801157c:	68bb      	ldr	r3, [r7, #8]
 801157e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011582:	617b      	str	r3, [r7, #20]
			break;
 8011584:	e03f      	b.n	8011606 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	6a1a      	ldr	r2, [r3, #32]
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	0a1b      	lsrs	r3, r3, #8
 801158e:	4413      	add	r3, r2
 8011590:	4619      	mov	r1, r3
 8011592:	6938      	ldr	r0, [r7, #16]
 8011594:	f7ff feda 	bl	801134c <move_window>
 8011598:	4603      	mov	r3, r0
 801159a:	2b00      	cmp	r3, #0
 801159c:	d130      	bne.n	8011600 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801159e:	693b      	ldr	r3, [r7, #16]
 80115a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	005b      	lsls	r3, r3, #1
 80115a8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80115ac:	4413      	add	r3, r2
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7ff fc1c 	bl	8010dec <ld_word>
 80115b4:	4603      	mov	r3, r0
 80115b6:	617b      	str	r3, [r7, #20]
			break;
 80115b8:	e025      	b.n	8011606 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80115ba:	693b      	ldr	r3, [r7, #16]
 80115bc:	6a1a      	ldr	r2, [r3, #32]
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	09db      	lsrs	r3, r3, #7
 80115c2:	4413      	add	r3, r2
 80115c4:	4619      	mov	r1, r3
 80115c6:	6938      	ldr	r0, [r7, #16]
 80115c8:	f7ff fec0 	bl	801134c <move_window>
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d118      	bne.n	8011604 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	009b      	lsls	r3, r3, #2
 80115dc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80115e0:	4413      	add	r3, r2
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7ff fc1a 	bl	8010e1c <ld_dword>
 80115e8:	4603      	mov	r3, r0
 80115ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80115ee:	617b      	str	r3, [r7, #20]
			break;
 80115f0:	e009      	b.n	8011606 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80115f2:	2301      	movs	r3, #1
 80115f4:	617b      	str	r3, [r7, #20]
 80115f6:	e006      	b.n	8011606 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115f8:	bf00      	nop
 80115fa:	e004      	b.n	8011606 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115fc:	bf00      	nop
 80115fe:	e002      	b.n	8011606 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011600:	bf00      	nop
 8011602:	e000      	b.n	8011606 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011604:	bf00      	nop
		}
	}

	return val;
 8011606:	697b      	ldr	r3, [r7, #20]
}
 8011608:	4618      	mov	r0, r3
 801160a:	3718      	adds	r7, #24
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011610:	b590      	push	{r4, r7, lr}
 8011612:	b089      	sub	sp, #36	@ 0x24
 8011614:	af00      	add	r7, sp, #0
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801161c:	2302      	movs	r3, #2
 801161e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	2b01      	cmp	r3, #1
 8011624:	f240 80d9 	bls.w	80117da <put_fat+0x1ca>
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	695b      	ldr	r3, [r3, #20]
 801162c:	68ba      	ldr	r2, [r7, #8]
 801162e:	429a      	cmp	r2, r3
 8011630:	f080 80d3 	bcs.w	80117da <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	2b03      	cmp	r3, #3
 801163a:	f000 8096 	beq.w	801176a <put_fat+0x15a>
 801163e:	2b03      	cmp	r3, #3
 8011640:	f300 80cb 	bgt.w	80117da <put_fat+0x1ca>
 8011644:	2b01      	cmp	r3, #1
 8011646:	d002      	beq.n	801164e <put_fat+0x3e>
 8011648:	2b02      	cmp	r3, #2
 801164a:	d06e      	beq.n	801172a <put_fat+0x11a>
 801164c:	e0c5      	b.n	80117da <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	61bb      	str	r3, [r7, #24]
 8011652:	69bb      	ldr	r3, [r7, #24]
 8011654:	085b      	lsrs	r3, r3, #1
 8011656:	69ba      	ldr	r2, [r7, #24]
 8011658:	4413      	add	r3, r2
 801165a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	6a1a      	ldr	r2, [r3, #32]
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	0a5b      	lsrs	r3, r3, #9
 8011664:	4413      	add	r3, r2
 8011666:	4619      	mov	r1, r3
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	f7ff fe6f 	bl	801134c <move_window>
 801166e:	4603      	mov	r3, r0
 8011670:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011672:	7ffb      	ldrb	r3, [r7, #31]
 8011674:	2b00      	cmp	r3, #0
 8011676:	f040 80a9 	bne.w	80117cc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011680:	69bb      	ldr	r3, [r7, #24]
 8011682:	1c59      	adds	r1, r3, #1
 8011684:	61b9      	str	r1, [r7, #24]
 8011686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801168a:	4413      	add	r3, r2
 801168c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801168e:	68bb      	ldr	r3, [r7, #8]
 8011690:	f003 0301 	and.w	r3, r3, #1
 8011694:	2b00      	cmp	r3, #0
 8011696:	d00d      	beq.n	80116b4 <put_fat+0xa4>
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	781b      	ldrb	r3, [r3, #0]
 801169c:	b25b      	sxtb	r3, r3
 801169e:	f003 030f 	and.w	r3, r3, #15
 80116a2:	b25a      	sxtb	r2, r3
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	b2db      	uxtb	r3, r3
 80116a8:	011b      	lsls	r3, r3, #4
 80116aa:	b25b      	sxtb	r3, r3
 80116ac:	4313      	orrs	r3, r2
 80116ae:	b25b      	sxtb	r3, r3
 80116b0:	b2db      	uxtb	r3, r3
 80116b2:	e001      	b.n	80116b8 <put_fat+0xa8>
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	697a      	ldr	r2, [r7, #20]
 80116ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2201      	movs	r2, #1
 80116c0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	6a1a      	ldr	r2, [r3, #32]
 80116c6:	69bb      	ldr	r3, [r7, #24]
 80116c8:	0a5b      	lsrs	r3, r3, #9
 80116ca:	4413      	add	r3, r2
 80116cc:	4619      	mov	r1, r3
 80116ce:	68f8      	ldr	r0, [r7, #12]
 80116d0:	f7ff fe3c 	bl	801134c <move_window>
 80116d4:	4603      	mov	r3, r0
 80116d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80116d8:	7ffb      	ldrb	r3, [r7, #31]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d178      	bne.n	80117d0 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116ea:	4413      	add	r3, r2
 80116ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80116ee:	68bb      	ldr	r3, [r7, #8]
 80116f0:	f003 0301 	and.w	r3, r3, #1
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d003      	beq.n	8011700 <put_fat+0xf0>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	091b      	lsrs	r3, r3, #4
 80116fc:	b2db      	uxtb	r3, r3
 80116fe:	e00e      	b.n	801171e <put_fat+0x10e>
 8011700:	697b      	ldr	r3, [r7, #20]
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	b25b      	sxtb	r3, r3
 8011706:	f023 030f 	bic.w	r3, r3, #15
 801170a:	b25a      	sxtb	r2, r3
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	0a1b      	lsrs	r3, r3, #8
 8011710:	b25b      	sxtb	r3, r3
 8011712:	f003 030f 	and.w	r3, r3, #15
 8011716:	b25b      	sxtb	r3, r3
 8011718:	4313      	orrs	r3, r2
 801171a:	b25b      	sxtb	r3, r3
 801171c:	b2db      	uxtb	r3, r3
 801171e:	697a      	ldr	r2, [r7, #20]
 8011720:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2201      	movs	r2, #1
 8011726:	70da      	strb	r2, [r3, #3]
			break;
 8011728:	e057      	b.n	80117da <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	6a1a      	ldr	r2, [r3, #32]
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	0a1b      	lsrs	r3, r3, #8
 8011732:	4413      	add	r3, r2
 8011734:	4619      	mov	r1, r3
 8011736:	68f8      	ldr	r0, [r7, #12]
 8011738:	f7ff fe08 	bl	801134c <move_window>
 801173c:	4603      	mov	r3, r0
 801173e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011740:	7ffb      	ldrb	r3, [r7, #31]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d146      	bne.n	80117d4 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	005b      	lsls	r3, r3, #1
 8011750:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011754:	4413      	add	r3, r2
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	b292      	uxth	r2, r2
 801175a:	4611      	mov	r1, r2
 801175c:	4618      	mov	r0, r3
 801175e:	f7ff fb80 	bl	8010e62 <st_word>
			fs->wflag = 1;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2201      	movs	r2, #1
 8011766:	70da      	strb	r2, [r3, #3]
			break;
 8011768:	e037      	b.n	80117da <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	6a1a      	ldr	r2, [r3, #32]
 801176e:	68bb      	ldr	r3, [r7, #8]
 8011770:	09db      	lsrs	r3, r3, #7
 8011772:	4413      	add	r3, r2
 8011774:	4619      	mov	r1, r3
 8011776:	68f8      	ldr	r0, [r7, #12]
 8011778:	f7ff fde8 	bl	801134c <move_window>
 801177c:	4603      	mov	r3, r0
 801177e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011780:	7ffb      	ldrb	r3, [r7, #31]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d128      	bne.n	80117d8 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011792:	68bb      	ldr	r3, [r7, #8]
 8011794:	009b      	lsls	r3, r3, #2
 8011796:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 801179a:	4413      	add	r3, r2
 801179c:	4618      	mov	r0, r3
 801179e:	f7ff fb3d 	bl	8010e1c <ld_dword>
 80117a2:	4603      	mov	r3, r0
 80117a4:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80117a8:	4323      	orrs	r3, r4
 80117aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	009b      	lsls	r3, r3, #2
 80117b6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80117ba:	4413      	add	r3, r2
 80117bc:	6879      	ldr	r1, [r7, #4]
 80117be:	4618      	mov	r0, r3
 80117c0:	f7ff fb6a 	bl	8010e98 <st_dword>
			fs->wflag = 1;
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2201      	movs	r2, #1
 80117c8:	70da      	strb	r2, [r3, #3]
			break;
 80117ca:	e006      	b.n	80117da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80117cc:	bf00      	nop
 80117ce:	e004      	b.n	80117da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80117d0:	bf00      	nop
 80117d2:	e002      	b.n	80117da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80117d4:	bf00      	nop
 80117d6:	e000      	b.n	80117da <put_fat+0x1ca>
			if (res != FR_OK) break;
 80117d8:	bf00      	nop
		}
	}
	return res;
 80117da:	7ffb      	ldrb	r3, [r7, #31]
}
 80117dc:	4618      	mov	r0, r3
 80117de:	3724      	adds	r7, #36	@ 0x24
 80117e0:	46bd      	mov	sp, r7
 80117e2:	bd90      	pop	{r4, r7, pc}

080117e4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b088      	sub	sp, #32
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	60f8      	str	r0, [r7, #12]
 80117ec:	60b9      	str	r1, [r7, #8]
 80117ee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80117f0:	2300      	movs	r3, #0
 80117f2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d904      	bls.n	801180a <remove_chain+0x26>
 8011800:	69bb      	ldr	r3, [r7, #24]
 8011802:	695b      	ldr	r3, [r3, #20]
 8011804:	68ba      	ldr	r2, [r7, #8]
 8011806:	429a      	cmp	r2, r3
 8011808:	d301      	bcc.n	801180e <remove_chain+0x2a>
 801180a:	2302      	movs	r3, #2
 801180c:	e04b      	b.n	80118a6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d00c      	beq.n	801182e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011814:	f04f 32ff 	mov.w	r2, #4294967295
 8011818:	6879      	ldr	r1, [r7, #4]
 801181a:	69b8      	ldr	r0, [r7, #24]
 801181c:	f7ff fef8 	bl	8011610 <put_fat>
 8011820:	4603      	mov	r3, r0
 8011822:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011824:	7ffb      	ldrb	r3, [r7, #31]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d001      	beq.n	801182e <remove_chain+0x4a>
 801182a:	7ffb      	ldrb	r3, [r7, #31]
 801182c:	e03b      	b.n	80118a6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801182e:	68b9      	ldr	r1, [r7, #8]
 8011830:	68f8      	ldr	r0, [r7, #12]
 8011832:	f7ff fe46 	bl	80114c2 <get_fat>
 8011836:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d031      	beq.n	80118a2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	2b01      	cmp	r3, #1
 8011842:	d101      	bne.n	8011848 <remove_chain+0x64>
 8011844:	2302      	movs	r3, #2
 8011846:	e02e      	b.n	80118a6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011848:	697b      	ldr	r3, [r7, #20]
 801184a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801184e:	d101      	bne.n	8011854 <remove_chain+0x70>
 8011850:	2301      	movs	r3, #1
 8011852:	e028      	b.n	80118a6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011854:	2200      	movs	r2, #0
 8011856:	68b9      	ldr	r1, [r7, #8]
 8011858:	69b8      	ldr	r0, [r7, #24]
 801185a:	f7ff fed9 	bl	8011610 <put_fat>
 801185e:	4603      	mov	r3, r0
 8011860:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011862:	7ffb      	ldrb	r3, [r7, #31]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d001      	beq.n	801186c <remove_chain+0x88>
 8011868:	7ffb      	ldrb	r3, [r7, #31]
 801186a:	e01c      	b.n	80118a6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801186c:	69bb      	ldr	r3, [r7, #24]
 801186e:	691a      	ldr	r2, [r3, #16]
 8011870:	69bb      	ldr	r3, [r7, #24]
 8011872:	695b      	ldr	r3, [r3, #20]
 8011874:	3b02      	subs	r3, #2
 8011876:	429a      	cmp	r2, r3
 8011878:	d20b      	bcs.n	8011892 <remove_chain+0xae>
			fs->free_clst++;
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	691b      	ldr	r3, [r3, #16]
 801187e:	1c5a      	adds	r2, r3, #1
 8011880:	69bb      	ldr	r3, [r7, #24]
 8011882:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8011884:	69bb      	ldr	r3, [r7, #24]
 8011886:	791b      	ldrb	r3, [r3, #4]
 8011888:	f043 0301 	orr.w	r3, r3, #1
 801188c:	b2da      	uxtb	r2, r3
 801188e:	69bb      	ldr	r3, [r7, #24]
 8011890:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011896:	69bb      	ldr	r3, [r7, #24]
 8011898:	695b      	ldr	r3, [r3, #20]
 801189a:	68ba      	ldr	r2, [r7, #8]
 801189c:	429a      	cmp	r2, r3
 801189e:	d3c6      	bcc.n	801182e <remove_chain+0x4a>
 80118a0:	e000      	b.n	80118a4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80118a2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80118a4:	2300      	movs	r3, #0
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3720      	adds	r7, #32
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}

080118ae <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80118ae:	b580      	push	{r7, lr}
 80118b0:	b088      	sub	sp, #32
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	6078      	str	r0, [r7, #4]
 80118b6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80118be:	683b      	ldr	r3, [r7, #0]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d10d      	bne.n	80118e0 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d004      	beq.n	80118da <create_chain+0x2c>
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	695b      	ldr	r3, [r3, #20]
 80118d4:	69ba      	ldr	r2, [r7, #24]
 80118d6:	429a      	cmp	r2, r3
 80118d8:	d31b      	bcc.n	8011912 <create_chain+0x64>
 80118da:	2301      	movs	r3, #1
 80118dc:	61bb      	str	r3, [r7, #24]
 80118de:	e018      	b.n	8011912 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80118e0:	6839      	ldr	r1, [r7, #0]
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f7ff fded 	bl	80114c2 <get_fat>
 80118e8:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d801      	bhi.n	80118f4 <create_chain+0x46>
 80118f0:	2301      	movs	r3, #1
 80118f2:	e070      	b.n	80119d6 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118fa:	d101      	bne.n	8011900 <create_chain+0x52>
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	e06a      	b.n	80119d6 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	695b      	ldr	r3, [r3, #20]
 8011904:	68fa      	ldr	r2, [r7, #12]
 8011906:	429a      	cmp	r2, r3
 8011908:	d201      	bcs.n	801190e <create_chain+0x60>
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	e063      	b.n	80119d6 <create_chain+0x128>
		scl = clst;
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011912:	69bb      	ldr	r3, [r7, #24]
 8011914:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	3301      	adds	r3, #1
 801191a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801191c:	693b      	ldr	r3, [r7, #16]
 801191e:	695b      	ldr	r3, [r3, #20]
 8011920:	69fa      	ldr	r2, [r7, #28]
 8011922:	429a      	cmp	r2, r3
 8011924:	d307      	bcc.n	8011936 <create_chain+0x88>
				ncl = 2;
 8011926:	2302      	movs	r3, #2
 8011928:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801192a:	69fa      	ldr	r2, [r7, #28]
 801192c:	69bb      	ldr	r3, [r7, #24]
 801192e:	429a      	cmp	r2, r3
 8011930:	d901      	bls.n	8011936 <create_chain+0x88>
 8011932:	2300      	movs	r3, #0
 8011934:	e04f      	b.n	80119d6 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011936:	69f9      	ldr	r1, [r7, #28]
 8011938:	6878      	ldr	r0, [r7, #4]
 801193a:	f7ff fdc2 	bl	80114c2 <get_fat>
 801193e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d00e      	beq.n	8011964 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	2b01      	cmp	r3, #1
 801194a:	d003      	beq.n	8011954 <create_chain+0xa6>
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011952:	d101      	bne.n	8011958 <create_chain+0xaa>
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	e03e      	b.n	80119d6 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011958:	69fa      	ldr	r2, [r7, #28]
 801195a:	69bb      	ldr	r3, [r7, #24]
 801195c:	429a      	cmp	r2, r3
 801195e:	d1da      	bne.n	8011916 <create_chain+0x68>
 8011960:	2300      	movs	r3, #0
 8011962:	e038      	b.n	80119d6 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011964:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011966:	f04f 32ff 	mov.w	r2, #4294967295
 801196a:	69f9      	ldr	r1, [r7, #28]
 801196c:	6938      	ldr	r0, [r7, #16]
 801196e:	f7ff fe4f 	bl	8011610 <put_fat>
 8011972:	4603      	mov	r3, r0
 8011974:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011976:	7dfb      	ldrb	r3, [r7, #23]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d109      	bne.n	8011990 <create_chain+0xe2>
 801197c:	683b      	ldr	r3, [r7, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d006      	beq.n	8011990 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011982:	69fa      	ldr	r2, [r7, #28]
 8011984:	6839      	ldr	r1, [r7, #0]
 8011986:	6938      	ldr	r0, [r7, #16]
 8011988:	f7ff fe42 	bl	8011610 <put_fat>
 801198c:	4603      	mov	r3, r0
 801198e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011990:	7dfb      	ldrb	r3, [r7, #23]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d116      	bne.n	80119c4 <create_chain+0x116>
		fs->last_clst = ncl;
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	69fa      	ldr	r2, [r7, #28]
 801199a:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	691a      	ldr	r2, [r3, #16]
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	695b      	ldr	r3, [r3, #20]
 80119a4:	3b02      	subs	r3, #2
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d804      	bhi.n	80119b4 <create_chain+0x106>
 80119aa:	693b      	ldr	r3, [r7, #16]
 80119ac:	691b      	ldr	r3, [r3, #16]
 80119ae:	1e5a      	subs	r2, r3, #1
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	791b      	ldrb	r3, [r3, #4]
 80119b8:	f043 0301 	orr.w	r3, r3, #1
 80119bc:	b2da      	uxtb	r2, r3
 80119be:	693b      	ldr	r3, [r7, #16]
 80119c0:	711a      	strb	r2, [r3, #4]
 80119c2:	e007      	b.n	80119d4 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80119c4:	7dfb      	ldrb	r3, [r7, #23]
 80119c6:	2b01      	cmp	r3, #1
 80119c8:	d102      	bne.n	80119d0 <create_chain+0x122>
 80119ca:	f04f 33ff 	mov.w	r3, #4294967295
 80119ce:	e000      	b.n	80119d2 <create_chain+0x124>
 80119d0:	2301      	movs	r3, #1
 80119d2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80119d4:	69fb      	ldr	r3, [r7, #28]
}
 80119d6:	4618      	mov	r0, r3
 80119d8:	3720      	adds	r7, #32
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}

080119de <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80119de:	b480      	push	{r7}
 80119e0:	b087      	sub	sp, #28
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	6078      	str	r0, [r7, #4]
 80119e6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119f2:	3304      	adds	r3, #4
 80119f4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	0a5b      	lsrs	r3, r3, #9
 80119fa:	68fa      	ldr	r2, [r7, #12]
 80119fc:	8952      	ldrh	r2, [r2, #10]
 80119fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a02:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a04:	693b      	ldr	r3, [r7, #16]
 8011a06:	1d1a      	adds	r2, r3, #4
 8011a08:	613a      	str	r2, [r7, #16]
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011a0e:	68bb      	ldr	r3, [r7, #8]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d101      	bne.n	8011a18 <clmt_clust+0x3a>
 8011a14:	2300      	movs	r3, #0
 8011a16:	e010      	b.n	8011a3a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011a18:	697a      	ldr	r2, [r7, #20]
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	d307      	bcc.n	8011a30 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011a20:	697a      	ldr	r2, [r7, #20]
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	1ad3      	subs	r3, r2, r3
 8011a26:	617b      	str	r3, [r7, #20]
 8011a28:	693b      	ldr	r3, [r7, #16]
 8011a2a:	3304      	adds	r3, #4
 8011a2c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a2e:	e7e9      	b.n	8011a04 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011a30:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	681a      	ldr	r2, [r3, #0]
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	4413      	add	r3, r2
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	371c      	adds	r7, #28
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a44:	4770      	bx	lr

08011a46 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011a46:	b580      	push	{r7, lr}
 8011a48:	b086      	sub	sp, #24
 8011a4a:	af00      	add	r7, sp, #0
 8011a4c:	6078      	str	r0, [r7, #4]
 8011a4e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011a56:	683b      	ldr	r3, [r7, #0]
 8011a58:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011a5c:	d204      	bcs.n	8011a68 <dir_sdi+0x22>
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	f003 031f 	and.w	r3, r3, #31
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d001      	beq.n	8011a6c <dir_sdi+0x26>
		return FR_INT_ERR;
 8011a68:	2302      	movs	r3, #2
 8011a6a:	e063      	b.n	8011b34 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	683a      	ldr	r2, [r7, #0]
 8011a70:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	689b      	ldr	r3, [r3, #8]
 8011a76:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d106      	bne.n	8011a8c <dir_sdi+0x46>
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	781b      	ldrb	r3, [r3, #0]
 8011a82:	2b02      	cmp	r3, #2
 8011a84:	d902      	bls.n	8011a8c <dir_sdi+0x46>
		clst = fs->dirbase;
 8011a86:	693b      	ldr	r3, [r7, #16]
 8011a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a8a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d10c      	bne.n	8011aac <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	095b      	lsrs	r3, r3, #5
 8011a96:	693a      	ldr	r2, [r7, #16]
 8011a98:	8912      	ldrh	r2, [r2, #8]
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d301      	bcc.n	8011aa2 <dir_sdi+0x5c>
 8011a9e:	2302      	movs	r3, #2
 8011aa0:	e048      	b.n	8011b34 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	61da      	str	r2, [r3, #28]
 8011aaa:	e029      	b.n	8011b00 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	895b      	ldrh	r3, [r3, #10]
 8011ab0:	025b      	lsls	r3, r3, #9
 8011ab2:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011ab4:	e019      	b.n	8011aea <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6979      	ldr	r1, [r7, #20]
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7ff fd01 	bl	80114c2 <get_fat>
 8011ac0:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac8:	d101      	bne.n	8011ace <dir_sdi+0x88>
 8011aca:	2301      	movs	r3, #1
 8011acc:	e032      	b.n	8011b34 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	d904      	bls.n	8011ade <dir_sdi+0x98>
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	695b      	ldr	r3, [r3, #20]
 8011ad8:	697a      	ldr	r2, [r7, #20]
 8011ada:	429a      	cmp	r2, r3
 8011adc:	d301      	bcc.n	8011ae2 <dir_sdi+0x9c>
 8011ade:	2302      	movs	r3, #2
 8011ae0:	e028      	b.n	8011b34 <dir_sdi+0xee>
			ofs -= csz;
 8011ae2:	683a      	ldr	r2, [r7, #0]
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	1ad3      	subs	r3, r2, r3
 8011ae8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011aea:	683a      	ldr	r2, [r7, #0]
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	429a      	cmp	r2, r3
 8011af0:	d2e1      	bcs.n	8011ab6 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011af2:	6979      	ldr	r1, [r7, #20]
 8011af4:	6938      	ldr	r0, [r7, #16]
 8011af6:	f7ff fcc5 	bl	8011484 <clust2sect>
 8011afa:	4602      	mov	r2, r0
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	697a      	ldr	r2, [r7, #20]
 8011b04:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	69db      	ldr	r3, [r3, #28]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d101      	bne.n	8011b12 <dir_sdi+0xcc>
 8011b0e:	2302      	movs	r3, #2
 8011b10:	e010      	b.n	8011b34 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	69da      	ldr	r2, [r3, #28]
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	0a5b      	lsrs	r3, r3, #9
 8011b1a:	441a      	add	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b2c:	441a      	add	r2, r3
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011b32:	2300      	movs	r3, #0
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3718      	adds	r7, #24
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}

08011b3c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b086      	sub	sp, #24
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	695b      	ldr	r3, [r3, #20]
 8011b50:	3320      	adds	r3, #32
 8011b52:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	69db      	ldr	r3, [r3, #28]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d003      	beq.n	8011b64 <dir_next+0x28>
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011b62:	d301      	bcc.n	8011b68 <dir_next+0x2c>
 8011b64:	2304      	movs	r3, #4
 8011b66:	e0aa      	b.n	8011cbe <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	f040 8098 	bne.w	8011ca4 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	69db      	ldr	r3, [r3, #28]
 8011b78:	1c5a      	adds	r2, r3, #1
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	699b      	ldr	r3, [r3, #24]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d10b      	bne.n	8011b9e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011b86:	68bb      	ldr	r3, [r7, #8]
 8011b88:	095b      	lsrs	r3, r3, #5
 8011b8a:	68fa      	ldr	r2, [r7, #12]
 8011b8c:	8912      	ldrh	r2, [r2, #8]
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	f0c0 8088 	bcc.w	8011ca4 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2200      	movs	r2, #0
 8011b98:	61da      	str	r2, [r3, #28]
 8011b9a:	2304      	movs	r3, #4
 8011b9c:	e08f      	b.n	8011cbe <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	0a5b      	lsrs	r3, r3, #9
 8011ba2:	68fa      	ldr	r2, [r7, #12]
 8011ba4:	8952      	ldrh	r2, [r2, #10]
 8011ba6:	3a01      	subs	r2, #1
 8011ba8:	4013      	ands	r3, r2
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d17a      	bne.n	8011ca4 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	699b      	ldr	r3, [r3, #24]
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	4610      	mov	r0, r2
 8011bb8:	f7ff fc83 	bl	80114c2 <get_fat>
 8011bbc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	2b01      	cmp	r3, #1
 8011bc2:	d801      	bhi.n	8011bc8 <dir_next+0x8c>
 8011bc4:	2302      	movs	r3, #2
 8011bc6:	e07a      	b.n	8011cbe <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bce:	d101      	bne.n	8011bd4 <dir_next+0x98>
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	e074      	b.n	8011cbe <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	695b      	ldr	r3, [r3, #20]
 8011bd8:	697a      	ldr	r2, [r7, #20]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d358      	bcc.n	8011c90 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d104      	bne.n	8011bee <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	2200      	movs	r2, #0
 8011be8:	61da      	str	r2, [r3, #28]
 8011bea:	2304      	movs	r3, #4
 8011bec:	e067      	b.n	8011cbe <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011bee:	687a      	ldr	r2, [r7, #4]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	699b      	ldr	r3, [r3, #24]
 8011bf4:	4619      	mov	r1, r3
 8011bf6:	4610      	mov	r0, r2
 8011bf8:	f7ff fe59 	bl	80118ae <create_chain>
 8011bfc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d101      	bne.n	8011c08 <dir_next+0xcc>
 8011c04:	2307      	movs	r3, #7
 8011c06:	e05a      	b.n	8011cbe <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	2b01      	cmp	r3, #1
 8011c0c:	d101      	bne.n	8011c12 <dir_next+0xd6>
 8011c0e:	2302      	movs	r3, #2
 8011c10:	e055      	b.n	8011cbe <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c18:	d101      	bne.n	8011c1e <dir_next+0xe2>
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	e04f      	b.n	8011cbe <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011c1e:	68f8      	ldr	r0, [r7, #12]
 8011c20:	f7ff fb50 	bl	80112c4 <sync_window>
 8011c24:	4603      	mov	r3, r0
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d001      	beq.n	8011c2e <dir_next+0xf2>
 8011c2a:	2301      	movs	r3, #1
 8011c2c:	e047      	b.n	8011cbe <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	3330      	adds	r3, #48	@ 0x30
 8011c32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011c36:	2100      	movs	r1, #0
 8011c38:	4618      	mov	r0, r3
 8011c3a:	f7ff f97a 	bl	8010f32 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c3e:	2300      	movs	r3, #0
 8011c40:	613b      	str	r3, [r7, #16]
 8011c42:	6979      	ldr	r1, [r7, #20]
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f7ff fc1d 	bl	8011484 <clust2sect>
 8011c4a:	4602      	mov	r2, r0
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011c50:	e012      	b.n	8011c78 <dir_next+0x13c>
						fs->wflag = 1;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2201      	movs	r2, #1
 8011c56:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011c58:	68f8      	ldr	r0, [r7, #12]
 8011c5a:	f7ff fb33 	bl	80112c4 <sync_window>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d001      	beq.n	8011c68 <dir_next+0x12c>
 8011c64:	2301      	movs	r3, #1
 8011c66:	e02a      	b.n	8011cbe <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	3301      	adds	r3, #1
 8011c6c:	613b      	str	r3, [r7, #16]
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c72:	1c5a      	adds	r2, r3, #1
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	895b      	ldrh	r3, [r3, #10]
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	4293      	cmp	r3, r2
 8011c82:	d3e6      	bcc.n	8011c52 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	1ad2      	subs	r2, r2, r3
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	697a      	ldr	r2, [r7, #20]
 8011c94:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011c96:	6979      	ldr	r1, [r7, #20]
 8011c98:	68f8      	ldr	r0, [r7, #12]
 8011c9a:	f7ff fbf3 	bl	8011484 <clust2sect>
 8011c9e:	4602      	mov	r2, r0
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	68ba      	ldr	r2, [r7, #8]
 8011ca8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011cb6:	441a      	add	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011cbc:	2300      	movs	r3, #0
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3718      	adds	r7, #24
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}

08011cc6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011cc6:	b580      	push	{r7, lr}
 8011cc8:	b086      	sub	sp, #24
 8011cca:	af00      	add	r7, sp, #0
 8011ccc:	6078      	str	r0, [r7, #4]
 8011cce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011cd6:	2100      	movs	r1, #0
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f7ff feb4 	bl	8011a46 <dir_sdi>
 8011cde:	4603      	mov	r3, r0
 8011ce0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011ce2:	7dfb      	ldrb	r3, [r7, #23]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d12b      	bne.n	8011d40 <dir_alloc+0x7a>
		n = 0;
 8011ce8:	2300      	movs	r3, #0
 8011cea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	69db      	ldr	r3, [r3, #28]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	68f8      	ldr	r0, [r7, #12]
 8011cf4:	f7ff fb2a 	bl	801134c <move_window>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011cfc:	7dfb      	ldrb	r3, [r7, #23]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d11d      	bne.n	8011d3e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	6a1b      	ldr	r3, [r3, #32]
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	2be5      	cmp	r3, #229	@ 0xe5
 8011d0a:	d004      	beq.n	8011d16 <dir_alloc+0x50>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6a1b      	ldr	r3, [r3, #32]
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d107      	bne.n	8011d26 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	3301      	adds	r3, #1
 8011d1a:	613b      	str	r3, [r7, #16]
 8011d1c:	693a      	ldr	r2, [r7, #16]
 8011d1e:	683b      	ldr	r3, [r7, #0]
 8011d20:	429a      	cmp	r2, r3
 8011d22:	d102      	bne.n	8011d2a <dir_alloc+0x64>
 8011d24:	e00c      	b.n	8011d40 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011d26:	2300      	movs	r3, #0
 8011d28:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011d2a:	2101      	movs	r1, #1
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f7ff ff05 	bl	8011b3c <dir_next>
 8011d32:	4603      	mov	r3, r0
 8011d34:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011d36:	7dfb      	ldrb	r3, [r7, #23]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d0d7      	beq.n	8011cec <dir_alloc+0x26>
 8011d3c:	e000      	b.n	8011d40 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011d3e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011d40:	7dfb      	ldrb	r3, [r7, #23]
 8011d42:	2b04      	cmp	r3, #4
 8011d44:	d101      	bne.n	8011d4a <dir_alloc+0x84>
 8011d46:	2307      	movs	r3, #7
 8011d48:	75fb      	strb	r3, [r7, #23]
	return res;
 8011d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3718      	adds	r7, #24
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bd80      	pop	{r7, pc}

08011d54 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b084      	sub	sp, #16
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	331a      	adds	r3, #26
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7ff f842 	bl	8010dec <ld_word>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	2b03      	cmp	r3, #3
 8011d72:	d109      	bne.n	8011d88 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	3314      	adds	r3, #20
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7ff f837 	bl	8010dec <ld_word>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	041b      	lsls	r3, r3, #16
 8011d82:	68fa      	ldr	r2, [r7, #12]
 8011d84:	4313      	orrs	r3, r2
 8011d86:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011d88:	68fb      	ldr	r3, [r7, #12]
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b084      	sub	sp, #16
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	60f8      	str	r0, [r7, #12]
 8011d9a:	60b9      	str	r1, [r7, #8]
 8011d9c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	331a      	adds	r3, #26
 8011da2:	687a      	ldr	r2, [r7, #4]
 8011da4:	b292      	uxth	r2, r2
 8011da6:	4611      	mov	r1, r2
 8011da8:	4618      	mov	r0, r3
 8011daa:	f7ff f85a 	bl	8010e62 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	2b03      	cmp	r3, #3
 8011db4:	d109      	bne.n	8011dca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011db6:	68bb      	ldr	r3, [r7, #8]
 8011db8:	f103 0214 	add.w	r2, r3, #20
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	0c1b      	lsrs	r3, r3, #16
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	4610      	mov	r0, r2
 8011dc6:	f7ff f84c 	bl	8010e62 <st_word>
	}
}
 8011dca:	bf00      	nop
 8011dcc:	3710      	adds	r7, #16
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}

08011dd2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011dd2:	b580      	push	{r7, lr}
 8011dd4:	b086      	sub	sp, #24
 8011dd6:	af00      	add	r7, sp, #0
 8011dd8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011de0:	2100      	movs	r1, #0
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f7ff fe2f 	bl	8011a46 <dir_sdi>
 8011de8:	4603      	mov	r3, r0
 8011dea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011dec:	7dfb      	ldrb	r3, [r7, #23]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d001      	beq.n	8011df6 <dir_find+0x24>
 8011df2:	7dfb      	ldrb	r3, [r7, #23]
 8011df4:	e03e      	b.n	8011e74 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	69db      	ldr	r3, [r3, #28]
 8011dfa:	4619      	mov	r1, r3
 8011dfc:	6938      	ldr	r0, [r7, #16]
 8011dfe:	f7ff faa5 	bl	801134c <move_window>
 8011e02:	4603      	mov	r3, r0
 8011e04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011e06:	7dfb      	ldrb	r3, [r7, #23]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d12f      	bne.n	8011e6c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6a1b      	ldr	r3, [r3, #32]
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011e14:	7bfb      	ldrb	r3, [r7, #15]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d102      	bne.n	8011e20 <dir_find+0x4e>
 8011e1a:	2304      	movs	r3, #4
 8011e1c:	75fb      	strb	r3, [r7, #23]
 8011e1e:	e028      	b.n	8011e72 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	6a1b      	ldr	r3, [r3, #32]
 8011e24:	330b      	adds	r3, #11
 8011e26:	781b      	ldrb	r3, [r3, #0]
 8011e28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011e2c:	b2da      	uxtb	r2, r3
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6a1b      	ldr	r3, [r3, #32]
 8011e36:	330b      	adds	r3, #11
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	f003 0308 	and.w	r3, r3, #8
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d10a      	bne.n	8011e58 <dir_find+0x86>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6a18      	ldr	r0, [r3, #32]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	3324      	adds	r3, #36	@ 0x24
 8011e4a:	220b      	movs	r2, #11
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	f7ff f88b 	bl	8010f68 <mem_cmp>
 8011e52:	4603      	mov	r3, r0
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d00b      	beq.n	8011e70 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011e58:	2100      	movs	r1, #0
 8011e5a:	6878      	ldr	r0, [r7, #4]
 8011e5c:	f7ff fe6e 	bl	8011b3c <dir_next>
 8011e60:	4603      	mov	r3, r0
 8011e62:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011e64:	7dfb      	ldrb	r3, [r7, #23]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d0c5      	beq.n	8011df6 <dir_find+0x24>
 8011e6a:	e002      	b.n	8011e72 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011e6c:	bf00      	nop
 8011e6e:	e000      	b.n	8011e72 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011e70:	bf00      	nop

	return res;
 8011e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3718      	adds	r7, #24
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b084      	sub	sp, #16
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011e8a:	2101      	movs	r1, #1
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	f7ff ff1a 	bl	8011cc6 <dir_alloc>
 8011e92:	4603      	mov	r3, r0
 8011e94:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011e96:	7bfb      	ldrb	r3, [r7, #15]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d11c      	bne.n	8011ed6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	69db      	ldr	r3, [r3, #28]
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	68b8      	ldr	r0, [r7, #8]
 8011ea4:	f7ff fa52 	bl	801134c <move_window>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011eac:	7bfb      	ldrb	r3, [r7, #15]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d111      	bne.n	8011ed6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6a1b      	ldr	r3, [r3, #32]
 8011eb6:	2220      	movs	r2, #32
 8011eb8:	2100      	movs	r1, #0
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7ff f839 	bl	8010f32 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6a18      	ldr	r0, [r3, #32]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	3324      	adds	r3, #36	@ 0x24
 8011ec8:	220b      	movs	r2, #11
 8011eca:	4619      	mov	r1, r3
 8011ecc:	f7ff f810 	bl	8010ef0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3710      	adds	r7, #16
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b088      	sub	sp, #32
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011eea:	683b      	ldr	r3, [r7, #0]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	60fb      	str	r3, [r7, #12]
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	3324      	adds	r3, #36	@ 0x24
 8011ef4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011ef6:	220b      	movs	r2, #11
 8011ef8:	2120      	movs	r1, #32
 8011efa:	68b8      	ldr	r0, [r7, #8]
 8011efc:	f7ff f819 	bl	8010f32 <mem_set>
	si = i = 0; ni = 8;
 8011f00:	2300      	movs	r3, #0
 8011f02:	613b      	str	r3, [r7, #16]
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	61fb      	str	r3, [r7, #28]
 8011f08:	2308      	movs	r3, #8
 8011f0a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011f0c:	69fb      	ldr	r3, [r7, #28]
 8011f0e:	1c5a      	adds	r2, r3, #1
 8011f10:	61fa      	str	r2, [r7, #28]
 8011f12:	68fa      	ldr	r2, [r7, #12]
 8011f14:	4413      	add	r3, r2
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011f1a:	7efb      	ldrb	r3, [r7, #27]
 8011f1c:	2b20      	cmp	r3, #32
 8011f1e:	d94e      	bls.n	8011fbe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011f20:	7efb      	ldrb	r3, [r7, #27]
 8011f22:	2b2f      	cmp	r3, #47	@ 0x2f
 8011f24:	d006      	beq.n	8011f34 <create_name+0x54>
 8011f26:	7efb      	ldrb	r3, [r7, #27]
 8011f28:	2b5c      	cmp	r3, #92	@ 0x5c
 8011f2a:	d110      	bne.n	8011f4e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011f2c:	e002      	b.n	8011f34 <create_name+0x54>
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	3301      	adds	r3, #1
 8011f32:	61fb      	str	r3, [r7, #28]
 8011f34:	68fa      	ldr	r2, [r7, #12]
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	4413      	add	r3, r2
 8011f3a:	781b      	ldrb	r3, [r3, #0]
 8011f3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8011f3e:	d0f6      	beq.n	8011f2e <create_name+0x4e>
 8011f40:	68fa      	ldr	r2, [r7, #12]
 8011f42:	69fb      	ldr	r3, [r7, #28]
 8011f44:	4413      	add	r3, r2
 8011f46:	781b      	ldrb	r3, [r3, #0]
 8011f48:	2b5c      	cmp	r3, #92	@ 0x5c
 8011f4a:	d0f0      	beq.n	8011f2e <create_name+0x4e>
			break;
 8011f4c:	e038      	b.n	8011fc0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011f4e:	7efb      	ldrb	r3, [r7, #27]
 8011f50:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f52:	d003      	beq.n	8011f5c <create_name+0x7c>
 8011f54:	693a      	ldr	r2, [r7, #16]
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d30c      	bcc.n	8011f76 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	2b0b      	cmp	r3, #11
 8011f60:	d002      	beq.n	8011f68 <create_name+0x88>
 8011f62:	7efb      	ldrb	r3, [r7, #27]
 8011f64:	2b2e      	cmp	r3, #46	@ 0x2e
 8011f66:	d001      	beq.n	8011f6c <create_name+0x8c>
 8011f68:	2306      	movs	r3, #6
 8011f6a:	e044      	b.n	8011ff6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011f6c:	2308      	movs	r3, #8
 8011f6e:	613b      	str	r3, [r7, #16]
 8011f70:	230b      	movs	r3, #11
 8011f72:	617b      	str	r3, [r7, #20]
			continue;
 8011f74:	e022      	b.n	8011fbc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011f76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	da04      	bge.n	8011f88 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011f7e:	7efb      	ldrb	r3, [r7, #27]
 8011f80:	3b80      	subs	r3, #128	@ 0x80
 8011f82:	4a1f      	ldr	r2, [pc, #124]	@ (8012000 <create_name+0x120>)
 8011f84:	5cd3      	ldrb	r3, [r2, r3]
 8011f86:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011f88:	7efb      	ldrb	r3, [r7, #27]
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	481d      	ldr	r0, [pc, #116]	@ (8012004 <create_name+0x124>)
 8011f8e:	f7ff f812 	bl	8010fb6 <chk_chr>
 8011f92:	4603      	mov	r3, r0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d001      	beq.n	8011f9c <create_name+0xbc>
 8011f98:	2306      	movs	r3, #6
 8011f9a:	e02c      	b.n	8011ff6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011f9c:	7efb      	ldrb	r3, [r7, #27]
 8011f9e:	2b60      	cmp	r3, #96	@ 0x60
 8011fa0:	d905      	bls.n	8011fae <create_name+0xce>
 8011fa2:	7efb      	ldrb	r3, [r7, #27]
 8011fa4:	2b7a      	cmp	r3, #122	@ 0x7a
 8011fa6:	d802      	bhi.n	8011fae <create_name+0xce>
 8011fa8:	7efb      	ldrb	r3, [r7, #27]
 8011faa:	3b20      	subs	r3, #32
 8011fac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	1c5a      	adds	r2, r3, #1
 8011fb2:	613a      	str	r2, [r7, #16]
 8011fb4:	68ba      	ldr	r2, [r7, #8]
 8011fb6:	4413      	add	r3, r2
 8011fb8:	7efa      	ldrb	r2, [r7, #27]
 8011fba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011fbc:	e7a6      	b.n	8011f0c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011fbe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011fc0:	68fa      	ldr	r2, [r7, #12]
 8011fc2:	69fb      	ldr	r3, [r7, #28]
 8011fc4:	441a      	add	r2, r3
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d101      	bne.n	8011fd4 <create_name+0xf4>
 8011fd0:	2306      	movs	r3, #6
 8011fd2:	e010      	b.n	8011ff6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	2be5      	cmp	r3, #229	@ 0xe5
 8011fda:	d102      	bne.n	8011fe2 <create_name+0x102>
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	2205      	movs	r2, #5
 8011fe0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011fe2:	7efb      	ldrb	r3, [r7, #27]
 8011fe4:	2b20      	cmp	r3, #32
 8011fe6:	d801      	bhi.n	8011fec <create_name+0x10c>
 8011fe8:	2204      	movs	r2, #4
 8011fea:	e000      	b.n	8011fee <create_name+0x10e>
 8011fec:	2200      	movs	r2, #0
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	330b      	adds	r3, #11
 8011ff2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011ff4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3720      	adds	r7, #32
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	0801a308 	.word	0x0801a308
 8012004:	0801686c 	.word	0x0801686c

08012008 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b086      	sub	sp, #24
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801201c:	e002      	b.n	8012024 <follow_path+0x1c>
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	3301      	adds	r3, #1
 8012022:	603b      	str	r3, [r7, #0]
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	781b      	ldrb	r3, [r3, #0]
 8012028:	2b2f      	cmp	r3, #47	@ 0x2f
 801202a:	d0f8      	beq.n	801201e <follow_path+0x16>
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	781b      	ldrb	r3, [r3, #0]
 8012030:	2b5c      	cmp	r3, #92	@ 0x5c
 8012032:	d0f4      	beq.n	801201e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	2200      	movs	r2, #0
 8012038:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	781b      	ldrb	r3, [r3, #0]
 801203e:	2b1f      	cmp	r3, #31
 8012040:	d80a      	bhi.n	8012058 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	2280      	movs	r2, #128	@ 0x80
 8012046:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 801204a:	2100      	movs	r1, #0
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f7ff fcfa 	bl	8011a46 <dir_sdi>
 8012052:	4603      	mov	r3, r0
 8012054:	75fb      	strb	r3, [r7, #23]
 8012056:	e043      	b.n	80120e0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012058:	463b      	mov	r3, r7
 801205a:	4619      	mov	r1, r3
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f7ff ff3f 	bl	8011ee0 <create_name>
 8012062:	4603      	mov	r3, r0
 8012064:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012066:	7dfb      	ldrb	r3, [r7, #23]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d134      	bne.n	80120d6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f7ff feb0 	bl	8011dd2 <dir_find>
 8012072:	4603      	mov	r3, r0
 8012074:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801207c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801207e:	7dfb      	ldrb	r3, [r7, #23]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d00a      	beq.n	801209a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012084:	7dfb      	ldrb	r3, [r7, #23]
 8012086:	2b04      	cmp	r3, #4
 8012088:	d127      	bne.n	80120da <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801208a:	7afb      	ldrb	r3, [r7, #11]
 801208c:	f003 0304 	and.w	r3, r3, #4
 8012090:	2b00      	cmp	r3, #0
 8012092:	d122      	bne.n	80120da <follow_path+0xd2>
 8012094:	2305      	movs	r3, #5
 8012096:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012098:	e01f      	b.n	80120da <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801209a:	7afb      	ldrb	r3, [r7, #11]
 801209c:	f003 0304 	and.w	r3, r3, #4
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d11c      	bne.n	80120de <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	799b      	ldrb	r3, [r3, #6]
 80120a8:	f003 0310 	and.w	r3, r3, #16
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d102      	bne.n	80120b6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80120b0:	2305      	movs	r3, #5
 80120b2:	75fb      	strb	r3, [r7, #23]
 80120b4:	e014      	b.n	80120e0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	695b      	ldr	r3, [r3, #20]
 80120c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120c4:	4413      	add	r3, r2
 80120c6:	4619      	mov	r1, r3
 80120c8:	68f8      	ldr	r0, [r7, #12]
 80120ca:	f7ff fe43 	bl	8011d54 <ld_clust>
 80120ce:	4602      	mov	r2, r0
 80120d0:	693b      	ldr	r3, [r7, #16]
 80120d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80120d4:	e7c0      	b.n	8012058 <follow_path+0x50>
			if (res != FR_OK) break;
 80120d6:	bf00      	nop
 80120d8:	e002      	b.n	80120e0 <follow_path+0xd8>
				break;
 80120da:	bf00      	nop
 80120dc:	e000      	b.n	80120e0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80120de:	bf00      	nop
			}
		}
	}

	return res;
 80120e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80120e2:	4618      	mov	r0, r3
 80120e4:	3718      	adds	r7, #24
 80120e6:	46bd      	mov	sp, r7
 80120e8:	bd80      	pop	{r7, pc}

080120ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80120ea:	b480      	push	{r7}
 80120ec:	b087      	sub	sp, #28
 80120ee:	af00      	add	r7, sp, #0
 80120f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80120f2:	f04f 33ff 	mov.w	r3, #4294967295
 80120f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d031      	beq.n	8012164 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	617b      	str	r3, [r7, #20]
 8012106:	e002      	b.n	801210e <get_ldnumber+0x24>
 8012108:	697b      	ldr	r3, [r7, #20]
 801210a:	3301      	adds	r3, #1
 801210c:	617b      	str	r3, [r7, #20]
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	2b20      	cmp	r3, #32
 8012114:	d903      	bls.n	801211e <get_ldnumber+0x34>
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	781b      	ldrb	r3, [r3, #0]
 801211a:	2b3a      	cmp	r3, #58	@ 0x3a
 801211c:	d1f4      	bne.n	8012108 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801211e:	697b      	ldr	r3, [r7, #20]
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	2b3a      	cmp	r3, #58	@ 0x3a
 8012124:	d11c      	bne.n	8012160 <get_ldnumber+0x76>
			tp = *path;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	1c5a      	adds	r2, r3, #1
 8012130:	60fa      	str	r2, [r7, #12]
 8012132:	781b      	ldrb	r3, [r3, #0]
 8012134:	3b30      	subs	r3, #48	@ 0x30
 8012136:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	2b09      	cmp	r3, #9
 801213c:	d80e      	bhi.n	801215c <get_ldnumber+0x72>
 801213e:	68fa      	ldr	r2, [r7, #12]
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	429a      	cmp	r2, r3
 8012144:	d10a      	bne.n	801215c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d107      	bne.n	801215c <get_ldnumber+0x72>
					vol = (int)i;
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	3301      	adds	r3, #1
 8012154:	617b      	str	r3, [r7, #20]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	697a      	ldr	r2, [r7, #20]
 801215a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	e002      	b.n	8012166 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012160:	2300      	movs	r3, #0
 8012162:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012164:	693b      	ldr	r3, [r7, #16]
}
 8012166:	4618      	mov	r0, r3
 8012168:	371c      	adds	r7, #28
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr
	...

08012174 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b082      	sub	sp, #8
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
 801217c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	2200      	movs	r2, #0
 8012182:	70da      	strb	r2, [r3, #3]
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f04f 32ff 	mov.w	r2, #4294967295
 801218a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801218c:	6839      	ldr	r1, [r7, #0]
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f7ff f8dc 	bl	801134c <move_window>
 8012194:	4603      	mov	r3, r0
 8012196:	2b00      	cmp	r3, #0
 8012198:	d001      	beq.n	801219e <check_fs+0x2a>
 801219a:	2304      	movs	r3, #4
 801219c:	e038      	b.n	8012210 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	3330      	adds	r3, #48	@ 0x30
 80121a2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80121a6:	4618      	mov	r0, r3
 80121a8:	f7fe fe20 	bl	8010dec <ld_word>
 80121ac:	4603      	mov	r3, r0
 80121ae:	461a      	mov	r2, r3
 80121b0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d001      	beq.n	80121bc <check_fs+0x48>
 80121b8:	2303      	movs	r3, #3
 80121ba:	e029      	b.n	8012210 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80121c2:	2be9      	cmp	r3, #233	@ 0xe9
 80121c4:	d009      	beq.n	80121da <check_fs+0x66>
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80121cc:	2beb      	cmp	r3, #235	@ 0xeb
 80121ce:	d11e      	bne.n	801220e <check_fs+0x9a>
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80121d6:	2b90      	cmp	r3, #144	@ 0x90
 80121d8:	d119      	bne.n	801220e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	3330      	adds	r3, #48	@ 0x30
 80121de:	3336      	adds	r3, #54	@ 0x36
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7fe fe1b 	bl	8010e1c <ld_dword>
 80121e6:	4603      	mov	r3, r0
 80121e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80121ec:	4a0a      	ldr	r2, [pc, #40]	@ (8012218 <check_fs+0xa4>)
 80121ee:	4293      	cmp	r3, r2
 80121f0:	d101      	bne.n	80121f6 <check_fs+0x82>
 80121f2:	2300      	movs	r3, #0
 80121f4:	e00c      	b.n	8012210 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	3330      	adds	r3, #48	@ 0x30
 80121fa:	3352      	adds	r3, #82	@ 0x52
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7fe fe0d 	bl	8010e1c <ld_dword>
 8012202:	4603      	mov	r3, r0
 8012204:	4a05      	ldr	r2, [pc, #20]	@ (801221c <check_fs+0xa8>)
 8012206:	4293      	cmp	r3, r2
 8012208:	d101      	bne.n	801220e <check_fs+0x9a>
 801220a:	2300      	movs	r3, #0
 801220c:	e000      	b.n	8012210 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801220e:	2302      	movs	r3, #2
}
 8012210:	4618      	mov	r0, r3
 8012212:	3708      	adds	r7, #8
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	00544146 	.word	0x00544146
 801221c:	33544146 	.word	0x33544146

08012220 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b096      	sub	sp, #88	@ 0x58
 8012224:	af00      	add	r7, sp, #0
 8012226:	60f8      	str	r0, [r7, #12]
 8012228:	60b9      	str	r1, [r7, #8]
 801222a:	4613      	mov	r3, r2
 801222c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	2200      	movs	r2, #0
 8012232:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012234:	68f8      	ldr	r0, [r7, #12]
 8012236:	f7ff ff58 	bl	80120ea <get_ldnumber>
 801223a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801223c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801223e:	2b00      	cmp	r3, #0
 8012240:	da01      	bge.n	8012246 <find_volume+0x26>
 8012242:	230b      	movs	r3, #11
 8012244:	e22d      	b.n	80126a2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012246:	4aa1      	ldr	r2, [pc, #644]	@ (80124cc <find_volume+0x2ac>)
 8012248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801224a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801224e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012252:	2b00      	cmp	r3, #0
 8012254:	d101      	bne.n	801225a <find_volume+0x3a>
 8012256:	230c      	movs	r3, #12
 8012258:	e223      	b.n	80126a2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801225e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012260:	79fb      	ldrb	r3, [r7, #7]
 8012262:	f023 0301 	bic.w	r3, r3, #1
 8012266:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801226a:	781b      	ldrb	r3, [r3, #0]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d01a      	beq.n	80122a6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012272:	785b      	ldrb	r3, [r3, #1]
 8012274:	4618      	mov	r0, r3
 8012276:	f7fe fd1b 	bl	8010cb0 <disk_status>
 801227a:	4603      	mov	r3, r0
 801227c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012280:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012284:	f003 0301 	and.w	r3, r3, #1
 8012288:	2b00      	cmp	r3, #0
 801228a:	d10c      	bne.n	80122a6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801228c:	79fb      	ldrb	r3, [r7, #7]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d007      	beq.n	80122a2 <find_volume+0x82>
 8012292:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012296:	f003 0304 	and.w	r3, r3, #4
 801229a:	2b00      	cmp	r3, #0
 801229c:	d001      	beq.n	80122a2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801229e:	230a      	movs	r3, #10
 80122a0:	e1ff      	b.n	80126a2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80122a2:	2300      	movs	r3, #0
 80122a4:	e1fd      	b.n	80126a2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80122a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122a8:	2200      	movs	r2, #0
 80122aa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80122ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80122ae:	b2da      	uxtb	r2, r3
 80122b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122b2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80122b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80122b6:	785b      	ldrb	r3, [r3, #1]
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7fe fd13 	bl	8010ce4 <disk_initialize>
 80122be:	4603      	mov	r3, r0
 80122c0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80122c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80122c8:	f003 0301 	and.w	r3, r3, #1
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d001      	beq.n	80122d4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80122d0:	2303      	movs	r3, #3
 80122d2:	e1e6      	b.n	80126a2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80122d4:	79fb      	ldrb	r3, [r7, #7]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d007      	beq.n	80122ea <find_volume+0xca>
 80122da:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80122de:	f003 0304 	and.w	r3, r3, #4
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d001      	beq.n	80122ea <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80122e6:	230a      	movs	r3, #10
 80122e8:	e1db      	b.n	80126a2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80122ea:	2300      	movs	r3, #0
 80122ec:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80122ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80122f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80122f2:	f7ff ff3f 	bl	8012174 <check_fs>
 80122f6:	4603      	mov	r3, r0
 80122f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80122fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012300:	2b02      	cmp	r3, #2
 8012302:	d149      	bne.n	8012398 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012304:	2300      	movs	r3, #0
 8012306:	643b      	str	r3, [r7, #64]	@ 0x40
 8012308:	e01e      	b.n	8012348 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801230a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801230c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012312:	011b      	lsls	r3, r3, #4
 8012314:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012318:	4413      	add	r3, r2
 801231a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801231c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801231e:	3304      	adds	r3, #4
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d006      	beq.n	8012334 <find_volume+0x114>
 8012326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012328:	3308      	adds	r3, #8
 801232a:	4618      	mov	r0, r3
 801232c:	f7fe fd76 	bl	8010e1c <ld_dword>
 8012330:	4602      	mov	r2, r0
 8012332:	e000      	b.n	8012336 <find_volume+0x116>
 8012334:	2200      	movs	r2, #0
 8012336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012338:	009b      	lsls	r3, r3, #2
 801233a:	3358      	adds	r3, #88	@ 0x58
 801233c:	443b      	add	r3, r7
 801233e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012342:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012344:	3301      	adds	r3, #1
 8012346:	643b      	str	r3, [r7, #64]	@ 0x40
 8012348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801234a:	2b03      	cmp	r3, #3
 801234c:	d9dd      	bls.n	801230a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801234e:	2300      	movs	r3, #0
 8012350:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8012352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012354:	2b00      	cmp	r3, #0
 8012356:	d002      	beq.n	801235e <find_volume+0x13e>
 8012358:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801235a:	3b01      	subs	r3, #1
 801235c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801235e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012360:	009b      	lsls	r3, r3, #2
 8012362:	3358      	adds	r3, #88	@ 0x58
 8012364:	443b      	add	r3, r7
 8012366:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801236a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801236c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801236e:	2b00      	cmp	r3, #0
 8012370:	d005      	beq.n	801237e <find_volume+0x15e>
 8012372:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012374:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012376:	f7ff fefd 	bl	8012174 <check_fs>
 801237a:	4603      	mov	r3, r0
 801237c:	e000      	b.n	8012380 <find_volume+0x160>
 801237e:	2303      	movs	r3, #3
 8012380:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012384:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012388:	2b01      	cmp	r3, #1
 801238a:	d905      	bls.n	8012398 <find_volume+0x178>
 801238c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801238e:	3301      	adds	r3, #1
 8012390:	643b      	str	r3, [r7, #64]	@ 0x40
 8012392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012394:	2b03      	cmp	r3, #3
 8012396:	d9e2      	bls.n	801235e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012398:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 801239c:	2b04      	cmp	r3, #4
 801239e:	d101      	bne.n	80123a4 <find_volume+0x184>
 80123a0:	2301      	movs	r3, #1
 80123a2:	e17e      	b.n	80126a2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80123a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d901      	bls.n	80123b0 <find_volume+0x190>
 80123ac:	230d      	movs	r3, #13
 80123ae:	e178      	b.n	80126a2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80123b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123b2:	3330      	adds	r3, #48	@ 0x30
 80123b4:	330b      	adds	r3, #11
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7fe fd18 	bl	8010dec <ld_word>
 80123bc:	4603      	mov	r3, r0
 80123be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80123c2:	d001      	beq.n	80123c8 <find_volume+0x1a8>
 80123c4:	230d      	movs	r3, #13
 80123c6:	e16c      	b.n	80126a2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80123c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ca:	3330      	adds	r3, #48	@ 0x30
 80123cc:	3316      	adds	r3, #22
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7fe fd0c 	bl	8010dec <ld_word>
 80123d4:	4603      	mov	r3, r0
 80123d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80123d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d106      	bne.n	80123ec <find_volume+0x1cc>
 80123de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123e0:	3330      	adds	r3, #48	@ 0x30
 80123e2:	3324      	adds	r3, #36	@ 0x24
 80123e4:	4618      	mov	r0, r3
 80123e6:	f7fe fd19 	bl	8010e1c <ld_dword>
 80123ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80123ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80123f0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80123f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123f4:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80123f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80123fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80123fe:	789b      	ldrb	r3, [r3, #2]
 8012400:	2b01      	cmp	r3, #1
 8012402:	d005      	beq.n	8012410 <find_volume+0x1f0>
 8012404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012406:	789b      	ldrb	r3, [r3, #2]
 8012408:	2b02      	cmp	r3, #2
 801240a:	d001      	beq.n	8012410 <find_volume+0x1f0>
 801240c:	230d      	movs	r3, #13
 801240e:	e148      	b.n	80126a2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012412:	789b      	ldrb	r3, [r3, #2]
 8012414:	461a      	mov	r2, r3
 8012416:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012418:	fb02 f303 	mul.w	r3, r2, r3
 801241c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801241e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012424:	461a      	mov	r2, r3
 8012426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012428:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801242a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801242c:	895b      	ldrh	r3, [r3, #10]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d008      	beq.n	8012444 <find_volume+0x224>
 8012432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012434:	895b      	ldrh	r3, [r3, #10]
 8012436:	461a      	mov	r2, r3
 8012438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801243a:	895b      	ldrh	r3, [r3, #10]
 801243c:	3b01      	subs	r3, #1
 801243e:	4013      	ands	r3, r2
 8012440:	2b00      	cmp	r3, #0
 8012442:	d001      	beq.n	8012448 <find_volume+0x228>
 8012444:	230d      	movs	r3, #13
 8012446:	e12c      	b.n	80126a2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801244a:	3330      	adds	r3, #48	@ 0x30
 801244c:	3311      	adds	r3, #17
 801244e:	4618      	mov	r0, r3
 8012450:	f7fe fccc 	bl	8010dec <ld_word>
 8012454:	4603      	mov	r3, r0
 8012456:	461a      	mov	r2, r3
 8012458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801245a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801245c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801245e:	891b      	ldrh	r3, [r3, #8]
 8012460:	f003 030f 	and.w	r3, r3, #15
 8012464:	b29b      	uxth	r3, r3
 8012466:	2b00      	cmp	r3, #0
 8012468:	d001      	beq.n	801246e <find_volume+0x24e>
 801246a:	230d      	movs	r3, #13
 801246c:	e119      	b.n	80126a2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801246e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012470:	3330      	adds	r3, #48	@ 0x30
 8012472:	3313      	adds	r3, #19
 8012474:	4618      	mov	r0, r3
 8012476:	f7fe fcb9 	bl	8010dec <ld_word>
 801247a:	4603      	mov	r3, r0
 801247c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801247e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012480:	2b00      	cmp	r3, #0
 8012482:	d106      	bne.n	8012492 <find_volume+0x272>
 8012484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012486:	3330      	adds	r3, #48	@ 0x30
 8012488:	3320      	adds	r3, #32
 801248a:	4618      	mov	r0, r3
 801248c:	f7fe fcc6 	bl	8010e1c <ld_dword>
 8012490:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012494:	3330      	adds	r3, #48	@ 0x30
 8012496:	330e      	adds	r3, #14
 8012498:	4618      	mov	r0, r3
 801249a:	f7fe fca7 	bl	8010dec <ld_word>
 801249e:	4603      	mov	r3, r0
 80124a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80124a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d101      	bne.n	80124ac <find_volume+0x28c>
 80124a8:	230d      	movs	r3, #13
 80124aa:	e0fa      	b.n	80126a2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80124ac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80124ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124b0:	4413      	add	r3, r2
 80124b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80124b4:	8912      	ldrh	r2, [r2, #8]
 80124b6:	0912      	lsrs	r2, r2, #4
 80124b8:	b292      	uxth	r2, r2
 80124ba:	4413      	add	r3, r2
 80124bc:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80124be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80124c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d204      	bcs.n	80124d0 <find_volume+0x2b0>
 80124c6:	230d      	movs	r3, #13
 80124c8:	e0eb      	b.n	80126a2 <find_volume+0x482>
 80124ca:	bf00      	nop
 80124cc:	200064cc 	.word	0x200064cc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80124d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80124d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124d4:	1ad3      	subs	r3, r2, r3
 80124d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80124d8:	8952      	ldrh	r2, [r2, #10]
 80124da:	fbb3 f3f2 	udiv	r3, r3, r2
 80124de:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80124e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d101      	bne.n	80124ea <find_volume+0x2ca>
 80124e6:	230d      	movs	r3, #13
 80124e8:	e0db      	b.n	80126a2 <find_volume+0x482>
		fmt = FS_FAT32;
 80124ea:	2303      	movs	r3, #3
 80124ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80124f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124f2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80124f6:	4293      	cmp	r3, r2
 80124f8:	d802      	bhi.n	8012500 <find_volume+0x2e0>
 80124fa:	2302      	movs	r3, #2
 80124fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012502:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012506:	4293      	cmp	r3, r2
 8012508:	d802      	bhi.n	8012510 <find_volume+0x2f0>
 801250a:	2301      	movs	r3, #1
 801250c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012512:	1c9a      	adds	r2, r3, #2
 8012514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012516:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801251a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801251c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801251e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012520:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012522:	441a      	add	r2, r3
 8012524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012526:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012528:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801252a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801252c:	441a      	add	r2, r3
 801252e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012530:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8012532:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012536:	2b03      	cmp	r3, #3
 8012538:	d11e      	bne.n	8012578 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801253a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801253c:	3330      	adds	r3, #48	@ 0x30
 801253e:	332a      	adds	r3, #42	@ 0x2a
 8012540:	4618      	mov	r0, r3
 8012542:	f7fe fc53 	bl	8010dec <ld_word>
 8012546:	4603      	mov	r3, r0
 8012548:	2b00      	cmp	r3, #0
 801254a:	d001      	beq.n	8012550 <find_volume+0x330>
 801254c:	230d      	movs	r3, #13
 801254e:	e0a8      	b.n	80126a2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012552:	891b      	ldrh	r3, [r3, #8]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d001      	beq.n	801255c <find_volume+0x33c>
 8012558:	230d      	movs	r3, #13
 801255a:	e0a2      	b.n	80126a2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801255c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801255e:	3330      	adds	r3, #48	@ 0x30
 8012560:	332c      	adds	r3, #44	@ 0x2c
 8012562:	4618      	mov	r0, r3
 8012564:	f7fe fc5a 	bl	8010e1c <ld_dword>
 8012568:	4602      	mov	r2, r0
 801256a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801256c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801256e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012570:	695b      	ldr	r3, [r3, #20]
 8012572:	009b      	lsls	r3, r3, #2
 8012574:	647b      	str	r3, [r7, #68]	@ 0x44
 8012576:	e01f      	b.n	80125b8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801257a:	891b      	ldrh	r3, [r3, #8]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d101      	bne.n	8012584 <find_volume+0x364>
 8012580:	230d      	movs	r3, #13
 8012582:	e08e      	b.n	80126a2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012586:	6a1a      	ldr	r2, [r3, #32]
 8012588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801258a:	441a      	add	r2, r3
 801258c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801258e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012590:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012594:	2b02      	cmp	r3, #2
 8012596:	d103      	bne.n	80125a0 <find_volume+0x380>
 8012598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801259a:	695b      	ldr	r3, [r3, #20]
 801259c:	005b      	lsls	r3, r3, #1
 801259e:	e00a      	b.n	80125b6 <find_volume+0x396>
 80125a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125a2:	695a      	ldr	r2, [r3, #20]
 80125a4:	4613      	mov	r3, r2
 80125a6:	005b      	lsls	r3, r3, #1
 80125a8:	4413      	add	r3, r2
 80125aa:	085a      	lsrs	r2, r3, #1
 80125ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125ae:	695b      	ldr	r3, [r3, #20]
 80125b0:	f003 0301 	and.w	r3, r3, #1
 80125b4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80125b6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80125b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125ba:	699a      	ldr	r2, [r3, #24]
 80125bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125be:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80125c2:	0a5b      	lsrs	r3, r3, #9
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d201      	bcs.n	80125cc <find_volume+0x3ac>
 80125c8:	230d      	movs	r3, #13
 80125ca:	e06a      	b.n	80126a2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80125cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125ce:	f04f 32ff 	mov.w	r2, #4294967295
 80125d2:	611a      	str	r2, [r3, #16]
 80125d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125d6:	691a      	ldr	r2, [r3, #16]
 80125d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125da:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80125dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125de:	2280      	movs	r2, #128	@ 0x80
 80125e0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80125e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80125e6:	2b03      	cmp	r3, #3
 80125e8:	d149      	bne.n	801267e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80125ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125ec:	3330      	adds	r3, #48	@ 0x30
 80125ee:	3330      	adds	r3, #48	@ 0x30
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7fe fbfb 	bl	8010dec <ld_word>
 80125f6:	4603      	mov	r3, r0
 80125f8:	2b01      	cmp	r3, #1
 80125fa:	d140      	bne.n	801267e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80125fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80125fe:	3301      	adds	r3, #1
 8012600:	4619      	mov	r1, r3
 8012602:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012604:	f7fe fea2 	bl	801134c <move_window>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	d137      	bne.n	801267e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801260e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012610:	2200      	movs	r2, #0
 8012612:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012616:	3330      	adds	r3, #48	@ 0x30
 8012618:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801261c:	4618      	mov	r0, r3
 801261e:	f7fe fbe5 	bl	8010dec <ld_word>
 8012622:	4603      	mov	r3, r0
 8012624:	461a      	mov	r2, r3
 8012626:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801262a:	429a      	cmp	r2, r3
 801262c:	d127      	bne.n	801267e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801262e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012630:	3330      	adds	r3, #48	@ 0x30
 8012632:	4618      	mov	r0, r3
 8012634:	f7fe fbf2 	bl	8010e1c <ld_dword>
 8012638:	4603      	mov	r3, r0
 801263a:	4a1c      	ldr	r2, [pc, #112]	@ (80126ac <find_volume+0x48c>)
 801263c:	4293      	cmp	r3, r2
 801263e:	d11e      	bne.n	801267e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012642:	3330      	adds	r3, #48	@ 0x30
 8012644:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012648:	4618      	mov	r0, r3
 801264a:	f7fe fbe7 	bl	8010e1c <ld_dword>
 801264e:	4603      	mov	r3, r0
 8012650:	4a17      	ldr	r2, [pc, #92]	@ (80126b0 <find_volume+0x490>)
 8012652:	4293      	cmp	r3, r2
 8012654:	d113      	bne.n	801267e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012658:	3330      	adds	r3, #48	@ 0x30
 801265a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 801265e:	4618      	mov	r0, r3
 8012660:	f7fe fbdc 	bl	8010e1c <ld_dword>
 8012664:	4602      	mov	r2, r0
 8012666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012668:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801266c:	3330      	adds	r3, #48	@ 0x30
 801266e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8012672:	4618      	mov	r0, r3
 8012674:	f7fe fbd2 	bl	8010e1c <ld_dword>
 8012678:	4602      	mov	r2, r0
 801267a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801267c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801267e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012680:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012684:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012686:	4b0b      	ldr	r3, [pc, #44]	@ (80126b4 <find_volume+0x494>)
 8012688:	881b      	ldrh	r3, [r3, #0]
 801268a:	3301      	adds	r3, #1
 801268c:	b29a      	uxth	r2, r3
 801268e:	4b09      	ldr	r3, [pc, #36]	@ (80126b4 <find_volume+0x494>)
 8012690:	801a      	strh	r2, [r3, #0]
 8012692:	4b08      	ldr	r3, [pc, #32]	@ (80126b4 <find_volume+0x494>)
 8012694:	881a      	ldrh	r2, [r3, #0]
 8012696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012698:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801269a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801269c:	f7fe fdee 	bl	801127c <clear_lock>
#endif
	return FR_OK;
 80126a0:	2300      	movs	r3, #0
}
 80126a2:	4618      	mov	r0, r3
 80126a4:	3758      	adds	r7, #88	@ 0x58
 80126a6:	46bd      	mov	sp, r7
 80126a8:	bd80      	pop	{r7, pc}
 80126aa:	bf00      	nop
 80126ac:	41615252 	.word	0x41615252
 80126b0:	61417272 	.word	0x61417272
 80126b4:	200064d0 	.word	0x200064d0

080126b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b084      	sub	sp, #16
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80126c2:	2309      	movs	r3, #9
 80126c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d01c      	beq.n	8012706 <validate+0x4e>
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d018      	beq.n	8012706 <validate+0x4e>
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	781b      	ldrb	r3, [r3, #0]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d013      	beq.n	8012706 <validate+0x4e>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	889a      	ldrh	r2, [r3, #4]
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	88db      	ldrh	r3, [r3, #6]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d10c      	bne.n	8012706 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	785b      	ldrb	r3, [r3, #1]
 80126f2:	4618      	mov	r0, r3
 80126f4:	f7fe fadc 	bl	8010cb0 <disk_status>
 80126f8:	4603      	mov	r3, r0
 80126fa:	f003 0301 	and.w	r3, r3, #1
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d101      	bne.n	8012706 <validate+0x4e>
			res = FR_OK;
 8012702:	2300      	movs	r3, #0
 8012704:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012706:	7bfb      	ldrb	r3, [r7, #15]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d102      	bne.n	8012712 <validate+0x5a>
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	e000      	b.n	8012714 <validate+0x5c>
 8012712:	2300      	movs	r3, #0
 8012714:	683a      	ldr	r2, [r7, #0]
 8012716:	6013      	str	r3, [r2, #0]
	return res;
 8012718:	7bfb      	ldrb	r3, [r7, #15]
}
 801271a:	4618      	mov	r0, r3
 801271c:	3710      	adds	r7, #16
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
	...

08012724 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b088      	sub	sp, #32
 8012728:	af00      	add	r7, sp, #0
 801272a:	60f8      	str	r0, [r7, #12]
 801272c:	60b9      	str	r1, [r7, #8]
 801272e:	4613      	mov	r3, r2
 8012730:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012732:	68bb      	ldr	r3, [r7, #8]
 8012734:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012736:	f107 0310 	add.w	r3, r7, #16
 801273a:	4618      	mov	r0, r3
 801273c:	f7ff fcd5 	bl	80120ea <get_ldnumber>
 8012740:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	2b00      	cmp	r3, #0
 8012746:	da01      	bge.n	801274c <f_mount+0x28>
 8012748:	230b      	movs	r3, #11
 801274a:	e02b      	b.n	80127a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801274c:	4a17      	ldr	r2, [pc, #92]	@ (80127ac <f_mount+0x88>)
 801274e:	69fb      	ldr	r3, [r7, #28]
 8012750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012754:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012756:	69bb      	ldr	r3, [r7, #24]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d005      	beq.n	8012768 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801275c:	69b8      	ldr	r0, [r7, #24]
 801275e:	f7fe fd8d 	bl	801127c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	2200      	movs	r2, #0
 8012766:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d002      	beq.n	8012774 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	2200      	movs	r2, #0
 8012772:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012774:	68fa      	ldr	r2, [r7, #12]
 8012776:	490d      	ldr	r1, [pc, #52]	@ (80127ac <f_mount+0x88>)
 8012778:	69fb      	ldr	r3, [r7, #28]
 801277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d002      	beq.n	801278a <f_mount+0x66>
 8012784:	79fb      	ldrb	r3, [r7, #7]
 8012786:	2b01      	cmp	r3, #1
 8012788:	d001      	beq.n	801278e <f_mount+0x6a>
 801278a:	2300      	movs	r3, #0
 801278c:	e00a      	b.n	80127a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801278e:	f107 010c 	add.w	r1, r7, #12
 8012792:	f107 0308 	add.w	r3, r7, #8
 8012796:	2200      	movs	r2, #0
 8012798:	4618      	mov	r0, r3
 801279a:	f7ff fd41 	bl	8012220 <find_volume>
 801279e:	4603      	mov	r3, r0
 80127a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80127a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80127a4:	4618      	mov	r0, r3
 80127a6:	3720      	adds	r7, #32
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}
 80127ac:	200064cc 	.word	0x200064cc

080127b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b098      	sub	sp, #96	@ 0x60
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	60f8      	str	r0, [r7, #12]
 80127b8:	60b9      	str	r1, [r7, #8]
 80127ba:	4613      	mov	r3, r2
 80127bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d101      	bne.n	80127c8 <f_open+0x18>
 80127c4:	2309      	movs	r3, #9
 80127c6:	e1a9      	b.n	8012b1c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80127c8:	79fb      	ldrb	r3, [r7, #7]
 80127ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80127ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80127d0:	79fa      	ldrb	r2, [r7, #7]
 80127d2:	f107 0110 	add.w	r1, r7, #16
 80127d6:	f107 0308 	add.w	r3, r7, #8
 80127da:	4618      	mov	r0, r3
 80127dc:	f7ff fd20 	bl	8012220 <find_volume>
 80127e0:	4603      	mov	r3, r0
 80127e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80127e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	f040 818d 	bne.w	8012b0a <f_open+0x35a>
		dj.obj.fs = fs;
 80127f0:	693b      	ldr	r3, [r7, #16]
 80127f2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80127f4:	68ba      	ldr	r2, [r7, #8]
 80127f6:	f107 0314 	add.w	r3, r7, #20
 80127fa:	4611      	mov	r1, r2
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7ff fc03 	bl	8012008 <follow_path>
 8012802:	4603      	mov	r3, r0
 8012804:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012808:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801280c:	2b00      	cmp	r3, #0
 801280e:	d118      	bne.n	8012842 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012810:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012814:	b25b      	sxtb	r3, r3
 8012816:	2b00      	cmp	r3, #0
 8012818:	da03      	bge.n	8012822 <f_open+0x72>
				res = FR_INVALID_NAME;
 801281a:	2306      	movs	r3, #6
 801281c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012820:	e00f      	b.n	8012842 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012822:	79fb      	ldrb	r3, [r7, #7]
 8012824:	2b01      	cmp	r3, #1
 8012826:	bf8c      	ite	hi
 8012828:	2301      	movhi	r3, #1
 801282a:	2300      	movls	r3, #0
 801282c:	b2db      	uxtb	r3, r3
 801282e:	461a      	mov	r2, r3
 8012830:	f107 0314 	add.w	r3, r7, #20
 8012834:	4611      	mov	r1, r2
 8012836:	4618      	mov	r0, r3
 8012838:	f7fe fbd8 	bl	8010fec <chk_lock>
 801283c:	4603      	mov	r3, r0
 801283e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012842:	79fb      	ldrb	r3, [r7, #7]
 8012844:	f003 031c 	and.w	r3, r3, #28
 8012848:	2b00      	cmp	r3, #0
 801284a:	d07f      	beq.n	801294c <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 801284c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012850:	2b00      	cmp	r3, #0
 8012852:	d017      	beq.n	8012884 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012854:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012858:	2b04      	cmp	r3, #4
 801285a:	d10e      	bne.n	801287a <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801285c:	f7fe fc22 	bl	80110a4 <enq_lock>
 8012860:	4603      	mov	r3, r0
 8012862:	2b00      	cmp	r3, #0
 8012864:	d006      	beq.n	8012874 <f_open+0xc4>
 8012866:	f107 0314 	add.w	r3, r7, #20
 801286a:	4618      	mov	r0, r3
 801286c:	f7ff fb06 	bl	8011e7c <dir_register>
 8012870:	4603      	mov	r3, r0
 8012872:	e000      	b.n	8012876 <f_open+0xc6>
 8012874:	2312      	movs	r3, #18
 8012876:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801287a:	79fb      	ldrb	r3, [r7, #7]
 801287c:	f043 0308 	orr.w	r3, r3, #8
 8012880:	71fb      	strb	r3, [r7, #7]
 8012882:	e010      	b.n	80128a6 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012884:	7ebb      	ldrb	r3, [r7, #26]
 8012886:	f003 0311 	and.w	r3, r3, #17
 801288a:	2b00      	cmp	r3, #0
 801288c:	d003      	beq.n	8012896 <f_open+0xe6>
					res = FR_DENIED;
 801288e:	2307      	movs	r3, #7
 8012890:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012894:	e007      	b.n	80128a6 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012896:	79fb      	ldrb	r3, [r7, #7]
 8012898:	f003 0304 	and.w	r3, r3, #4
 801289c:	2b00      	cmp	r3, #0
 801289e:	d002      	beq.n	80128a6 <f_open+0xf6>
 80128a0:	2308      	movs	r3, #8
 80128a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80128a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d168      	bne.n	8012980 <f_open+0x1d0>
 80128ae:	79fb      	ldrb	r3, [r7, #7]
 80128b0:	f003 0308 	and.w	r3, r3, #8
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d063      	beq.n	8012980 <f_open+0x1d0>
				dw = GET_FATTIME();
 80128b8:	f7fe f840 	bl	801093c <get_fattime>
 80128bc:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80128be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128c0:	330e      	adds	r3, #14
 80128c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80128c4:	4618      	mov	r0, r3
 80128c6:	f7fe fae7 	bl	8010e98 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80128ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128cc:	3316      	adds	r3, #22
 80128ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7fe fae1 	bl	8010e98 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80128d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128d8:	330b      	adds	r3, #11
 80128da:	2220      	movs	r2, #32
 80128dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128e2:	4611      	mov	r1, r2
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7ff fa35 	bl	8011d54 <ld_clust>
 80128ea:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80128ec:	693b      	ldr	r3, [r7, #16]
 80128ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80128f0:	2200      	movs	r2, #0
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7ff fa4d 	bl	8011d92 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80128f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128fa:	331c      	adds	r3, #28
 80128fc:	2100      	movs	r1, #0
 80128fe:	4618      	mov	r0, r3
 8012900:	f7fe faca 	bl	8010e98 <st_dword>
					fs->wflag = 1;
 8012904:	693b      	ldr	r3, [r7, #16]
 8012906:	2201      	movs	r2, #1
 8012908:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801290a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801290c:	2b00      	cmp	r3, #0
 801290e:	d037      	beq.n	8012980 <f_open+0x1d0>
						dw = fs->winsect;
 8012910:	693b      	ldr	r3, [r7, #16]
 8012912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012914:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012916:	f107 0314 	add.w	r3, r7, #20
 801291a:	2200      	movs	r2, #0
 801291c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801291e:	4618      	mov	r0, r3
 8012920:	f7fe ff60 	bl	80117e4 <remove_chain>
 8012924:	4603      	mov	r3, r0
 8012926:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 801292a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801292e:	2b00      	cmp	r3, #0
 8012930:	d126      	bne.n	8012980 <f_open+0x1d0>
							res = move_window(fs, dw);
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012936:	4618      	mov	r0, r3
 8012938:	f7fe fd08 	bl	801134c <move_window>
 801293c:	4603      	mov	r3, r0
 801293e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012946:	3a01      	subs	r2, #1
 8012948:	60da      	str	r2, [r3, #12]
 801294a:	e019      	b.n	8012980 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801294c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012950:	2b00      	cmp	r3, #0
 8012952:	d115      	bne.n	8012980 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012954:	7ebb      	ldrb	r3, [r7, #26]
 8012956:	f003 0310 	and.w	r3, r3, #16
 801295a:	2b00      	cmp	r3, #0
 801295c:	d003      	beq.n	8012966 <f_open+0x1b6>
					res = FR_NO_FILE;
 801295e:	2304      	movs	r3, #4
 8012960:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012964:	e00c      	b.n	8012980 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012966:	79fb      	ldrb	r3, [r7, #7]
 8012968:	f003 0302 	and.w	r3, r3, #2
 801296c:	2b00      	cmp	r3, #0
 801296e:	d007      	beq.n	8012980 <f_open+0x1d0>
 8012970:	7ebb      	ldrb	r3, [r7, #26]
 8012972:	f003 0301 	and.w	r3, r3, #1
 8012976:	2b00      	cmp	r3, #0
 8012978:	d002      	beq.n	8012980 <f_open+0x1d0>
						res = FR_DENIED;
 801297a:	2307      	movs	r3, #7
 801297c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012980:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012984:	2b00      	cmp	r3, #0
 8012986:	d126      	bne.n	80129d6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012988:	79fb      	ldrb	r3, [r7, #7]
 801298a:	f003 0308 	and.w	r3, r3, #8
 801298e:	2b00      	cmp	r3, #0
 8012990:	d003      	beq.n	801299a <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8012992:	79fb      	ldrb	r3, [r7, #7]
 8012994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012998:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 80129a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80129a8:	79fb      	ldrb	r3, [r7, #7]
 80129aa:	2b01      	cmp	r3, #1
 80129ac:	bf8c      	ite	hi
 80129ae:	2301      	movhi	r3, #1
 80129b0:	2300      	movls	r3, #0
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	461a      	mov	r2, r3
 80129b6:	f107 0314 	add.w	r3, r7, #20
 80129ba:	4611      	mov	r1, r2
 80129bc:	4618      	mov	r0, r3
 80129be:	f7fe fb93 	bl	80110e8 <inc_lock>
 80129c2:	4602      	mov	r2, r0
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	691b      	ldr	r3, [r3, #16]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d102      	bne.n	80129d6 <f_open+0x226>
 80129d0:	2302      	movs	r3, #2
 80129d2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80129d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f040 8095 	bne.w	8012b0a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80129e4:	4611      	mov	r1, r2
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7ff f9b4 	bl	8011d54 <ld_clust>
 80129ec:	4602      	mov	r2, r0
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80129f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80129f4:	331c      	adds	r3, #28
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fe fa10 	bl	8010e1c <ld_dword>
 80129fc:	4602      	mov	r2, r0
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	2200      	movs	r2, #0
 8012a06:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012a08:	693a      	ldr	r2, [r7, #16]
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	88da      	ldrh	r2, [r3, #6]
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	79fa      	ldrb	r2, [r7, #7]
 8012a1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	2200      	movs	r2, #0
 8012a26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	3330      	adds	r3, #48	@ 0x30
 8012a32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012a36:	2100      	movs	r1, #0
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7fe fa7a 	bl	8010f32 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012a3e:	79fb      	ldrb	r3, [r7, #7]
 8012a40:	f003 0320 	and.w	r3, r3, #32
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d060      	beq.n	8012b0a <f_open+0x35a>
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	68db      	ldr	r3, [r3, #12]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d05c      	beq.n	8012b0a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	68da      	ldr	r2, [r3, #12]
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	895b      	ldrh	r3, [r3, #10]
 8012a5c:	025b      	lsls	r3, r3, #9
 8012a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	689b      	ldr	r3, [r3, #8]
 8012a64:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	68db      	ldr	r3, [r3, #12]
 8012a6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8012a6c:	e016      	b.n	8012a9c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7fe fd25 	bl	80114c2 <get_fat>
 8012a78:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012a7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a7c:	2b01      	cmp	r3, #1
 8012a7e:	d802      	bhi.n	8012a86 <f_open+0x2d6>
 8012a80:	2302      	movs	r3, #2
 8012a82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012a86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a8c:	d102      	bne.n	8012a94 <f_open+0x2e4>
 8012a8e:	2301      	movs	r3, #1
 8012a90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012a94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012a96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012a98:	1ad3      	subs	r3, r2, r3
 8012a9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8012a9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d103      	bne.n	8012aac <f_open+0x2fc>
 8012aa4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012aa6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d8e0      	bhi.n	8012a6e <f_open+0x2be>
				}
				fp->clust = clst;
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012ab0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012ab2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d127      	bne.n	8012b0a <f_open+0x35a>
 8012aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d022      	beq.n	8012b0a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012ac8:	4618      	mov	r0, r3
 8012aca:	f7fe fcdb 	bl	8011484 <clust2sect>
 8012ace:	6478      	str	r0, [r7, #68]	@ 0x44
 8012ad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d103      	bne.n	8012ade <f_open+0x32e>
						res = FR_INT_ERR;
 8012ad6:	2302      	movs	r3, #2
 8012ad8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012adc:	e015      	b.n	8012b0a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012ae0:	0a5a      	lsrs	r2, r3, #9
 8012ae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012ae4:	441a      	add	r2, r3
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	7858      	ldrb	r0, [r3, #1]
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	6a1a      	ldr	r2, [r3, #32]
 8012af8:	2301      	movs	r3, #1
 8012afa:	f7fe f919 	bl	8010d30 <disk_read>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d002      	beq.n	8012b0a <f_open+0x35a>
 8012b04:	2301      	movs	r3, #1
 8012b06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d002      	beq.n	8012b18 <f_open+0x368>
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	2200      	movs	r2, #0
 8012b16:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012b18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8012b1c:	4618      	mov	r0, r3
 8012b1e:	3760      	adds	r7, #96	@ 0x60
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}

08012b24 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b08c      	sub	sp, #48	@ 0x30
 8012b28:	af00      	add	r7, sp, #0
 8012b2a:	60f8      	str	r0, [r7, #12]
 8012b2c:	60b9      	str	r1, [r7, #8]
 8012b2e:	607a      	str	r2, [r7, #4]
 8012b30:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012b36:	683b      	ldr	r3, [r7, #0]
 8012b38:	2200      	movs	r2, #0
 8012b3a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012b3c:	68fb      	ldr	r3, [r7, #12]
 8012b3e:	f107 0210 	add.w	r2, r7, #16
 8012b42:	4611      	mov	r1, r2
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7ff fdb7 	bl	80126b8 <validate>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012b50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d107      	bne.n	8012b68 <f_write+0x44>
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	7d5b      	ldrb	r3, [r3, #21]
 8012b5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8012b60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d002      	beq.n	8012b6e <f_write+0x4a>
 8012b68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012b6c:	e14b      	b.n	8012e06 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	7d1b      	ldrb	r3, [r3, #20]
 8012b72:	f003 0302 	and.w	r3, r3, #2
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d101      	bne.n	8012b7e <f_write+0x5a>
 8012b7a:	2307      	movs	r3, #7
 8012b7c:	e143      	b.n	8012e06 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	699a      	ldr	r2, [r3, #24]
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	441a      	add	r2, r3
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	699b      	ldr	r3, [r3, #24]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	f080 812d 	bcs.w	8012dea <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	699b      	ldr	r3, [r3, #24]
 8012b94:	43db      	mvns	r3, r3
 8012b96:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8012b98:	e127      	b.n	8012dea <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	699b      	ldr	r3, [r3, #24]
 8012b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f040 80e3 	bne.w	8012d6e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	699b      	ldr	r3, [r3, #24]
 8012bac:	0a5b      	lsrs	r3, r3, #9
 8012bae:	693a      	ldr	r2, [r7, #16]
 8012bb0:	8952      	ldrh	r2, [r2, #10]
 8012bb2:	3a01      	subs	r2, #1
 8012bb4:	4013      	ands	r3, r2
 8012bb6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012bb8:	69bb      	ldr	r3, [r7, #24]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d143      	bne.n	8012c46 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	699b      	ldr	r3, [r3, #24]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d10c      	bne.n	8012be0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	689b      	ldr	r3, [r3, #8]
 8012bca:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8012bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d11a      	bne.n	8012c08 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	2100      	movs	r1, #0
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7fe fe69 	bl	80118ae <create_chain>
 8012bdc:	62b8      	str	r0, [r7, #40]	@ 0x28
 8012bde:	e013      	b.n	8012c08 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d007      	beq.n	8012bf8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	699b      	ldr	r3, [r3, #24]
 8012bec:	4619      	mov	r1, r3
 8012bee:	68f8      	ldr	r0, [r7, #12]
 8012bf0:	f7fe fef5 	bl	80119de <clmt_clust>
 8012bf4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8012bf6:	e007      	b.n	8012c08 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012bf8:	68fa      	ldr	r2, [r7, #12]
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	69db      	ldr	r3, [r3, #28]
 8012bfe:	4619      	mov	r1, r3
 8012c00:	4610      	mov	r0, r2
 8012c02:	f7fe fe54 	bl	80118ae <create_chain>
 8012c06:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	f000 80f2 	beq.w	8012df4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c12:	2b01      	cmp	r3, #1
 8012c14:	d104      	bne.n	8012c20 <f_write+0xfc>
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	2202      	movs	r2, #2
 8012c1a:	755a      	strb	r2, [r3, #21]
 8012c1c:	2302      	movs	r3, #2
 8012c1e:	e0f2      	b.n	8012e06 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c26:	d104      	bne.n	8012c32 <f_write+0x10e>
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	755a      	strb	r2, [r3, #21]
 8012c2e:	2301      	movs	r3, #1
 8012c30:	e0e9      	b.n	8012e06 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c36:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	689b      	ldr	r3, [r3, #8]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d102      	bne.n	8012c46 <f_write+0x122>
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c44:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	7d1b      	ldrb	r3, [r3, #20]
 8012c4a:	b25b      	sxtb	r3, r3
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	da18      	bge.n	8012c82 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	7858      	ldrb	r0, [r3, #1]
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	6a1a      	ldr	r2, [r3, #32]
 8012c5e:	2301      	movs	r3, #1
 8012c60:	f7fe f886 	bl	8010d70 <disk_write>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d004      	beq.n	8012c74 <f_write+0x150>
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	2201      	movs	r2, #1
 8012c6e:	755a      	strb	r2, [r3, #21]
 8012c70:	2301      	movs	r3, #1
 8012c72:	e0c8      	b.n	8012e06 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	7d1b      	ldrb	r3, [r3, #20]
 8012c78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012c7c:	b2da      	uxtb	r2, r3
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012c82:	693a      	ldr	r2, [r7, #16]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	69db      	ldr	r3, [r3, #28]
 8012c88:	4619      	mov	r1, r3
 8012c8a:	4610      	mov	r0, r2
 8012c8c:	f7fe fbfa 	bl	8011484 <clust2sect>
 8012c90:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012c92:	697b      	ldr	r3, [r7, #20]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d104      	bne.n	8012ca2 <f_write+0x17e>
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	2202      	movs	r2, #2
 8012c9c:	755a      	strb	r2, [r3, #21]
 8012c9e:	2302      	movs	r3, #2
 8012ca0:	e0b1      	b.n	8012e06 <f_write+0x2e2>
			sect += csect;
 8012ca2:	697a      	ldr	r2, [r7, #20]
 8012ca4:	69bb      	ldr	r3, [r7, #24]
 8012ca6:	4413      	add	r3, r2
 8012ca8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	0a5b      	lsrs	r3, r3, #9
 8012cae:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012cb0:	6a3b      	ldr	r3, [r7, #32]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d03c      	beq.n	8012d30 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012cb6:	69ba      	ldr	r2, [r7, #24]
 8012cb8:	6a3b      	ldr	r3, [r7, #32]
 8012cba:	4413      	add	r3, r2
 8012cbc:	693a      	ldr	r2, [r7, #16]
 8012cbe:	8952      	ldrh	r2, [r2, #10]
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d905      	bls.n	8012cd0 <f_write+0x1ac>
					cc = fs->csize - csect;
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	895b      	ldrh	r3, [r3, #10]
 8012cc8:	461a      	mov	r2, r3
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	1ad3      	subs	r3, r2, r3
 8012cce:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012cd0:	693b      	ldr	r3, [r7, #16]
 8012cd2:	7858      	ldrb	r0, [r3, #1]
 8012cd4:	6a3b      	ldr	r3, [r7, #32]
 8012cd6:	697a      	ldr	r2, [r7, #20]
 8012cd8:	69f9      	ldr	r1, [r7, #28]
 8012cda:	f7fe f849 	bl	8010d70 <disk_write>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d004      	beq.n	8012cee <f_write+0x1ca>
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	2201      	movs	r2, #1
 8012ce8:	755a      	strb	r2, [r3, #21]
 8012cea:	2301      	movs	r3, #1
 8012cec:	e08b      	b.n	8012e06 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	6a1a      	ldr	r2, [r3, #32]
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	1ad3      	subs	r3, r2, r3
 8012cf6:	6a3a      	ldr	r2, [r7, #32]
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d915      	bls.n	8012d28 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	6a1a      	ldr	r2, [r3, #32]
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	1ad3      	subs	r3, r2, r3
 8012d0a:	025b      	lsls	r3, r3, #9
 8012d0c:	69fa      	ldr	r2, [r7, #28]
 8012d0e:	4413      	add	r3, r2
 8012d10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012d14:	4619      	mov	r1, r3
 8012d16:	f7fe f8eb 	bl	8010ef0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	7d1b      	ldrb	r3, [r3, #20]
 8012d1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012d22:	b2da      	uxtb	r2, r3
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012d28:	6a3b      	ldr	r3, [r7, #32]
 8012d2a:	025b      	lsls	r3, r3, #9
 8012d2c:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8012d2e:	e03f      	b.n	8012db0 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	6a1b      	ldr	r3, [r3, #32]
 8012d34:	697a      	ldr	r2, [r7, #20]
 8012d36:	429a      	cmp	r2, r3
 8012d38:	d016      	beq.n	8012d68 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	699a      	ldr	r2, [r3, #24]
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012d42:	429a      	cmp	r2, r3
 8012d44:	d210      	bcs.n	8012d68 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012d46:	693b      	ldr	r3, [r7, #16]
 8012d48:	7858      	ldrb	r0, [r3, #1]
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012d50:	2301      	movs	r3, #1
 8012d52:	697a      	ldr	r2, [r7, #20]
 8012d54:	f7fd ffec 	bl	8010d30 <disk_read>
 8012d58:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d004      	beq.n	8012d68 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	2201      	movs	r2, #1
 8012d62:	755a      	strb	r2, [r3, #21]
 8012d64:	2301      	movs	r3, #1
 8012d66:	e04e      	b.n	8012e06 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	697a      	ldr	r2, [r7, #20]
 8012d6c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	699b      	ldr	r3, [r3, #24]
 8012d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d76:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8012d7a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	429a      	cmp	r2, r3
 8012d82:	d901      	bls.n	8012d88 <f_write+0x264>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	699b      	ldr	r3, [r3, #24]
 8012d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d96:	4413      	add	r3, r2
 8012d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d9a:	69f9      	ldr	r1, [r7, #28]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7fe f8a7 	bl	8010ef0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	7d1b      	ldrb	r3, [r3, #20]
 8012da6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012daa:	b2da      	uxtb	r2, r3
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012db0:	69fa      	ldr	r2, [r7, #28]
 8012db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db4:	4413      	add	r3, r2
 8012db6:	61fb      	str	r3, [r7, #28]
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	699a      	ldr	r2, [r3, #24]
 8012dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dbe:	441a      	add	r2, r3
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	619a      	str	r2, [r3, #24]
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	68da      	ldr	r2, [r3, #12]
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	699b      	ldr	r3, [r3, #24]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	bf38      	it	cc
 8012dd0:	461a      	movcc	r2, r3
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	60da      	str	r2, [r3, #12]
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	681a      	ldr	r2, [r3, #0]
 8012dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ddc:	441a      	add	r2, r3
 8012dde:	683b      	ldr	r3, [r7, #0]
 8012de0:	601a      	str	r2, [r3, #0]
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012de6:	1ad3      	subs	r3, r2, r3
 8012de8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	f47f aed4 	bne.w	8012b9a <f_write+0x76>
 8012df2:	e000      	b.n	8012df6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012df4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	7d1b      	ldrb	r3, [r3, #20]
 8012dfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dfe:	b2da      	uxtb	r2, r3
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012e04:	2300      	movs	r3, #0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3730      	adds	r7, #48	@ 0x30
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}

08012e0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012e0e:	b580      	push	{r7, lr}
 8012e10:	b086      	sub	sp, #24
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f107 0208 	add.w	r2, r7, #8
 8012e1c:	4611      	mov	r1, r2
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7ff fc4a 	bl	80126b8 <validate>
 8012e24:	4603      	mov	r3, r0
 8012e26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012e28:	7dfb      	ldrb	r3, [r7, #23]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d168      	bne.n	8012f00 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	7d1b      	ldrb	r3, [r3, #20]
 8012e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d062      	beq.n	8012f00 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	7d1b      	ldrb	r3, [r3, #20]
 8012e3e:	b25b      	sxtb	r3, r3
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	da15      	bge.n	8012e70 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	7858      	ldrb	r0, [r3, #1]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6a1a      	ldr	r2, [r3, #32]
 8012e52:	2301      	movs	r3, #1
 8012e54:	f7fd ff8c 	bl	8010d70 <disk_write>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d001      	beq.n	8012e62 <f_sync+0x54>
 8012e5e:	2301      	movs	r3, #1
 8012e60:	e04f      	b.n	8012f02 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	7d1b      	ldrb	r3, [r3, #20]
 8012e66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012e6a:	b2da      	uxtb	r2, r3
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012e70:	f7fd fd64 	bl	801093c <get_fattime>
 8012e74:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012e76:	68ba      	ldr	r2, [r7, #8]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012e7c:	4619      	mov	r1, r3
 8012e7e:	4610      	mov	r0, r2
 8012e80:	f7fe fa64 	bl	801134c <move_window>
 8012e84:	4603      	mov	r3, r0
 8012e86:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012e88:	7dfb      	ldrb	r3, [r7, #23]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d138      	bne.n	8012f00 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e92:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	330b      	adds	r3, #11
 8012e98:	781a      	ldrb	r2, [r3, #0]
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	330b      	adds	r3, #11
 8012e9e:	f042 0220 	orr.w	r2, r2, #32
 8012ea2:	b2d2      	uxtb	r2, r2
 8012ea4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	6818      	ldr	r0, [r3, #0]
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	689b      	ldr	r3, [r3, #8]
 8012eae:	461a      	mov	r2, r3
 8012eb0:	68f9      	ldr	r1, [r7, #12]
 8012eb2:	f7fe ff6e 	bl	8011d92 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	f103 021c 	add.w	r2, r3, #28
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	68db      	ldr	r3, [r3, #12]
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	4610      	mov	r0, r2
 8012ec4:	f7fd ffe8 	bl	8010e98 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	3316      	adds	r3, #22
 8012ecc:	6939      	ldr	r1, [r7, #16]
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7fd ffe2 	bl	8010e98 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	3312      	adds	r3, #18
 8012ed8:	2100      	movs	r1, #0
 8012eda:	4618      	mov	r0, r3
 8012edc:	f7fd ffc1 	bl	8010e62 <st_word>
					fs->wflag = 1;
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	2201      	movs	r2, #1
 8012ee4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012ee6:	68bb      	ldr	r3, [r7, #8]
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fe fa5d 	bl	80113a8 <sync_fs>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	7d1b      	ldrb	r3, [r3, #20]
 8012ef6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012efa:	b2da      	uxtb	r2, r3
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3718      	adds	r7, #24
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}

08012f0a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012f0a:	b580      	push	{r7, lr}
 8012f0c:	b084      	sub	sp, #16
 8012f0e:	af00      	add	r7, sp, #0
 8012f10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f7ff ff7b 	bl	8012e0e <f_sync>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012f1c:	7bfb      	ldrb	r3, [r7, #15]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d118      	bne.n	8012f54 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f107 0208 	add.w	r2, r7, #8
 8012f28:	4611      	mov	r1, r2
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7ff fbc4 	bl	80126b8 <validate>
 8012f30:	4603      	mov	r3, r0
 8012f32:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012f34:	7bfb      	ldrb	r3, [r7, #15]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d10c      	bne.n	8012f54 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	691b      	ldr	r3, [r3, #16]
 8012f3e:	4618      	mov	r0, r3
 8012f40:	f7fe f960 	bl	8011204 <dec_lock>
 8012f44:	4603      	mov	r3, r0
 8012f46:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012f48:	7bfb      	ldrb	r3, [r7, #15]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d102      	bne.n	8012f54 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2200      	movs	r2, #0
 8012f52:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f56:	4618      	mov	r0, r3
 8012f58:	3710      	adds	r7, #16
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}

08012f5e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012f5e:	b580      	push	{r7, lr}
 8012f60:	b090      	sub	sp, #64	@ 0x40
 8012f62:	af00      	add	r7, sp, #0
 8012f64:	6078      	str	r0, [r7, #4]
 8012f66:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	f107 0208 	add.w	r2, r7, #8
 8012f6e:	4611      	mov	r1, r2
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7ff fba1 	bl	80126b8 <validate>
 8012f76:	4603      	mov	r3, r0
 8012f78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012f7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d103      	bne.n	8012f8c <f_lseek+0x2e>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	7d5b      	ldrb	r3, [r3, #21]
 8012f88:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012f8c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d002      	beq.n	8012f9a <f_lseek+0x3c>
 8012f94:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012f98:	e1e6      	b.n	8013368 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	f000 80d1 	beq.w	8013146 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012faa:	d15a      	bne.n	8013062 <f_lseek+0x104>
			tbl = fp->cltbl;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012fb0:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012fb4:	1d1a      	adds	r2, r3, #4
 8012fb6:	627a      	str	r2, [r7, #36]	@ 0x24
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	617b      	str	r3, [r7, #20]
 8012fbc:	2302      	movs	r3, #2
 8012fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	689b      	ldr	r3, [r3, #8]
 8012fc4:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8012fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d03a      	beq.n	8013042 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fce:	613b      	str	r3, [r7, #16]
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fd6:	3302      	adds	r3, #2
 8012fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8012fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fdc:	60fb      	str	r3, [r7, #12]
 8012fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7fe fa6a 	bl	80114c2 <get_fat>
 8012fee:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8012ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ff2:	2b01      	cmp	r3, #1
 8012ff4:	d804      	bhi.n	8013000 <f_lseek+0xa2>
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2202      	movs	r2, #2
 8012ffa:	755a      	strb	r2, [r3, #21]
 8012ffc:	2302      	movs	r3, #2
 8012ffe:	e1b3      	b.n	8013368 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013006:	d104      	bne.n	8013012 <f_lseek+0xb4>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2201      	movs	r2, #1
 801300c:	755a      	strb	r2, [r3, #21]
 801300e:	2301      	movs	r3, #1
 8013010:	e1aa      	b.n	8013368 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	3301      	adds	r3, #1
 8013016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013018:	429a      	cmp	r2, r3
 801301a:	d0de      	beq.n	8012fda <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801301c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	429a      	cmp	r2, r3
 8013022:	d809      	bhi.n	8013038 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013026:	1d1a      	adds	r2, r3, #4
 8013028:	627a      	str	r2, [r7, #36]	@ 0x24
 801302a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801302c:	601a      	str	r2, [r3, #0]
 801302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013030:	1d1a      	adds	r2, r3, #4
 8013032:	627a      	str	r2, [r7, #36]	@ 0x24
 8013034:	693a      	ldr	r2, [r7, #16]
 8013036:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	695b      	ldr	r3, [r3, #20]
 801303c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801303e:	429a      	cmp	r2, r3
 8013040:	d3c4      	bcc.n	8012fcc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013046:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013048:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801304a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	429a      	cmp	r2, r3
 8013050:	d803      	bhi.n	801305a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013054:	2200      	movs	r2, #0
 8013056:	601a      	str	r2, [r3, #0]
 8013058:	e184      	b.n	8013364 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801305a:	2311      	movs	r3, #17
 801305c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8013060:	e180      	b.n	8013364 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	68db      	ldr	r3, [r3, #12]
 8013066:	683a      	ldr	r2, [r7, #0]
 8013068:	429a      	cmp	r2, r3
 801306a:	d902      	bls.n	8013072 <f_lseek+0x114>
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	68db      	ldr	r3, [r3, #12]
 8013070:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	683a      	ldr	r2, [r7, #0]
 8013076:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013078:	683b      	ldr	r3, [r7, #0]
 801307a:	2b00      	cmp	r3, #0
 801307c:	f000 8172 	beq.w	8013364 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	3b01      	subs	r3, #1
 8013084:	4619      	mov	r1, r3
 8013086:	6878      	ldr	r0, [r7, #4]
 8013088:	f7fe fca9 	bl	80119de <clmt_clust>
 801308c:	4602      	mov	r2, r0
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013092:	68ba      	ldr	r2, [r7, #8]
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	69db      	ldr	r3, [r3, #28]
 8013098:	4619      	mov	r1, r3
 801309a:	4610      	mov	r0, r2
 801309c:	f7fe f9f2 	bl	8011484 <clust2sect>
 80130a0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80130a2:	69bb      	ldr	r3, [r7, #24]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d104      	bne.n	80130b2 <f_lseek+0x154>
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2202      	movs	r2, #2
 80130ac:	755a      	strb	r2, [r3, #21]
 80130ae:	2302      	movs	r3, #2
 80130b0:	e15a      	b.n	8013368 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	3b01      	subs	r3, #1
 80130b6:	0a5b      	lsrs	r3, r3, #9
 80130b8:	68ba      	ldr	r2, [r7, #8]
 80130ba:	8952      	ldrh	r2, [r2, #10]
 80130bc:	3a01      	subs	r2, #1
 80130be:	4013      	ands	r3, r2
 80130c0:	69ba      	ldr	r2, [r7, #24]
 80130c2:	4413      	add	r3, r2
 80130c4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	699b      	ldr	r3, [r3, #24]
 80130ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	f000 8148 	beq.w	8013364 <f_lseek+0x406>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	6a1b      	ldr	r3, [r3, #32]
 80130d8:	69ba      	ldr	r2, [r7, #24]
 80130da:	429a      	cmp	r2, r3
 80130dc:	f000 8142 	beq.w	8013364 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	7d1b      	ldrb	r3, [r3, #20]
 80130e4:	b25b      	sxtb	r3, r3
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	da18      	bge.n	801311c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	7858      	ldrb	r0, [r3, #1]
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	6a1a      	ldr	r2, [r3, #32]
 80130f8:	2301      	movs	r3, #1
 80130fa:	f7fd fe39 	bl	8010d70 <disk_write>
 80130fe:	4603      	mov	r3, r0
 8013100:	2b00      	cmp	r3, #0
 8013102:	d004      	beq.n	801310e <f_lseek+0x1b0>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2201      	movs	r2, #1
 8013108:	755a      	strb	r2, [r3, #21]
 801310a:	2301      	movs	r3, #1
 801310c:	e12c      	b.n	8013368 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	7d1b      	ldrb	r3, [r3, #20]
 8013112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013116:	b2da      	uxtb	r2, r3
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801311c:	68bb      	ldr	r3, [r7, #8]
 801311e:	7858      	ldrb	r0, [r3, #1]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013126:	2301      	movs	r3, #1
 8013128:	69ba      	ldr	r2, [r7, #24]
 801312a:	f7fd fe01 	bl	8010d30 <disk_read>
 801312e:	4603      	mov	r3, r0
 8013130:	2b00      	cmp	r3, #0
 8013132:	d004      	beq.n	801313e <f_lseek+0x1e0>
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	2201      	movs	r2, #1
 8013138:	755a      	strb	r2, [r3, #21]
 801313a:	2301      	movs	r3, #1
 801313c:	e114      	b.n	8013368 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	69ba      	ldr	r2, [r7, #24]
 8013142:	621a      	str	r2, [r3, #32]
 8013144:	e10e      	b.n	8013364 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	68db      	ldr	r3, [r3, #12]
 801314a:	683a      	ldr	r2, [r7, #0]
 801314c:	429a      	cmp	r2, r3
 801314e:	d908      	bls.n	8013162 <f_lseek+0x204>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	7d1b      	ldrb	r3, [r3, #20]
 8013154:	f003 0302 	and.w	r3, r3, #2
 8013158:	2b00      	cmp	r3, #0
 801315a:	d102      	bne.n	8013162 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	68db      	ldr	r3, [r3, #12]
 8013160:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	699b      	ldr	r3, [r3, #24]
 8013166:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013168:	2300      	movs	r3, #0
 801316a:	637b      	str	r3, [r7, #52]	@ 0x34
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013170:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	f000 80a7 	beq.w	80132c8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	895b      	ldrh	r3, [r3, #10]
 801317e:	025b      	lsls	r3, r3, #9
 8013180:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013182:	6a3b      	ldr	r3, [r7, #32]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d01b      	beq.n	80131c0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	1e5a      	subs	r2, r3, #1
 801318c:	69fb      	ldr	r3, [r7, #28]
 801318e:	fbb2 f2f3 	udiv	r2, r2, r3
 8013192:	6a3b      	ldr	r3, [r7, #32]
 8013194:	1e59      	subs	r1, r3, #1
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801319c:	429a      	cmp	r2, r3
 801319e:	d30f      	bcc.n	80131c0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80131a0:	6a3b      	ldr	r3, [r7, #32]
 80131a2:	1e5a      	subs	r2, r3, #1
 80131a4:	69fb      	ldr	r3, [r7, #28]
 80131a6:	425b      	negs	r3, r3
 80131a8:	401a      	ands	r2, r3
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	699b      	ldr	r3, [r3, #24]
 80131b2:	683a      	ldr	r2, [r7, #0]
 80131b4:	1ad3      	subs	r3, r2, r3
 80131b6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	69db      	ldr	r3, [r3, #28]
 80131bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80131be:	e022      	b.n	8013206 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	689b      	ldr	r3, [r3, #8]
 80131c4:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80131c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d119      	bne.n	8013200 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2100      	movs	r1, #0
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fe fb6c 	bl	80118ae <create_chain>
 80131d6:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80131d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131da:	2b01      	cmp	r3, #1
 80131dc:	d104      	bne.n	80131e8 <f_lseek+0x28a>
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	2202      	movs	r2, #2
 80131e2:	755a      	strb	r2, [r3, #21]
 80131e4:	2302      	movs	r3, #2
 80131e6:	e0bf      	b.n	8013368 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80131e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131ee:	d104      	bne.n	80131fa <f_lseek+0x29c>
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2201      	movs	r2, #1
 80131f4:	755a      	strb	r2, [r3, #21]
 80131f6:	2301      	movs	r3, #1
 80131f8:	e0b6      	b.n	8013368 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80131fe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013204:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013208:	2b00      	cmp	r3, #0
 801320a:	d05d      	beq.n	80132c8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801320c:	e03a      	b.n	8013284 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801320e:	683a      	ldr	r2, [r7, #0]
 8013210:	69fb      	ldr	r3, [r7, #28]
 8013212:	1ad3      	subs	r3, r2, r3
 8013214:	603b      	str	r3, [r7, #0]
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	699a      	ldr	r2, [r3, #24]
 801321a:	69fb      	ldr	r3, [r7, #28]
 801321c:	441a      	add	r2, r3
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	7d1b      	ldrb	r3, [r3, #20]
 8013226:	f003 0302 	and.w	r3, r3, #2
 801322a:	2b00      	cmp	r3, #0
 801322c:	d00b      	beq.n	8013246 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013232:	4618      	mov	r0, r3
 8013234:	f7fe fb3b 	bl	80118ae <create_chain>
 8013238:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801323a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801323c:	2b00      	cmp	r3, #0
 801323e:	d108      	bne.n	8013252 <f_lseek+0x2f4>
							ofs = 0; break;
 8013240:	2300      	movs	r3, #0
 8013242:	603b      	str	r3, [r7, #0]
 8013244:	e022      	b.n	801328c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801324a:	4618      	mov	r0, r3
 801324c:	f7fe f939 	bl	80114c2 <get_fat>
 8013250:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013258:	d104      	bne.n	8013264 <f_lseek+0x306>
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2201      	movs	r2, #1
 801325e:	755a      	strb	r2, [r3, #21]
 8013260:	2301      	movs	r3, #1
 8013262:	e081      	b.n	8013368 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013266:	2b01      	cmp	r3, #1
 8013268:	d904      	bls.n	8013274 <f_lseek+0x316>
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	695b      	ldr	r3, [r3, #20]
 801326e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013270:	429a      	cmp	r2, r3
 8013272:	d304      	bcc.n	801327e <f_lseek+0x320>
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	2202      	movs	r2, #2
 8013278:	755a      	strb	r2, [r3, #21]
 801327a:	2302      	movs	r3, #2
 801327c:	e074      	b.n	8013368 <f_lseek+0x40a>
					fp->clust = clst;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013282:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013284:	683a      	ldr	r2, [r7, #0]
 8013286:	69fb      	ldr	r3, [r7, #28]
 8013288:	429a      	cmp	r2, r3
 801328a:	d8c0      	bhi.n	801320e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	699a      	ldr	r2, [r3, #24]
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	441a      	add	r2, r3
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d012      	beq.n	80132c8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80132a2:	68bb      	ldr	r3, [r7, #8]
 80132a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7fe f8ec 	bl	8011484 <clust2sect>
 80132ac:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80132ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d104      	bne.n	80132be <f_lseek+0x360>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	2202      	movs	r2, #2
 80132b8:	755a      	strb	r2, [r3, #21]
 80132ba:	2302      	movs	r3, #2
 80132bc:	e054      	b.n	8013368 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	0a5b      	lsrs	r3, r3, #9
 80132c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80132c4:	4413      	add	r3, r2
 80132c6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	699a      	ldr	r2, [r3, #24]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	68db      	ldr	r3, [r3, #12]
 80132d0:	429a      	cmp	r2, r3
 80132d2:	d90a      	bls.n	80132ea <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	699a      	ldr	r2, [r3, #24]
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	7d1b      	ldrb	r3, [r3, #20]
 80132e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132e4:	b2da      	uxtb	r2, r3
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	699b      	ldr	r3, [r3, #24]
 80132ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d036      	beq.n	8013364 <f_lseek+0x406>
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	6a1b      	ldr	r3, [r3, #32]
 80132fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d031      	beq.n	8013364 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	7d1b      	ldrb	r3, [r3, #20]
 8013304:	b25b      	sxtb	r3, r3
 8013306:	2b00      	cmp	r3, #0
 8013308:	da18      	bge.n	801333c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	7858      	ldrb	r0, [r3, #1]
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	6a1a      	ldr	r2, [r3, #32]
 8013318:	2301      	movs	r3, #1
 801331a:	f7fd fd29 	bl	8010d70 <disk_write>
 801331e:	4603      	mov	r3, r0
 8013320:	2b00      	cmp	r3, #0
 8013322:	d004      	beq.n	801332e <f_lseek+0x3d0>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2201      	movs	r2, #1
 8013328:	755a      	strb	r2, [r3, #21]
 801332a:	2301      	movs	r3, #1
 801332c:	e01c      	b.n	8013368 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	7d1b      	ldrb	r3, [r3, #20]
 8013332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013336:	b2da      	uxtb	r2, r3
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801333c:	68bb      	ldr	r3, [r7, #8]
 801333e:	7858      	ldrb	r0, [r3, #1]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8013346:	2301      	movs	r3, #1
 8013348:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801334a:	f7fd fcf1 	bl	8010d30 <disk_read>
 801334e:	4603      	mov	r3, r0
 8013350:	2b00      	cmp	r3, #0
 8013352:	d004      	beq.n	801335e <f_lseek+0x400>
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2201      	movs	r2, #1
 8013358:	755a      	strb	r2, [r3, #21]
 801335a:	2301      	movs	r3, #1
 801335c:	e004      	b.n	8013368 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013362:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013364:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8013368:	4618      	mov	r0, r3
 801336a:	3740      	adds	r7, #64	@ 0x40
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013370:	b480      	push	{r7}
 8013372:	b087      	sub	sp, #28
 8013374:	af00      	add	r7, sp, #0
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	4613      	mov	r3, r2
 801337c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801337e:	2301      	movs	r3, #1
 8013380:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013382:	2300      	movs	r3, #0
 8013384:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013386:	4b1f      	ldr	r3, [pc, #124]	@ (8013404 <FATFS_LinkDriverEx+0x94>)
 8013388:	7a5b      	ldrb	r3, [r3, #9]
 801338a:	b2db      	uxtb	r3, r3
 801338c:	2b00      	cmp	r3, #0
 801338e:	d131      	bne.n	80133f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013390:	4b1c      	ldr	r3, [pc, #112]	@ (8013404 <FATFS_LinkDriverEx+0x94>)
 8013392:	7a5b      	ldrb	r3, [r3, #9]
 8013394:	b2db      	uxtb	r3, r3
 8013396:	461a      	mov	r2, r3
 8013398:	4b1a      	ldr	r3, [pc, #104]	@ (8013404 <FATFS_LinkDriverEx+0x94>)
 801339a:	2100      	movs	r1, #0
 801339c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801339e:	4b19      	ldr	r3, [pc, #100]	@ (8013404 <FATFS_LinkDriverEx+0x94>)
 80133a0:	7a5b      	ldrb	r3, [r3, #9]
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	4a17      	ldr	r2, [pc, #92]	@ (8013404 <FATFS_LinkDriverEx+0x94>)
 80133a6:	009b      	lsls	r3, r3, #2
 80133a8:	4413      	add	r3, r2
 80133aa:	68fa      	ldr	r2, [r7, #12]
 80133ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80133ae:	4b15      	ldr	r3, [pc, #84]	@ (8013404 <FATFS_LinkDriverEx+0x94>)
 80133b0:	7a5b      	ldrb	r3, [r3, #9]
 80133b2:	b2db      	uxtb	r3, r3
 80133b4:	461a      	mov	r2, r3
 80133b6:	4b13      	ldr	r3, [pc, #76]	@ (8013404 <FATFS_LinkDriverEx+0x94>)
 80133b8:	4413      	add	r3, r2
 80133ba:	79fa      	ldrb	r2, [r7, #7]
 80133bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80133be:	4b11      	ldr	r3, [pc, #68]	@ (8013404 <FATFS_LinkDriverEx+0x94>)
 80133c0:	7a5b      	ldrb	r3, [r3, #9]
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	1c5a      	adds	r2, r3, #1
 80133c6:	b2d1      	uxtb	r1, r2
 80133c8:	4a0e      	ldr	r2, [pc, #56]	@ (8013404 <FATFS_LinkDriverEx+0x94>)
 80133ca:	7251      	strb	r1, [r2, #9]
 80133cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80133ce:	7dbb      	ldrb	r3, [r7, #22]
 80133d0:	3330      	adds	r3, #48	@ 0x30
 80133d2:	b2da      	uxtb	r2, r3
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80133d8:	68bb      	ldr	r3, [r7, #8]
 80133da:	3301      	adds	r3, #1
 80133dc:	223a      	movs	r2, #58	@ 0x3a
 80133de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80133e0:	68bb      	ldr	r3, [r7, #8]
 80133e2:	3302      	adds	r3, #2
 80133e4:	222f      	movs	r2, #47	@ 0x2f
 80133e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80133e8:	68bb      	ldr	r3, [r7, #8]
 80133ea:	3303      	adds	r3, #3
 80133ec:	2200      	movs	r2, #0
 80133ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80133f0:	2300      	movs	r3, #0
 80133f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80133f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	371c      	adds	r7, #28
 80133fa:	46bd      	mov	sp, r7
 80133fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013400:	4770      	bx	lr
 8013402:	bf00      	nop
 8013404:	200064f4 	.word	0x200064f4

08013408 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b082      	sub	sp, #8
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
 8013410:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013412:	2200      	movs	r2, #0
 8013414:	6839      	ldr	r1, [r7, #0]
 8013416:	6878      	ldr	r0, [r7, #4]
 8013418:	f7ff ffaa 	bl	8013370 <FATFS_LinkDriverEx>
 801341c:	4603      	mov	r3, r0
}
 801341e:	4618      	mov	r0, r3
 8013420:	3708      	adds	r7, #8
 8013422:	46bd      	mov	sp, r7
 8013424:	bd80      	pop	{r7, pc}

08013426 <__cvt>:
 8013426:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801342a:	ec57 6b10 	vmov	r6, r7, d0
 801342e:	2f00      	cmp	r7, #0
 8013430:	460c      	mov	r4, r1
 8013432:	4619      	mov	r1, r3
 8013434:	463b      	mov	r3, r7
 8013436:	bfbb      	ittet	lt
 8013438:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801343c:	461f      	movlt	r7, r3
 801343e:	2300      	movge	r3, #0
 8013440:	232d      	movlt	r3, #45	@ 0x2d
 8013442:	700b      	strb	r3, [r1, #0]
 8013444:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013446:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801344a:	4691      	mov	r9, r2
 801344c:	f023 0820 	bic.w	r8, r3, #32
 8013450:	bfbc      	itt	lt
 8013452:	4632      	movlt	r2, r6
 8013454:	4616      	movlt	r6, r2
 8013456:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801345a:	d005      	beq.n	8013468 <__cvt+0x42>
 801345c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013460:	d100      	bne.n	8013464 <__cvt+0x3e>
 8013462:	3401      	adds	r4, #1
 8013464:	2102      	movs	r1, #2
 8013466:	e000      	b.n	801346a <__cvt+0x44>
 8013468:	2103      	movs	r1, #3
 801346a:	ab03      	add	r3, sp, #12
 801346c:	9301      	str	r3, [sp, #4]
 801346e:	ab02      	add	r3, sp, #8
 8013470:	9300      	str	r3, [sp, #0]
 8013472:	ec47 6b10 	vmov	d0, r6, r7
 8013476:	4653      	mov	r3, sl
 8013478:	4622      	mov	r2, r4
 801347a:	f000 ff91 	bl	80143a0 <_dtoa_r>
 801347e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013482:	4605      	mov	r5, r0
 8013484:	d119      	bne.n	80134ba <__cvt+0x94>
 8013486:	f019 0f01 	tst.w	r9, #1
 801348a:	d00e      	beq.n	80134aa <__cvt+0x84>
 801348c:	eb00 0904 	add.w	r9, r0, r4
 8013490:	2200      	movs	r2, #0
 8013492:	2300      	movs	r3, #0
 8013494:	4630      	mov	r0, r6
 8013496:	4639      	mov	r1, r7
 8013498:	f7ed fb36 	bl	8000b08 <__aeabi_dcmpeq>
 801349c:	b108      	cbz	r0, 80134a2 <__cvt+0x7c>
 801349e:	f8cd 900c 	str.w	r9, [sp, #12]
 80134a2:	2230      	movs	r2, #48	@ 0x30
 80134a4:	9b03      	ldr	r3, [sp, #12]
 80134a6:	454b      	cmp	r3, r9
 80134a8:	d31e      	bcc.n	80134e8 <__cvt+0xc2>
 80134aa:	9b03      	ldr	r3, [sp, #12]
 80134ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80134ae:	1b5b      	subs	r3, r3, r5
 80134b0:	4628      	mov	r0, r5
 80134b2:	6013      	str	r3, [r2, #0]
 80134b4:	b004      	add	sp, #16
 80134b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80134be:	eb00 0904 	add.w	r9, r0, r4
 80134c2:	d1e5      	bne.n	8013490 <__cvt+0x6a>
 80134c4:	7803      	ldrb	r3, [r0, #0]
 80134c6:	2b30      	cmp	r3, #48	@ 0x30
 80134c8:	d10a      	bne.n	80134e0 <__cvt+0xba>
 80134ca:	2200      	movs	r2, #0
 80134cc:	2300      	movs	r3, #0
 80134ce:	4630      	mov	r0, r6
 80134d0:	4639      	mov	r1, r7
 80134d2:	f7ed fb19 	bl	8000b08 <__aeabi_dcmpeq>
 80134d6:	b918      	cbnz	r0, 80134e0 <__cvt+0xba>
 80134d8:	f1c4 0401 	rsb	r4, r4, #1
 80134dc:	f8ca 4000 	str.w	r4, [sl]
 80134e0:	f8da 3000 	ldr.w	r3, [sl]
 80134e4:	4499      	add	r9, r3
 80134e6:	e7d3      	b.n	8013490 <__cvt+0x6a>
 80134e8:	1c59      	adds	r1, r3, #1
 80134ea:	9103      	str	r1, [sp, #12]
 80134ec:	701a      	strb	r2, [r3, #0]
 80134ee:	e7d9      	b.n	80134a4 <__cvt+0x7e>

080134f0 <__exponent>:
 80134f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80134f2:	2900      	cmp	r1, #0
 80134f4:	bfba      	itte	lt
 80134f6:	4249      	neglt	r1, r1
 80134f8:	232d      	movlt	r3, #45	@ 0x2d
 80134fa:	232b      	movge	r3, #43	@ 0x2b
 80134fc:	2909      	cmp	r1, #9
 80134fe:	7002      	strb	r2, [r0, #0]
 8013500:	7043      	strb	r3, [r0, #1]
 8013502:	dd29      	ble.n	8013558 <__exponent+0x68>
 8013504:	f10d 0307 	add.w	r3, sp, #7
 8013508:	461d      	mov	r5, r3
 801350a:	270a      	movs	r7, #10
 801350c:	461a      	mov	r2, r3
 801350e:	fbb1 f6f7 	udiv	r6, r1, r7
 8013512:	fb07 1416 	mls	r4, r7, r6, r1
 8013516:	3430      	adds	r4, #48	@ 0x30
 8013518:	f802 4c01 	strb.w	r4, [r2, #-1]
 801351c:	460c      	mov	r4, r1
 801351e:	2c63      	cmp	r4, #99	@ 0x63
 8013520:	f103 33ff 	add.w	r3, r3, #4294967295
 8013524:	4631      	mov	r1, r6
 8013526:	dcf1      	bgt.n	801350c <__exponent+0x1c>
 8013528:	3130      	adds	r1, #48	@ 0x30
 801352a:	1e94      	subs	r4, r2, #2
 801352c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013530:	1c41      	adds	r1, r0, #1
 8013532:	4623      	mov	r3, r4
 8013534:	42ab      	cmp	r3, r5
 8013536:	d30a      	bcc.n	801354e <__exponent+0x5e>
 8013538:	f10d 0309 	add.w	r3, sp, #9
 801353c:	1a9b      	subs	r3, r3, r2
 801353e:	42ac      	cmp	r4, r5
 8013540:	bf88      	it	hi
 8013542:	2300      	movhi	r3, #0
 8013544:	3302      	adds	r3, #2
 8013546:	4403      	add	r3, r0
 8013548:	1a18      	subs	r0, r3, r0
 801354a:	b003      	add	sp, #12
 801354c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801354e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013552:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013556:	e7ed      	b.n	8013534 <__exponent+0x44>
 8013558:	2330      	movs	r3, #48	@ 0x30
 801355a:	3130      	adds	r1, #48	@ 0x30
 801355c:	7083      	strb	r3, [r0, #2]
 801355e:	70c1      	strb	r1, [r0, #3]
 8013560:	1d03      	adds	r3, r0, #4
 8013562:	e7f1      	b.n	8013548 <__exponent+0x58>

08013564 <_printf_float>:
 8013564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013568:	b08d      	sub	sp, #52	@ 0x34
 801356a:	460c      	mov	r4, r1
 801356c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013570:	4616      	mov	r6, r2
 8013572:	461f      	mov	r7, r3
 8013574:	4605      	mov	r5, r0
 8013576:	f000 fe13 	bl	80141a0 <_localeconv_r>
 801357a:	6803      	ldr	r3, [r0, #0]
 801357c:	9304      	str	r3, [sp, #16]
 801357e:	4618      	mov	r0, r3
 8013580:	f7ec fe96 	bl	80002b0 <strlen>
 8013584:	2300      	movs	r3, #0
 8013586:	930a      	str	r3, [sp, #40]	@ 0x28
 8013588:	f8d8 3000 	ldr.w	r3, [r8]
 801358c:	9005      	str	r0, [sp, #20]
 801358e:	3307      	adds	r3, #7
 8013590:	f023 0307 	bic.w	r3, r3, #7
 8013594:	f103 0208 	add.w	r2, r3, #8
 8013598:	f894 a018 	ldrb.w	sl, [r4, #24]
 801359c:	f8d4 b000 	ldr.w	fp, [r4]
 80135a0:	f8c8 2000 	str.w	r2, [r8]
 80135a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80135a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80135ac:	9307      	str	r3, [sp, #28]
 80135ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80135b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80135b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135ba:	4b9c      	ldr	r3, [pc, #624]	@ (801382c <_printf_float+0x2c8>)
 80135bc:	f04f 32ff 	mov.w	r2, #4294967295
 80135c0:	f7ed fad4 	bl	8000b6c <__aeabi_dcmpun>
 80135c4:	bb70      	cbnz	r0, 8013624 <_printf_float+0xc0>
 80135c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80135ca:	4b98      	ldr	r3, [pc, #608]	@ (801382c <_printf_float+0x2c8>)
 80135cc:	f04f 32ff 	mov.w	r2, #4294967295
 80135d0:	f7ed faae 	bl	8000b30 <__aeabi_dcmple>
 80135d4:	bb30      	cbnz	r0, 8013624 <_printf_float+0xc0>
 80135d6:	2200      	movs	r2, #0
 80135d8:	2300      	movs	r3, #0
 80135da:	4640      	mov	r0, r8
 80135dc:	4649      	mov	r1, r9
 80135de:	f7ed fa9d 	bl	8000b1c <__aeabi_dcmplt>
 80135e2:	b110      	cbz	r0, 80135ea <_printf_float+0x86>
 80135e4:	232d      	movs	r3, #45	@ 0x2d
 80135e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135ea:	4a91      	ldr	r2, [pc, #580]	@ (8013830 <_printf_float+0x2cc>)
 80135ec:	4b91      	ldr	r3, [pc, #580]	@ (8013834 <_printf_float+0x2d0>)
 80135ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80135f2:	bf94      	ite	ls
 80135f4:	4690      	movls	r8, r2
 80135f6:	4698      	movhi	r8, r3
 80135f8:	2303      	movs	r3, #3
 80135fa:	6123      	str	r3, [r4, #16]
 80135fc:	f02b 0304 	bic.w	r3, fp, #4
 8013600:	6023      	str	r3, [r4, #0]
 8013602:	f04f 0900 	mov.w	r9, #0
 8013606:	9700      	str	r7, [sp, #0]
 8013608:	4633      	mov	r3, r6
 801360a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801360c:	4621      	mov	r1, r4
 801360e:	4628      	mov	r0, r5
 8013610:	f000 f9d2 	bl	80139b8 <_printf_common>
 8013614:	3001      	adds	r0, #1
 8013616:	f040 808d 	bne.w	8013734 <_printf_float+0x1d0>
 801361a:	f04f 30ff 	mov.w	r0, #4294967295
 801361e:	b00d      	add	sp, #52	@ 0x34
 8013620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013624:	4642      	mov	r2, r8
 8013626:	464b      	mov	r3, r9
 8013628:	4640      	mov	r0, r8
 801362a:	4649      	mov	r1, r9
 801362c:	f7ed fa9e 	bl	8000b6c <__aeabi_dcmpun>
 8013630:	b140      	cbz	r0, 8013644 <_printf_float+0xe0>
 8013632:	464b      	mov	r3, r9
 8013634:	2b00      	cmp	r3, #0
 8013636:	bfbc      	itt	lt
 8013638:	232d      	movlt	r3, #45	@ 0x2d
 801363a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801363e:	4a7e      	ldr	r2, [pc, #504]	@ (8013838 <_printf_float+0x2d4>)
 8013640:	4b7e      	ldr	r3, [pc, #504]	@ (801383c <_printf_float+0x2d8>)
 8013642:	e7d4      	b.n	80135ee <_printf_float+0x8a>
 8013644:	6863      	ldr	r3, [r4, #4]
 8013646:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801364a:	9206      	str	r2, [sp, #24]
 801364c:	1c5a      	adds	r2, r3, #1
 801364e:	d13b      	bne.n	80136c8 <_printf_float+0x164>
 8013650:	2306      	movs	r3, #6
 8013652:	6063      	str	r3, [r4, #4]
 8013654:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013658:	2300      	movs	r3, #0
 801365a:	6022      	str	r2, [r4, #0]
 801365c:	9303      	str	r3, [sp, #12]
 801365e:	ab0a      	add	r3, sp, #40	@ 0x28
 8013660:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013664:	ab09      	add	r3, sp, #36	@ 0x24
 8013666:	9300      	str	r3, [sp, #0]
 8013668:	6861      	ldr	r1, [r4, #4]
 801366a:	ec49 8b10 	vmov	d0, r8, r9
 801366e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013672:	4628      	mov	r0, r5
 8013674:	f7ff fed7 	bl	8013426 <__cvt>
 8013678:	9b06      	ldr	r3, [sp, #24]
 801367a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801367c:	2b47      	cmp	r3, #71	@ 0x47
 801367e:	4680      	mov	r8, r0
 8013680:	d129      	bne.n	80136d6 <_printf_float+0x172>
 8013682:	1cc8      	adds	r0, r1, #3
 8013684:	db02      	blt.n	801368c <_printf_float+0x128>
 8013686:	6863      	ldr	r3, [r4, #4]
 8013688:	4299      	cmp	r1, r3
 801368a:	dd41      	ble.n	8013710 <_printf_float+0x1ac>
 801368c:	f1aa 0a02 	sub.w	sl, sl, #2
 8013690:	fa5f fa8a 	uxtb.w	sl, sl
 8013694:	3901      	subs	r1, #1
 8013696:	4652      	mov	r2, sl
 8013698:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801369c:	9109      	str	r1, [sp, #36]	@ 0x24
 801369e:	f7ff ff27 	bl	80134f0 <__exponent>
 80136a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80136a4:	1813      	adds	r3, r2, r0
 80136a6:	2a01      	cmp	r2, #1
 80136a8:	4681      	mov	r9, r0
 80136aa:	6123      	str	r3, [r4, #16]
 80136ac:	dc02      	bgt.n	80136b4 <_printf_float+0x150>
 80136ae:	6822      	ldr	r2, [r4, #0]
 80136b0:	07d2      	lsls	r2, r2, #31
 80136b2:	d501      	bpl.n	80136b8 <_printf_float+0x154>
 80136b4:	3301      	adds	r3, #1
 80136b6:	6123      	str	r3, [r4, #16]
 80136b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d0a2      	beq.n	8013606 <_printf_float+0xa2>
 80136c0:	232d      	movs	r3, #45	@ 0x2d
 80136c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80136c6:	e79e      	b.n	8013606 <_printf_float+0xa2>
 80136c8:	9a06      	ldr	r2, [sp, #24]
 80136ca:	2a47      	cmp	r2, #71	@ 0x47
 80136cc:	d1c2      	bne.n	8013654 <_printf_float+0xf0>
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d1c0      	bne.n	8013654 <_printf_float+0xf0>
 80136d2:	2301      	movs	r3, #1
 80136d4:	e7bd      	b.n	8013652 <_printf_float+0xee>
 80136d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80136da:	d9db      	bls.n	8013694 <_printf_float+0x130>
 80136dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80136e0:	d118      	bne.n	8013714 <_printf_float+0x1b0>
 80136e2:	2900      	cmp	r1, #0
 80136e4:	6863      	ldr	r3, [r4, #4]
 80136e6:	dd0b      	ble.n	8013700 <_printf_float+0x19c>
 80136e8:	6121      	str	r1, [r4, #16]
 80136ea:	b913      	cbnz	r3, 80136f2 <_printf_float+0x18e>
 80136ec:	6822      	ldr	r2, [r4, #0]
 80136ee:	07d0      	lsls	r0, r2, #31
 80136f0:	d502      	bpl.n	80136f8 <_printf_float+0x194>
 80136f2:	3301      	adds	r3, #1
 80136f4:	440b      	add	r3, r1
 80136f6:	6123      	str	r3, [r4, #16]
 80136f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80136fa:	f04f 0900 	mov.w	r9, #0
 80136fe:	e7db      	b.n	80136b8 <_printf_float+0x154>
 8013700:	b913      	cbnz	r3, 8013708 <_printf_float+0x1a4>
 8013702:	6822      	ldr	r2, [r4, #0]
 8013704:	07d2      	lsls	r2, r2, #31
 8013706:	d501      	bpl.n	801370c <_printf_float+0x1a8>
 8013708:	3302      	adds	r3, #2
 801370a:	e7f4      	b.n	80136f6 <_printf_float+0x192>
 801370c:	2301      	movs	r3, #1
 801370e:	e7f2      	b.n	80136f6 <_printf_float+0x192>
 8013710:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013716:	4299      	cmp	r1, r3
 8013718:	db05      	blt.n	8013726 <_printf_float+0x1c2>
 801371a:	6823      	ldr	r3, [r4, #0]
 801371c:	6121      	str	r1, [r4, #16]
 801371e:	07d8      	lsls	r0, r3, #31
 8013720:	d5ea      	bpl.n	80136f8 <_printf_float+0x194>
 8013722:	1c4b      	adds	r3, r1, #1
 8013724:	e7e7      	b.n	80136f6 <_printf_float+0x192>
 8013726:	2900      	cmp	r1, #0
 8013728:	bfd4      	ite	le
 801372a:	f1c1 0202 	rsble	r2, r1, #2
 801372e:	2201      	movgt	r2, #1
 8013730:	4413      	add	r3, r2
 8013732:	e7e0      	b.n	80136f6 <_printf_float+0x192>
 8013734:	6823      	ldr	r3, [r4, #0]
 8013736:	055a      	lsls	r2, r3, #21
 8013738:	d407      	bmi.n	801374a <_printf_float+0x1e6>
 801373a:	6923      	ldr	r3, [r4, #16]
 801373c:	4642      	mov	r2, r8
 801373e:	4631      	mov	r1, r6
 8013740:	4628      	mov	r0, r5
 8013742:	47b8      	blx	r7
 8013744:	3001      	adds	r0, #1
 8013746:	d12b      	bne.n	80137a0 <_printf_float+0x23c>
 8013748:	e767      	b.n	801361a <_printf_float+0xb6>
 801374a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801374e:	f240 80dd 	bls.w	801390c <_printf_float+0x3a8>
 8013752:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013756:	2200      	movs	r2, #0
 8013758:	2300      	movs	r3, #0
 801375a:	f7ed f9d5 	bl	8000b08 <__aeabi_dcmpeq>
 801375e:	2800      	cmp	r0, #0
 8013760:	d033      	beq.n	80137ca <_printf_float+0x266>
 8013762:	4a37      	ldr	r2, [pc, #220]	@ (8013840 <_printf_float+0x2dc>)
 8013764:	2301      	movs	r3, #1
 8013766:	4631      	mov	r1, r6
 8013768:	4628      	mov	r0, r5
 801376a:	47b8      	blx	r7
 801376c:	3001      	adds	r0, #1
 801376e:	f43f af54 	beq.w	801361a <_printf_float+0xb6>
 8013772:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013776:	4543      	cmp	r3, r8
 8013778:	db02      	blt.n	8013780 <_printf_float+0x21c>
 801377a:	6823      	ldr	r3, [r4, #0]
 801377c:	07d8      	lsls	r0, r3, #31
 801377e:	d50f      	bpl.n	80137a0 <_printf_float+0x23c>
 8013780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013784:	4631      	mov	r1, r6
 8013786:	4628      	mov	r0, r5
 8013788:	47b8      	blx	r7
 801378a:	3001      	adds	r0, #1
 801378c:	f43f af45 	beq.w	801361a <_printf_float+0xb6>
 8013790:	f04f 0900 	mov.w	r9, #0
 8013794:	f108 38ff 	add.w	r8, r8, #4294967295
 8013798:	f104 0a1a 	add.w	sl, r4, #26
 801379c:	45c8      	cmp	r8, r9
 801379e:	dc09      	bgt.n	80137b4 <_printf_float+0x250>
 80137a0:	6823      	ldr	r3, [r4, #0]
 80137a2:	079b      	lsls	r3, r3, #30
 80137a4:	f100 8103 	bmi.w	80139ae <_printf_float+0x44a>
 80137a8:	68e0      	ldr	r0, [r4, #12]
 80137aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80137ac:	4298      	cmp	r0, r3
 80137ae:	bfb8      	it	lt
 80137b0:	4618      	movlt	r0, r3
 80137b2:	e734      	b.n	801361e <_printf_float+0xba>
 80137b4:	2301      	movs	r3, #1
 80137b6:	4652      	mov	r2, sl
 80137b8:	4631      	mov	r1, r6
 80137ba:	4628      	mov	r0, r5
 80137bc:	47b8      	blx	r7
 80137be:	3001      	adds	r0, #1
 80137c0:	f43f af2b 	beq.w	801361a <_printf_float+0xb6>
 80137c4:	f109 0901 	add.w	r9, r9, #1
 80137c8:	e7e8      	b.n	801379c <_printf_float+0x238>
 80137ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	dc39      	bgt.n	8013844 <_printf_float+0x2e0>
 80137d0:	4a1b      	ldr	r2, [pc, #108]	@ (8013840 <_printf_float+0x2dc>)
 80137d2:	2301      	movs	r3, #1
 80137d4:	4631      	mov	r1, r6
 80137d6:	4628      	mov	r0, r5
 80137d8:	47b8      	blx	r7
 80137da:	3001      	adds	r0, #1
 80137dc:	f43f af1d 	beq.w	801361a <_printf_float+0xb6>
 80137e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80137e4:	ea59 0303 	orrs.w	r3, r9, r3
 80137e8:	d102      	bne.n	80137f0 <_printf_float+0x28c>
 80137ea:	6823      	ldr	r3, [r4, #0]
 80137ec:	07d9      	lsls	r1, r3, #31
 80137ee:	d5d7      	bpl.n	80137a0 <_printf_float+0x23c>
 80137f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80137f4:	4631      	mov	r1, r6
 80137f6:	4628      	mov	r0, r5
 80137f8:	47b8      	blx	r7
 80137fa:	3001      	adds	r0, #1
 80137fc:	f43f af0d 	beq.w	801361a <_printf_float+0xb6>
 8013800:	f04f 0a00 	mov.w	sl, #0
 8013804:	f104 0b1a 	add.w	fp, r4, #26
 8013808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801380a:	425b      	negs	r3, r3
 801380c:	4553      	cmp	r3, sl
 801380e:	dc01      	bgt.n	8013814 <_printf_float+0x2b0>
 8013810:	464b      	mov	r3, r9
 8013812:	e793      	b.n	801373c <_printf_float+0x1d8>
 8013814:	2301      	movs	r3, #1
 8013816:	465a      	mov	r2, fp
 8013818:	4631      	mov	r1, r6
 801381a:	4628      	mov	r0, r5
 801381c:	47b8      	blx	r7
 801381e:	3001      	adds	r0, #1
 8013820:	f43f aefb 	beq.w	801361a <_printf_float+0xb6>
 8013824:	f10a 0a01 	add.w	sl, sl, #1
 8013828:	e7ee      	b.n	8013808 <_printf_float+0x2a4>
 801382a:	bf00      	nop
 801382c:	7fefffff 	.word	0x7fefffff
 8013830:	0801a388 	.word	0x0801a388
 8013834:	0801a38c 	.word	0x0801a38c
 8013838:	0801a390 	.word	0x0801a390
 801383c:	0801a394 	.word	0x0801a394
 8013840:	0801a398 	.word	0x0801a398
 8013844:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013846:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801384a:	4553      	cmp	r3, sl
 801384c:	bfa8      	it	ge
 801384e:	4653      	movge	r3, sl
 8013850:	2b00      	cmp	r3, #0
 8013852:	4699      	mov	r9, r3
 8013854:	dc36      	bgt.n	80138c4 <_printf_float+0x360>
 8013856:	f04f 0b00 	mov.w	fp, #0
 801385a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801385e:	f104 021a 	add.w	r2, r4, #26
 8013862:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013864:	9306      	str	r3, [sp, #24]
 8013866:	eba3 0309 	sub.w	r3, r3, r9
 801386a:	455b      	cmp	r3, fp
 801386c:	dc31      	bgt.n	80138d2 <_printf_float+0x36e>
 801386e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013870:	459a      	cmp	sl, r3
 8013872:	dc3a      	bgt.n	80138ea <_printf_float+0x386>
 8013874:	6823      	ldr	r3, [r4, #0]
 8013876:	07da      	lsls	r2, r3, #31
 8013878:	d437      	bmi.n	80138ea <_printf_float+0x386>
 801387a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801387c:	ebaa 0903 	sub.w	r9, sl, r3
 8013880:	9b06      	ldr	r3, [sp, #24]
 8013882:	ebaa 0303 	sub.w	r3, sl, r3
 8013886:	4599      	cmp	r9, r3
 8013888:	bfa8      	it	ge
 801388a:	4699      	movge	r9, r3
 801388c:	f1b9 0f00 	cmp.w	r9, #0
 8013890:	dc33      	bgt.n	80138fa <_printf_float+0x396>
 8013892:	f04f 0800 	mov.w	r8, #0
 8013896:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801389a:	f104 0b1a 	add.w	fp, r4, #26
 801389e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80138a0:	ebaa 0303 	sub.w	r3, sl, r3
 80138a4:	eba3 0309 	sub.w	r3, r3, r9
 80138a8:	4543      	cmp	r3, r8
 80138aa:	f77f af79 	ble.w	80137a0 <_printf_float+0x23c>
 80138ae:	2301      	movs	r3, #1
 80138b0:	465a      	mov	r2, fp
 80138b2:	4631      	mov	r1, r6
 80138b4:	4628      	mov	r0, r5
 80138b6:	47b8      	blx	r7
 80138b8:	3001      	adds	r0, #1
 80138ba:	f43f aeae 	beq.w	801361a <_printf_float+0xb6>
 80138be:	f108 0801 	add.w	r8, r8, #1
 80138c2:	e7ec      	b.n	801389e <_printf_float+0x33a>
 80138c4:	4642      	mov	r2, r8
 80138c6:	4631      	mov	r1, r6
 80138c8:	4628      	mov	r0, r5
 80138ca:	47b8      	blx	r7
 80138cc:	3001      	adds	r0, #1
 80138ce:	d1c2      	bne.n	8013856 <_printf_float+0x2f2>
 80138d0:	e6a3      	b.n	801361a <_printf_float+0xb6>
 80138d2:	2301      	movs	r3, #1
 80138d4:	4631      	mov	r1, r6
 80138d6:	4628      	mov	r0, r5
 80138d8:	9206      	str	r2, [sp, #24]
 80138da:	47b8      	blx	r7
 80138dc:	3001      	adds	r0, #1
 80138de:	f43f ae9c 	beq.w	801361a <_printf_float+0xb6>
 80138e2:	9a06      	ldr	r2, [sp, #24]
 80138e4:	f10b 0b01 	add.w	fp, fp, #1
 80138e8:	e7bb      	b.n	8013862 <_printf_float+0x2fe>
 80138ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80138ee:	4631      	mov	r1, r6
 80138f0:	4628      	mov	r0, r5
 80138f2:	47b8      	blx	r7
 80138f4:	3001      	adds	r0, #1
 80138f6:	d1c0      	bne.n	801387a <_printf_float+0x316>
 80138f8:	e68f      	b.n	801361a <_printf_float+0xb6>
 80138fa:	9a06      	ldr	r2, [sp, #24]
 80138fc:	464b      	mov	r3, r9
 80138fe:	4442      	add	r2, r8
 8013900:	4631      	mov	r1, r6
 8013902:	4628      	mov	r0, r5
 8013904:	47b8      	blx	r7
 8013906:	3001      	adds	r0, #1
 8013908:	d1c3      	bne.n	8013892 <_printf_float+0x32e>
 801390a:	e686      	b.n	801361a <_printf_float+0xb6>
 801390c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013910:	f1ba 0f01 	cmp.w	sl, #1
 8013914:	dc01      	bgt.n	801391a <_printf_float+0x3b6>
 8013916:	07db      	lsls	r3, r3, #31
 8013918:	d536      	bpl.n	8013988 <_printf_float+0x424>
 801391a:	2301      	movs	r3, #1
 801391c:	4642      	mov	r2, r8
 801391e:	4631      	mov	r1, r6
 8013920:	4628      	mov	r0, r5
 8013922:	47b8      	blx	r7
 8013924:	3001      	adds	r0, #1
 8013926:	f43f ae78 	beq.w	801361a <_printf_float+0xb6>
 801392a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801392e:	4631      	mov	r1, r6
 8013930:	4628      	mov	r0, r5
 8013932:	47b8      	blx	r7
 8013934:	3001      	adds	r0, #1
 8013936:	f43f ae70 	beq.w	801361a <_printf_float+0xb6>
 801393a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801393e:	2200      	movs	r2, #0
 8013940:	2300      	movs	r3, #0
 8013942:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013946:	f7ed f8df 	bl	8000b08 <__aeabi_dcmpeq>
 801394a:	b9c0      	cbnz	r0, 801397e <_printf_float+0x41a>
 801394c:	4653      	mov	r3, sl
 801394e:	f108 0201 	add.w	r2, r8, #1
 8013952:	4631      	mov	r1, r6
 8013954:	4628      	mov	r0, r5
 8013956:	47b8      	blx	r7
 8013958:	3001      	adds	r0, #1
 801395a:	d10c      	bne.n	8013976 <_printf_float+0x412>
 801395c:	e65d      	b.n	801361a <_printf_float+0xb6>
 801395e:	2301      	movs	r3, #1
 8013960:	465a      	mov	r2, fp
 8013962:	4631      	mov	r1, r6
 8013964:	4628      	mov	r0, r5
 8013966:	47b8      	blx	r7
 8013968:	3001      	adds	r0, #1
 801396a:	f43f ae56 	beq.w	801361a <_printf_float+0xb6>
 801396e:	f108 0801 	add.w	r8, r8, #1
 8013972:	45d0      	cmp	r8, sl
 8013974:	dbf3      	blt.n	801395e <_printf_float+0x3fa>
 8013976:	464b      	mov	r3, r9
 8013978:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801397c:	e6df      	b.n	801373e <_printf_float+0x1da>
 801397e:	f04f 0800 	mov.w	r8, #0
 8013982:	f104 0b1a 	add.w	fp, r4, #26
 8013986:	e7f4      	b.n	8013972 <_printf_float+0x40e>
 8013988:	2301      	movs	r3, #1
 801398a:	4642      	mov	r2, r8
 801398c:	e7e1      	b.n	8013952 <_printf_float+0x3ee>
 801398e:	2301      	movs	r3, #1
 8013990:	464a      	mov	r2, r9
 8013992:	4631      	mov	r1, r6
 8013994:	4628      	mov	r0, r5
 8013996:	47b8      	blx	r7
 8013998:	3001      	adds	r0, #1
 801399a:	f43f ae3e 	beq.w	801361a <_printf_float+0xb6>
 801399e:	f108 0801 	add.w	r8, r8, #1
 80139a2:	68e3      	ldr	r3, [r4, #12]
 80139a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80139a6:	1a5b      	subs	r3, r3, r1
 80139a8:	4543      	cmp	r3, r8
 80139aa:	dcf0      	bgt.n	801398e <_printf_float+0x42a>
 80139ac:	e6fc      	b.n	80137a8 <_printf_float+0x244>
 80139ae:	f04f 0800 	mov.w	r8, #0
 80139b2:	f104 0919 	add.w	r9, r4, #25
 80139b6:	e7f4      	b.n	80139a2 <_printf_float+0x43e>

080139b8 <_printf_common>:
 80139b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139bc:	4616      	mov	r6, r2
 80139be:	4698      	mov	r8, r3
 80139c0:	688a      	ldr	r2, [r1, #8]
 80139c2:	690b      	ldr	r3, [r1, #16]
 80139c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80139c8:	4293      	cmp	r3, r2
 80139ca:	bfb8      	it	lt
 80139cc:	4613      	movlt	r3, r2
 80139ce:	6033      	str	r3, [r6, #0]
 80139d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80139d4:	4607      	mov	r7, r0
 80139d6:	460c      	mov	r4, r1
 80139d8:	b10a      	cbz	r2, 80139de <_printf_common+0x26>
 80139da:	3301      	adds	r3, #1
 80139dc:	6033      	str	r3, [r6, #0]
 80139de:	6823      	ldr	r3, [r4, #0]
 80139e0:	0699      	lsls	r1, r3, #26
 80139e2:	bf42      	ittt	mi
 80139e4:	6833      	ldrmi	r3, [r6, #0]
 80139e6:	3302      	addmi	r3, #2
 80139e8:	6033      	strmi	r3, [r6, #0]
 80139ea:	6825      	ldr	r5, [r4, #0]
 80139ec:	f015 0506 	ands.w	r5, r5, #6
 80139f0:	d106      	bne.n	8013a00 <_printf_common+0x48>
 80139f2:	f104 0a19 	add.w	sl, r4, #25
 80139f6:	68e3      	ldr	r3, [r4, #12]
 80139f8:	6832      	ldr	r2, [r6, #0]
 80139fa:	1a9b      	subs	r3, r3, r2
 80139fc:	42ab      	cmp	r3, r5
 80139fe:	dc26      	bgt.n	8013a4e <_printf_common+0x96>
 8013a00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013a04:	6822      	ldr	r2, [r4, #0]
 8013a06:	3b00      	subs	r3, #0
 8013a08:	bf18      	it	ne
 8013a0a:	2301      	movne	r3, #1
 8013a0c:	0692      	lsls	r2, r2, #26
 8013a0e:	d42b      	bmi.n	8013a68 <_printf_common+0xb0>
 8013a10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013a14:	4641      	mov	r1, r8
 8013a16:	4638      	mov	r0, r7
 8013a18:	47c8      	blx	r9
 8013a1a:	3001      	adds	r0, #1
 8013a1c:	d01e      	beq.n	8013a5c <_printf_common+0xa4>
 8013a1e:	6823      	ldr	r3, [r4, #0]
 8013a20:	6922      	ldr	r2, [r4, #16]
 8013a22:	f003 0306 	and.w	r3, r3, #6
 8013a26:	2b04      	cmp	r3, #4
 8013a28:	bf02      	ittt	eq
 8013a2a:	68e5      	ldreq	r5, [r4, #12]
 8013a2c:	6833      	ldreq	r3, [r6, #0]
 8013a2e:	1aed      	subeq	r5, r5, r3
 8013a30:	68a3      	ldr	r3, [r4, #8]
 8013a32:	bf0c      	ite	eq
 8013a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013a38:	2500      	movne	r5, #0
 8013a3a:	4293      	cmp	r3, r2
 8013a3c:	bfc4      	itt	gt
 8013a3e:	1a9b      	subgt	r3, r3, r2
 8013a40:	18ed      	addgt	r5, r5, r3
 8013a42:	2600      	movs	r6, #0
 8013a44:	341a      	adds	r4, #26
 8013a46:	42b5      	cmp	r5, r6
 8013a48:	d11a      	bne.n	8013a80 <_printf_common+0xc8>
 8013a4a:	2000      	movs	r0, #0
 8013a4c:	e008      	b.n	8013a60 <_printf_common+0xa8>
 8013a4e:	2301      	movs	r3, #1
 8013a50:	4652      	mov	r2, sl
 8013a52:	4641      	mov	r1, r8
 8013a54:	4638      	mov	r0, r7
 8013a56:	47c8      	blx	r9
 8013a58:	3001      	adds	r0, #1
 8013a5a:	d103      	bne.n	8013a64 <_printf_common+0xac>
 8013a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8013a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a64:	3501      	adds	r5, #1
 8013a66:	e7c6      	b.n	80139f6 <_printf_common+0x3e>
 8013a68:	18e1      	adds	r1, r4, r3
 8013a6a:	1c5a      	adds	r2, r3, #1
 8013a6c:	2030      	movs	r0, #48	@ 0x30
 8013a6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013a72:	4422      	add	r2, r4
 8013a74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013a78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013a7c:	3302      	adds	r3, #2
 8013a7e:	e7c7      	b.n	8013a10 <_printf_common+0x58>
 8013a80:	2301      	movs	r3, #1
 8013a82:	4622      	mov	r2, r4
 8013a84:	4641      	mov	r1, r8
 8013a86:	4638      	mov	r0, r7
 8013a88:	47c8      	blx	r9
 8013a8a:	3001      	adds	r0, #1
 8013a8c:	d0e6      	beq.n	8013a5c <_printf_common+0xa4>
 8013a8e:	3601      	adds	r6, #1
 8013a90:	e7d9      	b.n	8013a46 <_printf_common+0x8e>
	...

08013a94 <_printf_i>:
 8013a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013a98:	7e0f      	ldrb	r7, [r1, #24]
 8013a9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013a9c:	2f78      	cmp	r7, #120	@ 0x78
 8013a9e:	4691      	mov	r9, r2
 8013aa0:	4680      	mov	r8, r0
 8013aa2:	460c      	mov	r4, r1
 8013aa4:	469a      	mov	sl, r3
 8013aa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013aaa:	d807      	bhi.n	8013abc <_printf_i+0x28>
 8013aac:	2f62      	cmp	r7, #98	@ 0x62
 8013aae:	d80a      	bhi.n	8013ac6 <_printf_i+0x32>
 8013ab0:	2f00      	cmp	r7, #0
 8013ab2:	f000 80d2 	beq.w	8013c5a <_printf_i+0x1c6>
 8013ab6:	2f58      	cmp	r7, #88	@ 0x58
 8013ab8:	f000 80b9 	beq.w	8013c2e <_printf_i+0x19a>
 8013abc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013ac0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013ac4:	e03a      	b.n	8013b3c <_printf_i+0xa8>
 8013ac6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013aca:	2b15      	cmp	r3, #21
 8013acc:	d8f6      	bhi.n	8013abc <_printf_i+0x28>
 8013ace:	a101      	add	r1, pc, #4	@ (adr r1, 8013ad4 <_printf_i+0x40>)
 8013ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013ad4:	08013b2d 	.word	0x08013b2d
 8013ad8:	08013b41 	.word	0x08013b41
 8013adc:	08013abd 	.word	0x08013abd
 8013ae0:	08013abd 	.word	0x08013abd
 8013ae4:	08013abd 	.word	0x08013abd
 8013ae8:	08013abd 	.word	0x08013abd
 8013aec:	08013b41 	.word	0x08013b41
 8013af0:	08013abd 	.word	0x08013abd
 8013af4:	08013abd 	.word	0x08013abd
 8013af8:	08013abd 	.word	0x08013abd
 8013afc:	08013abd 	.word	0x08013abd
 8013b00:	08013c41 	.word	0x08013c41
 8013b04:	08013b6b 	.word	0x08013b6b
 8013b08:	08013bfb 	.word	0x08013bfb
 8013b0c:	08013abd 	.word	0x08013abd
 8013b10:	08013abd 	.word	0x08013abd
 8013b14:	08013c63 	.word	0x08013c63
 8013b18:	08013abd 	.word	0x08013abd
 8013b1c:	08013b6b 	.word	0x08013b6b
 8013b20:	08013abd 	.word	0x08013abd
 8013b24:	08013abd 	.word	0x08013abd
 8013b28:	08013c03 	.word	0x08013c03
 8013b2c:	6833      	ldr	r3, [r6, #0]
 8013b2e:	1d1a      	adds	r2, r3, #4
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	6032      	str	r2, [r6, #0]
 8013b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013b38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	e09d      	b.n	8013c7c <_printf_i+0x1e8>
 8013b40:	6833      	ldr	r3, [r6, #0]
 8013b42:	6820      	ldr	r0, [r4, #0]
 8013b44:	1d19      	adds	r1, r3, #4
 8013b46:	6031      	str	r1, [r6, #0]
 8013b48:	0606      	lsls	r6, r0, #24
 8013b4a:	d501      	bpl.n	8013b50 <_printf_i+0xbc>
 8013b4c:	681d      	ldr	r5, [r3, #0]
 8013b4e:	e003      	b.n	8013b58 <_printf_i+0xc4>
 8013b50:	0645      	lsls	r5, r0, #25
 8013b52:	d5fb      	bpl.n	8013b4c <_printf_i+0xb8>
 8013b54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013b58:	2d00      	cmp	r5, #0
 8013b5a:	da03      	bge.n	8013b64 <_printf_i+0xd0>
 8013b5c:	232d      	movs	r3, #45	@ 0x2d
 8013b5e:	426d      	negs	r5, r5
 8013b60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013b64:	4859      	ldr	r0, [pc, #356]	@ (8013ccc <_printf_i+0x238>)
 8013b66:	230a      	movs	r3, #10
 8013b68:	e011      	b.n	8013b8e <_printf_i+0xfa>
 8013b6a:	6821      	ldr	r1, [r4, #0]
 8013b6c:	6833      	ldr	r3, [r6, #0]
 8013b6e:	0608      	lsls	r0, r1, #24
 8013b70:	f853 5b04 	ldr.w	r5, [r3], #4
 8013b74:	d402      	bmi.n	8013b7c <_printf_i+0xe8>
 8013b76:	0649      	lsls	r1, r1, #25
 8013b78:	bf48      	it	mi
 8013b7a:	b2ad      	uxthmi	r5, r5
 8013b7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8013b7e:	4853      	ldr	r0, [pc, #332]	@ (8013ccc <_printf_i+0x238>)
 8013b80:	6033      	str	r3, [r6, #0]
 8013b82:	bf14      	ite	ne
 8013b84:	230a      	movne	r3, #10
 8013b86:	2308      	moveq	r3, #8
 8013b88:	2100      	movs	r1, #0
 8013b8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013b8e:	6866      	ldr	r6, [r4, #4]
 8013b90:	60a6      	str	r6, [r4, #8]
 8013b92:	2e00      	cmp	r6, #0
 8013b94:	bfa2      	ittt	ge
 8013b96:	6821      	ldrge	r1, [r4, #0]
 8013b98:	f021 0104 	bicge.w	r1, r1, #4
 8013b9c:	6021      	strge	r1, [r4, #0]
 8013b9e:	b90d      	cbnz	r5, 8013ba4 <_printf_i+0x110>
 8013ba0:	2e00      	cmp	r6, #0
 8013ba2:	d04b      	beq.n	8013c3c <_printf_i+0x1a8>
 8013ba4:	4616      	mov	r6, r2
 8013ba6:	fbb5 f1f3 	udiv	r1, r5, r3
 8013baa:	fb03 5711 	mls	r7, r3, r1, r5
 8013bae:	5dc7      	ldrb	r7, [r0, r7]
 8013bb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013bb4:	462f      	mov	r7, r5
 8013bb6:	42bb      	cmp	r3, r7
 8013bb8:	460d      	mov	r5, r1
 8013bba:	d9f4      	bls.n	8013ba6 <_printf_i+0x112>
 8013bbc:	2b08      	cmp	r3, #8
 8013bbe:	d10b      	bne.n	8013bd8 <_printf_i+0x144>
 8013bc0:	6823      	ldr	r3, [r4, #0]
 8013bc2:	07df      	lsls	r7, r3, #31
 8013bc4:	d508      	bpl.n	8013bd8 <_printf_i+0x144>
 8013bc6:	6923      	ldr	r3, [r4, #16]
 8013bc8:	6861      	ldr	r1, [r4, #4]
 8013bca:	4299      	cmp	r1, r3
 8013bcc:	bfde      	ittt	le
 8013bce:	2330      	movle	r3, #48	@ 0x30
 8013bd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013bd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013bd8:	1b92      	subs	r2, r2, r6
 8013bda:	6122      	str	r2, [r4, #16]
 8013bdc:	f8cd a000 	str.w	sl, [sp]
 8013be0:	464b      	mov	r3, r9
 8013be2:	aa03      	add	r2, sp, #12
 8013be4:	4621      	mov	r1, r4
 8013be6:	4640      	mov	r0, r8
 8013be8:	f7ff fee6 	bl	80139b8 <_printf_common>
 8013bec:	3001      	adds	r0, #1
 8013bee:	d14a      	bne.n	8013c86 <_printf_i+0x1f2>
 8013bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8013bf4:	b004      	add	sp, #16
 8013bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bfa:	6823      	ldr	r3, [r4, #0]
 8013bfc:	f043 0320 	orr.w	r3, r3, #32
 8013c00:	6023      	str	r3, [r4, #0]
 8013c02:	4833      	ldr	r0, [pc, #204]	@ (8013cd0 <_printf_i+0x23c>)
 8013c04:	2778      	movs	r7, #120	@ 0x78
 8013c06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013c0a:	6823      	ldr	r3, [r4, #0]
 8013c0c:	6831      	ldr	r1, [r6, #0]
 8013c0e:	061f      	lsls	r7, r3, #24
 8013c10:	f851 5b04 	ldr.w	r5, [r1], #4
 8013c14:	d402      	bmi.n	8013c1c <_printf_i+0x188>
 8013c16:	065f      	lsls	r7, r3, #25
 8013c18:	bf48      	it	mi
 8013c1a:	b2ad      	uxthmi	r5, r5
 8013c1c:	6031      	str	r1, [r6, #0]
 8013c1e:	07d9      	lsls	r1, r3, #31
 8013c20:	bf44      	itt	mi
 8013c22:	f043 0320 	orrmi.w	r3, r3, #32
 8013c26:	6023      	strmi	r3, [r4, #0]
 8013c28:	b11d      	cbz	r5, 8013c32 <_printf_i+0x19e>
 8013c2a:	2310      	movs	r3, #16
 8013c2c:	e7ac      	b.n	8013b88 <_printf_i+0xf4>
 8013c2e:	4827      	ldr	r0, [pc, #156]	@ (8013ccc <_printf_i+0x238>)
 8013c30:	e7e9      	b.n	8013c06 <_printf_i+0x172>
 8013c32:	6823      	ldr	r3, [r4, #0]
 8013c34:	f023 0320 	bic.w	r3, r3, #32
 8013c38:	6023      	str	r3, [r4, #0]
 8013c3a:	e7f6      	b.n	8013c2a <_printf_i+0x196>
 8013c3c:	4616      	mov	r6, r2
 8013c3e:	e7bd      	b.n	8013bbc <_printf_i+0x128>
 8013c40:	6833      	ldr	r3, [r6, #0]
 8013c42:	6825      	ldr	r5, [r4, #0]
 8013c44:	6961      	ldr	r1, [r4, #20]
 8013c46:	1d18      	adds	r0, r3, #4
 8013c48:	6030      	str	r0, [r6, #0]
 8013c4a:	062e      	lsls	r6, r5, #24
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	d501      	bpl.n	8013c54 <_printf_i+0x1c0>
 8013c50:	6019      	str	r1, [r3, #0]
 8013c52:	e002      	b.n	8013c5a <_printf_i+0x1c6>
 8013c54:	0668      	lsls	r0, r5, #25
 8013c56:	d5fb      	bpl.n	8013c50 <_printf_i+0x1bc>
 8013c58:	8019      	strh	r1, [r3, #0]
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	6123      	str	r3, [r4, #16]
 8013c5e:	4616      	mov	r6, r2
 8013c60:	e7bc      	b.n	8013bdc <_printf_i+0x148>
 8013c62:	6833      	ldr	r3, [r6, #0]
 8013c64:	1d1a      	adds	r2, r3, #4
 8013c66:	6032      	str	r2, [r6, #0]
 8013c68:	681e      	ldr	r6, [r3, #0]
 8013c6a:	6862      	ldr	r2, [r4, #4]
 8013c6c:	2100      	movs	r1, #0
 8013c6e:	4630      	mov	r0, r6
 8013c70:	f7ec face 	bl	8000210 <memchr>
 8013c74:	b108      	cbz	r0, 8013c7a <_printf_i+0x1e6>
 8013c76:	1b80      	subs	r0, r0, r6
 8013c78:	6060      	str	r0, [r4, #4]
 8013c7a:	6863      	ldr	r3, [r4, #4]
 8013c7c:	6123      	str	r3, [r4, #16]
 8013c7e:	2300      	movs	r3, #0
 8013c80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c84:	e7aa      	b.n	8013bdc <_printf_i+0x148>
 8013c86:	6923      	ldr	r3, [r4, #16]
 8013c88:	4632      	mov	r2, r6
 8013c8a:	4649      	mov	r1, r9
 8013c8c:	4640      	mov	r0, r8
 8013c8e:	47d0      	blx	sl
 8013c90:	3001      	adds	r0, #1
 8013c92:	d0ad      	beq.n	8013bf0 <_printf_i+0x15c>
 8013c94:	6823      	ldr	r3, [r4, #0]
 8013c96:	079b      	lsls	r3, r3, #30
 8013c98:	d413      	bmi.n	8013cc2 <_printf_i+0x22e>
 8013c9a:	68e0      	ldr	r0, [r4, #12]
 8013c9c:	9b03      	ldr	r3, [sp, #12]
 8013c9e:	4298      	cmp	r0, r3
 8013ca0:	bfb8      	it	lt
 8013ca2:	4618      	movlt	r0, r3
 8013ca4:	e7a6      	b.n	8013bf4 <_printf_i+0x160>
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	4632      	mov	r2, r6
 8013caa:	4649      	mov	r1, r9
 8013cac:	4640      	mov	r0, r8
 8013cae:	47d0      	blx	sl
 8013cb0:	3001      	adds	r0, #1
 8013cb2:	d09d      	beq.n	8013bf0 <_printf_i+0x15c>
 8013cb4:	3501      	adds	r5, #1
 8013cb6:	68e3      	ldr	r3, [r4, #12]
 8013cb8:	9903      	ldr	r1, [sp, #12]
 8013cba:	1a5b      	subs	r3, r3, r1
 8013cbc:	42ab      	cmp	r3, r5
 8013cbe:	dcf2      	bgt.n	8013ca6 <_printf_i+0x212>
 8013cc0:	e7eb      	b.n	8013c9a <_printf_i+0x206>
 8013cc2:	2500      	movs	r5, #0
 8013cc4:	f104 0619 	add.w	r6, r4, #25
 8013cc8:	e7f5      	b.n	8013cb6 <_printf_i+0x222>
 8013cca:	bf00      	nop
 8013ccc:	0801a39a 	.word	0x0801a39a
 8013cd0:	0801a3ab 	.word	0x0801a3ab

08013cd4 <std>:
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	b510      	push	{r4, lr}
 8013cd8:	4604      	mov	r4, r0
 8013cda:	e9c0 3300 	strd	r3, r3, [r0]
 8013cde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013ce2:	6083      	str	r3, [r0, #8]
 8013ce4:	8181      	strh	r1, [r0, #12]
 8013ce6:	6643      	str	r3, [r0, #100]	@ 0x64
 8013ce8:	81c2      	strh	r2, [r0, #14]
 8013cea:	6183      	str	r3, [r0, #24]
 8013cec:	4619      	mov	r1, r3
 8013cee:	2208      	movs	r2, #8
 8013cf0:	305c      	adds	r0, #92	@ 0x5c
 8013cf2:	f000 fa4d 	bl	8014190 <memset>
 8013cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8013d2c <std+0x58>)
 8013cf8:	6263      	str	r3, [r4, #36]	@ 0x24
 8013cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8013d30 <std+0x5c>)
 8013cfc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8013d34 <std+0x60>)
 8013d00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013d02:	4b0d      	ldr	r3, [pc, #52]	@ (8013d38 <std+0x64>)
 8013d04:	6323      	str	r3, [r4, #48]	@ 0x30
 8013d06:	4b0d      	ldr	r3, [pc, #52]	@ (8013d3c <std+0x68>)
 8013d08:	6224      	str	r4, [r4, #32]
 8013d0a:	429c      	cmp	r4, r3
 8013d0c:	d006      	beq.n	8013d1c <std+0x48>
 8013d0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013d12:	4294      	cmp	r4, r2
 8013d14:	d002      	beq.n	8013d1c <std+0x48>
 8013d16:	33d0      	adds	r3, #208	@ 0xd0
 8013d18:	429c      	cmp	r4, r3
 8013d1a:	d105      	bne.n	8013d28 <std+0x54>
 8013d1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d24:	f000 bab0 	b.w	8014288 <__retarget_lock_init_recursive>
 8013d28:	bd10      	pop	{r4, pc}
 8013d2a:	bf00      	nop
 8013d2c:	08013fe1 	.word	0x08013fe1
 8013d30:	08014003 	.word	0x08014003
 8013d34:	0801403b 	.word	0x0801403b
 8013d38:	0801405f 	.word	0x0801405f
 8013d3c:	20006500 	.word	0x20006500

08013d40 <stdio_exit_handler>:
 8013d40:	4a02      	ldr	r2, [pc, #8]	@ (8013d4c <stdio_exit_handler+0xc>)
 8013d42:	4903      	ldr	r1, [pc, #12]	@ (8013d50 <stdio_exit_handler+0x10>)
 8013d44:	4803      	ldr	r0, [pc, #12]	@ (8013d54 <stdio_exit_handler+0x14>)
 8013d46:	f000 b869 	b.w	8013e1c <_fwalk_sglue>
 8013d4a:	bf00      	nop
 8013d4c:	20004f28 	.word	0x20004f28
 8013d50:	08015e69 	.word	0x08015e69
 8013d54:	20004f38 	.word	0x20004f38

08013d58 <cleanup_stdio>:
 8013d58:	6841      	ldr	r1, [r0, #4]
 8013d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8013d8c <cleanup_stdio+0x34>)
 8013d5c:	4299      	cmp	r1, r3
 8013d5e:	b510      	push	{r4, lr}
 8013d60:	4604      	mov	r4, r0
 8013d62:	d001      	beq.n	8013d68 <cleanup_stdio+0x10>
 8013d64:	f002 f880 	bl	8015e68 <_fflush_r>
 8013d68:	68a1      	ldr	r1, [r4, #8]
 8013d6a:	4b09      	ldr	r3, [pc, #36]	@ (8013d90 <cleanup_stdio+0x38>)
 8013d6c:	4299      	cmp	r1, r3
 8013d6e:	d002      	beq.n	8013d76 <cleanup_stdio+0x1e>
 8013d70:	4620      	mov	r0, r4
 8013d72:	f002 f879 	bl	8015e68 <_fflush_r>
 8013d76:	68e1      	ldr	r1, [r4, #12]
 8013d78:	4b06      	ldr	r3, [pc, #24]	@ (8013d94 <cleanup_stdio+0x3c>)
 8013d7a:	4299      	cmp	r1, r3
 8013d7c:	d004      	beq.n	8013d88 <cleanup_stdio+0x30>
 8013d7e:	4620      	mov	r0, r4
 8013d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d84:	f002 b870 	b.w	8015e68 <_fflush_r>
 8013d88:	bd10      	pop	{r4, pc}
 8013d8a:	bf00      	nop
 8013d8c:	20006500 	.word	0x20006500
 8013d90:	20006568 	.word	0x20006568
 8013d94:	200065d0 	.word	0x200065d0

08013d98 <global_stdio_init.part.0>:
 8013d98:	b510      	push	{r4, lr}
 8013d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8013dc8 <global_stdio_init.part.0+0x30>)
 8013d9c:	4c0b      	ldr	r4, [pc, #44]	@ (8013dcc <global_stdio_init.part.0+0x34>)
 8013d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8013dd0 <global_stdio_init.part.0+0x38>)
 8013da0:	601a      	str	r2, [r3, #0]
 8013da2:	4620      	mov	r0, r4
 8013da4:	2200      	movs	r2, #0
 8013da6:	2104      	movs	r1, #4
 8013da8:	f7ff ff94 	bl	8013cd4 <std>
 8013dac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013db0:	2201      	movs	r2, #1
 8013db2:	2109      	movs	r1, #9
 8013db4:	f7ff ff8e 	bl	8013cd4 <std>
 8013db8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013dbc:	2202      	movs	r2, #2
 8013dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dc2:	2112      	movs	r1, #18
 8013dc4:	f7ff bf86 	b.w	8013cd4 <std>
 8013dc8:	20006638 	.word	0x20006638
 8013dcc:	20006500 	.word	0x20006500
 8013dd0:	08013d41 	.word	0x08013d41

08013dd4 <__sfp_lock_acquire>:
 8013dd4:	4801      	ldr	r0, [pc, #4]	@ (8013ddc <__sfp_lock_acquire+0x8>)
 8013dd6:	f000 ba58 	b.w	801428a <__retarget_lock_acquire_recursive>
 8013dda:	bf00      	nop
 8013ddc:	20006641 	.word	0x20006641

08013de0 <__sfp_lock_release>:
 8013de0:	4801      	ldr	r0, [pc, #4]	@ (8013de8 <__sfp_lock_release+0x8>)
 8013de2:	f000 ba53 	b.w	801428c <__retarget_lock_release_recursive>
 8013de6:	bf00      	nop
 8013de8:	20006641 	.word	0x20006641

08013dec <__sinit>:
 8013dec:	b510      	push	{r4, lr}
 8013dee:	4604      	mov	r4, r0
 8013df0:	f7ff fff0 	bl	8013dd4 <__sfp_lock_acquire>
 8013df4:	6a23      	ldr	r3, [r4, #32]
 8013df6:	b11b      	cbz	r3, 8013e00 <__sinit+0x14>
 8013df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dfc:	f7ff bff0 	b.w	8013de0 <__sfp_lock_release>
 8013e00:	4b04      	ldr	r3, [pc, #16]	@ (8013e14 <__sinit+0x28>)
 8013e02:	6223      	str	r3, [r4, #32]
 8013e04:	4b04      	ldr	r3, [pc, #16]	@ (8013e18 <__sinit+0x2c>)
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d1f5      	bne.n	8013df8 <__sinit+0xc>
 8013e0c:	f7ff ffc4 	bl	8013d98 <global_stdio_init.part.0>
 8013e10:	e7f2      	b.n	8013df8 <__sinit+0xc>
 8013e12:	bf00      	nop
 8013e14:	08013d59 	.word	0x08013d59
 8013e18:	20006638 	.word	0x20006638

08013e1c <_fwalk_sglue>:
 8013e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e20:	4607      	mov	r7, r0
 8013e22:	4688      	mov	r8, r1
 8013e24:	4614      	mov	r4, r2
 8013e26:	2600      	movs	r6, #0
 8013e28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013e2c:	f1b9 0901 	subs.w	r9, r9, #1
 8013e30:	d505      	bpl.n	8013e3e <_fwalk_sglue+0x22>
 8013e32:	6824      	ldr	r4, [r4, #0]
 8013e34:	2c00      	cmp	r4, #0
 8013e36:	d1f7      	bne.n	8013e28 <_fwalk_sglue+0xc>
 8013e38:	4630      	mov	r0, r6
 8013e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e3e:	89ab      	ldrh	r3, [r5, #12]
 8013e40:	2b01      	cmp	r3, #1
 8013e42:	d907      	bls.n	8013e54 <_fwalk_sglue+0x38>
 8013e44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e48:	3301      	adds	r3, #1
 8013e4a:	d003      	beq.n	8013e54 <_fwalk_sglue+0x38>
 8013e4c:	4629      	mov	r1, r5
 8013e4e:	4638      	mov	r0, r7
 8013e50:	47c0      	blx	r8
 8013e52:	4306      	orrs	r6, r0
 8013e54:	3568      	adds	r5, #104	@ 0x68
 8013e56:	e7e9      	b.n	8013e2c <_fwalk_sglue+0x10>

08013e58 <iprintf>:
 8013e58:	b40f      	push	{r0, r1, r2, r3}
 8013e5a:	b507      	push	{r0, r1, r2, lr}
 8013e5c:	4906      	ldr	r1, [pc, #24]	@ (8013e78 <iprintf+0x20>)
 8013e5e:	ab04      	add	r3, sp, #16
 8013e60:	6808      	ldr	r0, [r1, #0]
 8013e62:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e66:	6881      	ldr	r1, [r0, #8]
 8013e68:	9301      	str	r3, [sp, #4]
 8013e6a:	f001 fe61 	bl	8015b30 <_vfiprintf_r>
 8013e6e:	b003      	add	sp, #12
 8013e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8013e74:	b004      	add	sp, #16
 8013e76:	4770      	bx	lr
 8013e78:	20004f34 	.word	0x20004f34

08013e7c <_puts_r>:
 8013e7c:	6a03      	ldr	r3, [r0, #32]
 8013e7e:	b570      	push	{r4, r5, r6, lr}
 8013e80:	6884      	ldr	r4, [r0, #8]
 8013e82:	4605      	mov	r5, r0
 8013e84:	460e      	mov	r6, r1
 8013e86:	b90b      	cbnz	r3, 8013e8c <_puts_r+0x10>
 8013e88:	f7ff ffb0 	bl	8013dec <__sinit>
 8013e8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013e8e:	07db      	lsls	r3, r3, #31
 8013e90:	d405      	bmi.n	8013e9e <_puts_r+0x22>
 8013e92:	89a3      	ldrh	r3, [r4, #12]
 8013e94:	0598      	lsls	r0, r3, #22
 8013e96:	d402      	bmi.n	8013e9e <_puts_r+0x22>
 8013e98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013e9a:	f000 f9f6 	bl	801428a <__retarget_lock_acquire_recursive>
 8013e9e:	89a3      	ldrh	r3, [r4, #12]
 8013ea0:	0719      	lsls	r1, r3, #28
 8013ea2:	d502      	bpl.n	8013eaa <_puts_r+0x2e>
 8013ea4:	6923      	ldr	r3, [r4, #16]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d135      	bne.n	8013f16 <_puts_r+0x9a>
 8013eaa:	4621      	mov	r1, r4
 8013eac:	4628      	mov	r0, r5
 8013eae:	f000 f919 	bl	80140e4 <__swsetup_r>
 8013eb2:	b380      	cbz	r0, 8013f16 <_puts_r+0x9a>
 8013eb4:	f04f 35ff 	mov.w	r5, #4294967295
 8013eb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013eba:	07da      	lsls	r2, r3, #31
 8013ebc:	d405      	bmi.n	8013eca <_puts_r+0x4e>
 8013ebe:	89a3      	ldrh	r3, [r4, #12]
 8013ec0:	059b      	lsls	r3, r3, #22
 8013ec2:	d402      	bmi.n	8013eca <_puts_r+0x4e>
 8013ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013ec6:	f000 f9e1 	bl	801428c <__retarget_lock_release_recursive>
 8013eca:	4628      	mov	r0, r5
 8013ecc:	bd70      	pop	{r4, r5, r6, pc}
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	da04      	bge.n	8013edc <_puts_r+0x60>
 8013ed2:	69a2      	ldr	r2, [r4, #24]
 8013ed4:	429a      	cmp	r2, r3
 8013ed6:	dc17      	bgt.n	8013f08 <_puts_r+0x8c>
 8013ed8:	290a      	cmp	r1, #10
 8013eda:	d015      	beq.n	8013f08 <_puts_r+0x8c>
 8013edc:	6823      	ldr	r3, [r4, #0]
 8013ede:	1c5a      	adds	r2, r3, #1
 8013ee0:	6022      	str	r2, [r4, #0]
 8013ee2:	7019      	strb	r1, [r3, #0]
 8013ee4:	68a3      	ldr	r3, [r4, #8]
 8013ee6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013eea:	3b01      	subs	r3, #1
 8013eec:	60a3      	str	r3, [r4, #8]
 8013eee:	2900      	cmp	r1, #0
 8013ef0:	d1ed      	bne.n	8013ece <_puts_r+0x52>
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	da11      	bge.n	8013f1a <_puts_r+0x9e>
 8013ef6:	4622      	mov	r2, r4
 8013ef8:	210a      	movs	r1, #10
 8013efa:	4628      	mov	r0, r5
 8013efc:	f000 f8b3 	bl	8014066 <__swbuf_r>
 8013f00:	3001      	adds	r0, #1
 8013f02:	d0d7      	beq.n	8013eb4 <_puts_r+0x38>
 8013f04:	250a      	movs	r5, #10
 8013f06:	e7d7      	b.n	8013eb8 <_puts_r+0x3c>
 8013f08:	4622      	mov	r2, r4
 8013f0a:	4628      	mov	r0, r5
 8013f0c:	f000 f8ab 	bl	8014066 <__swbuf_r>
 8013f10:	3001      	adds	r0, #1
 8013f12:	d1e7      	bne.n	8013ee4 <_puts_r+0x68>
 8013f14:	e7ce      	b.n	8013eb4 <_puts_r+0x38>
 8013f16:	3e01      	subs	r6, #1
 8013f18:	e7e4      	b.n	8013ee4 <_puts_r+0x68>
 8013f1a:	6823      	ldr	r3, [r4, #0]
 8013f1c:	1c5a      	adds	r2, r3, #1
 8013f1e:	6022      	str	r2, [r4, #0]
 8013f20:	220a      	movs	r2, #10
 8013f22:	701a      	strb	r2, [r3, #0]
 8013f24:	e7ee      	b.n	8013f04 <_puts_r+0x88>
	...

08013f28 <puts>:
 8013f28:	4b02      	ldr	r3, [pc, #8]	@ (8013f34 <puts+0xc>)
 8013f2a:	4601      	mov	r1, r0
 8013f2c:	6818      	ldr	r0, [r3, #0]
 8013f2e:	f7ff bfa5 	b.w	8013e7c <_puts_r>
 8013f32:	bf00      	nop
 8013f34:	20004f34 	.word	0x20004f34

08013f38 <sniprintf>:
 8013f38:	b40c      	push	{r2, r3}
 8013f3a:	b530      	push	{r4, r5, lr}
 8013f3c:	4b17      	ldr	r3, [pc, #92]	@ (8013f9c <sniprintf+0x64>)
 8013f3e:	1e0c      	subs	r4, r1, #0
 8013f40:	681d      	ldr	r5, [r3, #0]
 8013f42:	b09d      	sub	sp, #116	@ 0x74
 8013f44:	da08      	bge.n	8013f58 <sniprintf+0x20>
 8013f46:	238b      	movs	r3, #139	@ 0x8b
 8013f48:	602b      	str	r3, [r5, #0]
 8013f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8013f4e:	b01d      	add	sp, #116	@ 0x74
 8013f50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f54:	b002      	add	sp, #8
 8013f56:	4770      	bx	lr
 8013f58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8013f5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013f60:	bf14      	ite	ne
 8013f62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013f66:	4623      	moveq	r3, r4
 8013f68:	9304      	str	r3, [sp, #16]
 8013f6a:	9307      	str	r3, [sp, #28]
 8013f6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013f70:	9002      	str	r0, [sp, #8]
 8013f72:	9006      	str	r0, [sp, #24]
 8013f74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013f78:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8013f7a:	ab21      	add	r3, sp, #132	@ 0x84
 8013f7c:	a902      	add	r1, sp, #8
 8013f7e:	4628      	mov	r0, r5
 8013f80:	9301      	str	r3, [sp, #4]
 8013f82:	f001 fcaf 	bl	80158e4 <_svfiprintf_r>
 8013f86:	1c43      	adds	r3, r0, #1
 8013f88:	bfbc      	itt	lt
 8013f8a:	238b      	movlt	r3, #139	@ 0x8b
 8013f8c:	602b      	strlt	r3, [r5, #0]
 8013f8e:	2c00      	cmp	r4, #0
 8013f90:	d0dd      	beq.n	8013f4e <sniprintf+0x16>
 8013f92:	9b02      	ldr	r3, [sp, #8]
 8013f94:	2200      	movs	r2, #0
 8013f96:	701a      	strb	r2, [r3, #0]
 8013f98:	e7d9      	b.n	8013f4e <sniprintf+0x16>
 8013f9a:	bf00      	nop
 8013f9c:	20004f34 	.word	0x20004f34

08013fa0 <siprintf>:
 8013fa0:	b40e      	push	{r1, r2, r3}
 8013fa2:	b500      	push	{lr}
 8013fa4:	b09c      	sub	sp, #112	@ 0x70
 8013fa6:	ab1d      	add	r3, sp, #116	@ 0x74
 8013fa8:	9002      	str	r0, [sp, #8]
 8013faa:	9006      	str	r0, [sp, #24]
 8013fac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013fb0:	4809      	ldr	r0, [pc, #36]	@ (8013fd8 <siprintf+0x38>)
 8013fb2:	9107      	str	r1, [sp, #28]
 8013fb4:	9104      	str	r1, [sp, #16]
 8013fb6:	4909      	ldr	r1, [pc, #36]	@ (8013fdc <siprintf+0x3c>)
 8013fb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fbc:	9105      	str	r1, [sp, #20]
 8013fbe:	6800      	ldr	r0, [r0, #0]
 8013fc0:	9301      	str	r3, [sp, #4]
 8013fc2:	a902      	add	r1, sp, #8
 8013fc4:	f001 fc8e 	bl	80158e4 <_svfiprintf_r>
 8013fc8:	9b02      	ldr	r3, [sp, #8]
 8013fca:	2200      	movs	r2, #0
 8013fcc:	701a      	strb	r2, [r3, #0]
 8013fce:	b01c      	add	sp, #112	@ 0x70
 8013fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fd4:	b003      	add	sp, #12
 8013fd6:	4770      	bx	lr
 8013fd8:	20004f34 	.word	0x20004f34
 8013fdc:	ffff0208 	.word	0xffff0208

08013fe0 <__sread>:
 8013fe0:	b510      	push	{r4, lr}
 8013fe2:	460c      	mov	r4, r1
 8013fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fe8:	f000 f900 	bl	80141ec <_read_r>
 8013fec:	2800      	cmp	r0, #0
 8013fee:	bfab      	itete	ge
 8013ff0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8013ff4:	181b      	addge	r3, r3, r0
 8013ff6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013ffa:	bfac      	ite	ge
 8013ffc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013ffe:	81a3      	strhlt	r3, [r4, #12]
 8014000:	bd10      	pop	{r4, pc}

08014002 <__swrite>:
 8014002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014006:	461f      	mov	r7, r3
 8014008:	898b      	ldrh	r3, [r1, #12]
 801400a:	05db      	lsls	r3, r3, #23
 801400c:	4605      	mov	r5, r0
 801400e:	460c      	mov	r4, r1
 8014010:	4616      	mov	r6, r2
 8014012:	d505      	bpl.n	8014020 <__swrite+0x1e>
 8014014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014018:	2302      	movs	r3, #2
 801401a:	2200      	movs	r2, #0
 801401c:	f000 f8d4 	bl	80141c8 <_lseek_r>
 8014020:	89a3      	ldrh	r3, [r4, #12]
 8014022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014026:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801402a:	81a3      	strh	r3, [r4, #12]
 801402c:	4632      	mov	r2, r6
 801402e:	463b      	mov	r3, r7
 8014030:	4628      	mov	r0, r5
 8014032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014036:	f000 b8eb 	b.w	8014210 <_write_r>

0801403a <__sseek>:
 801403a:	b510      	push	{r4, lr}
 801403c:	460c      	mov	r4, r1
 801403e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014042:	f000 f8c1 	bl	80141c8 <_lseek_r>
 8014046:	1c43      	adds	r3, r0, #1
 8014048:	89a3      	ldrh	r3, [r4, #12]
 801404a:	bf15      	itete	ne
 801404c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801404e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014052:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014056:	81a3      	strheq	r3, [r4, #12]
 8014058:	bf18      	it	ne
 801405a:	81a3      	strhne	r3, [r4, #12]
 801405c:	bd10      	pop	{r4, pc}

0801405e <__sclose>:
 801405e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014062:	f000 b8a1 	b.w	80141a8 <_close_r>

08014066 <__swbuf_r>:
 8014066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014068:	460e      	mov	r6, r1
 801406a:	4614      	mov	r4, r2
 801406c:	4605      	mov	r5, r0
 801406e:	b118      	cbz	r0, 8014078 <__swbuf_r+0x12>
 8014070:	6a03      	ldr	r3, [r0, #32]
 8014072:	b90b      	cbnz	r3, 8014078 <__swbuf_r+0x12>
 8014074:	f7ff feba 	bl	8013dec <__sinit>
 8014078:	69a3      	ldr	r3, [r4, #24]
 801407a:	60a3      	str	r3, [r4, #8]
 801407c:	89a3      	ldrh	r3, [r4, #12]
 801407e:	071a      	lsls	r2, r3, #28
 8014080:	d501      	bpl.n	8014086 <__swbuf_r+0x20>
 8014082:	6923      	ldr	r3, [r4, #16]
 8014084:	b943      	cbnz	r3, 8014098 <__swbuf_r+0x32>
 8014086:	4621      	mov	r1, r4
 8014088:	4628      	mov	r0, r5
 801408a:	f000 f82b 	bl	80140e4 <__swsetup_r>
 801408e:	b118      	cbz	r0, 8014098 <__swbuf_r+0x32>
 8014090:	f04f 37ff 	mov.w	r7, #4294967295
 8014094:	4638      	mov	r0, r7
 8014096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014098:	6823      	ldr	r3, [r4, #0]
 801409a:	6922      	ldr	r2, [r4, #16]
 801409c:	1a98      	subs	r0, r3, r2
 801409e:	6963      	ldr	r3, [r4, #20]
 80140a0:	b2f6      	uxtb	r6, r6
 80140a2:	4283      	cmp	r3, r0
 80140a4:	4637      	mov	r7, r6
 80140a6:	dc05      	bgt.n	80140b4 <__swbuf_r+0x4e>
 80140a8:	4621      	mov	r1, r4
 80140aa:	4628      	mov	r0, r5
 80140ac:	f001 fedc 	bl	8015e68 <_fflush_r>
 80140b0:	2800      	cmp	r0, #0
 80140b2:	d1ed      	bne.n	8014090 <__swbuf_r+0x2a>
 80140b4:	68a3      	ldr	r3, [r4, #8]
 80140b6:	3b01      	subs	r3, #1
 80140b8:	60a3      	str	r3, [r4, #8]
 80140ba:	6823      	ldr	r3, [r4, #0]
 80140bc:	1c5a      	adds	r2, r3, #1
 80140be:	6022      	str	r2, [r4, #0]
 80140c0:	701e      	strb	r6, [r3, #0]
 80140c2:	6962      	ldr	r2, [r4, #20]
 80140c4:	1c43      	adds	r3, r0, #1
 80140c6:	429a      	cmp	r2, r3
 80140c8:	d004      	beq.n	80140d4 <__swbuf_r+0x6e>
 80140ca:	89a3      	ldrh	r3, [r4, #12]
 80140cc:	07db      	lsls	r3, r3, #31
 80140ce:	d5e1      	bpl.n	8014094 <__swbuf_r+0x2e>
 80140d0:	2e0a      	cmp	r6, #10
 80140d2:	d1df      	bne.n	8014094 <__swbuf_r+0x2e>
 80140d4:	4621      	mov	r1, r4
 80140d6:	4628      	mov	r0, r5
 80140d8:	f001 fec6 	bl	8015e68 <_fflush_r>
 80140dc:	2800      	cmp	r0, #0
 80140de:	d0d9      	beq.n	8014094 <__swbuf_r+0x2e>
 80140e0:	e7d6      	b.n	8014090 <__swbuf_r+0x2a>
	...

080140e4 <__swsetup_r>:
 80140e4:	b538      	push	{r3, r4, r5, lr}
 80140e6:	4b29      	ldr	r3, [pc, #164]	@ (801418c <__swsetup_r+0xa8>)
 80140e8:	4605      	mov	r5, r0
 80140ea:	6818      	ldr	r0, [r3, #0]
 80140ec:	460c      	mov	r4, r1
 80140ee:	b118      	cbz	r0, 80140f8 <__swsetup_r+0x14>
 80140f0:	6a03      	ldr	r3, [r0, #32]
 80140f2:	b90b      	cbnz	r3, 80140f8 <__swsetup_r+0x14>
 80140f4:	f7ff fe7a 	bl	8013dec <__sinit>
 80140f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140fc:	0719      	lsls	r1, r3, #28
 80140fe:	d422      	bmi.n	8014146 <__swsetup_r+0x62>
 8014100:	06da      	lsls	r2, r3, #27
 8014102:	d407      	bmi.n	8014114 <__swsetup_r+0x30>
 8014104:	2209      	movs	r2, #9
 8014106:	602a      	str	r2, [r5, #0]
 8014108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801410c:	81a3      	strh	r3, [r4, #12]
 801410e:	f04f 30ff 	mov.w	r0, #4294967295
 8014112:	e033      	b.n	801417c <__swsetup_r+0x98>
 8014114:	0758      	lsls	r0, r3, #29
 8014116:	d512      	bpl.n	801413e <__swsetup_r+0x5a>
 8014118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801411a:	b141      	cbz	r1, 801412e <__swsetup_r+0x4a>
 801411c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014120:	4299      	cmp	r1, r3
 8014122:	d002      	beq.n	801412a <__swsetup_r+0x46>
 8014124:	4628      	mov	r0, r5
 8014126:	f000 feff 	bl	8014f28 <_free_r>
 801412a:	2300      	movs	r3, #0
 801412c:	6363      	str	r3, [r4, #52]	@ 0x34
 801412e:	89a3      	ldrh	r3, [r4, #12]
 8014130:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014134:	81a3      	strh	r3, [r4, #12]
 8014136:	2300      	movs	r3, #0
 8014138:	6063      	str	r3, [r4, #4]
 801413a:	6923      	ldr	r3, [r4, #16]
 801413c:	6023      	str	r3, [r4, #0]
 801413e:	89a3      	ldrh	r3, [r4, #12]
 8014140:	f043 0308 	orr.w	r3, r3, #8
 8014144:	81a3      	strh	r3, [r4, #12]
 8014146:	6923      	ldr	r3, [r4, #16]
 8014148:	b94b      	cbnz	r3, 801415e <__swsetup_r+0x7a>
 801414a:	89a3      	ldrh	r3, [r4, #12]
 801414c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014154:	d003      	beq.n	801415e <__swsetup_r+0x7a>
 8014156:	4621      	mov	r1, r4
 8014158:	4628      	mov	r0, r5
 801415a:	f001 fed3 	bl	8015f04 <__smakebuf_r>
 801415e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014162:	f013 0201 	ands.w	r2, r3, #1
 8014166:	d00a      	beq.n	801417e <__swsetup_r+0x9a>
 8014168:	2200      	movs	r2, #0
 801416a:	60a2      	str	r2, [r4, #8]
 801416c:	6962      	ldr	r2, [r4, #20]
 801416e:	4252      	negs	r2, r2
 8014170:	61a2      	str	r2, [r4, #24]
 8014172:	6922      	ldr	r2, [r4, #16]
 8014174:	b942      	cbnz	r2, 8014188 <__swsetup_r+0xa4>
 8014176:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801417a:	d1c5      	bne.n	8014108 <__swsetup_r+0x24>
 801417c:	bd38      	pop	{r3, r4, r5, pc}
 801417e:	0799      	lsls	r1, r3, #30
 8014180:	bf58      	it	pl
 8014182:	6962      	ldrpl	r2, [r4, #20]
 8014184:	60a2      	str	r2, [r4, #8]
 8014186:	e7f4      	b.n	8014172 <__swsetup_r+0x8e>
 8014188:	2000      	movs	r0, #0
 801418a:	e7f7      	b.n	801417c <__swsetup_r+0x98>
 801418c:	20004f34 	.word	0x20004f34

08014190 <memset>:
 8014190:	4402      	add	r2, r0
 8014192:	4603      	mov	r3, r0
 8014194:	4293      	cmp	r3, r2
 8014196:	d100      	bne.n	801419a <memset+0xa>
 8014198:	4770      	bx	lr
 801419a:	f803 1b01 	strb.w	r1, [r3], #1
 801419e:	e7f9      	b.n	8014194 <memset+0x4>

080141a0 <_localeconv_r>:
 80141a0:	4800      	ldr	r0, [pc, #0]	@ (80141a4 <_localeconv_r+0x4>)
 80141a2:	4770      	bx	lr
 80141a4:	20005074 	.word	0x20005074

080141a8 <_close_r>:
 80141a8:	b538      	push	{r3, r4, r5, lr}
 80141aa:	4d06      	ldr	r5, [pc, #24]	@ (80141c4 <_close_r+0x1c>)
 80141ac:	2300      	movs	r3, #0
 80141ae:	4604      	mov	r4, r0
 80141b0:	4608      	mov	r0, r1
 80141b2:	602b      	str	r3, [r5, #0]
 80141b4:	f7f0 ffe2 	bl	800517c <_close>
 80141b8:	1c43      	adds	r3, r0, #1
 80141ba:	d102      	bne.n	80141c2 <_close_r+0x1a>
 80141bc:	682b      	ldr	r3, [r5, #0]
 80141be:	b103      	cbz	r3, 80141c2 <_close_r+0x1a>
 80141c0:	6023      	str	r3, [r4, #0]
 80141c2:	bd38      	pop	{r3, r4, r5, pc}
 80141c4:	2000663c 	.word	0x2000663c

080141c8 <_lseek_r>:
 80141c8:	b538      	push	{r3, r4, r5, lr}
 80141ca:	4d07      	ldr	r5, [pc, #28]	@ (80141e8 <_lseek_r+0x20>)
 80141cc:	4604      	mov	r4, r0
 80141ce:	4608      	mov	r0, r1
 80141d0:	4611      	mov	r1, r2
 80141d2:	2200      	movs	r2, #0
 80141d4:	602a      	str	r2, [r5, #0]
 80141d6:	461a      	mov	r2, r3
 80141d8:	f7f0 fff7 	bl	80051ca <_lseek>
 80141dc:	1c43      	adds	r3, r0, #1
 80141de:	d102      	bne.n	80141e6 <_lseek_r+0x1e>
 80141e0:	682b      	ldr	r3, [r5, #0]
 80141e2:	b103      	cbz	r3, 80141e6 <_lseek_r+0x1e>
 80141e4:	6023      	str	r3, [r4, #0]
 80141e6:	bd38      	pop	{r3, r4, r5, pc}
 80141e8:	2000663c 	.word	0x2000663c

080141ec <_read_r>:
 80141ec:	b538      	push	{r3, r4, r5, lr}
 80141ee:	4d07      	ldr	r5, [pc, #28]	@ (801420c <_read_r+0x20>)
 80141f0:	4604      	mov	r4, r0
 80141f2:	4608      	mov	r0, r1
 80141f4:	4611      	mov	r1, r2
 80141f6:	2200      	movs	r2, #0
 80141f8:	602a      	str	r2, [r5, #0]
 80141fa:	461a      	mov	r2, r3
 80141fc:	f7f0 ff85 	bl	800510a <_read>
 8014200:	1c43      	adds	r3, r0, #1
 8014202:	d102      	bne.n	801420a <_read_r+0x1e>
 8014204:	682b      	ldr	r3, [r5, #0]
 8014206:	b103      	cbz	r3, 801420a <_read_r+0x1e>
 8014208:	6023      	str	r3, [r4, #0]
 801420a:	bd38      	pop	{r3, r4, r5, pc}
 801420c:	2000663c 	.word	0x2000663c

08014210 <_write_r>:
 8014210:	b538      	push	{r3, r4, r5, lr}
 8014212:	4d07      	ldr	r5, [pc, #28]	@ (8014230 <_write_r+0x20>)
 8014214:	4604      	mov	r4, r0
 8014216:	4608      	mov	r0, r1
 8014218:	4611      	mov	r1, r2
 801421a:	2200      	movs	r2, #0
 801421c:	602a      	str	r2, [r5, #0]
 801421e:	461a      	mov	r2, r3
 8014220:	f7f0 ff90 	bl	8005144 <_write>
 8014224:	1c43      	adds	r3, r0, #1
 8014226:	d102      	bne.n	801422e <_write_r+0x1e>
 8014228:	682b      	ldr	r3, [r5, #0]
 801422a:	b103      	cbz	r3, 801422e <_write_r+0x1e>
 801422c:	6023      	str	r3, [r4, #0]
 801422e:	bd38      	pop	{r3, r4, r5, pc}
 8014230:	2000663c 	.word	0x2000663c

08014234 <__errno>:
 8014234:	4b01      	ldr	r3, [pc, #4]	@ (801423c <__errno+0x8>)
 8014236:	6818      	ldr	r0, [r3, #0]
 8014238:	4770      	bx	lr
 801423a:	bf00      	nop
 801423c:	20004f34 	.word	0x20004f34

08014240 <__libc_init_array>:
 8014240:	b570      	push	{r4, r5, r6, lr}
 8014242:	4d0d      	ldr	r5, [pc, #52]	@ (8014278 <__libc_init_array+0x38>)
 8014244:	4c0d      	ldr	r4, [pc, #52]	@ (801427c <__libc_init_array+0x3c>)
 8014246:	1b64      	subs	r4, r4, r5
 8014248:	10a4      	asrs	r4, r4, #2
 801424a:	2600      	movs	r6, #0
 801424c:	42a6      	cmp	r6, r4
 801424e:	d109      	bne.n	8014264 <__libc_init_array+0x24>
 8014250:	4d0b      	ldr	r5, [pc, #44]	@ (8014280 <__libc_init_array+0x40>)
 8014252:	4c0c      	ldr	r4, [pc, #48]	@ (8014284 <__libc_init_array+0x44>)
 8014254:	f001 ffd2 	bl	80161fc <_init>
 8014258:	1b64      	subs	r4, r4, r5
 801425a:	10a4      	asrs	r4, r4, #2
 801425c:	2600      	movs	r6, #0
 801425e:	42a6      	cmp	r6, r4
 8014260:	d105      	bne.n	801426e <__libc_init_array+0x2e>
 8014262:	bd70      	pop	{r4, r5, r6, pc}
 8014264:	f855 3b04 	ldr.w	r3, [r5], #4
 8014268:	4798      	blx	r3
 801426a:	3601      	adds	r6, #1
 801426c:	e7ee      	b.n	801424c <__libc_init_array+0xc>
 801426e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014272:	4798      	blx	r3
 8014274:	3601      	adds	r6, #1
 8014276:	e7f2      	b.n	801425e <__libc_init_array+0x1e>
 8014278:	0801a700 	.word	0x0801a700
 801427c:	0801a700 	.word	0x0801a700
 8014280:	0801a700 	.word	0x0801a700
 8014284:	0801a704 	.word	0x0801a704

08014288 <__retarget_lock_init_recursive>:
 8014288:	4770      	bx	lr

0801428a <__retarget_lock_acquire_recursive>:
 801428a:	4770      	bx	lr

0801428c <__retarget_lock_release_recursive>:
 801428c:	4770      	bx	lr

0801428e <quorem>:
 801428e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014292:	6903      	ldr	r3, [r0, #16]
 8014294:	690c      	ldr	r4, [r1, #16]
 8014296:	42a3      	cmp	r3, r4
 8014298:	4607      	mov	r7, r0
 801429a:	db7e      	blt.n	801439a <quorem+0x10c>
 801429c:	3c01      	subs	r4, #1
 801429e:	f101 0814 	add.w	r8, r1, #20
 80142a2:	00a3      	lsls	r3, r4, #2
 80142a4:	f100 0514 	add.w	r5, r0, #20
 80142a8:	9300      	str	r3, [sp, #0]
 80142aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80142ae:	9301      	str	r3, [sp, #4]
 80142b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80142b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80142b8:	3301      	adds	r3, #1
 80142ba:	429a      	cmp	r2, r3
 80142bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80142c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80142c4:	d32e      	bcc.n	8014324 <quorem+0x96>
 80142c6:	f04f 0a00 	mov.w	sl, #0
 80142ca:	46c4      	mov	ip, r8
 80142cc:	46ae      	mov	lr, r5
 80142ce:	46d3      	mov	fp, sl
 80142d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80142d4:	b298      	uxth	r0, r3
 80142d6:	fb06 a000 	mla	r0, r6, r0, sl
 80142da:	0c02      	lsrs	r2, r0, #16
 80142dc:	0c1b      	lsrs	r3, r3, #16
 80142de:	fb06 2303 	mla	r3, r6, r3, r2
 80142e2:	f8de 2000 	ldr.w	r2, [lr]
 80142e6:	b280      	uxth	r0, r0
 80142e8:	b292      	uxth	r2, r2
 80142ea:	1a12      	subs	r2, r2, r0
 80142ec:	445a      	add	r2, fp
 80142ee:	f8de 0000 	ldr.w	r0, [lr]
 80142f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80142fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014300:	b292      	uxth	r2, r2
 8014302:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014306:	45e1      	cmp	r9, ip
 8014308:	f84e 2b04 	str.w	r2, [lr], #4
 801430c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014310:	d2de      	bcs.n	80142d0 <quorem+0x42>
 8014312:	9b00      	ldr	r3, [sp, #0]
 8014314:	58eb      	ldr	r3, [r5, r3]
 8014316:	b92b      	cbnz	r3, 8014324 <quorem+0x96>
 8014318:	9b01      	ldr	r3, [sp, #4]
 801431a:	3b04      	subs	r3, #4
 801431c:	429d      	cmp	r5, r3
 801431e:	461a      	mov	r2, r3
 8014320:	d32f      	bcc.n	8014382 <quorem+0xf4>
 8014322:	613c      	str	r4, [r7, #16]
 8014324:	4638      	mov	r0, r7
 8014326:	f001 f979 	bl	801561c <__mcmp>
 801432a:	2800      	cmp	r0, #0
 801432c:	db25      	blt.n	801437a <quorem+0xec>
 801432e:	4629      	mov	r1, r5
 8014330:	2000      	movs	r0, #0
 8014332:	f858 2b04 	ldr.w	r2, [r8], #4
 8014336:	f8d1 c000 	ldr.w	ip, [r1]
 801433a:	fa1f fe82 	uxth.w	lr, r2
 801433e:	fa1f f38c 	uxth.w	r3, ip
 8014342:	eba3 030e 	sub.w	r3, r3, lr
 8014346:	4403      	add	r3, r0
 8014348:	0c12      	lsrs	r2, r2, #16
 801434a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801434e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014352:	b29b      	uxth	r3, r3
 8014354:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014358:	45c1      	cmp	r9, r8
 801435a:	f841 3b04 	str.w	r3, [r1], #4
 801435e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014362:	d2e6      	bcs.n	8014332 <quorem+0xa4>
 8014364:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014368:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801436c:	b922      	cbnz	r2, 8014378 <quorem+0xea>
 801436e:	3b04      	subs	r3, #4
 8014370:	429d      	cmp	r5, r3
 8014372:	461a      	mov	r2, r3
 8014374:	d30b      	bcc.n	801438e <quorem+0x100>
 8014376:	613c      	str	r4, [r7, #16]
 8014378:	3601      	adds	r6, #1
 801437a:	4630      	mov	r0, r6
 801437c:	b003      	add	sp, #12
 801437e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014382:	6812      	ldr	r2, [r2, #0]
 8014384:	3b04      	subs	r3, #4
 8014386:	2a00      	cmp	r2, #0
 8014388:	d1cb      	bne.n	8014322 <quorem+0x94>
 801438a:	3c01      	subs	r4, #1
 801438c:	e7c6      	b.n	801431c <quorem+0x8e>
 801438e:	6812      	ldr	r2, [r2, #0]
 8014390:	3b04      	subs	r3, #4
 8014392:	2a00      	cmp	r2, #0
 8014394:	d1ef      	bne.n	8014376 <quorem+0xe8>
 8014396:	3c01      	subs	r4, #1
 8014398:	e7ea      	b.n	8014370 <quorem+0xe2>
 801439a:	2000      	movs	r0, #0
 801439c:	e7ee      	b.n	801437c <quorem+0xee>
	...

080143a0 <_dtoa_r>:
 80143a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143a4:	69c7      	ldr	r7, [r0, #28]
 80143a6:	b099      	sub	sp, #100	@ 0x64
 80143a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80143ac:	ec55 4b10 	vmov	r4, r5, d0
 80143b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80143b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80143b4:	4683      	mov	fp, r0
 80143b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80143b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80143ba:	b97f      	cbnz	r7, 80143dc <_dtoa_r+0x3c>
 80143bc:	2010      	movs	r0, #16
 80143be:	f000 fdfd 	bl	8014fbc <malloc>
 80143c2:	4602      	mov	r2, r0
 80143c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80143c8:	b920      	cbnz	r0, 80143d4 <_dtoa_r+0x34>
 80143ca:	4ba7      	ldr	r3, [pc, #668]	@ (8014668 <_dtoa_r+0x2c8>)
 80143cc:	21ef      	movs	r1, #239	@ 0xef
 80143ce:	48a7      	ldr	r0, [pc, #668]	@ (801466c <_dtoa_r+0x2cc>)
 80143d0:	f001 fe2e 	bl	8016030 <__assert_func>
 80143d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80143d8:	6007      	str	r7, [r0, #0]
 80143da:	60c7      	str	r7, [r0, #12]
 80143dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80143e0:	6819      	ldr	r1, [r3, #0]
 80143e2:	b159      	cbz	r1, 80143fc <_dtoa_r+0x5c>
 80143e4:	685a      	ldr	r2, [r3, #4]
 80143e6:	604a      	str	r2, [r1, #4]
 80143e8:	2301      	movs	r3, #1
 80143ea:	4093      	lsls	r3, r2
 80143ec:	608b      	str	r3, [r1, #8]
 80143ee:	4658      	mov	r0, fp
 80143f0:	f000 feda 	bl	80151a8 <_Bfree>
 80143f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80143f8:	2200      	movs	r2, #0
 80143fa:	601a      	str	r2, [r3, #0]
 80143fc:	1e2b      	subs	r3, r5, #0
 80143fe:	bfb9      	ittee	lt
 8014400:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014404:	9303      	strlt	r3, [sp, #12]
 8014406:	2300      	movge	r3, #0
 8014408:	6033      	strge	r3, [r6, #0]
 801440a:	9f03      	ldr	r7, [sp, #12]
 801440c:	4b98      	ldr	r3, [pc, #608]	@ (8014670 <_dtoa_r+0x2d0>)
 801440e:	bfbc      	itt	lt
 8014410:	2201      	movlt	r2, #1
 8014412:	6032      	strlt	r2, [r6, #0]
 8014414:	43bb      	bics	r3, r7
 8014416:	d112      	bne.n	801443e <_dtoa_r+0x9e>
 8014418:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801441a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801441e:	6013      	str	r3, [r2, #0]
 8014420:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014424:	4323      	orrs	r3, r4
 8014426:	f000 854d 	beq.w	8014ec4 <_dtoa_r+0xb24>
 801442a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801442c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014684 <_dtoa_r+0x2e4>
 8014430:	2b00      	cmp	r3, #0
 8014432:	f000 854f 	beq.w	8014ed4 <_dtoa_r+0xb34>
 8014436:	f10a 0303 	add.w	r3, sl, #3
 801443a:	f000 bd49 	b.w	8014ed0 <_dtoa_r+0xb30>
 801443e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014442:	2200      	movs	r2, #0
 8014444:	ec51 0b17 	vmov	r0, r1, d7
 8014448:	2300      	movs	r3, #0
 801444a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801444e:	f7ec fb5b 	bl	8000b08 <__aeabi_dcmpeq>
 8014452:	4680      	mov	r8, r0
 8014454:	b158      	cbz	r0, 801446e <_dtoa_r+0xce>
 8014456:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014458:	2301      	movs	r3, #1
 801445a:	6013      	str	r3, [r2, #0]
 801445c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801445e:	b113      	cbz	r3, 8014466 <_dtoa_r+0xc6>
 8014460:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014462:	4b84      	ldr	r3, [pc, #528]	@ (8014674 <_dtoa_r+0x2d4>)
 8014464:	6013      	str	r3, [r2, #0]
 8014466:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014688 <_dtoa_r+0x2e8>
 801446a:	f000 bd33 	b.w	8014ed4 <_dtoa_r+0xb34>
 801446e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014472:	aa16      	add	r2, sp, #88	@ 0x58
 8014474:	a917      	add	r1, sp, #92	@ 0x5c
 8014476:	4658      	mov	r0, fp
 8014478:	f001 f980 	bl	801577c <__d2b>
 801447c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014480:	4681      	mov	r9, r0
 8014482:	2e00      	cmp	r6, #0
 8014484:	d077      	beq.n	8014576 <_dtoa_r+0x1d6>
 8014486:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014488:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801448c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014494:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014498:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801449c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80144a0:	4619      	mov	r1, r3
 80144a2:	2200      	movs	r2, #0
 80144a4:	4b74      	ldr	r3, [pc, #464]	@ (8014678 <_dtoa_r+0x2d8>)
 80144a6:	f7eb ff0f 	bl	80002c8 <__aeabi_dsub>
 80144aa:	a369      	add	r3, pc, #420	@ (adr r3, 8014650 <_dtoa_r+0x2b0>)
 80144ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b0:	f7ec f8c2 	bl	8000638 <__aeabi_dmul>
 80144b4:	a368      	add	r3, pc, #416	@ (adr r3, 8014658 <_dtoa_r+0x2b8>)
 80144b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ba:	f7eb ff07 	bl	80002cc <__adddf3>
 80144be:	4604      	mov	r4, r0
 80144c0:	4630      	mov	r0, r6
 80144c2:	460d      	mov	r5, r1
 80144c4:	f7ec f84e 	bl	8000564 <__aeabi_i2d>
 80144c8:	a365      	add	r3, pc, #404	@ (adr r3, 8014660 <_dtoa_r+0x2c0>)
 80144ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ce:	f7ec f8b3 	bl	8000638 <__aeabi_dmul>
 80144d2:	4602      	mov	r2, r0
 80144d4:	460b      	mov	r3, r1
 80144d6:	4620      	mov	r0, r4
 80144d8:	4629      	mov	r1, r5
 80144da:	f7eb fef7 	bl	80002cc <__adddf3>
 80144de:	4604      	mov	r4, r0
 80144e0:	460d      	mov	r5, r1
 80144e2:	f7ec fb59 	bl	8000b98 <__aeabi_d2iz>
 80144e6:	2200      	movs	r2, #0
 80144e8:	4607      	mov	r7, r0
 80144ea:	2300      	movs	r3, #0
 80144ec:	4620      	mov	r0, r4
 80144ee:	4629      	mov	r1, r5
 80144f0:	f7ec fb14 	bl	8000b1c <__aeabi_dcmplt>
 80144f4:	b140      	cbz	r0, 8014508 <_dtoa_r+0x168>
 80144f6:	4638      	mov	r0, r7
 80144f8:	f7ec f834 	bl	8000564 <__aeabi_i2d>
 80144fc:	4622      	mov	r2, r4
 80144fe:	462b      	mov	r3, r5
 8014500:	f7ec fb02 	bl	8000b08 <__aeabi_dcmpeq>
 8014504:	b900      	cbnz	r0, 8014508 <_dtoa_r+0x168>
 8014506:	3f01      	subs	r7, #1
 8014508:	2f16      	cmp	r7, #22
 801450a:	d851      	bhi.n	80145b0 <_dtoa_r+0x210>
 801450c:	4b5b      	ldr	r3, [pc, #364]	@ (801467c <_dtoa_r+0x2dc>)
 801450e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014516:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801451a:	f7ec faff 	bl	8000b1c <__aeabi_dcmplt>
 801451e:	2800      	cmp	r0, #0
 8014520:	d048      	beq.n	80145b4 <_dtoa_r+0x214>
 8014522:	3f01      	subs	r7, #1
 8014524:	2300      	movs	r3, #0
 8014526:	9312      	str	r3, [sp, #72]	@ 0x48
 8014528:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801452a:	1b9b      	subs	r3, r3, r6
 801452c:	1e5a      	subs	r2, r3, #1
 801452e:	bf44      	itt	mi
 8014530:	f1c3 0801 	rsbmi	r8, r3, #1
 8014534:	2300      	movmi	r3, #0
 8014536:	9208      	str	r2, [sp, #32]
 8014538:	bf54      	ite	pl
 801453a:	f04f 0800 	movpl.w	r8, #0
 801453e:	9308      	strmi	r3, [sp, #32]
 8014540:	2f00      	cmp	r7, #0
 8014542:	db39      	blt.n	80145b8 <_dtoa_r+0x218>
 8014544:	9b08      	ldr	r3, [sp, #32]
 8014546:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014548:	443b      	add	r3, r7
 801454a:	9308      	str	r3, [sp, #32]
 801454c:	2300      	movs	r3, #0
 801454e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014552:	2b09      	cmp	r3, #9
 8014554:	d864      	bhi.n	8014620 <_dtoa_r+0x280>
 8014556:	2b05      	cmp	r3, #5
 8014558:	bfc4      	itt	gt
 801455a:	3b04      	subgt	r3, #4
 801455c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801455e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014560:	f1a3 0302 	sub.w	r3, r3, #2
 8014564:	bfcc      	ite	gt
 8014566:	2400      	movgt	r4, #0
 8014568:	2401      	movle	r4, #1
 801456a:	2b03      	cmp	r3, #3
 801456c:	d863      	bhi.n	8014636 <_dtoa_r+0x296>
 801456e:	e8df f003 	tbb	[pc, r3]
 8014572:	372a      	.short	0x372a
 8014574:	5535      	.short	0x5535
 8014576:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801457a:	441e      	add	r6, r3
 801457c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014580:	2b20      	cmp	r3, #32
 8014582:	bfc1      	itttt	gt
 8014584:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014588:	409f      	lslgt	r7, r3
 801458a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801458e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014592:	bfd6      	itet	le
 8014594:	f1c3 0320 	rsble	r3, r3, #32
 8014598:	ea47 0003 	orrgt.w	r0, r7, r3
 801459c:	fa04 f003 	lslle.w	r0, r4, r3
 80145a0:	f7eb ffd0 	bl	8000544 <__aeabi_ui2d>
 80145a4:	2201      	movs	r2, #1
 80145a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80145aa:	3e01      	subs	r6, #1
 80145ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80145ae:	e777      	b.n	80144a0 <_dtoa_r+0x100>
 80145b0:	2301      	movs	r3, #1
 80145b2:	e7b8      	b.n	8014526 <_dtoa_r+0x186>
 80145b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80145b6:	e7b7      	b.n	8014528 <_dtoa_r+0x188>
 80145b8:	427b      	negs	r3, r7
 80145ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80145bc:	2300      	movs	r3, #0
 80145be:	eba8 0807 	sub.w	r8, r8, r7
 80145c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80145c4:	e7c4      	b.n	8014550 <_dtoa_r+0x1b0>
 80145c6:	2300      	movs	r3, #0
 80145c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80145ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	dc35      	bgt.n	801463c <_dtoa_r+0x29c>
 80145d0:	2301      	movs	r3, #1
 80145d2:	9300      	str	r3, [sp, #0]
 80145d4:	9307      	str	r3, [sp, #28]
 80145d6:	461a      	mov	r2, r3
 80145d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80145da:	e00b      	b.n	80145f4 <_dtoa_r+0x254>
 80145dc:	2301      	movs	r3, #1
 80145de:	e7f3      	b.n	80145c8 <_dtoa_r+0x228>
 80145e0:	2300      	movs	r3, #0
 80145e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80145e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80145e6:	18fb      	adds	r3, r7, r3
 80145e8:	9300      	str	r3, [sp, #0]
 80145ea:	3301      	adds	r3, #1
 80145ec:	2b01      	cmp	r3, #1
 80145ee:	9307      	str	r3, [sp, #28]
 80145f0:	bfb8      	it	lt
 80145f2:	2301      	movlt	r3, #1
 80145f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80145f8:	2100      	movs	r1, #0
 80145fa:	2204      	movs	r2, #4
 80145fc:	f102 0514 	add.w	r5, r2, #20
 8014600:	429d      	cmp	r5, r3
 8014602:	d91f      	bls.n	8014644 <_dtoa_r+0x2a4>
 8014604:	6041      	str	r1, [r0, #4]
 8014606:	4658      	mov	r0, fp
 8014608:	f000 fd8e 	bl	8015128 <_Balloc>
 801460c:	4682      	mov	sl, r0
 801460e:	2800      	cmp	r0, #0
 8014610:	d13c      	bne.n	801468c <_dtoa_r+0x2ec>
 8014612:	4b1b      	ldr	r3, [pc, #108]	@ (8014680 <_dtoa_r+0x2e0>)
 8014614:	4602      	mov	r2, r0
 8014616:	f240 11af 	movw	r1, #431	@ 0x1af
 801461a:	e6d8      	b.n	80143ce <_dtoa_r+0x2e>
 801461c:	2301      	movs	r3, #1
 801461e:	e7e0      	b.n	80145e2 <_dtoa_r+0x242>
 8014620:	2401      	movs	r4, #1
 8014622:	2300      	movs	r3, #0
 8014624:	9309      	str	r3, [sp, #36]	@ 0x24
 8014626:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014628:	f04f 33ff 	mov.w	r3, #4294967295
 801462c:	9300      	str	r3, [sp, #0]
 801462e:	9307      	str	r3, [sp, #28]
 8014630:	2200      	movs	r2, #0
 8014632:	2312      	movs	r3, #18
 8014634:	e7d0      	b.n	80145d8 <_dtoa_r+0x238>
 8014636:	2301      	movs	r3, #1
 8014638:	930b      	str	r3, [sp, #44]	@ 0x2c
 801463a:	e7f5      	b.n	8014628 <_dtoa_r+0x288>
 801463c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801463e:	9300      	str	r3, [sp, #0]
 8014640:	9307      	str	r3, [sp, #28]
 8014642:	e7d7      	b.n	80145f4 <_dtoa_r+0x254>
 8014644:	3101      	adds	r1, #1
 8014646:	0052      	lsls	r2, r2, #1
 8014648:	e7d8      	b.n	80145fc <_dtoa_r+0x25c>
 801464a:	bf00      	nop
 801464c:	f3af 8000 	nop.w
 8014650:	636f4361 	.word	0x636f4361
 8014654:	3fd287a7 	.word	0x3fd287a7
 8014658:	8b60c8b3 	.word	0x8b60c8b3
 801465c:	3fc68a28 	.word	0x3fc68a28
 8014660:	509f79fb 	.word	0x509f79fb
 8014664:	3fd34413 	.word	0x3fd34413
 8014668:	0801a3c9 	.word	0x0801a3c9
 801466c:	0801a3e0 	.word	0x0801a3e0
 8014670:	7ff00000 	.word	0x7ff00000
 8014674:	0801a399 	.word	0x0801a399
 8014678:	3ff80000 	.word	0x3ff80000
 801467c:	0801a4d8 	.word	0x0801a4d8
 8014680:	0801a438 	.word	0x0801a438
 8014684:	0801a3c5 	.word	0x0801a3c5
 8014688:	0801a398 	.word	0x0801a398
 801468c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014690:	6018      	str	r0, [r3, #0]
 8014692:	9b07      	ldr	r3, [sp, #28]
 8014694:	2b0e      	cmp	r3, #14
 8014696:	f200 80a4 	bhi.w	80147e2 <_dtoa_r+0x442>
 801469a:	2c00      	cmp	r4, #0
 801469c:	f000 80a1 	beq.w	80147e2 <_dtoa_r+0x442>
 80146a0:	2f00      	cmp	r7, #0
 80146a2:	dd33      	ble.n	801470c <_dtoa_r+0x36c>
 80146a4:	4bad      	ldr	r3, [pc, #692]	@ (801495c <_dtoa_r+0x5bc>)
 80146a6:	f007 020f 	and.w	r2, r7, #15
 80146aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80146ae:	ed93 7b00 	vldr	d7, [r3]
 80146b2:	05f8      	lsls	r0, r7, #23
 80146b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80146b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80146bc:	d516      	bpl.n	80146ec <_dtoa_r+0x34c>
 80146be:	4ba8      	ldr	r3, [pc, #672]	@ (8014960 <_dtoa_r+0x5c0>)
 80146c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80146c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80146c8:	f7ec f8e0 	bl	800088c <__aeabi_ddiv>
 80146cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80146d0:	f004 040f 	and.w	r4, r4, #15
 80146d4:	2603      	movs	r6, #3
 80146d6:	4da2      	ldr	r5, [pc, #648]	@ (8014960 <_dtoa_r+0x5c0>)
 80146d8:	b954      	cbnz	r4, 80146f0 <_dtoa_r+0x350>
 80146da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80146de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80146e2:	f7ec f8d3 	bl	800088c <__aeabi_ddiv>
 80146e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80146ea:	e028      	b.n	801473e <_dtoa_r+0x39e>
 80146ec:	2602      	movs	r6, #2
 80146ee:	e7f2      	b.n	80146d6 <_dtoa_r+0x336>
 80146f0:	07e1      	lsls	r1, r4, #31
 80146f2:	d508      	bpl.n	8014706 <_dtoa_r+0x366>
 80146f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80146f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80146fc:	f7eb ff9c 	bl	8000638 <__aeabi_dmul>
 8014700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014704:	3601      	adds	r6, #1
 8014706:	1064      	asrs	r4, r4, #1
 8014708:	3508      	adds	r5, #8
 801470a:	e7e5      	b.n	80146d8 <_dtoa_r+0x338>
 801470c:	f000 80d2 	beq.w	80148b4 <_dtoa_r+0x514>
 8014710:	427c      	negs	r4, r7
 8014712:	4b92      	ldr	r3, [pc, #584]	@ (801495c <_dtoa_r+0x5bc>)
 8014714:	4d92      	ldr	r5, [pc, #584]	@ (8014960 <_dtoa_r+0x5c0>)
 8014716:	f004 020f 	and.w	r2, r4, #15
 801471a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014722:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014726:	f7eb ff87 	bl	8000638 <__aeabi_dmul>
 801472a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801472e:	1124      	asrs	r4, r4, #4
 8014730:	2300      	movs	r3, #0
 8014732:	2602      	movs	r6, #2
 8014734:	2c00      	cmp	r4, #0
 8014736:	f040 80b2 	bne.w	801489e <_dtoa_r+0x4fe>
 801473a:	2b00      	cmp	r3, #0
 801473c:	d1d3      	bne.n	80146e6 <_dtoa_r+0x346>
 801473e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014740:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014744:	2b00      	cmp	r3, #0
 8014746:	f000 80b7 	beq.w	80148b8 <_dtoa_r+0x518>
 801474a:	4b86      	ldr	r3, [pc, #536]	@ (8014964 <_dtoa_r+0x5c4>)
 801474c:	2200      	movs	r2, #0
 801474e:	4620      	mov	r0, r4
 8014750:	4629      	mov	r1, r5
 8014752:	f7ec f9e3 	bl	8000b1c <__aeabi_dcmplt>
 8014756:	2800      	cmp	r0, #0
 8014758:	f000 80ae 	beq.w	80148b8 <_dtoa_r+0x518>
 801475c:	9b07      	ldr	r3, [sp, #28]
 801475e:	2b00      	cmp	r3, #0
 8014760:	f000 80aa 	beq.w	80148b8 <_dtoa_r+0x518>
 8014764:	9b00      	ldr	r3, [sp, #0]
 8014766:	2b00      	cmp	r3, #0
 8014768:	dd37      	ble.n	80147da <_dtoa_r+0x43a>
 801476a:	1e7b      	subs	r3, r7, #1
 801476c:	9304      	str	r3, [sp, #16]
 801476e:	4620      	mov	r0, r4
 8014770:	4b7d      	ldr	r3, [pc, #500]	@ (8014968 <_dtoa_r+0x5c8>)
 8014772:	2200      	movs	r2, #0
 8014774:	4629      	mov	r1, r5
 8014776:	f7eb ff5f 	bl	8000638 <__aeabi_dmul>
 801477a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801477e:	9c00      	ldr	r4, [sp, #0]
 8014780:	3601      	adds	r6, #1
 8014782:	4630      	mov	r0, r6
 8014784:	f7eb feee 	bl	8000564 <__aeabi_i2d>
 8014788:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801478c:	f7eb ff54 	bl	8000638 <__aeabi_dmul>
 8014790:	4b76      	ldr	r3, [pc, #472]	@ (801496c <_dtoa_r+0x5cc>)
 8014792:	2200      	movs	r2, #0
 8014794:	f7eb fd9a 	bl	80002cc <__adddf3>
 8014798:	4605      	mov	r5, r0
 801479a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801479e:	2c00      	cmp	r4, #0
 80147a0:	f040 808d 	bne.w	80148be <_dtoa_r+0x51e>
 80147a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147a8:	4b71      	ldr	r3, [pc, #452]	@ (8014970 <_dtoa_r+0x5d0>)
 80147aa:	2200      	movs	r2, #0
 80147ac:	f7eb fd8c 	bl	80002c8 <__aeabi_dsub>
 80147b0:	4602      	mov	r2, r0
 80147b2:	460b      	mov	r3, r1
 80147b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80147b8:	462a      	mov	r2, r5
 80147ba:	4633      	mov	r3, r6
 80147bc:	f7ec f9cc 	bl	8000b58 <__aeabi_dcmpgt>
 80147c0:	2800      	cmp	r0, #0
 80147c2:	f040 828b 	bne.w	8014cdc <_dtoa_r+0x93c>
 80147c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147ca:	462a      	mov	r2, r5
 80147cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80147d0:	f7ec f9a4 	bl	8000b1c <__aeabi_dcmplt>
 80147d4:	2800      	cmp	r0, #0
 80147d6:	f040 8128 	bne.w	8014a2a <_dtoa_r+0x68a>
 80147da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80147de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80147e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	f2c0 815a 	blt.w	8014a9e <_dtoa_r+0x6fe>
 80147ea:	2f0e      	cmp	r7, #14
 80147ec:	f300 8157 	bgt.w	8014a9e <_dtoa_r+0x6fe>
 80147f0:	4b5a      	ldr	r3, [pc, #360]	@ (801495c <_dtoa_r+0x5bc>)
 80147f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80147f6:	ed93 7b00 	vldr	d7, [r3]
 80147fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	ed8d 7b00 	vstr	d7, [sp]
 8014802:	da03      	bge.n	801480c <_dtoa_r+0x46c>
 8014804:	9b07      	ldr	r3, [sp, #28]
 8014806:	2b00      	cmp	r3, #0
 8014808:	f340 8101 	ble.w	8014a0e <_dtoa_r+0x66e>
 801480c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8014810:	4656      	mov	r6, sl
 8014812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014816:	4620      	mov	r0, r4
 8014818:	4629      	mov	r1, r5
 801481a:	f7ec f837 	bl	800088c <__aeabi_ddiv>
 801481e:	f7ec f9bb 	bl	8000b98 <__aeabi_d2iz>
 8014822:	4680      	mov	r8, r0
 8014824:	f7eb fe9e 	bl	8000564 <__aeabi_i2d>
 8014828:	e9dd 2300 	ldrd	r2, r3, [sp]
 801482c:	f7eb ff04 	bl	8000638 <__aeabi_dmul>
 8014830:	4602      	mov	r2, r0
 8014832:	460b      	mov	r3, r1
 8014834:	4620      	mov	r0, r4
 8014836:	4629      	mov	r1, r5
 8014838:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801483c:	f7eb fd44 	bl	80002c8 <__aeabi_dsub>
 8014840:	f806 4b01 	strb.w	r4, [r6], #1
 8014844:	9d07      	ldr	r5, [sp, #28]
 8014846:	eba6 040a 	sub.w	r4, r6, sl
 801484a:	42a5      	cmp	r5, r4
 801484c:	4602      	mov	r2, r0
 801484e:	460b      	mov	r3, r1
 8014850:	f040 8117 	bne.w	8014a82 <_dtoa_r+0x6e2>
 8014854:	f7eb fd3a 	bl	80002cc <__adddf3>
 8014858:	e9dd 2300 	ldrd	r2, r3, [sp]
 801485c:	4604      	mov	r4, r0
 801485e:	460d      	mov	r5, r1
 8014860:	f7ec f97a 	bl	8000b58 <__aeabi_dcmpgt>
 8014864:	2800      	cmp	r0, #0
 8014866:	f040 80f9 	bne.w	8014a5c <_dtoa_r+0x6bc>
 801486a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801486e:	4620      	mov	r0, r4
 8014870:	4629      	mov	r1, r5
 8014872:	f7ec f949 	bl	8000b08 <__aeabi_dcmpeq>
 8014876:	b118      	cbz	r0, 8014880 <_dtoa_r+0x4e0>
 8014878:	f018 0f01 	tst.w	r8, #1
 801487c:	f040 80ee 	bne.w	8014a5c <_dtoa_r+0x6bc>
 8014880:	4649      	mov	r1, r9
 8014882:	4658      	mov	r0, fp
 8014884:	f000 fc90 	bl	80151a8 <_Bfree>
 8014888:	2300      	movs	r3, #0
 801488a:	7033      	strb	r3, [r6, #0]
 801488c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801488e:	3701      	adds	r7, #1
 8014890:	601f      	str	r7, [r3, #0]
 8014892:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014894:	2b00      	cmp	r3, #0
 8014896:	f000 831d 	beq.w	8014ed4 <_dtoa_r+0xb34>
 801489a:	601e      	str	r6, [r3, #0]
 801489c:	e31a      	b.n	8014ed4 <_dtoa_r+0xb34>
 801489e:	07e2      	lsls	r2, r4, #31
 80148a0:	d505      	bpl.n	80148ae <_dtoa_r+0x50e>
 80148a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80148a6:	f7eb fec7 	bl	8000638 <__aeabi_dmul>
 80148aa:	3601      	adds	r6, #1
 80148ac:	2301      	movs	r3, #1
 80148ae:	1064      	asrs	r4, r4, #1
 80148b0:	3508      	adds	r5, #8
 80148b2:	e73f      	b.n	8014734 <_dtoa_r+0x394>
 80148b4:	2602      	movs	r6, #2
 80148b6:	e742      	b.n	801473e <_dtoa_r+0x39e>
 80148b8:	9c07      	ldr	r4, [sp, #28]
 80148ba:	9704      	str	r7, [sp, #16]
 80148bc:	e761      	b.n	8014782 <_dtoa_r+0x3e2>
 80148be:	4b27      	ldr	r3, [pc, #156]	@ (801495c <_dtoa_r+0x5bc>)
 80148c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80148c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80148c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80148ca:	4454      	add	r4, sl
 80148cc:	2900      	cmp	r1, #0
 80148ce:	d053      	beq.n	8014978 <_dtoa_r+0x5d8>
 80148d0:	4928      	ldr	r1, [pc, #160]	@ (8014974 <_dtoa_r+0x5d4>)
 80148d2:	2000      	movs	r0, #0
 80148d4:	f7eb ffda 	bl	800088c <__aeabi_ddiv>
 80148d8:	4633      	mov	r3, r6
 80148da:	462a      	mov	r2, r5
 80148dc:	f7eb fcf4 	bl	80002c8 <__aeabi_dsub>
 80148e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80148e4:	4656      	mov	r6, sl
 80148e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80148ea:	f7ec f955 	bl	8000b98 <__aeabi_d2iz>
 80148ee:	4605      	mov	r5, r0
 80148f0:	f7eb fe38 	bl	8000564 <__aeabi_i2d>
 80148f4:	4602      	mov	r2, r0
 80148f6:	460b      	mov	r3, r1
 80148f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80148fc:	f7eb fce4 	bl	80002c8 <__aeabi_dsub>
 8014900:	3530      	adds	r5, #48	@ 0x30
 8014902:	4602      	mov	r2, r0
 8014904:	460b      	mov	r3, r1
 8014906:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801490a:	f806 5b01 	strb.w	r5, [r6], #1
 801490e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014912:	f7ec f903 	bl	8000b1c <__aeabi_dcmplt>
 8014916:	2800      	cmp	r0, #0
 8014918:	d171      	bne.n	80149fe <_dtoa_r+0x65e>
 801491a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801491e:	4911      	ldr	r1, [pc, #68]	@ (8014964 <_dtoa_r+0x5c4>)
 8014920:	2000      	movs	r0, #0
 8014922:	f7eb fcd1 	bl	80002c8 <__aeabi_dsub>
 8014926:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801492a:	f7ec f8f7 	bl	8000b1c <__aeabi_dcmplt>
 801492e:	2800      	cmp	r0, #0
 8014930:	f040 8095 	bne.w	8014a5e <_dtoa_r+0x6be>
 8014934:	42a6      	cmp	r6, r4
 8014936:	f43f af50 	beq.w	80147da <_dtoa_r+0x43a>
 801493a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801493e:	4b0a      	ldr	r3, [pc, #40]	@ (8014968 <_dtoa_r+0x5c8>)
 8014940:	2200      	movs	r2, #0
 8014942:	f7eb fe79 	bl	8000638 <__aeabi_dmul>
 8014946:	4b08      	ldr	r3, [pc, #32]	@ (8014968 <_dtoa_r+0x5c8>)
 8014948:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801494c:	2200      	movs	r2, #0
 801494e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014952:	f7eb fe71 	bl	8000638 <__aeabi_dmul>
 8014956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801495a:	e7c4      	b.n	80148e6 <_dtoa_r+0x546>
 801495c:	0801a4d8 	.word	0x0801a4d8
 8014960:	0801a4b0 	.word	0x0801a4b0
 8014964:	3ff00000 	.word	0x3ff00000
 8014968:	40240000 	.word	0x40240000
 801496c:	401c0000 	.word	0x401c0000
 8014970:	40140000 	.word	0x40140000
 8014974:	3fe00000 	.word	0x3fe00000
 8014978:	4631      	mov	r1, r6
 801497a:	4628      	mov	r0, r5
 801497c:	f7eb fe5c 	bl	8000638 <__aeabi_dmul>
 8014980:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014984:	9415      	str	r4, [sp, #84]	@ 0x54
 8014986:	4656      	mov	r6, sl
 8014988:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801498c:	f7ec f904 	bl	8000b98 <__aeabi_d2iz>
 8014990:	4605      	mov	r5, r0
 8014992:	f7eb fde7 	bl	8000564 <__aeabi_i2d>
 8014996:	4602      	mov	r2, r0
 8014998:	460b      	mov	r3, r1
 801499a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801499e:	f7eb fc93 	bl	80002c8 <__aeabi_dsub>
 80149a2:	3530      	adds	r5, #48	@ 0x30
 80149a4:	f806 5b01 	strb.w	r5, [r6], #1
 80149a8:	4602      	mov	r2, r0
 80149aa:	460b      	mov	r3, r1
 80149ac:	42a6      	cmp	r6, r4
 80149ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80149b2:	f04f 0200 	mov.w	r2, #0
 80149b6:	d124      	bne.n	8014a02 <_dtoa_r+0x662>
 80149b8:	4bac      	ldr	r3, [pc, #688]	@ (8014c6c <_dtoa_r+0x8cc>)
 80149ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80149be:	f7eb fc85 	bl	80002cc <__adddf3>
 80149c2:	4602      	mov	r2, r0
 80149c4:	460b      	mov	r3, r1
 80149c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149ca:	f7ec f8c5 	bl	8000b58 <__aeabi_dcmpgt>
 80149ce:	2800      	cmp	r0, #0
 80149d0:	d145      	bne.n	8014a5e <_dtoa_r+0x6be>
 80149d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80149d6:	49a5      	ldr	r1, [pc, #660]	@ (8014c6c <_dtoa_r+0x8cc>)
 80149d8:	2000      	movs	r0, #0
 80149da:	f7eb fc75 	bl	80002c8 <__aeabi_dsub>
 80149de:	4602      	mov	r2, r0
 80149e0:	460b      	mov	r3, r1
 80149e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149e6:	f7ec f899 	bl	8000b1c <__aeabi_dcmplt>
 80149ea:	2800      	cmp	r0, #0
 80149ec:	f43f aef5 	beq.w	80147da <_dtoa_r+0x43a>
 80149f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80149f2:	1e73      	subs	r3, r6, #1
 80149f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80149f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80149fa:	2b30      	cmp	r3, #48	@ 0x30
 80149fc:	d0f8      	beq.n	80149f0 <_dtoa_r+0x650>
 80149fe:	9f04      	ldr	r7, [sp, #16]
 8014a00:	e73e      	b.n	8014880 <_dtoa_r+0x4e0>
 8014a02:	4b9b      	ldr	r3, [pc, #620]	@ (8014c70 <_dtoa_r+0x8d0>)
 8014a04:	f7eb fe18 	bl	8000638 <__aeabi_dmul>
 8014a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a0c:	e7bc      	b.n	8014988 <_dtoa_r+0x5e8>
 8014a0e:	d10c      	bne.n	8014a2a <_dtoa_r+0x68a>
 8014a10:	4b98      	ldr	r3, [pc, #608]	@ (8014c74 <_dtoa_r+0x8d4>)
 8014a12:	2200      	movs	r2, #0
 8014a14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a18:	f7eb fe0e 	bl	8000638 <__aeabi_dmul>
 8014a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014a20:	f7ec f890 	bl	8000b44 <__aeabi_dcmpge>
 8014a24:	2800      	cmp	r0, #0
 8014a26:	f000 8157 	beq.w	8014cd8 <_dtoa_r+0x938>
 8014a2a:	2400      	movs	r4, #0
 8014a2c:	4625      	mov	r5, r4
 8014a2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014a30:	43db      	mvns	r3, r3
 8014a32:	9304      	str	r3, [sp, #16]
 8014a34:	4656      	mov	r6, sl
 8014a36:	2700      	movs	r7, #0
 8014a38:	4621      	mov	r1, r4
 8014a3a:	4658      	mov	r0, fp
 8014a3c:	f000 fbb4 	bl	80151a8 <_Bfree>
 8014a40:	2d00      	cmp	r5, #0
 8014a42:	d0dc      	beq.n	80149fe <_dtoa_r+0x65e>
 8014a44:	b12f      	cbz	r7, 8014a52 <_dtoa_r+0x6b2>
 8014a46:	42af      	cmp	r7, r5
 8014a48:	d003      	beq.n	8014a52 <_dtoa_r+0x6b2>
 8014a4a:	4639      	mov	r1, r7
 8014a4c:	4658      	mov	r0, fp
 8014a4e:	f000 fbab 	bl	80151a8 <_Bfree>
 8014a52:	4629      	mov	r1, r5
 8014a54:	4658      	mov	r0, fp
 8014a56:	f000 fba7 	bl	80151a8 <_Bfree>
 8014a5a:	e7d0      	b.n	80149fe <_dtoa_r+0x65e>
 8014a5c:	9704      	str	r7, [sp, #16]
 8014a5e:	4633      	mov	r3, r6
 8014a60:	461e      	mov	r6, r3
 8014a62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014a66:	2a39      	cmp	r2, #57	@ 0x39
 8014a68:	d107      	bne.n	8014a7a <_dtoa_r+0x6da>
 8014a6a:	459a      	cmp	sl, r3
 8014a6c:	d1f8      	bne.n	8014a60 <_dtoa_r+0x6c0>
 8014a6e:	9a04      	ldr	r2, [sp, #16]
 8014a70:	3201      	adds	r2, #1
 8014a72:	9204      	str	r2, [sp, #16]
 8014a74:	2230      	movs	r2, #48	@ 0x30
 8014a76:	f88a 2000 	strb.w	r2, [sl]
 8014a7a:	781a      	ldrb	r2, [r3, #0]
 8014a7c:	3201      	adds	r2, #1
 8014a7e:	701a      	strb	r2, [r3, #0]
 8014a80:	e7bd      	b.n	80149fe <_dtoa_r+0x65e>
 8014a82:	4b7b      	ldr	r3, [pc, #492]	@ (8014c70 <_dtoa_r+0x8d0>)
 8014a84:	2200      	movs	r2, #0
 8014a86:	f7eb fdd7 	bl	8000638 <__aeabi_dmul>
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	4604      	mov	r4, r0
 8014a90:	460d      	mov	r5, r1
 8014a92:	f7ec f839 	bl	8000b08 <__aeabi_dcmpeq>
 8014a96:	2800      	cmp	r0, #0
 8014a98:	f43f aebb 	beq.w	8014812 <_dtoa_r+0x472>
 8014a9c:	e6f0      	b.n	8014880 <_dtoa_r+0x4e0>
 8014a9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014aa0:	2a00      	cmp	r2, #0
 8014aa2:	f000 80db 	beq.w	8014c5c <_dtoa_r+0x8bc>
 8014aa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014aa8:	2a01      	cmp	r2, #1
 8014aaa:	f300 80bf 	bgt.w	8014c2c <_dtoa_r+0x88c>
 8014aae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014ab0:	2a00      	cmp	r2, #0
 8014ab2:	f000 80b7 	beq.w	8014c24 <_dtoa_r+0x884>
 8014ab6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8014aba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014abc:	4646      	mov	r6, r8
 8014abe:	9a08      	ldr	r2, [sp, #32]
 8014ac0:	2101      	movs	r1, #1
 8014ac2:	441a      	add	r2, r3
 8014ac4:	4658      	mov	r0, fp
 8014ac6:	4498      	add	r8, r3
 8014ac8:	9208      	str	r2, [sp, #32]
 8014aca:	f000 fc21 	bl	8015310 <__i2b>
 8014ace:	4605      	mov	r5, r0
 8014ad0:	b15e      	cbz	r6, 8014aea <_dtoa_r+0x74a>
 8014ad2:	9b08      	ldr	r3, [sp, #32]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	dd08      	ble.n	8014aea <_dtoa_r+0x74a>
 8014ad8:	42b3      	cmp	r3, r6
 8014ada:	9a08      	ldr	r2, [sp, #32]
 8014adc:	bfa8      	it	ge
 8014ade:	4633      	movge	r3, r6
 8014ae0:	eba8 0803 	sub.w	r8, r8, r3
 8014ae4:	1af6      	subs	r6, r6, r3
 8014ae6:	1ad3      	subs	r3, r2, r3
 8014ae8:	9308      	str	r3, [sp, #32]
 8014aea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014aec:	b1f3      	cbz	r3, 8014b2c <_dtoa_r+0x78c>
 8014aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	f000 80b7 	beq.w	8014c64 <_dtoa_r+0x8c4>
 8014af6:	b18c      	cbz	r4, 8014b1c <_dtoa_r+0x77c>
 8014af8:	4629      	mov	r1, r5
 8014afa:	4622      	mov	r2, r4
 8014afc:	4658      	mov	r0, fp
 8014afe:	f000 fcc7 	bl	8015490 <__pow5mult>
 8014b02:	464a      	mov	r2, r9
 8014b04:	4601      	mov	r1, r0
 8014b06:	4605      	mov	r5, r0
 8014b08:	4658      	mov	r0, fp
 8014b0a:	f000 fc17 	bl	801533c <__multiply>
 8014b0e:	4649      	mov	r1, r9
 8014b10:	9004      	str	r0, [sp, #16]
 8014b12:	4658      	mov	r0, fp
 8014b14:	f000 fb48 	bl	80151a8 <_Bfree>
 8014b18:	9b04      	ldr	r3, [sp, #16]
 8014b1a:	4699      	mov	r9, r3
 8014b1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014b1e:	1b1a      	subs	r2, r3, r4
 8014b20:	d004      	beq.n	8014b2c <_dtoa_r+0x78c>
 8014b22:	4649      	mov	r1, r9
 8014b24:	4658      	mov	r0, fp
 8014b26:	f000 fcb3 	bl	8015490 <__pow5mult>
 8014b2a:	4681      	mov	r9, r0
 8014b2c:	2101      	movs	r1, #1
 8014b2e:	4658      	mov	r0, fp
 8014b30:	f000 fbee 	bl	8015310 <__i2b>
 8014b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b36:	4604      	mov	r4, r0
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	f000 81cf 	beq.w	8014edc <_dtoa_r+0xb3c>
 8014b3e:	461a      	mov	r2, r3
 8014b40:	4601      	mov	r1, r0
 8014b42:	4658      	mov	r0, fp
 8014b44:	f000 fca4 	bl	8015490 <__pow5mult>
 8014b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014b4a:	2b01      	cmp	r3, #1
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	f300 8095 	bgt.w	8014c7c <_dtoa_r+0x8dc>
 8014b52:	9b02      	ldr	r3, [sp, #8]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	f040 8087 	bne.w	8014c68 <_dtoa_r+0x8c8>
 8014b5a:	9b03      	ldr	r3, [sp, #12]
 8014b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	f040 8089 	bne.w	8014c78 <_dtoa_r+0x8d8>
 8014b66:	9b03      	ldr	r3, [sp, #12]
 8014b68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014b6c:	0d1b      	lsrs	r3, r3, #20
 8014b6e:	051b      	lsls	r3, r3, #20
 8014b70:	b12b      	cbz	r3, 8014b7e <_dtoa_r+0x7de>
 8014b72:	9b08      	ldr	r3, [sp, #32]
 8014b74:	3301      	adds	r3, #1
 8014b76:	9308      	str	r3, [sp, #32]
 8014b78:	f108 0801 	add.w	r8, r8, #1
 8014b7c:	2301      	movs	r3, #1
 8014b7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014b80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	f000 81b0 	beq.w	8014ee8 <_dtoa_r+0xb48>
 8014b88:	6923      	ldr	r3, [r4, #16]
 8014b8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014b8e:	6918      	ldr	r0, [r3, #16]
 8014b90:	f000 fb72 	bl	8015278 <__hi0bits>
 8014b94:	f1c0 0020 	rsb	r0, r0, #32
 8014b98:	9b08      	ldr	r3, [sp, #32]
 8014b9a:	4418      	add	r0, r3
 8014b9c:	f010 001f 	ands.w	r0, r0, #31
 8014ba0:	d077      	beq.n	8014c92 <_dtoa_r+0x8f2>
 8014ba2:	f1c0 0320 	rsb	r3, r0, #32
 8014ba6:	2b04      	cmp	r3, #4
 8014ba8:	dd6b      	ble.n	8014c82 <_dtoa_r+0x8e2>
 8014baa:	9b08      	ldr	r3, [sp, #32]
 8014bac:	f1c0 001c 	rsb	r0, r0, #28
 8014bb0:	4403      	add	r3, r0
 8014bb2:	4480      	add	r8, r0
 8014bb4:	4406      	add	r6, r0
 8014bb6:	9308      	str	r3, [sp, #32]
 8014bb8:	f1b8 0f00 	cmp.w	r8, #0
 8014bbc:	dd05      	ble.n	8014bca <_dtoa_r+0x82a>
 8014bbe:	4649      	mov	r1, r9
 8014bc0:	4642      	mov	r2, r8
 8014bc2:	4658      	mov	r0, fp
 8014bc4:	f000 fcbe 	bl	8015544 <__lshift>
 8014bc8:	4681      	mov	r9, r0
 8014bca:	9b08      	ldr	r3, [sp, #32]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	dd05      	ble.n	8014bdc <_dtoa_r+0x83c>
 8014bd0:	4621      	mov	r1, r4
 8014bd2:	461a      	mov	r2, r3
 8014bd4:	4658      	mov	r0, fp
 8014bd6:	f000 fcb5 	bl	8015544 <__lshift>
 8014bda:	4604      	mov	r4, r0
 8014bdc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d059      	beq.n	8014c96 <_dtoa_r+0x8f6>
 8014be2:	4621      	mov	r1, r4
 8014be4:	4648      	mov	r0, r9
 8014be6:	f000 fd19 	bl	801561c <__mcmp>
 8014bea:	2800      	cmp	r0, #0
 8014bec:	da53      	bge.n	8014c96 <_dtoa_r+0x8f6>
 8014bee:	1e7b      	subs	r3, r7, #1
 8014bf0:	9304      	str	r3, [sp, #16]
 8014bf2:	4649      	mov	r1, r9
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	220a      	movs	r2, #10
 8014bf8:	4658      	mov	r0, fp
 8014bfa:	f000 faf7 	bl	80151ec <__multadd>
 8014bfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014c00:	4681      	mov	r9, r0
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	f000 8172 	beq.w	8014eec <_dtoa_r+0xb4c>
 8014c08:	2300      	movs	r3, #0
 8014c0a:	4629      	mov	r1, r5
 8014c0c:	220a      	movs	r2, #10
 8014c0e:	4658      	mov	r0, fp
 8014c10:	f000 faec 	bl	80151ec <__multadd>
 8014c14:	9b00      	ldr	r3, [sp, #0]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	4605      	mov	r5, r0
 8014c1a:	dc67      	bgt.n	8014cec <_dtoa_r+0x94c>
 8014c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014c1e:	2b02      	cmp	r3, #2
 8014c20:	dc41      	bgt.n	8014ca6 <_dtoa_r+0x906>
 8014c22:	e063      	b.n	8014cec <_dtoa_r+0x94c>
 8014c24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014c26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8014c2a:	e746      	b.n	8014aba <_dtoa_r+0x71a>
 8014c2c:	9b07      	ldr	r3, [sp, #28]
 8014c2e:	1e5c      	subs	r4, r3, #1
 8014c30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c32:	42a3      	cmp	r3, r4
 8014c34:	bfbf      	itttt	lt
 8014c36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8014c38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8014c3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8014c3c:	1ae3      	sublt	r3, r4, r3
 8014c3e:	bfb4      	ite	lt
 8014c40:	18d2      	addlt	r2, r2, r3
 8014c42:	1b1c      	subge	r4, r3, r4
 8014c44:	9b07      	ldr	r3, [sp, #28]
 8014c46:	bfbc      	itt	lt
 8014c48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8014c4a:	2400      	movlt	r4, #0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	bfb5      	itete	lt
 8014c50:	eba8 0603 	sublt.w	r6, r8, r3
 8014c54:	9b07      	ldrge	r3, [sp, #28]
 8014c56:	2300      	movlt	r3, #0
 8014c58:	4646      	movge	r6, r8
 8014c5a:	e730      	b.n	8014abe <_dtoa_r+0x71e>
 8014c5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014c5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8014c60:	4646      	mov	r6, r8
 8014c62:	e735      	b.n	8014ad0 <_dtoa_r+0x730>
 8014c64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8014c66:	e75c      	b.n	8014b22 <_dtoa_r+0x782>
 8014c68:	2300      	movs	r3, #0
 8014c6a:	e788      	b.n	8014b7e <_dtoa_r+0x7de>
 8014c6c:	3fe00000 	.word	0x3fe00000
 8014c70:	40240000 	.word	0x40240000
 8014c74:	40140000 	.word	0x40140000
 8014c78:	9b02      	ldr	r3, [sp, #8]
 8014c7a:	e780      	b.n	8014b7e <_dtoa_r+0x7de>
 8014c7c:	2300      	movs	r3, #0
 8014c7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014c80:	e782      	b.n	8014b88 <_dtoa_r+0x7e8>
 8014c82:	d099      	beq.n	8014bb8 <_dtoa_r+0x818>
 8014c84:	9a08      	ldr	r2, [sp, #32]
 8014c86:	331c      	adds	r3, #28
 8014c88:	441a      	add	r2, r3
 8014c8a:	4498      	add	r8, r3
 8014c8c:	441e      	add	r6, r3
 8014c8e:	9208      	str	r2, [sp, #32]
 8014c90:	e792      	b.n	8014bb8 <_dtoa_r+0x818>
 8014c92:	4603      	mov	r3, r0
 8014c94:	e7f6      	b.n	8014c84 <_dtoa_r+0x8e4>
 8014c96:	9b07      	ldr	r3, [sp, #28]
 8014c98:	9704      	str	r7, [sp, #16]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	dc20      	bgt.n	8014ce0 <_dtoa_r+0x940>
 8014c9e:	9300      	str	r3, [sp, #0]
 8014ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ca2:	2b02      	cmp	r3, #2
 8014ca4:	dd1e      	ble.n	8014ce4 <_dtoa_r+0x944>
 8014ca6:	9b00      	ldr	r3, [sp, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	f47f aec0 	bne.w	8014a2e <_dtoa_r+0x68e>
 8014cae:	4621      	mov	r1, r4
 8014cb0:	2205      	movs	r2, #5
 8014cb2:	4658      	mov	r0, fp
 8014cb4:	f000 fa9a 	bl	80151ec <__multadd>
 8014cb8:	4601      	mov	r1, r0
 8014cba:	4604      	mov	r4, r0
 8014cbc:	4648      	mov	r0, r9
 8014cbe:	f000 fcad 	bl	801561c <__mcmp>
 8014cc2:	2800      	cmp	r0, #0
 8014cc4:	f77f aeb3 	ble.w	8014a2e <_dtoa_r+0x68e>
 8014cc8:	4656      	mov	r6, sl
 8014cca:	2331      	movs	r3, #49	@ 0x31
 8014ccc:	f806 3b01 	strb.w	r3, [r6], #1
 8014cd0:	9b04      	ldr	r3, [sp, #16]
 8014cd2:	3301      	adds	r3, #1
 8014cd4:	9304      	str	r3, [sp, #16]
 8014cd6:	e6ae      	b.n	8014a36 <_dtoa_r+0x696>
 8014cd8:	9c07      	ldr	r4, [sp, #28]
 8014cda:	9704      	str	r7, [sp, #16]
 8014cdc:	4625      	mov	r5, r4
 8014cde:	e7f3      	b.n	8014cc8 <_dtoa_r+0x928>
 8014ce0:	9b07      	ldr	r3, [sp, #28]
 8014ce2:	9300      	str	r3, [sp, #0]
 8014ce4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	f000 8104 	beq.w	8014ef4 <_dtoa_r+0xb54>
 8014cec:	2e00      	cmp	r6, #0
 8014cee:	dd05      	ble.n	8014cfc <_dtoa_r+0x95c>
 8014cf0:	4629      	mov	r1, r5
 8014cf2:	4632      	mov	r2, r6
 8014cf4:	4658      	mov	r0, fp
 8014cf6:	f000 fc25 	bl	8015544 <__lshift>
 8014cfa:	4605      	mov	r5, r0
 8014cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d05a      	beq.n	8014db8 <_dtoa_r+0xa18>
 8014d02:	6869      	ldr	r1, [r5, #4]
 8014d04:	4658      	mov	r0, fp
 8014d06:	f000 fa0f 	bl	8015128 <_Balloc>
 8014d0a:	4606      	mov	r6, r0
 8014d0c:	b928      	cbnz	r0, 8014d1a <_dtoa_r+0x97a>
 8014d0e:	4b84      	ldr	r3, [pc, #528]	@ (8014f20 <_dtoa_r+0xb80>)
 8014d10:	4602      	mov	r2, r0
 8014d12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8014d16:	f7ff bb5a 	b.w	80143ce <_dtoa_r+0x2e>
 8014d1a:	692a      	ldr	r2, [r5, #16]
 8014d1c:	3202      	adds	r2, #2
 8014d1e:	0092      	lsls	r2, r2, #2
 8014d20:	f105 010c 	add.w	r1, r5, #12
 8014d24:	300c      	adds	r0, #12
 8014d26:	f001 f975 	bl	8016014 <memcpy>
 8014d2a:	2201      	movs	r2, #1
 8014d2c:	4631      	mov	r1, r6
 8014d2e:	4658      	mov	r0, fp
 8014d30:	f000 fc08 	bl	8015544 <__lshift>
 8014d34:	f10a 0301 	add.w	r3, sl, #1
 8014d38:	9307      	str	r3, [sp, #28]
 8014d3a:	9b00      	ldr	r3, [sp, #0]
 8014d3c:	4453      	add	r3, sl
 8014d3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014d40:	9b02      	ldr	r3, [sp, #8]
 8014d42:	f003 0301 	and.w	r3, r3, #1
 8014d46:	462f      	mov	r7, r5
 8014d48:	930a      	str	r3, [sp, #40]	@ 0x28
 8014d4a:	4605      	mov	r5, r0
 8014d4c:	9b07      	ldr	r3, [sp, #28]
 8014d4e:	4621      	mov	r1, r4
 8014d50:	3b01      	subs	r3, #1
 8014d52:	4648      	mov	r0, r9
 8014d54:	9300      	str	r3, [sp, #0]
 8014d56:	f7ff fa9a 	bl	801428e <quorem>
 8014d5a:	4639      	mov	r1, r7
 8014d5c:	9002      	str	r0, [sp, #8]
 8014d5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014d62:	4648      	mov	r0, r9
 8014d64:	f000 fc5a 	bl	801561c <__mcmp>
 8014d68:	462a      	mov	r2, r5
 8014d6a:	9008      	str	r0, [sp, #32]
 8014d6c:	4621      	mov	r1, r4
 8014d6e:	4658      	mov	r0, fp
 8014d70:	f000 fc70 	bl	8015654 <__mdiff>
 8014d74:	68c2      	ldr	r2, [r0, #12]
 8014d76:	4606      	mov	r6, r0
 8014d78:	bb02      	cbnz	r2, 8014dbc <_dtoa_r+0xa1c>
 8014d7a:	4601      	mov	r1, r0
 8014d7c:	4648      	mov	r0, r9
 8014d7e:	f000 fc4d 	bl	801561c <__mcmp>
 8014d82:	4602      	mov	r2, r0
 8014d84:	4631      	mov	r1, r6
 8014d86:	4658      	mov	r0, fp
 8014d88:	920e      	str	r2, [sp, #56]	@ 0x38
 8014d8a:	f000 fa0d 	bl	80151a8 <_Bfree>
 8014d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014d90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014d92:	9e07      	ldr	r6, [sp, #28]
 8014d94:	ea43 0102 	orr.w	r1, r3, r2
 8014d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d9a:	4319      	orrs	r1, r3
 8014d9c:	d110      	bne.n	8014dc0 <_dtoa_r+0xa20>
 8014d9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014da2:	d029      	beq.n	8014df8 <_dtoa_r+0xa58>
 8014da4:	9b08      	ldr	r3, [sp, #32]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	dd02      	ble.n	8014db0 <_dtoa_r+0xa10>
 8014daa:	9b02      	ldr	r3, [sp, #8]
 8014dac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014db0:	9b00      	ldr	r3, [sp, #0]
 8014db2:	f883 8000 	strb.w	r8, [r3]
 8014db6:	e63f      	b.n	8014a38 <_dtoa_r+0x698>
 8014db8:	4628      	mov	r0, r5
 8014dba:	e7bb      	b.n	8014d34 <_dtoa_r+0x994>
 8014dbc:	2201      	movs	r2, #1
 8014dbe:	e7e1      	b.n	8014d84 <_dtoa_r+0x9e4>
 8014dc0:	9b08      	ldr	r3, [sp, #32]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	db04      	blt.n	8014dd0 <_dtoa_r+0xa30>
 8014dc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014dc8:	430b      	orrs	r3, r1
 8014dca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014dcc:	430b      	orrs	r3, r1
 8014dce:	d120      	bne.n	8014e12 <_dtoa_r+0xa72>
 8014dd0:	2a00      	cmp	r2, #0
 8014dd2:	dded      	ble.n	8014db0 <_dtoa_r+0xa10>
 8014dd4:	4649      	mov	r1, r9
 8014dd6:	2201      	movs	r2, #1
 8014dd8:	4658      	mov	r0, fp
 8014dda:	f000 fbb3 	bl	8015544 <__lshift>
 8014dde:	4621      	mov	r1, r4
 8014de0:	4681      	mov	r9, r0
 8014de2:	f000 fc1b 	bl	801561c <__mcmp>
 8014de6:	2800      	cmp	r0, #0
 8014de8:	dc03      	bgt.n	8014df2 <_dtoa_r+0xa52>
 8014dea:	d1e1      	bne.n	8014db0 <_dtoa_r+0xa10>
 8014dec:	f018 0f01 	tst.w	r8, #1
 8014df0:	d0de      	beq.n	8014db0 <_dtoa_r+0xa10>
 8014df2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014df6:	d1d8      	bne.n	8014daa <_dtoa_r+0xa0a>
 8014df8:	9a00      	ldr	r2, [sp, #0]
 8014dfa:	2339      	movs	r3, #57	@ 0x39
 8014dfc:	7013      	strb	r3, [r2, #0]
 8014dfe:	4633      	mov	r3, r6
 8014e00:	461e      	mov	r6, r3
 8014e02:	3b01      	subs	r3, #1
 8014e04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014e08:	2a39      	cmp	r2, #57	@ 0x39
 8014e0a:	d052      	beq.n	8014eb2 <_dtoa_r+0xb12>
 8014e0c:	3201      	adds	r2, #1
 8014e0e:	701a      	strb	r2, [r3, #0]
 8014e10:	e612      	b.n	8014a38 <_dtoa_r+0x698>
 8014e12:	2a00      	cmp	r2, #0
 8014e14:	dd07      	ble.n	8014e26 <_dtoa_r+0xa86>
 8014e16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014e1a:	d0ed      	beq.n	8014df8 <_dtoa_r+0xa58>
 8014e1c:	9a00      	ldr	r2, [sp, #0]
 8014e1e:	f108 0301 	add.w	r3, r8, #1
 8014e22:	7013      	strb	r3, [r2, #0]
 8014e24:	e608      	b.n	8014a38 <_dtoa_r+0x698>
 8014e26:	9b07      	ldr	r3, [sp, #28]
 8014e28:	9a07      	ldr	r2, [sp, #28]
 8014e2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8014e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014e30:	4293      	cmp	r3, r2
 8014e32:	d028      	beq.n	8014e86 <_dtoa_r+0xae6>
 8014e34:	4649      	mov	r1, r9
 8014e36:	2300      	movs	r3, #0
 8014e38:	220a      	movs	r2, #10
 8014e3a:	4658      	mov	r0, fp
 8014e3c:	f000 f9d6 	bl	80151ec <__multadd>
 8014e40:	42af      	cmp	r7, r5
 8014e42:	4681      	mov	r9, r0
 8014e44:	f04f 0300 	mov.w	r3, #0
 8014e48:	f04f 020a 	mov.w	r2, #10
 8014e4c:	4639      	mov	r1, r7
 8014e4e:	4658      	mov	r0, fp
 8014e50:	d107      	bne.n	8014e62 <_dtoa_r+0xac2>
 8014e52:	f000 f9cb 	bl	80151ec <__multadd>
 8014e56:	4607      	mov	r7, r0
 8014e58:	4605      	mov	r5, r0
 8014e5a:	9b07      	ldr	r3, [sp, #28]
 8014e5c:	3301      	adds	r3, #1
 8014e5e:	9307      	str	r3, [sp, #28]
 8014e60:	e774      	b.n	8014d4c <_dtoa_r+0x9ac>
 8014e62:	f000 f9c3 	bl	80151ec <__multadd>
 8014e66:	4629      	mov	r1, r5
 8014e68:	4607      	mov	r7, r0
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	220a      	movs	r2, #10
 8014e6e:	4658      	mov	r0, fp
 8014e70:	f000 f9bc 	bl	80151ec <__multadd>
 8014e74:	4605      	mov	r5, r0
 8014e76:	e7f0      	b.n	8014e5a <_dtoa_r+0xaba>
 8014e78:	9b00      	ldr	r3, [sp, #0]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	bfcc      	ite	gt
 8014e7e:	461e      	movgt	r6, r3
 8014e80:	2601      	movle	r6, #1
 8014e82:	4456      	add	r6, sl
 8014e84:	2700      	movs	r7, #0
 8014e86:	4649      	mov	r1, r9
 8014e88:	2201      	movs	r2, #1
 8014e8a:	4658      	mov	r0, fp
 8014e8c:	f000 fb5a 	bl	8015544 <__lshift>
 8014e90:	4621      	mov	r1, r4
 8014e92:	4681      	mov	r9, r0
 8014e94:	f000 fbc2 	bl	801561c <__mcmp>
 8014e98:	2800      	cmp	r0, #0
 8014e9a:	dcb0      	bgt.n	8014dfe <_dtoa_r+0xa5e>
 8014e9c:	d102      	bne.n	8014ea4 <_dtoa_r+0xb04>
 8014e9e:	f018 0f01 	tst.w	r8, #1
 8014ea2:	d1ac      	bne.n	8014dfe <_dtoa_r+0xa5e>
 8014ea4:	4633      	mov	r3, r6
 8014ea6:	461e      	mov	r6, r3
 8014ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014eac:	2a30      	cmp	r2, #48	@ 0x30
 8014eae:	d0fa      	beq.n	8014ea6 <_dtoa_r+0xb06>
 8014eb0:	e5c2      	b.n	8014a38 <_dtoa_r+0x698>
 8014eb2:	459a      	cmp	sl, r3
 8014eb4:	d1a4      	bne.n	8014e00 <_dtoa_r+0xa60>
 8014eb6:	9b04      	ldr	r3, [sp, #16]
 8014eb8:	3301      	adds	r3, #1
 8014eba:	9304      	str	r3, [sp, #16]
 8014ebc:	2331      	movs	r3, #49	@ 0x31
 8014ebe:	f88a 3000 	strb.w	r3, [sl]
 8014ec2:	e5b9      	b.n	8014a38 <_dtoa_r+0x698>
 8014ec4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014ec6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8014f24 <_dtoa_r+0xb84>
 8014eca:	b11b      	cbz	r3, 8014ed4 <_dtoa_r+0xb34>
 8014ecc:	f10a 0308 	add.w	r3, sl, #8
 8014ed0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014ed2:	6013      	str	r3, [r2, #0]
 8014ed4:	4650      	mov	r0, sl
 8014ed6:	b019      	add	sp, #100	@ 0x64
 8014ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014edc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ede:	2b01      	cmp	r3, #1
 8014ee0:	f77f ae37 	ble.w	8014b52 <_dtoa_r+0x7b2>
 8014ee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ee6:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ee8:	2001      	movs	r0, #1
 8014eea:	e655      	b.n	8014b98 <_dtoa_r+0x7f8>
 8014eec:	9b00      	ldr	r3, [sp, #0]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	f77f aed6 	ble.w	8014ca0 <_dtoa_r+0x900>
 8014ef4:	4656      	mov	r6, sl
 8014ef6:	4621      	mov	r1, r4
 8014ef8:	4648      	mov	r0, r9
 8014efa:	f7ff f9c8 	bl	801428e <quorem>
 8014efe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014f02:	f806 8b01 	strb.w	r8, [r6], #1
 8014f06:	9b00      	ldr	r3, [sp, #0]
 8014f08:	eba6 020a 	sub.w	r2, r6, sl
 8014f0c:	4293      	cmp	r3, r2
 8014f0e:	ddb3      	ble.n	8014e78 <_dtoa_r+0xad8>
 8014f10:	4649      	mov	r1, r9
 8014f12:	2300      	movs	r3, #0
 8014f14:	220a      	movs	r2, #10
 8014f16:	4658      	mov	r0, fp
 8014f18:	f000 f968 	bl	80151ec <__multadd>
 8014f1c:	4681      	mov	r9, r0
 8014f1e:	e7ea      	b.n	8014ef6 <_dtoa_r+0xb56>
 8014f20:	0801a438 	.word	0x0801a438
 8014f24:	0801a3bc 	.word	0x0801a3bc

08014f28 <_free_r>:
 8014f28:	b538      	push	{r3, r4, r5, lr}
 8014f2a:	4605      	mov	r5, r0
 8014f2c:	2900      	cmp	r1, #0
 8014f2e:	d041      	beq.n	8014fb4 <_free_r+0x8c>
 8014f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014f34:	1f0c      	subs	r4, r1, #4
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	bfb8      	it	lt
 8014f3a:	18e4      	addlt	r4, r4, r3
 8014f3c:	f000 f8e8 	bl	8015110 <__malloc_lock>
 8014f40:	4a1d      	ldr	r2, [pc, #116]	@ (8014fb8 <_free_r+0x90>)
 8014f42:	6813      	ldr	r3, [r2, #0]
 8014f44:	b933      	cbnz	r3, 8014f54 <_free_r+0x2c>
 8014f46:	6063      	str	r3, [r4, #4]
 8014f48:	6014      	str	r4, [r2, #0]
 8014f4a:	4628      	mov	r0, r5
 8014f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f50:	f000 b8e4 	b.w	801511c <__malloc_unlock>
 8014f54:	42a3      	cmp	r3, r4
 8014f56:	d908      	bls.n	8014f6a <_free_r+0x42>
 8014f58:	6820      	ldr	r0, [r4, #0]
 8014f5a:	1821      	adds	r1, r4, r0
 8014f5c:	428b      	cmp	r3, r1
 8014f5e:	bf01      	itttt	eq
 8014f60:	6819      	ldreq	r1, [r3, #0]
 8014f62:	685b      	ldreq	r3, [r3, #4]
 8014f64:	1809      	addeq	r1, r1, r0
 8014f66:	6021      	streq	r1, [r4, #0]
 8014f68:	e7ed      	b.n	8014f46 <_free_r+0x1e>
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	685b      	ldr	r3, [r3, #4]
 8014f6e:	b10b      	cbz	r3, 8014f74 <_free_r+0x4c>
 8014f70:	42a3      	cmp	r3, r4
 8014f72:	d9fa      	bls.n	8014f6a <_free_r+0x42>
 8014f74:	6811      	ldr	r1, [r2, #0]
 8014f76:	1850      	adds	r0, r2, r1
 8014f78:	42a0      	cmp	r0, r4
 8014f7a:	d10b      	bne.n	8014f94 <_free_r+0x6c>
 8014f7c:	6820      	ldr	r0, [r4, #0]
 8014f7e:	4401      	add	r1, r0
 8014f80:	1850      	adds	r0, r2, r1
 8014f82:	4283      	cmp	r3, r0
 8014f84:	6011      	str	r1, [r2, #0]
 8014f86:	d1e0      	bne.n	8014f4a <_free_r+0x22>
 8014f88:	6818      	ldr	r0, [r3, #0]
 8014f8a:	685b      	ldr	r3, [r3, #4]
 8014f8c:	6053      	str	r3, [r2, #4]
 8014f8e:	4408      	add	r0, r1
 8014f90:	6010      	str	r0, [r2, #0]
 8014f92:	e7da      	b.n	8014f4a <_free_r+0x22>
 8014f94:	d902      	bls.n	8014f9c <_free_r+0x74>
 8014f96:	230c      	movs	r3, #12
 8014f98:	602b      	str	r3, [r5, #0]
 8014f9a:	e7d6      	b.n	8014f4a <_free_r+0x22>
 8014f9c:	6820      	ldr	r0, [r4, #0]
 8014f9e:	1821      	adds	r1, r4, r0
 8014fa0:	428b      	cmp	r3, r1
 8014fa2:	bf04      	itt	eq
 8014fa4:	6819      	ldreq	r1, [r3, #0]
 8014fa6:	685b      	ldreq	r3, [r3, #4]
 8014fa8:	6063      	str	r3, [r4, #4]
 8014faa:	bf04      	itt	eq
 8014fac:	1809      	addeq	r1, r1, r0
 8014fae:	6021      	streq	r1, [r4, #0]
 8014fb0:	6054      	str	r4, [r2, #4]
 8014fb2:	e7ca      	b.n	8014f4a <_free_r+0x22>
 8014fb4:	bd38      	pop	{r3, r4, r5, pc}
 8014fb6:	bf00      	nop
 8014fb8:	20006648 	.word	0x20006648

08014fbc <malloc>:
 8014fbc:	4b02      	ldr	r3, [pc, #8]	@ (8014fc8 <malloc+0xc>)
 8014fbe:	4601      	mov	r1, r0
 8014fc0:	6818      	ldr	r0, [r3, #0]
 8014fc2:	f000 b825 	b.w	8015010 <_malloc_r>
 8014fc6:	bf00      	nop
 8014fc8:	20004f34 	.word	0x20004f34

08014fcc <sbrk_aligned>:
 8014fcc:	b570      	push	{r4, r5, r6, lr}
 8014fce:	4e0f      	ldr	r6, [pc, #60]	@ (801500c <sbrk_aligned+0x40>)
 8014fd0:	460c      	mov	r4, r1
 8014fd2:	6831      	ldr	r1, [r6, #0]
 8014fd4:	4605      	mov	r5, r0
 8014fd6:	b911      	cbnz	r1, 8014fde <sbrk_aligned+0x12>
 8014fd8:	f001 f80c 	bl	8015ff4 <_sbrk_r>
 8014fdc:	6030      	str	r0, [r6, #0]
 8014fde:	4621      	mov	r1, r4
 8014fe0:	4628      	mov	r0, r5
 8014fe2:	f001 f807 	bl	8015ff4 <_sbrk_r>
 8014fe6:	1c43      	adds	r3, r0, #1
 8014fe8:	d103      	bne.n	8014ff2 <sbrk_aligned+0x26>
 8014fea:	f04f 34ff 	mov.w	r4, #4294967295
 8014fee:	4620      	mov	r0, r4
 8014ff0:	bd70      	pop	{r4, r5, r6, pc}
 8014ff2:	1cc4      	adds	r4, r0, #3
 8014ff4:	f024 0403 	bic.w	r4, r4, #3
 8014ff8:	42a0      	cmp	r0, r4
 8014ffa:	d0f8      	beq.n	8014fee <sbrk_aligned+0x22>
 8014ffc:	1a21      	subs	r1, r4, r0
 8014ffe:	4628      	mov	r0, r5
 8015000:	f000 fff8 	bl	8015ff4 <_sbrk_r>
 8015004:	3001      	adds	r0, #1
 8015006:	d1f2      	bne.n	8014fee <sbrk_aligned+0x22>
 8015008:	e7ef      	b.n	8014fea <sbrk_aligned+0x1e>
 801500a:	bf00      	nop
 801500c:	20006644 	.word	0x20006644

08015010 <_malloc_r>:
 8015010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015014:	1ccd      	adds	r5, r1, #3
 8015016:	f025 0503 	bic.w	r5, r5, #3
 801501a:	3508      	adds	r5, #8
 801501c:	2d0c      	cmp	r5, #12
 801501e:	bf38      	it	cc
 8015020:	250c      	movcc	r5, #12
 8015022:	2d00      	cmp	r5, #0
 8015024:	4606      	mov	r6, r0
 8015026:	db01      	blt.n	801502c <_malloc_r+0x1c>
 8015028:	42a9      	cmp	r1, r5
 801502a:	d904      	bls.n	8015036 <_malloc_r+0x26>
 801502c:	230c      	movs	r3, #12
 801502e:	6033      	str	r3, [r6, #0]
 8015030:	2000      	movs	r0, #0
 8015032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015036:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801510c <_malloc_r+0xfc>
 801503a:	f000 f869 	bl	8015110 <__malloc_lock>
 801503e:	f8d8 3000 	ldr.w	r3, [r8]
 8015042:	461c      	mov	r4, r3
 8015044:	bb44      	cbnz	r4, 8015098 <_malloc_r+0x88>
 8015046:	4629      	mov	r1, r5
 8015048:	4630      	mov	r0, r6
 801504a:	f7ff ffbf 	bl	8014fcc <sbrk_aligned>
 801504e:	1c43      	adds	r3, r0, #1
 8015050:	4604      	mov	r4, r0
 8015052:	d158      	bne.n	8015106 <_malloc_r+0xf6>
 8015054:	f8d8 4000 	ldr.w	r4, [r8]
 8015058:	4627      	mov	r7, r4
 801505a:	2f00      	cmp	r7, #0
 801505c:	d143      	bne.n	80150e6 <_malloc_r+0xd6>
 801505e:	2c00      	cmp	r4, #0
 8015060:	d04b      	beq.n	80150fa <_malloc_r+0xea>
 8015062:	6823      	ldr	r3, [r4, #0]
 8015064:	4639      	mov	r1, r7
 8015066:	4630      	mov	r0, r6
 8015068:	eb04 0903 	add.w	r9, r4, r3
 801506c:	f000 ffc2 	bl	8015ff4 <_sbrk_r>
 8015070:	4581      	cmp	r9, r0
 8015072:	d142      	bne.n	80150fa <_malloc_r+0xea>
 8015074:	6821      	ldr	r1, [r4, #0]
 8015076:	1a6d      	subs	r5, r5, r1
 8015078:	4629      	mov	r1, r5
 801507a:	4630      	mov	r0, r6
 801507c:	f7ff ffa6 	bl	8014fcc <sbrk_aligned>
 8015080:	3001      	adds	r0, #1
 8015082:	d03a      	beq.n	80150fa <_malloc_r+0xea>
 8015084:	6823      	ldr	r3, [r4, #0]
 8015086:	442b      	add	r3, r5
 8015088:	6023      	str	r3, [r4, #0]
 801508a:	f8d8 3000 	ldr.w	r3, [r8]
 801508e:	685a      	ldr	r2, [r3, #4]
 8015090:	bb62      	cbnz	r2, 80150ec <_malloc_r+0xdc>
 8015092:	f8c8 7000 	str.w	r7, [r8]
 8015096:	e00f      	b.n	80150b8 <_malloc_r+0xa8>
 8015098:	6822      	ldr	r2, [r4, #0]
 801509a:	1b52      	subs	r2, r2, r5
 801509c:	d420      	bmi.n	80150e0 <_malloc_r+0xd0>
 801509e:	2a0b      	cmp	r2, #11
 80150a0:	d917      	bls.n	80150d2 <_malloc_r+0xc2>
 80150a2:	1961      	adds	r1, r4, r5
 80150a4:	42a3      	cmp	r3, r4
 80150a6:	6025      	str	r5, [r4, #0]
 80150a8:	bf18      	it	ne
 80150aa:	6059      	strne	r1, [r3, #4]
 80150ac:	6863      	ldr	r3, [r4, #4]
 80150ae:	bf08      	it	eq
 80150b0:	f8c8 1000 	streq.w	r1, [r8]
 80150b4:	5162      	str	r2, [r4, r5]
 80150b6:	604b      	str	r3, [r1, #4]
 80150b8:	4630      	mov	r0, r6
 80150ba:	f000 f82f 	bl	801511c <__malloc_unlock>
 80150be:	f104 000b 	add.w	r0, r4, #11
 80150c2:	1d23      	adds	r3, r4, #4
 80150c4:	f020 0007 	bic.w	r0, r0, #7
 80150c8:	1ac2      	subs	r2, r0, r3
 80150ca:	bf1c      	itt	ne
 80150cc:	1a1b      	subne	r3, r3, r0
 80150ce:	50a3      	strne	r3, [r4, r2]
 80150d0:	e7af      	b.n	8015032 <_malloc_r+0x22>
 80150d2:	6862      	ldr	r2, [r4, #4]
 80150d4:	42a3      	cmp	r3, r4
 80150d6:	bf0c      	ite	eq
 80150d8:	f8c8 2000 	streq.w	r2, [r8]
 80150dc:	605a      	strne	r2, [r3, #4]
 80150de:	e7eb      	b.n	80150b8 <_malloc_r+0xa8>
 80150e0:	4623      	mov	r3, r4
 80150e2:	6864      	ldr	r4, [r4, #4]
 80150e4:	e7ae      	b.n	8015044 <_malloc_r+0x34>
 80150e6:	463c      	mov	r4, r7
 80150e8:	687f      	ldr	r7, [r7, #4]
 80150ea:	e7b6      	b.n	801505a <_malloc_r+0x4a>
 80150ec:	461a      	mov	r2, r3
 80150ee:	685b      	ldr	r3, [r3, #4]
 80150f0:	42a3      	cmp	r3, r4
 80150f2:	d1fb      	bne.n	80150ec <_malloc_r+0xdc>
 80150f4:	2300      	movs	r3, #0
 80150f6:	6053      	str	r3, [r2, #4]
 80150f8:	e7de      	b.n	80150b8 <_malloc_r+0xa8>
 80150fa:	230c      	movs	r3, #12
 80150fc:	6033      	str	r3, [r6, #0]
 80150fe:	4630      	mov	r0, r6
 8015100:	f000 f80c 	bl	801511c <__malloc_unlock>
 8015104:	e794      	b.n	8015030 <_malloc_r+0x20>
 8015106:	6005      	str	r5, [r0, #0]
 8015108:	e7d6      	b.n	80150b8 <_malloc_r+0xa8>
 801510a:	bf00      	nop
 801510c:	20006648 	.word	0x20006648

08015110 <__malloc_lock>:
 8015110:	4801      	ldr	r0, [pc, #4]	@ (8015118 <__malloc_lock+0x8>)
 8015112:	f7ff b8ba 	b.w	801428a <__retarget_lock_acquire_recursive>
 8015116:	bf00      	nop
 8015118:	20006640 	.word	0x20006640

0801511c <__malloc_unlock>:
 801511c:	4801      	ldr	r0, [pc, #4]	@ (8015124 <__malloc_unlock+0x8>)
 801511e:	f7ff b8b5 	b.w	801428c <__retarget_lock_release_recursive>
 8015122:	bf00      	nop
 8015124:	20006640 	.word	0x20006640

08015128 <_Balloc>:
 8015128:	b570      	push	{r4, r5, r6, lr}
 801512a:	69c6      	ldr	r6, [r0, #28]
 801512c:	4604      	mov	r4, r0
 801512e:	460d      	mov	r5, r1
 8015130:	b976      	cbnz	r6, 8015150 <_Balloc+0x28>
 8015132:	2010      	movs	r0, #16
 8015134:	f7ff ff42 	bl	8014fbc <malloc>
 8015138:	4602      	mov	r2, r0
 801513a:	61e0      	str	r0, [r4, #28]
 801513c:	b920      	cbnz	r0, 8015148 <_Balloc+0x20>
 801513e:	4b18      	ldr	r3, [pc, #96]	@ (80151a0 <_Balloc+0x78>)
 8015140:	4818      	ldr	r0, [pc, #96]	@ (80151a4 <_Balloc+0x7c>)
 8015142:	216b      	movs	r1, #107	@ 0x6b
 8015144:	f000 ff74 	bl	8016030 <__assert_func>
 8015148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801514c:	6006      	str	r6, [r0, #0]
 801514e:	60c6      	str	r6, [r0, #12]
 8015150:	69e6      	ldr	r6, [r4, #28]
 8015152:	68f3      	ldr	r3, [r6, #12]
 8015154:	b183      	cbz	r3, 8015178 <_Balloc+0x50>
 8015156:	69e3      	ldr	r3, [r4, #28]
 8015158:	68db      	ldr	r3, [r3, #12]
 801515a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801515e:	b9b8      	cbnz	r0, 8015190 <_Balloc+0x68>
 8015160:	2101      	movs	r1, #1
 8015162:	fa01 f605 	lsl.w	r6, r1, r5
 8015166:	1d72      	adds	r2, r6, #5
 8015168:	0092      	lsls	r2, r2, #2
 801516a:	4620      	mov	r0, r4
 801516c:	f000 ff7e 	bl	801606c <_calloc_r>
 8015170:	b160      	cbz	r0, 801518c <_Balloc+0x64>
 8015172:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015176:	e00e      	b.n	8015196 <_Balloc+0x6e>
 8015178:	2221      	movs	r2, #33	@ 0x21
 801517a:	2104      	movs	r1, #4
 801517c:	4620      	mov	r0, r4
 801517e:	f000 ff75 	bl	801606c <_calloc_r>
 8015182:	69e3      	ldr	r3, [r4, #28]
 8015184:	60f0      	str	r0, [r6, #12]
 8015186:	68db      	ldr	r3, [r3, #12]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d1e4      	bne.n	8015156 <_Balloc+0x2e>
 801518c:	2000      	movs	r0, #0
 801518e:	bd70      	pop	{r4, r5, r6, pc}
 8015190:	6802      	ldr	r2, [r0, #0]
 8015192:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015196:	2300      	movs	r3, #0
 8015198:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801519c:	e7f7      	b.n	801518e <_Balloc+0x66>
 801519e:	bf00      	nop
 80151a0:	0801a3c9 	.word	0x0801a3c9
 80151a4:	0801a449 	.word	0x0801a449

080151a8 <_Bfree>:
 80151a8:	b570      	push	{r4, r5, r6, lr}
 80151aa:	69c6      	ldr	r6, [r0, #28]
 80151ac:	4605      	mov	r5, r0
 80151ae:	460c      	mov	r4, r1
 80151b0:	b976      	cbnz	r6, 80151d0 <_Bfree+0x28>
 80151b2:	2010      	movs	r0, #16
 80151b4:	f7ff ff02 	bl	8014fbc <malloc>
 80151b8:	4602      	mov	r2, r0
 80151ba:	61e8      	str	r0, [r5, #28]
 80151bc:	b920      	cbnz	r0, 80151c8 <_Bfree+0x20>
 80151be:	4b09      	ldr	r3, [pc, #36]	@ (80151e4 <_Bfree+0x3c>)
 80151c0:	4809      	ldr	r0, [pc, #36]	@ (80151e8 <_Bfree+0x40>)
 80151c2:	218f      	movs	r1, #143	@ 0x8f
 80151c4:	f000 ff34 	bl	8016030 <__assert_func>
 80151c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80151cc:	6006      	str	r6, [r0, #0]
 80151ce:	60c6      	str	r6, [r0, #12]
 80151d0:	b13c      	cbz	r4, 80151e2 <_Bfree+0x3a>
 80151d2:	69eb      	ldr	r3, [r5, #28]
 80151d4:	6862      	ldr	r2, [r4, #4]
 80151d6:	68db      	ldr	r3, [r3, #12]
 80151d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80151dc:	6021      	str	r1, [r4, #0]
 80151de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80151e2:	bd70      	pop	{r4, r5, r6, pc}
 80151e4:	0801a3c9 	.word	0x0801a3c9
 80151e8:	0801a449 	.word	0x0801a449

080151ec <__multadd>:
 80151ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151f0:	690d      	ldr	r5, [r1, #16]
 80151f2:	4607      	mov	r7, r0
 80151f4:	460c      	mov	r4, r1
 80151f6:	461e      	mov	r6, r3
 80151f8:	f101 0c14 	add.w	ip, r1, #20
 80151fc:	2000      	movs	r0, #0
 80151fe:	f8dc 3000 	ldr.w	r3, [ip]
 8015202:	b299      	uxth	r1, r3
 8015204:	fb02 6101 	mla	r1, r2, r1, r6
 8015208:	0c1e      	lsrs	r6, r3, #16
 801520a:	0c0b      	lsrs	r3, r1, #16
 801520c:	fb02 3306 	mla	r3, r2, r6, r3
 8015210:	b289      	uxth	r1, r1
 8015212:	3001      	adds	r0, #1
 8015214:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015218:	4285      	cmp	r5, r0
 801521a:	f84c 1b04 	str.w	r1, [ip], #4
 801521e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015222:	dcec      	bgt.n	80151fe <__multadd+0x12>
 8015224:	b30e      	cbz	r6, 801526a <__multadd+0x7e>
 8015226:	68a3      	ldr	r3, [r4, #8]
 8015228:	42ab      	cmp	r3, r5
 801522a:	dc19      	bgt.n	8015260 <__multadd+0x74>
 801522c:	6861      	ldr	r1, [r4, #4]
 801522e:	4638      	mov	r0, r7
 8015230:	3101      	adds	r1, #1
 8015232:	f7ff ff79 	bl	8015128 <_Balloc>
 8015236:	4680      	mov	r8, r0
 8015238:	b928      	cbnz	r0, 8015246 <__multadd+0x5a>
 801523a:	4602      	mov	r2, r0
 801523c:	4b0c      	ldr	r3, [pc, #48]	@ (8015270 <__multadd+0x84>)
 801523e:	480d      	ldr	r0, [pc, #52]	@ (8015274 <__multadd+0x88>)
 8015240:	21ba      	movs	r1, #186	@ 0xba
 8015242:	f000 fef5 	bl	8016030 <__assert_func>
 8015246:	6922      	ldr	r2, [r4, #16]
 8015248:	3202      	adds	r2, #2
 801524a:	f104 010c 	add.w	r1, r4, #12
 801524e:	0092      	lsls	r2, r2, #2
 8015250:	300c      	adds	r0, #12
 8015252:	f000 fedf 	bl	8016014 <memcpy>
 8015256:	4621      	mov	r1, r4
 8015258:	4638      	mov	r0, r7
 801525a:	f7ff ffa5 	bl	80151a8 <_Bfree>
 801525e:	4644      	mov	r4, r8
 8015260:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015264:	3501      	adds	r5, #1
 8015266:	615e      	str	r6, [r3, #20]
 8015268:	6125      	str	r5, [r4, #16]
 801526a:	4620      	mov	r0, r4
 801526c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015270:	0801a438 	.word	0x0801a438
 8015274:	0801a449 	.word	0x0801a449

08015278 <__hi0bits>:
 8015278:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801527c:	4603      	mov	r3, r0
 801527e:	bf36      	itet	cc
 8015280:	0403      	lslcc	r3, r0, #16
 8015282:	2000      	movcs	r0, #0
 8015284:	2010      	movcc	r0, #16
 8015286:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801528a:	bf3c      	itt	cc
 801528c:	021b      	lslcc	r3, r3, #8
 801528e:	3008      	addcc	r0, #8
 8015290:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015294:	bf3c      	itt	cc
 8015296:	011b      	lslcc	r3, r3, #4
 8015298:	3004      	addcc	r0, #4
 801529a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801529e:	bf3c      	itt	cc
 80152a0:	009b      	lslcc	r3, r3, #2
 80152a2:	3002      	addcc	r0, #2
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	db05      	blt.n	80152b4 <__hi0bits+0x3c>
 80152a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80152ac:	f100 0001 	add.w	r0, r0, #1
 80152b0:	bf08      	it	eq
 80152b2:	2020      	moveq	r0, #32
 80152b4:	4770      	bx	lr

080152b6 <__lo0bits>:
 80152b6:	6803      	ldr	r3, [r0, #0]
 80152b8:	4602      	mov	r2, r0
 80152ba:	f013 0007 	ands.w	r0, r3, #7
 80152be:	d00b      	beq.n	80152d8 <__lo0bits+0x22>
 80152c0:	07d9      	lsls	r1, r3, #31
 80152c2:	d421      	bmi.n	8015308 <__lo0bits+0x52>
 80152c4:	0798      	lsls	r0, r3, #30
 80152c6:	bf49      	itett	mi
 80152c8:	085b      	lsrmi	r3, r3, #1
 80152ca:	089b      	lsrpl	r3, r3, #2
 80152cc:	2001      	movmi	r0, #1
 80152ce:	6013      	strmi	r3, [r2, #0]
 80152d0:	bf5c      	itt	pl
 80152d2:	6013      	strpl	r3, [r2, #0]
 80152d4:	2002      	movpl	r0, #2
 80152d6:	4770      	bx	lr
 80152d8:	b299      	uxth	r1, r3
 80152da:	b909      	cbnz	r1, 80152e0 <__lo0bits+0x2a>
 80152dc:	0c1b      	lsrs	r3, r3, #16
 80152de:	2010      	movs	r0, #16
 80152e0:	b2d9      	uxtb	r1, r3
 80152e2:	b909      	cbnz	r1, 80152e8 <__lo0bits+0x32>
 80152e4:	3008      	adds	r0, #8
 80152e6:	0a1b      	lsrs	r3, r3, #8
 80152e8:	0719      	lsls	r1, r3, #28
 80152ea:	bf04      	itt	eq
 80152ec:	091b      	lsreq	r3, r3, #4
 80152ee:	3004      	addeq	r0, #4
 80152f0:	0799      	lsls	r1, r3, #30
 80152f2:	bf04      	itt	eq
 80152f4:	089b      	lsreq	r3, r3, #2
 80152f6:	3002      	addeq	r0, #2
 80152f8:	07d9      	lsls	r1, r3, #31
 80152fa:	d403      	bmi.n	8015304 <__lo0bits+0x4e>
 80152fc:	085b      	lsrs	r3, r3, #1
 80152fe:	f100 0001 	add.w	r0, r0, #1
 8015302:	d003      	beq.n	801530c <__lo0bits+0x56>
 8015304:	6013      	str	r3, [r2, #0]
 8015306:	4770      	bx	lr
 8015308:	2000      	movs	r0, #0
 801530a:	4770      	bx	lr
 801530c:	2020      	movs	r0, #32
 801530e:	4770      	bx	lr

08015310 <__i2b>:
 8015310:	b510      	push	{r4, lr}
 8015312:	460c      	mov	r4, r1
 8015314:	2101      	movs	r1, #1
 8015316:	f7ff ff07 	bl	8015128 <_Balloc>
 801531a:	4602      	mov	r2, r0
 801531c:	b928      	cbnz	r0, 801532a <__i2b+0x1a>
 801531e:	4b05      	ldr	r3, [pc, #20]	@ (8015334 <__i2b+0x24>)
 8015320:	4805      	ldr	r0, [pc, #20]	@ (8015338 <__i2b+0x28>)
 8015322:	f240 1145 	movw	r1, #325	@ 0x145
 8015326:	f000 fe83 	bl	8016030 <__assert_func>
 801532a:	2301      	movs	r3, #1
 801532c:	6144      	str	r4, [r0, #20]
 801532e:	6103      	str	r3, [r0, #16]
 8015330:	bd10      	pop	{r4, pc}
 8015332:	bf00      	nop
 8015334:	0801a438 	.word	0x0801a438
 8015338:	0801a449 	.word	0x0801a449

0801533c <__multiply>:
 801533c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015340:	4614      	mov	r4, r2
 8015342:	690a      	ldr	r2, [r1, #16]
 8015344:	6923      	ldr	r3, [r4, #16]
 8015346:	429a      	cmp	r2, r3
 8015348:	bfa8      	it	ge
 801534a:	4623      	movge	r3, r4
 801534c:	460f      	mov	r7, r1
 801534e:	bfa4      	itt	ge
 8015350:	460c      	movge	r4, r1
 8015352:	461f      	movge	r7, r3
 8015354:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015358:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801535c:	68a3      	ldr	r3, [r4, #8]
 801535e:	6861      	ldr	r1, [r4, #4]
 8015360:	eb0a 0609 	add.w	r6, sl, r9
 8015364:	42b3      	cmp	r3, r6
 8015366:	b085      	sub	sp, #20
 8015368:	bfb8      	it	lt
 801536a:	3101      	addlt	r1, #1
 801536c:	f7ff fedc 	bl	8015128 <_Balloc>
 8015370:	b930      	cbnz	r0, 8015380 <__multiply+0x44>
 8015372:	4602      	mov	r2, r0
 8015374:	4b44      	ldr	r3, [pc, #272]	@ (8015488 <__multiply+0x14c>)
 8015376:	4845      	ldr	r0, [pc, #276]	@ (801548c <__multiply+0x150>)
 8015378:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801537c:	f000 fe58 	bl	8016030 <__assert_func>
 8015380:	f100 0514 	add.w	r5, r0, #20
 8015384:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015388:	462b      	mov	r3, r5
 801538a:	2200      	movs	r2, #0
 801538c:	4543      	cmp	r3, r8
 801538e:	d321      	bcc.n	80153d4 <__multiply+0x98>
 8015390:	f107 0114 	add.w	r1, r7, #20
 8015394:	f104 0214 	add.w	r2, r4, #20
 8015398:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801539c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80153a0:	9302      	str	r3, [sp, #8]
 80153a2:	1b13      	subs	r3, r2, r4
 80153a4:	3b15      	subs	r3, #21
 80153a6:	f023 0303 	bic.w	r3, r3, #3
 80153aa:	3304      	adds	r3, #4
 80153ac:	f104 0715 	add.w	r7, r4, #21
 80153b0:	42ba      	cmp	r2, r7
 80153b2:	bf38      	it	cc
 80153b4:	2304      	movcc	r3, #4
 80153b6:	9301      	str	r3, [sp, #4]
 80153b8:	9b02      	ldr	r3, [sp, #8]
 80153ba:	9103      	str	r1, [sp, #12]
 80153bc:	428b      	cmp	r3, r1
 80153be:	d80c      	bhi.n	80153da <__multiply+0x9e>
 80153c0:	2e00      	cmp	r6, #0
 80153c2:	dd03      	ble.n	80153cc <__multiply+0x90>
 80153c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d05b      	beq.n	8015484 <__multiply+0x148>
 80153cc:	6106      	str	r6, [r0, #16]
 80153ce:	b005      	add	sp, #20
 80153d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153d4:	f843 2b04 	str.w	r2, [r3], #4
 80153d8:	e7d8      	b.n	801538c <__multiply+0x50>
 80153da:	f8b1 a000 	ldrh.w	sl, [r1]
 80153de:	f1ba 0f00 	cmp.w	sl, #0
 80153e2:	d024      	beq.n	801542e <__multiply+0xf2>
 80153e4:	f104 0e14 	add.w	lr, r4, #20
 80153e8:	46a9      	mov	r9, r5
 80153ea:	f04f 0c00 	mov.w	ip, #0
 80153ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80153f2:	f8d9 3000 	ldr.w	r3, [r9]
 80153f6:	fa1f fb87 	uxth.w	fp, r7
 80153fa:	b29b      	uxth	r3, r3
 80153fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8015400:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015404:	f8d9 7000 	ldr.w	r7, [r9]
 8015408:	4463      	add	r3, ip
 801540a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801540e:	fb0a c70b 	mla	r7, sl, fp, ip
 8015412:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015416:	b29b      	uxth	r3, r3
 8015418:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801541c:	4572      	cmp	r2, lr
 801541e:	f849 3b04 	str.w	r3, [r9], #4
 8015422:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015426:	d8e2      	bhi.n	80153ee <__multiply+0xb2>
 8015428:	9b01      	ldr	r3, [sp, #4]
 801542a:	f845 c003 	str.w	ip, [r5, r3]
 801542e:	9b03      	ldr	r3, [sp, #12]
 8015430:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015434:	3104      	adds	r1, #4
 8015436:	f1b9 0f00 	cmp.w	r9, #0
 801543a:	d021      	beq.n	8015480 <__multiply+0x144>
 801543c:	682b      	ldr	r3, [r5, #0]
 801543e:	f104 0c14 	add.w	ip, r4, #20
 8015442:	46ae      	mov	lr, r5
 8015444:	f04f 0a00 	mov.w	sl, #0
 8015448:	f8bc b000 	ldrh.w	fp, [ip]
 801544c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015450:	fb09 770b 	mla	r7, r9, fp, r7
 8015454:	4457      	add	r7, sl
 8015456:	b29b      	uxth	r3, r3
 8015458:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801545c:	f84e 3b04 	str.w	r3, [lr], #4
 8015460:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015464:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015468:	f8be 3000 	ldrh.w	r3, [lr]
 801546c:	fb09 330a 	mla	r3, r9, sl, r3
 8015470:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015474:	4562      	cmp	r2, ip
 8015476:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801547a:	d8e5      	bhi.n	8015448 <__multiply+0x10c>
 801547c:	9f01      	ldr	r7, [sp, #4]
 801547e:	51eb      	str	r3, [r5, r7]
 8015480:	3504      	adds	r5, #4
 8015482:	e799      	b.n	80153b8 <__multiply+0x7c>
 8015484:	3e01      	subs	r6, #1
 8015486:	e79b      	b.n	80153c0 <__multiply+0x84>
 8015488:	0801a438 	.word	0x0801a438
 801548c:	0801a449 	.word	0x0801a449

08015490 <__pow5mult>:
 8015490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015494:	4615      	mov	r5, r2
 8015496:	f012 0203 	ands.w	r2, r2, #3
 801549a:	4607      	mov	r7, r0
 801549c:	460e      	mov	r6, r1
 801549e:	d007      	beq.n	80154b0 <__pow5mult+0x20>
 80154a0:	4c25      	ldr	r4, [pc, #148]	@ (8015538 <__pow5mult+0xa8>)
 80154a2:	3a01      	subs	r2, #1
 80154a4:	2300      	movs	r3, #0
 80154a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80154aa:	f7ff fe9f 	bl	80151ec <__multadd>
 80154ae:	4606      	mov	r6, r0
 80154b0:	10ad      	asrs	r5, r5, #2
 80154b2:	d03d      	beq.n	8015530 <__pow5mult+0xa0>
 80154b4:	69fc      	ldr	r4, [r7, #28]
 80154b6:	b97c      	cbnz	r4, 80154d8 <__pow5mult+0x48>
 80154b8:	2010      	movs	r0, #16
 80154ba:	f7ff fd7f 	bl	8014fbc <malloc>
 80154be:	4602      	mov	r2, r0
 80154c0:	61f8      	str	r0, [r7, #28]
 80154c2:	b928      	cbnz	r0, 80154d0 <__pow5mult+0x40>
 80154c4:	4b1d      	ldr	r3, [pc, #116]	@ (801553c <__pow5mult+0xac>)
 80154c6:	481e      	ldr	r0, [pc, #120]	@ (8015540 <__pow5mult+0xb0>)
 80154c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80154cc:	f000 fdb0 	bl	8016030 <__assert_func>
 80154d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80154d4:	6004      	str	r4, [r0, #0]
 80154d6:	60c4      	str	r4, [r0, #12]
 80154d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80154dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80154e0:	b94c      	cbnz	r4, 80154f6 <__pow5mult+0x66>
 80154e2:	f240 2171 	movw	r1, #625	@ 0x271
 80154e6:	4638      	mov	r0, r7
 80154e8:	f7ff ff12 	bl	8015310 <__i2b>
 80154ec:	2300      	movs	r3, #0
 80154ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80154f2:	4604      	mov	r4, r0
 80154f4:	6003      	str	r3, [r0, #0]
 80154f6:	f04f 0900 	mov.w	r9, #0
 80154fa:	07eb      	lsls	r3, r5, #31
 80154fc:	d50a      	bpl.n	8015514 <__pow5mult+0x84>
 80154fe:	4631      	mov	r1, r6
 8015500:	4622      	mov	r2, r4
 8015502:	4638      	mov	r0, r7
 8015504:	f7ff ff1a 	bl	801533c <__multiply>
 8015508:	4631      	mov	r1, r6
 801550a:	4680      	mov	r8, r0
 801550c:	4638      	mov	r0, r7
 801550e:	f7ff fe4b 	bl	80151a8 <_Bfree>
 8015512:	4646      	mov	r6, r8
 8015514:	106d      	asrs	r5, r5, #1
 8015516:	d00b      	beq.n	8015530 <__pow5mult+0xa0>
 8015518:	6820      	ldr	r0, [r4, #0]
 801551a:	b938      	cbnz	r0, 801552c <__pow5mult+0x9c>
 801551c:	4622      	mov	r2, r4
 801551e:	4621      	mov	r1, r4
 8015520:	4638      	mov	r0, r7
 8015522:	f7ff ff0b 	bl	801533c <__multiply>
 8015526:	6020      	str	r0, [r4, #0]
 8015528:	f8c0 9000 	str.w	r9, [r0]
 801552c:	4604      	mov	r4, r0
 801552e:	e7e4      	b.n	80154fa <__pow5mult+0x6a>
 8015530:	4630      	mov	r0, r6
 8015532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015536:	bf00      	nop
 8015538:	0801a4a4 	.word	0x0801a4a4
 801553c:	0801a3c9 	.word	0x0801a3c9
 8015540:	0801a449 	.word	0x0801a449

08015544 <__lshift>:
 8015544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015548:	460c      	mov	r4, r1
 801554a:	6849      	ldr	r1, [r1, #4]
 801554c:	6923      	ldr	r3, [r4, #16]
 801554e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015552:	68a3      	ldr	r3, [r4, #8]
 8015554:	4607      	mov	r7, r0
 8015556:	4691      	mov	r9, r2
 8015558:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801555c:	f108 0601 	add.w	r6, r8, #1
 8015560:	42b3      	cmp	r3, r6
 8015562:	db0b      	blt.n	801557c <__lshift+0x38>
 8015564:	4638      	mov	r0, r7
 8015566:	f7ff fddf 	bl	8015128 <_Balloc>
 801556a:	4605      	mov	r5, r0
 801556c:	b948      	cbnz	r0, 8015582 <__lshift+0x3e>
 801556e:	4602      	mov	r2, r0
 8015570:	4b28      	ldr	r3, [pc, #160]	@ (8015614 <__lshift+0xd0>)
 8015572:	4829      	ldr	r0, [pc, #164]	@ (8015618 <__lshift+0xd4>)
 8015574:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015578:	f000 fd5a 	bl	8016030 <__assert_func>
 801557c:	3101      	adds	r1, #1
 801557e:	005b      	lsls	r3, r3, #1
 8015580:	e7ee      	b.n	8015560 <__lshift+0x1c>
 8015582:	2300      	movs	r3, #0
 8015584:	f100 0114 	add.w	r1, r0, #20
 8015588:	f100 0210 	add.w	r2, r0, #16
 801558c:	4618      	mov	r0, r3
 801558e:	4553      	cmp	r3, sl
 8015590:	db33      	blt.n	80155fa <__lshift+0xb6>
 8015592:	6920      	ldr	r0, [r4, #16]
 8015594:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015598:	f104 0314 	add.w	r3, r4, #20
 801559c:	f019 091f 	ands.w	r9, r9, #31
 80155a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80155a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80155a8:	d02b      	beq.n	8015602 <__lshift+0xbe>
 80155aa:	f1c9 0e20 	rsb	lr, r9, #32
 80155ae:	468a      	mov	sl, r1
 80155b0:	2200      	movs	r2, #0
 80155b2:	6818      	ldr	r0, [r3, #0]
 80155b4:	fa00 f009 	lsl.w	r0, r0, r9
 80155b8:	4310      	orrs	r0, r2
 80155ba:	f84a 0b04 	str.w	r0, [sl], #4
 80155be:	f853 2b04 	ldr.w	r2, [r3], #4
 80155c2:	459c      	cmp	ip, r3
 80155c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80155c8:	d8f3      	bhi.n	80155b2 <__lshift+0x6e>
 80155ca:	ebac 0304 	sub.w	r3, ip, r4
 80155ce:	3b15      	subs	r3, #21
 80155d0:	f023 0303 	bic.w	r3, r3, #3
 80155d4:	3304      	adds	r3, #4
 80155d6:	f104 0015 	add.w	r0, r4, #21
 80155da:	4584      	cmp	ip, r0
 80155dc:	bf38      	it	cc
 80155de:	2304      	movcc	r3, #4
 80155e0:	50ca      	str	r2, [r1, r3]
 80155e2:	b10a      	cbz	r2, 80155e8 <__lshift+0xa4>
 80155e4:	f108 0602 	add.w	r6, r8, #2
 80155e8:	3e01      	subs	r6, #1
 80155ea:	4638      	mov	r0, r7
 80155ec:	612e      	str	r6, [r5, #16]
 80155ee:	4621      	mov	r1, r4
 80155f0:	f7ff fdda 	bl	80151a8 <_Bfree>
 80155f4:	4628      	mov	r0, r5
 80155f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80155fe:	3301      	adds	r3, #1
 8015600:	e7c5      	b.n	801558e <__lshift+0x4a>
 8015602:	3904      	subs	r1, #4
 8015604:	f853 2b04 	ldr.w	r2, [r3], #4
 8015608:	f841 2f04 	str.w	r2, [r1, #4]!
 801560c:	459c      	cmp	ip, r3
 801560e:	d8f9      	bhi.n	8015604 <__lshift+0xc0>
 8015610:	e7ea      	b.n	80155e8 <__lshift+0xa4>
 8015612:	bf00      	nop
 8015614:	0801a438 	.word	0x0801a438
 8015618:	0801a449 	.word	0x0801a449

0801561c <__mcmp>:
 801561c:	690a      	ldr	r2, [r1, #16]
 801561e:	4603      	mov	r3, r0
 8015620:	6900      	ldr	r0, [r0, #16]
 8015622:	1a80      	subs	r0, r0, r2
 8015624:	b530      	push	{r4, r5, lr}
 8015626:	d10e      	bne.n	8015646 <__mcmp+0x2a>
 8015628:	3314      	adds	r3, #20
 801562a:	3114      	adds	r1, #20
 801562c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015630:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015634:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015638:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801563c:	4295      	cmp	r5, r2
 801563e:	d003      	beq.n	8015648 <__mcmp+0x2c>
 8015640:	d205      	bcs.n	801564e <__mcmp+0x32>
 8015642:	f04f 30ff 	mov.w	r0, #4294967295
 8015646:	bd30      	pop	{r4, r5, pc}
 8015648:	42a3      	cmp	r3, r4
 801564a:	d3f3      	bcc.n	8015634 <__mcmp+0x18>
 801564c:	e7fb      	b.n	8015646 <__mcmp+0x2a>
 801564e:	2001      	movs	r0, #1
 8015650:	e7f9      	b.n	8015646 <__mcmp+0x2a>
	...

08015654 <__mdiff>:
 8015654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015658:	4689      	mov	r9, r1
 801565a:	4606      	mov	r6, r0
 801565c:	4611      	mov	r1, r2
 801565e:	4648      	mov	r0, r9
 8015660:	4614      	mov	r4, r2
 8015662:	f7ff ffdb 	bl	801561c <__mcmp>
 8015666:	1e05      	subs	r5, r0, #0
 8015668:	d112      	bne.n	8015690 <__mdiff+0x3c>
 801566a:	4629      	mov	r1, r5
 801566c:	4630      	mov	r0, r6
 801566e:	f7ff fd5b 	bl	8015128 <_Balloc>
 8015672:	4602      	mov	r2, r0
 8015674:	b928      	cbnz	r0, 8015682 <__mdiff+0x2e>
 8015676:	4b3f      	ldr	r3, [pc, #252]	@ (8015774 <__mdiff+0x120>)
 8015678:	f240 2137 	movw	r1, #567	@ 0x237
 801567c:	483e      	ldr	r0, [pc, #248]	@ (8015778 <__mdiff+0x124>)
 801567e:	f000 fcd7 	bl	8016030 <__assert_func>
 8015682:	2301      	movs	r3, #1
 8015684:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015688:	4610      	mov	r0, r2
 801568a:	b003      	add	sp, #12
 801568c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015690:	bfbc      	itt	lt
 8015692:	464b      	movlt	r3, r9
 8015694:	46a1      	movlt	r9, r4
 8015696:	4630      	mov	r0, r6
 8015698:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801569c:	bfba      	itte	lt
 801569e:	461c      	movlt	r4, r3
 80156a0:	2501      	movlt	r5, #1
 80156a2:	2500      	movge	r5, #0
 80156a4:	f7ff fd40 	bl	8015128 <_Balloc>
 80156a8:	4602      	mov	r2, r0
 80156aa:	b918      	cbnz	r0, 80156b4 <__mdiff+0x60>
 80156ac:	4b31      	ldr	r3, [pc, #196]	@ (8015774 <__mdiff+0x120>)
 80156ae:	f240 2145 	movw	r1, #581	@ 0x245
 80156b2:	e7e3      	b.n	801567c <__mdiff+0x28>
 80156b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80156b8:	6926      	ldr	r6, [r4, #16]
 80156ba:	60c5      	str	r5, [r0, #12]
 80156bc:	f109 0310 	add.w	r3, r9, #16
 80156c0:	f109 0514 	add.w	r5, r9, #20
 80156c4:	f104 0e14 	add.w	lr, r4, #20
 80156c8:	f100 0b14 	add.w	fp, r0, #20
 80156cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80156d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80156d4:	9301      	str	r3, [sp, #4]
 80156d6:	46d9      	mov	r9, fp
 80156d8:	f04f 0c00 	mov.w	ip, #0
 80156dc:	9b01      	ldr	r3, [sp, #4]
 80156de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80156e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80156e6:	9301      	str	r3, [sp, #4]
 80156e8:	fa1f f38a 	uxth.w	r3, sl
 80156ec:	4619      	mov	r1, r3
 80156ee:	b283      	uxth	r3, r0
 80156f0:	1acb      	subs	r3, r1, r3
 80156f2:	0c00      	lsrs	r0, r0, #16
 80156f4:	4463      	add	r3, ip
 80156f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80156fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80156fe:	b29b      	uxth	r3, r3
 8015700:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015704:	4576      	cmp	r6, lr
 8015706:	f849 3b04 	str.w	r3, [r9], #4
 801570a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801570e:	d8e5      	bhi.n	80156dc <__mdiff+0x88>
 8015710:	1b33      	subs	r3, r6, r4
 8015712:	3b15      	subs	r3, #21
 8015714:	f023 0303 	bic.w	r3, r3, #3
 8015718:	3415      	adds	r4, #21
 801571a:	3304      	adds	r3, #4
 801571c:	42a6      	cmp	r6, r4
 801571e:	bf38      	it	cc
 8015720:	2304      	movcc	r3, #4
 8015722:	441d      	add	r5, r3
 8015724:	445b      	add	r3, fp
 8015726:	461e      	mov	r6, r3
 8015728:	462c      	mov	r4, r5
 801572a:	4544      	cmp	r4, r8
 801572c:	d30e      	bcc.n	801574c <__mdiff+0xf8>
 801572e:	f108 0103 	add.w	r1, r8, #3
 8015732:	1b49      	subs	r1, r1, r5
 8015734:	f021 0103 	bic.w	r1, r1, #3
 8015738:	3d03      	subs	r5, #3
 801573a:	45a8      	cmp	r8, r5
 801573c:	bf38      	it	cc
 801573e:	2100      	movcc	r1, #0
 8015740:	440b      	add	r3, r1
 8015742:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015746:	b191      	cbz	r1, 801576e <__mdiff+0x11a>
 8015748:	6117      	str	r7, [r2, #16]
 801574a:	e79d      	b.n	8015688 <__mdiff+0x34>
 801574c:	f854 1b04 	ldr.w	r1, [r4], #4
 8015750:	46e6      	mov	lr, ip
 8015752:	0c08      	lsrs	r0, r1, #16
 8015754:	fa1c fc81 	uxtah	ip, ip, r1
 8015758:	4471      	add	r1, lr
 801575a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801575e:	b289      	uxth	r1, r1
 8015760:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8015764:	f846 1b04 	str.w	r1, [r6], #4
 8015768:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801576c:	e7dd      	b.n	801572a <__mdiff+0xd6>
 801576e:	3f01      	subs	r7, #1
 8015770:	e7e7      	b.n	8015742 <__mdiff+0xee>
 8015772:	bf00      	nop
 8015774:	0801a438 	.word	0x0801a438
 8015778:	0801a449 	.word	0x0801a449

0801577c <__d2b>:
 801577c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015780:	460f      	mov	r7, r1
 8015782:	2101      	movs	r1, #1
 8015784:	ec59 8b10 	vmov	r8, r9, d0
 8015788:	4616      	mov	r6, r2
 801578a:	f7ff fccd 	bl	8015128 <_Balloc>
 801578e:	4604      	mov	r4, r0
 8015790:	b930      	cbnz	r0, 80157a0 <__d2b+0x24>
 8015792:	4602      	mov	r2, r0
 8015794:	4b23      	ldr	r3, [pc, #140]	@ (8015824 <__d2b+0xa8>)
 8015796:	4824      	ldr	r0, [pc, #144]	@ (8015828 <__d2b+0xac>)
 8015798:	f240 310f 	movw	r1, #783	@ 0x30f
 801579c:	f000 fc48 	bl	8016030 <__assert_func>
 80157a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80157a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80157a8:	b10d      	cbz	r5, 80157ae <__d2b+0x32>
 80157aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80157ae:	9301      	str	r3, [sp, #4]
 80157b0:	f1b8 0300 	subs.w	r3, r8, #0
 80157b4:	d023      	beq.n	80157fe <__d2b+0x82>
 80157b6:	4668      	mov	r0, sp
 80157b8:	9300      	str	r3, [sp, #0]
 80157ba:	f7ff fd7c 	bl	80152b6 <__lo0bits>
 80157be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80157c2:	b1d0      	cbz	r0, 80157fa <__d2b+0x7e>
 80157c4:	f1c0 0320 	rsb	r3, r0, #32
 80157c8:	fa02 f303 	lsl.w	r3, r2, r3
 80157cc:	430b      	orrs	r3, r1
 80157ce:	40c2      	lsrs	r2, r0
 80157d0:	6163      	str	r3, [r4, #20]
 80157d2:	9201      	str	r2, [sp, #4]
 80157d4:	9b01      	ldr	r3, [sp, #4]
 80157d6:	61a3      	str	r3, [r4, #24]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	bf0c      	ite	eq
 80157dc:	2201      	moveq	r2, #1
 80157de:	2202      	movne	r2, #2
 80157e0:	6122      	str	r2, [r4, #16]
 80157e2:	b1a5      	cbz	r5, 801580e <__d2b+0x92>
 80157e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80157e8:	4405      	add	r5, r0
 80157ea:	603d      	str	r5, [r7, #0]
 80157ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80157f0:	6030      	str	r0, [r6, #0]
 80157f2:	4620      	mov	r0, r4
 80157f4:	b003      	add	sp, #12
 80157f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157fa:	6161      	str	r1, [r4, #20]
 80157fc:	e7ea      	b.n	80157d4 <__d2b+0x58>
 80157fe:	a801      	add	r0, sp, #4
 8015800:	f7ff fd59 	bl	80152b6 <__lo0bits>
 8015804:	9b01      	ldr	r3, [sp, #4]
 8015806:	6163      	str	r3, [r4, #20]
 8015808:	3020      	adds	r0, #32
 801580a:	2201      	movs	r2, #1
 801580c:	e7e8      	b.n	80157e0 <__d2b+0x64>
 801580e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015812:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8015816:	6038      	str	r0, [r7, #0]
 8015818:	6918      	ldr	r0, [r3, #16]
 801581a:	f7ff fd2d 	bl	8015278 <__hi0bits>
 801581e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015822:	e7e5      	b.n	80157f0 <__d2b+0x74>
 8015824:	0801a438 	.word	0x0801a438
 8015828:	0801a449 	.word	0x0801a449

0801582c <__ssputs_r>:
 801582c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015830:	688e      	ldr	r6, [r1, #8]
 8015832:	461f      	mov	r7, r3
 8015834:	42be      	cmp	r6, r7
 8015836:	680b      	ldr	r3, [r1, #0]
 8015838:	4682      	mov	sl, r0
 801583a:	460c      	mov	r4, r1
 801583c:	4690      	mov	r8, r2
 801583e:	d82d      	bhi.n	801589c <__ssputs_r+0x70>
 8015840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8015848:	d026      	beq.n	8015898 <__ssputs_r+0x6c>
 801584a:	6965      	ldr	r5, [r4, #20]
 801584c:	6909      	ldr	r1, [r1, #16]
 801584e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015852:	eba3 0901 	sub.w	r9, r3, r1
 8015856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801585a:	1c7b      	adds	r3, r7, #1
 801585c:	444b      	add	r3, r9
 801585e:	106d      	asrs	r5, r5, #1
 8015860:	429d      	cmp	r5, r3
 8015862:	bf38      	it	cc
 8015864:	461d      	movcc	r5, r3
 8015866:	0553      	lsls	r3, r2, #21
 8015868:	d527      	bpl.n	80158ba <__ssputs_r+0x8e>
 801586a:	4629      	mov	r1, r5
 801586c:	f7ff fbd0 	bl	8015010 <_malloc_r>
 8015870:	4606      	mov	r6, r0
 8015872:	b360      	cbz	r0, 80158ce <__ssputs_r+0xa2>
 8015874:	6921      	ldr	r1, [r4, #16]
 8015876:	464a      	mov	r2, r9
 8015878:	f000 fbcc 	bl	8016014 <memcpy>
 801587c:	89a3      	ldrh	r3, [r4, #12]
 801587e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8015882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015886:	81a3      	strh	r3, [r4, #12]
 8015888:	6126      	str	r6, [r4, #16]
 801588a:	6165      	str	r5, [r4, #20]
 801588c:	444e      	add	r6, r9
 801588e:	eba5 0509 	sub.w	r5, r5, r9
 8015892:	6026      	str	r6, [r4, #0]
 8015894:	60a5      	str	r5, [r4, #8]
 8015896:	463e      	mov	r6, r7
 8015898:	42be      	cmp	r6, r7
 801589a:	d900      	bls.n	801589e <__ssputs_r+0x72>
 801589c:	463e      	mov	r6, r7
 801589e:	6820      	ldr	r0, [r4, #0]
 80158a0:	4632      	mov	r2, r6
 80158a2:	4641      	mov	r1, r8
 80158a4:	f000 fb6a 	bl	8015f7c <memmove>
 80158a8:	68a3      	ldr	r3, [r4, #8]
 80158aa:	1b9b      	subs	r3, r3, r6
 80158ac:	60a3      	str	r3, [r4, #8]
 80158ae:	6823      	ldr	r3, [r4, #0]
 80158b0:	4433      	add	r3, r6
 80158b2:	6023      	str	r3, [r4, #0]
 80158b4:	2000      	movs	r0, #0
 80158b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158ba:	462a      	mov	r2, r5
 80158bc:	f000 fbfc 	bl	80160b8 <_realloc_r>
 80158c0:	4606      	mov	r6, r0
 80158c2:	2800      	cmp	r0, #0
 80158c4:	d1e0      	bne.n	8015888 <__ssputs_r+0x5c>
 80158c6:	6921      	ldr	r1, [r4, #16]
 80158c8:	4650      	mov	r0, sl
 80158ca:	f7ff fb2d 	bl	8014f28 <_free_r>
 80158ce:	230c      	movs	r3, #12
 80158d0:	f8ca 3000 	str.w	r3, [sl]
 80158d4:	89a3      	ldrh	r3, [r4, #12]
 80158d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80158da:	81a3      	strh	r3, [r4, #12]
 80158dc:	f04f 30ff 	mov.w	r0, #4294967295
 80158e0:	e7e9      	b.n	80158b6 <__ssputs_r+0x8a>
	...

080158e4 <_svfiprintf_r>:
 80158e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e8:	4698      	mov	r8, r3
 80158ea:	898b      	ldrh	r3, [r1, #12]
 80158ec:	061b      	lsls	r3, r3, #24
 80158ee:	b09d      	sub	sp, #116	@ 0x74
 80158f0:	4607      	mov	r7, r0
 80158f2:	460d      	mov	r5, r1
 80158f4:	4614      	mov	r4, r2
 80158f6:	d510      	bpl.n	801591a <_svfiprintf_r+0x36>
 80158f8:	690b      	ldr	r3, [r1, #16]
 80158fa:	b973      	cbnz	r3, 801591a <_svfiprintf_r+0x36>
 80158fc:	2140      	movs	r1, #64	@ 0x40
 80158fe:	f7ff fb87 	bl	8015010 <_malloc_r>
 8015902:	6028      	str	r0, [r5, #0]
 8015904:	6128      	str	r0, [r5, #16]
 8015906:	b930      	cbnz	r0, 8015916 <_svfiprintf_r+0x32>
 8015908:	230c      	movs	r3, #12
 801590a:	603b      	str	r3, [r7, #0]
 801590c:	f04f 30ff 	mov.w	r0, #4294967295
 8015910:	b01d      	add	sp, #116	@ 0x74
 8015912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015916:	2340      	movs	r3, #64	@ 0x40
 8015918:	616b      	str	r3, [r5, #20]
 801591a:	2300      	movs	r3, #0
 801591c:	9309      	str	r3, [sp, #36]	@ 0x24
 801591e:	2320      	movs	r3, #32
 8015920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015924:	f8cd 800c 	str.w	r8, [sp, #12]
 8015928:	2330      	movs	r3, #48	@ 0x30
 801592a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8015ac8 <_svfiprintf_r+0x1e4>
 801592e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015932:	f04f 0901 	mov.w	r9, #1
 8015936:	4623      	mov	r3, r4
 8015938:	469a      	mov	sl, r3
 801593a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801593e:	b10a      	cbz	r2, 8015944 <_svfiprintf_r+0x60>
 8015940:	2a25      	cmp	r2, #37	@ 0x25
 8015942:	d1f9      	bne.n	8015938 <_svfiprintf_r+0x54>
 8015944:	ebba 0b04 	subs.w	fp, sl, r4
 8015948:	d00b      	beq.n	8015962 <_svfiprintf_r+0x7e>
 801594a:	465b      	mov	r3, fp
 801594c:	4622      	mov	r2, r4
 801594e:	4629      	mov	r1, r5
 8015950:	4638      	mov	r0, r7
 8015952:	f7ff ff6b 	bl	801582c <__ssputs_r>
 8015956:	3001      	adds	r0, #1
 8015958:	f000 80a7 	beq.w	8015aaa <_svfiprintf_r+0x1c6>
 801595c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801595e:	445a      	add	r2, fp
 8015960:	9209      	str	r2, [sp, #36]	@ 0x24
 8015962:	f89a 3000 	ldrb.w	r3, [sl]
 8015966:	2b00      	cmp	r3, #0
 8015968:	f000 809f 	beq.w	8015aaa <_svfiprintf_r+0x1c6>
 801596c:	2300      	movs	r3, #0
 801596e:	f04f 32ff 	mov.w	r2, #4294967295
 8015972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015976:	f10a 0a01 	add.w	sl, sl, #1
 801597a:	9304      	str	r3, [sp, #16]
 801597c:	9307      	str	r3, [sp, #28]
 801597e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015982:	931a      	str	r3, [sp, #104]	@ 0x68
 8015984:	4654      	mov	r4, sl
 8015986:	2205      	movs	r2, #5
 8015988:	f814 1b01 	ldrb.w	r1, [r4], #1
 801598c:	484e      	ldr	r0, [pc, #312]	@ (8015ac8 <_svfiprintf_r+0x1e4>)
 801598e:	f7ea fc3f 	bl	8000210 <memchr>
 8015992:	9a04      	ldr	r2, [sp, #16]
 8015994:	b9d8      	cbnz	r0, 80159ce <_svfiprintf_r+0xea>
 8015996:	06d0      	lsls	r0, r2, #27
 8015998:	bf44      	itt	mi
 801599a:	2320      	movmi	r3, #32
 801599c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80159a0:	0711      	lsls	r1, r2, #28
 80159a2:	bf44      	itt	mi
 80159a4:	232b      	movmi	r3, #43	@ 0x2b
 80159a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80159aa:	f89a 3000 	ldrb.w	r3, [sl]
 80159ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80159b0:	d015      	beq.n	80159de <_svfiprintf_r+0xfa>
 80159b2:	9a07      	ldr	r2, [sp, #28]
 80159b4:	4654      	mov	r4, sl
 80159b6:	2000      	movs	r0, #0
 80159b8:	f04f 0c0a 	mov.w	ip, #10
 80159bc:	4621      	mov	r1, r4
 80159be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80159c2:	3b30      	subs	r3, #48	@ 0x30
 80159c4:	2b09      	cmp	r3, #9
 80159c6:	d94b      	bls.n	8015a60 <_svfiprintf_r+0x17c>
 80159c8:	b1b0      	cbz	r0, 80159f8 <_svfiprintf_r+0x114>
 80159ca:	9207      	str	r2, [sp, #28]
 80159cc:	e014      	b.n	80159f8 <_svfiprintf_r+0x114>
 80159ce:	eba0 0308 	sub.w	r3, r0, r8
 80159d2:	fa09 f303 	lsl.w	r3, r9, r3
 80159d6:	4313      	orrs	r3, r2
 80159d8:	9304      	str	r3, [sp, #16]
 80159da:	46a2      	mov	sl, r4
 80159dc:	e7d2      	b.n	8015984 <_svfiprintf_r+0xa0>
 80159de:	9b03      	ldr	r3, [sp, #12]
 80159e0:	1d19      	adds	r1, r3, #4
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	9103      	str	r1, [sp, #12]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	bfbb      	ittet	lt
 80159ea:	425b      	neglt	r3, r3
 80159ec:	f042 0202 	orrlt.w	r2, r2, #2
 80159f0:	9307      	strge	r3, [sp, #28]
 80159f2:	9307      	strlt	r3, [sp, #28]
 80159f4:	bfb8      	it	lt
 80159f6:	9204      	strlt	r2, [sp, #16]
 80159f8:	7823      	ldrb	r3, [r4, #0]
 80159fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80159fc:	d10a      	bne.n	8015a14 <_svfiprintf_r+0x130>
 80159fe:	7863      	ldrb	r3, [r4, #1]
 8015a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a02:	d132      	bne.n	8015a6a <_svfiprintf_r+0x186>
 8015a04:	9b03      	ldr	r3, [sp, #12]
 8015a06:	1d1a      	adds	r2, r3, #4
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	9203      	str	r2, [sp, #12]
 8015a0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015a10:	3402      	adds	r4, #2
 8015a12:	9305      	str	r3, [sp, #20]
 8015a14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8015ad8 <_svfiprintf_r+0x1f4>
 8015a18:	7821      	ldrb	r1, [r4, #0]
 8015a1a:	2203      	movs	r2, #3
 8015a1c:	4650      	mov	r0, sl
 8015a1e:	f7ea fbf7 	bl	8000210 <memchr>
 8015a22:	b138      	cbz	r0, 8015a34 <_svfiprintf_r+0x150>
 8015a24:	9b04      	ldr	r3, [sp, #16]
 8015a26:	eba0 000a 	sub.w	r0, r0, sl
 8015a2a:	2240      	movs	r2, #64	@ 0x40
 8015a2c:	4082      	lsls	r2, r0
 8015a2e:	4313      	orrs	r3, r2
 8015a30:	3401      	adds	r4, #1
 8015a32:	9304      	str	r3, [sp, #16]
 8015a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a38:	4824      	ldr	r0, [pc, #144]	@ (8015acc <_svfiprintf_r+0x1e8>)
 8015a3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015a3e:	2206      	movs	r2, #6
 8015a40:	f7ea fbe6 	bl	8000210 <memchr>
 8015a44:	2800      	cmp	r0, #0
 8015a46:	d036      	beq.n	8015ab6 <_svfiprintf_r+0x1d2>
 8015a48:	4b21      	ldr	r3, [pc, #132]	@ (8015ad0 <_svfiprintf_r+0x1ec>)
 8015a4a:	bb1b      	cbnz	r3, 8015a94 <_svfiprintf_r+0x1b0>
 8015a4c:	9b03      	ldr	r3, [sp, #12]
 8015a4e:	3307      	adds	r3, #7
 8015a50:	f023 0307 	bic.w	r3, r3, #7
 8015a54:	3308      	adds	r3, #8
 8015a56:	9303      	str	r3, [sp, #12]
 8015a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a5a:	4433      	add	r3, r6
 8015a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a5e:	e76a      	b.n	8015936 <_svfiprintf_r+0x52>
 8015a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8015a64:	460c      	mov	r4, r1
 8015a66:	2001      	movs	r0, #1
 8015a68:	e7a8      	b.n	80159bc <_svfiprintf_r+0xd8>
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	3401      	adds	r4, #1
 8015a6e:	9305      	str	r3, [sp, #20]
 8015a70:	4619      	mov	r1, r3
 8015a72:	f04f 0c0a 	mov.w	ip, #10
 8015a76:	4620      	mov	r0, r4
 8015a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015a7c:	3a30      	subs	r2, #48	@ 0x30
 8015a7e:	2a09      	cmp	r2, #9
 8015a80:	d903      	bls.n	8015a8a <_svfiprintf_r+0x1a6>
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d0c6      	beq.n	8015a14 <_svfiprintf_r+0x130>
 8015a86:	9105      	str	r1, [sp, #20]
 8015a88:	e7c4      	b.n	8015a14 <_svfiprintf_r+0x130>
 8015a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8015a8e:	4604      	mov	r4, r0
 8015a90:	2301      	movs	r3, #1
 8015a92:	e7f0      	b.n	8015a76 <_svfiprintf_r+0x192>
 8015a94:	ab03      	add	r3, sp, #12
 8015a96:	9300      	str	r3, [sp, #0]
 8015a98:	462a      	mov	r2, r5
 8015a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8015ad4 <_svfiprintf_r+0x1f0>)
 8015a9c:	a904      	add	r1, sp, #16
 8015a9e:	4638      	mov	r0, r7
 8015aa0:	f7fd fd60 	bl	8013564 <_printf_float>
 8015aa4:	1c42      	adds	r2, r0, #1
 8015aa6:	4606      	mov	r6, r0
 8015aa8:	d1d6      	bne.n	8015a58 <_svfiprintf_r+0x174>
 8015aaa:	89ab      	ldrh	r3, [r5, #12]
 8015aac:	065b      	lsls	r3, r3, #25
 8015aae:	f53f af2d 	bmi.w	801590c <_svfiprintf_r+0x28>
 8015ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015ab4:	e72c      	b.n	8015910 <_svfiprintf_r+0x2c>
 8015ab6:	ab03      	add	r3, sp, #12
 8015ab8:	9300      	str	r3, [sp, #0]
 8015aba:	462a      	mov	r2, r5
 8015abc:	4b05      	ldr	r3, [pc, #20]	@ (8015ad4 <_svfiprintf_r+0x1f0>)
 8015abe:	a904      	add	r1, sp, #16
 8015ac0:	4638      	mov	r0, r7
 8015ac2:	f7fd ffe7 	bl	8013a94 <_printf_i>
 8015ac6:	e7ed      	b.n	8015aa4 <_svfiprintf_r+0x1c0>
 8015ac8:	0801a5a0 	.word	0x0801a5a0
 8015acc:	0801a5aa 	.word	0x0801a5aa
 8015ad0:	08013565 	.word	0x08013565
 8015ad4:	0801582d 	.word	0x0801582d
 8015ad8:	0801a5a6 	.word	0x0801a5a6

08015adc <__sfputc_r>:
 8015adc:	6893      	ldr	r3, [r2, #8]
 8015ade:	3b01      	subs	r3, #1
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	b410      	push	{r4}
 8015ae4:	6093      	str	r3, [r2, #8]
 8015ae6:	da08      	bge.n	8015afa <__sfputc_r+0x1e>
 8015ae8:	6994      	ldr	r4, [r2, #24]
 8015aea:	42a3      	cmp	r3, r4
 8015aec:	db01      	blt.n	8015af2 <__sfputc_r+0x16>
 8015aee:	290a      	cmp	r1, #10
 8015af0:	d103      	bne.n	8015afa <__sfputc_r+0x1e>
 8015af2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015af6:	f7fe bab6 	b.w	8014066 <__swbuf_r>
 8015afa:	6813      	ldr	r3, [r2, #0]
 8015afc:	1c58      	adds	r0, r3, #1
 8015afe:	6010      	str	r0, [r2, #0]
 8015b00:	7019      	strb	r1, [r3, #0]
 8015b02:	4608      	mov	r0, r1
 8015b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015b08:	4770      	bx	lr

08015b0a <__sfputs_r>:
 8015b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b0c:	4606      	mov	r6, r0
 8015b0e:	460f      	mov	r7, r1
 8015b10:	4614      	mov	r4, r2
 8015b12:	18d5      	adds	r5, r2, r3
 8015b14:	42ac      	cmp	r4, r5
 8015b16:	d101      	bne.n	8015b1c <__sfputs_r+0x12>
 8015b18:	2000      	movs	r0, #0
 8015b1a:	e007      	b.n	8015b2c <__sfputs_r+0x22>
 8015b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b20:	463a      	mov	r2, r7
 8015b22:	4630      	mov	r0, r6
 8015b24:	f7ff ffda 	bl	8015adc <__sfputc_r>
 8015b28:	1c43      	adds	r3, r0, #1
 8015b2a:	d1f3      	bne.n	8015b14 <__sfputs_r+0xa>
 8015b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015b30 <_vfiprintf_r>:
 8015b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b34:	460d      	mov	r5, r1
 8015b36:	b09d      	sub	sp, #116	@ 0x74
 8015b38:	4614      	mov	r4, r2
 8015b3a:	4698      	mov	r8, r3
 8015b3c:	4606      	mov	r6, r0
 8015b3e:	b118      	cbz	r0, 8015b48 <_vfiprintf_r+0x18>
 8015b40:	6a03      	ldr	r3, [r0, #32]
 8015b42:	b90b      	cbnz	r3, 8015b48 <_vfiprintf_r+0x18>
 8015b44:	f7fe f952 	bl	8013dec <__sinit>
 8015b48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015b4a:	07d9      	lsls	r1, r3, #31
 8015b4c:	d405      	bmi.n	8015b5a <_vfiprintf_r+0x2a>
 8015b4e:	89ab      	ldrh	r3, [r5, #12]
 8015b50:	059a      	lsls	r2, r3, #22
 8015b52:	d402      	bmi.n	8015b5a <_vfiprintf_r+0x2a>
 8015b54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015b56:	f7fe fb98 	bl	801428a <__retarget_lock_acquire_recursive>
 8015b5a:	89ab      	ldrh	r3, [r5, #12]
 8015b5c:	071b      	lsls	r3, r3, #28
 8015b5e:	d501      	bpl.n	8015b64 <_vfiprintf_r+0x34>
 8015b60:	692b      	ldr	r3, [r5, #16]
 8015b62:	b99b      	cbnz	r3, 8015b8c <_vfiprintf_r+0x5c>
 8015b64:	4629      	mov	r1, r5
 8015b66:	4630      	mov	r0, r6
 8015b68:	f7fe fabc 	bl	80140e4 <__swsetup_r>
 8015b6c:	b170      	cbz	r0, 8015b8c <_vfiprintf_r+0x5c>
 8015b6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015b70:	07dc      	lsls	r4, r3, #31
 8015b72:	d504      	bpl.n	8015b7e <_vfiprintf_r+0x4e>
 8015b74:	f04f 30ff 	mov.w	r0, #4294967295
 8015b78:	b01d      	add	sp, #116	@ 0x74
 8015b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b7e:	89ab      	ldrh	r3, [r5, #12]
 8015b80:	0598      	lsls	r0, r3, #22
 8015b82:	d4f7      	bmi.n	8015b74 <_vfiprintf_r+0x44>
 8015b84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015b86:	f7fe fb81 	bl	801428c <__retarget_lock_release_recursive>
 8015b8a:	e7f3      	b.n	8015b74 <_vfiprintf_r+0x44>
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b90:	2320      	movs	r3, #32
 8015b92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015b96:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b9a:	2330      	movs	r3, #48	@ 0x30
 8015b9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015d4c <_vfiprintf_r+0x21c>
 8015ba0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015ba4:	f04f 0901 	mov.w	r9, #1
 8015ba8:	4623      	mov	r3, r4
 8015baa:	469a      	mov	sl, r3
 8015bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015bb0:	b10a      	cbz	r2, 8015bb6 <_vfiprintf_r+0x86>
 8015bb2:	2a25      	cmp	r2, #37	@ 0x25
 8015bb4:	d1f9      	bne.n	8015baa <_vfiprintf_r+0x7a>
 8015bb6:	ebba 0b04 	subs.w	fp, sl, r4
 8015bba:	d00b      	beq.n	8015bd4 <_vfiprintf_r+0xa4>
 8015bbc:	465b      	mov	r3, fp
 8015bbe:	4622      	mov	r2, r4
 8015bc0:	4629      	mov	r1, r5
 8015bc2:	4630      	mov	r0, r6
 8015bc4:	f7ff ffa1 	bl	8015b0a <__sfputs_r>
 8015bc8:	3001      	adds	r0, #1
 8015bca:	f000 80a7 	beq.w	8015d1c <_vfiprintf_r+0x1ec>
 8015bce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015bd0:	445a      	add	r2, fp
 8015bd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8015bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	f000 809f 	beq.w	8015d1c <_vfiprintf_r+0x1ec>
 8015bde:	2300      	movs	r3, #0
 8015be0:	f04f 32ff 	mov.w	r2, #4294967295
 8015be4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015be8:	f10a 0a01 	add.w	sl, sl, #1
 8015bec:	9304      	str	r3, [sp, #16]
 8015bee:	9307      	str	r3, [sp, #28]
 8015bf0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015bf4:	931a      	str	r3, [sp, #104]	@ 0x68
 8015bf6:	4654      	mov	r4, sl
 8015bf8:	2205      	movs	r2, #5
 8015bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bfe:	4853      	ldr	r0, [pc, #332]	@ (8015d4c <_vfiprintf_r+0x21c>)
 8015c00:	f7ea fb06 	bl	8000210 <memchr>
 8015c04:	9a04      	ldr	r2, [sp, #16]
 8015c06:	b9d8      	cbnz	r0, 8015c40 <_vfiprintf_r+0x110>
 8015c08:	06d1      	lsls	r1, r2, #27
 8015c0a:	bf44      	itt	mi
 8015c0c:	2320      	movmi	r3, #32
 8015c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c12:	0713      	lsls	r3, r2, #28
 8015c14:	bf44      	itt	mi
 8015c16:	232b      	movmi	r3, #43	@ 0x2b
 8015c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8015c20:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c22:	d015      	beq.n	8015c50 <_vfiprintf_r+0x120>
 8015c24:	9a07      	ldr	r2, [sp, #28]
 8015c26:	4654      	mov	r4, sl
 8015c28:	2000      	movs	r0, #0
 8015c2a:	f04f 0c0a 	mov.w	ip, #10
 8015c2e:	4621      	mov	r1, r4
 8015c30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015c34:	3b30      	subs	r3, #48	@ 0x30
 8015c36:	2b09      	cmp	r3, #9
 8015c38:	d94b      	bls.n	8015cd2 <_vfiprintf_r+0x1a2>
 8015c3a:	b1b0      	cbz	r0, 8015c6a <_vfiprintf_r+0x13a>
 8015c3c:	9207      	str	r2, [sp, #28]
 8015c3e:	e014      	b.n	8015c6a <_vfiprintf_r+0x13a>
 8015c40:	eba0 0308 	sub.w	r3, r0, r8
 8015c44:	fa09 f303 	lsl.w	r3, r9, r3
 8015c48:	4313      	orrs	r3, r2
 8015c4a:	9304      	str	r3, [sp, #16]
 8015c4c:	46a2      	mov	sl, r4
 8015c4e:	e7d2      	b.n	8015bf6 <_vfiprintf_r+0xc6>
 8015c50:	9b03      	ldr	r3, [sp, #12]
 8015c52:	1d19      	adds	r1, r3, #4
 8015c54:	681b      	ldr	r3, [r3, #0]
 8015c56:	9103      	str	r1, [sp, #12]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	bfbb      	ittet	lt
 8015c5c:	425b      	neglt	r3, r3
 8015c5e:	f042 0202 	orrlt.w	r2, r2, #2
 8015c62:	9307      	strge	r3, [sp, #28]
 8015c64:	9307      	strlt	r3, [sp, #28]
 8015c66:	bfb8      	it	lt
 8015c68:	9204      	strlt	r2, [sp, #16]
 8015c6a:	7823      	ldrb	r3, [r4, #0]
 8015c6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8015c6e:	d10a      	bne.n	8015c86 <_vfiprintf_r+0x156>
 8015c70:	7863      	ldrb	r3, [r4, #1]
 8015c72:	2b2a      	cmp	r3, #42	@ 0x2a
 8015c74:	d132      	bne.n	8015cdc <_vfiprintf_r+0x1ac>
 8015c76:	9b03      	ldr	r3, [sp, #12]
 8015c78:	1d1a      	adds	r2, r3, #4
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	9203      	str	r2, [sp, #12]
 8015c7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015c82:	3402      	adds	r4, #2
 8015c84:	9305      	str	r3, [sp, #20]
 8015c86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015d5c <_vfiprintf_r+0x22c>
 8015c8a:	7821      	ldrb	r1, [r4, #0]
 8015c8c:	2203      	movs	r2, #3
 8015c8e:	4650      	mov	r0, sl
 8015c90:	f7ea fabe 	bl	8000210 <memchr>
 8015c94:	b138      	cbz	r0, 8015ca6 <_vfiprintf_r+0x176>
 8015c96:	9b04      	ldr	r3, [sp, #16]
 8015c98:	eba0 000a 	sub.w	r0, r0, sl
 8015c9c:	2240      	movs	r2, #64	@ 0x40
 8015c9e:	4082      	lsls	r2, r0
 8015ca0:	4313      	orrs	r3, r2
 8015ca2:	3401      	adds	r4, #1
 8015ca4:	9304      	str	r3, [sp, #16]
 8015ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015caa:	4829      	ldr	r0, [pc, #164]	@ (8015d50 <_vfiprintf_r+0x220>)
 8015cac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015cb0:	2206      	movs	r2, #6
 8015cb2:	f7ea faad 	bl	8000210 <memchr>
 8015cb6:	2800      	cmp	r0, #0
 8015cb8:	d03f      	beq.n	8015d3a <_vfiprintf_r+0x20a>
 8015cba:	4b26      	ldr	r3, [pc, #152]	@ (8015d54 <_vfiprintf_r+0x224>)
 8015cbc:	bb1b      	cbnz	r3, 8015d06 <_vfiprintf_r+0x1d6>
 8015cbe:	9b03      	ldr	r3, [sp, #12]
 8015cc0:	3307      	adds	r3, #7
 8015cc2:	f023 0307 	bic.w	r3, r3, #7
 8015cc6:	3308      	adds	r3, #8
 8015cc8:	9303      	str	r3, [sp, #12]
 8015cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015ccc:	443b      	add	r3, r7
 8015cce:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cd0:	e76a      	b.n	8015ba8 <_vfiprintf_r+0x78>
 8015cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015cd6:	460c      	mov	r4, r1
 8015cd8:	2001      	movs	r0, #1
 8015cda:	e7a8      	b.n	8015c2e <_vfiprintf_r+0xfe>
 8015cdc:	2300      	movs	r3, #0
 8015cde:	3401      	adds	r4, #1
 8015ce0:	9305      	str	r3, [sp, #20]
 8015ce2:	4619      	mov	r1, r3
 8015ce4:	f04f 0c0a 	mov.w	ip, #10
 8015ce8:	4620      	mov	r0, r4
 8015cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015cee:	3a30      	subs	r2, #48	@ 0x30
 8015cf0:	2a09      	cmp	r2, #9
 8015cf2:	d903      	bls.n	8015cfc <_vfiprintf_r+0x1cc>
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d0c6      	beq.n	8015c86 <_vfiprintf_r+0x156>
 8015cf8:	9105      	str	r1, [sp, #20]
 8015cfa:	e7c4      	b.n	8015c86 <_vfiprintf_r+0x156>
 8015cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8015d00:	4604      	mov	r4, r0
 8015d02:	2301      	movs	r3, #1
 8015d04:	e7f0      	b.n	8015ce8 <_vfiprintf_r+0x1b8>
 8015d06:	ab03      	add	r3, sp, #12
 8015d08:	9300      	str	r3, [sp, #0]
 8015d0a:	462a      	mov	r2, r5
 8015d0c:	4b12      	ldr	r3, [pc, #72]	@ (8015d58 <_vfiprintf_r+0x228>)
 8015d0e:	a904      	add	r1, sp, #16
 8015d10:	4630      	mov	r0, r6
 8015d12:	f7fd fc27 	bl	8013564 <_printf_float>
 8015d16:	4607      	mov	r7, r0
 8015d18:	1c78      	adds	r0, r7, #1
 8015d1a:	d1d6      	bne.n	8015cca <_vfiprintf_r+0x19a>
 8015d1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015d1e:	07d9      	lsls	r1, r3, #31
 8015d20:	d405      	bmi.n	8015d2e <_vfiprintf_r+0x1fe>
 8015d22:	89ab      	ldrh	r3, [r5, #12]
 8015d24:	059a      	lsls	r2, r3, #22
 8015d26:	d402      	bmi.n	8015d2e <_vfiprintf_r+0x1fe>
 8015d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015d2a:	f7fe faaf 	bl	801428c <__retarget_lock_release_recursive>
 8015d2e:	89ab      	ldrh	r3, [r5, #12]
 8015d30:	065b      	lsls	r3, r3, #25
 8015d32:	f53f af1f 	bmi.w	8015b74 <_vfiprintf_r+0x44>
 8015d36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015d38:	e71e      	b.n	8015b78 <_vfiprintf_r+0x48>
 8015d3a:	ab03      	add	r3, sp, #12
 8015d3c:	9300      	str	r3, [sp, #0]
 8015d3e:	462a      	mov	r2, r5
 8015d40:	4b05      	ldr	r3, [pc, #20]	@ (8015d58 <_vfiprintf_r+0x228>)
 8015d42:	a904      	add	r1, sp, #16
 8015d44:	4630      	mov	r0, r6
 8015d46:	f7fd fea5 	bl	8013a94 <_printf_i>
 8015d4a:	e7e4      	b.n	8015d16 <_vfiprintf_r+0x1e6>
 8015d4c:	0801a5a0 	.word	0x0801a5a0
 8015d50:	0801a5aa 	.word	0x0801a5aa
 8015d54:	08013565 	.word	0x08013565
 8015d58:	08015b0b 	.word	0x08015b0b
 8015d5c:	0801a5a6 	.word	0x0801a5a6

08015d60 <__sflush_r>:
 8015d60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8015d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d68:	0716      	lsls	r6, r2, #28
 8015d6a:	4605      	mov	r5, r0
 8015d6c:	460c      	mov	r4, r1
 8015d6e:	d454      	bmi.n	8015e1a <__sflush_r+0xba>
 8015d70:	684b      	ldr	r3, [r1, #4]
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	dc02      	bgt.n	8015d7c <__sflush_r+0x1c>
 8015d76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	dd48      	ble.n	8015e0e <__sflush_r+0xae>
 8015d7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015d7e:	2e00      	cmp	r6, #0
 8015d80:	d045      	beq.n	8015e0e <__sflush_r+0xae>
 8015d82:	2300      	movs	r3, #0
 8015d84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8015d88:	682f      	ldr	r7, [r5, #0]
 8015d8a:	6a21      	ldr	r1, [r4, #32]
 8015d8c:	602b      	str	r3, [r5, #0]
 8015d8e:	d030      	beq.n	8015df2 <__sflush_r+0x92>
 8015d90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8015d92:	89a3      	ldrh	r3, [r4, #12]
 8015d94:	0759      	lsls	r1, r3, #29
 8015d96:	d505      	bpl.n	8015da4 <__sflush_r+0x44>
 8015d98:	6863      	ldr	r3, [r4, #4]
 8015d9a:	1ad2      	subs	r2, r2, r3
 8015d9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8015d9e:	b10b      	cbz	r3, 8015da4 <__sflush_r+0x44>
 8015da0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8015da2:	1ad2      	subs	r2, r2, r3
 8015da4:	2300      	movs	r3, #0
 8015da6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8015da8:	6a21      	ldr	r1, [r4, #32]
 8015daa:	4628      	mov	r0, r5
 8015dac:	47b0      	blx	r6
 8015dae:	1c43      	adds	r3, r0, #1
 8015db0:	89a3      	ldrh	r3, [r4, #12]
 8015db2:	d106      	bne.n	8015dc2 <__sflush_r+0x62>
 8015db4:	6829      	ldr	r1, [r5, #0]
 8015db6:	291d      	cmp	r1, #29
 8015db8:	d82b      	bhi.n	8015e12 <__sflush_r+0xb2>
 8015dba:	4a2a      	ldr	r2, [pc, #168]	@ (8015e64 <__sflush_r+0x104>)
 8015dbc:	410a      	asrs	r2, r1
 8015dbe:	07d6      	lsls	r6, r2, #31
 8015dc0:	d427      	bmi.n	8015e12 <__sflush_r+0xb2>
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	6062      	str	r2, [r4, #4]
 8015dc6:	04d9      	lsls	r1, r3, #19
 8015dc8:	6922      	ldr	r2, [r4, #16]
 8015dca:	6022      	str	r2, [r4, #0]
 8015dcc:	d504      	bpl.n	8015dd8 <__sflush_r+0x78>
 8015dce:	1c42      	adds	r2, r0, #1
 8015dd0:	d101      	bne.n	8015dd6 <__sflush_r+0x76>
 8015dd2:	682b      	ldr	r3, [r5, #0]
 8015dd4:	b903      	cbnz	r3, 8015dd8 <__sflush_r+0x78>
 8015dd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8015dd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015dda:	602f      	str	r7, [r5, #0]
 8015ddc:	b1b9      	cbz	r1, 8015e0e <__sflush_r+0xae>
 8015dde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015de2:	4299      	cmp	r1, r3
 8015de4:	d002      	beq.n	8015dec <__sflush_r+0x8c>
 8015de6:	4628      	mov	r0, r5
 8015de8:	f7ff f89e 	bl	8014f28 <_free_r>
 8015dec:	2300      	movs	r3, #0
 8015dee:	6363      	str	r3, [r4, #52]	@ 0x34
 8015df0:	e00d      	b.n	8015e0e <__sflush_r+0xae>
 8015df2:	2301      	movs	r3, #1
 8015df4:	4628      	mov	r0, r5
 8015df6:	47b0      	blx	r6
 8015df8:	4602      	mov	r2, r0
 8015dfa:	1c50      	adds	r0, r2, #1
 8015dfc:	d1c9      	bne.n	8015d92 <__sflush_r+0x32>
 8015dfe:	682b      	ldr	r3, [r5, #0]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d0c6      	beq.n	8015d92 <__sflush_r+0x32>
 8015e04:	2b1d      	cmp	r3, #29
 8015e06:	d001      	beq.n	8015e0c <__sflush_r+0xac>
 8015e08:	2b16      	cmp	r3, #22
 8015e0a:	d11e      	bne.n	8015e4a <__sflush_r+0xea>
 8015e0c:	602f      	str	r7, [r5, #0]
 8015e0e:	2000      	movs	r0, #0
 8015e10:	e022      	b.n	8015e58 <__sflush_r+0xf8>
 8015e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015e16:	b21b      	sxth	r3, r3
 8015e18:	e01b      	b.n	8015e52 <__sflush_r+0xf2>
 8015e1a:	690f      	ldr	r7, [r1, #16]
 8015e1c:	2f00      	cmp	r7, #0
 8015e1e:	d0f6      	beq.n	8015e0e <__sflush_r+0xae>
 8015e20:	0793      	lsls	r3, r2, #30
 8015e22:	680e      	ldr	r6, [r1, #0]
 8015e24:	bf08      	it	eq
 8015e26:	694b      	ldreq	r3, [r1, #20]
 8015e28:	600f      	str	r7, [r1, #0]
 8015e2a:	bf18      	it	ne
 8015e2c:	2300      	movne	r3, #0
 8015e2e:	eba6 0807 	sub.w	r8, r6, r7
 8015e32:	608b      	str	r3, [r1, #8]
 8015e34:	f1b8 0f00 	cmp.w	r8, #0
 8015e38:	dde9      	ble.n	8015e0e <__sflush_r+0xae>
 8015e3a:	6a21      	ldr	r1, [r4, #32]
 8015e3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8015e3e:	4643      	mov	r3, r8
 8015e40:	463a      	mov	r2, r7
 8015e42:	4628      	mov	r0, r5
 8015e44:	47b0      	blx	r6
 8015e46:	2800      	cmp	r0, #0
 8015e48:	dc08      	bgt.n	8015e5c <__sflush_r+0xfc>
 8015e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015e52:	81a3      	strh	r3, [r4, #12]
 8015e54:	f04f 30ff 	mov.w	r0, #4294967295
 8015e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e5c:	4407      	add	r7, r0
 8015e5e:	eba8 0800 	sub.w	r8, r8, r0
 8015e62:	e7e7      	b.n	8015e34 <__sflush_r+0xd4>
 8015e64:	dfbffffe 	.word	0xdfbffffe

08015e68 <_fflush_r>:
 8015e68:	b538      	push	{r3, r4, r5, lr}
 8015e6a:	690b      	ldr	r3, [r1, #16]
 8015e6c:	4605      	mov	r5, r0
 8015e6e:	460c      	mov	r4, r1
 8015e70:	b913      	cbnz	r3, 8015e78 <_fflush_r+0x10>
 8015e72:	2500      	movs	r5, #0
 8015e74:	4628      	mov	r0, r5
 8015e76:	bd38      	pop	{r3, r4, r5, pc}
 8015e78:	b118      	cbz	r0, 8015e82 <_fflush_r+0x1a>
 8015e7a:	6a03      	ldr	r3, [r0, #32]
 8015e7c:	b90b      	cbnz	r3, 8015e82 <_fflush_r+0x1a>
 8015e7e:	f7fd ffb5 	bl	8013dec <__sinit>
 8015e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d0f3      	beq.n	8015e72 <_fflush_r+0xa>
 8015e8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8015e8c:	07d0      	lsls	r0, r2, #31
 8015e8e:	d404      	bmi.n	8015e9a <_fflush_r+0x32>
 8015e90:	0599      	lsls	r1, r3, #22
 8015e92:	d402      	bmi.n	8015e9a <_fflush_r+0x32>
 8015e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015e96:	f7fe f9f8 	bl	801428a <__retarget_lock_acquire_recursive>
 8015e9a:	4628      	mov	r0, r5
 8015e9c:	4621      	mov	r1, r4
 8015e9e:	f7ff ff5f 	bl	8015d60 <__sflush_r>
 8015ea2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015ea4:	07da      	lsls	r2, r3, #31
 8015ea6:	4605      	mov	r5, r0
 8015ea8:	d4e4      	bmi.n	8015e74 <_fflush_r+0xc>
 8015eaa:	89a3      	ldrh	r3, [r4, #12]
 8015eac:	059b      	lsls	r3, r3, #22
 8015eae:	d4e1      	bmi.n	8015e74 <_fflush_r+0xc>
 8015eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015eb2:	f7fe f9eb 	bl	801428c <__retarget_lock_release_recursive>
 8015eb6:	e7dd      	b.n	8015e74 <_fflush_r+0xc>

08015eb8 <__swhatbuf_r>:
 8015eb8:	b570      	push	{r4, r5, r6, lr}
 8015eba:	460c      	mov	r4, r1
 8015ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ec0:	2900      	cmp	r1, #0
 8015ec2:	b096      	sub	sp, #88	@ 0x58
 8015ec4:	4615      	mov	r5, r2
 8015ec6:	461e      	mov	r6, r3
 8015ec8:	da0d      	bge.n	8015ee6 <__swhatbuf_r+0x2e>
 8015eca:	89a3      	ldrh	r3, [r4, #12]
 8015ecc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015ed0:	f04f 0100 	mov.w	r1, #0
 8015ed4:	bf14      	ite	ne
 8015ed6:	2340      	movne	r3, #64	@ 0x40
 8015ed8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015edc:	2000      	movs	r0, #0
 8015ede:	6031      	str	r1, [r6, #0]
 8015ee0:	602b      	str	r3, [r5, #0]
 8015ee2:	b016      	add	sp, #88	@ 0x58
 8015ee4:	bd70      	pop	{r4, r5, r6, pc}
 8015ee6:	466a      	mov	r2, sp
 8015ee8:	f000 f862 	bl	8015fb0 <_fstat_r>
 8015eec:	2800      	cmp	r0, #0
 8015eee:	dbec      	blt.n	8015eca <__swhatbuf_r+0x12>
 8015ef0:	9901      	ldr	r1, [sp, #4]
 8015ef2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015ef6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015efa:	4259      	negs	r1, r3
 8015efc:	4159      	adcs	r1, r3
 8015efe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015f02:	e7eb      	b.n	8015edc <__swhatbuf_r+0x24>

08015f04 <__smakebuf_r>:
 8015f04:	898b      	ldrh	r3, [r1, #12]
 8015f06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015f08:	079d      	lsls	r5, r3, #30
 8015f0a:	4606      	mov	r6, r0
 8015f0c:	460c      	mov	r4, r1
 8015f0e:	d507      	bpl.n	8015f20 <__smakebuf_r+0x1c>
 8015f10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015f14:	6023      	str	r3, [r4, #0]
 8015f16:	6123      	str	r3, [r4, #16]
 8015f18:	2301      	movs	r3, #1
 8015f1a:	6163      	str	r3, [r4, #20]
 8015f1c:	b003      	add	sp, #12
 8015f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f20:	ab01      	add	r3, sp, #4
 8015f22:	466a      	mov	r2, sp
 8015f24:	f7ff ffc8 	bl	8015eb8 <__swhatbuf_r>
 8015f28:	9f00      	ldr	r7, [sp, #0]
 8015f2a:	4605      	mov	r5, r0
 8015f2c:	4639      	mov	r1, r7
 8015f2e:	4630      	mov	r0, r6
 8015f30:	f7ff f86e 	bl	8015010 <_malloc_r>
 8015f34:	b948      	cbnz	r0, 8015f4a <__smakebuf_r+0x46>
 8015f36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f3a:	059a      	lsls	r2, r3, #22
 8015f3c:	d4ee      	bmi.n	8015f1c <__smakebuf_r+0x18>
 8015f3e:	f023 0303 	bic.w	r3, r3, #3
 8015f42:	f043 0302 	orr.w	r3, r3, #2
 8015f46:	81a3      	strh	r3, [r4, #12]
 8015f48:	e7e2      	b.n	8015f10 <__smakebuf_r+0xc>
 8015f4a:	89a3      	ldrh	r3, [r4, #12]
 8015f4c:	6020      	str	r0, [r4, #0]
 8015f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f52:	81a3      	strh	r3, [r4, #12]
 8015f54:	9b01      	ldr	r3, [sp, #4]
 8015f56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015f5a:	b15b      	cbz	r3, 8015f74 <__smakebuf_r+0x70>
 8015f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f60:	4630      	mov	r0, r6
 8015f62:	f000 f837 	bl	8015fd4 <_isatty_r>
 8015f66:	b128      	cbz	r0, 8015f74 <__smakebuf_r+0x70>
 8015f68:	89a3      	ldrh	r3, [r4, #12]
 8015f6a:	f023 0303 	bic.w	r3, r3, #3
 8015f6e:	f043 0301 	orr.w	r3, r3, #1
 8015f72:	81a3      	strh	r3, [r4, #12]
 8015f74:	89a3      	ldrh	r3, [r4, #12]
 8015f76:	431d      	orrs	r5, r3
 8015f78:	81a5      	strh	r5, [r4, #12]
 8015f7a:	e7cf      	b.n	8015f1c <__smakebuf_r+0x18>

08015f7c <memmove>:
 8015f7c:	4288      	cmp	r0, r1
 8015f7e:	b510      	push	{r4, lr}
 8015f80:	eb01 0402 	add.w	r4, r1, r2
 8015f84:	d902      	bls.n	8015f8c <memmove+0x10>
 8015f86:	4284      	cmp	r4, r0
 8015f88:	4623      	mov	r3, r4
 8015f8a:	d807      	bhi.n	8015f9c <memmove+0x20>
 8015f8c:	1e43      	subs	r3, r0, #1
 8015f8e:	42a1      	cmp	r1, r4
 8015f90:	d008      	beq.n	8015fa4 <memmove+0x28>
 8015f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015f9a:	e7f8      	b.n	8015f8e <memmove+0x12>
 8015f9c:	4402      	add	r2, r0
 8015f9e:	4601      	mov	r1, r0
 8015fa0:	428a      	cmp	r2, r1
 8015fa2:	d100      	bne.n	8015fa6 <memmove+0x2a>
 8015fa4:	bd10      	pop	{r4, pc}
 8015fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015fae:	e7f7      	b.n	8015fa0 <memmove+0x24>

08015fb0 <_fstat_r>:
 8015fb0:	b538      	push	{r3, r4, r5, lr}
 8015fb2:	4d07      	ldr	r5, [pc, #28]	@ (8015fd0 <_fstat_r+0x20>)
 8015fb4:	2300      	movs	r3, #0
 8015fb6:	4604      	mov	r4, r0
 8015fb8:	4608      	mov	r0, r1
 8015fba:	4611      	mov	r1, r2
 8015fbc:	602b      	str	r3, [r5, #0]
 8015fbe:	f7ef f8e9 	bl	8005194 <_fstat>
 8015fc2:	1c43      	adds	r3, r0, #1
 8015fc4:	d102      	bne.n	8015fcc <_fstat_r+0x1c>
 8015fc6:	682b      	ldr	r3, [r5, #0]
 8015fc8:	b103      	cbz	r3, 8015fcc <_fstat_r+0x1c>
 8015fca:	6023      	str	r3, [r4, #0]
 8015fcc:	bd38      	pop	{r3, r4, r5, pc}
 8015fce:	bf00      	nop
 8015fd0:	2000663c 	.word	0x2000663c

08015fd4 <_isatty_r>:
 8015fd4:	b538      	push	{r3, r4, r5, lr}
 8015fd6:	4d06      	ldr	r5, [pc, #24]	@ (8015ff0 <_isatty_r+0x1c>)
 8015fd8:	2300      	movs	r3, #0
 8015fda:	4604      	mov	r4, r0
 8015fdc:	4608      	mov	r0, r1
 8015fde:	602b      	str	r3, [r5, #0]
 8015fe0:	f7ef f8e8 	bl	80051b4 <_isatty>
 8015fe4:	1c43      	adds	r3, r0, #1
 8015fe6:	d102      	bne.n	8015fee <_isatty_r+0x1a>
 8015fe8:	682b      	ldr	r3, [r5, #0]
 8015fea:	b103      	cbz	r3, 8015fee <_isatty_r+0x1a>
 8015fec:	6023      	str	r3, [r4, #0]
 8015fee:	bd38      	pop	{r3, r4, r5, pc}
 8015ff0:	2000663c 	.word	0x2000663c

08015ff4 <_sbrk_r>:
 8015ff4:	b538      	push	{r3, r4, r5, lr}
 8015ff6:	4d06      	ldr	r5, [pc, #24]	@ (8016010 <_sbrk_r+0x1c>)
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	4604      	mov	r4, r0
 8015ffc:	4608      	mov	r0, r1
 8015ffe:	602b      	str	r3, [r5, #0]
 8016000:	f7ef f8f0 	bl	80051e4 <_sbrk>
 8016004:	1c43      	adds	r3, r0, #1
 8016006:	d102      	bne.n	801600e <_sbrk_r+0x1a>
 8016008:	682b      	ldr	r3, [r5, #0]
 801600a:	b103      	cbz	r3, 801600e <_sbrk_r+0x1a>
 801600c:	6023      	str	r3, [r4, #0]
 801600e:	bd38      	pop	{r3, r4, r5, pc}
 8016010:	2000663c 	.word	0x2000663c

08016014 <memcpy>:
 8016014:	440a      	add	r2, r1
 8016016:	4291      	cmp	r1, r2
 8016018:	f100 33ff 	add.w	r3, r0, #4294967295
 801601c:	d100      	bne.n	8016020 <memcpy+0xc>
 801601e:	4770      	bx	lr
 8016020:	b510      	push	{r4, lr}
 8016022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016026:	f803 4f01 	strb.w	r4, [r3, #1]!
 801602a:	4291      	cmp	r1, r2
 801602c:	d1f9      	bne.n	8016022 <memcpy+0xe>
 801602e:	bd10      	pop	{r4, pc}

08016030 <__assert_func>:
 8016030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016032:	4614      	mov	r4, r2
 8016034:	461a      	mov	r2, r3
 8016036:	4b09      	ldr	r3, [pc, #36]	@ (801605c <__assert_func+0x2c>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	4605      	mov	r5, r0
 801603c:	68d8      	ldr	r0, [r3, #12]
 801603e:	b954      	cbnz	r4, 8016056 <__assert_func+0x26>
 8016040:	4b07      	ldr	r3, [pc, #28]	@ (8016060 <__assert_func+0x30>)
 8016042:	461c      	mov	r4, r3
 8016044:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016048:	9100      	str	r1, [sp, #0]
 801604a:	462b      	mov	r3, r5
 801604c:	4905      	ldr	r1, [pc, #20]	@ (8016064 <__assert_func+0x34>)
 801604e:	f000 f86f 	bl	8016130 <fiprintf>
 8016052:	f000 f87f 	bl	8016154 <abort>
 8016056:	4b04      	ldr	r3, [pc, #16]	@ (8016068 <__assert_func+0x38>)
 8016058:	e7f4      	b.n	8016044 <__assert_func+0x14>
 801605a:	bf00      	nop
 801605c:	20004f34 	.word	0x20004f34
 8016060:	0801a5f6 	.word	0x0801a5f6
 8016064:	0801a5c8 	.word	0x0801a5c8
 8016068:	0801a5bb 	.word	0x0801a5bb

0801606c <_calloc_r>:
 801606c:	b570      	push	{r4, r5, r6, lr}
 801606e:	fba1 5402 	umull	r5, r4, r1, r2
 8016072:	b93c      	cbnz	r4, 8016084 <_calloc_r+0x18>
 8016074:	4629      	mov	r1, r5
 8016076:	f7fe ffcb 	bl	8015010 <_malloc_r>
 801607a:	4606      	mov	r6, r0
 801607c:	b928      	cbnz	r0, 801608a <_calloc_r+0x1e>
 801607e:	2600      	movs	r6, #0
 8016080:	4630      	mov	r0, r6
 8016082:	bd70      	pop	{r4, r5, r6, pc}
 8016084:	220c      	movs	r2, #12
 8016086:	6002      	str	r2, [r0, #0]
 8016088:	e7f9      	b.n	801607e <_calloc_r+0x12>
 801608a:	462a      	mov	r2, r5
 801608c:	4621      	mov	r1, r4
 801608e:	f7fe f87f 	bl	8014190 <memset>
 8016092:	e7f5      	b.n	8016080 <_calloc_r+0x14>

08016094 <__ascii_mbtowc>:
 8016094:	b082      	sub	sp, #8
 8016096:	b901      	cbnz	r1, 801609a <__ascii_mbtowc+0x6>
 8016098:	a901      	add	r1, sp, #4
 801609a:	b142      	cbz	r2, 80160ae <__ascii_mbtowc+0x1a>
 801609c:	b14b      	cbz	r3, 80160b2 <__ascii_mbtowc+0x1e>
 801609e:	7813      	ldrb	r3, [r2, #0]
 80160a0:	600b      	str	r3, [r1, #0]
 80160a2:	7812      	ldrb	r2, [r2, #0]
 80160a4:	1e10      	subs	r0, r2, #0
 80160a6:	bf18      	it	ne
 80160a8:	2001      	movne	r0, #1
 80160aa:	b002      	add	sp, #8
 80160ac:	4770      	bx	lr
 80160ae:	4610      	mov	r0, r2
 80160b0:	e7fb      	b.n	80160aa <__ascii_mbtowc+0x16>
 80160b2:	f06f 0001 	mvn.w	r0, #1
 80160b6:	e7f8      	b.n	80160aa <__ascii_mbtowc+0x16>

080160b8 <_realloc_r>:
 80160b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160bc:	4680      	mov	r8, r0
 80160be:	4615      	mov	r5, r2
 80160c0:	460c      	mov	r4, r1
 80160c2:	b921      	cbnz	r1, 80160ce <_realloc_r+0x16>
 80160c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160c8:	4611      	mov	r1, r2
 80160ca:	f7fe bfa1 	b.w	8015010 <_malloc_r>
 80160ce:	b92a      	cbnz	r2, 80160dc <_realloc_r+0x24>
 80160d0:	f7fe ff2a 	bl	8014f28 <_free_r>
 80160d4:	2400      	movs	r4, #0
 80160d6:	4620      	mov	r0, r4
 80160d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160dc:	f000 f841 	bl	8016162 <_malloc_usable_size_r>
 80160e0:	4285      	cmp	r5, r0
 80160e2:	4606      	mov	r6, r0
 80160e4:	d802      	bhi.n	80160ec <_realloc_r+0x34>
 80160e6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80160ea:	d8f4      	bhi.n	80160d6 <_realloc_r+0x1e>
 80160ec:	4629      	mov	r1, r5
 80160ee:	4640      	mov	r0, r8
 80160f0:	f7fe ff8e 	bl	8015010 <_malloc_r>
 80160f4:	4607      	mov	r7, r0
 80160f6:	2800      	cmp	r0, #0
 80160f8:	d0ec      	beq.n	80160d4 <_realloc_r+0x1c>
 80160fa:	42b5      	cmp	r5, r6
 80160fc:	462a      	mov	r2, r5
 80160fe:	4621      	mov	r1, r4
 8016100:	bf28      	it	cs
 8016102:	4632      	movcs	r2, r6
 8016104:	f7ff ff86 	bl	8016014 <memcpy>
 8016108:	4621      	mov	r1, r4
 801610a:	4640      	mov	r0, r8
 801610c:	f7fe ff0c 	bl	8014f28 <_free_r>
 8016110:	463c      	mov	r4, r7
 8016112:	e7e0      	b.n	80160d6 <_realloc_r+0x1e>

08016114 <__ascii_wctomb>:
 8016114:	4603      	mov	r3, r0
 8016116:	4608      	mov	r0, r1
 8016118:	b141      	cbz	r1, 801612c <__ascii_wctomb+0x18>
 801611a:	2aff      	cmp	r2, #255	@ 0xff
 801611c:	d904      	bls.n	8016128 <__ascii_wctomb+0x14>
 801611e:	228a      	movs	r2, #138	@ 0x8a
 8016120:	601a      	str	r2, [r3, #0]
 8016122:	f04f 30ff 	mov.w	r0, #4294967295
 8016126:	4770      	bx	lr
 8016128:	700a      	strb	r2, [r1, #0]
 801612a:	2001      	movs	r0, #1
 801612c:	4770      	bx	lr
	...

08016130 <fiprintf>:
 8016130:	b40e      	push	{r1, r2, r3}
 8016132:	b503      	push	{r0, r1, lr}
 8016134:	4601      	mov	r1, r0
 8016136:	ab03      	add	r3, sp, #12
 8016138:	4805      	ldr	r0, [pc, #20]	@ (8016150 <fiprintf+0x20>)
 801613a:	f853 2b04 	ldr.w	r2, [r3], #4
 801613e:	6800      	ldr	r0, [r0, #0]
 8016140:	9301      	str	r3, [sp, #4]
 8016142:	f7ff fcf5 	bl	8015b30 <_vfiprintf_r>
 8016146:	b002      	add	sp, #8
 8016148:	f85d eb04 	ldr.w	lr, [sp], #4
 801614c:	b003      	add	sp, #12
 801614e:	4770      	bx	lr
 8016150:	20004f34 	.word	0x20004f34

08016154 <abort>:
 8016154:	b508      	push	{r3, lr}
 8016156:	2006      	movs	r0, #6
 8016158:	f000 f834 	bl	80161c4 <raise>
 801615c:	2001      	movs	r0, #1
 801615e:	f7ee ffc9 	bl	80050f4 <_exit>

08016162 <_malloc_usable_size_r>:
 8016162:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016166:	1f18      	subs	r0, r3, #4
 8016168:	2b00      	cmp	r3, #0
 801616a:	bfbc      	itt	lt
 801616c:	580b      	ldrlt	r3, [r1, r0]
 801616e:	18c0      	addlt	r0, r0, r3
 8016170:	4770      	bx	lr

08016172 <_raise_r>:
 8016172:	291f      	cmp	r1, #31
 8016174:	b538      	push	{r3, r4, r5, lr}
 8016176:	4605      	mov	r5, r0
 8016178:	460c      	mov	r4, r1
 801617a:	d904      	bls.n	8016186 <_raise_r+0x14>
 801617c:	2316      	movs	r3, #22
 801617e:	6003      	str	r3, [r0, #0]
 8016180:	f04f 30ff 	mov.w	r0, #4294967295
 8016184:	bd38      	pop	{r3, r4, r5, pc}
 8016186:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8016188:	b112      	cbz	r2, 8016190 <_raise_r+0x1e>
 801618a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801618e:	b94b      	cbnz	r3, 80161a4 <_raise_r+0x32>
 8016190:	4628      	mov	r0, r5
 8016192:	f000 f831 	bl	80161f8 <_getpid_r>
 8016196:	4622      	mov	r2, r4
 8016198:	4601      	mov	r1, r0
 801619a:	4628      	mov	r0, r5
 801619c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80161a0:	f000 b818 	b.w	80161d4 <_kill_r>
 80161a4:	2b01      	cmp	r3, #1
 80161a6:	d00a      	beq.n	80161be <_raise_r+0x4c>
 80161a8:	1c59      	adds	r1, r3, #1
 80161aa:	d103      	bne.n	80161b4 <_raise_r+0x42>
 80161ac:	2316      	movs	r3, #22
 80161ae:	6003      	str	r3, [r0, #0]
 80161b0:	2001      	movs	r0, #1
 80161b2:	e7e7      	b.n	8016184 <_raise_r+0x12>
 80161b4:	2100      	movs	r1, #0
 80161b6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80161ba:	4620      	mov	r0, r4
 80161bc:	4798      	blx	r3
 80161be:	2000      	movs	r0, #0
 80161c0:	e7e0      	b.n	8016184 <_raise_r+0x12>
	...

080161c4 <raise>:
 80161c4:	4b02      	ldr	r3, [pc, #8]	@ (80161d0 <raise+0xc>)
 80161c6:	4601      	mov	r1, r0
 80161c8:	6818      	ldr	r0, [r3, #0]
 80161ca:	f7ff bfd2 	b.w	8016172 <_raise_r>
 80161ce:	bf00      	nop
 80161d0:	20004f34 	.word	0x20004f34

080161d4 <_kill_r>:
 80161d4:	b538      	push	{r3, r4, r5, lr}
 80161d6:	4d07      	ldr	r5, [pc, #28]	@ (80161f4 <_kill_r+0x20>)
 80161d8:	2300      	movs	r3, #0
 80161da:	4604      	mov	r4, r0
 80161dc:	4608      	mov	r0, r1
 80161de:	4611      	mov	r1, r2
 80161e0:	602b      	str	r3, [r5, #0]
 80161e2:	f7ee ff77 	bl	80050d4 <_kill>
 80161e6:	1c43      	adds	r3, r0, #1
 80161e8:	d102      	bne.n	80161f0 <_kill_r+0x1c>
 80161ea:	682b      	ldr	r3, [r5, #0]
 80161ec:	b103      	cbz	r3, 80161f0 <_kill_r+0x1c>
 80161ee:	6023      	str	r3, [r4, #0]
 80161f0:	bd38      	pop	{r3, r4, r5, pc}
 80161f2:	bf00      	nop
 80161f4:	2000663c 	.word	0x2000663c

080161f8 <_getpid_r>:
 80161f8:	f7ee bf64 	b.w	80050c4 <_getpid>

080161fc <_init>:
 80161fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161fe:	bf00      	nop
 8016200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016202:	bc08      	pop	{r3}
 8016204:	469e      	mov	lr, r3
 8016206:	4770      	bx	lr

08016208 <_fini>:
 8016208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801620a:	bf00      	nop
 801620c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801620e:	bc08      	pop	{r3}
 8016210:	469e      	mov	lr, r3
 8016212:	4770      	bx	lr
