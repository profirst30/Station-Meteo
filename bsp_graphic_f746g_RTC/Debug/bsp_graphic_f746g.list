
bsp_graphic_f746g.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a300  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b9c  0800a4d0  0800a4d0  0000b4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e06c  0800e06c  00014f24  2**0
                  CONTENTS
  4 .ARM          00000008  0800e06c  0800e06c  0000f06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e074  0800e074  00014f24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e074  0800e074  0000f074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e078  0800e078  0000f078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00004f24  20000000  0800e07c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000724  20004f24  08012fa0  00014f24  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20005648  08012fa0  00015648  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014f24  2**0
                  CONTENTS, READONLY
 12 .debug_info   000221d6  00000000  00000000  00014f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bed  00000000  00000000  0003712a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c88  00000000  00000000  0003bd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001619  00000000  00000000  0003d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b361  00000000  00000000  0003efb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026099  00000000  00000000  0006a31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010397c  00000000  00000000  000903b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00193d2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c84  00000000  00000000  00193d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0019b9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20004f24 	.word	0x20004f24
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a4b8 	.word	0x0800a4b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20004f28 	.word	0x20004f28
 800020c:	0800a4b8 	.word	0x0800a4b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80005a4:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <MX_DMA2D_Init+0x5c>)
 80005a6:	4a16      	ldr	r2, [pc, #88]	@ (8000600 <MX_DMA2D_Init+0x60>)
 80005a8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80005aa:	4b14      	ldr	r3, [pc, #80]	@ (80005fc <MX_DMA2D_Init+0x5c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <MX_DMA2D_Init+0x5c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80005b6:	4b11      	ldr	r3, [pc, #68]	@ (80005fc <MX_DMA2D_Init+0x5c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <MX_DMA2D_Init+0x5c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	@ (80005fc <MX_DMA2D_Init+0x5c>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <MX_DMA2D_Init+0x5c>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <MX_DMA2D_Init+0x5c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005d4:	4809      	ldr	r0, [pc, #36]	@ (80005fc <MX_DMA2D_Init+0x5c>)
 80005d6:	f004 fd15 	bl	8005004 <HAL_DMA2D_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005e0:	f001 ffac 	bl	800253c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005e4:	2101      	movs	r1, #1
 80005e6:	4805      	ldr	r0, [pc, #20]	@ (80005fc <MX_DMA2D_Init+0x5c>)
 80005e8:	f004 fe6a 	bl	80052c0 <HAL_DMA2D_ConfigLayer>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005f2:	f001 ffa3 	bl	800253c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20004f40 	.word	0x20004f40
 8000600:	4002b000 	.word	0x4002b000

08000604 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <HAL_DMA2D_MspInit+0x38>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d10b      	bne.n	800062e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <HAL_DMA2D_MspInit+0x3c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <HAL_DMA2D_MspInit+0x3c>)
 800061c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <HAL_DMA2D_MspInit+0x3c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	4002b000 	.word	0x4002b000
 8000640:	40023800 	.word	0x40023800

08000644 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
 8000658:	615a      	str	r2, [r3, #20]
 800065a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800065c:	4b1e      	ldr	r3, [pc, #120]	@ (80006d8 <MX_FMC_Init+0x94>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <MX_FMC_Init+0x98>)
 8000660:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000662:	4b1d      	ldr	r3, [pc, #116]	@ (80006d8 <MX_FMC_Init+0x94>)
 8000664:	2200      	movs	r2, #0
 8000666:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_FMC_Init+0x94>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_FMC_Init+0x94>)
 8000670:	2204      	movs	r2, #4
 8000672:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000674:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_FMC_Init+0x94>)
 8000676:	2210      	movs	r2, #16
 8000678:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_FMC_Init+0x94>)
 800067c:	2240      	movs	r2, #64	@ 0x40
 800067e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_FMC_Init+0x94>)
 8000682:	2280      	movs	r2, #128	@ 0x80
 8000684:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_FMC_Init+0x94>)
 8000688:	2200      	movs	r2, #0
 800068a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <MX_FMC_Init+0x94>)
 800068e:	2200      	movs	r2, #0
 8000690:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_FMC_Init+0x94>)
 8000694:	2200      	movs	r2, #0
 8000696:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_FMC_Init+0x94>)
 800069a:	2200      	movs	r2, #0
 800069c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800069e:	2310      	movs	r3, #16
 80006a0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80006a2:	2310      	movs	r3, #16
 80006a4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80006a6:	2310      	movs	r3, #16
 80006a8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80006aa:	2310      	movs	r3, #16
 80006ac:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80006ae:	2310      	movs	r3, #16
 80006b0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80006b2:	2310      	movs	r3, #16
 80006b4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80006b6:	2310      	movs	r3, #16
 80006b8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	@ (80006d8 <MX_FMC_Init+0x94>)
 80006c0:	f007 ff9e 	bl	8008600 <HAL_SDRAM_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80006ca:	f001 ff37 	bl	800253c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20004f80 	.word	0x20004f80
 80006dc:	a0000140 	.word	0xa0000140

080006e0 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006f4:	4b33      	ldr	r3, [pc, #204]	@ (80007c4 <HAL_FMC_MspInit+0xe4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d15e      	bne.n	80007ba <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 80006fc:	4b31      	ldr	r3, [pc, #196]	@ (80007c4 <HAL_FMC_MspInit+0xe4>)
 80006fe:	2201      	movs	r2, #1
 8000700:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000702:	4b31      	ldr	r3, [pc, #196]	@ (80007c8 <HAL_FMC_MspInit+0xe8>)
 8000704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000706:	4a30      	ldr	r2, [pc, #192]	@ (80007c8 <HAL_FMC_MspInit+0xe8>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6393      	str	r3, [r2, #56]	@ 0x38
 800070e:	4b2e      	ldr	r3, [pc, #184]	@ (80007c8 <HAL_FMC_MspInit+0xe8>)
 8000710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800071a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800071e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800072c:	230c      	movs	r3, #12
 800072e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	4825      	ldr	r0, [pc, #148]	@ (80007cc <HAL_FMC_MspInit+0xec>)
 8000736:	f004 fef1 	bl	800551c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800073a:	f248 1333 	movw	r3, #33075	@ 0x8133
 800073e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800074c:	230c      	movs	r3, #12
 800074e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000750:	1d3b      	adds	r3, r7, #4
 8000752:	4619      	mov	r1, r3
 8000754:	481e      	ldr	r0, [pc, #120]	@ (80007d0 <HAL_FMC_MspInit+0xf0>)
 8000756:	f004 fee1 	bl	800551c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800075a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800075e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000768:	2303      	movs	r3, #3
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076c:	230c      	movs	r3, #12
 800076e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	4817      	ldr	r0, [pc, #92]	@ (80007d4 <HAL_FMC_MspInit+0xf4>)
 8000776:	f004 fed1 	bl	800551c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800077a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800077e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000788:	2303      	movs	r3, #3
 800078a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800078c:	230c      	movs	r3, #12
 800078e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4810      	ldr	r0, [pc, #64]	@ (80007d8 <HAL_FMC_MspInit+0xf8>)
 8000796:	f004 fec1 	bl	800551c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 800079a:	232c      	movs	r3, #44	@ 0x2c
 800079c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007aa:	230c      	movs	r3, #12
 80007ac:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	480a      	ldr	r0, [pc, #40]	@ (80007dc <HAL_FMC_MspInit+0xfc>)
 80007b4:	f004 feb2 	bl	800551c <HAL_GPIO_Init>
 80007b8:	e000      	b.n	80007bc <HAL_FMC_MspInit+0xdc>
    return;
 80007ba:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20004fb4 	.word	0x20004fb4
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40021800 	.word	0x40021800
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	40021400 	.word	0x40021400
 80007dc:	40021c00 	.word	0x40021c00

080007e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007e8:	f7ff ff7a 	bl	80006e0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b090      	sub	sp, #64	@ 0x40
 80007f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	4b8a      	ldr	r3, [pc, #552]	@ (8000a34 <MX_GPIO_Init+0x240>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a89      	ldr	r2, [pc, #548]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b87      	ldr	r3, [pc, #540]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000822:	4b84      	ldr	r3, [pc, #528]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a83      	ldr	r2, [pc, #524]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b81      	ldr	r3, [pc, #516]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
 8000838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083a:	4b7e      	ldr	r3, [pc, #504]	@ (8000a34 <MX_GPIO_Init+0x240>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a7d      	ldr	r2, [pc, #500]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000840:	f043 0302 	orr.w	r3, r3, #2
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b7b      	ldr	r3, [pc, #492]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0302 	and.w	r3, r3, #2
 800084e:	623b      	str	r3, [r7, #32]
 8000850:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000852:	4b78      	ldr	r3, [pc, #480]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a77      	ldr	r2, [pc, #476]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b75      	ldr	r3, [pc, #468]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	61fb      	str	r3, [r7, #28]
 8000868:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b72      	ldr	r3, [pc, #456]	@ (8000a34 <MX_GPIO_Init+0x240>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a71      	ldr	r2, [pc, #452]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b6f      	ldr	r3, [pc, #444]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	61bb      	str	r3, [r7, #24]
 8000880:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b6c      	ldr	r3, [pc, #432]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a6b      	ldr	r2, [pc, #428]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b69      	ldr	r3, [pc, #420]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800089a:	4b66      	ldr	r3, [pc, #408]	@ (8000a34 <MX_GPIO_Init+0x240>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a65      	ldr	r2, [pc, #404]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b63      	ldr	r3, [pc, #396]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80008b2:	4b60      	ldr	r3, [pc, #384]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a5f      	ldr	r2, [pc, #380]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b5d      	ldr	r3, [pc, #372]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80008ca:	4b5a      	ldr	r3, [pc, #360]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a59      	ldr	r2, [pc, #356]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b57      	ldr	r3, [pc, #348]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008e2:	4b54      	ldr	r3, [pc, #336]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a53      	ldr	r2, [pc, #332]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008e8:	f043 0320 	orr.w	r3, r3, #32
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b51      	ldr	r3, [pc, #324]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0320 	and.w	r3, r3, #32
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008fa:	4b4e      	ldr	r3, [pc, #312]	@ (8000a34 <MX_GPIO_Init+0x240>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a4d      	ldr	r2, [pc, #308]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b4b      	ldr	r3, [pc, #300]	@ (8000a34 <MX_GPIO_Init+0x240>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800090e:	603b      	str	r3, [r7, #0]
 8000910:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PE4 PE3 PE2 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_5
 8000912:	237c      	movs	r3, #124	@ 0x7c
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000916:	2303      	movs	r3, #3
 8000918:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800091e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000922:	4619      	mov	r1, r3
 8000924:	4844      	ldr	r0, [pc, #272]	@ (8000a38 <MX_GPIO_Init+0x244>)
 8000926:	f004 fdf9 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG14 PG13 PG12 PG9
                           PG7 PG3 PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_9
 800092a:	f247 238c 	movw	r3, #29324	@ 0x728c
 800092e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000930:	2303      	movs	r3, #3
 8000932:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000938:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800093c:	4619      	mov	r1, r3
 800093e:	483f      	ldr	r0, [pc, #252]	@ (8000a3c <MX_GPIO_Init+0x248>)
 8000940:	f004 fdec 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB4 PB3 PB6
                           PB13 PB12 PB2 PB10
                           PB1 PB0 PB11 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_6
 8000944:	f64f 437f 	movw	r3, #64639	@ 0xfc7f
 8000948:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_2|GPIO_PIN_10
                          |GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000956:	4619      	mov	r1, r3
 8000958:	4839      	ldr	r0, [pc, #228]	@ (8000a40 <MX_GPIO_Init+0x24c>)
 800095a:	f004 fddf 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD7 PD6 PD5 PD4
                           PD2 PD12 PD13 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4
 800095e:	f643 03f4 	movw	r3, #14580	@ 0x38f4
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000964:	2303      	movs	r3, #3
 8000966:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800096c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000970:	4619      	mov	r1, r3
 8000972:	4834      	ldr	r0, [pc, #208]	@ (8000a44 <MX_GPIO_Init+0x250>)
 8000974:	f004 fdd2 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC12 PC11 PC10 PC13
                           PC9 PC8 PC7 PC6
                           PC3 PC0 PC1 PC2
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_13
 8000978:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6
                          |GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097e:	2303      	movs	r3, #3
 8000980:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000986:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800098a:	4619      	mov	r1, r3
 800098c:	482e      	ldr	r0, [pc, #184]	@ (8000a48 <MX_GPIO_Init+0x254>)
 800098e:	f004 fdc5 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA15 PA10 PA1 PA0
                           PA4 PA2 PA6 PA5
                           PA3 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_10|GPIO_PIN_1|GPIO_PIN_0
 8000992:	f248 43ff 	movw	r3, #34047	@ 0x84ff
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000998:	2303      	movs	r3, #3
 800099a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009a4:	4619      	mov	r1, r3
 80009a6:	4829      	ldr	r0, [pc, #164]	@ (8000a4c <MX_GPIO_Init+0x258>)
 80009a8:	f004 fdb8 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJ13 PJ12 PJ14 PJ15
                           PJ11 PJ8 PJ10 PJ7
                           PJ9 PJ6 PJ4 PJ5
                           PJ3 PJ2 PJ0 PJ1 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80009ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b2:	2303      	movs	r3, #3
 80009b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80009ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009be:	4619      	mov	r1, r3
 80009c0:	4823      	ldr	r0, [pc, #140]	@ (8000a50 <MX_GPIO_Init+0x25c>)
 80009c2:	f004 fdab 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI3 PI2 PI7
                           PI6 PI1 PI12 PI11
                           PI13 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_7
 80009c6:	f64b 13ce 	movw	r3, #47566	@ 0xb9ce
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_11
                          |GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009cc:	2303      	movs	r3, #3
 80009ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009d8:	4619      	mov	r1, r3
 80009da:	481e      	ldr	r0, [pc, #120]	@ (8000a54 <MX_GPIO_Init+0x260>)
 80009dc:	f004 fd9e 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : PK6 PK5 PK4 PK3
                           PK2 PK0 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3
 80009e0:	237d      	movs	r3, #125	@ 0x7d
 80009e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_2|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e4:	2303      	movs	r3, #3
 80009e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f0:	4619      	mov	r1, r3
 80009f2:	4819      	ldr	r0, [pc, #100]	@ (8000a58 <MX_GPIO_Init+0x264>)
 80009f4:	f004 fd92 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH14 PH4 PH12 PH11
                           PH6 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_11
 80009f8:	f645 4350 	movw	r3, #23632	@ 0x5c50
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_6|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fe:	2303      	movs	r3, #3
 8000a00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4813      	ldr	r0, [pc, #76]	@ (8000a5c <MX_GPIO_Init+0x268>)
 8000a0e:	f004 fd85 	bl	800551c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF6 PF10 PF9
                           PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_9
 8000a12:	f44f 63f8 	mov.w	r3, #1984	@ 0x7c0
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a24:	4619      	mov	r1, r3
 8000a26:	480e      	ldr	r0, [pc, #56]	@ (8000a60 <MX_GPIO_Init+0x26c>)
 8000a28:	f004 fd78 	bl	800551c <HAL_GPIO_Init>

}
 8000a2c:	bf00      	nop
 8000a2e:	3740      	adds	r7, #64	@ 0x40
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40021800 	.word	0x40021800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	40020800 	.word	0x40020800
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40022400 	.word	0x40022400
 8000a54:	40022000 	.word	0x40022000
 8000a58:	40022800 	.word	0x40022800
 8000a5c:	40021c00 	.word	0x40021c00
 8000a60:	40021400 	.word	0x40021400

08000a64 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <MX_I2C3_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00909BEB;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae0 <MX_I2C3_Init+0x7c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a9e:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000aa0:	f005 f80e 	bl	8005ac0 <HAL_I2C_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000aaa:	f001 fd47 	bl	800253c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000ab2:	f005 fdcf 	bl	8006654 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f001 fd3e 	bl	800253c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_I2C3_Init+0x74>)
 8000ac4:	f005 fe11 	bl	80066ea <HAL_I2CEx_ConfigDigitalFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f001 fd35 	bl	800253c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20004fb8 	.word	0x20004fb8
 8000adc:	40005c00 	.word	0x40005c00
 8000ae0:	00909beb 	.word	0x00909beb

08000ae4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b0aa      	sub	sp, #168	@ 0xa8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	2284      	movs	r2, #132	@ 0x84
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f009 f857 	bl	8009bb8 <memset>
  if(i2cHandle->Instance==I2C3)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a22      	ldr	r2, [pc, #136]	@ (8000b98 <HAL_I2C_MspInit+0xb4>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d13c      	bne.n	8000b8e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000b14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4618      	mov	r0, r3
 8000b24:	f006 fd7e 	bl	8007624 <HAL_RCCEx_PeriphCLKConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b2e:	f001 fd05 	bl	800253c <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <HAL_I2C_MspInit+0xb8>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a19      	ldr	r2, [pc, #100]	@ (8000b9c <HAL_I2C_MspInit+0xb8>)
 8000b38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <HAL_I2C_MspInit+0xb8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000b4a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b52:	2312      	movs	r3, #18
 8000b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000b64:	2304      	movs	r3, #4
 8000b66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b6a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480b      	ldr	r0, [pc, #44]	@ (8000ba0 <HAL_I2C_MspInit+0xbc>)
 8000b72:	f004 fcd3 	bl	800551c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <HAL_I2C_MspInit+0xb8>)
 8000b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7a:	4a08      	ldr	r2, [pc, #32]	@ (8000b9c <HAL_I2C_MspInit+0xb8>)
 8000b7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000b80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_I2C_MspInit+0xb8>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b8e:	bf00      	nop
 8000b90:	37a8      	adds	r7, #168	@ 0xa8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40005c00 	.word	0x40005c00
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40021c00 	.word	0x40021c00

08000ba4 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <HAL_I2C_MspDeInit+0x38>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d10e      	bne.n	8000bd4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000be0 <HAL_I2C_MspDeInit+0x3c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	4a09      	ldr	r2, [pc, #36]	@ (8000be0 <HAL_I2C_MspDeInit+0x3c>)
 8000bbc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000bc0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_7);
 8000bc2:	2180      	movs	r1, #128	@ 0x80
 8000bc4:	4807      	ldr	r0, [pc, #28]	@ (8000be4 <HAL_I2C_MspDeInit+0x40>)
 8000bc6:	f004 fe55 	bl	8005874 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOH, GPIO_PIN_8);
 8000bca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bce:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <HAL_I2C_MspDeInit+0x40>)
 8000bd0:	f004 fe50 	bl	8005874 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40005c00 	.word	0x40005c00
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40021c00 	.word	0x40021c00

08000be8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08e      	sub	sp, #56	@ 0x38
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2234      	movs	r2, #52	@ 0x34
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f008 ffdf 	bl	8009bb8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8000ce8 <MX_LTDC_Init+0x100>)
 8000bfe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c00:	4b38      	ldr	r3, [pc, #224]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c06:	4b37      	ldr	r3, [pc, #220]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c0c:	4b35      	ldr	r3, [pc, #212]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c12:	4b34      	ldr	r3, [pc, #208]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 0;
 8000c18:	4b32      	ldr	r3, [pc, #200]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000c1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c20:	2209      	movs	r2, #9
 8000c22:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 43;
 8000c24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c26:	222b      	movs	r2, #43	@ 0x2b
 8000c28:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 21;
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c2c:	2215      	movs	r2, #21
 8000c2e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 523;
 8000c30:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c32:	f240 220b 	movw	r2, #523	@ 0x20b
 8000c36:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 293;
 8000c38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c3a:	f240 1225 	movw	r2, #293	@ 0x125
 8000c3e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 531;
 8000c40:	4b28      	ldr	r3, [pc, #160]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c42:	f240 2213 	movw	r2, #531	@ 0x213
 8000c46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 297;
 8000c48:	4b26      	ldr	r3, [pc, #152]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c4a:	f240 1229 	movw	r2, #297	@ 0x129
 8000c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000c50:	4b24      	ldr	r3, [pc, #144]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000c58:	4b22      	ldr	r3, [pc, #136]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000c60:	4b20      	ldr	r3, [pc, #128]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000c68:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000c6a:	f005 fd8b 	bl	8006784 <HAL_LTDC_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000c74:	f001 fc62 	bl	800253c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000c7c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000c80:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8000c86:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000c8a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000c90:	23ff      	movs	r3, #255	@ 0xff
 8000c92:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000c98:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c9c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8000ca6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8000cac:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <MX_LTDC_Init+0xfc>)
 8000ccc:	f005 fe2a 	bl	8006924 <HAL_LTDC_ConfigLayer>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_LTDC_Init+0xf2>
  {
    Error_Handler();
 8000cd6:	f001 fc31 	bl	800253c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3738      	adds	r7, #56	@ 0x38
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000500c 	.word	0x2000500c
 8000ce8:	40016800 	.word	0x40016800

08000cec <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b0b0      	sub	sp, #192	@ 0xc0
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d04:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d08:	2284      	movs	r2, #132	@ 0x84
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f008 ff53 	bl	8009bb8 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a97      	ldr	r2, [pc, #604]	@ (8000f74 <HAL_LTDC_MspInit+0x288>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	f040 8127 	bne.w	8000f6c <HAL_LTDC_MspInit+0x280>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d1e:	2308      	movs	r3, #8
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 114;
 8000d22:	2372      	movs	r3, #114	@ 0x72
 8000d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000d26:	2305      	movs	r3, #5
 8000d28:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8000d36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d3a:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d40:	4618      	mov	r0, r3
 8000d42:	f006 fc6f 	bl	8007624 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_LTDC_MspInit+0x64>
    {
      Error_Handler();
 8000d4c:	f001 fbf6 	bl	800253c <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d50:	4b89      	ldr	r3, [pc, #548]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d54:	4a88      	ldr	r2, [pc, #544]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000d56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d5c:	4b86      	ldr	r3, [pc, #536]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b83      	ldr	r3, [pc, #524]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6c:	4a82      	ldr	r2, [pc, #520]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d74:	4b80      	ldr	r3, [pc, #512]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	623b      	str	r3, [r7, #32]
 8000d7e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d80:	4b7d      	ldr	r3, [pc, #500]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d84:	4a7c      	ldr	r2, [pc, #496]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8c:	4b7a      	ldr	r3, [pc, #488]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d98:	4b77      	ldr	r3, [pc, #476]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9c:	4a76      	ldr	r2, [pc, #472]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000da4:	4b74      	ldr	r3, [pc, #464]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	f003 0301 	and.w	r3, r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000db0:	4b71      	ldr	r3, [pc, #452]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	4a70      	ldr	r2, [pc, #448]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbc:	4b6e      	ldr	r3, [pc, #440]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000dc8:	4b6b      	ldr	r3, [pc, #428]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd4:	4b68      	ldr	r3, [pc, #416]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de0:	4b65      	ldr	r3, [pc, #404]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de4:	4a64      	ldr	r2, [pc, #400]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000de6:	f043 0308 	orr.w	r3, r3, #8
 8000dea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dec:	4b62      	ldr	r3, [pc, #392]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df0:	f003 0308 	and.w	r3, r3, #8
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df8:	4b5f      	ldr	r3, [pc, #380]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	4a5e      	ldr	r2, [pc, #376]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000dfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e04:	4b5c      	ldr	r3, [pc, #368]	@ (8000f78 <HAL_LTDC_MspInit+0x28c>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> LTDC_R6
    PI14     ------> LTDC_CLK
    PG6     ------> LTDC_R7
    PH9     ------> LTDC_R3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e24:	2300      	movs	r3, #0
 8000e26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e2a:	230e      	movs	r3, #14
 8000e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e34:	4619      	mov	r1, r3
 8000e36:	4851      	ldr	r0, [pc, #324]	@ (8000f7c <HAL_LTDC_MspInit+0x290>)
 8000e38:	f004 fb70 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_6;
 8000e3c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8000e40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e56:	230e      	movs	r3, #14
 8000e58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e5c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e60:	4619      	mov	r1, r3
 8000e62:	4847      	ldr	r0, [pc, #284]	@ (8000f80 <HAL_LTDC_MspInit+0x294>)
 8000e64:	f004 fb5a 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_8;
 8000e68:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e82:	230e      	movs	r3, #14
 8000e84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	483d      	ldr	r0, [pc, #244]	@ (8000f84 <HAL_LTDC_MspInit+0x298>)
 8000e90:	f004 fb44 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10|GPIO_PIN_9
 8000e94:	f244 6331 	movw	r3, #17969	@ 0x4631
 8000e98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                          |GPIO_PIN_0|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eae:	230e      	movs	r3, #14
 8000eb0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000eb4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4833      	ldr	r0, [pc, #204]	@ (8000f88 <HAL_LTDC_MspInit+0x29c>)
 8000ebc:	f004 fb2e 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_1;
 8000ec0:	2382      	movs	r3, #130	@ 0x82
 8000ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ed8:	230e      	movs	r3, #14
 8000eda:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ede:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4829      	ldr	r0, [pc, #164]	@ (8000f8c <HAL_LTDC_MspInit+0x2a0>)
 8000ee6:	f004 fb19 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000eee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f04:	2309      	movs	r3, #9
 8000f06:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f0a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f0e:	4619      	mov	r1, r3
 8000f10:	481b      	ldr	r0, [pc, #108]	@ (8000f80 <HAL_LTDC_MspInit+0x294>)
 8000f12:	f004 fb03 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f16:	2308      	movs	r3, #8
 8000f18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f2e:	230e      	movs	r3, #14
 8000f30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4815      	ldr	r0, [pc, #84]	@ (8000f90 <HAL_LTDC_MspInit+0x2a4>)
 8000f3c:	f004 faee 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_13|GPIO_PIN_9;
 8000f40:	f44f 4322 	mov.w	r3, #41472	@ 0xa200
 8000f44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f5a:	230e      	movs	r3, #14
 8000f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f60:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8000f64:	4619      	mov	r1, r3
 8000f66:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <HAL_LTDC_MspInit+0x2a8>)
 8000f68:	f004 fad8 	bl	800551c <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	37c0      	adds	r7, #192	@ 0xc0
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40016800 	.word	0x40016800
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020400 	.word	0x40020400
 8000f80:	40021800 	.word	0x40021800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40022000 	.word	0x40022000
 8000f8c:	40022800 	.word	0x40022800
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	40021c00 	.word	0x40021c00

08000f98 <getRTCDateStr>:

/**
 * @brief Récupère la date formatée depuis la RTC
 * @param dateStr: buffer pour stocker la chaîne formatée
 */
void getRTCDateStr(char* dateStr) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	6078      	str	r0, [r7, #4]
    // Lecture de l'heure (nécessaire avant la date)
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	490d      	ldr	r1, [pc, #52]	@ (8000fd8 <getRTCDateStr+0x40>)
 8000fa4:	480d      	ldr	r0, [pc, #52]	@ (8000fdc <getRTCDateStr+0x44>)
 8000fa6:	f007 f84b 	bl	8008040 <HAL_RTC_GetTime>
    // Lecture de la date
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000faa:	2200      	movs	r2, #0
 8000fac:	490c      	ldr	r1, [pc, #48]	@ (8000fe0 <getRTCDateStr+0x48>)
 8000fae:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <getRTCDateStr+0x44>)
 8000fb0:	f007 f928 	bl	8008204 <HAL_RTC_GetDate>

    // Format: "Jour JJ/MM/AAAA"
    sprintf(dateStr, "%02d/%02d/20%02d",
            sDate.Date,
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe0 <getRTCDateStr+0x48>)
 8000fb6:	789b      	ldrb	r3, [r3, #2]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8000fb8:	461a      	mov	r2, r3
            sDate.Month,
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <getRTCDateStr+0x48>)
 8000fbc:	785b      	ldrb	r3, [r3, #1]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8000fbe:	4619      	mov	r1, r3
            sDate.Year);
 8000fc0:	4b07      	ldr	r3, [pc, #28]	@ (8000fe0 <getRTCDateStr+0x48>)
 8000fc2:	78db      	ldrb	r3, [r3, #3]
    sprintf(dateStr, "%02d/%02d/20%02d",
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4906      	ldr	r1, [pc, #24]	@ (8000fe4 <getRTCDateStr+0x4c>)
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f008 fdd4 	bl	8009b78 <siprintf>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200050e8 	.word	0x200050e8
 8000fdc:	2000512c 	.word	0x2000512c
 8000fe0:	200050fc 	.word	0x200050fc
 8000fe4:	0800a514 	.word	0x0800a514

08000fe8 <getRTCTimeStr>:

/**
 * @brief Récupère l'heure formatée depuis la RTC
 * @param timeStr: buffer pour stocker la chaîne formatée
 */
void getRTCTimeStr(char* timeStr) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
    // Lecture de l'heure
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	490b      	ldr	r1, [pc, #44]	@ (8001020 <getRTCTimeStr+0x38>)
 8000ff4:	480b      	ldr	r0, [pc, #44]	@ (8001024 <getRTCTimeStr+0x3c>)
 8000ff6:	f007 f823 	bl	8008040 <HAL_RTC_GetTime>
    // Lecture de la date (obligatoire pour débloquer les registres)
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	490a      	ldr	r1, [pc, #40]	@ (8001028 <getRTCTimeStr+0x40>)
 8000ffe:	4809      	ldr	r0, [pc, #36]	@ (8001024 <getRTCTimeStr+0x3c>)
 8001000:	f007 f900 	bl	8008204 <HAL_RTC_GetDate>

    // Format: "HH:MM"
    sprintf(timeStr, "%02d:%02d", sTime.Hours, sTime.Minutes);
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <getRTCTimeStr+0x38>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b05      	ldr	r3, [pc, #20]	@ (8001020 <getRTCTimeStr+0x38>)
 800100c:	785b      	ldrb	r3, [r3, #1]
 800100e:	4907      	ldr	r1, [pc, #28]	@ (800102c <getRTCTimeStr+0x44>)
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f008 fdb1 	bl	8009b78 <siprintf>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200050e8 	.word	0x200050e8
 8001024:	2000512c 	.word	0x2000512c
 8001028:	200050fc 	.word	0x200050fc
 800102c:	0800a528 	.word	0x0800a528

08001030 <drawMenuPage>:

/**
 * @brief Dessine la page menu principale
 */

void drawMenuPage(void) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
    char dateStr[20];
    char timeStr[6];

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001036:	f04f 30ff 	mov.w	r0, #4294967295
 800103a:	f002 faf7 	bl	800362c <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800103e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001042:	f002 faa7 	bl	8003594 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001046:	f04f 30ff 	mov.w	r0, #4294967295
 800104a:	f002 fabb 	bl	80035c4 <BSP_LCD_SetBackColor>

    // ===== En-tête avec la date =====
    BSP_LCD_SetFont(&Font16);
 800104e:	4841      	ldr	r0, [pc, #260]	@ (8001154 <drawMenuPage+0x124>)
 8001050:	f002 fad2 	bl	80035f8 <BSP_LCD_SetFont>
    getRTCDateStr(dateStr);
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff9d 	bl	8000f98 <getRTCDateStr>
    BSP_LCD_DisplayStringAt(0, 15, (uint8_t*)dateStr, CENTER_MODE);
 800105e:	f107 020c 	add.w	r2, r7, #12
 8001062:	2301      	movs	r3, #1
 8001064:	210f      	movs	r1, #15
 8001066:	2000      	movs	r0, #0
 8001068:	f002 fb4c 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // ===== Section Gauche =====
    // Zone conteneur gauche
    BSP_LCD_DrawRect(40, 60, 180, 160);
 800106c:	23a0      	movs	r3, #160	@ 0xa0
 800106e:	22b4      	movs	r2, #180	@ 0xb4
 8001070:	213c      	movs	r1, #60	@ 0x3c
 8001072:	2028      	movs	r0, #40	@ 0x28
 8001074:	f002 fcce 	bl	8003a14 <BSP_LCD_DrawRect>

    // Température
    BSP_LCD_DrawBitmap(50, 70, (uint8_t *)temp_icon_bmp);
 8001078:	4a37      	ldr	r2, [pc, #220]	@ (8001158 <drawMenuPage+0x128>)
 800107a:	2146      	movs	r1, #70	@ 0x46
 800107c:	2032      	movs	r0, #50	@ 0x32
 800107e:	f002 fd43 	bl	8003b08 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font12);
 8001082:	4836      	ldr	r0, [pc, #216]	@ (800115c <drawMenuPage+0x12c>)
 8001084:	f002 fab8 	bl	80035f8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(92, 80, (uint8_t*)"Temperature", LEFT_MODE);
 8001088:	2303      	movs	r3, #3
 800108a:	4a35      	ldr	r2, [pc, #212]	@ (8001160 <drawMenuPage+0x130>)
 800108c:	2150      	movs	r1, #80	@ 0x50
 800108e:	205c      	movs	r0, #92	@ 0x5c
 8001090:	f002 fb38 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Humidité
    BSP_LCD_DrawBitmap(50, 122, (uint8_t *)cloud_icon_bmp);
 8001094:	4a33      	ldr	r2, [pc, #204]	@ (8001164 <drawMenuPage+0x134>)
 8001096:	217a      	movs	r1, #122	@ 0x7a
 8001098:	2032      	movs	r0, #50	@ 0x32
 800109a:	f002 fd35 	bl	8003b08 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(92, 132, (uint8_t*)"Humidite", LEFT_MODE);
 800109e:	2303      	movs	r3, #3
 80010a0:	4a31      	ldr	r2, [pc, #196]	@ (8001168 <drawMenuPage+0x138>)
 80010a2:	2184      	movs	r1, #132	@ 0x84
 80010a4:	205c      	movs	r0, #92	@ 0x5c
 80010a6:	f002 fb2d 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Pluie
    BSP_LCD_DrawBitmap(50, 174, (uint8_t *)rain_icon_bmp);
 80010aa:	4a30      	ldr	r2, [pc, #192]	@ (800116c <drawMenuPage+0x13c>)
 80010ac:	21ae      	movs	r1, #174	@ 0xae
 80010ae:	2032      	movs	r0, #50	@ 0x32
 80010b0:	f002 fd2a 	bl	8003b08 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(92, 184, (uint8_t*)"Pluie", LEFT_MODE);
 80010b4:	2303      	movs	r3, #3
 80010b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001170 <drawMenuPage+0x140>)
 80010b8:	21b8      	movs	r1, #184	@ 0xb8
 80010ba:	205c      	movs	r0, #92	@ 0x5c
 80010bc:	f002 fb22 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // ===== Section Droite =====
    // Zone conteneur droite
    BSP_LCD_DrawRect(260, 60, 180, 160);
 80010c0:	23a0      	movs	r3, #160	@ 0xa0
 80010c2:	22b4      	movs	r2, #180	@ 0xb4
 80010c4:	213c      	movs	r1, #60	@ 0x3c
 80010c6:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80010ca:	f002 fca3 	bl	8003a14 <BSP_LCD_DrawRect>

    // Vent
    BSP_LCD_DrawBitmap(270, 70, (uint8_t *)wind_icon_bmp);
 80010ce:	4a29      	ldr	r2, [pc, #164]	@ (8001174 <drawMenuPage+0x144>)
 80010d0:	2146      	movs	r1, #70	@ 0x46
 80010d2:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010d6:	f002 fd17 	bl	8003b08 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 80, (uint8_t*)"Vent", LEFT_MODE);
 80010da:	2303      	movs	r3, #3
 80010dc:	4a26      	ldr	r2, [pc, #152]	@ (8001178 <drawMenuPage+0x148>)
 80010de:	2150      	movs	r1, #80	@ 0x50
 80010e0:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80010e4:	f002 fb0e 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Direction
    BSP_LCD_DrawBitmap(270, 122, (uint8_t *)direction_icon_bmp);
 80010e8:	4a24      	ldr	r2, [pc, #144]	@ (800117c <drawMenuPage+0x14c>)
 80010ea:	217a      	movs	r1, #122	@ 0x7a
 80010ec:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 80010f0:	f002 fd0a 	bl	8003b08 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 132, (uint8_t*)"Direction", LEFT_MODE);
 80010f4:	2303      	movs	r3, #3
 80010f6:	4a22      	ldr	r2, [pc, #136]	@ (8001180 <drawMenuPage+0x150>)
 80010f8:	2184      	movs	r1, #132	@ 0x84
 80010fa:	f44f 709c 	mov.w	r0, #312	@ 0x138
 80010fe:	f002 fb01 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Pression
    BSP_LCD_DrawBitmap(270, 174, (uint8_t *)pressure_icon_bmp);
 8001102:	4a20      	ldr	r2, [pc, #128]	@ (8001184 <drawMenuPage+0x154>)
 8001104:	21ae      	movs	r1, #174	@ 0xae
 8001106:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 800110a:	f002 fcfd 	bl	8003b08 <BSP_LCD_DrawBitmap>
    BSP_LCD_DisplayStringAt(312, 184, (uint8_t*)"Pression", LEFT_MODE);
 800110e:	2303      	movs	r3, #3
 8001110:	4a1d      	ldr	r2, [pc, #116]	@ (8001188 <drawMenuPage+0x158>)
 8001112:	21b8      	movs	r1, #184	@ 0xb8
 8001114:	f44f 709c 	mov.w	r0, #312	@ 0x138
 8001118:	f002 faf4 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // ===== Barre inférieure =====

    // Icône info à gauche
    BSP_LCD_DrawBitmap(18, 235, (uint8_t *)infos_icon_bmp);
 800111c:	4a1b      	ldr	r2, [pc, #108]	@ (800118c <drawMenuPage+0x15c>)
 800111e:	21eb      	movs	r1, #235	@ 0xeb
 8001120:	2012      	movs	r0, #18
 8001122:	f002 fcf1 	bl	8003b08 <BSP_LCD_DrawBitmap>

    // Heure au centre
    BSP_LCD_SetFont(&Font16);
 8001126:	480b      	ldr	r0, [pc, #44]	@ (8001154 <drawMenuPage+0x124>)
 8001128:	f002 fa66 	bl	80035f8 <BSP_LCD_SetFont>
    getRTCTimeStr(timeStr);
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff ff5a 	bl	8000fe8 <getRTCTimeStr>
    BSP_LCD_DisplayStringAt(0, 237, (uint8_t*)timeStr, CENTER_MODE);
 8001134:	1d3a      	adds	r2, r7, #4
 8001136:	2301      	movs	r3, #1
 8001138:	21ed      	movs	r1, #237	@ 0xed
 800113a:	2000      	movs	r0, #0
 800113c:	f002 fae2 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Icône paramètres à droite
    BSP_LCD_DrawBitmap(438, 235, (uint8_t *)setting_icon_bmp);
 8001140:	4a13      	ldr	r2, [pc, #76]	@ (8001190 <drawMenuPage+0x160>)
 8001142:	21eb      	movs	r1, #235	@ 0xeb
 8001144:	f44f 70db 	mov.w	r0, #438	@ 0x1b6
 8001148:	f002 fcde 	bl	8003b08 <BSP_LCD_DrawBitmap>
}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20004eb8 	.word	0x20004eb8
 8001158:	20002c48 	.word	0x20002c48
 800115c:	20004ec0 	.word	0x20004ec0
 8001160:	0800a534 	.word	0x0800a534
 8001164:	20000000 	.word	0x20000000
 8001168:	0800a540 	.word	0x0800a540
 800116c:	20001eb0 	.word	0x20001eb0
 8001170:	0800a54c 	.word	0x0800a54c
 8001174:	200034d4 	.word	0x200034d4
 8001178:	0800a554 	.word	0x0800a554
 800117c:	2000088c 	.word	0x2000088c
 8001180:	0800a55c 	.word	0x0800a55c
 8001184:	20001624 	.word	0x20001624
 8001188:	0800a568 	.word	0x0800a568
 800118c:	20001118 	.word	0x20001118
 8001190:	2000273c 	.word	0x2000273c

08001194 <drawCreditsPage>:

/**
 * @brief Dessine la page Crédits
 */
void drawCreditsPage(void) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
    char dateStr[20];
    char timeStr[6];

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800119a:	f04f 30ff 	mov.w	r0, #4294967295
 800119e:	f002 fa45 	bl	800362c <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80011a2:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80011a6:	f002 f9f5 	bl	8003594 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80011aa:	f04f 30ff 	mov.w	r0, #4294967295
 80011ae:	f002 fa09 	bl	80035c4 <BSP_LCD_SetBackColor>

    // ===== En-tête avec la date =====
    BSP_LCD_SetFont(&Font16);
 80011b2:	4821      	ldr	r0, [pc, #132]	@ (8001238 <drawCreditsPage+0xa4>)
 80011b4:	f002 fa20 	bl	80035f8 <BSP_LCD_SetFont>
    getRTCDateStr(dateStr);
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff feeb 	bl	8000f98 <getRTCDateStr>
    BSP_LCD_DisplayStringAt(0, 15, (uint8_t*)dateStr, CENTER_MODE);
 80011c2:	f107 020c 	add.w	r2, r7, #12
 80011c6:	2301      	movs	r3, #1
 80011c8:	210f      	movs	r1, #15
 80011ca:	2000      	movs	r0, #0
 80011cc:	f002 fa9a 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Icône retour
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80011d0:	4a1a      	ldr	r2, [pc, #104]	@ (800123c <drawCreditsPage+0xa8>)
 80011d2:	210a      	movs	r1, #10
 80011d4:	200a      	movs	r0, #10
 80011d6:	f002 fc97 	bl	8003b08 <BSP_LCD_DrawBitmap>

    // ===== Titre explicatif =====
    BSP_LCD_SetFont(&Font16);
 80011da:	4817      	ldr	r0, [pc, #92]	@ (8001238 <drawCreditsPage+0xa4>)
 80011dc:	f002 fa0c 	bl	80035f8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 80, (uint8_t*)"Cette station Meteo a ete realisee par :", CENTER_MODE);
 80011e0:	2301      	movs	r3, #1
 80011e2:	4a17      	ldr	r2, [pc, #92]	@ (8001240 <drawCreditsPage+0xac>)
 80011e4:	2150      	movs	r1, #80	@ 0x50
 80011e6:	2000      	movs	r0, #0
 80011e8:	f002 fa8c 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // ===== Liste des développeurs =====
    BSP_LCD_SetFont(&Font20);  // Police plus grande pour les noms
 80011ec:	4815      	ldr	r0, [pc, #84]	@ (8001244 <drawCreditsPage+0xb0>)
 80011ee:	f002 fa03 	bl	80035f8 <BSP_LCD_SetFont>
    BSP_LCD_DisplayStringAt(0, 130, (uint8_t*)"Maxime MORET", CENTER_MODE);
 80011f2:	2301      	movs	r3, #1
 80011f4:	4a14      	ldr	r2, [pc, #80]	@ (8001248 <drawCreditsPage+0xb4>)
 80011f6:	2182      	movs	r1, #130	@ 0x82
 80011f8:	2000      	movs	r0, #0
 80011fa:	f002 fa83 	bl	8003704 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 160, (uint8_t*)"Tristan GROUSSARD", CENTER_MODE);
 80011fe:	2301      	movs	r3, #1
 8001200:	4a12      	ldr	r2, [pc, #72]	@ (800124c <drawCreditsPage+0xb8>)
 8001202:	21a0      	movs	r1, #160	@ 0xa0
 8001204:	2000      	movs	r0, #0
 8001206:	f002 fa7d 	bl	8003704 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 190, (uint8_t*)"Koundeme Nobel DJESSOU", CENTER_MODE);
 800120a:	2301      	movs	r3, #1
 800120c:	4a10      	ldr	r2, [pc, #64]	@ (8001250 <drawCreditsPage+0xbc>)
 800120e:	21be      	movs	r1, #190	@ 0xbe
 8001210:	2000      	movs	r0, #0
 8001212:	f002 fa77 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // ===== Heure centrale en bas =====
    BSP_LCD_SetFont(&Font16);
 8001216:	4808      	ldr	r0, [pc, #32]	@ (8001238 <drawCreditsPage+0xa4>)
 8001218:	f002 f9ee 	bl	80035f8 <BSP_LCD_SetFont>
    getRTCTimeStr(timeStr);
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fee2 	bl	8000fe8 <getRTCTimeStr>
    BSP_LCD_DisplayStringAt(0, 237, (uint8_t*)timeStr, CENTER_MODE);
 8001224:	1d3a      	adds	r2, r7, #4
 8001226:	2301      	movs	r3, #1
 8001228:	21ed      	movs	r1, #237	@ 0xed
 800122a:	2000      	movs	r0, #0
 800122c:	f002 fa6a 	bl	8003704 <BSP_LCD_DisplayStringAt>
}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20004eb8 	.word	0x20004eb8
 800123c:	20003d60 	.word	0x20003d60
 8001240:	0800a574 	.word	0x0800a574
 8001244:	20004eb0 	.word	0x20004eb0
 8001248:	0800a5a0 	.word	0x0800a5a0
 800124c:	0800a5b0 	.word	0x0800a5b0
 8001250:	0800a5c4 	.word	0x0800a5c4

08001254 <drawTempHumidRainPage>:

/**
 * @brief Dessine la page 1
 */
void drawTempHumidRainPage(void) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b092      	sub	sp, #72	@ 0x48
 8001258:	af00      	add	r7, sp, #0
    char tempStr[10];
    char humidStr[10];
    char rainStr[10];

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 800125a:	f04f 30ff 	mov.w	r0, #4294967295
 800125e:	f002 f9e5 	bl	800362c <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001262:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001266:	f002 f995 	bl	8003594 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800126a:	f04f 30ff 	mov.w	r0, #4294967295
 800126e:	f002 f9a9 	bl	80035c4 <BSP_LCD_SetBackColor>

    // ===== En-tête avec la date =====
    BSP_LCD_SetFont(&Font16);
 8001272:	486e      	ldr	r0, [pc, #440]	@ (800142c <drawTempHumidRainPage+0x1d8>)
 8001274:	f002 f9c0 	bl	80035f8 <BSP_LCD_SetFont>
    getRTCDateStr(dateStr);
 8001278:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe8b 	bl	8000f98 <getRTCDateStr>
    BSP_LCD_DisplayStringAt(0, 15, (uint8_t*)dateStr, CENTER_MODE);
 8001282:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001286:	2301      	movs	r3, #1
 8001288:	210f      	movs	r1, #15
 800128a:	2000      	movs	r0, #0
 800128c:	f002 fa3a 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 8001290:	4a67      	ldr	r2, [pc, #412]	@ (8001430 <drawTempHumidRainPage+0x1dc>)
 8001292:	210a      	movs	r1, #10
 8001294:	200a      	movs	r0, #10
 8001296:	f002 fc37 	bl	8003b08 <BSP_LCD_DrawBitmap>

    // ===== Les trois carrés de mesures =====
    // Carrés de 120x120 pixels avec espacement de 30 pixels
    // Position Y centrée verticalement
    const uint16_t squareSize = 120;
 800129a:	2378      	movs	r3, #120	@ 0x78
 800129c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const uint16_t spacing = 30;
 80012a0:	231e      	movs	r3, #30
 80012a2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    const uint16_t startX = 40;
 80012a6:	2328      	movs	r3, #40	@ 0x28
 80012a8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    const uint16_t startY = 80;  // Ajusté pour centrer verticalement
 80012ac:	2350      	movs	r3, #80	@ 0x50
 80012ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    // Carré température
    BSP_LCD_DrawRect(startX, startY, squareSize, squareSize);
 80012b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80012b6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80012ba:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80012be:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 80012c2:	f002 fba7 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 20, startY + 20, (uint8_t *)temp_icon_bmp);
 80012c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80012ca:	3314      	adds	r3, #20
 80012cc:	4618      	mov	r0, r3
 80012ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80012d2:	3314      	adds	r3, #20
 80012d4:	4a57      	ldr	r2, [pc, #348]	@ (8001434 <drawTempHumidRainPage+0x1e0>)
 80012d6:	4619      	mov	r1, r3
 80012d8:	f002 fc16 	bl	8003b08 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font20);
 80012dc:	4856      	ldr	r0, [pc, #344]	@ (8001438 <drawTempHumidRainPage+0x1e4>)
 80012de:	f002 f98b 	bl	80035f8 <BSP_LCD_SetFont>
    sprintf(tempStr, "15deg");
 80012e2:	f107 0318 	add.w	r3, r7, #24
 80012e6:	4955      	ldr	r1, [pc, #340]	@ (800143c <drawTempHumidRainPage+0x1e8>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f008 fc45 	bl	8009b78 <siprintf>
    BSP_LCD_DisplayStringAt(startX + 20, startY + 70, (uint8_t*)tempStr, LEFT_MODE);
 80012ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80012f2:	3314      	adds	r3, #20
 80012f4:	b298      	uxth	r0, r3
 80012f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80012fa:	3346      	adds	r3, #70	@ 0x46
 80012fc:	b299      	uxth	r1, r3
 80012fe:	f107 0218 	add.w	r2, r7, #24
 8001302:	2303      	movs	r3, #3
 8001304:	f002 f9fe 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Carré humidité
    BSP_LCD_DrawRect(startX + squareSize + spacing, startY, squareSize, squareSize);
 8001308:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800130c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001310:	4413      	add	r3, r2
 8001312:	b29a      	uxth	r2, r3
 8001314:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001318:	4413      	add	r3, r2
 800131a:	b298      	uxth	r0, r3
 800131c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001320:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001324:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8001328:	f002 fb74 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + squareSize + spacing + 20, startY + 20, (uint8_t *)cloud_icon_bmp);
 800132c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8001330:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001334:	441a      	add	r2, r3
 8001336:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800133a:	4413      	add	r3, r2
 800133c:	3314      	adds	r3, #20
 800133e:	4618      	mov	r0, r3
 8001340:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001344:	3314      	adds	r3, #20
 8001346:	4a3e      	ldr	r2, [pc, #248]	@ (8001440 <drawTempHumidRainPage+0x1ec>)
 8001348:	4619      	mov	r1, r3
 800134a:	f002 fbdd 	bl	8003b08 <BSP_LCD_DrawBitmap>
    sprintf(humidStr, "65%%");
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	493c      	ldr	r1, [pc, #240]	@ (8001444 <drawTempHumidRainPage+0x1f0>)
 8001354:	4618      	mov	r0, r3
 8001356:	f008 fc0f 	bl	8009b78 <siprintf>
    BSP_LCD_DisplayStringAt(startX + squareSize + spacing + 20, startY + 70, (uint8_t*)humidStr, LEFT_MODE);
 800135a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800135e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001362:	4413      	add	r3, r2
 8001364:	b29a      	uxth	r2, r3
 8001366:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800136a:	4413      	add	r3, r2
 800136c:	b29b      	uxth	r3, r3
 800136e:	3314      	adds	r3, #20
 8001370:	b298      	uxth	r0, r3
 8001372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001376:	3346      	adds	r3, #70	@ 0x46
 8001378:	b299      	uxth	r1, r3
 800137a:	f107 020c 	add.w	r2, r7, #12
 800137e:	2303      	movs	r3, #3
 8001380:	f002 f9c0 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Carré pluviométrie
    BSP_LCD_DrawRect(startX + 2 * (squareSize + spacing), startY, squareSize, squareSize);
 8001384:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001388:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800138c:	4413      	add	r3, r2
 800138e:	b29b      	uxth	r3, r3
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	b29a      	uxth	r2, r3
 8001394:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001398:	4413      	add	r3, r2
 800139a:	b298      	uxth	r0, r3
 800139c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80013a0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80013a4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80013a8:	f002 fb34 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 2 * (squareSize + spacing) + 20, startY + 20, (uint8_t *)rain_icon_bmp);
 80013ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80013b0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80013b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80013b8:	440b      	add	r3, r1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4413      	add	r3, r2
 80013be:	3314      	adds	r3, #20
 80013c0:	4618      	mov	r0, r3
 80013c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80013c6:	3314      	adds	r3, #20
 80013c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001448 <drawTempHumidRainPage+0x1f4>)
 80013ca:	4619      	mov	r1, r3
 80013cc:	f002 fb9c 	bl	8003b08 <BSP_LCD_DrawBitmap>
    sprintf(rainStr, "100 mm");
 80013d0:	463b      	mov	r3, r7
 80013d2:	491e      	ldr	r1, [pc, #120]	@ (800144c <drawTempHumidRainPage+0x1f8>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f008 fbcf 	bl	8009b78 <siprintf>
    BSP_LCD_DisplayStringAt(startX + 2 * (squareSize + spacing) + 20, startY + 70, (uint8_t*)rainStr, LEFT_MODE);
 80013da:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80013de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80013ee:	4413      	add	r3, r2
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	3314      	adds	r3, #20
 80013f4:	b298      	uxth	r0, r3
 80013f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80013fa:	3346      	adds	r3, #70	@ 0x46
 80013fc:	b299      	uxth	r1, r3
 80013fe:	463a      	mov	r2, r7
 8001400:	2303      	movs	r3, #3
 8001402:	f002 f97f 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // ===== Heure centrale en bas =====
    BSP_LCD_SetFont(&Font16);
 8001406:	4809      	ldr	r0, [pc, #36]	@ (800142c <drawTempHumidRainPage+0x1d8>)
 8001408:	f002 f8f6 	bl	80035f8 <BSP_LCD_SetFont>
    getRTCTimeStr(timeStr);
 800140c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fde9 	bl	8000fe8 <getRTCTimeStr>
    BSP_LCD_DisplayStringAt(0, 237, (uint8_t*)timeStr, CENTER_MODE);
 8001416:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800141a:	2301      	movs	r3, #1
 800141c:	21ed      	movs	r1, #237	@ 0xed
 800141e:	2000      	movs	r0, #0
 8001420:	f002 f970 	bl	8003704 <BSP_LCD_DisplayStringAt>
}
 8001424:	bf00      	nop
 8001426:	3748      	adds	r7, #72	@ 0x48
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20004eb8 	.word	0x20004eb8
 8001430:	20003d60 	.word	0x20003d60
 8001434:	20002c48 	.word	0x20002c48
 8001438:	20004eb0 	.word	0x20004eb0
 800143c:	0800a5dc 	.word	0x0800a5dc
 8001440:	20000000 	.word	0x20000000
 8001444:	0800a5e4 	.word	0x0800a5e4
 8001448:	20001eb0 	.word	0x20001eb0
 800144c:	0800a5ec 	.word	0x0800a5ec

08001450 <drawWindDirPressurePage>:

/**
 * @brief Dessine la page 2
 */

void drawWindDirPressurePage(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b092      	sub	sp, #72	@ 0x48
 8001454:	af00      	add	r7, sp, #0
    char windStr[10];
    char dirStr[10];
    char pressureStr[10];

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001456:	f04f 30ff 	mov.w	r0, #4294967295
 800145a:	f002 f8e7 	bl	800362c <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800145e:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001462:	f002 f897 	bl	8003594 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001466:	f04f 30ff 	mov.w	r0, #4294967295
 800146a:	f002 f8ab 	bl	80035c4 <BSP_LCD_SetBackColor>

    // ===== En-tête avec la date =====
    BSP_LCD_SetFont(&Font16);
 800146e:	486e      	ldr	r0, [pc, #440]	@ (8001628 <drawWindDirPressurePage+0x1d8>)
 8001470:	f002 f8c2 	bl	80035f8 <BSP_LCD_SetFont>
    getRTCDateStr(dateStr);
 8001474:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fd8d 	bl	8000f98 <getRTCDateStr>
    BSP_LCD_DisplayStringAt(0, 15, (uint8_t*)dateStr, CENTER_MODE);
 800147e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001482:	2301      	movs	r3, #1
 8001484:	210f      	movs	r1, #15
 8001486:	2000      	movs	r0, #0
 8001488:	f002 f93c 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 800148c:	4a67      	ldr	r2, [pc, #412]	@ (800162c <drawWindDirPressurePage+0x1dc>)
 800148e:	210a      	movs	r1, #10
 8001490:	200a      	movs	r0, #10
 8001492:	f002 fb39 	bl	8003b08 <BSP_LCD_DrawBitmap>

    // ===== Les trois carrés de mesures =====
    // Carrés de 120x120 pixels avec espacement de 30 pixels
    const uint16_t squareSize = 120;
 8001496:	2378      	movs	r3, #120	@ 0x78
 8001498:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const uint16_t spacing = 30;
 800149c:	231e      	movs	r3, #30
 800149e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    const uint16_t startX = 40;
 80014a2:	2328      	movs	r3, #40	@ 0x28
 80014a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    const uint16_t startY = 80;  // Ajusté pour centrer verticalement
 80014a8:	2350      	movs	r3, #80	@ 0x50
 80014aa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    // Carré vitesse du vent
    BSP_LCD_DrawRect(startX, startY, squareSize, squareSize);
 80014ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80014b2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80014b6:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80014ba:	f8b7 0042 	ldrh.w	r0, [r7, #66]	@ 0x42
 80014be:	f002 faa9 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 20, startY + 20, (uint8_t *)wind_icon_bmp);
 80014c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80014c6:	3314      	adds	r3, #20
 80014c8:	4618      	mov	r0, r3
 80014ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80014ce:	3314      	adds	r3, #20
 80014d0:	4a57      	ldr	r2, [pc, #348]	@ (8001630 <drawWindDirPressurePage+0x1e0>)
 80014d2:	4619      	mov	r1, r3
 80014d4:	f002 fb18 	bl	8003b08 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font20);
 80014d8:	4856      	ldr	r0, [pc, #344]	@ (8001634 <drawWindDirPressurePage+0x1e4>)
 80014da:	f002 f88d 	bl	80035f8 <BSP_LCD_SetFont>
    sprintf(windStr, "30\nkm/h");
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	4955      	ldr	r1, [pc, #340]	@ (8001638 <drawWindDirPressurePage+0x1e8>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f008 fb47 	bl	8009b78 <siprintf>
    BSP_LCD_DisplayStringAt(startX + 20, startY + 60, (uint8_t*)windStr, LEFT_MODE);
 80014ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80014ee:	3314      	adds	r3, #20
 80014f0:	b298      	uxth	r0, r3
 80014f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80014f6:	333c      	adds	r3, #60	@ 0x3c
 80014f8:	b299      	uxth	r1, r3
 80014fa:	f107 0218 	add.w	r2, r7, #24
 80014fe:	2303      	movs	r3, #3
 8001500:	f002 f900 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Carré direction du vent
    BSP_LCD_DrawRect(startX + squareSize + spacing, startY, squareSize, squareSize);
 8001504:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8001508:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800150c:	4413      	add	r3, r2
 800150e:	b29a      	uxth	r2, r3
 8001510:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001514:	4413      	add	r3, r2
 8001516:	b298      	uxth	r0, r3
 8001518:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800151c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001520:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8001524:	f002 fa76 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + squareSize + spacing + 20, startY + 20, (uint8_t *)direction_icon_bmp);
 8001528:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800152c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001530:	441a      	add	r2, r3
 8001532:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001536:	4413      	add	r3, r2
 8001538:	3314      	adds	r3, #20
 800153a:	4618      	mov	r0, r3
 800153c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001540:	3314      	adds	r3, #20
 8001542:	4a3e      	ldr	r2, [pc, #248]	@ (800163c <drawWindDirPressurePage+0x1ec>)
 8001544:	4619      	mov	r1, r3
 8001546:	f002 fadf 	bl	8003b08 <BSP_LCD_DrawBitmap>
    sprintf(dirStr, "65%%");
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	493c      	ldr	r1, [pc, #240]	@ (8001640 <drawWindDirPressurePage+0x1f0>)
 8001550:	4618      	mov	r0, r3
 8001552:	f008 fb11 	bl	8009b78 <siprintf>
    BSP_LCD_DisplayStringAt(startX + squareSize + spacing + 20, startY + 70, (uint8_t*)dirStr, LEFT_MODE);
 8001556:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800155a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800155e:	4413      	add	r3, r2
 8001560:	b29a      	uxth	r2, r3
 8001562:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001566:	4413      	add	r3, r2
 8001568:	b29b      	uxth	r3, r3
 800156a:	3314      	adds	r3, #20
 800156c:	b298      	uxth	r0, r3
 800156e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001572:	3346      	adds	r3, #70	@ 0x46
 8001574:	b299      	uxth	r1, r3
 8001576:	f107 020c 	add.w	r2, r7, #12
 800157a:	2303      	movs	r3, #3
 800157c:	f002 f8c2 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Carré pression
    BSP_LCD_DrawRect(startX + 2 * (squareSize + spacing), startY, squareSize, squareSize);
 8001580:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001584:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001588:	4413      	add	r3, r2
 800158a:	b29b      	uxth	r3, r3
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001594:	4413      	add	r3, r2
 8001596:	b298      	uxth	r0, r3
 8001598:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800159c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80015a0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 80015a4:	f002 fa36 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DrawBitmap(startX + 2 * (squareSize + spacing) + 20, startY + 20, (uint8_t *)pressure_icon_bmp);
 80015a8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80015ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80015b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80015b4:	440b      	add	r3, r1
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	3314      	adds	r3, #20
 80015bc:	4618      	mov	r0, r3
 80015be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80015c2:	3314      	adds	r3, #20
 80015c4:	4a1f      	ldr	r2, [pc, #124]	@ (8001644 <drawWindDirPressurePage+0x1f4>)
 80015c6:	4619      	mov	r1, r3
 80015c8:	f002 fa9e 	bl	8003b08 <BSP_LCD_DrawBitmap>
    sprintf(pressureStr, "50\nbar");
 80015cc:	463b      	mov	r3, r7
 80015ce:	491e      	ldr	r1, [pc, #120]	@ (8001648 <drawWindDirPressurePage+0x1f8>)
 80015d0:	4618      	mov	r0, r3
 80015d2:	f008 fad1 	bl	8009b78 <siprintf>
    BSP_LCD_DisplayStringAt(startX + 2 * (squareSize + spacing) + 20, startY + 60, (uint8_t*)pressureStr, LEFT_MODE);
 80015d6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80015da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80015de:	4413      	add	r3, r2
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80015ea:	4413      	add	r3, r2
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	3314      	adds	r3, #20
 80015f0:	b298      	uxth	r0, r3
 80015f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80015f6:	333c      	adds	r3, #60	@ 0x3c
 80015f8:	b299      	uxth	r1, r3
 80015fa:	463a      	mov	r2, r7
 80015fc:	2303      	movs	r3, #3
 80015fe:	f002 f881 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // ===== Heure centrale en bas =====
    BSP_LCD_SetFont(&Font16);
 8001602:	4809      	ldr	r0, [pc, #36]	@ (8001628 <drawWindDirPressurePage+0x1d8>)
 8001604:	f001 fff8 	bl	80035f8 <BSP_LCD_SetFont>
    getRTCTimeStr(timeStr);
 8001608:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fceb 	bl	8000fe8 <getRTCTimeStr>
    BSP_LCD_DisplayStringAt(0, 237, (uint8_t*)timeStr, CENTER_MODE);
 8001612:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001616:	2301      	movs	r3, #1
 8001618:	21ed      	movs	r1, #237	@ 0xed
 800161a:	2000      	movs	r0, #0
 800161c:	f002 f872 	bl	8003704 <BSP_LCD_DisplayStringAt>
}
 8001620:	bf00      	nop
 8001622:	3748      	adds	r7, #72	@ 0x48
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20004eb8 	.word	0x20004eb8
 800162c:	20003d60 	.word	0x20003d60
 8001630:	200034d4 	.word	0x200034d4
 8001634:	20004eb0 	.word	0x20004eb0
 8001638:	0800a5f4 	.word	0x0800a5f4
 800163c:	2000088c 	.word	0x2000088c
 8001640:	0800a5e4 	.word	0x0800a5e4
 8001644:	20001624 	.word	0x20001624
 8001648:	0800a5fc 	.word	0x0800a5fc

0800164c <drawSettingsPage>:


/**
 * @brief Dessine la page de réglage date/heure
 */
void drawSettingsPage(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
    char buffer[20];
    const uint16_t buttonSize = 30;      // Taille des boutons +/-
 8001652:	231e      	movs	r3, #30
 8001654:	83fb      	strh	r3, [r7, #30]
    const uint16_t valueWidth = 60;      // Largeur zone valeur
 8001656:	233c      	movs	r3, #60	@ 0x3c
 8001658:	83bb      	strh	r3, [r7, #28]
    const uint16_t spacing = 30;         // Espacement entre les éléments
 800165a:	231e      	movs	r3, #30
 800165c:	837b      	strh	r3, [r7, #26]

    // Lire les valeurs actuelles de la RTC
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800165e:	2200      	movs	r2, #0
 8001660:	4993      	ldr	r1, [pc, #588]	@ (80018b0 <drawSettingsPage+0x264>)
 8001662:	4894      	ldr	r0, [pc, #592]	@ (80018b4 <drawSettingsPage+0x268>)
 8001664:	f006 fcec 	bl	8008040 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001668:	2200      	movs	r2, #0
 800166a:	4993      	ldr	r1, [pc, #588]	@ (80018b8 <drawSettingsPage+0x26c>)
 800166c:	4891      	ldr	r0, [pc, #580]	@ (80018b4 <drawSettingsPage+0x268>)
 800166e:	f006 fdc9 	bl	8008204 <HAL_RTC_GetDate>

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001672:	f04f 30ff 	mov.w	r0, #4294967295
 8001676:	f001 ffd9 	bl	800362c <BSP_LCD_Clear>

    // Icône retour
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 800167a:	4a90      	ldr	r2, [pc, #576]	@ (80018bc <drawSettingsPage+0x270>)
 800167c:	210a      	movs	r1, #10
 800167e:	200a      	movs	r0, #10
 8001680:	f002 fa42 	bl	8003b08 <BSP_LCD_DrawBitmap>

    // Configuration texte
    BSP_LCD_SetFont(&Font16);
 8001684:	488e      	ldr	r0, [pc, #568]	@ (80018c0 <drawSettingsPage+0x274>)
 8001686:	f001 ffb7 	bl	80035f8 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800168a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800168e:	f001 ff81 	bl	8003594 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001692:	f04f 30ff 	mov.w	r0, #4294967295
 8001696:	f001 ff95 	bl	80035c4 <BSP_LCD_SetBackColor>

    // Section Date
    BSP_LCD_DisplayStringAt(40, 80, (uint8_t*)"Date", LEFT_MODE);
 800169a:	2303      	movs	r3, #3
 800169c:	4a89      	ldr	r2, [pc, #548]	@ (80018c4 <drawSettingsPage+0x278>)
 800169e:	2150      	movs	r1, #80	@ 0x50
 80016a0:	2028      	movs	r0, #40	@ 0x28
 80016a2:	f002 f82f 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Positions horizontales pour les colonnes de réglage
    const uint16_t col1 = 150;  // Jour
 80016a6:	2396      	movs	r3, #150	@ 0x96
 80016a8:	833b      	strh	r3, [r7, #24]
    const uint16_t col2 = col1 + valueWidth + spacing;  // Mois
 80016aa:	8b3a      	ldrh	r2, [r7, #24]
 80016ac:	8bbb      	ldrh	r3, [r7, #28]
 80016ae:	4413      	add	r3, r2
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	8b7b      	ldrh	r3, [r7, #26]
 80016b4:	4413      	add	r3, r2
 80016b6:	82fb      	strh	r3, [r7, #22]
    const uint16_t col3 = col2 + valueWidth + spacing;  // Année
 80016b8:	8afa      	ldrh	r2, [r7, #22]
 80016ba:	8bbb      	ldrh	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	b29a      	uxth	r2, r3
 80016c0:	8b7b      	ldrh	r3, [r7, #26]
 80016c2:	4413      	add	r3, r2
 80016c4:	82bb      	strh	r3, [r7, #20]

    // Boutons et valeurs pour le jour
    BSP_LCD_DrawRect(col1, 50, buttonSize, buttonSize);  // Bouton +
 80016c6:	8bfb      	ldrh	r3, [r7, #30]
 80016c8:	8bfa      	ldrh	r2, [r7, #30]
 80016ca:	8b38      	ldrh	r0, [r7, #24]
 80016cc:	2132      	movs	r1, #50	@ 0x32
 80016ce:	f002 f9a1 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col1 + 10, 55, (uint8_t*)"+", LEFT_MODE);
 80016d2:	8b3b      	ldrh	r3, [r7, #24]
 80016d4:	330a      	adds	r3, #10
 80016d6:	b298      	uxth	r0, r3
 80016d8:	2303      	movs	r3, #3
 80016da:	4a7b      	ldr	r2, [pc, #492]	@ (80018c8 <drawSettingsPage+0x27c>)
 80016dc:	2137      	movs	r1, #55	@ 0x37
 80016de:	f002 f811 	bl	8003704 <BSP_LCD_DisplayStringAt>
    sprintf(buffer, "%02d", sDate.Date);
 80016e2:	4b75      	ldr	r3, [pc, #468]	@ (80018b8 <drawSettingsPage+0x26c>)
 80016e4:	789b      	ldrb	r3, [r3, #2]
 80016e6:	461a      	mov	r2, r3
 80016e8:	463b      	mov	r3, r7
 80016ea:	4978      	ldr	r1, [pc, #480]	@ (80018cc <drawSettingsPage+0x280>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f008 fa43 	bl	8009b78 <siprintf>
    BSP_LCD_DisplayStringAt(col1 + 5, 90, (uint8_t*)buffer, LEFT_MODE);
 80016f2:	8b3b      	ldrh	r3, [r7, #24]
 80016f4:	3305      	adds	r3, #5
 80016f6:	b298      	uxth	r0, r3
 80016f8:	463a      	mov	r2, r7
 80016fa:	2303      	movs	r3, #3
 80016fc:	215a      	movs	r1, #90	@ 0x5a
 80016fe:	f002 f801 	bl	8003704 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(col1, 120, buttonSize, buttonSize);  // Bouton -
 8001702:	8bfb      	ldrh	r3, [r7, #30]
 8001704:	8bfa      	ldrh	r2, [r7, #30]
 8001706:	8b38      	ldrh	r0, [r7, #24]
 8001708:	2178      	movs	r1, #120	@ 0x78
 800170a:	f002 f983 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col1 + 10, 125, (uint8_t*)"-", LEFT_MODE);
 800170e:	8b3b      	ldrh	r3, [r7, #24]
 8001710:	330a      	adds	r3, #10
 8001712:	b298      	uxth	r0, r3
 8001714:	2303      	movs	r3, #3
 8001716:	4a6e      	ldr	r2, [pc, #440]	@ (80018d0 <drawSettingsPage+0x284>)
 8001718:	217d      	movs	r1, #125	@ 0x7d
 800171a:	f001 fff3 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Boutons et valeurs pour le mois
    BSP_LCD_DrawRect(col2, 50, buttonSize, buttonSize);
 800171e:	8bfb      	ldrh	r3, [r7, #30]
 8001720:	8bfa      	ldrh	r2, [r7, #30]
 8001722:	8af8      	ldrh	r0, [r7, #22]
 8001724:	2132      	movs	r1, #50	@ 0x32
 8001726:	f002 f975 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col2 + 10, 55, (uint8_t*)"+", LEFT_MODE);
 800172a:	8afb      	ldrh	r3, [r7, #22]
 800172c:	330a      	adds	r3, #10
 800172e:	b298      	uxth	r0, r3
 8001730:	2303      	movs	r3, #3
 8001732:	4a65      	ldr	r2, [pc, #404]	@ (80018c8 <drawSettingsPage+0x27c>)
 8001734:	2137      	movs	r1, #55	@ 0x37
 8001736:	f001 ffe5 	bl	8003704 <BSP_LCD_DisplayStringAt>
    sprintf(buffer, "%02d", sDate.Month);
 800173a:	4b5f      	ldr	r3, [pc, #380]	@ (80018b8 <drawSettingsPage+0x26c>)
 800173c:	785b      	ldrb	r3, [r3, #1]
 800173e:	461a      	mov	r2, r3
 8001740:	463b      	mov	r3, r7
 8001742:	4962      	ldr	r1, [pc, #392]	@ (80018cc <drawSettingsPage+0x280>)
 8001744:	4618      	mov	r0, r3
 8001746:	f008 fa17 	bl	8009b78 <siprintf>
    BSP_LCD_DisplayStringAt(col2 + 5, 90, (uint8_t*)buffer, LEFT_MODE);
 800174a:	8afb      	ldrh	r3, [r7, #22]
 800174c:	3305      	adds	r3, #5
 800174e:	b298      	uxth	r0, r3
 8001750:	463a      	mov	r2, r7
 8001752:	2303      	movs	r3, #3
 8001754:	215a      	movs	r1, #90	@ 0x5a
 8001756:	f001 ffd5 	bl	8003704 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(col2, 120, buttonSize, buttonSize);
 800175a:	8bfb      	ldrh	r3, [r7, #30]
 800175c:	8bfa      	ldrh	r2, [r7, #30]
 800175e:	8af8      	ldrh	r0, [r7, #22]
 8001760:	2178      	movs	r1, #120	@ 0x78
 8001762:	f002 f957 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col2 + 10, 125, (uint8_t*)"-", LEFT_MODE);
 8001766:	8afb      	ldrh	r3, [r7, #22]
 8001768:	330a      	adds	r3, #10
 800176a:	b298      	uxth	r0, r3
 800176c:	2303      	movs	r3, #3
 800176e:	4a58      	ldr	r2, [pc, #352]	@ (80018d0 <drawSettingsPage+0x284>)
 8001770:	217d      	movs	r1, #125	@ 0x7d
 8001772:	f001 ffc7 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Boutons et valeurs pour l'année
    BSP_LCD_DrawRect(col3, 50, buttonSize, buttonSize);
 8001776:	8bfb      	ldrh	r3, [r7, #30]
 8001778:	8bfa      	ldrh	r2, [r7, #30]
 800177a:	8ab8      	ldrh	r0, [r7, #20]
 800177c:	2132      	movs	r1, #50	@ 0x32
 800177e:	f002 f949 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col3 + 10, 55, (uint8_t*)"+", LEFT_MODE);
 8001782:	8abb      	ldrh	r3, [r7, #20]
 8001784:	330a      	adds	r3, #10
 8001786:	b298      	uxth	r0, r3
 8001788:	2303      	movs	r3, #3
 800178a:	4a4f      	ldr	r2, [pc, #316]	@ (80018c8 <drawSettingsPage+0x27c>)
 800178c:	2137      	movs	r1, #55	@ 0x37
 800178e:	f001 ffb9 	bl	8003704 <BSP_LCD_DisplayStringAt>
    sprintf(buffer, "20%02d", sDate.Year);
 8001792:	4b49      	ldr	r3, [pc, #292]	@ (80018b8 <drawSettingsPage+0x26c>)
 8001794:	78db      	ldrb	r3, [r3, #3]
 8001796:	461a      	mov	r2, r3
 8001798:	463b      	mov	r3, r7
 800179a:	494e      	ldr	r1, [pc, #312]	@ (80018d4 <drawSettingsPage+0x288>)
 800179c:	4618      	mov	r0, r3
 800179e:	f008 f9eb 	bl	8009b78 <siprintf>
    BSP_LCD_DisplayStringAt(col3 - 5, 90, (uint8_t*)buffer, LEFT_MODE);
 80017a2:	8abb      	ldrh	r3, [r7, #20]
 80017a4:	3b05      	subs	r3, #5
 80017a6:	b298      	uxth	r0, r3
 80017a8:	463a      	mov	r2, r7
 80017aa:	2303      	movs	r3, #3
 80017ac:	215a      	movs	r1, #90	@ 0x5a
 80017ae:	f001 ffa9 	bl	8003704 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(col3, 120, buttonSize, buttonSize);
 80017b2:	8bfb      	ldrh	r3, [r7, #30]
 80017b4:	8bfa      	ldrh	r2, [r7, #30]
 80017b6:	8ab8      	ldrh	r0, [r7, #20]
 80017b8:	2178      	movs	r1, #120	@ 0x78
 80017ba:	f002 f92b 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col3 + 10, 125, (uint8_t*)"-", LEFT_MODE);
 80017be:	8abb      	ldrh	r3, [r7, #20]
 80017c0:	330a      	adds	r3, #10
 80017c2:	b298      	uxth	r0, r3
 80017c4:	2303      	movs	r3, #3
 80017c6:	4a42      	ldr	r2, [pc, #264]	@ (80018d0 <drawSettingsPage+0x284>)
 80017c8:	217d      	movs	r1, #125	@ 0x7d
 80017ca:	f001 ff9b 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Section Heure
    BSP_LCD_DisplayStringAt(40, 180, (uint8_t*)"Heure", LEFT_MODE);
 80017ce:	2303      	movs	r3, #3
 80017d0:	4a41      	ldr	r2, [pc, #260]	@ (80018d8 <drawSettingsPage+0x28c>)
 80017d2:	21b4      	movs	r1, #180	@ 0xb4
 80017d4:	2028      	movs	r0, #40	@ 0x28
 80017d6:	f001 ff95 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Boutons et valeurs pour les heures
    BSP_LCD_DrawRect(col1, 160, buttonSize, buttonSize);
 80017da:	8bfb      	ldrh	r3, [r7, #30]
 80017dc:	8bfa      	ldrh	r2, [r7, #30]
 80017de:	8b38      	ldrh	r0, [r7, #24]
 80017e0:	21a0      	movs	r1, #160	@ 0xa0
 80017e2:	f002 f917 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col1 + 10, 165, (uint8_t*)"+", LEFT_MODE);
 80017e6:	8b3b      	ldrh	r3, [r7, #24]
 80017e8:	330a      	adds	r3, #10
 80017ea:	b298      	uxth	r0, r3
 80017ec:	2303      	movs	r3, #3
 80017ee:	4a36      	ldr	r2, [pc, #216]	@ (80018c8 <drawSettingsPage+0x27c>)
 80017f0:	21a5      	movs	r1, #165	@ 0xa5
 80017f2:	f001 ff87 	bl	8003704 <BSP_LCD_DisplayStringAt>
    sprintf(buffer, "%02d", sTime.Hours);
 80017f6:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <drawSettingsPage+0x264>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	463b      	mov	r3, r7
 80017fe:	4933      	ldr	r1, [pc, #204]	@ (80018cc <drawSettingsPage+0x280>)
 8001800:	4618      	mov	r0, r3
 8001802:	f008 f9b9 	bl	8009b78 <siprintf>
    BSP_LCD_DisplayStringAt(col1 + 5, 200, (uint8_t*)buffer, LEFT_MODE);
 8001806:	8b3b      	ldrh	r3, [r7, #24]
 8001808:	3305      	adds	r3, #5
 800180a:	b298      	uxth	r0, r3
 800180c:	463a      	mov	r2, r7
 800180e:	2303      	movs	r3, #3
 8001810:	21c8      	movs	r1, #200	@ 0xc8
 8001812:	f001 ff77 	bl	8003704 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(col1, 230, buttonSize, buttonSize);
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	8bfa      	ldrh	r2, [r7, #30]
 800181a:	8b38      	ldrh	r0, [r7, #24]
 800181c:	21e6      	movs	r1, #230	@ 0xe6
 800181e:	f002 f8f9 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col1 + 10, 235, (uint8_t*)"-", LEFT_MODE);
 8001822:	8b3b      	ldrh	r3, [r7, #24]
 8001824:	330a      	adds	r3, #10
 8001826:	b298      	uxth	r0, r3
 8001828:	2303      	movs	r3, #3
 800182a:	4a29      	ldr	r2, [pc, #164]	@ (80018d0 <drawSettingsPage+0x284>)
 800182c:	21eb      	movs	r1, #235	@ 0xeb
 800182e:	f001 ff69 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Boutons et valeurs pour les minutes
    BSP_LCD_DrawRect(col2, 160, buttonSize, buttonSize);
 8001832:	8bfb      	ldrh	r3, [r7, #30]
 8001834:	8bfa      	ldrh	r2, [r7, #30]
 8001836:	8af8      	ldrh	r0, [r7, #22]
 8001838:	21a0      	movs	r1, #160	@ 0xa0
 800183a:	f002 f8eb 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col2 + 10, 165, (uint8_t*)"+", LEFT_MODE);
 800183e:	8afb      	ldrh	r3, [r7, #22]
 8001840:	330a      	adds	r3, #10
 8001842:	b298      	uxth	r0, r3
 8001844:	2303      	movs	r3, #3
 8001846:	4a20      	ldr	r2, [pc, #128]	@ (80018c8 <drawSettingsPage+0x27c>)
 8001848:	21a5      	movs	r1, #165	@ 0xa5
 800184a:	f001 ff5b 	bl	8003704 <BSP_LCD_DisplayStringAt>
    sprintf(buffer, "%02d", sTime.Minutes);
 800184e:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <drawSettingsPage+0x264>)
 8001850:	785b      	ldrb	r3, [r3, #1]
 8001852:	461a      	mov	r2, r3
 8001854:	463b      	mov	r3, r7
 8001856:	491d      	ldr	r1, [pc, #116]	@ (80018cc <drawSettingsPage+0x280>)
 8001858:	4618      	mov	r0, r3
 800185a:	f008 f98d 	bl	8009b78 <siprintf>
    BSP_LCD_DisplayStringAt(col2 + 5, 200, (uint8_t*)buffer, LEFT_MODE);
 800185e:	8afb      	ldrh	r3, [r7, #22]
 8001860:	3305      	adds	r3, #5
 8001862:	b298      	uxth	r0, r3
 8001864:	463a      	mov	r2, r7
 8001866:	2303      	movs	r3, #3
 8001868:	21c8      	movs	r1, #200	@ 0xc8
 800186a:	f001 ff4b 	bl	8003704 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DrawRect(col2, 230, buttonSize, buttonSize);
 800186e:	8bfb      	ldrh	r3, [r7, #30]
 8001870:	8bfa      	ldrh	r2, [r7, #30]
 8001872:	8af8      	ldrh	r0, [r7, #22]
 8001874:	21e6      	movs	r1, #230	@ 0xe6
 8001876:	f002 f8cd 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(col2 + 10, 235, (uint8_t*)"-", LEFT_MODE);
 800187a:	8afb      	ldrh	r3, [r7, #22]
 800187c:	330a      	adds	r3, #10
 800187e:	b298      	uxth	r0, r3
 8001880:	2303      	movs	r3, #3
 8001882:	4a13      	ldr	r2, [pc, #76]	@ (80018d0 <drawSettingsPage+0x284>)
 8001884:	21eb      	movs	r1, #235	@ 0xeb
 8001886:	f001 ff3d 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // Bouton Valider
    BSP_LCD_DrawRect(340, 220, 100, 30);
 800188a:	231e      	movs	r3, #30
 800188c:	2264      	movs	r2, #100	@ 0x64
 800188e:	21dc      	movs	r1, #220	@ 0xdc
 8001890:	f44f 70aa 	mov.w	r0, #340	@ 0x154
 8001894:	f002 f8be 	bl	8003a14 <BSP_LCD_DrawRect>
    BSP_LCD_DisplayStringAt(350, 225, (uint8_t*)"Valider", LEFT_MODE);
 8001898:	2303      	movs	r3, #3
 800189a:	4a10      	ldr	r2, [pc, #64]	@ (80018dc <drawSettingsPage+0x290>)
 800189c:	21e1      	movs	r1, #225	@ 0xe1
 800189e:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80018a2:	f001 ff2f 	bl	8003704 <BSP_LCD_DisplayStringAt>
}
 80018a6:	bf00      	nop
 80018a8:	3720      	adds	r7, #32
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200050e8 	.word	0x200050e8
 80018b4:	2000512c 	.word	0x2000512c
 80018b8:	200050fc 	.word	0x200050fc
 80018bc:	20003d60 	.word	0x20003d60
 80018c0:	20004eb8 	.word	0x20004eb8
 80018c4:	0800a604 	.word	0x0800a604
 80018c8:	0800a60c 	.word	0x0800a60c
 80018cc:	0800a610 	.word	0x0800a610
 80018d0:	0800a618 	.word	0x0800a618
 80018d4:	0800a61c 	.word	0x0800a61c
 80018d8:	0800a624 	.word	0x0800a624
 80018dc:	0800a62c 	.word	0x0800a62c

080018e0 <drawGraphPage>:


void drawGraphPage(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08a      	sub	sp, #40	@ 0x28
 80018e4:	af00      	add	r7, sp, #0
    char dateStr[20];
    char timeStr[6];

    // Efface l'écran
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80018e6:	f04f 30ff 	mov.w	r0, #4294967295
 80018ea:	f001 fe9f 	bl	800362c <BSP_LCD_Clear>

    // Configuration de la police et des couleurs
    BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80018ee:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 80018f2:	f001 fe4f 	bl	8003594 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80018f6:	f04f 30ff 	mov.w	r0, #4294967295
 80018fa:	f001 fe63 	bl	80035c4 <BSP_LCD_SetBackColor>

    // ===== En-tête =====
    // Icône retour en haut à gauche
    BSP_LCD_DrawBitmap(10, 10, (uint8_t *)back_icon_bmp);
 80018fe:	4a25      	ldr	r2, [pc, #148]	@ (8001994 <drawGraphPage+0xb4>)
 8001900:	210a      	movs	r1, #10
 8001902:	200a      	movs	r0, #10
 8001904:	f002 f900 	bl	8003b08 <BSP_LCD_DrawBitmap>

    // Date en haut centrée
    BSP_LCD_SetFont(&Font16);
 8001908:	4823      	ldr	r0, [pc, #140]	@ (8001998 <drawGraphPage+0xb8>)
 800190a:	f001 fe75 	bl	80035f8 <BSP_LCD_SetFont>
    getRTCDateStr(dateStr);
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fb40 	bl	8000f98 <getRTCDateStr>
    BSP_LCD_DisplayStringAt(0, 15, (uint8_t*)dateStr, CENTER_MODE);
 8001918:	f107 020c 	add.w	r2, r7, #12
 800191c:	2301      	movs	r3, #1
 800191e:	210f      	movs	r1, #15
 8001920:	2000      	movs	r0, #0
 8001922:	f001 feef 	bl	8003704 <BSP_LCD_DisplayStringAt>

    // ===== Lignes verticales de séparation =====
    const uint16_t lineStartY = 60;
 8001926:	233c      	movs	r3, #60	@ 0x3c
 8001928:	84fb      	strh	r3, [r7, #38]	@ 0x26
    const uint16_t lineHeight = 180;
 800192a:	23b4      	movs	r3, #180	@ 0xb4
 800192c:	84bb      	strh	r3, [r7, #36]	@ 0x24

    // Première ligne verticale (1/3 de l'écran)
    BSP_LCD_DrawVLine(480/3, lineStartY, lineHeight);
 800192e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001930:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001932:	4619      	mov	r1, r3
 8001934:	20a0      	movs	r0, #160	@ 0xa0
 8001936:	f002 f80b 	bl	8003950 <BSP_LCD_DrawVLine>

    // Deuxième ligne verticale (2/3 de l'écran)
    BSP_LCD_DrawVLine(2*480/3, lineStartY, lineHeight);
 800193a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800193c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800193e:	4619      	mov	r1, r3
 8001940:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 8001944:	f002 f804 	bl	8003950 <BSP_LCD_DrawVLine>

    // ===== Icônes en haut de chaque colonne =====
    const uint16_t iconY = 60;
 8001948:	233c      	movs	r3, #60	@ 0x3c
 800194a:	847b      	strh	r3, [r7, #34]	@ 0x22

    // Colonne 1 (horloge)
    BSP_LCD_DrawBitmap(480/6 - 16, iconY, (uint8_t *)clock_icon_bmp);
 800194c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800194e:	4a13      	ldr	r2, [pc, #76]	@ (800199c <drawGraphPage+0xbc>)
 8001950:	4619      	mov	r1, r3
 8001952:	2040      	movs	r0, #64	@ 0x40
 8001954:	f002 f8d8 	bl	8003b08 <BSP_LCD_DrawBitmap>

    // Colonne 2 (thermomètre)
    BSP_LCD_DrawBitmap(480/2 - 16, iconY, (uint8_t *)temp_icon_bmp);
 8001958:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800195a:	4a11      	ldr	r2, [pc, #68]	@ (80019a0 <drawGraphPage+0xc0>)
 800195c:	4619      	mov	r1, r3
 800195e:	20e0      	movs	r0, #224	@ 0xe0
 8001960:	f002 f8d2 	bl	8003b08 <BSP_LCD_DrawBitmap>

    // Colonne 3 (gouttes)
    BSP_LCD_DrawBitmap(5*480/6 - 16, iconY, (uint8_t *)rain_icon_bmp);
 8001964:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001966:	4a0f      	ldr	r2, [pc, #60]	@ (80019a4 <drawGraphPage+0xc4>)
 8001968:	4619      	mov	r1, r3
 800196a:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 800196e:	f002 f8cb 	bl	8003b08 <BSP_LCD_DrawBitmap>

    // ===== Zone pour les graphiques =====
    // TODO: Ajouter les graphiques dans chaque colonne

    // ===== Heure en bas =====
    BSP_LCD_SetFont(&Font16);
 8001972:	4809      	ldr	r0, [pc, #36]	@ (8001998 <drawGraphPage+0xb8>)
 8001974:	f001 fe40 	bl	80035f8 <BSP_LCD_SetFont>
    getRTCTimeStr(timeStr);
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff fb34 	bl	8000fe8 <getRTCTimeStr>
    BSP_LCD_DisplayStringAt(0, 237, (uint8_t*)timeStr, CENTER_MODE);
 8001980:	1d3a      	adds	r2, r7, #4
 8001982:	2301      	movs	r3, #1
 8001984:	21ed      	movs	r1, #237	@ 0xed
 8001986:	2000      	movs	r0, #0
 8001988:	f001 febc 	bl	8003704 <BSP_LCD_DisplayStringAt>
}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	@ 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20003d60 	.word	0x20003d60
 8001998:	20004eb8 	.word	0x20004eb8
 800199c:	200045ec 	.word	0x200045ec
 80019a0:	20002c48 	.word	0x20002c48
 80019a4:	20001eb0 	.word	0x20001eb0

080019a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ae:	f002 ffcf 	bl	8004950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019b2:	f000 fceb 	bl	800238c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019b6:	f7fe ff1d 	bl	80007f4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80019ba:	f7fe fdf1 	bl	80005a0 <MX_DMA2D_Init>
  MX_FMC_Init();
 80019be:	f7fe fe41 	bl	8000644 <MX_FMC_Init>
  MX_LTDC_Init();
 80019c2:	f7ff f911 	bl	8000be8 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 80019c6:	f000 ff7f 	bl	80028c8 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 80019ca:	f7ff f84b 	bl	8000a64 <MX_I2C3_Init>
  MX_TIM3_Init();
 80019ce:	f000 ff05 	bl	80027dc <MX_TIM3_Init>
  MX_RTC_Init();
 80019d2:	f000 fdb9 	bl	8002548 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80019d6:	f001 fc97 	bl	8003308 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, SDRAM_DEVICE_ADDR);
 80019da:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80019de:	2001      	movs	r0, #1
 80019e0:	f001 fd2a 	bl	8003438 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SetLayerVisible(LTDC_ACTIVE_LAYER, ENABLE);
 80019e4:	2101      	movs	r1, #1
 80019e6:	2001      	movs	r0, #1
 80019e8:	f001 fd96 	bl	8003518 <BSP_LCD_SetLayerVisible>
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80019ec:	488f      	ldr	r0, [pc, #572]	@ (8001c2c <main+0x284>)
 80019ee:	f001 fe03 	bl	80035f8 <BSP_LCD_SetFont>
  BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 80019f2:	2001      	movs	r0, #1
 80019f4:	f001 fd80 	bl	80034f8 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f001 fe16 	bl	800362c <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f001 fdde 	bl	80035c4 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a08:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001a0c:	f001 fdc2 	bl	8003594 <BSP_LCD_SetTextColor>
  //TouchTimer_Init();

  //BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
  TouchTimer_Init();
 8001a10:	f000 fd2e 	bl	8002470 <TouchTimer_Init>
  //drawCreditsPage();
  //drawTempHumidRainPage();
  //drawWindDirPressurePage();
  //drawSettingsPage();

  int flag=0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

         //machine d' etat de l'inteface graphique
         if (needRedraw) {
 8001a18:	4b85      	ldr	r3, [pc, #532]	@ (8001c30 <main+0x288>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d055      	beq.n	8001acc <main+0x124>
             switch (flag) {
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b09      	cmp	r3, #9
 8001a24:	d852      	bhi.n	8001acc <main+0x124>
 8001a26:	a201      	add	r2, pc, #4	@ (adr r2, 8001a2c <main+0x84>)
 8001a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2c:	08001a55 	.word	0x08001a55
 8001a30:	08001a61 	.word	0x08001a61
 8001a34:	08001a6d 	.word	0x08001a6d
 8001a38:	08001a79 	.word	0x08001a79
 8001a3c:	08001a85 	.word	0x08001a85
 8001a40:	08001a91 	.word	0x08001a91
 8001a44:	08001a9d 	.word	0x08001a9d
 8001a48:	08001aa9 	.word	0x08001aa9
 8001a4c:	08001ab5 	.word	0x08001ab5
 8001a50:	08001ac1 	.word	0x08001ac1
                 case 0:
                     drawMenuPage();
 8001a54:	f7ff faec 	bl	8001030 <drawMenuPage>
                     needRedraw = 0; // Reset the redraw flag
 8001a58:	4b75      	ldr	r3, [pc, #468]	@ (8001c30 <main+0x288>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
                     break;
 8001a5e:	e035      	b.n	8001acc <main+0x124>

                 case 1:
                     drawTempHumidRainPage();
 8001a60:	f7ff fbf8 	bl	8001254 <drawTempHumidRainPage>
                     needRedraw = 0; // Reset the redraw flag
 8001a64:	4b72      	ldr	r3, [pc, #456]	@ (8001c30 <main+0x288>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
                     break;
 8001a6a:	e02f      	b.n	8001acc <main+0x124>

                 case 2:
                      drawWindDirPressurePage();
 8001a6c:	f7ff fcf0 	bl	8001450 <drawWindDirPressurePage>
                      needRedraw = 0; // Reset the redraw flag
 8001a70:	4b6f      	ldr	r3, [pc, #444]	@ (8001c30 <main+0x288>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
                      break;
 8001a76:	e029      	b.n	8001acc <main+0x124>

                 case 3:
                      drawSettingsPage();
 8001a78:	f7ff fde8 	bl	800164c <drawSettingsPage>
                      needRedraw = 0; // Reset the redraw flag
 8001a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001c30 <main+0x288>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
                      break;
 8001a82:	e023      	b.n	8001acc <main+0x124>

                  case 4:
                      drawCreditsPage();
 8001a84:	f7ff fb86 	bl	8001194 <drawCreditsPage>
                      needRedraw = 0; // Reset the redraw flag
 8001a88:	4b69      	ldr	r3, [pc, #420]	@ (8001c30 <main+0x288>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
                      break;
 8001a8e:	e01d      	b.n	8001acc <main+0x124>

                  case 5:
                      drawGraphPage();
 8001a90:	f7ff ff26 	bl	80018e0 <drawGraphPage>
                      needRedraw = 0; // Reset the redraw flag
 8001a94:	4b66      	ldr	r3, [pc, #408]	@ (8001c30 <main+0x288>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
                      break;
 8001a9a:	e017      	b.n	8001acc <main+0x124>

                  case 6:
                      drawGraphPage();
 8001a9c:	f7ff ff20 	bl	80018e0 <drawGraphPage>
                      needRedraw = 0; // Reset the redraw flag
 8001aa0:	4b63      	ldr	r3, [pc, #396]	@ (8001c30 <main+0x288>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
                      break;
 8001aa6:	e011      	b.n	8001acc <main+0x124>

                  case 7:
                      drawGraphPage();
 8001aa8:	f7ff ff1a 	bl	80018e0 <drawGraphPage>
                      needRedraw = 0; // Reset the redraw flag
 8001aac:	4b60      	ldr	r3, [pc, #384]	@ (8001c30 <main+0x288>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
                      break;
 8001ab2:	e00b      	b.n	8001acc <main+0x124>

                  case 8:
                      drawGraphPage();
 8001ab4:	f7ff ff14 	bl	80018e0 <drawGraphPage>
                      needRedraw = 0; // Reset the redraw flag
 8001ab8:	4b5d      	ldr	r3, [pc, #372]	@ (8001c30 <main+0x288>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
                      break;
 8001abe:	e005      	b.n	8001acc <main+0x124>

                  case 9:
                      drawGraphPage();
 8001ac0:	f7ff ff0e 	bl	80018e0 <drawGraphPage>
                      needRedraw = 0; // Reset the redraw flag
 8001ac4:	4b5a      	ldr	r3, [pc, #360]	@ (8001c30 <main+0x288>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
                      break;
 8001aca:	bf00      	nop
                }
         }

         if (TS_State.touchDetected && !debounce) {
 8001acc:	4b59      	ldr	r3, [pc, #356]	@ (8001c34 <main+0x28c>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 843c 	beq.w	8002350 <main+0x9a8>
 8001ad8:	4b57      	ldr	r3, [pc, #348]	@ (8001c38 <main+0x290>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 8437 	bne.w	8002350 <main+0x9a8>
        	 debounce=1;
 8001ae2:	4b55      	ldr	r3, [pc, #340]	@ (8001c38 <main+0x290>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
			   //hum Temp Rain button
			  if (flag == 0 && x > 40 && x < 220 && y > 60 && y < 220) {
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d11a      	bne.n	8001b24 <main+0x17c>
 8001aee:	4b53      	ldr	r3, [pc, #332]	@ (8001c3c <main+0x294>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2b28      	cmp	r3, #40	@ 0x28
 8001af6:	d915      	bls.n	8001b24 <main+0x17c>
 8001af8:	4b50      	ldr	r3, [pc, #320]	@ (8001c3c <main+0x294>)
 8001afa:	881b      	ldrh	r3, [r3, #0]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	2bdb      	cmp	r3, #219	@ 0xdb
 8001b00:	d810      	bhi.n	8001b24 <main+0x17c>
 8001b02:	4b4f      	ldr	r3, [pc, #316]	@ (8001c40 <main+0x298>)
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b3c      	cmp	r3, #60	@ 0x3c
 8001b0a:	d90b      	bls.n	8001b24 <main+0x17c>
 8001b0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001c40 <main+0x298>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	2bdb      	cmp	r3, #219	@ 0xdb
 8001b14:	d806      	bhi.n	8001b24 <main+0x17c>
				  flag = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8001b1a:	4b45      	ldr	r3, [pc, #276]	@ (8001c30 <main+0x288>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	f000 bc15 	b.w	800234e <main+0x9a6>

			  //return menu button
			  } else if ((flag == 1 || flag == 2 || flag == 3 || flag == 4) && x > 10 && x < 40 && y > 10 && y < 40) {
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d008      	beq.n	8001b3c <main+0x194>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d005      	beq.n	8001b3c <main+0x194>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d002      	beq.n	8001b3c <main+0x194>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d119      	bne.n	8001b70 <main+0x1c8>
 8001b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c3c <main+0x294>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	2b0a      	cmp	r3, #10
 8001b44:	d914      	bls.n	8001b70 <main+0x1c8>
 8001b46:	4b3d      	ldr	r3, [pc, #244]	@ (8001c3c <main+0x294>)
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	2b27      	cmp	r3, #39	@ 0x27
 8001b4e:	d80f      	bhi.n	8001b70 <main+0x1c8>
 8001b50:	4b3b      	ldr	r3, [pc, #236]	@ (8001c40 <main+0x298>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	2b0a      	cmp	r3, #10
 8001b58:	d90a      	bls.n	8001b70 <main+0x1c8>
 8001b5a:	4b39      	ldr	r3, [pc, #228]	@ (8001c40 <main+0x298>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b27      	cmp	r3, #39	@ 0x27
 8001b62:	d805      	bhi.n	8001b70 <main+0x1c8>
				  flag = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8001b68:	4b31      	ldr	r3, [pc, #196]	@ (8001c30 <main+0x288>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e3ee      	b.n	800234e <main+0x9a6>

			   //wind dir pressure button
			  } else if (flag == 0 && x > 260 && x < 440 && y > 60 && y < 220) {
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11b      	bne.n	8001bae <main+0x206>
 8001b76:	4b31      	ldr	r3, [pc, #196]	@ (8001c3c <main+0x294>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b80:	d915      	bls.n	8001bae <main+0x206>
 8001b82:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <main+0x294>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8001b8c:	d20f      	bcs.n	8001bae <main+0x206>
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c40 <main+0x298>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b3c      	cmp	r3, #60	@ 0x3c
 8001b96:	d90a      	bls.n	8001bae <main+0x206>
 8001b98:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <main+0x298>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2bdb      	cmp	r3, #219	@ 0xdb
 8001ba0:	d805      	bhi.n	8001bae <main+0x206>
				  flag = 2;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8001ba6:	4b22      	ldr	r3, [pc, #136]	@ (8001c30 <main+0x288>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e3cf      	b.n	800234e <main+0x9a6>

			   //setting button
			  } else if (flag == 0 && x > 438 && x < 480 && y > 235 && y < 272) {
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d11c      	bne.n	8001bee <main+0x246>
 8001bb4:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <main+0x294>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	f5b3 7fdb 	cmp.w	r3, #438	@ 0x1b6
 8001bbe:	d916      	bls.n	8001bee <main+0x246>
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <main+0x294>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8001bca:	d210      	bcs.n	8001bee <main+0x246>
 8001bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8001c40 <main+0x298>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2beb      	cmp	r3, #235	@ 0xeb
 8001bd4:	d90b      	bls.n	8001bee <main+0x246>
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c40 <main+0x298>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001be0:	d205      	bcs.n	8001bee <main+0x246>
				  flag = 3;
 8001be2:	2303      	movs	r3, #3
 8001be4:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8001be6:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <main+0x288>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	e3af      	b.n	800234e <main+0x9a6>

			  //credits button
			  } else if (flag == 0 && x > 18 && x < 58 && y > 235 && y < 272) {
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d127      	bne.n	8001c44 <main+0x29c>
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <main+0x294>)
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b12      	cmp	r3, #18
 8001bfc:	d922      	bls.n	8001c44 <main+0x29c>
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <main+0x294>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2b39      	cmp	r3, #57	@ 0x39
 8001c06:	d81d      	bhi.n	8001c44 <main+0x29c>
 8001c08:	4b0d      	ldr	r3, [pc, #52]	@ (8001c40 <main+0x298>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2beb      	cmp	r3, #235	@ 0xeb
 8001c10:	d918      	bls.n	8001c44 <main+0x29c>
 8001c12:	4b0b      	ldr	r3, [pc, #44]	@ (8001c40 <main+0x298>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8001c1c:	d212      	bcs.n	8001c44 <main+0x29c>
				  flag = 4;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8001c22:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <main+0x288>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e391      	b.n	800234e <main+0x9a6>
 8001c2a:	bf00      	nop
 8001c2c:	20004ea8 	.word	0x20004ea8
 8001c30:	20004e78 	.word	0x20004e78
 8001c34:	200050b4 	.word	0x200050b4
 8001c38:	200050e4 	.word	0x200050e4
 8001c3c:	200050e0 	.word	0x200050e0
 8001c40:	200050e2 	.word	0x200050e2

			  //Temperature graph
			  } else if (flag == 1 && x > 40 && x < 160 && y > 80 && y < 200) {
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d119      	bne.n	8001c7e <main+0x2d6>
 8001c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e48 <main+0x4a0>)
 8001c4c:	881b      	ldrh	r3, [r3, #0]
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	2b28      	cmp	r3, #40	@ 0x28
 8001c52:	d914      	bls.n	8001c7e <main+0x2d6>
 8001c54:	4b7c      	ldr	r3, [pc, #496]	@ (8001e48 <main+0x4a0>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	2b9f      	cmp	r3, #159	@ 0x9f
 8001c5c:	d80f      	bhi.n	8001c7e <main+0x2d6>
 8001c5e:	4b7b      	ldr	r3, [pc, #492]	@ (8001e4c <main+0x4a4>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2b50      	cmp	r3, #80	@ 0x50
 8001c66:	d90a      	bls.n	8001c7e <main+0x2d6>
 8001c68:	4b78      	ldr	r3, [pc, #480]	@ (8001e4c <main+0x4a4>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8001c70:	d805      	bhi.n	8001c7e <main+0x2d6>
				  flag = 5;
 8001c72:	2305      	movs	r3, #5
 8001c74:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8001c76:	4b76      	ldr	r3, [pc, #472]	@ (8001e50 <main+0x4a8>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e367      	b.n	800234e <main+0x9a6>

			  //humidity graph
         	  } else if (flag == 1 && x > 180 && x < 300 && y > 80 && y < 200){
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d11a      	bne.n	8001cba <main+0x312>
 8001c84:	4b70      	ldr	r3, [pc, #448]	@ (8001e48 <main+0x4a0>)
 8001c86:	881b      	ldrh	r3, [r3, #0]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	2bb4      	cmp	r3, #180	@ 0xb4
 8001c8c:	d915      	bls.n	8001cba <main+0x312>
 8001c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8001e48 <main+0x4a0>)
 8001c90:	881b      	ldrh	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001c98:	d20f      	bcs.n	8001cba <main+0x312>
 8001c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8001e4c <main+0x4a4>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	2b50      	cmp	r3, #80	@ 0x50
 8001ca2:	d90a      	bls.n	8001cba <main+0x312>
 8001ca4:	4b69      	ldr	r3, [pc, #420]	@ (8001e4c <main+0x4a4>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2bc7      	cmp	r3, #199	@ 0xc7
 8001cac:	d805      	bhi.n	8001cba <main+0x312>
         		 flag = 6;
 8001cae:	2306      	movs	r3, #6
 8001cb0:	60fb      	str	r3, [r7, #12]
         		 needRedraw = 1; // Set the redraw flag
 8001cb2:	4b67      	ldr	r3, [pc, #412]	@ (8001e50 <main+0x4a8>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e349      	b.n	800234e <main+0x9a6>

         	  //Rain graph
         	  } else if (flag == 2 && x > 320 && x < 440 && y > 80 && y < 200){
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d11b      	bne.n	8001cf8 <main+0x350>
 8001cc0:	4b61      	ldr	r3, [pc, #388]	@ (8001e48 <main+0x4a0>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001cca:	d915      	bls.n	8001cf8 <main+0x350>
 8001ccc:	4b5e      	ldr	r3, [pc, #376]	@ (8001e48 <main+0x4a0>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8001cd6:	d20f      	bcs.n	8001cf8 <main+0x350>
 8001cd8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e4c <main+0x4a4>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b50      	cmp	r3, #80	@ 0x50
 8001ce0:	d90a      	bls.n	8001cf8 <main+0x350>
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	@ (8001e4c <main+0x4a4>)
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2bc7      	cmp	r3, #199	@ 0xc7
 8001cea:	d805      	bhi.n	8001cf8 <main+0x350>
          		 flag = 7;
 8001cec:	2307      	movs	r3, #7
 8001cee:	60fb      	str	r3, [r7, #12]
          		 needRedraw = 1; // Set the redraw flag
 8001cf0:	4b57      	ldr	r3, [pc, #348]	@ (8001e50 <main+0x4a8>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e32a      	b.n	800234e <main+0x9a6>

          	  //Pressure graph
         	  } else if (flag == 2 && x > 320 && x < 440 && y > 80 && y < 200){
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d11b      	bne.n	8001d36 <main+0x38e>
 8001cfe:	4b52      	ldr	r3, [pc, #328]	@ (8001e48 <main+0x4a0>)
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001d08:	d915      	bls.n	8001d36 <main+0x38e>
 8001d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8001e48 <main+0x4a0>)
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 8001d14:	d20f      	bcs.n	8001d36 <main+0x38e>
 8001d16:	4b4d      	ldr	r3, [pc, #308]	@ (8001e4c <main+0x4a4>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b50      	cmp	r3, #80	@ 0x50
 8001d1e:	d90a      	bls.n	8001d36 <main+0x38e>
 8001d20:	4b4a      	ldr	r3, [pc, #296]	@ (8001e4c <main+0x4a4>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2bc7      	cmp	r3, #199	@ 0xc7
 8001d28:	d805      	bhi.n	8001d36 <main+0x38e>
				 flag = 8;
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	60fb      	str	r3, [r7, #12]
				 needRedraw = 1; // Set the redraw flag
 8001d2e:	4b48      	ldr	r3, [pc, #288]	@ (8001e50 <main+0x4a8>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	e30b      	b.n	800234e <main+0x9a6>

			  //Wind Graph
			  }else if (flag == 2 && x > 40 && x < 160 && y > 80 && y < 200){
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d119      	bne.n	8001d70 <main+0x3c8>
 8001d3c:	4b42      	ldr	r3, [pc, #264]	@ (8001e48 <main+0x4a0>)
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2b28      	cmp	r3, #40	@ 0x28
 8001d44:	d914      	bls.n	8001d70 <main+0x3c8>
 8001d46:	4b40      	ldr	r3, [pc, #256]	@ (8001e48 <main+0x4a0>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	2b9f      	cmp	r3, #159	@ 0x9f
 8001d4e:	d80f      	bhi.n	8001d70 <main+0x3c8>
 8001d50:	4b3e      	ldr	r3, [pc, #248]	@ (8001e4c <main+0x4a4>)
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b50      	cmp	r3, #80	@ 0x50
 8001d58:	d90a      	bls.n	8001d70 <main+0x3c8>
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e4c <main+0x4a4>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	2bc7      	cmp	r3, #199	@ 0xc7
 8001d62:	d805      	bhi.n	8001d70 <main+0x3c8>
				 flag = 9;
 8001d64:	2309      	movs	r3, #9
 8001d66:	60fb      	str	r3, [r7, #12]
				 needRedraw = 1; // Set the redraw flag
 8001d68:	4b39      	ldr	r3, [pc, #228]	@ (8001e50 <main+0x4a8>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	e2ee      	b.n	800234e <main+0x9a6>

			  //return data page 1 button
			  } else if ((flag == 5 || flag == 6 || flag == 7) && x > 10 && x < 40 && y > 10 && y < 40) {
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	d005      	beq.n	8001d82 <main+0x3da>
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2b06      	cmp	r3, #6
 8001d7a:	d002      	beq.n	8001d82 <main+0x3da>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b07      	cmp	r3, #7
 8001d80:	d119      	bne.n	8001db6 <main+0x40e>
 8001d82:	4b31      	ldr	r3, [pc, #196]	@ (8001e48 <main+0x4a0>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b0a      	cmp	r3, #10
 8001d8a:	d914      	bls.n	8001db6 <main+0x40e>
 8001d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e48 <main+0x4a0>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	2b27      	cmp	r3, #39	@ 0x27
 8001d94:	d80f      	bhi.n	8001db6 <main+0x40e>
 8001d96:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <main+0x4a4>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b0a      	cmp	r3, #10
 8001d9e:	d90a      	bls.n	8001db6 <main+0x40e>
 8001da0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <main+0x4a4>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b27      	cmp	r3, #39	@ 0x27
 8001da8:	d805      	bhi.n	8001db6 <main+0x40e>
				  flag = 1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8001dae:	4b28      	ldr	r3, [pc, #160]	@ (8001e50 <main+0x4a8>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e2cb      	b.n	800234e <main+0x9a6>

			  //return data page 2 button
			  } else if ((flag == 8 || flag == 9) && x > 10 && x < 40 && y > 10 && y < 40) {
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2b08      	cmp	r3, #8
 8001dba:	d002      	beq.n	8001dc2 <main+0x41a>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2b09      	cmp	r3, #9
 8001dc0:	d119      	bne.n	8001df6 <main+0x44e>
 8001dc2:	4b21      	ldr	r3, [pc, #132]	@ (8001e48 <main+0x4a0>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	2b0a      	cmp	r3, #10
 8001dca:	d914      	bls.n	8001df6 <main+0x44e>
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <main+0x4a0>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	2b27      	cmp	r3, #39	@ 0x27
 8001dd4:	d80f      	bhi.n	8001df6 <main+0x44e>
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <main+0x4a4>)
 8001dd8:	881b      	ldrh	r3, [r3, #0]
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b0a      	cmp	r3, #10
 8001dde:	d90a      	bls.n	8001df6 <main+0x44e>
 8001de0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <main+0x4a4>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b27      	cmp	r3, #39	@ 0x27
 8001de8:	d805      	bhi.n	8001df6 <main+0x44e>
				  flag = 2;
 8001dea:	2302      	movs	r3, #2
 8001dec:	60fb      	str	r3, [r7, #12]
				  needRedraw = 1; // Set the redraw flag
 8001dee:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <main+0x4a8>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e2ab      	b.n	800234e <main+0x9a6>
				  //Dans la partie où vous gérez les touches
			  } else if (flag == 3) {
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	f040 82b4 	bne.w	8002366 <main+0x9be>
				      const uint16_t col1 = 150;
 8001dfe:	2396      	movs	r3, #150	@ 0x96
 8001e00:	817b      	strh	r3, [r7, #10]
				      const uint16_t col2 = col1 + 90;
 8001e02:	897b      	ldrh	r3, [r7, #10]
 8001e04:	335a      	adds	r3, #90	@ 0x5a
 8001e06:	813b      	strh	r3, [r7, #8]
				      const uint16_t col3 = col2 + 90;
 8001e08:	893b      	ldrh	r3, [r7, #8]
 8001e0a:	335a      	adds	r3, #90	@ 0x5a
 8001e0c:	80fb      	strh	r3, [r7, #6]
				      const uint16_t buttonSize = 30;
 8001e0e:	231e      	movs	r3, #30
 8001e10:	80bb      	strh	r3, [r7, #4]

				      // Bouton retour
				      if (x > 10 && x < 40 && y > 10 && y < 40) {
 8001e12:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <main+0x4a0>)
 8001e14:	881b      	ldrh	r3, [r3, #0]
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	2b0a      	cmp	r3, #10
 8001e1a:	d91b      	bls.n	8001e54 <main+0x4ac>
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <main+0x4a0>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2b27      	cmp	r3, #39	@ 0x27
 8001e24:	d816      	bhi.n	8001e54 <main+0x4ac>
 8001e26:	4b09      	ldr	r3, [pc, #36]	@ (8001e4c <main+0x4a4>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	2b0a      	cmp	r3, #10
 8001e2e:	d911      	bls.n	8001e54 <main+0x4ac>
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <main+0x4a4>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b27      	cmp	r3, #39	@ 0x27
 8001e38:	d80c      	bhi.n	8001e54 <main+0x4ac>
				          flag = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
				          needRedraw = 1;
 8001e3e:	4b04      	ldr	r3, [pc, #16]	@ (8001e50 <main+0x4a8>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	e271      	b.n	800232a <main+0x982>
 8001e46:	bf00      	nop
 8001e48:	200050e0 	.word	0x200050e0
 8001e4c:	200050e2 	.word	0x200050e2
 8001e50:	20004e78 	.word	0x20004e78
				      }
				      // === Boutons Date ===
				      // Jour +
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 50 && y <= 80) {
 8001e54:	4b86      	ldr	r3, [pc, #536]	@ (8002070 <main+0x6c8>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	897a      	ldrh	r2, [r7, #10]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d832      	bhi.n	8001ec6 <main+0x51e>
 8001e60:	4b83      	ldr	r3, [pc, #524]	@ (8002070 <main+0x6c8>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	4619      	mov	r1, r3
 8001e68:	897a      	ldrh	r2, [r7, #10]
 8001e6a:	88bb      	ldrh	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4299      	cmp	r1, r3
 8001e70:	dc29      	bgt.n	8001ec6 <main+0x51e>
 8001e72:	4b80      	ldr	r3, [pc, #512]	@ (8002074 <main+0x6cc>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	2b31      	cmp	r3, #49	@ 0x31
 8001e7a:	d924      	bls.n	8001ec6 <main+0x51e>
 8001e7c:	4b7d      	ldr	r3, [pc, #500]	@ (8002074 <main+0x6cc>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b50      	cmp	r3, #80	@ 0x50
 8001e84:	d81f      	bhi.n	8001ec6 <main+0x51e>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001e86:	2200      	movs	r2, #0
 8001e88:	497b      	ldr	r1, [pc, #492]	@ (8002078 <main+0x6d0>)
 8001e8a:	487c      	ldr	r0, [pc, #496]	@ (800207c <main+0x6d4>)
 8001e8c:	f006 f8d8 	bl	8008040 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001e90:	2200      	movs	r2, #0
 8001e92:	497b      	ldr	r1, [pc, #492]	@ (8002080 <main+0x6d8>)
 8001e94:	4879      	ldr	r0, [pc, #484]	@ (800207c <main+0x6d4>)
 8001e96:	f006 f9b5 	bl	8008204 <HAL_RTC_GetDate>
				          sDate.Date = (sDate.Date % 31) + 1;
 8001e9a:	4b79      	ldr	r3, [pc, #484]	@ (8002080 <main+0x6d8>)
 8001e9c:	789a      	ldrb	r2, [r3, #2]
 8001e9e:	4b79      	ldr	r3, [pc, #484]	@ (8002084 <main+0x6dc>)
 8001ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ea4:	1ad1      	subs	r1, r2, r3
 8001ea6:	0849      	lsrs	r1, r1, #1
 8001ea8:	440b      	add	r3, r1
 8001eaa:	0919      	lsrs	r1, r3, #4
 8001eac:	460b      	mov	r3, r1
 8001eae:	015b      	lsls	r3, r3, #5
 8001eb0:	1a5b      	subs	r3, r3, r1
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b71      	ldr	r3, [pc, #452]	@ (8002080 <main+0x6d8>)
 8001ebc:	709a      	strb	r2, [r3, #2]
				          needRedraw = 1;
 8001ebe:	4b72      	ldr	r3, [pc, #456]	@ (8002088 <main+0x6e0>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e231      	b.n	800232a <main+0x982>
				      }
				      // Jour -
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 120 && y <= 150) {
 8001ec6:	4b6a      	ldr	r3, [pc, #424]	@ (8002070 <main+0x6c8>)
 8001ec8:	881b      	ldrh	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	897a      	ldrh	r2, [r7, #10]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d82c      	bhi.n	8001f2c <main+0x584>
 8001ed2:	4b67      	ldr	r3, [pc, #412]	@ (8002070 <main+0x6c8>)
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4619      	mov	r1, r3
 8001eda:	897a      	ldrh	r2, [r7, #10]
 8001edc:	88bb      	ldrh	r3, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	4299      	cmp	r1, r3
 8001ee2:	dc23      	bgt.n	8001f2c <main+0x584>
 8001ee4:	4b63      	ldr	r3, [pc, #396]	@ (8002074 <main+0x6cc>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2b77      	cmp	r3, #119	@ 0x77
 8001eec:	d91e      	bls.n	8001f2c <main+0x584>
 8001eee:	4b61      	ldr	r3, [pc, #388]	@ (8002074 <main+0x6cc>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b96      	cmp	r3, #150	@ 0x96
 8001ef6:	d819      	bhi.n	8001f2c <main+0x584>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001ef8:	2200      	movs	r2, #0
 8001efa:	495f      	ldr	r1, [pc, #380]	@ (8002078 <main+0x6d0>)
 8001efc:	485f      	ldr	r0, [pc, #380]	@ (800207c <main+0x6d4>)
 8001efe:	f006 f89f 	bl	8008040 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001f02:	2200      	movs	r2, #0
 8001f04:	495e      	ldr	r1, [pc, #376]	@ (8002080 <main+0x6d8>)
 8001f06:	485d      	ldr	r0, [pc, #372]	@ (800207c <main+0x6d4>)
 8001f08:	f006 f97c 	bl	8008204 <HAL_RTC_GetDate>
				          sDate.Date = (sDate.Date > 1) ? sDate.Date - 1 : 31;
 8001f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8002080 <main+0x6d8>)
 8001f0e:	789b      	ldrb	r3, [r3, #2]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d904      	bls.n	8001f1e <main+0x576>
 8001f14:	4b5a      	ldr	r3, [pc, #360]	@ (8002080 <main+0x6d8>)
 8001f16:	789b      	ldrb	r3, [r3, #2]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	e000      	b.n	8001f20 <main+0x578>
 8001f1e:	231f      	movs	r3, #31
 8001f20:	4a57      	ldr	r2, [pc, #348]	@ (8002080 <main+0x6d8>)
 8001f22:	7093      	strb	r3, [r2, #2]
				          needRedraw = 1;
 8001f24:	4b58      	ldr	r3, [pc, #352]	@ (8002088 <main+0x6e0>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	e1fe      	b.n	800232a <main+0x982>
				      }
				      // Mois +
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 50 && y <= 80) {
 8001f2c:	4b50      	ldr	r3, [pc, #320]	@ (8002070 <main+0x6c8>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	893a      	ldrh	r2, [r7, #8]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d830      	bhi.n	8001f9a <main+0x5f2>
 8001f38:	4b4d      	ldr	r3, [pc, #308]	@ (8002070 <main+0x6c8>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	4619      	mov	r1, r3
 8001f40:	893a      	ldrh	r2, [r7, #8]
 8001f42:	88bb      	ldrh	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	4299      	cmp	r1, r3
 8001f48:	dc27      	bgt.n	8001f9a <main+0x5f2>
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002074 <main+0x6cc>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b31      	cmp	r3, #49	@ 0x31
 8001f52:	d922      	bls.n	8001f9a <main+0x5f2>
 8001f54:	4b47      	ldr	r3, [pc, #284]	@ (8002074 <main+0x6cc>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b50      	cmp	r3, #80	@ 0x50
 8001f5c:	d81d      	bhi.n	8001f9a <main+0x5f2>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	4945      	ldr	r1, [pc, #276]	@ (8002078 <main+0x6d0>)
 8001f62:	4846      	ldr	r0, [pc, #280]	@ (800207c <main+0x6d4>)
 8001f64:	f006 f86c 	bl	8008040 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4945      	ldr	r1, [pc, #276]	@ (8002080 <main+0x6d8>)
 8001f6c:	4843      	ldr	r0, [pc, #268]	@ (800207c <main+0x6d4>)
 8001f6e:	f006 f949 	bl	8008204 <HAL_RTC_GetDate>
				          sDate.Month = (sDate.Month % 12) + 1;
 8001f72:	4b43      	ldr	r3, [pc, #268]	@ (8002080 <main+0x6d8>)
 8001f74:	785a      	ldrb	r2, [r3, #1]
 8001f76:	4b45      	ldr	r3, [pc, #276]	@ (800208c <main+0x6e4>)
 8001f78:	fba3 1302 	umull	r1, r3, r3, r2
 8001f7c:	08d9      	lsrs	r1, r3, #3
 8001f7e:	460b      	mov	r3, r1
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	440b      	add	r3, r1
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002080 <main+0x6d8>)
 8001f90:	705a      	strb	r2, [r3, #1]
				          needRedraw = 1;
 8001f92:	4b3d      	ldr	r3, [pc, #244]	@ (8002088 <main+0x6e0>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	e1c7      	b.n	800232a <main+0x982>
				      }
				      // Mois -
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 120 && y <= 150) {
 8001f9a:	4b35      	ldr	r3, [pc, #212]	@ (8002070 <main+0x6c8>)
 8001f9c:	881b      	ldrh	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	893a      	ldrh	r2, [r7, #8]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d82c      	bhi.n	8002000 <main+0x658>
 8001fa6:	4b32      	ldr	r3, [pc, #200]	@ (8002070 <main+0x6c8>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	4619      	mov	r1, r3
 8001fae:	893a      	ldrh	r2, [r7, #8]
 8001fb0:	88bb      	ldrh	r3, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4299      	cmp	r1, r3
 8001fb6:	dc23      	bgt.n	8002000 <main+0x658>
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002074 <main+0x6cc>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b77      	cmp	r3, #119	@ 0x77
 8001fc0:	d91e      	bls.n	8002000 <main+0x658>
 8001fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002074 <main+0x6cc>)
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b96      	cmp	r3, #150	@ 0x96
 8001fca:	d819      	bhi.n	8002000 <main+0x658>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001fcc:	2200      	movs	r2, #0
 8001fce:	492a      	ldr	r1, [pc, #168]	@ (8002078 <main+0x6d0>)
 8001fd0:	482a      	ldr	r0, [pc, #168]	@ (800207c <main+0x6d4>)
 8001fd2:	f006 f835 	bl	8008040 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	4929      	ldr	r1, [pc, #164]	@ (8002080 <main+0x6d8>)
 8001fda:	4828      	ldr	r0, [pc, #160]	@ (800207c <main+0x6d4>)
 8001fdc:	f006 f912 	bl	8008204 <HAL_RTC_GetDate>
				          sDate.Month = (sDate.Month > 1) ? sDate.Month - 1 : 12;
 8001fe0:	4b27      	ldr	r3, [pc, #156]	@ (8002080 <main+0x6d8>)
 8001fe2:	785b      	ldrb	r3, [r3, #1]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d904      	bls.n	8001ff2 <main+0x64a>
 8001fe8:	4b25      	ldr	r3, [pc, #148]	@ (8002080 <main+0x6d8>)
 8001fea:	785b      	ldrb	r3, [r3, #1]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	e000      	b.n	8001ff4 <main+0x64c>
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	4a22      	ldr	r2, [pc, #136]	@ (8002080 <main+0x6d8>)
 8001ff6:	7053      	strb	r3, [r2, #1]
				          needRedraw = 1;
 8001ff8:	4b23      	ldr	r3, [pc, #140]	@ (8002088 <main+0x6e0>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e194      	b.n	800232a <main+0x982>
				      }
				      // === Boutons Heure ===
				      // Heures +
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 160 && y <= 190) {
 8002000:	4b1b      	ldr	r3, [pc, #108]	@ (8002070 <main+0x6c8>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	897a      	ldrh	r2, [r7, #10]
 8002008:	429a      	cmp	r2, r3
 800200a:	d843      	bhi.n	8002094 <main+0x6ec>
 800200c:	4b18      	ldr	r3, [pc, #96]	@ (8002070 <main+0x6c8>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	b29b      	uxth	r3, r3
 8002012:	4619      	mov	r1, r3
 8002014:	897a      	ldrh	r2, [r7, #10]
 8002016:	88bb      	ldrh	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	4299      	cmp	r1, r3
 800201c:	dc3a      	bgt.n	8002094 <main+0x6ec>
 800201e:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <main+0x6cc>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	2b9f      	cmp	r3, #159	@ 0x9f
 8002026:	d935      	bls.n	8002094 <main+0x6ec>
 8002028:	4b12      	ldr	r3, [pc, #72]	@ (8002074 <main+0x6cc>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	2bbe      	cmp	r3, #190	@ 0xbe
 8002030:	d830      	bhi.n	8002094 <main+0x6ec>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002032:	2200      	movs	r2, #0
 8002034:	4910      	ldr	r1, [pc, #64]	@ (8002078 <main+0x6d0>)
 8002036:	4811      	ldr	r0, [pc, #68]	@ (800207c <main+0x6d4>)
 8002038:	f006 f802 	bl	8008040 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800203c:	2200      	movs	r2, #0
 800203e:	4910      	ldr	r1, [pc, #64]	@ (8002080 <main+0x6d8>)
 8002040:	480e      	ldr	r0, [pc, #56]	@ (800207c <main+0x6d4>)
 8002042:	f006 f8df 	bl	8008204 <HAL_RTC_GetDate>
				          sTime.Hours = (sTime.Hours + 1) % 24;
 8002046:	4b0c      	ldr	r3, [pc, #48]	@ (8002078 <main+0x6d0>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <main+0x6e8>)
 800204e:	fb83 1302 	smull	r1, r3, r3, r2
 8002052:	1099      	asrs	r1, r3, #2
 8002054:	17d3      	asrs	r3, r2, #31
 8002056:	1ac9      	subs	r1, r1, r3
 8002058:	460b      	mov	r3, r1
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	440b      	add	r3, r1
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	1ad1      	subs	r1, r2, r3
 8002062:	b2ca      	uxtb	r2, r1
 8002064:	4b04      	ldr	r3, [pc, #16]	@ (8002078 <main+0x6d0>)
 8002066:	701a      	strb	r2, [r3, #0]
				          needRedraw = 1;
 8002068:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <main+0x6e0>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e15c      	b.n	800232a <main+0x982>
 8002070:	200050e0 	.word	0x200050e0
 8002074:	200050e2 	.word	0x200050e2
 8002078:	200050e8 	.word	0x200050e8
 800207c:	2000512c 	.word	0x2000512c
 8002080:	200050fc 	.word	0x200050fc
 8002084:	08421085 	.word	0x08421085
 8002088:	20004e78 	.word	0x20004e78
 800208c:	aaaaaaab 	.word	0xaaaaaaab
 8002090:	2aaaaaab 	.word	0x2aaaaaab
				      }
				      // Heures -
				      else if (x >= col1 && x <= col1 + buttonSize && y >= 230 && y <= 260) {
 8002094:	4b86      	ldr	r3, [pc, #536]	@ (80022b0 <main+0x908>)
 8002096:	881b      	ldrh	r3, [r3, #0]
 8002098:	b29b      	uxth	r3, r3
 800209a:	897a      	ldrh	r2, [r7, #10]
 800209c:	429a      	cmp	r2, r3
 800209e:	d82d      	bhi.n	80020fc <main+0x754>
 80020a0:	4b83      	ldr	r3, [pc, #524]	@ (80022b0 <main+0x908>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	897a      	ldrh	r2, [r7, #10]
 80020aa:	88bb      	ldrh	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	4299      	cmp	r1, r3
 80020b0:	dc24      	bgt.n	80020fc <main+0x754>
 80020b2:	4b80      	ldr	r3, [pc, #512]	@ (80022b4 <main+0x90c>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2be5      	cmp	r3, #229	@ 0xe5
 80020ba:	d91f      	bls.n	80020fc <main+0x754>
 80020bc:	4b7d      	ldr	r3, [pc, #500]	@ (80022b4 <main+0x90c>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020c6:	d819      	bhi.n	80020fc <main+0x754>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80020c8:	2200      	movs	r2, #0
 80020ca:	497b      	ldr	r1, [pc, #492]	@ (80022b8 <main+0x910>)
 80020cc:	487b      	ldr	r0, [pc, #492]	@ (80022bc <main+0x914>)
 80020ce:	f005 ffb7 	bl	8008040 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80020d2:	2200      	movs	r2, #0
 80020d4:	497a      	ldr	r1, [pc, #488]	@ (80022c0 <main+0x918>)
 80020d6:	4879      	ldr	r0, [pc, #484]	@ (80022bc <main+0x914>)
 80020d8:	f006 f894 	bl	8008204 <HAL_RTC_GetDate>
				          sTime.Hours = (sTime.Hours > 0) ? sTime.Hours - 1 : 23;
 80020dc:	4b76      	ldr	r3, [pc, #472]	@ (80022b8 <main+0x910>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d004      	beq.n	80020ee <main+0x746>
 80020e4:	4b74      	ldr	r3, [pc, #464]	@ (80022b8 <main+0x910>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	e000      	b.n	80020f0 <main+0x748>
 80020ee:	2317      	movs	r3, #23
 80020f0:	4a71      	ldr	r2, [pc, #452]	@ (80022b8 <main+0x910>)
 80020f2:	7013      	strb	r3, [r2, #0]
				          needRedraw = 1;
 80020f4:	4b73      	ldr	r3, [pc, #460]	@ (80022c4 <main+0x91c>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e116      	b.n	800232a <main+0x982>
				      }
				      // Minutes +
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 160 && y <= 190) {
 80020fc:	4b6c      	ldr	r3, [pc, #432]	@ (80022b0 <main+0x908>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	893a      	ldrh	r2, [r7, #8]
 8002104:	429a      	cmp	r2, r3
 8002106:	d832      	bhi.n	800216e <main+0x7c6>
 8002108:	4b69      	ldr	r3, [pc, #420]	@ (80022b0 <main+0x908>)
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	4619      	mov	r1, r3
 8002110:	893a      	ldrh	r2, [r7, #8]
 8002112:	88bb      	ldrh	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	4299      	cmp	r1, r3
 8002118:	dc29      	bgt.n	800216e <main+0x7c6>
 800211a:	4b66      	ldr	r3, [pc, #408]	@ (80022b4 <main+0x90c>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	2b9f      	cmp	r3, #159	@ 0x9f
 8002122:	d924      	bls.n	800216e <main+0x7c6>
 8002124:	4b63      	ldr	r3, [pc, #396]	@ (80022b4 <main+0x90c>)
 8002126:	881b      	ldrh	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	2bbe      	cmp	r3, #190	@ 0xbe
 800212c:	d81f      	bhi.n	800216e <main+0x7c6>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800212e:	2200      	movs	r2, #0
 8002130:	4961      	ldr	r1, [pc, #388]	@ (80022b8 <main+0x910>)
 8002132:	4862      	ldr	r0, [pc, #392]	@ (80022bc <main+0x914>)
 8002134:	f005 ff84 	bl	8008040 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002138:	2200      	movs	r2, #0
 800213a:	4961      	ldr	r1, [pc, #388]	@ (80022c0 <main+0x918>)
 800213c:	485f      	ldr	r0, [pc, #380]	@ (80022bc <main+0x914>)
 800213e:	f006 f861 	bl	8008204 <HAL_RTC_GetDate>
				          sTime.Minutes = (sTime.Minutes + 1) % 60;
 8002142:	4b5d      	ldr	r3, [pc, #372]	@ (80022b8 <main+0x910>)
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	4b5f      	ldr	r3, [pc, #380]	@ (80022c8 <main+0x920>)
 800214a:	fb83 1302 	smull	r1, r3, r3, r2
 800214e:	4413      	add	r3, r2
 8002150:	1159      	asrs	r1, r3, #5
 8002152:	17d3      	asrs	r3, r2, #31
 8002154:	1ac9      	subs	r1, r1, r3
 8002156:	460b      	mov	r3, r1
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a5b      	subs	r3, r3, r1
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	1ad1      	subs	r1, r2, r3
 8002160:	b2ca      	uxtb	r2, r1
 8002162:	4b55      	ldr	r3, [pc, #340]	@ (80022b8 <main+0x910>)
 8002164:	705a      	strb	r2, [r3, #1]
				          needRedraw = 1;
 8002166:	4b57      	ldr	r3, [pc, #348]	@ (80022c4 <main+0x91c>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e0dd      	b.n	800232a <main+0x982>
				      }
				      // Minutes -
				      else if (x >= col2 && x <= col2 + buttonSize && y >= 230 && y <= 260) {
 800216e:	4b50      	ldr	r3, [pc, #320]	@ (80022b0 <main+0x908>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	893a      	ldrh	r2, [r7, #8]
 8002176:	429a      	cmp	r2, r3
 8002178:	d82d      	bhi.n	80021d6 <main+0x82e>
 800217a:	4b4d      	ldr	r3, [pc, #308]	@ (80022b0 <main+0x908>)
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	4619      	mov	r1, r3
 8002182:	893a      	ldrh	r2, [r7, #8]
 8002184:	88bb      	ldrh	r3, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	4299      	cmp	r1, r3
 800218a:	dc24      	bgt.n	80021d6 <main+0x82e>
 800218c:	4b49      	ldr	r3, [pc, #292]	@ (80022b4 <main+0x90c>)
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	2be5      	cmp	r3, #229	@ 0xe5
 8002194:	d91f      	bls.n	80021d6 <main+0x82e>
 8002196:	4b47      	ldr	r3, [pc, #284]	@ (80022b4 <main+0x90c>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021a0:	d819      	bhi.n	80021d6 <main+0x82e>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80021a2:	2200      	movs	r2, #0
 80021a4:	4944      	ldr	r1, [pc, #272]	@ (80022b8 <main+0x910>)
 80021a6:	4845      	ldr	r0, [pc, #276]	@ (80022bc <main+0x914>)
 80021a8:	f005 ff4a 	bl	8008040 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80021ac:	2200      	movs	r2, #0
 80021ae:	4944      	ldr	r1, [pc, #272]	@ (80022c0 <main+0x918>)
 80021b0:	4842      	ldr	r0, [pc, #264]	@ (80022bc <main+0x914>)
 80021b2:	f006 f827 	bl	8008204 <HAL_RTC_GetDate>
				          sTime.Minutes = (sTime.Minutes > 0) ? sTime.Minutes - 1 : 59;
 80021b6:	4b40      	ldr	r3, [pc, #256]	@ (80022b8 <main+0x910>)
 80021b8:	785b      	ldrb	r3, [r3, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <main+0x820>
 80021be:	4b3e      	ldr	r3, [pc, #248]	@ (80022b8 <main+0x910>)
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	e000      	b.n	80021ca <main+0x822>
 80021c8:	233b      	movs	r3, #59	@ 0x3b
 80021ca:	4a3b      	ldr	r2, [pc, #236]	@ (80022b8 <main+0x910>)
 80021cc:	7053      	strb	r3, [r2, #1]
				          needRedraw = 1;
 80021ce:	4b3d      	ldr	r3, [pc, #244]	@ (80022c4 <main+0x91c>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e0a9      	b.n	800232a <main+0x982>
				      }
				      // Année +
				      else if (x >= col3 && x <= col3 + buttonSize && y >= 50 && y <= 80) {
 80021d6:	4b36      	ldr	r3, [pc, #216]	@ (80022b0 <main+0x908>)
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	88fa      	ldrh	r2, [r7, #6]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d830      	bhi.n	8002244 <main+0x89c>
 80021e2:	4b33      	ldr	r3, [pc, #204]	@ (80022b0 <main+0x908>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4619      	mov	r1, r3
 80021ea:	88fa      	ldrh	r2, [r7, #6]
 80021ec:	88bb      	ldrh	r3, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	4299      	cmp	r1, r3
 80021f2:	dc27      	bgt.n	8002244 <main+0x89c>
 80021f4:	4b2f      	ldr	r3, [pc, #188]	@ (80022b4 <main+0x90c>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b31      	cmp	r3, #49	@ 0x31
 80021fc:	d922      	bls.n	8002244 <main+0x89c>
 80021fe:	4b2d      	ldr	r3, [pc, #180]	@ (80022b4 <main+0x90c>)
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	b29b      	uxth	r3, r3
 8002204:	2b50      	cmp	r3, #80	@ 0x50
 8002206:	d81d      	bhi.n	8002244 <main+0x89c>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002208:	2200      	movs	r2, #0
 800220a:	492b      	ldr	r1, [pc, #172]	@ (80022b8 <main+0x910>)
 800220c:	482b      	ldr	r0, [pc, #172]	@ (80022bc <main+0x914>)
 800220e:	f005 ff17 	bl	8008040 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002212:	2200      	movs	r2, #0
 8002214:	492a      	ldr	r1, [pc, #168]	@ (80022c0 <main+0x918>)
 8002216:	4829      	ldr	r0, [pc, #164]	@ (80022bc <main+0x914>)
 8002218:	f005 fff4 	bl	8008204 <HAL_RTC_GetDate>
				          if(sDate.Year < 99) {  // Limite pour format BCD
 800221c:	4b28      	ldr	r3, [pc, #160]	@ (80022c0 <main+0x918>)
 800221e:	78db      	ldrb	r3, [r3, #3]
 8002220:	2b62      	cmp	r3, #98	@ 0x62
 8002222:	f200 8082 	bhi.w	800232a <main+0x982>
				              sDate.Year++;
 8002226:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <main+0x918>)
 8002228:	78db      	ldrb	r3, [r3, #3]
 800222a:	3301      	adds	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b24      	ldr	r3, [pc, #144]	@ (80022c0 <main+0x918>)
 8002230:	70da      	strb	r2, [r3, #3]
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002232:	2200      	movs	r2, #0
 8002234:	4922      	ldr	r1, [pc, #136]	@ (80022c0 <main+0x918>)
 8002236:	4821      	ldr	r0, [pc, #132]	@ (80022bc <main+0x914>)
 8002238:	f005 ff60 	bl	80080fc <HAL_RTC_SetDate>
				              needRedraw = 1;
 800223c:	4b21      	ldr	r3, [pc, #132]	@ (80022c4 <main+0x91c>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]
				          if(sDate.Year < 99) {  // Limite pour format BCD
 8002242:	e072      	b.n	800232a <main+0x982>
				          }
				      }
				      // Année -
				      else if (x >= col3 && x <= col3 + buttonSize && y >= 120 && y <= 150) {
 8002244:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <main+0x908>)
 8002246:	881b      	ldrh	r3, [r3, #0]
 8002248:	b29b      	uxth	r3, r3
 800224a:	88fa      	ldrh	r2, [r7, #6]
 800224c:	429a      	cmp	r2, r3
 800224e:	d83d      	bhi.n	80022cc <main+0x924>
 8002250:	4b17      	ldr	r3, [pc, #92]	@ (80022b0 <main+0x908>)
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	b29b      	uxth	r3, r3
 8002256:	4619      	mov	r1, r3
 8002258:	88fa      	ldrh	r2, [r7, #6]
 800225a:	88bb      	ldrh	r3, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	4299      	cmp	r1, r3
 8002260:	dc34      	bgt.n	80022cc <main+0x924>
 8002262:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <main+0x90c>)
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b77      	cmp	r3, #119	@ 0x77
 800226a:	d92f      	bls.n	80022cc <main+0x924>
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <main+0x90c>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b96      	cmp	r3, #150	@ 0x96
 8002274:	d82a      	bhi.n	80022cc <main+0x924>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002276:	2200      	movs	r2, #0
 8002278:	490f      	ldr	r1, [pc, #60]	@ (80022b8 <main+0x910>)
 800227a:	4810      	ldr	r0, [pc, #64]	@ (80022bc <main+0x914>)
 800227c:	f005 fee0 	bl	8008040 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002280:	2200      	movs	r2, #0
 8002282:	490f      	ldr	r1, [pc, #60]	@ (80022c0 <main+0x918>)
 8002284:	480d      	ldr	r0, [pc, #52]	@ (80022bc <main+0x914>)
 8002286:	f005 ffbd 	bl	8008204 <HAL_RTC_GetDate>
				          if(sDate.Year > 0) {
 800228a:	4b0d      	ldr	r3, [pc, #52]	@ (80022c0 <main+0x918>)
 800228c:	78db      	ldrb	r3, [r3, #3]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d04b      	beq.n	800232a <main+0x982>
				              sDate.Year--;
 8002292:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <main+0x918>)
 8002294:	78db      	ldrb	r3, [r3, #3]
 8002296:	3b01      	subs	r3, #1
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <main+0x918>)
 800229c:	70da      	strb	r2, [r3, #3]
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800229e:	2200      	movs	r2, #0
 80022a0:	4907      	ldr	r1, [pc, #28]	@ (80022c0 <main+0x918>)
 80022a2:	4806      	ldr	r0, [pc, #24]	@ (80022bc <main+0x914>)
 80022a4:	f005 ff2a 	bl	80080fc <HAL_RTC_SetDate>
				              needRedraw = 1;
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <main+0x91c>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
				          if(sDate.Year > 0) {
 80022ae:	e03c      	b.n	800232a <main+0x982>
 80022b0:	200050e0 	.word	0x200050e0
 80022b4:	200050e2 	.word	0x200050e2
 80022b8:	200050e8 	.word	0x200050e8
 80022bc:	2000512c 	.word	0x2000512c
 80022c0:	200050fc 	.word	0x200050fc
 80022c4:	20004e78 	.word	0x20004e78
 80022c8:	88888889 	.word	0x88888889
				          }
				      }
				      // Bouton Valider
				      else if (x >= 340 && x <= 440 && y >= 220 && y <= 250) {
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <main+0x9c4>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 80022d6:	d328      	bcc.n	800232a <main+0x982>
 80022d8:	4b24      	ldr	r3, [pc, #144]	@ (800236c <main+0x9c4>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 80022e2:	d822      	bhi.n	800232a <main+0x982>
 80022e4:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <main+0x9c8>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2bdb      	cmp	r3, #219	@ 0xdb
 80022ec:	d91d      	bls.n	800232a <main+0x982>
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <main+0x9c8>)
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	2bfa      	cmp	r3, #250	@ 0xfa
 80022f6:	d818      	bhi.n	800232a <main+0x982>
				          HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80022f8:	2200      	movs	r2, #0
 80022fa:	491e      	ldr	r1, [pc, #120]	@ (8002374 <main+0x9cc>)
 80022fc:	481e      	ldr	r0, [pc, #120]	@ (8002378 <main+0x9d0>)
 80022fe:	f005 fe9f 	bl	8008040 <HAL_RTC_GetTime>
				          HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002302:	2200      	movs	r2, #0
 8002304:	491d      	ldr	r1, [pc, #116]	@ (800237c <main+0x9d4>)
 8002306:	481c      	ldr	r0, [pc, #112]	@ (8002378 <main+0x9d0>)
 8002308:	f005 ff7c 	bl	8008204 <HAL_RTC_GetDate>
				          // Mise à jour de la date et de l'heure
				          HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800230c:	2200      	movs	r2, #0
 800230e:	4919      	ldr	r1, [pc, #100]	@ (8002374 <main+0x9cc>)
 8002310:	4819      	ldr	r0, [pc, #100]	@ (8002378 <main+0x9d0>)
 8002312:	f005 fdfb 	bl	8007f0c <HAL_RTC_SetTime>
				          HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002316:	2200      	movs	r2, #0
 8002318:	4918      	ldr	r1, [pc, #96]	@ (800237c <main+0x9d4>)
 800231a:	4817      	ldr	r0, [pc, #92]	@ (8002378 <main+0x9d0>)
 800231c:	f005 feee 	bl	80080fc <HAL_RTC_SetDate>
				          flag = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
				          needRedraw = 1;
 8002324:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <main+0x9d8>)
 8002326:	2201      	movs	r2, #1
 8002328:	601a      	str	r2, [r3, #0]
				      }

				      // Si une valeur a été modifiée, on met à jour la RTC
				      if (needRedraw) {
 800232a:	4b15      	ldr	r3, [pc, #84]	@ (8002380 <main+0x9d8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d019      	beq.n	8002366 <main+0x9be>
				          if (flag == 3) {  // Si on est toujours sur la page de réglage
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d116      	bne.n	8002366 <main+0x9be>
				              HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002338:	2200      	movs	r2, #0
 800233a:	490e      	ldr	r1, [pc, #56]	@ (8002374 <main+0x9cc>)
 800233c:	480e      	ldr	r0, [pc, #56]	@ (8002378 <main+0x9d0>)
 800233e:	f005 fde5 	bl	8007f0c <HAL_RTC_SetTime>
				              HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002342:	2200      	movs	r2, #0
 8002344:	490d      	ldr	r1, [pc, #52]	@ (800237c <main+0x9d4>)
 8002346:	480c      	ldr	r0, [pc, #48]	@ (8002378 <main+0x9d0>)
 8002348:	f005 fed8 	bl	80080fc <HAL_RTC_SetDate>
			  if (flag == 0 && x > 40 && x < 220 && y > 60 && y < 220) {
 800234c:	e00b      	b.n	8002366 <main+0x9be>
 800234e:	e00a      	b.n	8002366 <main+0x9be>
				          }
				      }
				  }

		  } else if (!TS_State.touchDetected) {
 8002350:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <main+0x9dc>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	f47f ab5e 	bne.w	8001a18 <main+0x70>
			  debounce = 0; // Reset debounce flag when touch is released
 800235c:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <main+0x9e0>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	f7ff bb59 	b.w	8001a18 <main+0x70>
			  if (flag == 0 && x > 40 && x < 220 && y > 60 && y < 220) {
 8002366:	bf00      	nop
         if (needRedraw) {
 8002368:	f7ff bb56 	b.w	8001a18 <main+0x70>
 800236c:	200050e0 	.word	0x200050e0
 8002370:	200050e2 	.word	0x200050e2
 8002374:	200050e8 	.word	0x200050e8
 8002378:	2000512c 	.word	0x2000512c
 800237c:	200050fc 	.word	0x200050fc
 8002380:	20004e78 	.word	0x20004e78
 8002384:	200050b4 	.word	0x200050b4
 8002388:	200050e4 	.word	0x200050e4

0800238c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b094      	sub	sp, #80	@ 0x50
 8002390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002392:	f107 0320 	add.w	r3, r7, #32
 8002396:	2230      	movs	r2, #48	@ 0x30
 8002398:	2100      	movs	r1, #0
 800239a:	4618      	mov	r0, r3
 800239c:	f007 fc0c 	bl	8009bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	605a      	str	r2, [r3, #4]
 80023aa:	609a      	str	r2, [r3, #8]
 80023ac:	60da      	str	r2, [r3, #12]
 80023ae:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80023b0:	f004 fc9e 	bl	8006cf0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80023b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002468 <SystemClock_Config+0xdc>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002468 <SystemClock_Config+0xdc>)
 80023ba:	f023 0318 	bic.w	r3, r3, #24
 80023be:	6713      	str	r3, [r2, #112]	@ 0x70

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c0:	4b29      	ldr	r3, [pc, #164]	@ (8002468 <SystemClock_Config+0xdc>)
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	4a28      	ldr	r2, [pc, #160]	@ (8002468 <SystemClock_Config+0xdc>)
 80023c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80023cc:	4b26      	ldr	r3, [pc, #152]	@ (8002468 <SystemClock_Config+0xdc>)
 80023ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80023d8:	4b24      	ldr	r3, [pc, #144]	@ (800246c <SystemClock_Config+0xe0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80023e0:	4a22      	ldr	r2, [pc, #136]	@ (800246c <SystemClock_Config+0xe0>)
 80023e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b20      	ldr	r3, [pc, #128]	@ (800246c <SystemClock_Config+0xe0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023f0:	607b      	str	r3, [r7, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80023f4:	2305      	movs	r3, #5
 80023f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023fe:	2301      	movs	r3, #1
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002402:	2302      	movs	r3, #2
 8002404:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002406:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800240a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800240c:	230f      	movs	r3, #15
 800240e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002410:	23c0      	movs	r3, #192	@ 0xc0
 8002412:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002414:	2302      	movs	r3, #2
 8002416:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002418:	2302      	movs	r3, #2
 800241a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800241c:	f107 0320 	add.w	r3, r7, #32
 8002420:	4618      	mov	r0, r3
 8002422:	f004 fc75 	bl	8006d10 <HAL_RCC_OscConfig>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800242c:	f000 f886 	bl	800253c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002430:	230f      	movs	r3, #15
 8002432:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002434:	2302      	movs	r3, #2
 8002436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800243c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002440:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002442:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002446:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	2105      	movs	r1, #5
 800244e:	4618      	mov	r0, r3
 8002450:	f004 ff02 	bl	8007258 <HAL_RCC_ClockConfig>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800245a:	f000 f86f 	bl	800253c <Error_Handler>
  }
}
 800245e:	bf00      	nop
 8002460:	3750      	adds	r7, #80	@ 0x50
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40023800 	.word	0x40023800
 800246c:	40007000 	.word	0x40007000

08002470 <TouchTimer_Init>:

/* USER CODE BEGIN 4 */
void TouchTimer_Init() {
 8002470:	b598      	push	{r3, r4, r7, lr}
 8002472:	af00      	add	r7, sp, #0
    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002474:	f000 ffb8 	bl	80033e8 <BSP_LCD_GetXSize>
 8002478:	4603      	mov	r3, r0
 800247a:	b29c      	uxth	r4, r3
 800247c:	f000 ffc8 	bl	8003410 <BSP_LCD_GetYSize>
 8002480:	4603      	mov	r3, r0
 8002482:	b29b      	uxth	r3, r3
 8002484:	4619      	mov	r1, r3
 8002486:	4620      	mov	r0, r4
 8002488:	f001 ffe4 	bl	8004454 <BSP_TS_Init>

    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800248c:	4808      	ldr	r0, [pc, #32]	@ (80024b0 <TouchTimer_Init+0x40>)
 800248e:	f006 f948 	bl	8008722 <HAL_TIM_Base_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <TouchTimer_Init+0x2c>
        while (1);
 8002498:	bf00      	nop
 800249a:	e7fd      	b.n	8002498 <TouchTimer_Init+0x28>
    }
    if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK) {
 800249c:	4804      	ldr	r0, [pc, #16]	@ (80024b0 <TouchTimer_Init+0x40>)
 800249e:	f006 f997 	bl	80087d0 <HAL_TIM_Base_Start_IT>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <TouchTimer_Init+0x3c>
        while (1);
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <TouchTimer_Init+0x38>
    }
}
 80024ac:	bf00      	nop
 80024ae:	bd98      	pop	{r3, r4, r7, pc}
 80024b0:	20005150 	.word	0x20005150

080024b4 <PollTouchScreen>:

void PollTouchScreen(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08c      	sub	sp, #48	@ 0x30
 80024b8:	af00      	add	r7, sp, #0
	static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
	TS_StateTypeDef ts;                   /* Actual touch state from the touch sensor used from BSP package */
	BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API)*/
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 f809 	bl	80044d4 <BSP_TS_GetState>
	TS_State.touchDetected = ts.touchDetected;  /* Store pressed state */
 80024c2:	793a      	ldrb	r2, [r7, #4]
 80024c4:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <PollTouchScreen+0x54>)
 80024c6:	701a      	strb	r2, [r3, #0]

	/* Check if the touch is pressed */
	if ((prev_state.touchDetected != ts.touchDetected))
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <PollTouchScreen+0x58>)
 80024ca:	781a      	ldrb	r2, [r3, #0]
 80024cc:	793b      	ldrb	r3, [r7, #4]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d016      	beq.n	8002500 <PollTouchScreen+0x4c>
	{
		prev_state.touchDetected = ts.touchDetected;
 80024d2:	793a      	ldrb	r2, [r7, #4]
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <PollTouchScreen+0x58>)
 80024d6:	701a      	strb	r2, [r3, #0]
		/* Check touch variations */
		if ((ts.touchX[0] != 0) && (ts.touchY[0] != 0))
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d008      	beq.n	80024f0 <PollTouchScreen+0x3c>
 80024de:	8a3b      	ldrh	r3, [r7, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <PollTouchScreen+0x3c>
		{
		  prev_state.touchX[0] = ts.touchX[0];
 80024e4:	88fa      	ldrh	r2, [r7, #6]
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <PollTouchScreen+0x58>)
 80024e8:	805a      	strh	r2, [r3, #2]
		  prev_state.touchY[0] = ts.touchY[0];
 80024ea:	8a3a      	ldrh	r2, [r7, #16]
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <PollTouchScreen+0x58>)
 80024ee:	819a      	strh	r2, [r3, #12]
		}
		x = prev_state.touchX[0];
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <PollTouchScreen+0x58>)
 80024f2:	885a      	ldrh	r2, [r3, #2]
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <PollTouchScreen+0x5c>)
 80024f6:	801a      	strh	r2, [r3, #0]
		y = prev_state.touchY[0];
 80024f8:	4b04      	ldr	r3, [pc, #16]	@ (800250c <PollTouchScreen+0x58>)
 80024fa:	899a      	ldrh	r2, [r3, #12]
 80024fc:	4b05      	ldr	r3, [pc, #20]	@ (8002514 <PollTouchScreen+0x60>)
 80024fe:	801a      	strh	r2, [r3, #0]
	}
}
 8002500:	bf00      	nop
 8002502:	3730      	adds	r7, #48	@ 0x30
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	200050b4 	.word	0x200050b4
 800250c:	20005100 	.word	0x20005100
 8002510:	200050e0 	.word	0x200050e0
 8002514:	200050e2 	.word	0x200050e2

08002518 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM3)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a04      	ldr	r2, [pc, #16]	@ (8002538 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d101      	bne.n	800252e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  PollTouchScreen();
 800252a:	f7ff ffc3 	bl	80024b4 <PollTouchScreen>
  }
  /* USER CODE END Callback 1 */
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40000400 	.word	0x40000400

0800253c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002540:	b672      	cpsid	i
}
 8002542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <Error_Handler+0x8>

08002548 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800255c:	2300      	movs	r3, #0
 800255e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002560:	4b29      	ldr	r3, [pc, #164]	@ (8002608 <MX_RTC_Init+0xc0>)
 8002562:	4a2a      	ldr	r2, [pc, #168]	@ (800260c <MX_RTC_Init+0xc4>)
 8002564:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002566:	4b28      	ldr	r3, [pc, #160]	@ (8002608 <MX_RTC_Init+0xc0>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800256c:	4b26      	ldr	r3, [pc, #152]	@ (8002608 <MX_RTC_Init+0xc0>)
 800256e:	227f      	movs	r2, #127	@ 0x7f
 8002570:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002572:	4b25      	ldr	r3, [pc, #148]	@ (8002608 <MX_RTC_Init+0xc0>)
 8002574:	22ff      	movs	r2, #255	@ 0xff
 8002576:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002578:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <MX_RTC_Init+0xc0>)
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800257e:	4b22      	ldr	r3, [pc, #136]	@ (8002608 <MX_RTC_Init+0xc0>)
 8002580:	2200      	movs	r2, #0
 8002582:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002584:	4b20      	ldr	r3, [pc, #128]	@ (8002608 <MX_RTC_Init+0xc0>)
 8002586:	2200      	movs	r2, #0
 8002588:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800258a:	481f      	ldr	r0, [pc, #124]	@ (8002608 <MX_RTC_Init+0xc0>)
 800258c:	f005 fc3a 	bl	8007e04 <HAL_RTC_Init>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002596:	f7ff ffd1 	bl	800253c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	4619      	mov	r1, r3
 80025b4:	4814      	ldr	r0, [pc, #80]	@ (8002608 <MX_RTC_Init+0xc0>)
 80025b6:	f005 fca9 	bl	8007f0c <HAL_RTC_SetTime>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80025c0:	f7ff ffbc 	bl	800253c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80025c4:	2301      	movs	r3, #1
 80025c6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80025c8:	2301      	movs	r3, #1
 80025ca:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80025cc:	2301      	movs	r3, #1
 80025ce:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80025d0:	2300      	movs	r3, #0
 80025d2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80025d4:	463b      	mov	r3, r7
 80025d6:	2200      	movs	r2, #0
 80025d8:	4619      	mov	r1, r3
 80025da:	480b      	ldr	r0, [pc, #44]	@ (8002608 <MX_RTC_Init+0xc0>)
 80025dc:	f005 fd8e 	bl	80080fc <HAL_RTC_SetDate>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80025e6:	f7ff ffa9 	bl	800253c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	4806      	ldr	r0, [pc, #24]	@ (8002608 <MX_RTC_Init+0xc0>)
 80025f0:	f005 ff16 	bl	8008420 <HAL_RTCEx_SetWakeUpTimer_IT>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_RTC_Init+0xb6>
  {
    Error_Handler();
 80025fa:	f7ff ff9f 	bl	800253c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80025fe:	bf00      	nop
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	2000512c 	.word	0x2000512c
 800260c:	40002800 	.word	0x40002800

08002610 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b0a4      	sub	sp, #144	@ 0x90
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002618:	f107 030c 	add.w	r3, r7, #12
 800261c:	2284      	movs	r2, #132	@ 0x84
 800261e:	2100      	movs	r1, #0
 8002620:	4618      	mov	r0, r3
 8002622:	f007 fac9 	bl	8009bb8 <memset>
  if(rtcHandle->Instance==RTC)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a12      	ldr	r2, [pc, #72]	@ (8002674 <HAL_RTC_MspInit+0x64>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d11c      	bne.n	800266a <HAL_RTC_MspInit+0x5a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002630:	2320      	movs	r3, #32
 8002632:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002634:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002638:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800263a:	f107 030c 	add.w	r3, r7, #12
 800263e:	4618      	mov	r0, r3
 8002640:	f004 fff0 	bl	8007624 <HAL_RCCEx_PeriphCLKConfig>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800264a:	f7ff ff77 	bl	800253c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800264e:	4b0a      	ldr	r3, [pc, #40]	@ (8002678 <HAL_RTC_MspInit+0x68>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002652:	4a09      	ldr	r2, [pc, #36]	@ (8002678 <HAL_RTC_MspInit+0x68>)
 8002654:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002658:	6713      	str	r3, [r2, #112]	@ 0x70

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	2003      	movs	r0, #3
 8002660:	f002 fadb 	bl	8004c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002664:	2003      	movs	r0, #3
 8002666:	f002 faf4 	bl	8004c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800266a:	bf00      	nop
 800266c:	3790      	adds	r7, #144	@ 0x90
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40002800 	.word	0x40002800
 8002678:	40023800 	.word	0x40023800

0800267c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002682:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <HAL_MspInit+0x44>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	4a0e      	ldr	r2, [pc, #56]	@ (80026c0 <HAL_MspInit+0x44>)
 8002688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	@ 0x40
 800268e:	4b0c      	ldr	r3, [pc, #48]	@ (80026c0 <HAL_MspInit+0x44>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002696:	607b      	str	r3, [r7, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269a:	4b09      	ldr	r3, [pc, #36]	@ (80026c0 <HAL_MspInit+0x44>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	4a08      	ldr	r2, [pc, #32]	@ (80026c0 <HAL_MspInit+0x44>)
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a6:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <HAL_MspInit+0x44>)
 80026a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ae:	603b      	str	r3, [r7, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800

080026c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <NMI_Handler+0x4>

080026cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026d0:	bf00      	nop
 80026d2:	e7fd      	b.n	80026d0 <HardFault_Handler+0x4>

080026d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d8:	bf00      	nop
 80026da:	e7fd      	b.n	80026d8 <MemManage_Handler+0x4>

080026dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <BusFault_Handler+0x4>

080026e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <UsageFault_Handler+0x4>

080026ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026fa:	b480      	push	{r7}
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800271a:	f002 f95f 	bl	80049dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <RTC_WKUP_IRQHandler+0x10>)
 800272a:	f005 ff3b 	bl	80085a4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000512c 	.word	0x2000512c

08002738 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <TIM3_IRQHandler+0x10>)
 800273e:	f006 f8bf 	bl	80088c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20005150 	.word	0x20005150

0800274c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002754:	4a14      	ldr	r2, [pc, #80]	@ (80027a8 <_sbrk+0x5c>)
 8002756:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <_sbrk+0x60>)
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002760:	4b13      	ldr	r3, [pc, #76]	@ (80027b0 <_sbrk+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002768:	4b11      	ldr	r3, [pc, #68]	@ (80027b0 <_sbrk+0x64>)
 800276a:	4a12      	ldr	r2, [pc, #72]	@ (80027b4 <_sbrk+0x68>)
 800276c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800276e:	4b10      	ldr	r3, [pc, #64]	@ (80027b0 <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	429a      	cmp	r2, r3
 800277a:	d207      	bcs.n	800278c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800277c:	f007 fa24 	bl	8009bc8 <__errno>
 8002780:	4603      	mov	r3, r0
 8002782:	220c      	movs	r2, #12
 8002784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295
 800278a:	e009      	b.n	80027a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800278c:	4b08      	ldr	r3, [pc, #32]	@ (80027b0 <_sbrk+0x64>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002792:	4b07      	ldr	r3, [pc, #28]	@ (80027b0 <_sbrk+0x64>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	4a05      	ldr	r2, [pc, #20]	@ (80027b0 <_sbrk+0x64>)
 800279c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20050000 	.word	0x20050000
 80027ac:	00000800 	.word	0x00000800
 80027b0:	2000514c 	.word	0x2000514c
 80027b4:	20005648 	.word	0x20005648

080027b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <SystemInit+0x20>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c2:	4a05      	ldr	r2, [pc, #20]	@ (80027d8 <SystemInit+0x20>)
 80027c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
 80027f0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027f2:	463b      	mov	r3, r7
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80027fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <MX_TIM3_Init+0x98>)
 80027fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002878 <MX_TIM3_Init+0x9c>)
 8002800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8002802:	4b1c      	ldr	r3, [pc, #112]	@ (8002874 <MX_TIM3_Init+0x98>)
 8002804:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800280a:	4b1a      	ldr	r3, [pc, #104]	@ (8002874 <MX_TIM3_Init+0x98>)
 800280c:	2200      	movs	r2, #0
 800280e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002810:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <MX_TIM3_Init+0x98>)
 8002812:	22c7      	movs	r2, #199	@ 0xc7
 8002814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002816:	4b17      	ldr	r3, [pc, #92]	@ (8002874 <MX_TIM3_Init+0x98>)
 8002818:	2200      	movs	r2, #0
 800281a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800281c:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <MX_TIM3_Init+0x98>)
 800281e:	2200      	movs	r2, #0
 8002820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002822:	4814      	ldr	r0, [pc, #80]	@ (8002874 <MX_TIM3_Init+0x98>)
 8002824:	f005 ff7d 	bl	8008722 <HAL_TIM_Base_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800282e:	f7ff fe85 	bl	800253c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002832:	2304      	movs	r3, #4
 8002834:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002836:	2300      	movs	r3, #0
 8002838:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	4619      	mov	r1, r3
 8002840:	480c      	ldr	r0, [pc, #48]	@ (8002874 <MX_TIM3_Init+0x98>)
 8002842:	f006 f944 	bl	8008ace <HAL_TIM_SlaveConfigSynchro>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800284c:	f7ff fe76 	bl	800253c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002850:	2300      	movs	r3, #0
 8002852:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002854:	2300      	movs	r3, #0
 8002856:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002858:	463b      	mov	r3, r7
 800285a:	4619      	mov	r1, r3
 800285c:	4805      	ldr	r0, [pc, #20]	@ (8002874 <MX_TIM3_Init+0x98>)
 800285e:	f006 fb61 	bl	8008f24 <HAL_TIMEx_MasterConfigSynchronization>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002868:	f7ff fe68 	bl	800253c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800286c:	bf00      	nop
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20005150 	.word	0x20005150
 8002878:	40000400 	.word	0x40000400

0800287c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a0d      	ldr	r2, [pc, #52]	@ (80028c0 <HAL_TIM_Base_MspInit+0x44>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d113      	bne.n	80028b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <HAL_TIM_Base_MspInit+0x48>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002892:	4a0c      	ldr	r2, [pc, #48]	@ (80028c4 <HAL_TIM_Base_MspInit+0x48>)
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	6413      	str	r3, [r2, #64]	@ 0x40
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_TIM_Base_MspInit+0x48>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	201d      	movs	r0, #29
 80028ac:	f002 f9b5 	bl	8004c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028b0:	201d      	movs	r0, #29
 80028b2:	f002 f9ce 	bl	8004c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40000400 	.word	0x40000400
 80028c4:	40023800 	.word	0x40023800

080028c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028cc:	4b14      	ldr	r3, [pc, #80]	@ (8002920 <MX_USART1_UART_Init+0x58>)
 80028ce:	4a15      	ldr	r2, [pc, #84]	@ (8002924 <MX_USART1_UART_Init+0x5c>)
 80028d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028d2:	4b13      	ldr	r3, [pc, #76]	@ (8002920 <MX_USART1_UART_Init+0x58>)
 80028d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <MX_USART1_UART_Init+0x58>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002920 <MX_USART1_UART_Init+0x58>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <MX_USART1_UART_Init+0x58>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002920 <MX_USART1_UART_Init+0x58>)
 80028ee:	220c      	movs	r2, #12
 80028f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002920 <MX_USART1_UART_Init+0x58>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f8:	4b09      	ldr	r3, [pc, #36]	@ (8002920 <MX_USART1_UART_Init+0x58>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <MX_USART1_UART_Init+0x58>)
 8002900:	2200      	movs	r2, #0
 8002902:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <MX_USART1_UART_Init+0x58>)
 8002906:	2200      	movs	r2, #0
 8002908:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800290a:	4805      	ldr	r0, [pc, #20]	@ (8002920 <MX_USART1_UART_Init+0x58>)
 800290c:	f006 fbb6 	bl	800907c <HAL_UART_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002916:	f7ff fe11 	bl	800253c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000519c 	.word	0x2000519c
 8002924:	40011000 	.word	0x40011000

08002928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b0ac      	sub	sp, #176	@ 0xb0
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002940:	f107 0318 	add.w	r3, r7, #24
 8002944:	2284      	movs	r2, #132	@ 0x84
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f007 f935 	bl	8009bb8 <memset>
  if(uartHandle->Instance==USART1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a32      	ldr	r2, [pc, #200]	@ (8002a1c <HAL_UART_MspInit+0xf4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d15c      	bne.n	8002a12 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002958:	2340      	movs	r3, #64	@ 0x40
 800295a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800295c:	2300      	movs	r3, #0
 800295e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002960:	f107 0318 	add.w	r3, r7, #24
 8002964:	4618      	mov	r0, r3
 8002966:	f004 fe5d 	bl	8007624 <HAL_RCCEx_PeriphCLKConfig>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002970:	f7ff fde4 	bl	800253c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002974:	4b2a      	ldr	r3, [pc, #168]	@ (8002a20 <HAL_UART_MspInit+0xf8>)
 8002976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002978:	4a29      	ldr	r2, [pc, #164]	@ (8002a20 <HAL_UART_MspInit+0xf8>)
 800297a:	f043 0310 	orr.w	r3, r3, #16
 800297e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002980:	4b27      	ldr	r3, [pc, #156]	@ (8002a20 <HAL_UART_MspInit+0xf8>)
 8002982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002984:	f003 0310 	and.w	r3, r3, #16
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800298c:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <HAL_UART_MspInit+0xf8>)
 800298e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002990:	4a23      	ldr	r2, [pc, #140]	@ (8002a20 <HAL_UART_MspInit+0xf8>)
 8002992:	f043 0302 	orr.w	r3, r3, #2
 8002996:	6313      	str	r3, [r2, #48]	@ 0x30
 8002998:	4b21      	ldr	r3, [pc, #132]	@ (8002a20 <HAL_UART_MspInit+0xf8>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a20 <HAL_UART_MspInit+0xf8>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002a20 <HAL_UART_MspInit+0xf8>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a20 <HAL_UART_MspInit+0xf8>)
 80029b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ce:	2303      	movs	r3, #3
 80029d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029d4:	2307      	movs	r3, #7
 80029d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029da:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80029de:	4619      	mov	r1, r3
 80029e0:	4810      	ldr	r0, [pc, #64]	@ (8002a24 <HAL_UART_MspInit+0xfc>)
 80029e2:	f002 fd9b 	bl	800551c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fa:	2303      	movs	r3, #3
 80029fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a00:	2307      	movs	r3, #7
 8002a02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a06:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4806      	ldr	r0, [pc, #24]	@ (8002a28 <HAL_UART_MspInit+0x100>)
 8002a0e:	f002 fd85 	bl	800551c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002a12:	bf00      	nop
 8002a14:	37b0      	adds	r7, #176	@ 0xb0
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40011000 	.word	0x40011000
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40020400 	.word	0x40020400
 8002a28:	40020000 	.word	0x40020000

08002a2c <Reset_Handler>:
 8002a2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a64 <LoopFillZerobss+0x12>
 8002a30:	480d      	ldr	r0, [pc, #52]	@ (8002a68 <LoopFillZerobss+0x16>)
 8002a32:	490e      	ldr	r1, [pc, #56]	@ (8002a6c <LoopFillZerobss+0x1a>)
 8002a34:	4a0e      	ldr	r2, [pc, #56]	@ (8002a70 <LoopFillZerobss+0x1e>)
 8002a36:	2300      	movs	r3, #0
 8002a38:	e002      	b.n	8002a40 <LoopCopyDataInit>

08002a3a <CopyDataInit>:
 8002a3a:	58d4      	ldr	r4, [r2, r3]
 8002a3c:	50c4      	str	r4, [r0, r3]
 8002a3e:	3304      	adds	r3, #4

08002a40 <LoopCopyDataInit>:
 8002a40:	18c4      	adds	r4, r0, r3
 8002a42:	428c      	cmp	r4, r1
 8002a44:	d3f9      	bcc.n	8002a3a <CopyDataInit>
 8002a46:	4a0b      	ldr	r2, [pc, #44]	@ (8002a74 <LoopFillZerobss+0x22>)
 8002a48:	4c0b      	ldr	r4, [pc, #44]	@ (8002a78 <LoopFillZerobss+0x26>)
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e001      	b.n	8002a52 <LoopFillZerobss>

08002a4e <FillZerobss>:
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	3204      	adds	r2, #4

08002a52 <LoopFillZerobss>:
 8002a52:	42a2      	cmp	r2, r4
 8002a54:	d3fb      	bcc.n	8002a4e <FillZerobss>
 8002a56:	f7ff feaf 	bl	80027b8 <SystemInit>
 8002a5a:	f007 f8bb 	bl	8009bd4 <__libc_init_array>
 8002a5e:	f7fe ffa3 	bl	80019a8 <main>
 8002a62:	4770      	bx	lr
 8002a64:	20050000 	.word	0x20050000
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20004f24 	.word	0x20004f24
 8002a70:	0800e07c 	.word	0x0800e07c
 8002a74:	20004f24 	.word	0x20004f24
 8002a78:	20005648 	.word	0x20005648

08002a7c <ADC_IRQHandler>:
 8002a7c:	e7fe      	b.n	8002a7c <ADC_IRQHandler>

08002a7e <ft5336_Init>:
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	80fb      	strh	r3, [r7, #6]
 8002a88:	20c8      	movs	r0, #200	@ 0xc8
 8002a8a:	f000 fc31 	bl	80032f0 <TS_IO_Delay>
 8002a8e:	f000 fa79 	bl	8002f84 <ft5336_I2C_InitializeIfRequired>
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <ft5336_Reset>:
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	80fb      	strh	r3, [r7, #6]
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <ft5336_ReadID>:
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
 8002aba:	2300      	movs	r3, #0
 8002abc:	737b      	strb	r3, [r7, #13]
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73bb      	strb	r3, [r7, #14]
 8002ac6:	f000 fa5d 	bl	8002f84 <ft5336_I2C_InitializeIfRequired>
 8002aca:	2300      	movs	r3, #0
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e010      	b.n	8002af2 <ft5336_ReadID+0x42>
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	21a8      	movs	r1, #168	@ 0xa8
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fbec 	bl	80032b4 <TS_IO_Read>
 8002adc:	4603      	mov	r3, r0
 8002ade:	737b      	strb	r3, [r7, #13]
 8002ae0:	7b7b      	ldrb	r3, [r7, #13]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b51      	cmp	r3, #81	@ 0x51
 8002ae6:	d101      	bne.n	8002aec <ft5336_ReadID+0x3c>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	73bb      	strb	r3, [r7, #14]
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	3301      	adds	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d802      	bhi.n	8002afe <ft5336_ReadID+0x4e>
 8002af8:	7bbb      	ldrb	r3, [r7, #14]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0e8      	beq.n	8002ad0 <ft5336_ReadID+0x20>
 8002afe:	7b7b      	ldrb	r3, [r7, #13]
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <ft5336_TS_Start>:
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	80fb      	strh	r3, [r7, #6]
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fa44 	bl	8002fa4 <ft5336_TS_Configure>
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f932 	bl	8002d88 <ft5336_TS_DisableIT>
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <ft5336_TS_DetectTouch>:
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	80fb      	strh	r3, [r7, #6]
 8002b36:	2300      	movs	r3, #0
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2102      	movs	r1, #2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fbb7 	bl	80032b4 <TS_IO_Read>
 8002b46:	4603      	mov	r3, r0
 8002b48:	73fb      	strb	r3, [r7, #15]
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b05      	cmp	r3, #5
 8002b5c:	d901      	bls.n	8002b62 <ft5336_TS_DetectTouch+0x36>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	73fb      	strb	r3, [r7, #15]
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	4b05      	ldr	r3, [pc, #20]	@ (8002b7c <ft5336_TS_DetectTouch+0x50>)
 8002b68:	705a      	strb	r2, [r3, #1]
 8002b6a:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <ft5336_TS_DetectTouch+0x50>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	709a      	strb	r2, [r3, #2]
 8002b70:	7bfb      	ldrb	r3, [r7, #15]
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20005224 	.word	0x20005224

08002b80 <ft5336_TS_GetXY>:
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	81fb      	strh	r3, [r7, #14]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	74fb      	strb	r3, [r7, #19]
 8002b92:	2300      	movs	r3, #0
 8002b94:	75fb      	strb	r3, [r7, #23]
 8002b96:	2300      	movs	r3, #0
 8002b98:	75bb      	strb	r3, [r7, #22]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	757b      	strb	r3, [r7, #21]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	753b      	strb	r3, [r7, #20]
 8002ba2:	4b6d      	ldr	r3, [pc, #436]	@ (8002d58 <ft5336_TS_GetXY+0x1d8>)
 8002ba4:	789a      	ldrb	r2, [r3, #2]
 8002ba6:	4b6c      	ldr	r3, [pc, #432]	@ (8002d58 <ft5336_TS_GetXY+0x1d8>)
 8002ba8:	785b      	ldrb	r3, [r3, #1]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	f080 80cf 	bcs.w	8002d4e <ft5336_TS_GetXY+0x1ce>
 8002bb0:	4b69      	ldr	r3, [pc, #420]	@ (8002d58 <ft5336_TS_GetXY+0x1d8>)
 8002bb2:	789b      	ldrb	r3, [r3, #2]
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	d871      	bhi.n	8002c9c <ft5336_TS_GetXY+0x11c>
 8002bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc0 <ft5336_TS_GetXY+0x40>)
 8002bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbe:	bf00      	nop
 8002bc0:	08002be9 	.word	0x08002be9
 8002bc4:	08002bfb 	.word	0x08002bfb
 8002bc8:	08002c0d 	.word	0x08002c0d
 8002bcc:	08002c1f 	.word	0x08002c1f
 8002bd0:	08002c31 	.word	0x08002c31
 8002bd4:	08002c43 	.word	0x08002c43
 8002bd8:	08002c55 	.word	0x08002c55
 8002bdc:	08002c67 	.word	0x08002c67
 8002be0:	08002c79 	.word	0x08002c79
 8002be4:	08002c8b 	.word	0x08002c8b
 8002be8:	2304      	movs	r3, #4
 8002bea:	75fb      	strb	r3, [r7, #23]
 8002bec:	2303      	movs	r3, #3
 8002bee:	75bb      	strb	r3, [r7, #22]
 8002bf0:	2306      	movs	r3, #6
 8002bf2:	757b      	strb	r3, [r7, #21]
 8002bf4:	2305      	movs	r3, #5
 8002bf6:	753b      	strb	r3, [r7, #20]
 8002bf8:	e051      	b.n	8002c9e <ft5336_TS_GetXY+0x11e>
 8002bfa:	230a      	movs	r3, #10
 8002bfc:	75fb      	strb	r3, [r7, #23]
 8002bfe:	2309      	movs	r3, #9
 8002c00:	75bb      	strb	r3, [r7, #22]
 8002c02:	230c      	movs	r3, #12
 8002c04:	757b      	strb	r3, [r7, #21]
 8002c06:	230b      	movs	r3, #11
 8002c08:	753b      	strb	r3, [r7, #20]
 8002c0a:	e048      	b.n	8002c9e <ft5336_TS_GetXY+0x11e>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	75fb      	strb	r3, [r7, #23]
 8002c10:	230f      	movs	r3, #15
 8002c12:	75bb      	strb	r3, [r7, #22]
 8002c14:	2312      	movs	r3, #18
 8002c16:	757b      	strb	r3, [r7, #21]
 8002c18:	2311      	movs	r3, #17
 8002c1a:	753b      	strb	r3, [r7, #20]
 8002c1c:	e03f      	b.n	8002c9e <ft5336_TS_GetXY+0x11e>
 8002c1e:	2316      	movs	r3, #22
 8002c20:	75fb      	strb	r3, [r7, #23]
 8002c22:	2315      	movs	r3, #21
 8002c24:	75bb      	strb	r3, [r7, #22]
 8002c26:	2318      	movs	r3, #24
 8002c28:	757b      	strb	r3, [r7, #21]
 8002c2a:	2317      	movs	r3, #23
 8002c2c:	753b      	strb	r3, [r7, #20]
 8002c2e:	e036      	b.n	8002c9e <ft5336_TS_GetXY+0x11e>
 8002c30:	231c      	movs	r3, #28
 8002c32:	75fb      	strb	r3, [r7, #23]
 8002c34:	231b      	movs	r3, #27
 8002c36:	75bb      	strb	r3, [r7, #22]
 8002c38:	231e      	movs	r3, #30
 8002c3a:	757b      	strb	r3, [r7, #21]
 8002c3c:	231d      	movs	r3, #29
 8002c3e:	753b      	strb	r3, [r7, #20]
 8002c40:	e02d      	b.n	8002c9e <ft5336_TS_GetXY+0x11e>
 8002c42:	2322      	movs	r3, #34	@ 0x22
 8002c44:	75fb      	strb	r3, [r7, #23]
 8002c46:	2321      	movs	r3, #33	@ 0x21
 8002c48:	75bb      	strb	r3, [r7, #22]
 8002c4a:	2324      	movs	r3, #36	@ 0x24
 8002c4c:	757b      	strb	r3, [r7, #21]
 8002c4e:	2323      	movs	r3, #35	@ 0x23
 8002c50:	753b      	strb	r3, [r7, #20]
 8002c52:	e024      	b.n	8002c9e <ft5336_TS_GetXY+0x11e>
 8002c54:	2328      	movs	r3, #40	@ 0x28
 8002c56:	75fb      	strb	r3, [r7, #23]
 8002c58:	2327      	movs	r3, #39	@ 0x27
 8002c5a:	75bb      	strb	r3, [r7, #22]
 8002c5c:	232a      	movs	r3, #42	@ 0x2a
 8002c5e:	757b      	strb	r3, [r7, #21]
 8002c60:	2329      	movs	r3, #41	@ 0x29
 8002c62:	753b      	strb	r3, [r7, #20]
 8002c64:	e01b      	b.n	8002c9e <ft5336_TS_GetXY+0x11e>
 8002c66:	232e      	movs	r3, #46	@ 0x2e
 8002c68:	75fb      	strb	r3, [r7, #23]
 8002c6a:	232d      	movs	r3, #45	@ 0x2d
 8002c6c:	75bb      	strb	r3, [r7, #22]
 8002c6e:	2330      	movs	r3, #48	@ 0x30
 8002c70:	757b      	strb	r3, [r7, #21]
 8002c72:	232f      	movs	r3, #47	@ 0x2f
 8002c74:	753b      	strb	r3, [r7, #20]
 8002c76:	e012      	b.n	8002c9e <ft5336_TS_GetXY+0x11e>
 8002c78:	2334      	movs	r3, #52	@ 0x34
 8002c7a:	75fb      	strb	r3, [r7, #23]
 8002c7c:	2333      	movs	r3, #51	@ 0x33
 8002c7e:	75bb      	strb	r3, [r7, #22]
 8002c80:	2336      	movs	r3, #54	@ 0x36
 8002c82:	757b      	strb	r3, [r7, #21]
 8002c84:	2335      	movs	r3, #53	@ 0x35
 8002c86:	753b      	strb	r3, [r7, #20]
 8002c88:	e009      	b.n	8002c9e <ft5336_TS_GetXY+0x11e>
 8002c8a:	233a      	movs	r3, #58	@ 0x3a
 8002c8c:	75fb      	strb	r3, [r7, #23]
 8002c8e:	2339      	movs	r3, #57	@ 0x39
 8002c90:	75bb      	strb	r3, [r7, #22]
 8002c92:	233c      	movs	r3, #60	@ 0x3c
 8002c94:	757b      	strb	r3, [r7, #21]
 8002c96:	233b      	movs	r3, #59	@ 0x3b
 8002c98:	753b      	strb	r3, [r7, #20]
 8002c9a:	e000      	b.n	8002c9e <ft5336_TS_GetXY+0x11e>
 8002c9c:	bf00      	nop
 8002c9e:	89fb      	ldrh	r3, [r7, #14]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	7dfa      	ldrb	r2, [r7, #23]
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fb04 	bl	80032b4 <TS_IO_Read>
 8002cac:	4603      	mov	r3, r0
 8002cae:	74fb      	strb	r3, [r7, #19]
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b29      	ldr	r3, [pc, #164]	@ (8002d5c <ft5336_TS_GetXY+0x1dc>)
 8002cb8:	801a      	strh	r2, [r3, #0]
 8002cba:	89fb      	ldrh	r3, [r7, #14]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	7dba      	ldrb	r2, [r7, #22]
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 faf6 	bl	80032b4 <TS_IO_Read>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	74fb      	strb	r3, [r7, #19]
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	021b      	lsls	r3, r3, #8
 8002cd2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002cd6:	b21a      	sxth	r2, r3
 8002cd8:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <ft5336_TS_GetXY+0x1dc>)
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b21b      	sxth	r3, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d5c <ft5336_TS_GetXY+0x1dc>)
 8002ce6:	801a      	strh	r2, [r3, #0]
 8002ce8:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <ft5336_TS_GetXY+0x1dc>)
 8002cea:	881a      	ldrh	r2, [r3, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	801a      	strh	r2, [r3, #0]
 8002cf0:	89fb      	ldrh	r3, [r7, #14]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	7d7a      	ldrb	r2, [r7, #21]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fadb 	bl	80032b4 <TS_IO_Read>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	74fb      	strb	r3, [r7, #19]
 8002d02:	7cfb      	ldrb	r3, [r7, #19]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <ft5336_TS_GetXY+0x1dc>)
 8002d0a:	801a      	strh	r2, [r3, #0]
 8002d0c:	89fb      	ldrh	r3, [r7, #14]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	7d3a      	ldrb	r2, [r7, #20]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 facd 	bl	80032b4 <TS_IO_Read>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	74fb      	strb	r3, [r7, #19]
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	021b      	lsls	r3, r3, #8
 8002d24:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d28:	b21a      	sxth	r2, r3
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <ft5336_TS_GetXY+0x1dc>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b21b      	sxth	r3, r3
 8002d30:	4313      	orrs	r3, r2
 8002d32:	b21b      	sxth	r3, r3
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <ft5336_TS_GetXY+0x1dc>)
 8002d38:	801a      	strh	r2, [r3, #0]
 8002d3a:	4b08      	ldr	r3, [pc, #32]	@ (8002d5c <ft5336_TS_GetXY+0x1dc>)
 8002d3c:	881a      	ldrh	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	801a      	strh	r2, [r3, #0]
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <ft5336_TS_GetXY+0x1d8>)
 8002d44:	789b      	ldrb	r3, [r3, #2]
 8002d46:	3301      	adds	r3, #1
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	4b03      	ldr	r3, [pc, #12]	@ (8002d58 <ft5336_TS_GetXY+0x1d8>)
 8002d4c:	709a      	strb	r2, [r3, #2]
 8002d4e:	bf00      	nop
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20005224 	.word	0x20005224
 8002d5c:	20005228 	.word	0x20005228

08002d60 <ft5336_TS_EnableIT>:
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	2301      	movs	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	7bfa      	ldrb	r2, [r7, #15]
 8002d78:	21a4      	movs	r1, #164	@ 0xa4
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fa80 	bl	8003280 <TS_IO_Write>
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <ft5336_TS_DisableIT>:
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	80fb      	strh	r3, [r7, #6]
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	21a4      	movs	r1, #164	@ 0xa4
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 fa6c 	bl	8003280 <TS_IO_Write>
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <ft5336_TS_ITStatus>:
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	80fb      	strh	r3, [r7, #6]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <ft5336_TS_ClearIT>:
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	4603      	mov	r3, r0
 8002dd0:	80fb      	strh	r3, [r7, #6]
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <ft5336_TS_GetGestureID>:
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b084      	sub	sp, #16
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	6039      	str	r1, [r7, #0]
 8002de8:	80fb      	strh	r3, [r7, #6]
 8002dea:	2300      	movs	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2101      	movs	r1, #1
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fa5d 	bl	80032b4 <TS_IO_Read>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	bf00      	nop
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <ft5336_TS_GetTouchInfo>:
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	81fb      	strh	r3, [r7, #14]
 8002e20:	2300      	movs	r3, #0
 8002e22:	753b      	strb	r3, [r7, #20]
 8002e24:	2300      	movs	r3, #0
 8002e26:	75fb      	strb	r3, [r7, #23]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	75bb      	strb	r3, [r7, #22]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	757b      	strb	r3, [r7, #21]
 8002e30:	4b4d      	ldr	r3, [pc, #308]	@ (8002f68 <ft5336_TS_GetTouchInfo+0x158>)
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	461a      	mov	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	f080 8090 	bcs.w	8002f5e <ft5336_TS_GetTouchInfo+0x14e>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b09      	cmp	r3, #9
 8002e42:	d85d      	bhi.n	8002f00 <ft5336_TS_GetTouchInfo+0xf0>
 8002e44:	a201      	add	r2, pc, #4	@ (adr r2, 8002e4c <ft5336_TS_GetTouchInfo+0x3c>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e75 	.word	0x08002e75
 8002e50:	08002e83 	.word	0x08002e83
 8002e54:	08002e91 	.word	0x08002e91
 8002e58:	08002e9f 	.word	0x08002e9f
 8002e5c:	08002ead 	.word	0x08002ead
 8002e60:	08002ebb 	.word	0x08002ebb
 8002e64:	08002ec9 	.word	0x08002ec9
 8002e68:	08002ed7 	.word	0x08002ed7
 8002e6c:	08002ee5 	.word	0x08002ee5
 8002e70:	08002ef3 	.word	0x08002ef3
 8002e74:	2303      	movs	r3, #3
 8002e76:	75fb      	strb	r3, [r7, #23]
 8002e78:	2307      	movs	r3, #7
 8002e7a:	75bb      	strb	r3, [r7, #22]
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	757b      	strb	r3, [r7, #21]
 8002e80:	e03f      	b.n	8002f02 <ft5336_TS_GetTouchInfo+0xf2>
 8002e82:	2309      	movs	r3, #9
 8002e84:	75fb      	strb	r3, [r7, #23]
 8002e86:	230d      	movs	r3, #13
 8002e88:	75bb      	strb	r3, [r7, #22]
 8002e8a:	230e      	movs	r3, #14
 8002e8c:	757b      	strb	r3, [r7, #21]
 8002e8e:	e038      	b.n	8002f02 <ft5336_TS_GetTouchInfo+0xf2>
 8002e90:	230f      	movs	r3, #15
 8002e92:	75fb      	strb	r3, [r7, #23]
 8002e94:	2313      	movs	r3, #19
 8002e96:	75bb      	strb	r3, [r7, #22]
 8002e98:	2314      	movs	r3, #20
 8002e9a:	757b      	strb	r3, [r7, #21]
 8002e9c:	e031      	b.n	8002f02 <ft5336_TS_GetTouchInfo+0xf2>
 8002e9e:	2315      	movs	r3, #21
 8002ea0:	75fb      	strb	r3, [r7, #23]
 8002ea2:	2319      	movs	r3, #25
 8002ea4:	75bb      	strb	r3, [r7, #22]
 8002ea6:	231a      	movs	r3, #26
 8002ea8:	757b      	strb	r3, [r7, #21]
 8002eaa:	e02a      	b.n	8002f02 <ft5336_TS_GetTouchInfo+0xf2>
 8002eac:	231b      	movs	r3, #27
 8002eae:	75fb      	strb	r3, [r7, #23]
 8002eb0:	231f      	movs	r3, #31
 8002eb2:	75bb      	strb	r3, [r7, #22]
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	757b      	strb	r3, [r7, #21]
 8002eb8:	e023      	b.n	8002f02 <ft5336_TS_GetTouchInfo+0xf2>
 8002eba:	2321      	movs	r3, #33	@ 0x21
 8002ebc:	75fb      	strb	r3, [r7, #23]
 8002ebe:	2325      	movs	r3, #37	@ 0x25
 8002ec0:	75bb      	strb	r3, [r7, #22]
 8002ec2:	2326      	movs	r3, #38	@ 0x26
 8002ec4:	757b      	strb	r3, [r7, #21]
 8002ec6:	e01c      	b.n	8002f02 <ft5336_TS_GetTouchInfo+0xf2>
 8002ec8:	2327      	movs	r3, #39	@ 0x27
 8002eca:	75fb      	strb	r3, [r7, #23]
 8002ecc:	232b      	movs	r3, #43	@ 0x2b
 8002ece:	75bb      	strb	r3, [r7, #22]
 8002ed0:	232c      	movs	r3, #44	@ 0x2c
 8002ed2:	757b      	strb	r3, [r7, #21]
 8002ed4:	e015      	b.n	8002f02 <ft5336_TS_GetTouchInfo+0xf2>
 8002ed6:	232d      	movs	r3, #45	@ 0x2d
 8002ed8:	75fb      	strb	r3, [r7, #23]
 8002eda:	2331      	movs	r3, #49	@ 0x31
 8002edc:	75bb      	strb	r3, [r7, #22]
 8002ede:	2332      	movs	r3, #50	@ 0x32
 8002ee0:	757b      	strb	r3, [r7, #21]
 8002ee2:	e00e      	b.n	8002f02 <ft5336_TS_GetTouchInfo+0xf2>
 8002ee4:	2333      	movs	r3, #51	@ 0x33
 8002ee6:	75fb      	strb	r3, [r7, #23]
 8002ee8:	2337      	movs	r3, #55	@ 0x37
 8002eea:	75bb      	strb	r3, [r7, #22]
 8002eec:	2338      	movs	r3, #56	@ 0x38
 8002eee:	757b      	strb	r3, [r7, #21]
 8002ef0:	e007      	b.n	8002f02 <ft5336_TS_GetTouchInfo+0xf2>
 8002ef2:	2339      	movs	r3, #57	@ 0x39
 8002ef4:	75fb      	strb	r3, [r7, #23]
 8002ef6:	233d      	movs	r3, #61	@ 0x3d
 8002ef8:	75bb      	strb	r3, [r7, #22]
 8002efa:	233e      	movs	r3, #62	@ 0x3e
 8002efc:	757b      	strb	r3, [r7, #21]
 8002efe:	e000      	b.n	8002f02 <ft5336_TS_GetTouchInfo+0xf2>
 8002f00:	bf00      	nop
 8002f02:	89fb      	ldrh	r3, [r7, #14]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	7dfa      	ldrb	r2, [r7, #23]
 8002f08:	4611      	mov	r1, r2
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f9d2 	bl	80032b4 <TS_IO_Read>
 8002f10:	4603      	mov	r3, r0
 8002f12:	753b      	strb	r3, [r7, #20]
 8002f14:	7d3b      	ldrb	r3, [r7, #20]
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	119b      	asrs	r3, r3, #6
 8002f1a:	f003 0203 	and.w	r2, r3, #3
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	89fb      	ldrh	r3, [r7, #14]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	7dba      	ldrb	r2, [r7, #22]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 f9c2 	bl	80032b4 <TS_IO_Read>
 8002f30:	4603      	mov	r3, r0
 8002f32:	753b      	strb	r3, [r7, #20]
 8002f34:	7d3b      	ldrb	r3, [r7, #20]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	89fb      	ldrh	r3, [r7, #14]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	7d7a      	ldrb	r2, [r7, #21]
 8002f44:	4611      	mov	r1, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f9b4 	bl	80032b4 <TS_IO_Read>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	753b      	strb	r3, [r7, #20]
 8002f50:	7d3b      	ldrb	r3, [r7, #20]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	111b      	asrs	r3, r3, #4
 8002f56:	f003 0204 	and.w	r2, r3, #4
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	bf00      	nop
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20005224 	.word	0x20005224

08002f6c <ft5336_Get_I2C_InitializedStatus>:
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4b03      	ldr	r3, [pc, #12]	@ (8002f80 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20005224 	.word	0x20005224

08002f84 <ft5336_I2C_InitializeIfRequired>:
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	f7ff fff0 	bl	8002f6c <ft5336_Get_I2C_InitializedStatus>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d104      	bne.n	8002f9c <ft5336_I2C_InitializeIfRequired+0x18>
 8002f92:	f000 f96b 	bl	800326c <TS_IO_Init>
 8002f96:	4b02      	ldr	r3, [pc, #8]	@ (8002fa0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20005224 	.word	0x20005224

08002fa4 <ft5336_TS_Configure>:
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	80fb      	strh	r3, [r7, #6]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08c      	sub	sp, #48	@ 0x30
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a51      	ldr	r2, [pc, #324]	@ (8003110 <I2Cx_MspInit+0x150>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d14d      	bne.n	800306c <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002fd0:	4b50      	ldr	r3, [pc, #320]	@ (8003114 <I2Cx_MspInit+0x154>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	4a4f      	ldr	r2, [pc, #316]	@ (8003114 <I2Cx_MspInit+0x154>)
 8002fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002fda:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8003114 <I2Cx_MspInit+0x154>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002fe8:	2380      	movs	r3, #128	@ 0x80
 8002fea:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002fec:	2312      	movs	r3, #18
 8002fee:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ffc:	f107 031c 	add.w	r3, r7, #28
 8003000:	4619      	mov	r1, r3
 8003002:	4845      	ldr	r0, [pc, #276]	@ (8003118 <I2Cx_MspInit+0x158>)
 8003004:	f002 fa8a 	bl	800551c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003008:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800300c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800300e:	f107 031c 	add.w	r3, r7, #28
 8003012:	4619      	mov	r1, r3
 8003014:	4840      	ldr	r0, [pc, #256]	@ (8003118 <I2Cx_MspInit+0x158>)
 8003016:	f002 fa81 	bl	800551c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800301a:	4b3e      	ldr	r3, [pc, #248]	@ (8003114 <I2Cx_MspInit+0x154>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	4a3d      	ldr	r2, [pc, #244]	@ (8003114 <I2Cx_MspInit+0x154>)
 8003020:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003024:	6413      	str	r3, [r2, #64]	@ 0x40
 8003026:	4b3b      	ldr	r3, [pc, #236]	@ (8003114 <I2Cx_MspInit+0x154>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003032:	4b38      	ldr	r3, [pc, #224]	@ (8003114 <I2Cx_MspInit+0x154>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	4a37      	ldr	r2, [pc, #220]	@ (8003114 <I2Cx_MspInit+0x154>)
 8003038:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800303c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800303e:	4b35      	ldr	r3, [pc, #212]	@ (8003114 <I2Cx_MspInit+0x154>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	4a34      	ldr	r2, [pc, #208]	@ (8003114 <I2Cx_MspInit+0x154>)
 8003044:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003048:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	210f      	movs	r1, #15
 800304e:	2048      	movs	r0, #72	@ 0x48
 8003050:	f001 fde3 	bl	8004c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003054:	2048      	movs	r0, #72	@ 0x48
 8003056:	f001 fdfc 	bl	8004c52 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	210f      	movs	r1, #15
 800305e:	2049      	movs	r0, #73	@ 0x49
 8003060:	f001 fddb 	bl	8004c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003064:	2049      	movs	r0, #73	@ 0x49
 8003066:	f001 fdf4 	bl	8004c52 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800306a:	e04d      	b.n	8003108 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800306c:	4b29      	ldr	r3, [pc, #164]	@ (8003114 <I2Cx_MspInit+0x154>)
 800306e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003070:	4a28      	ldr	r2, [pc, #160]	@ (8003114 <I2Cx_MspInit+0x154>)
 8003072:	f043 0302 	orr.w	r3, r3, #2
 8003076:	6313      	str	r3, [r2, #48]	@ 0x30
 8003078:	4b26      	ldr	r3, [pc, #152]	@ (8003114 <I2Cx_MspInit+0x154>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003084:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003088:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800308a:	2312      	movs	r3, #18
 800308c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003092:	2302      	movs	r3, #2
 8003094:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8003096:	2304      	movs	r3, #4
 8003098:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800309a:	f107 031c 	add.w	r3, r7, #28
 800309e:	4619      	mov	r1, r3
 80030a0:	481e      	ldr	r0, [pc, #120]	@ (800311c <I2Cx_MspInit+0x15c>)
 80030a2:	f002 fa3b 	bl	800551c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80030a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80030ac:	f107 031c 	add.w	r3, r7, #28
 80030b0:	4619      	mov	r1, r3
 80030b2:	481a      	ldr	r0, [pc, #104]	@ (800311c <I2Cx_MspInit+0x15c>)
 80030b4:	f002 fa32 	bl	800551c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80030b8:	4b16      	ldr	r3, [pc, #88]	@ (8003114 <I2Cx_MspInit+0x154>)
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	4a15      	ldr	r2, [pc, #84]	@ (8003114 <I2Cx_MspInit+0x154>)
 80030be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80030c4:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <I2Cx_MspInit+0x154>)
 80030c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80030d0:	4b10      	ldr	r3, [pc, #64]	@ (8003114 <I2Cx_MspInit+0x154>)
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003114 <I2Cx_MspInit+0x154>)
 80030d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80030da:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80030dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <I2Cx_MspInit+0x154>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4a0c      	ldr	r2, [pc, #48]	@ (8003114 <I2Cx_MspInit+0x154>)
 80030e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80030e6:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80030e8:	2200      	movs	r2, #0
 80030ea:	210f      	movs	r1, #15
 80030ec:	201f      	movs	r0, #31
 80030ee:	f001 fd94 	bl	8004c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80030f2:	201f      	movs	r0, #31
 80030f4:	f001 fdad 	bl	8004c52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80030f8:	2200      	movs	r2, #0
 80030fa:	210f      	movs	r1, #15
 80030fc:	2020      	movs	r0, #32
 80030fe:	f001 fd8c 	bl	8004c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8003102:	2020      	movs	r0, #32
 8003104:	f001 fda5 	bl	8004c52 <HAL_NVIC_EnableIRQ>
}
 8003108:	bf00      	nop
 800310a:	3730      	adds	r7, #48	@ 0x30
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	2000522c 	.word	0x2000522c
 8003114:	40023800 	.word	0x40023800
 8003118:	40021c00 	.word	0x40021c00
 800311c:	40020400 	.word	0x40020400

08003120 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f002 ffc3 	bl	80060b4 <HAL_I2C_GetState>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d125      	bne.n	8003180 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a14      	ldr	r2, [pc, #80]	@ (8003188 <I2Cx_Init+0x68>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d103      	bne.n	8003144 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a13      	ldr	r2, [pc, #76]	@ (800318c <I2Cx_Init+0x6c>)
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	e002      	b.n	800314a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a12      	ldr	r2, [pc, #72]	@ (8003190 <I2Cx_Init+0x70>)
 8003148:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a11      	ldr	r2, [pc, #68]	@ (8003194 <I2Cx_Init+0x74>)
 800314e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff ff23 	bl	8002fc0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f002 fca0 	bl	8005ac0 <HAL_I2C_Init>
  }
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	2000522c 	.word	0x2000522c
 800318c:	40005c00 	.word	0x40005c00
 8003190:	40005400 	.word	0x40005400
 8003194:	40912732 	.word	0x40912732

08003198 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	@ 0x28
 800319c:	af04      	add	r7, sp, #16
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	4608      	mov	r0, r1
 80031a2:	4611      	mov	r1, r2
 80031a4:	461a      	mov	r2, r3
 80031a6:	4603      	mov	r3, r0
 80031a8:	72fb      	strb	r3, [r7, #11]
 80031aa:	460b      	mov	r3, r1
 80031ac:	813b      	strh	r3, [r7, #8]
 80031ae:	4613      	mov	r3, r2
 80031b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80031b6:	7afb      	ldrb	r3, [r7, #11]
 80031b8:	b299      	uxth	r1, r3
 80031ba:	88f8      	ldrh	r0, [r7, #6]
 80031bc:	893a      	ldrh	r2, [r7, #8]
 80031be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031c2:	9302      	str	r3, [sp, #8]
 80031c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	4603      	mov	r3, r0
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f002 fe56 	bl	8005e80 <HAL_I2C_Mem_Read>
 80031d4:	4603      	mov	r3, r0
 80031d6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d004      	beq.n	80031e8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80031de:	7afb      	ldrb	r3, [r7, #11]
 80031e0:	4619      	mov	r1, r3
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f832 	bl	800324c <I2Cx_Error>
  }
  return status;    
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b08a      	sub	sp, #40	@ 0x28
 80031f6:	af04      	add	r7, sp, #16
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	4608      	mov	r0, r1
 80031fc:	4611      	mov	r1, r2
 80031fe:	461a      	mov	r2, r3
 8003200:	4603      	mov	r3, r0
 8003202:	72fb      	strb	r3, [r7, #11]
 8003204:	460b      	mov	r3, r1
 8003206:	813b      	strh	r3, [r7, #8]
 8003208:	4613      	mov	r3, r2
 800320a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003210:	7afb      	ldrb	r3, [r7, #11]
 8003212:	b299      	uxth	r1, r3
 8003214:	88f8      	ldrh	r0, [r7, #6]
 8003216:	893a      	ldrh	r2, [r7, #8]
 8003218:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800321c:	9302      	str	r3, [sp, #8]
 800321e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	4603      	mov	r3, r0
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f002 fd15 	bl	8005c58 <HAL_I2C_Mem_Write>
 800322e:	4603      	mov	r3, r0
 8003230:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003232:	7dfb      	ldrb	r3, [r7, #23]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003238:	7afb      	ldrb	r3, [r7, #11]
 800323a:	4619      	mov	r1, r3
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f805 	bl	800324c <I2Cx_Error>
  }
  return status;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f002 fccd 	bl	8005bf8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ff5e 	bl	8003120 <I2Cx_Init>
}
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003270:	4802      	ldr	r0, [pc, #8]	@ (800327c <TS_IO_Init+0x10>)
 8003272:	f7ff ff55 	bl	8003120 <I2Cx_Init>
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	2000522c 	.word	0x2000522c

08003280 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af02      	add	r7, sp, #8
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
 800328a:	460b      	mov	r3, r1
 800328c:	71bb      	strb	r3, [r7, #6]
 800328e:	4613      	mov	r3, r2
 8003290:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003292:	79bb      	ldrb	r3, [r7, #6]
 8003294:	b29a      	uxth	r2, r3
 8003296:	79f9      	ldrb	r1, [r7, #7]
 8003298:	2301      	movs	r3, #1
 800329a:	9301      	str	r3, [sp, #4]
 800329c:	1d7b      	adds	r3, r7, #5
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	2301      	movs	r3, #1
 80032a2:	4803      	ldr	r0, [pc, #12]	@ (80032b0 <TS_IO_Write+0x30>)
 80032a4:	f7ff ffa5 	bl	80031f2 <I2Cx_WriteMultiple>
}
 80032a8:	bf00      	nop
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000522c 	.word	0x2000522c

080032b4 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	4603      	mov	r3, r0
 80032bc:	460a      	mov	r2, r1
 80032be:	71fb      	strb	r3, [r7, #7]
 80032c0:	4613      	mov	r3, r2
 80032c2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80032c8:	79bb      	ldrb	r3, [r7, #6]
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	79f9      	ldrb	r1, [r7, #7]
 80032ce:	2301      	movs	r3, #1
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	f107 030f 	add.w	r3, r7, #15
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	2301      	movs	r3, #1
 80032da:	4804      	ldr	r0, [pc, #16]	@ (80032ec <TS_IO_Read+0x38>)
 80032dc:	f7ff ff5c 	bl	8003198 <I2Cx_ReadMultiple>

  return read_value;
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000522c 	.word	0x2000522c

080032f0 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f001 fb8f 	bl	8004a1c <HAL_Delay>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 800330c:	4b31      	ldr	r3, [pc, #196]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 800330e:	2228      	movs	r2, #40	@ 0x28
 8003310:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8003312:	4b30      	ldr	r3, [pc, #192]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 8003314:	2209      	movs	r2, #9
 8003316:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003318:	4b2e      	ldr	r3, [pc, #184]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 800331a:	2235      	movs	r2, #53	@ 0x35
 800331c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800331e:	4b2d      	ldr	r3, [pc, #180]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 8003320:	220b      	movs	r2, #11
 8003322:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003324:	4b2b      	ldr	r3, [pc, #172]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 8003326:	f240 121b 	movw	r2, #283	@ 0x11b
 800332a:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800332c:	4b29      	ldr	r3, [pc, #164]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 800332e:	f240 2215 	movw	r2, #533	@ 0x215
 8003332:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003334:	4b27      	ldr	r3, [pc, #156]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 8003336:	f240 121d 	movw	r2, #285	@ 0x11d
 800333a:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 800333c:	4b25      	ldr	r3, [pc, #148]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 800333e:	f240 2235 	movw	r2, #565	@ 0x235
 8003342:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003344:	2100      	movs	r1, #0
 8003346:	4823      	ldr	r0, [pc, #140]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 8003348:	f000 fd6a 	bl	8003e20 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 800334c:	4b21      	ldr	r3, [pc, #132]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 800334e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003352:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003354:	4b1f      	ldr	r3, [pc, #124]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 8003356:	f44f 7288 	mov.w	r2, #272	@ 0x110
 800335a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 800335c:	4b1d      	ldr	r3, [pc, #116]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003364:	4b1b      	ldr	r3, [pc, #108]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 800336c:	4b19      	ldr	r3, [pc, #100]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003374:	4b17      	ldr	r3, [pc, #92]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 8003376:	2200      	movs	r2, #0
 8003378:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800337a:	4b16      	ldr	r3, [pc, #88]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 800337c:	2200      	movs	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003380:	4b14      	ldr	r3, [pc, #80]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 8003382:	2200      	movs	r2, #0
 8003384:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003386:	4b13      	ldr	r3, [pc, #76]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 8003388:	2200      	movs	r2, #0
 800338a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 800338c:	4b11      	ldr	r3, [pc, #68]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 800338e:	4a12      	ldr	r2, [pc, #72]	@ (80033d8 <BSP_LCD_Init+0xd0>)
 8003390:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003392:	4810      	ldr	r0, [pc, #64]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 8003394:	f003 fb04 	bl	80069a0 <HAL_LTDC_GetState>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800339e:	2100      	movs	r1, #0
 80033a0:	480c      	ldr	r0, [pc, #48]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 80033a2:	f000 fc63 	bl	8003c6c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80033a6:	480b      	ldr	r0, [pc, #44]	@ (80033d4 <BSP_LCD_Init+0xcc>)
 80033a8:	f003 f9ec 	bl	8006784 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80033ac:	2201      	movs	r2, #1
 80033ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80033b2:	480a      	ldr	r0, [pc, #40]	@ (80033dc <BSP_LCD_Init+0xd4>)
 80033b4:	f002 fb6a 	bl	8005a8c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80033b8:	2201      	movs	r2, #1
 80033ba:	2108      	movs	r1, #8
 80033bc:	4808      	ldr	r0, [pc, #32]	@ (80033e0 <BSP_LCD_Init+0xd8>)
 80033be:	f002 fb65 	bl	8005a8c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80033c2:	f000 fe91 	bl	80040e8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80033c6:	4807      	ldr	r0, [pc, #28]	@ (80033e4 <BSP_LCD_Init+0xdc>)
 80033c8:	f000 f916 	bl	80035f8 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20005280 	.word	0x20005280
 80033d8:	40016800 	.word	0x40016800
 80033dc:	40022000 	.word	0x40022000
 80033e0:	40022800 	.word	0x40022800
 80033e4:	20004ea8 	.word	0x20004ea8

080033e8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80033ec:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <BSP_LCD_GetXSize+0x20>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a06      	ldr	r2, [pc, #24]	@ (800340c <BSP_LCD_GetXSize+0x24>)
 80033f2:	2134      	movs	r1, #52	@ 0x34
 80033f4:	fb01 f303 	mul.w	r3, r1, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	3360      	adds	r3, #96	@ 0x60
 80033fc:	681b      	ldr	r3, [r3, #0]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	20005368 	.word	0x20005368
 800340c:	20005280 	.word	0x20005280

08003410 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8003414:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <BSP_LCD_GetYSize+0x20>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a06      	ldr	r2, [pc, #24]	@ (8003434 <BSP_LCD_GetYSize+0x24>)
 800341a:	2134      	movs	r1, #52	@ 0x34
 800341c:	fb01 f303 	mul.w	r3, r1, r3
 8003420:	4413      	add	r3, r2
 8003422:	3364      	adds	r3, #100	@ 0x64
 8003424:	681b      	ldr	r3, [r3, #0]
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	20005368 	.word	0x20005368
 8003434:	20005280 	.word	0x20005280

08003438 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003438:	b580      	push	{r7, lr}
 800343a:	b090      	sub	sp, #64	@ 0x40
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003448:	f7ff ffce 	bl	80033e8 <BSP_LCD_GetXSize>
 800344c:	4603      	mov	r3, r0
 800344e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003454:	f7ff ffdc 	bl	8003410 <BSP_LCD_GetYSize>
 8003458:	4603      	mov	r3, r0
 800345a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800345c:	2300      	movs	r3, #0
 800345e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8003464:	23ff      	movs	r3, #255	@ 0xff
 8003466:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003472:	2300      	movs	r3, #0
 8003474:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800347e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003482:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003484:	2307      	movs	r3, #7
 8003486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003488:	f7ff ffae 	bl	80033e8 <BSP_LCD_GetXSize>
 800348c:	4603      	mov	r3, r0
 800348e:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003490:	f7ff ffbe 	bl	8003410 <BSP_LCD_GetYSize>
 8003494:	4603      	mov	r3, r0
 8003496:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003498:	88fa      	ldrh	r2, [r7, #6]
 800349a:	f107 030c 	add.w	r3, r7, #12
 800349e:	4619      	mov	r1, r3
 80034a0:	4812      	ldr	r0, [pc, #72]	@ (80034ec <BSP_LCD_LayerDefaultInit+0xb4>)
 80034a2:	f003 fa3f 	bl	8006924 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	4911      	ldr	r1, [pc, #68]	@ (80034f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80034aa:	4613      	mov	r3, r2
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	3304      	adds	r3, #4
 80034b6:	f04f 32ff 	mov.w	r2, #4294967295
 80034ba:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80034bc:	88fa      	ldrh	r2, [r7, #6]
 80034be:	490c      	ldr	r1, [pc, #48]	@ (80034f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80034c0:	4613      	mov	r3, r2
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	3308      	adds	r3, #8
 80034cc:	4a09      	ldr	r2, [pc, #36]	@ (80034f4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80034ce:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80034d0:	88fa      	ldrh	r2, [r7, #6]
 80034d2:	4907      	ldr	r1, [pc, #28]	@ (80034f0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80034d4:	4613      	mov	r3, r2
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80034e2:	601a      	str	r2, [r3, #0]
}
 80034e4:	bf00      	nop
 80034e6:	3740      	adds	r7, #64	@ 0x40
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20005280 	.word	0x20005280
 80034f0:	2000536c 	.word	0x2000536c
 80034f4:	20004ea8 	.word	0x20004ea8

080034f8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003500:	4a04      	ldr	r2, [pc, #16]	@ (8003514 <BSP_LCD_SelectLayer+0x1c>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6013      	str	r3, [r2, #0]
} 
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20005368 	.word	0x20005368

08003518 <BSP_LCD_SetLayerVisible>:
  *            @arg  ENABLE
  *            @arg  DISABLE 
  * @retval None
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState State)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	70fb      	strb	r3, [r7, #3]
  if(State == ENABLE)
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d112      	bne.n	8003550 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&hLtdcHandler, LayerIndex);
 800352a:	4b19      	ldr	r3, [pc, #100]	@ (8003590 <BSP_LCD_SetLayerVisible+0x78>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	01db      	lsls	r3, r3, #7
 8003534:	4413      	add	r3, r2
 8003536:	3384      	adds	r3, #132	@ 0x84
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a15      	ldr	r2, [pc, #84]	@ (8003590 <BSP_LCD_SetLayerVisible+0x78>)
 800353c:	6812      	ldr	r2, [r2, #0]
 800353e:	4611      	mov	r1, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	01d2      	lsls	r2, r2, #7
 8003544:	440a      	add	r2, r1
 8003546:	3284      	adds	r2, #132	@ 0x84
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e011      	b.n	8003574 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&hLtdcHandler, LayerIndex);
 8003550:	4b0f      	ldr	r3, [pc, #60]	@ (8003590 <BSP_LCD_SetLayerVisible+0x78>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	01db      	lsls	r3, r3, #7
 800355a:	4413      	add	r3, r2
 800355c:	3384      	adds	r3, #132	@ 0x84
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0b      	ldr	r2, [pc, #44]	@ (8003590 <BSP_LCD_SetLayerVisible+0x78>)
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	4611      	mov	r1, r2
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	01d2      	lsls	r2, r2, #7
 800356a:	440a      	add	r2, r1
 800356c:	3284      	adds	r2, #132	@ 0x84
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&hLtdcHandler);
 8003574:	4b06      	ldr	r3, [pc, #24]	@ (8003590 <BSP_LCD_SetLayerVisible+0x78>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800357a:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <BSP_LCD_SetLayerVisible+0x78>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f042 0201 	orr.w	r2, r2, #1
 8003582:	625a      	str	r2, [r3, #36]	@ 0x24
} 
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	20005280 	.word	0x20005280

08003594 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800359c:	4b07      	ldr	r3, [pc, #28]	@ (80035bc <BSP_LCD_SetTextColor+0x28>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4907      	ldr	r1, [pc, #28]	@ (80035c0 <BSP_LCD_SetTextColor+0x2c>)
 80035a2:	4613      	mov	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	601a      	str	r2, [r3, #0]
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	20005368 	.word	0x20005368
 80035c0:	2000536c 	.word	0x2000536c

080035c4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80035cc:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <BSP_LCD_SetBackColor+0x2c>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4908      	ldr	r1, [pc, #32]	@ (80035f4 <BSP_LCD_SetBackColor+0x30>)
 80035d2:	4613      	mov	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3304      	adds	r3, #4
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	20005368 	.word	0x20005368
 80035f4:	2000536c 	.word	0x2000536c

080035f8 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003600:	4b08      	ldr	r3, [pc, #32]	@ (8003624 <BSP_LCD_SetFont+0x2c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4908      	ldr	r1, [pc, #32]	@ (8003628 <BSP_LCD_SetFont+0x30>)
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	3308      	adds	r3, #8
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	601a      	str	r2, [r3, #0]
}
 8003616:	bf00      	nop
 8003618:	370c      	adds	r7, #12
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	20005368 	.word	0x20005368
 8003628:	2000536c 	.word	0x2000536c

0800362c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800362c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800362e:	b085      	sub	sp, #20
 8003630:	af02      	add	r7, sp, #8
 8003632:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003634:	4b0f      	ldr	r3, [pc, #60]	@ (8003674 <BSP_LCD_Clear+0x48>)
 8003636:	681c      	ldr	r4, [r3, #0]
 8003638:	4b0e      	ldr	r3, [pc, #56]	@ (8003674 <BSP_LCD_Clear+0x48>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0e      	ldr	r2, [pc, #56]	@ (8003678 <BSP_LCD_Clear+0x4c>)
 800363e:	2134      	movs	r1, #52	@ 0x34
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	335c      	adds	r3, #92	@ 0x5c
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461e      	mov	r6, r3
 800364c:	f7ff fecc 	bl	80033e8 <BSP_LCD_GetXSize>
 8003650:	4605      	mov	r5, r0
 8003652:	f7ff fedd 	bl	8003410 <BSP_LCD_GetYSize>
 8003656:	4602      	mov	r2, r0
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	2300      	movs	r3, #0
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	4613      	mov	r3, r2
 8003662:	462a      	mov	r2, r5
 8003664:	4631      	mov	r1, r6
 8003666:	4620      	mov	r0, r4
 8003668:	f000 fcae 	bl	8003fc8 <LL_FillBuffer>
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003674:	20005368 	.word	0x20005368
 8003678:	20005280 	.word	0x20005280

0800367c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800367c:	b590      	push	{r4, r7, lr}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	80fb      	strh	r3, [r7, #6]
 8003686:	460b      	mov	r3, r1
 8003688:	80bb      	strh	r3, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800368e:	4b1b      	ldr	r3, [pc, #108]	@ (80036fc <BSP_LCD_DisplayChar+0x80>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	491b      	ldr	r1, [pc, #108]	@ (8003700 <BSP_LCD_DisplayChar+0x84>)
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	3308      	adds	r3, #8
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80036aa:	4b14      	ldr	r3, [pc, #80]	@ (80036fc <BSP_LCD_DisplayChar+0x80>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4c14      	ldr	r4, [pc, #80]	@ (8003700 <BSP_LCD_DisplayChar+0x84>)
 80036b0:	4613      	mov	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4423      	add	r3, r4
 80036ba:	3308      	adds	r3, #8
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80036c0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80036c4:	4b0d      	ldr	r3, [pc, #52]	@ (80036fc <BSP_LCD_DisplayChar+0x80>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4c0d      	ldr	r4, [pc, #52]	@ (8003700 <BSP_LCD_DisplayChar+0x84>)
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4423      	add	r3, r4
 80036d4:	3308      	adds	r3, #8
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	889b      	ldrh	r3, [r3, #4]
 80036da:	3307      	adds	r3, #7
 80036dc:	2b00      	cmp	r3, #0
 80036de:	da00      	bge.n	80036e2 <BSP_LCD_DisplayChar+0x66>
 80036e0:	3307      	adds	r3, #7
 80036e2:	10db      	asrs	r3, r3, #3
 80036e4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80036e8:	18ca      	adds	r2, r1, r3
 80036ea:	88b9      	ldrh	r1, [r7, #4]
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fbb2 	bl	8003e58 <DrawChar>
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd90      	pop	{r4, r7, pc}
 80036fc:	20005368 	.word	0x20005368
 8003700:	2000536c 	.word	0x2000536c

08003704 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003704:	b5b0      	push	{r4, r5, r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	60ba      	str	r2, [r7, #8]
 800370c:	461a      	mov	r2, r3
 800370e:	4603      	mov	r3, r0
 8003710:	81fb      	strh	r3, [r7, #14]
 8003712:	460b      	mov	r3, r1
 8003714:	81bb      	strh	r3, [r7, #12]
 8003716:	4613      	mov	r3, r2
 8003718:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800371a:	2301      	movs	r3, #1
 800371c:	83fb      	strh	r3, [r7, #30]
 800371e:	2300      	movs	r3, #0
 8003720:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003722:	2300      	movs	r3, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	2300      	movs	r3, #0
 8003728:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800372e:	e002      	b.n	8003736 <BSP_LCD_DisplayStringAt+0x32>
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	3301      	adds	r3, #1
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	617a      	str	r2, [r7, #20]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f6      	bne.n	8003730 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003742:	f7ff fe51 	bl	80033e8 <BSP_LCD_GetXSize>
 8003746:	4601      	mov	r1, r0
 8003748:	4b50      	ldr	r3, [pc, #320]	@ (800388c <BSP_LCD_DisplayStringAt+0x188>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4850      	ldr	r0, [pc, #320]	@ (8003890 <BSP_LCD_DisplayStringAt+0x18c>)
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4403      	add	r3, r0
 8003758:	3308      	adds	r3, #8
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	889b      	ldrh	r3, [r3, #4]
 800375e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003762:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	2b03      	cmp	r3, #3
 8003768:	d01c      	beq.n	80037a4 <BSP_LCD_DisplayStringAt+0xa0>
 800376a:	2b03      	cmp	r3, #3
 800376c:	dc33      	bgt.n	80037d6 <BSP_LCD_DisplayStringAt+0xd2>
 800376e:	2b01      	cmp	r3, #1
 8003770:	d002      	beq.n	8003778 <BSP_LCD_DisplayStringAt+0x74>
 8003772:	2b02      	cmp	r3, #2
 8003774:	d019      	beq.n	80037aa <BSP_LCD_DisplayStringAt+0xa6>
 8003776:	e02e      	b.n	80037d6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	1ad1      	subs	r1, r2, r3
 800377e:	4b43      	ldr	r3, [pc, #268]	@ (800388c <BSP_LCD_DisplayStringAt+0x188>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4843      	ldr	r0, [pc, #268]	@ (8003890 <BSP_LCD_DisplayStringAt+0x18c>)
 8003784:	4613      	mov	r3, r2
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4403      	add	r3, r0
 800378e:	3308      	adds	r3, #8
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	889b      	ldrh	r3, [r3, #4]
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	89fb      	ldrh	r3, [r7, #14]
 800379e:	4413      	add	r3, r2
 80037a0:	83fb      	strh	r3, [r7, #30]
      break;
 80037a2:	e01b      	b.n	80037dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80037a4:	89fb      	ldrh	r3, [r7, #14]
 80037a6:	83fb      	strh	r3, [r7, #30]
      break;
 80037a8:	e018      	b.n	80037dc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	b299      	uxth	r1, r3
 80037b2:	4b36      	ldr	r3, [pc, #216]	@ (800388c <BSP_LCD_DisplayStringAt+0x188>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4836      	ldr	r0, [pc, #216]	@ (8003890 <BSP_LCD_DisplayStringAt+0x18c>)
 80037b8:	4613      	mov	r3, r2
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4403      	add	r3, r0
 80037c2:	3308      	adds	r3, #8
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	889b      	ldrh	r3, [r3, #4]
 80037c8:	fb11 f303 	smulbb	r3, r1, r3
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	89fb      	ldrh	r3, [r7, #14]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	83fb      	strh	r3, [r7, #30]
      break;
 80037d4:	e002      	b.n	80037dc <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80037d6:	89fb      	ldrh	r3, [r7, #14]
 80037d8:	83fb      	strh	r3, [r7, #30]
      break;
 80037da:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80037dc:	8bfb      	ldrh	r3, [r7, #30]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <BSP_LCD_DisplayStringAt+0xe6>
 80037e2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da1d      	bge.n	8003826 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80037ea:	2301      	movs	r3, #1
 80037ec:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80037ee:	e01a      	b.n	8003826 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781a      	ldrb	r2, [r3, #0]
 80037f4:	89b9      	ldrh	r1, [r7, #12]
 80037f6:	8bfb      	ldrh	r3, [r7, #30]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff ff3f 	bl	800367c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80037fe:	4b23      	ldr	r3, [pc, #140]	@ (800388c <BSP_LCD_DisplayStringAt+0x188>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4923      	ldr	r1, [pc, #140]	@ (8003890 <BSP_LCD_DisplayStringAt+0x18c>)
 8003804:	4613      	mov	r3, r2
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	440b      	add	r3, r1
 800380e:	3308      	adds	r3, #8
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	889a      	ldrh	r2, [r3, #4]
 8003814:	8bfb      	ldrh	r3, [r7, #30]
 8003816:	4413      	add	r3, r2
 8003818:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	3301      	adds	r3, #1
 800381e:	60bb      	str	r3, [r7, #8]
    i++;
 8003820:	8bbb      	ldrh	r3, [r7, #28]
 8003822:	3301      	adds	r3, #1
 8003824:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	bf14      	ite	ne
 800382e:	2301      	movne	r3, #1
 8003830:	2300      	moveq	r3, #0
 8003832:	b2dc      	uxtb	r4, r3
 8003834:	f7ff fdd8 	bl	80033e8 <BSP_LCD_GetXSize>
 8003838:	8bb9      	ldrh	r1, [r7, #28]
 800383a:	4b14      	ldr	r3, [pc, #80]	@ (800388c <BSP_LCD_DisplayStringAt+0x188>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4d14      	ldr	r5, [pc, #80]	@ (8003890 <BSP_LCD_DisplayStringAt+0x18c>)
 8003840:	4613      	mov	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	4413      	add	r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	442b      	add	r3, r5
 800384a:	3308      	adds	r3, #8
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	889b      	ldrh	r3, [r3, #4]
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	1ac3      	subs	r3, r0, r3
 8003856:	b299      	uxth	r1, r3
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <BSP_LCD_DisplayStringAt+0x188>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	480c      	ldr	r0, [pc, #48]	@ (8003890 <BSP_LCD_DisplayStringAt+0x18c>)
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4403      	add	r3, r0
 8003868:	3308      	adds	r3, #8
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	889b      	ldrh	r3, [r3, #4]
 800386e:	4299      	cmp	r1, r3
 8003870:	bf2c      	ite	cs
 8003872:	2301      	movcs	r3, #1
 8003874:	2300      	movcc	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	4023      	ands	r3, r4
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1b7      	bne.n	80037f0 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	3720      	adds	r7, #32
 8003886:	46bd      	mov	sp, r7
 8003888:	bdb0      	pop	{r4, r5, r7, pc}
 800388a:	bf00      	nop
 800388c:	20005368 	.word	0x20005368
 8003890:	2000536c 	.word	0x2000536c

08003894 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003894:	b5b0      	push	{r4, r5, r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af02      	add	r7, sp, #8
 800389a:	4603      	mov	r3, r0
 800389c:	80fb      	strh	r3, [r7, #6]
 800389e:	460b      	mov	r3, r1
 80038a0:	80bb      	strh	r3, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80038aa:	4b26      	ldr	r3, [pc, #152]	@ (8003944 <BSP_LCD_DrawHLine+0xb0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a26      	ldr	r2, [pc, #152]	@ (8003948 <BSP_LCD_DrawHLine+0xb4>)
 80038b0:	2134      	movs	r1, #52	@ 0x34
 80038b2:	fb01 f303 	mul.w	r3, r1, r3
 80038b6:	4413      	add	r3, r2
 80038b8:	3348      	adds	r3, #72	@ 0x48
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d114      	bne.n	80038ea <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80038c0:	4b20      	ldr	r3, [pc, #128]	@ (8003944 <BSP_LCD_DrawHLine+0xb0>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a20      	ldr	r2, [pc, #128]	@ (8003948 <BSP_LCD_DrawHLine+0xb4>)
 80038c6:	2134      	movs	r1, #52	@ 0x34
 80038c8:	fb01 f303 	mul.w	r3, r1, r3
 80038cc:	4413      	add	r3, r2
 80038ce:	335c      	adds	r3, #92	@ 0x5c
 80038d0:	681c      	ldr	r4, [r3, #0]
 80038d2:	f7ff fd89 	bl	80033e8 <BSP_LCD_GetXSize>
 80038d6:	4602      	mov	r2, r0
 80038d8:	88bb      	ldrh	r3, [r7, #4]
 80038da:	fb03 f202 	mul.w	r2, r3, r2
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	4413      	add	r3, r2
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	4423      	add	r3, r4
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e013      	b.n	8003912 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80038ea:	4b16      	ldr	r3, [pc, #88]	@ (8003944 <BSP_LCD_DrawHLine+0xb0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a16      	ldr	r2, [pc, #88]	@ (8003948 <BSP_LCD_DrawHLine+0xb4>)
 80038f0:	2134      	movs	r1, #52	@ 0x34
 80038f2:	fb01 f303 	mul.w	r3, r1, r3
 80038f6:	4413      	add	r3, r2
 80038f8:	335c      	adds	r3, #92	@ 0x5c
 80038fa:	681c      	ldr	r4, [r3, #0]
 80038fc:	f7ff fd74 	bl	80033e8 <BSP_LCD_GetXSize>
 8003900:	4602      	mov	r2, r0
 8003902:	88bb      	ldrh	r3, [r7, #4]
 8003904:	fb03 f202 	mul.w	r2, r3, r2
 8003908:	88fb      	ldrh	r3, [r7, #6]
 800390a:	4413      	add	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4423      	add	r3, r4
 8003910:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003912:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <BSP_LCD_DrawHLine+0xb0>)
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	887c      	ldrh	r4, [r7, #2]
 800391a:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <BSP_LCD_DrawHLine+0xb0>)
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4d0b      	ldr	r5, [pc, #44]	@ (800394c <BSP_LCD_DrawHLine+0xb8>)
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	442b      	add	r3, r5
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	9301      	str	r3, [sp, #4]
 800392e:	2300      	movs	r3, #0
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	2301      	movs	r3, #1
 8003934:	4622      	mov	r2, r4
 8003936:	f000 fb47 	bl	8003fc8 <LL_FillBuffer>
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bdb0      	pop	{r4, r5, r7, pc}
 8003942:	bf00      	nop
 8003944:	20005368 	.word	0x20005368
 8003948:	20005280 	.word	0x20005280
 800394c:	2000536c 	.word	0x2000536c

08003950 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003950:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003952:	b087      	sub	sp, #28
 8003954:	af02      	add	r7, sp, #8
 8003956:	4603      	mov	r3, r0
 8003958:	80fb      	strh	r3, [r7, #6]
 800395a:	460b      	mov	r3, r1
 800395c:	80bb      	strh	r3, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003966:	4b28      	ldr	r3, [pc, #160]	@ (8003a08 <BSP_LCD_DrawVLine+0xb8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a28      	ldr	r2, [pc, #160]	@ (8003a0c <BSP_LCD_DrawVLine+0xbc>)
 800396c:	2134      	movs	r1, #52	@ 0x34
 800396e:	fb01 f303 	mul.w	r3, r1, r3
 8003972:	4413      	add	r3, r2
 8003974:	3348      	adds	r3, #72	@ 0x48
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d114      	bne.n	80039a6 <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800397c:	4b22      	ldr	r3, [pc, #136]	@ (8003a08 <BSP_LCD_DrawVLine+0xb8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a22      	ldr	r2, [pc, #136]	@ (8003a0c <BSP_LCD_DrawVLine+0xbc>)
 8003982:	2134      	movs	r1, #52	@ 0x34
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	335c      	adds	r3, #92	@ 0x5c
 800398c:	681c      	ldr	r4, [r3, #0]
 800398e:	f7ff fd2b 	bl	80033e8 <BSP_LCD_GetXSize>
 8003992:	4602      	mov	r2, r0
 8003994:	88bb      	ldrh	r3, [r7, #4]
 8003996:	fb03 f202 	mul.w	r2, r3, r2
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	4413      	add	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4423      	add	r3, r4
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e013      	b.n	80039ce <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80039a6:	4b18      	ldr	r3, [pc, #96]	@ (8003a08 <BSP_LCD_DrawVLine+0xb8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a18      	ldr	r2, [pc, #96]	@ (8003a0c <BSP_LCD_DrawVLine+0xbc>)
 80039ac:	2134      	movs	r1, #52	@ 0x34
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	335c      	adds	r3, #92	@ 0x5c
 80039b6:	681c      	ldr	r4, [r3, #0]
 80039b8:	f7ff fd16 	bl	80033e8 <BSP_LCD_GetXSize>
 80039bc:	4602      	mov	r2, r0
 80039be:	88bb      	ldrh	r3, [r7, #4]
 80039c0:	fb03 f202 	mul.w	r2, r3, r2
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4423      	add	r3, r4
 80039cc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80039ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003a08 <BSP_LCD_DrawVLine+0xb8>)
 80039d0:	681c      	ldr	r4, [r3, #0]
 80039d2:	68fd      	ldr	r5, [r7, #12]
 80039d4:	887e      	ldrh	r6, [r7, #2]
 80039d6:	f7ff fd07 	bl	80033e8 <BSP_LCD_GetXSize>
 80039da:	4603      	mov	r3, r0
 80039dc:	1e59      	subs	r1, r3, #1
 80039de:	4b0a      	ldr	r3, [pc, #40]	@ (8003a08 <BSP_LCD_DrawVLine+0xb8>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	480b      	ldr	r0, [pc, #44]	@ (8003a10 <BSP_LCD_DrawVLine+0xc0>)
 80039e4:	4613      	mov	r3, r2
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4403      	add	r3, r0
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	9301      	str	r3, [sp, #4]
 80039f2:	9100      	str	r1, [sp, #0]
 80039f4:	4633      	mov	r3, r6
 80039f6:	2201      	movs	r2, #1
 80039f8:	4629      	mov	r1, r5
 80039fa:	4620      	mov	r0, r4
 80039fc:	f000 fae4 	bl	8003fc8 <LL_FillBuffer>
}
 8003a00:	bf00      	nop
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a08:	20005368 	.word	0x20005368
 8003a0c:	20005280 	.word	0x20005280
 8003a10:	2000536c 	.word	0x2000536c

08003a14 <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	4611      	mov	r1, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	80fb      	strh	r3, [r7, #6]
 8003a26:	4603      	mov	r3, r0
 8003a28:	80bb      	strh	r3, [r7, #4]
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	807b      	strh	r3, [r7, #2]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8003a32:	887a      	ldrh	r2, [r7, #2]
 8003a34:	88b9      	ldrh	r1, [r7, #4]
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff ff2b 	bl	8003894 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8003a3e:	88ba      	ldrh	r2, [r7, #4]
 8003a40:	883b      	ldrh	r3, [r7, #0]
 8003a42:	4413      	add	r3, r2
 8003a44:	b299      	uxth	r1, r3
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	88fb      	ldrh	r3, [r7, #6]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff22 	bl	8003894 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8003a50:	883a      	ldrh	r2, [r7, #0]
 8003a52:	88b9      	ldrh	r1, [r7, #4]
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff ff7a 	bl	8003950 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8003a5c:	88fa      	ldrh	r2, [r7, #6]
 8003a5e:	887b      	ldrh	r3, [r7, #2]
 8003a60:	4413      	add	r3, r2
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	883a      	ldrh	r2, [r7, #0]
 8003a66:	88b9      	ldrh	r1, [r7, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff71 	bl	8003950 <BSP_LCD_DrawVLine>
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd90      	pop	{r4, r7, pc}
	...

08003a78 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003a78:	b5b0      	push	{r4, r5, r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	603a      	str	r2, [r7, #0]
 8003a82:	80fb      	strh	r3, [r7, #6]
 8003a84:	460b      	mov	r3, r1
 8003a86:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003a88:	4b1d      	ldr	r3, [pc, #116]	@ (8003b00 <BSP_LCD_DrawPixel+0x88>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003b04 <BSP_LCD_DrawPixel+0x8c>)
 8003a8e:	2134      	movs	r1, #52	@ 0x34
 8003a90:	fb01 f303 	mul.w	r3, r1, r3
 8003a94:	4413      	add	r3, r2
 8003a96:	3348      	adds	r3, #72	@ 0x48
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d116      	bne.n	8003acc <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003a9e:	4b18      	ldr	r3, [pc, #96]	@ (8003b00 <BSP_LCD_DrawPixel+0x88>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a18      	ldr	r2, [pc, #96]	@ (8003b04 <BSP_LCD_DrawPixel+0x8c>)
 8003aa4:	2134      	movs	r1, #52	@ 0x34
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	335c      	adds	r3, #92	@ 0x5c
 8003aae:	681c      	ldr	r4, [r3, #0]
 8003ab0:	88bd      	ldrh	r5, [r7, #4]
 8003ab2:	f7ff fc99 	bl	80033e8 <BSP_LCD_GetXSize>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	fb03 f205 	mul.w	r2, r3, r5
 8003abc:	88fb      	ldrh	r3, [r7, #6]
 8003abe:	4413      	add	r3, r2
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	4423      	add	r3, r4
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	b292      	uxth	r2, r2
 8003ac8:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003aca:	e015      	b.n	8003af8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003acc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b00 <BSP_LCD_DrawPixel+0x88>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	@ (8003b04 <BSP_LCD_DrawPixel+0x8c>)
 8003ad2:	2134      	movs	r1, #52	@ 0x34
 8003ad4:	fb01 f303 	mul.w	r3, r1, r3
 8003ad8:	4413      	add	r3, r2
 8003ada:	335c      	adds	r3, #92	@ 0x5c
 8003adc:	681c      	ldr	r4, [r3, #0]
 8003ade:	88bd      	ldrh	r5, [r7, #4]
 8003ae0:	f7ff fc82 	bl	80033e8 <BSP_LCD_GetXSize>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	fb03 f205 	mul.w	r2, r3, r5
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4423      	add	r3, r4
 8003af2:	461a      	mov	r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bdb0      	pop	{r4, r5, r7, pc}
 8003b00:	20005368 	.word	0x20005368
 8003b04:	20005280 	.word	0x20005280

08003b08 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8003b08:	b590      	push	{r4, r7, lr}
 8003b0a:	b08b      	sub	sp, #44	@ 0x2c
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b18:	2300      	movs	r3, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	330a      	adds	r3, #10
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	330b      	adds	r3, #11
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	441a      	add	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	441a      	add	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	330d      	adds	r3, #13
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	061b      	lsls	r3, r3, #24
 8003b4c:	4413      	add	r3, r2
 8003b4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3312      	adds	r3, #18
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3313      	adds	r3, #19
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	441a      	add	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3314      	adds	r3, #20
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	441a      	add	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3315      	adds	r3, #21
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	061b      	lsls	r3, r3, #24
 8003b74:	4413      	add	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3316      	adds	r3, #22
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3317      	adds	r3, #23
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	021b      	lsls	r3, r3, #8
 8003b88:	441a      	add	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	3318      	adds	r3, #24
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	041b      	lsls	r3, r3, #16
 8003b92:	441a      	add	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3319      	adds	r3, #25
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	4413      	add	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	331c      	adds	r3, #28
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	331d      	adds	r3, #29
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	4413      	add	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c64 <BSP_LCD_DrawBitmap+0x15c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	@ (8003c68 <BSP_LCD_DrawBitmap+0x160>)
 8003bba:	2134      	movs	r1, #52	@ 0x34
 8003bbc:	fb01 f303 	mul.w	r3, r1, r3
 8003bc0:	4413      	add	r3, r2
 8003bc2:	335c      	adds	r3, #92	@ 0x5c
 8003bc4:	681c      	ldr	r4, [r3, #0]
 8003bc6:	f7ff fc0f 	bl	80033e8 <BSP_LCD_GetXSize>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	fb03 f202 	mul.w	r2, r3, r2
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4423      	add	r3, r4
 8003bda:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	3b20      	subs	r3, #32
 8003be0:	2b07      	cmp	r3, #7
 8003be2:	d802      	bhi.n	8003bea <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
 8003be8:	e008      	b.n	8003bfc <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	3b10      	subs	r3, #16
 8003bee:	2b07      	cmp	r3, #7
 8003bf0:	d802      	bhi.n	8003bf8 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	61fb      	str	r3, [r7, #28]
 8003bf6:	e001      	b.n	8003bfc <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	fb02 f303 	mul.w	r3, r2, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	08d2      	lsrs	r2, r2, #3
 8003c0a:	fb03 f202 	mul.w	r2, r3, r2
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	4413      	add	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	4413      	add	r3, r2
 8003c16:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c1c:	e018      	b.n	8003c50 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8003c1e:	6a39      	ldr	r1, [r7, #32]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	69ba      	ldr	r2, [r7, #24]
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fa1b 	bl	8004060 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8003c2a:	f7ff fbdd 	bl	80033e8 <BSP_LCD_GetXSize>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	4413      	add	r3, r2
 8003c36:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	08db      	lsrs	r3, r3, #3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	fb02 f303 	mul.w	r3, r2, r3
 8003c42:	425b      	negs	r3, r3
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	4413      	add	r3, r2
 8003c48:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d3e2      	bcc.n	8003c1e <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	372c      	adds	r7, #44	@ 0x2c
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd90      	pop	{r4, r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20005368 	.word	0x20005368
 8003c68:	20005280 	.word	0x20005280

08003c6c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b090      	sub	sp, #64	@ 0x40
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003c76:	4b64      	ldr	r3, [pc, #400]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7a:	4a63      	ldr	r2, [pc, #396]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003c7c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c82:	4b61      	ldr	r3, [pc, #388]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003c8e:	4b5e      	ldr	r3, [pc, #376]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	4a5d      	ldr	r2, [pc, #372]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003c94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ca2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ca6:	4b58      	ldr	r3, [pc, #352]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	4a57      	ldr	r2, [pc, #348]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003cac:	f043 0310 	orr.w	r3, r3, #16
 8003cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cb2:	4b55      	ldr	r3, [pc, #340]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	623b      	str	r3, [r7, #32]
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cbe:	4b52      	ldr	r3, [pc, #328]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	4a51      	ldr	r2, [pc, #324]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003cc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cca:	4b4f      	ldr	r3, [pc, #316]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	4a4b      	ldr	r2, [pc, #300]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce2:	4b49      	ldr	r3, [pc, #292]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003cee:	4b46      	ldr	r3, [pc, #280]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	4a45      	ldr	r2, [pc, #276]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003cf4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfa:	4b43      	ldr	r3, [pc, #268]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003d06:	4b40      	ldr	r3, [pc, #256]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003d0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d12:	4b3d      	ldr	r3, [pc, #244]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d22:	4a39      	ldr	r2, [pc, #228]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d2a:	4b37      	ldr	r3, [pc, #220]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003d36:	4b34      	ldr	r3, [pc, #208]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3a:	4a33      	ldr	r2, [pc, #204]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003d3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d42:	4b31      	ldr	r3, [pc, #196]	@ (8003e08 <BSP_LCD_MspInit+0x19c>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4a:	60bb      	str	r3, [r7, #8]
 8003d4c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003d4e:	2310      	movs	r3, #16
 8003d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d52:	2302      	movs	r3, #2
 8003d54:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003d56:	2300      	movs	r3, #0
 8003d58:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003d5e:	230e      	movs	r3, #14
 8003d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003d62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d66:	4619      	mov	r1, r3
 8003d68:	4828      	ldr	r0, [pc, #160]	@ (8003e0c <BSP_LCD_MspInit+0x1a0>)
 8003d6a:	f001 fbd7 	bl	800551c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003d6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d74:	2302      	movs	r3, #2
 8003d76:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003d78:	2309      	movs	r3, #9
 8003d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d80:	4619      	mov	r1, r3
 8003d82:	4823      	ldr	r0, [pc, #140]	@ (8003e10 <BSP_LCD_MspInit+0x1a4>)
 8003d84:	f001 fbca 	bl	800551c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003d88:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8003d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003d92:	230e      	movs	r3, #14
 8003d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003d96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	481d      	ldr	r0, [pc, #116]	@ (8003e14 <BSP_LCD_MspInit+0x1a8>)
 8003d9e:	f001 fbbd 	bl	800551c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003da2:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003da8:	2302      	movs	r3, #2
 8003daa:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003dac:	230e      	movs	r3, #14
 8003dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003db0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003db4:	4619      	mov	r1, r3
 8003db6:	4818      	ldr	r0, [pc, #96]	@ (8003e18 <BSP_LCD_MspInit+0x1ac>)
 8003db8:	f001 fbb0 	bl	800551c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003dbc:	23f7      	movs	r3, #247	@ 0xf7
 8003dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003dc4:	230e      	movs	r3, #14
 8003dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003dc8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4813      	ldr	r0, [pc, #76]	@ (8003e1c <BSP_LCD_MspInit+0x1b0>)
 8003dd0:	f001 fba4 	bl	800551c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003dd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003dde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003de2:	4619      	mov	r1, r3
 8003de4:	480b      	ldr	r0, [pc, #44]	@ (8003e14 <BSP_LCD_MspInit+0x1a8>)
 8003de6:	f001 fb99 	bl	800551c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003dea:	2308      	movs	r3, #8
 8003dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003dee:	2301      	movs	r3, #1
 8003df0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003df6:	4619      	mov	r1, r3
 8003df8:	4808      	ldr	r0, [pc, #32]	@ (8003e1c <BSP_LCD_MspInit+0x1b0>)
 8003dfa:	f001 fb8f 	bl	800551c <HAL_GPIO_Init>
}
 8003dfe:	bf00      	nop
 8003e00:	3740      	adds	r7, #64	@ 0x40
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40021800 	.word	0x40021800
 8003e14:	40022000 	.word	0x40022000
 8003e18:	40022400 	.word	0x40022400
 8003e1c:	40022800 	.word	0x40022800

08003e20 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <BSP_LCD_ClockConfig+0x34>)
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003e30:	4b08      	ldr	r3, [pc, #32]	@ (8003e54 <BSP_LCD_ClockConfig+0x34>)
 8003e32:	22c0      	movs	r2, #192	@ 0xc0
 8003e34:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003e36:	4b07      	ldr	r3, [pc, #28]	@ (8003e54 <BSP_LCD_ClockConfig+0x34>)
 8003e38:	2205      	movs	r2, #5
 8003e3a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003e3c:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <BSP_LCD_ClockConfig+0x34>)
 8003e3e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003e44:	4803      	ldr	r0, [pc, #12]	@ (8003e54 <BSP_LCD_ClockConfig+0x34>)
 8003e46:	f003 fbed 	bl	8007624 <HAL_RCCEx_PeriphCLKConfig>
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20005384 	.word	0x20005384

08003e58 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	603a      	str	r2, [r7, #0]
 8003e62:	80fb      	strh	r3, [r7, #6]
 8003e64:	460b      	mov	r3, r1
 8003e66:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	61fb      	str	r3, [r7, #28]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003e70:	4b53      	ldr	r3, [pc, #332]	@ (8003fc0 <DrawChar+0x168>)
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4953      	ldr	r1, [pc, #332]	@ (8003fc4 <DrawChar+0x16c>)
 8003e76:	4613      	mov	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	3308      	adds	r3, #8
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	88db      	ldrh	r3, [r3, #6]
 8003e86:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003e88:	4b4d      	ldr	r3, [pc, #308]	@ (8003fc0 <DrawChar+0x168>)
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	494d      	ldr	r1, [pc, #308]	@ (8003fc4 <DrawChar+0x16c>)
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	3308      	adds	r3, #8
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	889b      	ldrh	r3, [r3, #4]
 8003e9e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003ea0:	8a3b      	ldrh	r3, [r7, #16]
 8003ea2:	3307      	adds	r3, #7
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da00      	bge.n	8003eaa <DrawChar+0x52>
 8003ea8:	3307      	adds	r3, #7
 8003eaa:	10db      	asrs	r3, r3, #3
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	b2da      	uxtb	r2, r3
 8003eb2:	8a3b      	ldrh	r3, [r7, #16]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	e076      	b.n	8003fae <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003ec0:	8a3b      	ldrh	r3, [r7, #16]
 8003ec2:	3307      	adds	r3, #7
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	da00      	bge.n	8003eca <DrawChar+0x72>
 8003ec8:	3307      	adds	r3, #7
 8003eca:	10db      	asrs	r3, r3, #3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	fb02 f303 	mul.w	r3, r2, r3
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003eda:	8a3b      	ldrh	r3, [r7, #16]
 8003edc:	3307      	adds	r3, #7
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da00      	bge.n	8003ee4 <DrawChar+0x8c>
 8003ee2:	3307      	adds	r3, #7
 8003ee4:	10db      	asrs	r3, r3, #3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d002      	beq.n	8003ef0 <DrawChar+0x98>
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d004      	beq.n	8003ef8 <DrawChar+0xa0>
 8003eee:	e00c      	b.n	8003f0a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	617b      	str	r3, [r7, #20]
      break;
 8003ef6:	e016      	b.n	8003f26 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	3201      	adds	r2, #1
 8003f02:	7812      	ldrb	r2, [r2, #0]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	617b      	str	r3, [r7, #20]
      break;
 8003f08:	e00d      	b.n	8003f26 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	041a      	lsls	r2, r3, #16
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	3301      	adds	r3, #1
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	3202      	adds	r2, #2
 8003f1e:	7812      	ldrb	r2, [r2, #0]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]
      break;
 8003f24:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
 8003f2a:	e036      	b.n	8003f9a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003f2c:	8a3a      	ldrh	r2, [r7, #16]
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	1ad2      	subs	r2, r2, r3
 8003f32:	7bfb      	ldrb	r3, [r7, #15]
 8003f34:	4413      	add	r3, r2
 8003f36:	3b01      	subs	r3, #1
 8003f38:	2201      	movs	r2, #1
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	461a      	mov	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4013      	ands	r3, r2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d012      	beq.n	8003f6e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	4413      	add	r3, r2
 8003f50:	b298      	uxth	r0, r3
 8003f52:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc0 <DrawChar+0x168>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	491b      	ldr	r1, [pc, #108]	@ (8003fc4 <DrawChar+0x16c>)
 8003f58:	4613      	mov	r3, r2
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	88bb      	ldrh	r3, [r7, #4]
 8003f66:	4619      	mov	r1, r3
 8003f68:	f7ff fd86 	bl	8003a78 <BSP_LCD_DrawPixel>
 8003f6c:	e012      	b.n	8003f94 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	4413      	add	r3, r2
 8003f76:	b298      	uxth	r0, r3
 8003f78:	4b11      	ldr	r3, [pc, #68]	@ (8003fc0 <DrawChar+0x168>)
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	4911      	ldr	r1, [pc, #68]	@ (8003fc4 <DrawChar+0x16c>)
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	3304      	adds	r3, #4
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	88bb      	ldrh	r3, [r7, #4]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	f7ff fd72 	bl	8003a78 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	3301      	adds	r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	8a3b      	ldrh	r3, [r7, #16]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d3c4      	bcc.n	8003f2c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003fa2:	88bb      	ldrh	r3, [r7, #4]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	3301      	adds	r3, #1
 8003fac:	61fb      	str	r3, [r7, #28]
 8003fae:	8a7b      	ldrh	r3, [r7, #18]
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d384      	bcc.n	8003ec0 <DrawChar+0x68>
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	bf00      	nop
 8003fba:	3720      	adds	r7, #32
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20005368 	.word	0x20005368
 8003fc4:	2000536c 	.word	0x2000536c

08003fc8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af02      	add	r7, sp, #8
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003fd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004050 <LL_FillBuffer+0x88>)
 8003fd8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003fdc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003fde:	4b1d      	ldr	r3, [pc, #116]	@ (8004054 <LL_FillBuffer+0x8c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1d      	ldr	r2, [pc, #116]	@ (8004058 <LL_FillBuffer+0x90>)
 8003fe4:	2134      	movs	r1, #52	@ 0x34
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	3348      	adds	r3, #72	@ 0x48
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d103      	bne.n	8003ffc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003ff4:	4b16      	ldr	r3, [pc, #88]	@ (8004050 <LL_FillBuffer+0x88>)
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	609a      	str	r2, [r3, #8]
 8003ffa:	e002      	b.n	8004002 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003ffc:	4b14      	ldr	r3, [pc, #80]	@ (8004050 <LL_FillBuffer+0x88>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004002:	4a13      	ldr	r2, [pc, #76]	@ (8004050 <LL_FillBuffer+0x88>)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004008:	4b11      	ldr	r3, [pc, #68]	@ (8004050 <LL_FillBuffer+0x88>)
 800400a:	4a14      	ldr	r2, [pc, #80]	@ (800405c <LL_FillBuffer+0x94>)
 800400c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800400e:	4810      	ldr	r0, [pc, #64]	@ (8004050 <LL_FillBuffer+0x88>)
 8004010:	f000 fff8 	bl	8005004 <HAL_DMA2D_Init>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d115      	bne.n	8004046 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	480c      	ldr	r0, [pc, #48]	@ (8004050 <LL_FillBuffer+0x88>)
 800401e:	f001 f94f 	bl	80052c0 <HAL_DMA2D_ConfigLayer>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10e      	bne.n	8004046 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69f9      	ldr	r1, [r7, #28]
 8004032:	4807      	ldr	r0, [pc, #28]	@ (8004050 <LL_FillBuffer+0x88>)
 8004034:	f001 f830 	bl	8005098 <HAL_DMA2D_Start>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800403e:	210a      	movs	r1, #10
 8004040:	4803      	ldr	r0, [pc, #12]	@ (8004050 <LL_FillBuffer+0x88>)
 8004042:	f001 f854 	bl	80050ee <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20005328 	.word	0x20005328
 8004054:	20005368 	.word	0x20005368
 8004058:	20005280 	.word	0x20005280
 800405c:	4002b000 	.word	0x4002b000

08004060 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800406e:	4b1c      	ldr	r3, [pc, #112]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 8004070:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004074:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004076:	4b1a      	ldr	r3, [pc, #104]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 8004078:	2200      	movs	r2, #0
 800407a:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 800407c:	4b18      	ldr	r3, [pc, #96]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 800407e:	2200      	movs	r2, #0
 8004080:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8004082:	4b17      	ldr	r3, [pc, #92]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8004088:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 800408a:	22ff      	movs	r2, #255	@ 0xff
 800408c:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 800408e:	4a14      	ldr	r2, [pc, #80]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8004094:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 8004096:	2200      	movs	r2, #0
 8004098:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 800409a:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 800409c:	4a11      	ldr	r2, [pc, #68]	@ (80040e4 <LL_ConvertLineToARGB8888+0x84>)
 800409e:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80040a0:	480f      	ldr	r0, [pc, #60]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 80040a2:	f000 ffaf 	bl	8005004 <HAL_DMA2D_Init>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d115      	bne.n	80040d8 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80040ac:	2101      	movs	r1, #1
 80040ae:	480c      	ldr	r0, [pc, #48]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 80040b0:	f001 f906 	bl	80052c0 <HAL_DMA2D_ConfigLayer>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10e      	bne.n	80040d8 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	2301      	movs	r3, #1
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4806      	ldr	r0, [pc, #24]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 80040c6:	f000 ffe7 	bl	8005098 <HAL_DMA2D_Start>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d103      	bne.n	80040d8 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80040d0:	210a      	movs	r1, #10
 80040d2:	4803      	ldr	r0, [pc, #12]	@ (80040e0 <LL_ConvertLineToARGB8888+0x80>)
 80040d4:	f001 f80b 	bl	80050ee <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20005328 	.word	0x20005328
 80040e4:	4002b000 	.word	0x4002b000

080040e8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80040ec:	4b29      	ldr	r3, [pc, #164]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 80040ee:	4a2a      	ldr	r2, [pc, #168]	@ (8004198 <BSP_SDRAM_Init+0xb0>)
 80040f0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80040f2:	4b2a      	ldr	r3, [pc, #168]	@ (800419c <BSP_SDRAM_Init+0xb4>)
 80040f4:	2202      	movs	r2, #2
 80040f6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80040f8:	4b28      	ldr	r3, [pc, #160]	@ (800419c <BSP_SDRAM_Init+0xb4>)
 80040fa:	2207      	movs	r2, #7
 80040fc:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80040fe:	4b27      	ldr	r3, [pc, #156]	@ (800419c <BSP_SDRAM_Init+0xb4>)
 8004100:	2204      	movs	r2, #4
 8004102:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004104:	4b25      	ldr	r3, [pc, #148]	@ (800419c <BSP_SDRAM_Init+0xb4>)
 8004106:	2207      	movs	r2, #7
 8004108:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800410a:	4b24      	ldr	r3, [pc, #144]	@ (800419c <BSP_SDRAM_Init+0xb4>)
 800410c:	2202      	movs	r2, #2
 800410e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004110:	4b22      	ldr	r3, [pc, #136]	@ (800419c <BSP_SDRAM_Init+0xb4>)
 8004112:	2202      	movs	r2, #2
 8004114:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004116:	4b21      	ldr	r3, [pc, #132]	@ (800419c <BSP_SDRAM_Init+0xb4>)
 8004118:	2202      	movs	r2, #2
 800411a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800411c:	4b1d      	ldr	r3, [pc, #116]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 800411e:	2200      	movs	r2, #0
 8004120:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004122:	4b1c      	ldr	r3, [pc, #112]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 8004124:	2200      	movs	r2, #0
 8004126:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004128:	4b1a      	ldr	r3, [pc, #104]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 800412a:	2204      	movs	r2, #4
 800412c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800412e:	4b19      	ldr	r3, [pc, #100]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 8004130:	2210      	movs	r2, #16
 8004132:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004134:	4b17      	ldr	r3, [pc, #92]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 8004136:	2240      	movs	r2, #64	@ 0x40
 8004138:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800413a:	4b16      	ldr	r3, [pc, #88]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 800413c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004140:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004142:	4b14      	ldr	r3, [pc, #80]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 8004144:	2200      	movs	r2, #0
 8004146:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004148:	4b12      	ldr	r3, [pc, #72]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 800414a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800414e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004150:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 8004152:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004156:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004158:	4b0e      	ldr	r3, [pc, #56]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 800415a:	2200      	movs	r2, #0
 800415c:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800415e:	2100      	movs	r1, #0
 8004160:	480c      	ldr	r0, [pc, #48]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 8004162:	f000 f87f 	bl	8004264 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004166:	490d      	ldr	r1, [pc, #52]	@ (800419c <BSP_SDRAM_Init+0xb4>)
 8004168:	480a      	ldr	r0, [pc, #40]	@ (8004194 <BSP_SDRAM_Init+0xac>)
 800416a:	f004 fa49 	bl	8008600 <HAL_SDRAM_Init>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004174:	4b0a      	ldr	r3, [pc, #40]	@ (80041a0 <BSP_SDRAM_Init+0xb8>)
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]
 800417a:	e002      	b.n	8004182 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800417c:	4b08      	ldr	r3, [pc, #32]	@ (80041a0 <BSP_SDRAM_Init+0xb8>)
 800417e:	2200      	movs	r2, #0
 8004180:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004182:	f240 6003 	movw	r0, #1539	@ 0x603
 8004186:	f000 f80d 	bl	80041a4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800418a:	4b05      	ldr	r3, [pc, #20]	@ (80041a0 <BSP_SDRAM_Init+0xb8>)
 800418c:	781b      	ldrb	r3, [r3, #0]
}
 800418e:	4618      	mov	r0, r3
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20005408 	.word	0x20005408
 8004198:	a0000140 	.word	0xa0000140
 800419c:	2000543c 	.word	0x2000543c
 80041a0:	20004ec8 	.word	0x20004ec8

080041a4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80041b0:	4b2a      	ldr	r3, [pc, #168]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80041b6:	4b29      	ldr	r3, [pc, #164]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041b8:	2210      	movs	r2, #16
 80041ba:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80041bc:	4b27      	ldr	r3, [pc, #156]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041be:	2201      	movs	r2, #1
 80041c0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80041c2:	4b26      	ldr	r3, [pc, #152]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80041c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041cc:	4923      	ldr	r1, [pc, #140]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041ce:	4824      	ldr	r0, [pc, #144]	@ (8004260 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80041d0:	f004 fa4a 	bl	8008668 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80041d4:	2001      	movs	r0, #1
 80041d6:	f000 fc21 	bl	8004a1c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80041da:	4b20      	ldr	r3, [pc, #128]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041dc:	2202      	movs	r2, #2
 80041de:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80041e0:	4b1e      	ldr	r3, [pc, #120]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041e2:	2210      	movs	r2, #16
 80041e4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80041e6:	4b1d      	ldr	r3, [pc, #116]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80041ec:	4b1b      	ldr	r3, [pc, #108]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80041f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80041f6:	4919      	ldr	r1, [pc, #100]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80041f8:	4819      	ldr	r0, [pc, #100]	@ (8004260 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80041fa:	f004 fa35 	bl	8008668 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80041fe:	4b17      	ldr	r3, [pc, #92]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004200:	2203      	movs	r2, #3
 8004202:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004204:	4b15      	ldr	r3, [pc, #84]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004206:	2210      	movs	r2, #16
 8004208:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800420a:	4b14      	ldr	r3, [pc, #80]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800420c:	2208      	movs	r2, #8
 800420e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004210:	4b12      	ldr	r3, [pc, #72]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004212:	2200      	movs	r2, #0
 8004214:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004216:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800421a:	4910      	ldr	r1, [pc, #64]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800421c:	4810      	ldr	r0, [pc, #64]	@ (8004260 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800421e:	f004 fa23 	bl	8008668 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004222:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8004226:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004228:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800422a:	2204      	movs	r2, #4
 800422c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800422e:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004230:	2210      	movs	r2, #16
 8004232:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004234:	4b09      	ldr	r3, [pc, #36]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004236:	2201      	movs	r2, #1
 8004238:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4a07      	ldr	r2, [pc, #28]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800423e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004240:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004244:	4905      	ldr	r1, [pc, #20]	@ (800425c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004246:	4806      	ldr	r0, [pc, #24]	@ (8004260 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004248:	f004 fa0e 	bl	8008668 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800424c:	6879      	ldr	r1, [r7, #4]
 800424e:	4804      	ldr	r0, [pc, #16]	@ (8004260 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004250:	f004 fa3f 	bl	80086d2 <HAL_SDRAM_ProgramRefreshRate>
}
 8004254:	bf00      	nop
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20005458 	.word	0x20005458
 8004260:	20005408 	.word	0x20005408

08004264 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004264:	b580      	push	{r7, lr}
 8004266:	b090      	sub	sp, #64	@ 0x40
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800426e:	4b70      	ldr	r3, [pc, #448]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 8004270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004272:	4a6f      	ldr	r2, [pc, #444]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	6393      	str	r3, [r2, #56]	@ 0x38
 800427a:	4b6d      	ldr	r3, [pc, #436]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 800427c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004286:	4b6a      	ldr	r3, [pc, #424]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	4a69      	ldr	r2, [pc, #420]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 800428c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004290:	6313      	str	r3, [r2, #48]	@ 0x30
 8004292:	4b67      	ldr	r3, [pc, #412]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
 800429c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800429e:	4b64      	ldr	r3, [pc, #400]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	4a63      	ldr	r2, [pc, #396]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042a4:	f043 0304 	orr.w	r3, r3, #4
 80042a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042aa:	4b61      	ldr	r3, [pc, #388]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	623b      	str	r3, [r7, #32]
 80042b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042b6:	4b5e      	ldr	r3, [pc, #376]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	4a5d      	ldr	r2, [pc, #372]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042bc:	f043 0308 	orr.w	r3, r3, #8
 80042c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80042ce:	4b58      	ldr	r3, [pc, #352]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	4a57      	ldr	r2, [pc, #348]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042d4:	f043 0310 	orr.w	r3, r3, #16
 80042d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042da:	4b55      	ldr	r3, [pc, #340]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	61bb      	str	r3, [r7, #24]
 80042e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80042e6:	4b52      	ldr	r3, [pc, #328]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	4a51      	ldr	r2, [pc, #324]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042ec:	f043 0320 	orr.w	r3, r3, #32
 80042f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f6:	f003 0320 	and.w	r3, r3, #32
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80042fe:	4b4c      	ldr	r3, [pc, #304]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 8004300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004302:	4a4b      	ldr	r2, [pc, #300]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 8004304:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004308:	6313      	str	r3, [r2, #48]	@ 0x30
 800430a:	4b49      	ldr	r3, [pc, #292]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 800430c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004312:	613b      	str	r3, [r7, #16]
 8004314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004316:	4b46      	ldr	r3, [pc, #280]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 8004318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431a:	4a45      	ldr	r2, [pc, #276]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 800431c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004320:	6313      	str	r3, [r2, #48]	@ 0x30
 8004322:	4b43      	ldr	r3, [pc, #268]	@ (8004430 <BSP_SDRAM_MspInit+0x1cc>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800432e:	2302      	movs	r3, #2
 8004330:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004332:	2301      	movs	r3, #1
 8004334:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004336:	2302      	movs	r3, #2
 8004338:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800433a:	230c      	movs	r3, #12
 800433c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800433e:	2308      	movs	r3, #8
 8004340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004342:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004346:	4619      	mov	r1, r3
 8004348:	483a      	ldr	r0, [pc, #232]	@ (8004434 <BSP_SDRAM_MspInit+0x1d0>)
 800434a:	f001 f8e7 	bl	800551c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800434e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8004352:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004354:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004358:	4619      	mov	r1, r3
 800435a:	4837      	ldr	r0, [pc, #220]	@ (8004438 <BSP_SDRAM_MspInit+0x1d4>)
 800435c:	f001 f8de 	bl	800551c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004360:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004366:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800436a:	4619      	mov	r1, r3
 800436c:	4833      	ldr	r0, [pc, #204]	@ (800443c <BSP_SDRAM_MspInit+0x1d8>)
 800436e:	f001 f8d5 	bl	800551c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004372:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8004376:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004378:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800437c:	4619      	mov	r1, r3
 800437e:	4830      	ldr	r0, [pc, #192]	@ (8004440 <BSP_SDRAM_MspInit+0x1dc>)
 8004380:	f001 f8cc 	bl	800551c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004384:	f248 1333 	movw	r3, #33075	@ 0x8133
 8004388:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800438a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800438e:	4619      	mov	r1, r3
 8004390:	482c      	ldr	r0, [pc, #176]	@ (8004444 <BSP_SDRAM_MspInit+0x1e0>)
 8004392:	f001 f8c3 	bl	800551c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004396:	2328      	movs	r3, #40	@ 0x28
 8004398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800439a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800439e:	4619      	mov	r1, r3
 80043a0:	4829      	ldr	r0, [pc, #164]	@ (8004448 <BSP_SDRAM_MspInit+0x1e4>)
 80043a2:	f001 f8bb 	bl	800551c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80043a6:	4b29      	ldr	r3, [pc, #164]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80043ac:	4b27      	ldr	r3, [pc, #156]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043ae:	2280      	movs	r2, #128	@ 0x80
 80043b0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80043b2:	4b26      	ldr	r3, [pc, #152]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043b8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80043ba:	4b24      	ldr	r3, [pc, #144]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043c0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80043c2:	4b22      	ldr	r3, [pc, #136]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80043c8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80043ca:	4b20      	ldr	r3, [pc, #128]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043cc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80043d0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80043d2:	4b1e      	ldr	r3, [pc, #120]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80043d8:	4b1c      	ldr	r3, [pc, #112]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043de:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80043e0:	4b1a      	ldr	r3, [pc, #104]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80043e6:	4b19      	ldr	r3, [pc, #100]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043e8:	2203      	movs	r2, #3
 80043ea:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80043ec:	4b17      	ldr	r3, [pc, #92]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80043f2:	4b16      	ldr	r3, [pc, #88]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80043f8:	4b14      	ldr	r3, [pc, #80]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 80043fa:	4a15      	ldr	r2, [pc, #84]	@ (8004450 <BSP_SDRAM_MspInit+0x1ec>)
 80043fc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a12      	ldr	r2, [pc, #72]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
 8004404:	4a11      	ldr	r2, [pc, #68]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800440a:	4810      	ldr	r0, [pc, #64]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 800440c:	f000 fcea 	bl	8004de4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004410:	480e      	ldr	r0, [pc, #56]	@ (800444c <BSP_SDRAM_MspInit+0x1e8>)
 8004412:	f000 fc39 	bl	8004c88 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004416:	2200      	movs	r2, #0
 8004418:	210f      	movs	r1, #15
 800441a:	2038      	movs	r0, #56	@ 0x38
 800441c:	f000 fbfd 	bl	8004c1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004420:	2038      	movs	r0, #56	@ 0x38
 8004422:	f000 fc16 	bl	8004c52 <HAL_NVIC_EnableIRQ>
}
 8004426:	bf00      	nop
 8004428:	3740      	adds	r7, #64	@ 0x40
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	40020800 	.word	0x40020800
 8004438:	40020c00 	.word	0x40020c00
 800443c:	40021000 	.word	0x40021000
 8004440:	40021400 	.word	0x40021400
 8004444:	40021800 	.word	0x40021800
 8004448:	40021c00 	.word	0x40021c00
 800444c:	20005468 	.word	0x20005468
 8004450:	40026410 	.word	0x40026410

08004454 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	460a      	mov	r2, r1
 800445e:	80fb      	strh	r3, [r7, #6]
 8004460:	4613      	mov	r3, r2
 8004462:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004468:	4a14      	ldr	r2, [pc, #80]	@ (80044bc <BSP_TS_Init+0x68>)
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800446e:	4a14      	ldr	r2, [pc, #80]	@ (80044c0 <BSP_TS_Init+0x6c>)
 8004470:	88bb      	ldrh	r3, [r7, #4]
 8004472:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004474:	4b13      	ldr	r3, [pc, #76]	@ (80044c4 <BSP_TS_Init+0x70>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2070      	movs	r0, #112	@ 0x70
 800447a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800447c:	4b11      	ldr	r3, [pc, #68]	@ (80044c4 <BSP_TS_Init+0x70>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2070      	movs	r0, #112	@ 0x70
 8004482:	4798      	blx	r3
 8004484:	4603      	mov	r3, r0
 8004486:	2b51      	cmp	r3, #81	@ 0x51
 8004488:	d110      	bne.n	80044ac <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800448a:	4b0f      	ldr	r3, [pc, #60]	@ (80044c8 <BSP_TS_Init+0x74>)
 800448c:	4a0d      	ldr	r2, [pc, #52]	@ (80044c4 <BSP_TS_Init+0x70>)
 800448e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004490:	4b0e      	ldr	r3, [pc, #56]	@ (80044cc <BSP_TS_Init+0x78>)
 8004492:	2270      	movs	r2, #112	@ 0x70
 8004494:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004496:	4b0e      	ldr	r3, [pc, #56]	@ (80044d0 <BSP_TS_Init+0x7c>)
 8004498:	2208      	movs	r2, #8
 800449a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800449c:	4b0a      	ldr	r3, [pc, #40]	@ (80044c8 <BSP_TS_Init+0x74>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	4a0a      	ldr	r2, [pc, #40]	@ (80044cc <BSP_TS_Init+0x78>)
 80044a4:	7812      	ldrb	r2, [r2, #0]
 80044a6:	4610      	mov	r0, r2
 80044a8:	4798      	blx	r3
 80044aa:	e001      	b.n	80044b0 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80044ac:	2303      	movs	r3, #3
 80044ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	200054cc 	.word	0x200054cc
 80044c0:	200054ce 	.word	0x200054ce
 80044c4:	20004e80 	.word	0x20004e80
 80044c8:	200054c8 	.word	0x200054c8
 80044cc:	200054d1 	.word	0x200054d1
 80044d0:	200054d0 	.word	0x200054d0

080044d4 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80044d4:	b590      	push	{r4, r7, lr}
 80044d6:	b097      	sub	sp, #92	@ 0x5c
 80044d8:	af02      	add	r7, sp, #8
 80044da:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80044ee:	4bb8      	ldr	r3, [pc, #736]	@ (80047d0 <BSP_TS_GetState+0x2fc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	4ab7      	ldr	r2, [pc, #732]	@ (80047d4 <BSP_TS_GetState+0x300>)
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	4610      	mov	r0, r2
 80044fa:	4798      	blx	r3
 80044fc:	4603      	mov	r3, r0
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8198 	beq.w	800483e <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800450e:	2300      	movs	r3, #0
 8004510:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004512:	e187      	b.n	8004824 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004514:	4bae      	ldr	r3, [pc, #696]	@ (80047d0 <BSP_TS_GetState+0x2fc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4aae      	ldr	r2, [pc, #696]	@ (80047d4 <BSP_TS_GetState+0x300>)
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	4614      	mov	r4, r2
 8004520:	f107 0120 	add.w	r1, r7, #32
 8004524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004526:	0052      	lsls	r2, r2, #1
 8004528:	1888      	adds	r0, r1, r2
 800452a:	f107 0114 	add.w	r1, r7, #20
 800452e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004530:	0052      	lsls	r2, r2, #1
 8004532:	440a      	add	r2, r1
 8004534:	4601      	mov	r1, r0
 8004536:	4620      	mov	r0, r4
 8004538:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800453a:	4ba7      	ldr	r3, [pc, #668]	@ (80047d8 <BSP_TS_GetState+0x304>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d117      	bne.n	8004572 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8004542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	3350      	adds	r3, #80	@ 0x50
 8004548:	443b      	add	r3, r7
 800454a:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800454e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	3350      	adds	r3, #80	@ 0x50
 8004554:	443b      	add	r3, r7
 8004556:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800455a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	3350      	adds	r3, #80	@ 0x50
 8004560:	443b      	add	r3, r7
 8004562:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	3350      	adds	r3, #80	@ 0x50
 800456c:	443b      	add	r3, r7
 800456e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8004572:	4b99      	ldr	r3, [pc, #612]	@ (80047d8 <BSP_TS_GetState+0x304>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00e      	beq.n	800459c <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 800457e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	3350      	adds	r3, #80	@ 0x50
 8004584:	443b      	add	r3, r7
 8004586:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800458a:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 800458e:	b29a      	uxth	r2, r3
 8004590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004592:	005b      	lsls	r3, r3, #1
 8004594:	3350      	adds	r3, #80	@ 0x50
 8004596:	443b      	add	r3, r7
 8004598:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 800459c:	4b8e      	ldr	r3, [pc, #568]	@ (80047d8 <BSP_TS_GetState+0x304>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00e      	beq.n	80045c6 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 80045a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	3350      	adds	r3, #80	@ 0x50
 80045ae:	443b      	add	r3, r7
 80045b0:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80045b4:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	3350      	adds	r3, #80	@ 0x50
 80045c0:	443b      	add	r3, r7
 80045c2:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80045c6:	4b84      	ldr	r3, [pc, #528]	@ (80047d8 <BSP_TS_GetState+0x304>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	f003 0308 	and.w	r3, r3, #8
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d017      	beq.n	8004602 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 80045d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	3350      	adds	r3, #80	@ 0x50
 80045d8:	443b      	add	r3, r7
 80045da:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80045de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	3350      	adds	r3, #80	@ 0x50
 80045e4:	443b      	add	r3, r7
 80045e6:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80045ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	3350      	adds	r3, #80	@ 0x50
 80045f0:	443b      	add	r3, r7
 80045f2:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80045f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	3350      	adds	r3, #80	@ 0x50
 80045fc:	443b      	add	r3, r7
 80045fe:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8004602:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	3350      	adds	r3, #80	@ 0x50
 8004608:	443b      	add	r3, r7
 800460a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800460e:	4619      	mov	r1, r3
 8004610:	4a72      	ldr	r2, [pc, #456]	@ (80047dc <BSP_TS_GetState+0x308>)
 8004612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004618:	4299      	cmp	r1, r3
 800461a:	d90d      	bls.n	8004638 <BSP_TS_GetState+0x164>
 800461c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	3350      	adds	r3, #80	@ 0x50
 8004622:	443b      	add	r3, r7
 8004624:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004628:	496c      	ldr	r1, [pc, #432]	@ (80047dc <BSP_TS_GetState+0x308>)
 800462a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800462c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004630:	b29b      	uxth	r3, r3
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	b29b      	uxth	r3, r3
 8004636:	e00c      	b.n	8004652 <BSP_TS_GetState+0x17e>
 8004638:	4a68      	ldr	r2, [pc, #416]	@ (80047dc <BSP_TS_GetState+0x308>)
 800463a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800463c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004640:	b29a      	uxth	r2, r3
 8004642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	3350      	adds	r3, #80	@ 0x50
 8004648:	443b      	add	r3, r7
 800464a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	b29b      	uxth	r3, r3
 8004652:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	3350      	adds	r3, #80	@ 0x50
 800465c:	443b      	add	r3, r7
 800465e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004662:	4619      	mov	r1, r3
 8004664:	4a5e      	ldr	r2, [pc, #376]	@ (80047e0 <BSP_TS_GetState+0x30c>)
 8004666:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800466c:	4299      	cmp	r1, r3
 800466e:	d90d      	bls.n	800468c <BSP_TS_GetState+0x1b8>
 8004670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	3350      	adds	r3, #80	@ 0x50
 8004676:	443b      	add	r3, r7
 8004678:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800467c:	4958      	ldr	r1, [pc, #352]	@ (80047e0 <BSP_TS_GetState+0x30c>)
 800467e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004680:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004684:	b29b      	uxth	r3, r3
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	b29b      	uxth	r3, r3
 800468a:	e00c      	b.n	80046a6 <BSP_TS_GetState+0x1d2>
 800468c:	4a54      	ldr	r2, [pc, #336]	@ (80047e0 <BSP_TS_GetState+0x30c>)
 800468e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004694:	b29a      	uxth	r2, r3
 8004696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	3350      	adds	r3, #80	@ 0x50
 800469c:	443b      	add	r3, r7
 800469e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 80046aa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80046ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80046b2:	4413      	add	r3, r2
 80046b4:	2b05      	cmp	r3, #5
 80046b6:	dd15      	ble.n	80046e4 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 80046b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	3350      	adds	r3, #80	@ 0x50
 80046be:	443b      	add	r3, r7
 80046c0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80046c4:	4619      	mov	r1, r3
 80046c6:	4a45      	ldr	r2, [pc, #276]	@ (80047dc <BSP_TS_GetState+0x308>)
 80046c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80046ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	3350      	adds	r3, #80	@ 0x50
 80046d4:	443b      	add	r3, r7
 80046d6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80046da:	4619      	mov	r1, r3
 80046dc:	4a40      	ldr	r2, [pc, #256]	@ (80047e0 <BSP_TS_GetState+0x30c>)
 80046de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80046e4:	4b3b      	ldr	r3, [pc, #236]	@ (80047d4 <BSP_TS_GetState+0x300>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b70      	cmp	r3, #112	@ 0x70
 80046ea:	d119      	bne.n	8004720 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 80046ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	3350      	adds	r3, #80	@ 0x50
 80046f2:	443b      	add	r3, r7
 80046f4:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4413      	add	r3, r2
 8004700:	460a      	mov	r2, r1
 8004702:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	3350      	adds	r3, #80	@ 0x50
 800470a:	443b      	add	r3, r7
 800470c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004714:	3304      	adds	r3, #4
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	4413      	add	r3, r2
 800471a:	460a      	mov	r2, r1
 800471c:	809a      	strh	r2, [r3, #4]
 800471e:	e022      	b.n	8004766 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004720:	4b30      	ldr	r3, [pc, #192]	@ (80047e4 <BSP_TS_GetState+0x310>)
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	4619      	mov	r1, r3
 8004726:	4a2d      	ldr	r2, [pc, #180]	@ (80047dc <BSP_TS_GetState+0x308>)
 8004728:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800472a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472e:	fb01 f303 	mul.w	r3, r1, r3
 8004732:	0b1b      	lsrs	r3, r3, #12
 8004734:	b299      	uxth	r1, r3
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	460a      	mov	r2, r1
 8004740:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8004742:	4b29      	ldr	r3, [pc, #164]	@ (80047e8 <BSP_TS_GetState+0x314>)
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	4a25      	ldr	r2, [pc, #148]	@ (80047e0 <BSP_TS_GetState+0x30c>)
 800474a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	fb01 f303 	mul.w	r3, r1, r3
 8004754:	0b1b      	lsrs	r3, r3, #12
 8004756:	b299      	uxth	r1, r3
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800475c:	3304      	adds	r3, #4
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4413      	add	r3, r2
 8004762:	460a      	mov	r2, r1
 8004764:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004766:	4b1b      	ldr	r3, [pc, #108]	@ (80047d4 <BSP_TS_GetState+0x300>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f107 010c 	add.w	r1, r7, #12
 8004770:	f107 0210 	add.w	r2, r7, #16
 8004774:	f107 0308 	add.w	r3, r7, #8
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	460b      	mov	r3, r1
 800477c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800477e:	f7fe fb47 	bl	8002e10 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	b2d9      	uxtb	r1, r3
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800478a:	4413      	add	r3, r2
 800478c:	3316      	adds	r3, #22
 800478e:	460a      	mov	r2, r1
 8004790:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	b2d9      	uxtb	r1, r3
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800479a:	4413      	add	r3, r2
 800479c:	3320      	adds	r3, #32
 800479e:	460a      	mov	r2, r1
 80047a0:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d836      	bhi.n	8004816 <BSP_TS_GetState+0x342>
 80047a8:	a201      	add	r2, pc, #4	@ (adr r2, 80047b0 <BSP_TS_GetState+0x2dc>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	080047c1 	.word	0x080047c1
 80047b4:	080047ed 	.word	0x080047ed
 80047b8:	080047fb 	.word	0x080047fb
 80047bc:	08004809 	.word	0x08004809
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c4:	4413      	add	r3, r2
 80047c6:	331b      	adds	r3, #27
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
          break;
 80047cc:	e027      	b.n	800481e <BSP_TS_GetState+0x34a>
 80047ce:	bf00      	nop
 80047d0:	200054c8 	.word	0x200054c8
 80047d4:	200054d1 	.word	0x200054d1
 80047d8:	200054d0 	.word	0x200054d0
 80047dc:	200054d4 	.word	0x200054d4
 80047e0:	200054e8 	.word	0x200054e8
 80047e4:	200054cc 	.word	0x200054cc
 80047e8:	200054ce 	.word	0x200054ce
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047f0:	4413      	add	r3, r2
 80047f2:	331b      	adds	r3, #27
 80047f4:	2202      	movs	r2, #2
 80047f6:	701a      	strb	r2, [r3, #0]
          break;
 80047f8:	e011      	b.n	800481e <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047fe:	4413      	add	r3, r2
 8004800:	331b      	adds	r3, #27
 8004802:	2203      	movs	r2, #3
 8004804:	701a      	strb	r2, [r3, #0]
          break;
 8004806:	e00a      	b.n	800481e <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800480c:	4413      	add	r3, r2
 800480e:	331b      	adds	r3, #27
 8004810:	2200      	movs	r2, #0
 8004812:	701a      	strb	r2, [r3, #0]
          break;
 8004814:	e003      	b.n	800481e <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 800481c:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800481e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004820:	3301      	adds	r3, #1
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800482c:	4293      	cmp	r3, r2
 800482e:	f4ff ae71 	bcc.w	8004514 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f80a 	bl	800484c <BSP_TS_Get_GestureId>
 8004838:	4603      	mov	r3, r0
 800483a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800483e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8004842:	4618      	mov	r0, r3
 8004844:	3754      	adds	r7, #84	@ 0x54
 8004846:	46bd      	mov	sp, r7
 8004848:	bd90      	pop	{r4, r7, pc}
 800484a:	bf00      	nop

0800484c <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004854:	2300      	movs	r3, #0
 8004856:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 800485c:	4b3b      	ldr	r3, [pc, #236]	@ (800494c <BSP_TS_Get_GestureId+0x100>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	f107 0308 	add.w	r3, r7, #8
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f7fe fab8 	bl	8002dde <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b49      	cmp	r3, #73	@ 0x49
 8004872:	d05e      	beq.n	8004932 <BSP_TS_Get_GestureId+0xe6>
 8004874:	2b49      	cmp	r3, #73	@ 0x49
 8004876:	d860      	bhi.n	800493a <BSP_TS_Get_GestureId+0xee>
 8004878:	2b1c      	cmp	r3, #28
 800487a:	d83f      	bhi.n	80048fc <BSP_TS_Get_GestureId+0xb0>
 800487c:	2b1c      	cmp	r3, #28
 800487e:	d85c      	bhi.n	800493a <BSP_TS_Get_GestureId+0xee>
 8004880:	a201      	add	r2, pc, #4	@ (adr r2, 8004888 <BSP_TS_Get_GestureId+0x3c>)
 8004882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004886:	bf00      	nop
 8004888:	08004903 	.word	0x08004903
 800488c:	0800493b 	.word	0x0800493b
 8004890:	0800493b 	.word	0x0800493b
 8004894:	0800493b 	.word	0x0800493b
 8004898:	0800493b 	.word	0x0800493b
 800489c:	0800493b 	.word	0x0800493b
 80048a0:	0800493b 	.word	0x0800493b
 80048a4:	0800493b 	.word	0x0800493b
 80048a8:	0800493b 	.word	0x0800493b
 80048ac:	0800493b 	.word	0x0800493b
 80048b0:	0800493b 	.word	0x0800493b
 80048b4:	0800493b 	.word	0x0800493b
 80048b8:	0800493b 	.word	0x0800493b
 80048bc:	0800493b 	.word	0x0800493b
 80048c0:	0800493b 	.word	0x0800493b
 80048c4:	0800493b 	.word	0x0800493b
 80048c8:	0800490b 	.word	0x0800490b
 80048cc:	0800493b 	.word	0x0800493b
 80048d0:	0800493b 	.word	0x0800493b
 80048d4:	0800493b 	.word	0x0800493b
 80048d8:	08004913 	.word	0x08004913
 80048dc:	0800493b 	.word	0x0800493b
 80048e0:	0800493b 	.word	0x0800493b
 80048e4:	0800493b 	.word	0x0800493b
 80048e8:	0800491b 	.word	0x0800491b
 80048ec:	0800493b 	.word	0x0800493b
 80048f0:	0800493b 	.word	0x0800493b
 80048f4:	0800493b 	.word	0x0800493b
 80048f8:	08004923 	.word	0x08004923
 80048fc:	2b40      	cmp	r3, #64	@ 0x40
 80048fe:	d014      	beq.n	800492a <BSP_TS_Get_GestureId+0xde>
 8004900:	e01b      	b.n	800493a <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004908:	e01a      	b.n	8004940 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004910:	e016      	b.n	8004940 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004918:	e012      	b.n	8004940 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2203      	movs	r2, #3
 800491e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004920:	e00e      	b.n	8004940 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2204      	movs	r2, #4
 8004926:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004928:	e00a      	b.n	8004940 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2205      	movs	r2, #5
 800492e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004930:	e006      	b.n	8004940 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2206      	movs	r2, #6
 8004936:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004938:	e002      	b.n	8004940 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	73fb      	strb	r3, [r7, #15]
      break;
 800493e:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004940:	7bfb      	ldrb	r3, [r7, #15]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	200054d1 	.word	0x200054d1

08004950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8004954:	4b08      	ldr	r3, [pc, #32]	@ (8004978 <HAL_Init+0x28>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a07      	ldr	r2, [pc, #28]	@ (8004978 <HAL_Init+0x28>)
 800495a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800495e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004960:	2003      	movs	r0, #3
 8004962:	f000 f94f 	bl	8004c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004966:	2000      	movs	r0, #0
 8004968:	f000 f808 	bl	800497c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800496c:	f7fd fe86 	bl	800267c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40023c00 	.word	0x40023c00

0800497c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004984:	4b12      	ldr	r3, [pc, #72]	@ (80049d0 <HAL_InitTick+0x54>)
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	4b12      	ldr	r3, [pc, #72]	@ (80049d4 <HAL_InitTick+0x58>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	4619      	mov	r1, r3
 800498e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004992:	fbb3 f3f1 	udiv	r3, r3, r1
 8004996:	fbb2 f3f3 	udiv	r3, r2, r3
 800499a:	4618      	mov	r0, r3
 800499c:	f000 f967 	bl	8004c6e <HAL_SYSTICK_Config>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e00e      	b.n	80049c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b0f      	cmp	r3, #15
 80049ae:	d80a      	bhi.n	80049c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049b0:	2200      	movs	r2, #0
 80049b2:	6879      	ldr	r1, [r7, #4]
 80049b4:	f04f 30ff 	mov.w	r0, #4294967295
 80049b8:	f000 f92f 	bl	8004c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049bc:	4a06      	ldr	r2, [pc, #24]	@ (80049d8 <HAL_InitTick+0x5c>)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e000      	b.n	80049c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20004e7c 	.word	0x20004e7c
 80049d4:	20004ed0 	.word	0x20004ed0
 80049d8:	20004ecc 	.word	0x20004ecc

080049dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049e0:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <HAL_IncTick+0x20>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	4b06      	ldr	r3, [pc, #24]	@ (8004a00 <HAL_IncTick+0x24>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4413      	add	r3, r2
 80049ec:	4a04      	ldr	r2, [pc, #16]	@ (8004a00 <HAL_IncTick+0x24>)
 80049ee:	6013      	str	r3, [r2, #0]
}
 80049f0:	bf00      	nop
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20004ed0 	.word	0x20004ed0
 8004a00:	200054fc 	.word	0x200054fc

08004a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return uwTick;
 8004a08:	4b03      	ldr	r3, [pc, #12]	@ (8004a18 <HAL_GetTick+0x14>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	200054fc 	.word	0x200054fc

08004a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a24:	f7ff ffee 	bl	8004a04 <HAL_GetTick>
 8004a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a34:	d005      	beq.n	8004a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a36:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <HAL_Delay+0x44>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4413      	add	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a42:	bf00      	nop
 8004a44:	f7ff ffde 	bl	8004a04 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d8f7      	bhi.n	8004a44 <HAL_Delay+0x28>
  {
  }
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20004ed0 	.word	0x20004ed0

08004a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a74:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a80:	4013      	ands	r3, r2
 8004a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a92:	4a04      	ldr	r2, [pc, #16]	@ (8004aa4 <__NVIC_SetPriorityGrouping+0x40>)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	60d3      	str	r3, [r2, #12]
}
 8004a98:	bf00      	nop
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	e000ed00 	.word	0xe000ed00
 8004aa8:	05fa0000 	.word	0x05fa0000

08004aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab0:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	f003 0307 	and.w	r3, r3, #7
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	e000ed00 	.word	0xe000ed00

08004ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	db0b      	blt.n	8004af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	f003 021f 	and.w	r2, r3, #31
 8004ae0:	4907      	ldr	r1, [pc, #28]	@ (8004b00 <__NVIC_EnableIRQ+0x38>)
 8004ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	2001      	movs	r0, #1
 8004aea:	fa00 f202 	lsl.w	r2, r0, r2
 8004aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	e000e100 	.word	0xe000e100

08004b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	6039      	str	r1, [r7, #0]
 8004b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	db0a      	blt.n	8004b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	490c      	ldr	r1, [pc, #48]	@ (8004b50 <__NVIC_SetPriority+0x4c>)
 8004b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b22:	0112      	lsls	r2, r2, #4
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	440b      	add	r3, r1
 8004b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b2c:	e00a      	b.n	8004b44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4908      	ldr	r1, [pc, #32]	@ (8004b54 <__NVIC_SetPriority+0x50>)
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	3b04      	subs	r3, #4
 8004b3c:	0112      	lsls	r2, r2, #4
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	440b      	add	r3, r1
 8004b42:	761a      	strb	r2, [r3, #24]
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	e000e100 	.word	0xe000e100
 8004b54:	e000ed00 	.word	0xe000ed00

08004b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b089      	sub	sp, #36	@ 0x24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f1c3 0307 	rsb	r3, r3, #7
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	bf28      	it	cs
 8004b76:	2304      	movcs	r3, #4
 8004b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	2b06      	cmp	r3, #6
 8004b80:	d902      	bls.n	8004b88 <NVIC_EncodePriority+0x30>
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3b03      	subs	r3, #3
 8004b86:	e000      	b.n	8004b8a <NVIC_EncodePriority+0x32>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43da      	mvns	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	401a      	ands	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8004baa:	43d9      	mvns	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb0:	4313      	orrs	r3, r2
         );
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3724      	adds	r7, #36	@ 0x24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bd0:	d301      	bcc.n	8004bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e00f      	b.n	8004bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c00 <SysTick_Config+0x40>)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bde:	210f      	movs	r1, #15
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	f7ff ff8e 	bl	8004b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004be8:	4b05      	ldr	r3, [pc, #20]	@ (8004c00 <SysTick_Config+0x40>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bee:	4b04      	ldr	r3, [pc, #16]	@ (8004c00 <SysTick_Config+0x40>)
 8004bf0:	2207      	movs	r2, #7
 8004bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	e000e010 	.word	0xe000e010

08004c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff ff29 	bl	8004a64 <__NVIC_SetPriorityGrouping>
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b086      	sub	sp, #24
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	4603      	mov	r3, r0
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	607a      	str	r2, [r7, #4]
 8004c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c2c:	f7ff ff3e 	bl	8004aac <__NVIC_GetPriorityGrouping>
 8004c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	6978      	ldr	r0, [r7, #20]
 8004c38:	f7ff ff8e 	bl	8004b58 <NVIC_EncodePriority>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c42:	4611      	mov	r1, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ff5d 	bl	8004b04 <__NVIC_SetPriority>
}
 8004c4a:	bf00      	nop
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	4603      	mov	r3, r0
 8004c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff31 	bl	8004ac8 <__NVIC_EnableIRQ>
}
 8004c66:	bf00      	nop
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b082      	sub	sp, #8
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff ffa2 	bl	8004bc0 <SysTick_Config>
 8004c7c:	4603      	mov	r3, r0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c94:	f7ff feb6 	bl	8004a04 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e099      	b.n	8004dd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cc4:	e00f      	b.n	8004ce6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cc6:	f7ff fe9d 	bl	8004a04 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b05      	cmp	r3, #5
 8004cd2:	d908      	bls.n	8004ce6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2203      	movs	r2, #3
 8004cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e078      	b.n	8004dd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e8      	bne.n	8004cc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4b38      	ldr	r3, [pc, #224]	@ (8004de0 <HAL_DMA_Init+0x158>)
 8004d00:	4013      	ands	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	691b      	ldr	r3, [r3, #16]
 8004d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d107      	bne.n	8004d50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f023 0307 	bic.w	r3, r3, #7
 8004d66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d117      	bne.n	8004daa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7e:	697a      	ldr	r2, [r7, #20]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00e      	beq.n	8004daa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f8bd 	bl	8004f0c <DMA_CheckFifoParam>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d008      	beq.n	8004daa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2240      	movs	r2, #64	@ 0x40
 8004d9c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004da6:	2301      	movs	r3, #1
 8004da8:	e016      	b.n	8004dd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f000 f874 	bl	8004ea0 <DMA_CalcBaseAndBitshift>
 8004db8:	4603      	mov	r3, r0
 8004dba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc0:	223f      	movs	r2, #63	@ 0x3f
 8004dc2:	409a      	lsls	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	f010803f 	.word	0xf010803f

08004de4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e050      	b.n	8004e98 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d101      	bne.n	8004e06 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
 8004e04:	e048      	b.n	8004e98 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f022 0201 	bic.w	r2, r2, #1
 8004e14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2200      	movs	r2, #0
 8004e24:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	2221      	movs	r2, #33	@ 0x21
 8004e44:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f82a 	bl	8004ea0 <DMA_CalcBaseAndBitshift>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e54:	223f      	movs	r2, #63	@ 0x3f
 8004e56:	409a      	lsls	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	3b10      	subs	r3, #16
 8004eb0:	4a13      	ldr	r2, [pc, #76]	@ (8004f00 <DMA_CalcBaseAndBitshift+0x60>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	091b      	lsrs	r3, r3, #4
 8004eb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004eba:	4a12      	ldr	r2, [pc, #72]	@ (8004f04 <DMA_CalcBaseAndBitshift+0x64>)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d908      	bls.n	8004ee0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f08 <DMA_CalcBaseAndBitshift+0x68>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	1d1a      	adds	r2, r3, #4
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ede:	e006      	b.n	8004eee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4b08      	ldr	r3, [pc, #32]	@ (8004f08 <DMA_CalcBaseAndBitshift+0x68>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	aaaaaaab 	.word	0xaaaaaaab
 8004f04:	0800e030 	.word	0x0800e030
 8004f08:	fffffc00 	.word	0xfffffc00

08004f0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d11f      	bne.n	8004f66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d856      	bhi.n	8004fda <DMA_CheckFifoParam+0xce>
 8004f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f34 <DMA_CheckFifoParam+0x28>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f57 	.word	0x08004f57
 8004f3c:	08004f45 	.word	0x08004f45
 8004f40:	08004fdb 	.word	0x08004fdb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d046      	beq.n	8004fde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f54:	e043      	b.n	8004fde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f5e:	d140      	bne.n	8004fe2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f64:	e03d      	b.n	8004fe2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f6e:	d121      	bne.n	8004fb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d837      	bhi.n	8004fe6 <DMA_CheckFifoParam+0xda>
 8004f76:	a201      	add	r2, pc, #4	@ (adr r2, 8004f7c <DMA_CheckFifoParam+0x70>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004f8d 	.word	0x08004f8d
 8004f80:	08004f93 	.word	0x08004f93
 8004f84:	08004f8d 	.word	0x08004f8d
 8004f88:	08004fa5 	.word	0x08004fa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f90:	e030      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d025      	beq.n	8004fea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa2:	e022      	b.n	8004fea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fac:	d11f      	bne.n	8004fee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004fb2:	e01c      	b.n	8004fee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d903      	bls.n	8004fc2 <DMA_CheckFifoParam+0xb6>
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	2b03      	cmp	r3, #3
 8004fbe:	d003      	beq.n	8004fc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004fc0:	e018      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc6:	e015      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00e      	beq.n	8004ff2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd8:	e00b      	b.n	8004ff2 <DMA_CheckFifoParam+0xe6>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e00a      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e008      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e006      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fe6:	bf00      	nop
 8004fe8:	e004      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8004fea:	bf00      	nop
 8004fec:	e002      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004fee:	bf00      	nop
 8004ff0:	e000      	b.n	8004ff4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ff2:	bf00      	nop
    }
  } 
  
  return status; 
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop

08005004 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d101      	bne.n	8005016 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e039      	b.n	800508a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d106      	bne.n	8005030 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fb faea 	bl	8000604 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2202      	movs	r2, #2
 8005034:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005054:	f023 0107 	bic.w	r1, r3, #7
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800506a:	4b0a      	ldr	r3, [pc, #40]	@ (8005094 <HAL_DMA2D_Init+0x90>)
 800506c:	4013      	ands	r3, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	68d1      	ldr	r1, [r2, #12]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6812      	ldr	r2, [r2, #0]
 8005076:	430b      	orrs	r3, r1
 8005078:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	ffffc000 	.word	0xffffc000

08005098 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_DMA2D_Start+0x1c>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e018      	b.n	80050e6 <HAL_DMA2D_Start+0x4e>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f988 	bl	80053e4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b086      	sub	sp, #24
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d056      	beq.n	80051b8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800510a:	f7ff fc7b 	bl	8004a04 <HAL_GetTick>
 800510e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005110:	e04b      	b.n	80051aa <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005120:	2b00      	cmp	r3, #0
 8005122:	d023      	beq.n	800516c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d005      	beq.n	800513a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005132:	f043 0202 	orr.w	r2, r3, #2
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005148:	f043 0201 	orr.w	r2, r3, #1
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2221      	movs	r2, #33	@ 0x21
 8005156:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2204      	movs	r2, #4
 800515c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e0a5      	b.n	80052b8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d01a      	beq.n	80051aa <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005174:	f7ff fc46 	bl	8004a04 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d302      	bcc.n	800518a <HAL_DMA2D_PollForTransfer+0x9c>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10f      	bne.n	80051aa <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800518e:	f043 0220 	orr.w	r2, r3, #32
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2203      	movs	r2, #3
 800519a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e086      	b.n	80052b8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 0302 	and.w	r3, r3, #2
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0ac      	beq.n	8005112 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d061      	beq.n	800529e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80051da:	f7ff fc13 	bl	8004a04 <HAL_GetTick>
 80051de:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80051e0:	e056      	b.n	8005290 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d02e      	beq.n	8005252 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005202:	f043 0204 	orr.w	r2, r3, #4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b00      	cmp	r3, #0
 8005212:	d005      	beq.n	8005220 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005218:	f043 0202 	orr.w	r2, r3, #2
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800522e:	f043 0201 	orr.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2229      	movs	r2, #41	@ 0x29
 800523c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2204      	movs	r2, #4
 8005242:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e032      	b.n	80052b8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d01a      	beq.n	8005290 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800525a:	f7ff fbd3 	bl	8004a04 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	683a      	ldr	r2, [r7, #0]
 8005266:	429a      	cmp	r2, r3
 8005268:	d302      	bcc.n	8005270 <HAL_DMA2D_PollForTransfer+0x182>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10f      	bne.n	8005290 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005274:	f043 0220 	orr.w	r2, r3, #32
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2203      	movs	r2, #3
 8005280:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e013      	b.n	80052b8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0a1      	beq.n	80051e2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2212      	movs	r2, #18
 80052a4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b087      	sub	sp, #28
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d101      	bne.n	80052e0 <HAL_DMA2D_ConfigLayer+0x20>
 80052dc:	2302      	movs	r3, #2
 80052de:	e079      	b.n	80053d4 <HAL_DMA2D_ConfigLayer+0x114>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	3318      	adds	r3, #24
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	4413      	add	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	041b      	lsls	r3, r3, #16
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800530a:	4b35      	ldr	r3, [pc, #212]	@ (80053e0 <HAL_DMA2D_ConfigLayer+0x120>)
 800530c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b0a      	cmp	r3, #10
 8005314:	d003      	beq.n	800531e <HAL_DMA2D_ConfigLayer+0x5e>
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b09      	cmp	r3, #9
 800531c:	d107      	bne.n	800532e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e005      	b.n	800533a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	061b      	lsls	r3, r3, #24
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d120      	bne.n	8005382 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	43db      	mvns	r3, r3
 800534a:	ea02 0103 	and.w	r1, r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	430a      	orrs	r2, r1
 8005356:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b0a      	cmp	r3, #10
 8005368:	d003      	beq.n	8005372 <HAL_DMA2D_ConfigLayer+0xb2>
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2b09      	cmp	r3, #9
 8005370:	d127      	bne.n	80053c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	68da      	ldr	r2, [r3, #12]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800537e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005380:	e01f      	b.n	80053c2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	43db      	mvns	r3, r3
 800538c:	ea02 0103 	and.w	r1, r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	430a      	orrs	r2, r1
 8005398:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b0a      	cmp	r3, #10
 80053aa:	d003      	beq.n	80053b4 <HAL_DMA2D_ConfigLayer+0xf4>
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	2b09      	cmp	r3, #9
 80053b2:	d106      	bne.n	80053c2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80053c0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	ff03000f 	.word	0xff03000f

080053e4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b08b      	sub	sp, #44	@ 0x2c
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053f8:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	041a      	lsls	r2, r3, #16
 8005400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005402:	431a      	orrs	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800541c:	d174      	bne.n	8005508 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005424:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800542c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005434:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d108      	bne.n	8005456 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005444:	69ba      	ldr	r2, [r7, #24]
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	431a      	orrs	r2, r3
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	4313      	orrs	r3, r2
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	4313      	orrs	r3, r2
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
 8005454:	e053      	b.n	80054fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d106      	bne.n	800546c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4313      	orrs	r3, r2
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
 800546a:	e048      	b.n	80054fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d111      	bne.n	8005498 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	0cdb      	lsrs	r3, r3, #19
 8005478:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	0a9b      	lsrs	r3, r3, #10
 800547e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	08db      	lsrs	r3, r3, #3
 8005484:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	02db      	lsls	r3, r3, #11
 800548e:	4313      	orrs	r3, r2
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
 8005496:	e032      	b.n	80054fe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	2b03      	cmp	r3, #3
 800549e:	d117      	bne.n	80054d0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	0fdb      	lsrs	r3, r3, #31
 80054a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	0cdb      	lsrs	r3, r3, #19
 80054aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	0adb      	lsrs	r3, r3, #11
 80054b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	08db      	lsrs	r3, r3, #3
 80054b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	029b      	lsls	r3, r3, #10
 80054c0:	431a      	orrs	r2, r3
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	03db      	lsls	r3, r3, #15
 80054c6:	4313      	orrs	r3, r2
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ce:	e016      	b.n	80054fe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	0f1b      	lsrs	r3, r3, #28
 80054d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	0d1b      	lsrs	r3, r3, #20
 80054da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	0b1b      	lsrs	r3, r3, #12
 80054e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	091b      	lsrs	r3, r3, #4
 80054e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	011a      	lsls	r2, r3, #4
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	431a      	orrs	r2, r3
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	031b      	lsls	r3, r3, #12
 80054f6:	4313      	orrs	r3, r2
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005504:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005506:	e003      	b.n	8005510 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	60da      	str	r2, [r3, #12]
}
 8005510:	bf00      	nop
 8005512:	372c      	adds	r7, #44	@ 0x2c
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800551c:	b480      	push	{r7}
 800551e:	b089      	sub	sp, #36	@ 0x24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800552e:	2300      	movs	r3, #0
 8005530:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005532:	2300      	movs	r3, #0
 8005534:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	e175      	b.n	8005828 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800553c:	2201      	movs	r2, #1
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	fa02 f303 	lsl.w	r3, r2, r3
 8005544:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4013      	ands	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	429a      	cmp	r2, r3
 8005556:	f040 8164 	bne.w	8005822 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	2b01      	cmp	r3, #1
 8005564:	d005      	beq.n	8005572 <HAL_GPIO_Init+0x56>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d130      	bne.n	80055d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	005b      	lsls	r3, r3, #1
 800557c:	2203      	movs	r2, #3
 800557e:	fa02 f303 	lsl.w	r3, r2, r3
 8005582:	43db      	mvns	r3, r3
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	4013      	ands	r3, r2
 8005588:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	fa02 f303 	lsl.w	r3, r2, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4313      	orrs	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055a8:	2201      	movs	r2, #1
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	43db      	mvns	r3, r3
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	4013      	ands	r3, r2
 80055b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 0201 	and.w	r2, r3, #1
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	fa02 f303 	lsl.w	r3, r2, r3
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	2b03      	cmp	r3, #3
 80055de:	d017      	beq.n	8005610 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	2203      	movs	r2, #3
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4013      	ands	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	4313      	orrs	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f003 0303 	and.w	r3, r3, #3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d123      	bne.n	8005664 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	08da      	lsrs	r2, r3, #3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	3208      	adds	r2, #8
 8005624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	220f      	movs	r2, #15
 8005634:	fa02 f303 	lsl.w	r3, r2, r3
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	691a      	ldr	r2, [r3, #16]
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	4313      	orrs	r3, r2
 8005654:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	08da      	lsrs	r2, r3, #3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3208      	adds	r2, #8
 800565e:	69b9      	ldr	r1, [r7, #24]
 8005660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	005b      	lsls	r3, r3, #1
 800566e:	2203      	movs	r2, #3
 8005670:	fa02 f303 	lsl.w	r3, r2, r3
 8005674:	43db      	mvns	r3, r3
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	4013      	ands	r3, r2
 800567a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0203 	and.w	r2, r3, #3
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	fa02 f303 	lsl.w	r3, r2, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	4313      	orrs	r3, r2
 8005690:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 80be 	beq.w	8005822 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056a6:	4b66      	ldr	r3, [pc, #408]	@ (8005840 <HAL_GPIO_Init+0x324>)
 80056a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056aa:	4a65      	ldr	r2, [pc, #404]	@ (8005840 <HAL_GPIO_Init+0x324>)
 80056ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80056b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80056b2:	4b63      	ldr	r3, [pc, #396]	@ (8005840 <HAL_GPIO_Init+0x324>)
 80056b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80056be:	4a61      	ldr	r2, [pc, #388]	@ (8005844 <HAL_GPIO_Init+0x328>)
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	089b      	lsrs	r3, r3, #2
 80056c4:	3302      	adds	r3, #2
 80056c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f003 0303 	and.w	r3, r3, #3
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	220f      	movs	r2, #15
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43db      	mvns	r3, r3
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	4013      	ands	r3, r2
 80056e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a58      	ldr	r2, [pc, #352]	@ (8005848 <HAL_GPIO_Init+0x32c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d037      	beq.n	800575a <HAL_GPIO_Init+0x23e>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a57      	ldr	r2, [pc, #348]	@ (800584c <HAL_GPIO_Init+0x330>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d031      	beq.n	8005756 <HAL_GPIO_Init+0x23a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a56      	ldr	r2, [pc, #344]	@ (8005850 <HAL_GPIO_Init+0x334>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02b      	beq.n	8005752 <HAL_GPIO_Init+0x236>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a55      	ldr	r2, [pc, #340]	@ (8005854 <HAL_GPIO_Init+0x338>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d025      	beq.n	800574e <HAL_GPIO_Init+0x232>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a54      	ldr	r2, [pc, #336]	@ (8005858 <HAL_GPIO_Init+0x33c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d01f      	beq.n	800574a <HAL_GPIO_Init+0x22e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a53      	ldr	r2, [pc, #332]	@ (800585c <HAL_GPIO_Init+0x340>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d019      	beq.n	8005746 <HAL_GPIO_Init+0x22a>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a52      	ldr	r2, [pc, #328]	@ (8005860 <HAL_GPIO_Init+0x344>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_GPIO_Init+0x226>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a51      	ldr	r2, [pc, #324]	@ (8005864 <HAL_GPIO_Init+0x348>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00d      	beq.n	800573e <HAL_GPIO_Init+0x222>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a50      	ldr	r2, [pc, #320]	@ (8005868 <HAL_GPIO_Init+0x34c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d007      	beq.n	800573a <HAL_GPIO_Init+0x21e>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a4f      	ldr	r2, [pc, #316]	@ (800586c <HAL_GPIO_Init+0x350>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d101      	bne.n	8005736 <HAL_GPIO_Init+0x21a>
 8005732:	2309      	movs	r3, #9
 8005734:	e012      	b.n	800575c <HAL_GPIO_Init+0x240>
 8005736:	230a      	movs	r3, #10
 8005738:	e010      	b.n	800575c <HAL_GPIO_Init+0x240>
 800573a:	2308      	movs	r3, #8
 800573c:	e00e      	b.n	800575c <HAL_GPIO_Init+0x240>
 800573e:	2307      	movs	r3, #7
 8005740:	e00c      	b.n	800575c <HAL_GPIO_Init+0x240>
 8005742:	2306      	movs	r3, #6
 8005744:	e00a      	b.n	800575c <HAL_GPIO_Init+0x240>
 8005746:	2305      	movs	r3, #5
 8005748:	e008      	b.n	800575c <HAL_GPIO_Init+0x240>
 800574a:	2304      	movs	r3, #4
 800574c:	e006      	b.n	800575c <HAL_GPIO_Init+0x240>
 800574e:	2303      	movs	r3, #3
 8005750:	e004      	b.n	800575c <HAL_GPIO_Init+0x240>
 8005752:	2302      	movs	r3, #2
 8005754:	e002      	b.n	800575c <HAL_GPIO_Init+0x240>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <HAL_GPIO_Init+0x240>
 800575a:	2300      	movs	r3, #0
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	f002 0203 	and.w	r2, r2, #3
 8005762:	0092      	lsls	r2, r2, #2
 8005764:	4093      	lsls	r3, r2
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800576c:	4935      	ldr	r1, [pc, #212]	@ (8005844 <HAL_GPIO_Init+0x328>)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	089b      	lsrs	r3, r3, #2
 8005772:	3302      	adds	r3, #2
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800577a:	4b3d      	ldr	r3, [pc, #244]	@ (8005870 <HAL_GPIO_Init+0x354>)
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	43db      	mvns	r3, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4013      	ands	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d003      	beq.n	800579e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800579e:	4a34      	ldr	r2, [pc, #208]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057a4:	4b32      	ldr	r3, [pc, #200]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	43db      	mvns	r3, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4013      	ands	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057c8:	4a29      	ldr	r2, [pc, #164]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80057ce:	4b28      	ldr	r3, [pc, #160]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	43db      	mvns	r3, r3
 80057d8:	69ba      	ldr	r2, [r7, #24]
 80057da:	4013      	ands	r3, r2
 80057dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80057ea:	69ba      	ldr	r2, [r7, #24]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80057f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80057f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005870 <HAL_GPIO_Init+0x354>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800581c:	4a14      	ldr	r2, [pc, #80]	@ (8005870 <HAL_GPIO_Init+0x354>)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	3301      	adds	r3, #1
 8005826:	61fb      	str	r3, [r7, #28]
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b0f      	cmp	r3, #15
 800582c:	f67f ae86 	bls.w	800553c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005830:	bf00      	nop
 8005832:	bf00      	nop
 8005834:	3724      	adds	r7, #36	@ 0x24
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	40023800 	.word	0x40023800
 8005844:	40013800 	.word	0x40013800
 8005848:	40020000 	.word	0x40020000
 800584c:	40020400 	.word	0x40020400
 8005850:	40020800 	.word	0x40020800
 8005854:	40020c00 	.word	0x40020c00
 8005858:	40021000 	.word	0x40021000
 800585c:	40021400 	.word	0x40021400
 8005860:	40021800 	.word	0x40021800
 8005864:	40021c00 	.word	0x40021c00
 8005868:	40022000 	.word	0x40022000
 800586c:	40022400 	.word	0x40022400
 8005870:	40013c00 	.word	0x40013c00

08005874 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005886:	2300      	movs	r3, #0
 8005888:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e0d9      	b.n	8005a44 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005890:	2201      	movs	r2, #1
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	fa02 f303 	lsl.w	r3, r2, r3
 8005898:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800589a:	683a      	ldr	r2, [r7, #0]
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	4013      	ands	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]

    if (iocurrent == ioposition)
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	f040 80c9 	bne.w	8005a3e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80058ac:	4a6b      	ldr	r2, [pc, #428]	@ (8005a5c <HAL_GPIO_DeInit+0x1e8>)
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	089b      	lsrs	r3, r3, #2
 80058b2:	3302      	adds	r3, #2
 80058b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058b8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	220f      	movs	r2, #15
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	4013      	ands	r3, r2
 80058cc:	60bb      	str	r3, [r7, #8]
      if (tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a63      	ldr	r2, [pc, #396]	@ (8005a60 <HAL_GPIO_DeInit+0x1ec>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d037      	beq.n	8005946 <HAL_GPIO_DeInit+0xd2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a62      	ldr	r2, [pc, #392]	@ (8005a64 <HAL_GPIO_DeInit+0x1f0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d031      	beq.n	8005942 <HAL_GPIO_DeInit+0xce>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a61      	ldr	r2, [pc, #388]	@ (8005a68 <HAL_GPIO_DeInit+0x1f4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d02b      	beq.n	800593e <HAL_GPIO_DeInit+0xca>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a60      	ldr	r2, [pc, #384]	@ (8005a6c <HAL_GPIO_DeInit+0x1f8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d025      	beq.n	800593a <HAL_GPIO_DeInit+0xc6>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a5f      	ldr	r2, [pc, #380]	@ (8005a70 <HAL_GPIO_DeInit+0x1fc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d01f      	beq.n	8005936 <HAL_GPIO_DeInit+0xc2>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a5e      	ldr	r2, [pc, #376]	@ (8005a74 <HAL_GPIO_DeInit+0x200>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d019      	beq.n	8005932 <HAL_GPIO_DeInit+0xbe>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a5d      	ldr	r2, [pc, #372]	@ (8005a78 <HAL_GPIO_DeInit+0x204>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <HAL_GPIO_DeInit+0xba>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a5c      	ldr	r2, [pc, #368]	@ (8005a7c <HAL_GPIO_DeInit+0x208>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00d      	beq.n	800592a <HAL_GPIO_DeInit+0xb6>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a5b      	ldr	r2, [pc, #364]	@ (8005a80 <HAL_GPIO_DeInit+0x20c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d007      	beq.n	8005926 <HAL_GPIO_DeInit+0xb2>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a5a      	ldr	r2, [pc, #360]	@ (8005a84 <HAL_GPIO_DeInit+0x210>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d101      	bne.n	8005922 <HAL_GPIO_DeInit+0xae>
 800591e:	2309      	movs	r3, #9
 8005920:	e012      	b.n	8005948 <HAL_GPIO_DeInit+0xd4>
 8005922:	230a      	movs	r3, #10
 8005924:	e010      	b.n	8005948 <HAL_GPIO_DeInit+0xd4>
 8005926:	2308      	movs	r3, #8
 8005928:	e00e      	b.n	8005948 <HAL_GPIO_DeInit+0xd4>
 800592a:	2307      	movs	r3, #7
 800592c:	e00c      	b.n	8005948 <HAL_GPIO_DeInit+0xd4>
 800592e:	2306      	movs	r3, #6
 8005930:	e00a      	b.n	8005948 <HAL_GPIO_DeInit+0xd4>
 8005932:	2305      	movs	r3, #5
 8005934:	e008      	b.n	8005948 <HAL_GPIO_DeInit+0xd4>
 8005936:	2304      	movs	r3, #4
 8005938:	e006      	b.n	8005948 <HAL_GPIO_DeInit+0xd4>
 800593a:	2303      	movs	r3, #3
 800593c:	e004      	b.n	8005948 <HAL_GPIO_DeInit+0xd4>
 800593e:	2302      	movs	r3, #2
 8005940:	e002      	b.n	8005948 <HAL_GPIO_DeInit+0xd4>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <HAL_GPIO_DeInit+0xd4>
 8005946:	2300      	movs	r3, #0
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	f002 0203 	and.w	r2, r2, #3
 800594e:	0092      	lsls	r2, r2, #2
 8005950:	4093      	lsls	r3, r2
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	429a      	cmp	r2, r3
 8005956:	d132      	bne.n	80059be <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005958:	4b4b      	ldr	r3, [pc, #300]	@ (8005a88 <HAL_GPIO_DeInit+0x214>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	43db      	mvns	r3, r3
 8005960:	4949      	ldr	r1, [pc, #292]	@ (8005a88 <HAL_GPIO_DeInit+0x214>)
 8005962:	4013      	ands	r3, r2
 8005964:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005966:	4b48      	ldr	r3, [pc, #288]	@ (8005a88 <HAL_GPIO_DeInit+0x214>)
 8005968:	685a      	ldr	r2, [r3, #4]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	43db      	mvns	r3, r3
 800596e:	4946      	ldr	r1, [pc, #280]	@ (8005a88 <HAL_GPIO_DeInit+0x214>)
 8005970:	4013      	ands	r3, r2
 8005972:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005974:	4b44      	ldr	r3, [pc, #272]	@ (8005a88 <HAL_GPIO_DeInit+0x214>)
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	43db      	mvns	r3, r3
 800597c:	4942      	ldr	r1, [pc, #264]	@ (8005a88 <HAL_GPIO_DeInit+0x214>)
 800597e:	4013      	ands	r3, r2
 8005980:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005982:	4b41      	ldr	r3, [pc, #260]	@ (8005a88 <HAL_GPIO_DeInit+0x214>)
 8005984:	689a      	ldr	r2, [r3, #8]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	43db      	mvns	r3, r3
 800598a:	493f      	ldr	r1, [pc, #252]	@ (8005a88 <HAL_GPIO_DeInit+0x214>)
 800598c:	4013      	ands	r3, r2
 800598e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	220f      	movs	r2, #15
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80059a0:	4a2e      	ldr	r2, [pc, #184]	@ (8005a5c <HAL_GPIO_DeInit+0x1e8>)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	089b      	lsrs	r3, r3, #2
 80059a6:	3302      	adds	r3, #2
 80059a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	43da      	mvns	r2, r3
 80059b0:	482a      	ldr	r0, [pc, #168]	@ (8005a5c <HAL_GPIO_DeInit+0x1e8>)
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	089b      	lsrs	r3, r3, #2
 80059b6:	400a      	ands	r2, r1
 80059b8:	3302      	adds	r3, #2
 80059ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	2103      	movs	r1, #3
 80059c8:	fa01 f303 	lsl.w	r3, r1, r3
 80059cc:	43db      	mvns	r3, r3
 80059ce:	401a      	ands	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	08da      	lsrs	r2, r3, #3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3208      	adds	r2, #8
 80059dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	220f      	movs	r2, #15
 80059ea:	fa02 f303 	lsl.w	r3, r2, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	08d2      	lsrs	r2, r2, #3
 80059f4:	4019      	ands	r1, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	3208      	adds	r2, #8
 80059fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	2103      	movs	r1, #3
 8005a08:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	401a      	ands	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	2101      	movs	r1, #1
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a20:	43db      	mvns	r3, r3
 8005a22:	401a      	ands	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	2103      	movs	r1, #3
 8005a32:	fa01 f303 	lsl.w	r3, r1, r3
 8005a36:	43db      	mvns	r3, r3
 8005a38:	401a      	ands	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	609a      	str	r2, [r3, #8]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	3301      	adds	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2b0f      	cmp	r3, #15
 8005a48:	f67f af22 	bls.w	8005890 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	40013800 	.word	0x40013800
 8005a60:	40020000 	.word	0x40020000
 8005a64:	40020400 	.word	0x40020400
 8005a68:	40020800 	.word	0x40020800
 8005a6c:	40020c00 	.word	0x40020c00
 8005a70:	40021000 	.word	0x40021000
 8005a74:	40021400 	.word	0x40021400
 8005a78:	40021800 	.word	0x40021800
 8005a7c:	40021c00 	.word	0x40021c00
 8005a80:	40022000 	.word	0x40022000
 8005a84:	40022400 	.word	0x40022400
 8005a88:	40013c00 	.word	0x40013c00

08005a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	807b      	strh	r3, [r7, #2]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a9c:	787b      	ldrb	r3, [r7, #1]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005aa2:	887a      	ldrh	r2, [r7, #2]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005aa8:	e003      	b.n	8005ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005aaa:	887b      	ldrh	r3, [r7, #2]
 8005aac:	041a      	lsls	r2, r3, #16
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	619a      	str	r2, [r3, #24]
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr
	...

08005ac0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e08b      	b.n	8005bea <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fa fffc 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2224      	movs	r2, #36	@ 0x24
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d107      	bne.n	8005b3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	689a      	ldr	r2, [r3, #8]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b36:	609a      	str	r2, [r3, #8]
 8005b38:	e006      	b.n	8005b48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689a      	ldr	r2, [r3, #8]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005b46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	d108      	bne.n	8005b62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b5e:	605a      	str	r2, [r3, #4]
 8005b60:	e007      	b.n	8005b72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6859      	ldr	r1, [r3, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bf4 <HAL_I2C_Init+0x134>)
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b90:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69d9      	ldr	r1, [r3, #28]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a1a      	ldr	r2, [r3, #32]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	02008000 	.word	0x02008000

08005bf8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e021      	b.n	8005c4e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2224      	movs	r2, #36	@ 0x24
 8005c0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0201 	bic.w	r2, r2, #1
 8005c20:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fa ffbe 	bl	8000ba4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b088      	sub	sp, #32
 8005c5c:	af02      	add	r7, sp, #8
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	4608      	mov	r0, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	461a      	mov	r2, r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	817b      	strh	r3, [r7, #10]
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	813b      	strh	r3, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b20      	cmp	r3, #32
 8005c7c:	f040 80f9 	bne.w	8005e72 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d002      	beq.n	8005c8c <HAL_I2C_Mem_Write+0x34>
 8005c86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d105      	bne.n	8005c98 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e0ed      	b.n	8005e74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d101      	bne.n	8005ca6 <HAL_I2C_Mem_Write+0x4e>
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	e0e6      	b.n	8005e74 <HAL_I2C_Mem_Write+0x21c>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005cae:	f7fe fea9 	bl	8004a04 <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	2319      	movs	r3, #25
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f000 fad1 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0d1      	b.n	8005e74 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2221      	movs	r2, #33	@ 0x21
 8005cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2240      	movs	r2, #64	@ 0x40
 8005cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a3a      	ldr	r2, [r7, #32]
 8005cea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005cf8:	88f8      	ldrh	r0, [r7, #6]
 8005cfa:	893a      	ldrh	r2, [r7, #8]
 8005cfc:	8979      	ldrh	r1, [r7, #10]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	9301      	str	r3, [sp, #4]
 8005d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	4603      	mov	r3, r0
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f9e1 	bl	80060d0 <I2C_RequestMemoryWrite>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e0a9      	b.n	8005e74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2bff      	cmp	r3, #255	@ 0xff
 8005d28:	d90e      	bls.n	8005d48 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	22ff      	movs	r2, #255	@ 0xff
 8005d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d34:	b2da      	uxtb	r2, r3
 8005d36:	8979      	ldrh	r1, [r7, #10]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 fc55 	bl	80065f0 <I2C_TransferConfig>
 8005d46:	e00f      	b.n	8005d68 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	8979      	ldrh	r1, [r7, #10]
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f000 fc44 	bl	80065f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 fad4 	bl	800631a <I2C_WaitOnTXISFlagUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e07b      	b.n	8005e74 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d80:	781a      	ldrb	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8c:	1c5a      	adds	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d034      	beq.n	8005e20 <HAL_I2C_Mem_Write+0x1c8>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d130      	bne.n	8005e20 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	9300      	str	r3, [sp, #0]
 8005dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	2180      	movs	r1, #128	@ 0x80
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 fa4d 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e04d      	b.n	8005e74 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	2bff      	cmp	r3, #255	@ 0xff
 8005de0:	d90e      	bls.n	8005e00 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	22ff      	movs	r2, #255	@ 0xff
 8005de6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	8979      	ldrh	r1, [r7, #10]
 8005df0:	2300      	movs	r3, #0
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 fbf9 	bl	80065f0 <I2C_TransferConfig>
 8005dfe:	e00f      	b.n	8005e20 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	8979      	ldrh	r1, [r7, #10]
 8005e12:	2300      	movs	r3, #0
 8005e14:	9300      	str	r3, [sp, #0]
 8005e16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fbe8 	bl	80065f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d19e      	bne.n	8005d68 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 faba 	bl	80063a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e01a      	b.n	8005e74 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2220      	movs	r2, #32
 8005e44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	6859      	ldr	r1, [r3, #4]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4b0a      	ldr	r3, [pc, #40]	@ (8005e7c <HAL_I2C_Mem_Write+0x224>)
 8005e52:	400b      	ands	r3, r1
 8005e54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e000      	b.n	8005e74 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005e72:	2302      	movs	r3, #2
  }
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	fe00e800 	.word	0xfe00e800

08005e80 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b088      	sub	sp, #32
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	4608      	mov	r0, r1
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4603      	mov	r3, r0
 8005e90:	817b      	strh	r3, [r7, #10]
 8005e92:	460b      	mov	r3, r1
 8005e94:	813b      	strh	r3, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	f040 80fd 	bne.w	80060a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_I2C_Mem_Read+0x34>
 8005eae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d105      	bne.n	8005ec0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eba:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0f1      	b.n	80060a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d101      	bne.n	8005ece <HAL_I2C_Mem_Read+0x4e>
 8005eca:	2302      	movs	r3, #2
 8005ecc:	e0ea      	b.n	80060a4 <HAL_I2C_Mem_Read+0x224>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ed6:	f7fe fd95 	bl	8004a04 <HAL_GetTick>
 8005eda:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	2319      	movs	r3, #25
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f9bd 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0d5      	b.n	80060a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2222      	movs	r2, #34	@ 0x22
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2240      	movs	r2, #64	@ 0x40
 8005f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a3a      	ldr	r2, [r7, #32]
 8005f12:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f20:	88f8      	ldrh	r0, [r7, #6]
 8005f22:	893a      	ldrh	r2, [r7, #8]
 8005f24:	8979      	ldrh	r1, [r7, #10]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	4603      	mov	r3, r0
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f921 	bl	8006178 <I2C_RequestMemoryRead>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0ad      	b.n	80060a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2bff      	cmp	r3, #255	@ 0xff
 8005f50:	d90e      	bls.n	8005f70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2201      	movs	r2, #1
 8005f56:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f5c:	b2da      	uxtb	r2, r3
 8005f5e:	8979      	ldrh	r1, [r7, #10]
 8005f60:	4b52      	ldr	r3, [pc, #328]	@ (80060ac <HAL_I2C_Mem_Read+0x22c>)
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fb41 	bl	80065f0 <I2C_TransferConfig>
 8005f6e:	e00f      	b.n	8005f90 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f74:	b29a      	uxth	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f7e:	b2da      	uxtb	r2, r3
 8005f80:	8979      	ldrh	r1, [r7, #10]
 8005f82:	4b4a      	ldr	r3, [pc, #296]	@ (80060ac <HAL_I2C_Mem_Read+0x22c>)
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 fb30 	bl	80065f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	9300      	str	r3, [sp, #0]
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	2200      	movs	r2, #0
 8005f98:	2104      	movs	r1, #4
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 f964 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e07c      	b.n	80060a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d034      	beq.n	8006050 <HAL_I2C_Mem_Read+0x1d0>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d130      	bne.n	8006050 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	2180      	movs	r1, #128	@ 0x80
 8005ff8:	68f8      	ldr	r0, [r7, #12]
 8005ffa:	f000 f935 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d001      	beq.n	8006008 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e04d      	b.n	80060a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600c:	b29b      	uxth	r3, r3
 800600e:	2bff      	cmp	r3, #255	@ 0xff
 8006010:	d90e      	bls.n	8006030 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800601c:	b2da      	uxtb	r2, r3
 800601e:	8979      	ldrh	r1, [r7, #10]
 8006020:	2300      	movs	r3, #0
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f000 fae1 	bl	80065f0 <I2C_TransferConfig>
 800602e:	e00f      	b.n	8006050 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800603e:	b2da      	uxtb	r2, r3
 8006040:	8979      	ldrh	r1, [r7, #10]
 8006042:	2300      	movs	r3, #0
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 fad0 	bl	80065f0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d19a      	bne.n	8005f90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	f000 f9a2 	bl	80063a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e01a      	b.n	80060a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2220      	movs	r2, #32
 8006074:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6859      	ldr	r1, [r3, #4]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	4b0b      	ldr	r3, [pc, #44]	@ (80060b0 <HAL_I2C_Mem_Read+0x230>)
 8006082:	400b      	ands	r3, r1
 8006084:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800609e:	2300      	movs	r3, #0
 80060a0:	e000      	b.n	80060a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80060a2:	2302      	movs	r3, #2
  }
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	80002400 	.word	0x80002400
 80060b0:	fe00e800 	.word	0xfe00e800

080060b4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c2:	b2db      	uxtb	r3, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af02      	add	r7, sp, #8
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	4608      	mov	r0, r1
 80060da:	4611      	mov	r1, r2
 80060dc:	461a      	mov	r2, r3
 80060de:	4603      	mov	r3, r0
 80060e0:	817b      	strh	r3, [r7, #10]
 80060e2:	460b      	mov	r3, r1
 80060e4:	813b      	strh	r3, [r7, #8]
 80060e6:	4613      	mov	r3, r2
 80060e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80060ea:	88fb      	ldrh	r3, [r7, #6]
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	8979      	ldrh	r1, [r7, #10]
 80060f0:	4b20      	ldr	r3, [pc, #128]	@ (8006174 <I2C_RequestMemoryWrite+0xa4>)
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 fa79 	bl	80065f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060fe:	69fa      	ldr	r2, [r7, #28]
 8006100:	69b9      	ldr	r1, [r7, #24]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f909 	bl	800631a <I2C_WaitOnTXISFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e02c      	b.n	800616c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006112:	88fb      	ldrh	r3, [r7, #6]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d105      	bne.n	8006124 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006118:	893b      	ldrh	r3, [r7, #8]
 800611a:	b2da      	uxtb	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	629a      	str	r2, [r3, #40]	@ 0x28
 8006122:	e015      	b.n	8006150 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006124:	893b      	ldrh	r3, [r7, #8]
 8006126:	0a1b      	lsrs	r3, r3, #8
 8006128:	b29b      	uxth	r3, r3
 800612a:	b2da      	uxtb	r2, r3
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006132:	69fa      	ldr	r2, [r7, #28]
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f8ef 	bl	800631a <I2C_WaitOnTXISFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d001      	beq.n	8006146 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e012      	b.n	800616c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006146:	893b      	ldrh	r3, [r7, #8]
 8006148:	b2da      	uxtb	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	2200      	movs	r2, #0
 8006158:	2180      	movs	r1, #128	@ 0x80
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 f884 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	80002000 	.word	0x80002000

08006178 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af02      	add	r7, sp, #8
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	4608      	mov	r0, r1
 8006182:	4611      	mov	r1, r2
 8006184:	461a      	mov	r2, r3
 8006186:	4603      	mov	r3, r0
 8006188:	817b      	strh	r3, [r7, #10]
 800618a:	460b      	mov	r3, r1
 800618c:	813b      	strh	r3, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	b2da      	uxtb	r2, r3
 8006196:	8979      	ldrh	r1, [r7, #10]
 8006198:	4b20      	ldr	r3, [pc, #128]	@ (800621c <I2C_RequestMemoryRead+0xa4>)
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	2300      	movs	r3, #0
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 fa26 	bl	80065f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061a4:	69fa      	ldr	r2, [r7, #28]
 80061a6:	69b9      	ldr	r1, [r7, #24]
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f000 f8b6 	bl	800631a <I2C_WaitOnTXISFlagUntilTimeout>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e02c      	b.n	8006212 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061b8:	88fb      	ldrh	r3, [r7, #6]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d105      	bne.n	80061ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061be:	893b      	ldrh	r3, [r7, #8]
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80061c8:	e015      	b.n	80061f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80061ca:	893b      	ldrh	r3, [r7, #8]
 80061cc:	0a1b      	lsrs	r3, r3, #8
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	b2da      	uxtb	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	69b9      	ldr	r1, [r7, #24]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f89c 	bl	800631a <I2C_WaitOnTXISFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e012      	b.n	8006212 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80061ec:	893b      	ldrh	r3, [r7, #8]
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	2200      	movs	r2, #0
 80061fe:	2140      	movs	r1, #64	@ 0x40
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f831 	bl	8006268 <I2C_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	80002000 	.word	0x80002000

08006220 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f003 0302 	and.w	r3, r3, #2
 8006232:	2b02      	cmp	r3, #2
 8006234:	d103      	bne.n	800623e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b01      	cmp	r3, #1
 800624a:	d007      	beq.n	800625c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	619a      	str	r2, [r3, #24]
  }
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	4613      	mov	r3, r2
 8006276:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006278:	e03b      	b.n	80062f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	6839      	ldr	r1, [r7, #0]
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f000 f8d6 	bl	8006430 <I2C_IsErrorOccurred>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e041      	b.n	8006312 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006294:	d02d      	beq.n	80062f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006296:	f7fe fbb5 	bl	8004a04 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d302      	bcc.n	80062ac <I2C_WaitOnFlagUntilTimeout+0x44>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d122      	bne.n	80062f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	68ba      	ldr	r2, [r7, #8]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	79fb      	ldrb	r3, [r7, #7]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d113      	bne.n	80062f2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ce:	f043 0220 	orr.w	r2, r3, #32
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e00f      	b.n	8006312 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4013      	ands	r3, r2
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	429a      	cmp	r2, r3
 8006300:	bf0c      	ite	eq
 8006302:	2301      	moveq	r3, #1
 8006304:	2300      	movne	r3, #0
 8006306:	b2db      	uxtb	r3, r3
 8006308:	461a      	mov	r2, r3
 800630a:	79fb      	ldrb	r3, [r7, #7]
 800630c:	429a      	cmp	r2, r3
 800630e:	d0b4      	beq.n	800627a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006326:	e033      	b.n	8006390 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f87f 	bl	8006430 <I2C_IsErrorOccurred>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d001      	beq.n	800633c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e031      	b.n	80063a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	d025      	beq.n	8006390 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006344:	f7fe fb5e 	bl	8004a04 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	429a      	cmp	r2, r3
 8006352:	d302      	bcc.n	800635a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d11a      	bne.n	8006390 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b02      	cmp	r3, #2
 8006366:	d013      	beq.n	8006390 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636c:	f043 0220 	orr.w	r2, r3, #32
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e007      	b.n	80063a0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b02      	cmp	r3, #2
 800639c:	d1c4      	bne.n	8006328 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063b4:	e02f      	b.n	8006416 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	68b9      	ldr	r1, [r7, #8]
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 f838 	bl	8006430 <I2C_IsErrorOccurred>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e02d      	b.n	8006426 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063ca:	f7fe fb1b 	bl	8004a04 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d302      	bcc.n	80063e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d11a      	bne.n	8006416 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d013      	beq.n	8006416 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063f2:	f043 0220 	orr.w	r2, r3, #32
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e007      	b.n	8006426 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	f003 0320 	and.w	r3, r3, #32
 8006420:	2b20      	cmp	r3, #32
 8006422:	d1c8      	bne.n	80063b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
	...

08006430 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	@ 0x28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	f003 0310 	and.w	r3, r3, #16
 8006458:	2b00      	cmp	r3, #0
 800645a:	d068      	beq.n	800652e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2210      	movs	r2, #16
 8006462:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006464:	e049      	b.n	80064fa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800646c:	d045      	beq.n	80064fa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800646e:	f7fe fac9 	bl	8004a04 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	429a      	cmp	r2, r3
 800647c:	d302      	bcc.n	8006484 <I2C_IsErrorOccurred+0x54>
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d13a      	bne.n	80064fa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800648e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006496:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699b      	ldr	r3, [r3, #24]
 800649e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064a6:	d121      	bne.n	80064ec <I2C_IsErrorOccurred+0xbc>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064ae:	d01d      	beq.n	80064ec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80064b0:	7cfb      	ldrb	r3, [r7, #19]
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d01a      	beq.n	80064ec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064c4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80064c6:	f7fe fa9d 	bl	8004a04 <HAL_GetTick>
 80064ca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064cc:	e00e      	b.n	80064ec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80064ce:	f7fe fa99 	bl	8004a04 <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b19      	cmp	r3, #25
 80064da:	d907      	bls.n	80064ec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	f043 0320 	orr.w	r3, r3, #32
 80064e2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80064ea:	e006      	b.n	80064fa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	f003 0320 	and.w	r3, r3, #32
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d1e9      	bne.n	80064ce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b20      	cmp	r3, #32
 8006506:	d003      	beq.n	8006510 <I2C_IsErrorOccurred+0xe0>
 8006508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0aa      	beq.n	8006466 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006510:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006514:	2b00      	cmp	r3, #0
 8006516:	d103      	bne.n	8006520 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2220      	movs	r2, #32
 800651e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	f043 0304 	orr.w	r3, r3, #4
 8006526:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006550:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00b      	beq.n	800657a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f043 0308 	orr.w	r3, r3, #8
 8006568:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006572:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	f043 0302 	orr.w	r3, r3, #2
 800658a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006594:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800659c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d01c      	beq.n	80065de <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f7ff fe3b 	bl	8006220 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6859      	ldr	r1, [r3, #4]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	4b0d      	ldr	r3, [pc, #52]	@ (80065ec <I2C_IsErrorOccurred+0x1bc>)
 80065b6:	400b      	ands	r3, r1
 80065b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	431a      	orrs	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80065de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3728      	adds	r7, #40	@ 0x28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	fe00e800 	.word	0xfe00e800

080065f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	607b      	str	r3, [r7, #4]
 80065fa:	460b      	mov	r3, r1
 80065fc:	817b      	strh	r3, [r7, #10]
 80065fe:	4613      	mov	r3, r2
 8006600:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006602:	897b      	ldrh	r3, [r7, #10]
 8006604:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006608:	7a7b      	ldrb	r3, [r7, #9]
 800660a:	041b      	lsls	r3, r3, #16
 800660c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006610:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	4313      	orrs	r3, r2
 800661a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800661e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	0d5b      	lsrs	r3, r3, #21
 800662a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800662e:	4b08      	ldr	r3, [pc, #32]	@ (8006650 <I2C_TransferConfig+0x60>)
 8006630:	430b      	orrs	r3, r1
 8006632:	43db      	mvns	r3, r3
 8006634:	ea02 0103 	and.w	r1, r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	03ff63ff 	.word	0x03ff63ff

08006654 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b20      	cmp	r3, #32
 8006668:	d138      	bne.n	80066dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006674:	2302      	movs	r3, #2
 8006676:	e032      	b.n	80066de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2224      	movs	r2, #36	@ 0x24
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f022 0201 	bic.w	r2, r2, #1
 8006696:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6819      	ldr	r1, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	430a      	orrs	r2, r1
 80066b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	e000      	b.n	80066de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066dc:	2302      	movs	r3, #2
  }
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b20      	cmp	r3, #32
 80066fe:	d139      	bne.n	8006774 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006706:	2b01      	cmp	r3, #1
 8006708:	d101      	bne.n	800670e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800670a:	2302      	movs	r3, #2
 800670c:	e033      	b.n	8006776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2224      	movs	r2, #36	@ 0x24
 800671a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0201 	bic.w	r2, r2, #1
 800672c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800673c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	e000      	b.n	8006776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006774:	2302      	movs	r3, #2
  }
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
	...

08006784 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e0bf      	b.n	8006916 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fa fa9e 	bl	8000cec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80067c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6999      	ldr	r1, [r3, #24]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80067dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6899      	ldr	r1, [r3, #8]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	4b4a      	ldr	r3, [pc, #296]	@ (8006920 <HAL_LTDC_Init+0x19c>)
 80067f8:	400b      	ands	r3, r1
 80067fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	695b      	ldr	r3, [r3, #20]
 8006800:	041b      	lsls	r3, r3, #16
 8006802:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6899      	ldr	r1, [r3, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68d9      	ldr	r1, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4b3e      	ldr	r3, [pc, #248]	@ (8006920 <HAL_LTDC_Init+0x19c>)
 8006826:	400b      	ands	r3, r1
 8006828:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	041b      	lsls	r3, r3, #16
 8006830:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68d9      	ldr	r1, [r3, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1a      	ldr	r2, [r3, #32]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	430a      	orrs	r2, r1
 8006846:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6919      	ldr	r1, [r3, #16]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	4b33      	ldr	r3, [pc, #204]	@ (8006920 <HAL_LTDC_Init+0x19c>)
 8006854:	400b      	ands	r3, r1
 8006856:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685c:	041b      	lsls	r3, r3, #16
 800685e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6919      	ldr	r1, [r3, #16]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	430a      	orrs	r2, r1
 8006874:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6959      	ldr	r1, [r3, #20]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b27      	ldr	r3, [pc, #156]	@ (8006920 <HAL_LTDC_Init+0x19c>)
 8006882:	400b      	ands	r3, r1
 8006884:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688a:	041b      	lsls	r3, r3, #16
 800688c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6959      	ldr	r1, [r3, #20]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80068b4:	041b      	lsls	r3, r3, #16
 80068b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80068c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80068da:	431a      	orrs	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0206 	orr.w	r2, r2, #6
 80068f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0201 	orr.w	r2, r2, #1
 8006902:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	f000f800 	.word	0xf000f800

08006924 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006924:	b5b0      	push	{r4, r5, r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <HAL_LTDC_ConfigLayer+0x1a>
 800693a:	2302      	movs	r3, #2
 800693c:	e02c      	b.n	8006998 <HAL_LTDC_ConfigLayer+0x74>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2202      	movs	r2, #2
 800694a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2134      	movs	r1, #52	@ 0x34
 8006954:	fb01 f303 	mul.w	r3, r1, r3
 8006958:	4413      	add	r3, r2
 800695a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	4614      	mov	r4, r2
 8006962:	461d      	mov	r5, r3
 8006964:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800696a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800696c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800696e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 f81f 	bl	80069bc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2201      	movs	r2, #1
 8006984:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bdb0      	pop	{r4, r5, r7, pc}

080069a0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80069ae:	b2db      	uxtb	r3, r3
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069bc:	b480      	push	{r7}
 80069be:	b089      	sub	sp, #36	@ 0x24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	0c1b      	lsrs	r3, r3, #16
 80069d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d8:	4413      	add	r3, r2
 80069da:	041b      	lsls	r3, r3, #16
 80069dc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	01db      	lsls	r3, r3, #7
 80069e8:	4413      	add	r3, r2
 80069ea:	3384      	adds	r3, #132	@ 0x84
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	4611      	mov	r1, r2
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	01d2      	lsls	r2, r2, #7
 80069f8:	440a      	add	r2, r1
 80069fa:	3284      	adds	r2, #132	@ 0x84
 80069fc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006a00:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	0c1b      	lsrs	r3, r3, #16
 8006a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a12:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a14:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	01db      	lsls	r3, r3, #7
 8006a20:	440b      	add	r3, r1
 8006a22:	3384      	adds	r3, #132	@ 0x84
 8006a24:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006a2a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68db      	ldr	r3, [r3, #12]
 8006a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a3a:	4413      	add	r3, r2
 8006a3c:	041b      	lsls	r3, r3, #16
 8006a3e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	461a      	mov	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	01db      	lsls	r3, r3, #7
 8006a4a:	4413      	add	r3, r2
 8006a4c:	3384      	adds	r3, #132	@ 0x84
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	6812      	ldr	r2, [r2, #0]
 8006a54:	4611      	mov	r1, r2
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	01d2      	lsls	r2, r2, #7
 8006a5a:	440a      	add	r2, r1
 8006a5c:	3284      	adds	r2, #132	@ 0x84
 8006a5e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006a62:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a72:	4413      	add	r3, r2
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	01db      	lsls	r3, r3, #7
 8006a80:	440b      	add	r3, r1
 8006a82:	3384      	adds	r3, #132	@ 0x84
 8006a84:	4619      	mov	r1, r3
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	01db      	lsls	r3, r3, #7
 8006a96:	4413      	add	r3, r2
 8006a98:	3384      	adds	r3, #132	@ 0x84
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	6812      	ldr	r2, [r2, #0]
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	01d2      	lsls	r2, r2, #7
 8006aa6:	440a      	add	r2, r1
 8006aa8:	3284      	adds	r2, #132	@ 0x84
 8006aaa:	f023 0307 	bic.w	r3, r3, #7
 8006aae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	01db      	lsls	r3, r3, #7
 8006aba:	4413      	add	r3, r2
 8006abc:	3384      	adds	r3, #132	@ 0x84
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006acc:	021b      	lsls	r3, r3, #8
 8006ace:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006ad6:	041b      	lsls	r3, r3, #16
 8006ad8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	061b      	lsls	r3, r3, #24
 8006ae0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	01db      	lsls	r3, r3, #7
 8006aec:	4413      	add	r3, r2
 8006aee:	3384      	adds	r3, #132	@ 0x84
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	01db      	lsls	r3, r3, #7
 8006afc:	4413      	add	r3, r2
 8006afe:	3384      	adds	r3, #132	@ 0x84
 8006b00:	461a      	mov	r2, r3
 8006b02:	2300      	movs	r3, #0
 8006b04:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	431a      	orrs	r2, r3
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	431a      	orrs	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	01db      	lsls	r3, r3, #7
 8006b20:	440b      	add	r3, r1
 8006b22:	3384      	adds	r3, #132	@ 0x84
 8006b24:	4619      	mov	r1, r3
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	01db      	lsls	r3, r3, #7
 8006b36:	4413      	add	r3, r2
 8006b38:	3384      	adds	r3, #132	@ 0x84
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	6812      	ldr	r2, [r2, #0]
 8006b40:	4611      	mov	r1, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	01d2      	lsls	r2, r2, #7
 8006b46:	440a      	add	r2, r1
 8006b48:	3284      	adds	r2, #132	@ 0x84
 8006b4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006b4e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	01db      	lsls	r3, r3, #7
 8006b5a:	4413      	add	r3, r2
 8006b5c:	3384      	adds	r3, #132	@ 0x84
 8006b5e:	461a      	mov	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	01db      	lsls	r3, r3, #7
 8006b70:	4413      	add	r3, r2
 8006b72:	3384      	adds	r3, #132	@ 0x84
 8006b74:	69da      	ldr	r2, [r3, #28]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	01db      	lsls	r3, r3, #7
 8006b80:	440b      	add	r3, r1
 8006b82:	3384      	adds	r3, #132	@ 0x84
 8006b84:	4619      	mov	r1, r3
 8006b86:	4b58      	ldr	r3, [pc, #352]	@ (8006ce8 <LTDC_SetConfig+0x32c>)
 8006b88:	4013      	ands	r3, r2
 8006b8a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	68f9      	ldr	r1, [r7, #12]
 8006b96:	6809      	ldr	r1, [r1, #0]
 8006b98:	4608      	mov	r0, r1
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	01c9      	lsls	r1, r1, #7
 8006b9e:	4401      	add	r1, r0
 8006ba0:	3184      	adds	r1, #132	@ 0x84
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	01db      	lsls	r3, r3, #7
 8006bb0:	4413      	add	r3, r2
 8006bb2:	3384      	adds	r3, #132	@ 0x84
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	01db      	lsls	r3, r3, #7
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3384      	adds	r3, #132	@ 0x84
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	01db      	lsls	r3, r3, #7
 8006bd4:	4413      	add	r3, r2
 8006bd6:	3384      	adds	r3, #132	@ 0x84
 8006bd8:	461a      	mov	r2, r3
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bde:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d102      	bne.n	8006bee <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006be8:	2304      	movs	r3, #4
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	e01b      	b.n	8006c26 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d102      	bne.n	8006bfc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	61fb      	str	r3, [r7, #28]
 8006bfa:	e014      	b.n	8006c26 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d00b      	beq.n	8006c1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d007      	beq.n	8006c1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d003      	beq.n	8006c1c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006c18:	2b07      	cmp	r3, #7
 8006c1a:	d102      	bne.n	8006c22 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006c1c:	2302      	movs	r3, #2
 8006c1e:	61fb      	str	r3, [r7, #28]
 8006c20:	e001      	b.n	8006c26 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006c22:	2301      	movs	r3, #1
 8006c24:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	01db      	lsls	r3, r3, #7
 8006c30:	4413      	add	r3, r2
 8006c32:	3384      	adds	r3, #132	@ 0x84
 8006c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	6812      	ldr	r2, [r2, #0]
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	01d2      	lsls	r2, r2, #7
 8006c40:	440a      	add	r2, r1
 8006c42:	3284      	adds	r2, #132	@ 0x84
 8006c44:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006c48:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	fb02 f303 	mul.w	r3, r2, r3
 8006c54:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6859      	ldr	r1, [r3, #4]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	1acb      	subs	r3, r1, r3
 8006c60:	69f9      	ldr	r1, [r7, #28]
 8006c62:	fb01 f303 	mul.w	r3, r1, r3
 8006c66:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006c68:	68f9      	ldr	r1, [r7, #12]
 8006c6a:	6809      	ldr	r1, [r1, #0]
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	01c9      	lsls	r1, r1, #7
 8006c72:	4401      	add	r1, r0
 8006c74:	3184      	adds	r1, #132	@ 0x84
 8006c76:	4313      	orrs	r3, r2
 8006c78:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	01db      	lsls	r3, r3, #7
 8006c84:	4413      	add	r3, r2
 8006c86:	3384      	adds	r3, #132	@ 0x84
 8006c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	01db      	lsls	r3, r3, #7
 8006c94:	440b      	add	r3, r1
 8006c96:	3384      	adds	r3, #132	@ 0x84
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4b14      	ldr	r3, [pc, #80]	@ (8006cec <LTDC_SetConfig+0x330>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	01db      	lsls	r3, r3, #7
 8006caa:	4413      	add	r3, r2
 8006cac:	3384      	adds	r3, #132	@ 0x84
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	01db      	lsls	r3, r3, #7
 8006cc0:	4413      	add	r3, r2
 8006cc2:	3384      	adds	r3, #132	@ 0x84
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	01d2      	lsls	r2, r2, #7
 8006cd0:	440a      	add	r2, r1
 8006cd2:	3284      	adds	r2, #132	@ 0x84
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	6013      	str	r3, [r2, #0]
}
 8006cda:	bf00      	nop
 8006cdc:	3724      	adds	r7, #36	@ 0x24
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	fffff8f8 	.word	0xfffff8f8
 8006cec:	fffff800 	.word	0xfffff800

08006cf0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cf4:	4b05      	ldr	r3, [pc, #20]	@ (8006d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a04      	ldr	r2, [pc, #16]	@ (8006d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006cfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cfe:	6013      	str	r3, [r2, #0]
}
 8006d00:	bf00      	nop
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	40007000 	.word	0x40007000

08006d10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e291      	b.n	800724a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f000 8087 	beq.w	8006e42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d34:	4b96      	ldr	r3, [pc, #600]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 030c 	and.w	r3, r3, #12
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d00c      	beq.n	8006d5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d40:	4b93      	ldr	r3, [pc, #588]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d112      	bne.n	8006d72 <HAL_RCC_OscConfig+0x62>
 8006d4c:	4b90      	ldr	r3, [pc, #576]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d58:	d10b      	bne.n	8006d72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d5a:	4b8d      	ldr	r3, [pc, #564]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d06c      	beq.n	8006e40 <HAL_RCC_OscConfig+0x130>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d168      	bne.n	8006e40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e26b      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d7a:	d106      	bne.n	8006d8a <HAL_RCC_OscConfig+0x7a>
 8006d7c:	4b84      	ldr	r3, [pc, #528]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a83      	ldr	r2, [pc, #524]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	e02e      	b.n	8006de8 <HAL_RCC_OscConfig+0xd8>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10c      	bne.n	8006dac <HAL_RCC_OscConfig+0x9c>
 8006d92:	4b7f      	ldr	r3, [pc, #508]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a7e      	ldr	r2, [pc, #504]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a7b      	ldr	r2, [pc, #492]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006da4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006da8:	6013      	str	r3, [r2, #0]
 8006daa:	e01d      	b.n	8006de8 <HAL_RCC_OscConfig+0xd8>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006db4:	d10c      	bne.n	8006dd0 <HAL_RCC_OscConfig+0xc0>
 8006db6:	4b76      	ldr	r3, [pc, #472]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a75      	ldr	r2, [pc, #468]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	4b73      	ldr	r3, [pc, #460]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a72      	ldr	r2, [pc, #456]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e00b      	b.n	8006de8 <HAL_RCC_OscConfig+0xd8>
 8006dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a6e      	ldr	r2, [pc, #440]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	4b6c      	ldr	r3, [pc, #432]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a6b      	ldr	r2, [pc, #428]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006de2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006de6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d013      	beq.n	8006e18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df0:	f7fd fe08 	bl	8004a04 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006df8:	f7fd fe04 	bl	8004a04 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b64      	cmp	r3, #100	@ 0x64
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e21f      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e0a:	4b61      	ldr	r3, [pc, #388]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d0f0      	beq.n	8006df8 <HAL_RCC_OscConfig+0xe8>
 8006e16:	e014      	b.n	8006e42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e18:	f7fd fdf4 	bl	8004a04 <HAL_GetTick>
 8006e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e1e:	e008      	b.n	8006e32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e20:	f7fd fdf0 	bl	8004a04 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b64      	cmp	r3, #100	@ 0x64
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e20b      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e32:	4b57      	ldr	r3, [pc, #348]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1f0      	bne.n	8006e20 <HAL_RCC_OscConfig+0x110>
 8006e3e:	e000      	b.n	8006e42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0302 	and.w	r3, r3, #2
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d069      	beq.n	8006f22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e4e:	4b50      	ldr	r3, [pc, #320]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 030c 	and.w	r3, r3, #12
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00b      	beq.n	8006e72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e5a:	4b4d      	ldr	r3, [pc, #308]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f003 030c 	and.w	r3, r3, #12
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d11c      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x190>
 8006e66:	4b4a      	ldr	r3, [pc, #296]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d116      	bne.n	8006ea0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e72:	4b47      	ldr	r3, [pc, #284]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d005      	beq.n	8006e8a <HAL_RCC_OscConfig+0x17a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d001      	beq.n	8006e8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e1df      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e8a:	4b41      	ldr	r3, [pc, #260]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	493d      	ldr	r1, [pc, #244]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e9e:	e040      	b.n	8006f22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d023      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ea8:	4b39      	ldr	r3, [pc, #228]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a38      	ldr	r2, [pc, #224]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006eae:	f043 0301 	orr.w	r3, r3, #1
 8006eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eb4:	f7fd fda6 	bl	8004a04 <HAL_GetTick>
 8006eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eba:	e008      	b.n	8006ece <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ebc:	f7fd fda2 	bl	8004a04 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d901      	bls.n	8006ece <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e1bd      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ece:	4b30      	ldr	r3, [pc, #192]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 0302 	and.w	r3, r3, #2
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0f0      	beq.n	8006ebc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eda:	4b2d      	ldr	r3, [pc, #180]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	4929      	ldr	r1, [pc, #164]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	600b      	str	r3, [r1, #0]
 8006eee:	e018      	b.n	8006f22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006ef0:	4b27      	ldr	r3, [pc, #156]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a26      	ldr	r2, [pc, #152]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006ef6:	f023 0301 	bic.w	r3, r3, #1
 8006efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efc:	f7fd fd82 	bl	8004a04 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f04:	f7fd fd7e 	bl	8004a04 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e199      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f16:	4b1e      	ldr	r3, [pc, #120]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 0308 	and.w	r3, r3, #8
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d038      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d019      	beq.n	8006f6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f36:	4b16      	ldr	r3, [pc, #88]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f3a:	4a15      	ldr	r2, [pc, #84]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f42:	f7fd fd5f 	bl	8004a04 <HAL_GetTick>
 8006f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f48:	e008      	b.n	8006f5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f4a:	f7fd fd5b 	bl	8004a04 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e176      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0f0      	beq.n	8006f4a <HAL_RCC_OscConfig+0x23a>
 8006f68:	e01a      	b.n	8006fa0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f6a:	4b09      	ldr	r3, [pc, #36]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f6e:	4a08      	ldr	r2, [pc, #32]	@ (8006f90 <HAL_RCC_OscConfig+0x280>)
 8006f70:	f023 0301 	bic.w	r3, r3, #1
 8006f74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f76:	f7fd fd45 	bl	8004a04 <HAL_GetTick>
 8006f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f7c:	e00a      	b.n	8006f94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f7e:	f7fd fd41 	bl	8004a04 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d903      	bls.n	8006f94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e15c      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
 8006f90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f94:	4b91      	ldr	r3, [pc, #580]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8006f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d1ee      	bne.n	8006f7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0304 	and.w	r3, r3, #4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 80a4 	beq.w	80070f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006fae:	4b8b      	ldr	r3, [pc, #556]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10d      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fba:	4b88      	ldr	r3, [pc, #544]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbe:	4a87      	ldr	r2, [pc, #540]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8006fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fc6:	4b85      	ldr	r3, [pc, #532]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fce:	60bb      	str	r3, [r7, #8]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fd6:	4b82      	ldr	r3, [pc, #520]	@ (80071e0 <HAL_RCC_OscConfig+0x4d0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d118      	bne.n	8007014 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80071e0 <HAL_RCC_OscConfig+0x4d0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80071e0 <HAL_RCC_OscConfig+0x4d0>)
 8006fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fee:	f7fd fd09 	bl	8004a04 <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ff4:	e008      	b.n	8007008 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ff6:	f7fd fd05 	bl	8004a04 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b64      	cmp	r3, #100	@ 0x64
 8007002:	d901      	bls.n	8007008 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e120      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007008:	4b75      	ldr	r3, [pc, #468]	@ (80071e0 <HAL_RCC_OscConfig+0x4d0>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0f0      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d106      	bne.n	800702a <HAL_RCC_OscConfig+0x31a>
 800701c:	4b6f      	ldr	r3, [pc, #444]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800701e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007020:	4a6e      	ldr	r2, [pc, #440]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007022:	f043 0301 	orr.w	r3, r3, #1
 8007026:	6713      	str	r3, [r2, #112]	@ 0x70
 8007028:	e02d      	b.n	8007086 <HAL_RCC_OscConfig+0x376>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10c      	bne.n	800704c <HAL_RCC_OscConfig+0x33c>
 8007032:	4b6a      	ldr	r3, [pc, #424]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007036:	4a69      	ldr	r2, [pc, #420]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	6713      	str	r3, [r2, #112]	@ 0x70
 800703e:	4b67      	ldr	r3, [pc, #412]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007042:	4a66      	ldr	r2, [pc, #408]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007044:	f023 0304 	bic.w	r3, r3, #4
 8007048:	6713      	str	r3, [r2, #112]	@ 0x70
 800704a:	e01c      	b.n	8007086 <HAL_RCC_OscConfig+0x376>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b05      	cmp	r3, #5
 8007052:	d10c      	bne.n	800706e <HAL_RCC_OscConfig+0x35e>
 8007054:	4b61      	ldr	r3, [pc, #388]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007058:	4a60      	ldr	r2, [pc, #384]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800705a:	f043 0304 	orr.w	r3, r3, #4
 800705e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007060:	4b5e      	ldr	r3, [pc, #376]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007064:	4a5d      	ldr	r2, [pc, #372]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007066:	f043 0301 	orr.w	r3, r3, #1
 800706a:	6713      	str	r3, [r2, #112]	@ 0x70
 800706c:	e00b      	b.n	8007086 <HAL_RCC_OscConfig+0x376>
 800706e:	4b5b      	ldr	r3, [pc, #364]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007072:	4a5a      	ldr	r2, [pc, #360]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007074:	f023 0301 	bic.w	r3, r3, #1
 8007078:	6713      	str	r3, [r2, #112]	@ 0x70
 800707a:	4b58      	ldr	r3, [pc, #352]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800707c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800707e:	4a57      	ldr	r2, [pc, #348]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007080:	f023 0304 	bic.w	r3, r3, #4
 8007084:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d015      	beq.n	80070ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708e:	f7fd fcb9 	bl	8004a04 <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007094:	e00a      	b.n	80070ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007096:	f7fd fcb5 	bl	8004a04 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d901      	bls.n	80070ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e0ce      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070ac:	4b4b      	ldr	r3, [pc, #300]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80070ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0ee      	beq.n	8007096 <HAL_RCC_OscConfig+0x386>
 80070b8:	e014      	b.n	80070e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ba:	f7fd fca3 	bl	8004a04 <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070c0:	e00a      	b.n	80070d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c2:	f7fd fc9f 	bl	8004a04 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e0b8      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80070d8:	4b40      	ldr	r3, [pc, #256]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070dc:	f003 0302 	and.w	r3, r3, #2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1ee      	bne.n	80070c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d105      	bne.n	80070f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070ea:	4b3c      	ldr	r3, [pc, #240]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	4a3b      	ldr	r2, [pc, #236]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80070f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070f4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	699b      	ldr	r3, [r3, #24]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 80a4 	beq.w	8007248 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007100:	4b36      	ldr	r3, [pc, #216]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	f003 030c 	and.w	r3, r3, #12
 8007108:	2b08      	cmp	r3, #8
 800710a:	d06b      	beq.n	80071e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d149      	bne.n	80071a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007114:	4b31      	ldr	r3, [pc, #196]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a30      	ldr	r2, [pc, #192]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800711a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800711e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007120:	f7fd fc70 	bl	8004a04 <HAL_GetTick>
 8007124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007126:	e008      	b.n	800713a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007128:	f7fd fc6c 	bl	8004a04 <HAL_GetTick>
 800712c:	4602      	mov	r2, r0
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b02      	cmp	r3, #2
 8007134:	d901      	bls.n	800713a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e087      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800713a:	4b28      	ldr	r3, [pc, #160]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1f0      	bne.n	8007128 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	69da      	ldr	r2, [r3, #28]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007154:	019b      	lsls	r3, r3, #6
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	085b      	lsrs	r3, r3, #1
 800715e:	3b01      	subs	r3, #1
 8007160:	041b      	lsls	r3, r3, #16
 8007162:	431a      	orrs	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007168:	061b      	lsls	r3, r3, #24
 800716a:	4313      	orrs	r3, r2
 800716c:	4a1b      	ldr	r2, [pc, #108]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800716e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007172:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007174:	4b19      	ldr	r3, [pc, #100]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a18      	ldr	r2, [pc, #96]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800717a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800717e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007180:	f7fd fc40 	bl	8004a04 <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007188:	f7fd fc3c 	bl	8004a04 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e057      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800719a:	4b10      	ldr	r3, [pc, #64]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0f0      	beq.n	8007188 <HAL_RCC_OscConfig+0x478>
 80071a6:	e04f      	b.n	8007248 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071a8:	4b0c      	ldr	r3, [pc, #48]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a0b      	ldr	r2, [pc, #44]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80071ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80071b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b4:	f7fd fc26 	bl	8004a04 <HAL_GetTick>
 80071b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ba:	e008      	b.n	80071ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071bc:	f7fd fc22 	bl	8004a04 <HAL_GetTick>
 80071c0:	4602      	mov	r2, r0
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	1ad3      	subs	r3, r2, r3
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d901      	bls.n	80071ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e03d      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071ce:	4b03      	ldr	r3, [pc, #12]	@ (80071dc <HAL_RCC_OscConfig+0x4cc>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1f0      	bne.n	80071bc <HAL_RCC_OscConfig+0x4ac>
 80071da:	e035      	b.n	8007248 <HAL_RCC_OscConfig+0x538>
 80071dc:	40023800 	.word	0x40023800
 80071e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80071e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007254 <HAL_RCC_OscConfig+0x544>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d028      	beq.n	8007244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d121      	bne.n	8007244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800720a:	429a      	cmp	r2, r3
 800720c:	d11a      	bne.n	8007244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007214:	4013      	ands	r3, r2
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800721a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800721c:	4293      	cmp	r3, r2
 800721e:	d111      	bne.n	8007244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	3b01      	subs	r3, #1
 800722e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007230:	429a      	cmp	r2, r3
 8007232:	d107      	bne.n	8007244 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007240:	429a      	cmp	r2, r3
 8007242:	d001      	beq.n	8007248 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	40023800 	.word	0x40023800

08007258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0d0      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007270:	4b6a      	ldr	r3, [pc, #424]	@ (800741c <HAL_RCC_ClockConfig+0x1c4>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	429a      	cmp	r2, r3
 800727c:	d910      	bls.n	80072a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800727e:	4b67      	ldr	r3, [pc, #412]	@ (800741c <HAL_RCC_ClockConfig+0x1c4>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f023 020f 	bic.w	r2, r3, #15
 8007286:	4965      	ldr	r1, [pc, #404]	@ (800741c <HAL_RCC_ClockConfig+0x1c4>)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800728e:	4b63      	ldr	r3, [pc, #396]	@ (800741c <HAL_RCC_ClockConfig+0x1c4>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 030f 	and.w	r3, r3, #15
 8007296:	683a      	ldr	r2, [r7, #0]
 8007298:	429a      	cmp	r2, r3
 800729a:	d001      	beq.n	80072a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e0b8      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d020      	beq.n	80072ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072b8:	4b59      	ldr	r3, [pc, #356]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	4a58      	ldr	r2, [pc, #352]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80072c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d005      	beq.n	80072dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80072d0:	4b53      	ldr	r3, [pc, #332]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	4a52      	ldr	r2, [pc, #328]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80072da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80072dc:	4b50      	ldr	r3, [pc, #320]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	494d      	ldr	r1, [pc, #308]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80072ea:	4313      	orrs	r3, r2
 80072ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d040      	beq.n	800737c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d107      	bne.n	8007312 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007302:	4b47      	ldr	r3, [pc, #284]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d115      	bne.n	800733a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e07f      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2b02      	cmp	r3, #2
 8007318:	d107      	bne.n	800732a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800731a:	4b41      	ldr	r3, [pc, #260]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d109      	bne.n	800733a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e073      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800732a:	4b3d      	ldr	r3, [pc, #244]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e06b      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800733a:	4b39      	ldr	r3, [pc, #228]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f023 0203 	bic.w	r2, r3, #3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	4936      	ldr	r1, [pc, #216]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 8007348:	4313      	orrs	r3, r2
 800734a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800734c:	f7fd fb5a 	bl	8004a04 <HAL_GetTick>
 8007350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007352:	e00a      	b.n	800736a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007354:	f7fd fb56 	bl	8004a04 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007362:	4293      	cmp	r3, r2
 8007364:	d901      	bls.n	800736a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	e053      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800736a:	4b2d      	ldr	r3, [pc, #180]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 020c 	and.w	r2, r3, #12
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	429a      	cmp	r2, r3
 800737a:	d1eb      	bne.n	8007354 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800737c:	4b27      	ldr	r3, [pc, #156]	@ (800741c <HAL_RCC_ClockConfig+0x1c4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 030f 	and.w	r3, r3, #15
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d210      	bcs.n	80073ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800738a:	4b24      	ldr	r3, [pc, #144]	@ (800741c <HAL_RCC_ClockConfig+0x1c4>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f023 020f 	bic.w	r2, r3, #15
 8007392:	4922      	ldr	r1, [pc, #136]	@ (800741c <HAL_RCC_ClockConfig+0x1c4>)
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	4313      	orrs	r3, r2
 8007398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800739a:	4b20      	ldr	r3, [pc, #128]	@ (800741c <HAL_RCC_ClockConfig+0x1c4>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 030f 	and.w	r3, r3, #15
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d001      	beq.n	80073ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
 80073aa:	e032      	b.n	8007412 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d008      	beq.n	80073ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073b8:	4b19      	ldr	r3, [pc, #100]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	4916      	ldr	r1, [pc, #88]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d009      	beq.n	80073ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80073d6:	4b12      	ldr	r3, [pc, #72]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	00db      	lsls	r3, r3, #3
 80073e4:	490e      	ldr	r1, [pc, #56]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80073e6:	4313      	orrs	r3, r2
 80073e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80073ea:	f000 f821 	bl	8007430 <HAL_RCC_GetSysClockFreq>
 80073ee:	4602      	mov	r2, r0
 80073f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007420 <HAL_RCC_ClockConfig+0x1c8>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	091b      	lsrs	r3, r3, #4
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	490a      	ldr	r1, [pc, #40]	@ (8007424 <HAL_RCC_ClockConfig+0x1cc>)
 80073fc:	5ccb      	ldrb	r3, [r1, r3]
 80073fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007402:	4a09      	ldr	r2, [pc, #36]	@ (8007428 <HAL_RCC_ClockConfig+0x1d0>)
 8007404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007406:	4b09      	ldr	r3, [pc, #36]	@ (800742c <HAL_RCC_ClockConfig+0x1d4>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f7fd fab6 	bl	800497c <HAL_InitTick>

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40023c00 	.word	0x40023c00
 8007420:	40023800 	.word	0x40023800
 8007424:	0800a634 	.word	0x0800a634
 8007428:	20004e7c 	.word	0x20004e7c
 800742c:	20004ecc 	.word	0x20004ecc

08007430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007434:	b090      	sub	sp, #64	@ 0x40
 8007436:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007438:	2300      	movs	r3, #0
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
 800743c:	2300      	movs	r3, #0
 800743e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007440:	2300      	movs	r3, #0
 8007442:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007444:	2300      	movs	r3, #0
 8007446:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007448:	4b59      	ldr	r3, [pc, #356]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f003 030c 	and.w	r3, r3, #12
 8007450:	2b08      	cmp	r3, #8
 8007452:	d00d      	beq.n	8007470 <HAL_RCC_GetSysClockFreq+0x40>
 8007454:	2b08      	cmp	r3, #8
 8007456:	f200 80a1 	bhi.w	800759c <HAL_RCC_GetSysClockFreq+0x16c>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <HAL_RCC_GetSysClockFreq+0x34>
 800745e:	2b04      	cmp	r3, #4
 8007460:	d003      	beq.n	800746a <HAL_RCC_GetSysClockFreq+0x3a>
 8007462:	e09b      	b.n	800759c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007464:	4b53      	ldr	r3, [pc, #332]	@ (80075b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8007466:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007468:	e09b      	b.n	80075a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800746a:	4b53      	ldr	r3, [pc, #332]	@ (80075b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800746c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800746e:	e098      	b.n	80075a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007470:	4b4f      	ldr	r3, [pc, #316]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007478:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800747a:	4b4d      	ldr	r3, [pc, #308]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d028      	beq.n	80074d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007486:	4b4a      	ldr	r3, [pc, #296]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	099b      	lsrs	r3, r3, #6
 800748c:	2200      	movs	r2, #0
 800748e:	623b      	str	r3, [r7, #32]
 8007490:	627a      	str	r2, [r7, #36]	@ 0x24
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007498:	2100      	movs	r1, #0
 800749a:	4b47      	ldr	r3, [pc, #284]	@ (80075b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800749c:	fb03 f201 	mul.w	r2, r3, r1
 80074a0:	2300      	movs	r3, #0
 80074a2:	fb00 f303 	mul.w	r3, r0, r3
 80074a6:	4413      	add	r3, r2
 80074a8:	4a43      	ldr	r2, [pc, #268]	@ (80075b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80074aa:	fba0 1202 	umull	r1, r2, r0, r2
 80074ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074b0:	460a      	mov	r2, r1
 80074b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80074b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074b6:	4413      	add	r3, r2
 80074b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074bc:	2200      	movs	r2, #0
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	61fa      	str	r2, [r7, #28]
 80074c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80074ca:	f7f8 fef1 	bl	80002b0 <__aeabi_uldivmod>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4613      	mov	r3, r2
 80074d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074d6:	e053      	b.n	8007580 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074d8:	4b35      	ldr	r3, [pc, #212]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	099b      	lsrs	r3, r3, #6
 80074de:	2200      	movs	r2, #0
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	617a      	str	r2, [r7, #20]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80074ea:	f04f 0b00 	mov.w	fp, #0
 80074ee:	4652      	mov	r2, sl
 80074f0:	465b      	mov	r3, fp
 80074f2:	f04f 0000 	mov.w	r0, #0
 80074f6:	f04f 0100 	mov.w	r1, #0
 80074fa:	0159      	lsls	r1, r3, #5
 80074fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007500:	0150      	lsls	r0, r2, #5
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	ebb2 080a 	subs.w	r8, r2, sl
 800750a:	eb63 090b 	sbc.w	r9, r3, fp
 800750e:	f04f 0200 	mov.w	r2, #0
 8007512:	f04f 0300 	mov.w	r3, #0
 8007516:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800751a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800751e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007522:	ebb2 0408 	subs.w	r4, r2, r8
 8007526:	eb63 0509 	sbc.w	r5, r3, r9
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	00eb      	lsls	r3, r5, #3
 8007534:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007538:	00e2      	lsls	r2, r4, #3
 800753a:	4614      	mov	r4, r2
 800753c:	461d      	mov	r5, r3
 800753e:	eb14 030a 	adds.w	r3, r4, sl
 8007542:	603b      	str	r3, [r7, #0]
 8007544:	eb45 030b 	adc.w	r3, r5, fp
 8007548:	607b      	str	r3, [r7, #4]
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007556:	4629      	mov	r1, r5
 8007558:	028b      	lsls	r3, r1, #10
 800755a:	4621      	mov	r1, r4
 800755c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007560:	4621      	mov	r1, r4
 8007562:	028a      	lsls	r2, r1, #10
 8007564:	4610      	mov	r0, r2
 8007566:	4619      	mov	r1, r3
 8007568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800756a:	2200      	movs	r2, #0
 800756c:	60bb      	str	r3, [r7, #8]
 800756e:	60fa      	str	r2, [r7, #12]
 8007570:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007574:	f7f8 fe9c 	bl	80002b0 <__aeabi_uldivmod>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4613      	mov	r3, r2
 800757e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007580:	4b0b      	ldr	r3, [pc, #44]	@ (80075b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	0c1b      	lsrs	r3, r3, #16
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	3301      	adds	r3, #1
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007590:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007594:	fbb2 f3f3 	udiv	r3, r2, r3
 8007598:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800759a:	e002      	b.n	80075a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800759c:	4b05      	ldr	r3, [pc, #20]	@ (80075b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800759e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80075a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3740      	adds	r7, #64	@ 0x40
 80075a8:	46bd      	mov	sp, r7
 80075aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ae:	bf00      	nop
 80075b0:	40023800 	.word	0x40023800
 80075b4:	00f42400 	.word	0x00f42400
 80075b8:	017d7840 	.word	0x017d7840

080075bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075bc:	b480      	push	{r7}
 80075be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075c0:	4b03      	ldr	r3, [pc, #12]	@ (80075d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80075c2:	681b      	ldr	r3, [r3, #0]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr
 80075ce:	bf00      	nop
 80075d0:	20004e7c 	.word	0x20004e7c

080075d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80075d8:	f7ff fff0 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 80075dc:	4602      	mov	r2, r0
 80075de:	4b05      	ldr	r3, [pc, #20]	@ (80075f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	0a9b      	lsrs	r3, r3, #10
 80075e4:	f003 0307 	and.w	r3, r3, #7
 80075e8:	4903      	ldr	r1, [pc, #12]	@ (80075f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075ea:	5ccb      	ldrb	r3, [r1, r3]
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	40023800 	.word	0x40023800
 80075f8:	0800a644 	.word	0x0800a644

080075fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007600:	f7ff ffdc 	bl	80075bc <HAL_RCC_GetHCLKFreq>
 8007604:	4602      	mov	r2, r0
 8007606:	4b05      	ldr	r3, [pc, #20]	@ (800761c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	0b5b      	lsrs	r3, r3, #13
 800760c:	f003 0307 	and.w	r3, r3, #7
 8007610:	4903      	ldr	r1, [pc, #12]	@ (8007620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007612:	5ccb      	ldrb	r3, [r1, r3]
 8007614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007618:	4618      	mov	r0, r3
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40023800 	.word	0x40023800
 8007620:	0800a644 	.word	0x0800a644

08007624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0301 	and.w	r3, r3, #1
 8007648:	2b00      	cmp	r3, #0
 800764a:	d012      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800764c:	4b69      	ldr	r3, [pc, #420]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	4a68      	ldr	r2, [pc, #416]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007652:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007656:	6093      	str	r3, [r2, #8]
 8007658:	4b66      	ldr	r3, [pc, #408]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007660:	4964      	ldr	r1, [pc, #400]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007662:	4313      	orrs	r3, r2
 8007664:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800766e:	2301      	movs	r3, #1
 8007670:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d017      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800767e:	4b5d      	ldr	r3, [pc, #372]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007680:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007684:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800768c:	4959      	ldr	r1, [pc, #356]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800768e:	4313      	orrs	r3, r2
 8007690:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007698:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800769c:	d101      	bne.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800769e:	2301      	movs	r3, #1
 80076a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80076aa:	2301      	movs	r3, #1
 80076ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d017      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80076ba:	4b4e      	ldr	r3, [pc, #312]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c8:	494a      	ldr	r1, [pc, #296]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80076d8:	d101      	bne.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80076da:	2301      	movs	r3, #1
 80076dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80076e6:	2301      	movs	r3, #1
 80076e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80076f6:	2301      	movs	r3, #1
 80076f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	f000 808b 	beq.w	800781e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007708:	4b3a      	ldr	r3, [pc, #232]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800770a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800770c:	4a39      	ldr	r2, [pc, #228]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800770e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007712:	6413      	str	r3, [r2, #64]	@ 0x40
 8007714:	4b37      	ldr	r3, [pc, #220]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800771c:	60bb      	str	r3, [r7, #8]
 800771e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007720:	4b35      	ldr	r3, [pc, #212]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a34      	ldr	r2, [pc, #208]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800772a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772c:	f7fd f96a 	bl	8004a04 <HAL_GetTick>
 8007730:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007732:	e008      	b.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007734:	f7fd f966 	bl	8004a04 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b64      	cmp	r3, #100	@ 0x64
 8007740:	d901      	bls.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e357      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007746:	4b2c      	ldr	r3, [pc, #176]	@ (80077f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0f0      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007752:	4b28      	ldr	r3, [pc, #160]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800775a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d035      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	429a      	cmp	r2, r3
 800776e:	d02e      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007770:	4b20      	ldr	r3, [pc, #128]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007778:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800777a:	4b1e      	ldr	r3, [pc, #120]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800777c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800777e:	4a1d      	ldr	r2, [pc, #116]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007784:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007786:	4b1b      	ldr	r3, [pc, #108]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800778a:	4a1a      	ldr	r2, [pc, #104]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800778c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007790:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007792:	4a18      	ldr	r2, [pc, #96]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007798:	4b16      	ldr	r3, [pc, #88]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800779a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d114      	bne.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a4:	f7fd f92e 	bl	8004a04 <HAL_GetTick>
 80077a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077aa:	e00a      	b.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077ac:	f7fd f92a 	bl	8004a04 <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d901      	bls.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80077be:	2303      	movs	r3, #3
 80077c0:	e319      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077c2:	4b0c      	ldr	r3, [pc, #48]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0ee      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077da:	d111      	bne.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80077dc:	4b05      	ldr	r3, [pc, #20]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80077e8:	4b04      	ldr	r3, [pc, #16]	@ (80077fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80077ea:	400b      	ands	r3, r1
 80077ec:	4901      	ldr	r1, [pc, #4]	@ (80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	608b      	str	r3, [r1, #8]
 80077f2:	e00b      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80077f4:	40023800 	.word	0x40023800
 80077f8:	40007000 	.word	0x40007000
 80077fc:	0ffffcff 	.word	0x0ffffcff
 8007800:	4baa      	ldr	r3, [pc, #680]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	4aa9      	ldr	r2, [pc, #676]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007806:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800780a:	6093      	str	r3, [r2, #8]
 800780c:	4ba7      	ldr	r3, [pc, #668]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800780e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007818:	49a4      	ldr	r1, [pc, #656]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800781a:	4313      	orrs	r3, r2
 800781c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f003 0310 	and.w	r3, r3, #16
 8007826:	2b00      	cmp	r3, #0
 8007828:	d010      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800782a:	4ba0      	ldr	r3, [pc, #640]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800782c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007830:	4a9e      	ldr	r2, [pc, #632]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007836:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800783a:	4b9c      	ldr	r3, [pc, #624]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800783c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007844:	4999      	ldr	r1, [pc, #612]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007846:	4313      	orrs	r3, r2
 8007848:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00a      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007858:	4b94      	ldr	r3, [pc, #592]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800785a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800785e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007866:	4991      	ldr	r1, [pc, #580]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007868:	4313      	orrs	r3, r2
 800786a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00a      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800787a:	4b8c      	ldr	r3, [pc, #560]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800787c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007880:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007888:	4988      	ldr	r1, [pc, #544]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800788a:	4313      	orrs	r3, r2
 800788c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00a      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800789c:	4b83      	ldr	r3, [pc, #524]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800789e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078aa:	4980      	ldr	r1, [pc, #512]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078be:	4b7b      	ldr	r3, [pc, #492]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078cc:	4977      	ldr	r1, [pc, #476]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80078e0:	4b72      	ldr	r3, [pc, #456]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078e6:	f023 0203 	bic.w	r2, r3, #3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ee:	496f      	ldr	r1, [pc, #444]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00a      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007902:	4b6a      	ldr	r3, [pc, #424]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007908:	f023 020c 	bic.w	r2, r3, #12
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007910:	4966      	ldr	r1, [pc, #408]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007912:	4313      	orrs	r3, r2
 8007914:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007924:	4b61      	ldr	r3, [pc, #388]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800792a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007932:	495e      	ldr	r1, [pc, #376]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007934:	4313      	orrs	r3, r2
 8007936:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007942:	2b00      	cmp	r3, #0
 8007944:	d00a      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007946:	4b59      	ldr	r3, [pc, #356]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800794c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007954:	4955      	ldr	r1, [pc, #340]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007956:	4313      	orrs	r3, r2
 8007958:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007968:	4b50      	ldr	r3, [pc, #320]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800796a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800796e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007976:	494d      	ldr	r1, [pc, #308]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007978:	4313      	orrs	r3, r2
 800797a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800798a:	4b48      	ldr	r3, [pc, #288]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800798c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007990:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007998:	4944      	ldr	r1, [pc, #272]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800799a:	4313      	orrs	r3, r2
 800799c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d00a      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80079ac:	4b3f      	ldr	r3, [pc, #252]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079b2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079ba:	493c      	ldr	r1, [pc, #240]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00a      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80079ce:	4b37      	ldr	r3, [pc, #220]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079dc:	4933      	ldr	r1, [pc, #204]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d00a      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079f0:	4b2e      	ldr	r3, [pc, #184]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80079f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079fe:	492b      	ldr	r1, [pc, #172]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d011      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007a12:	4b26      	ldr	r3, [pc, #152]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a18:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a20:	4922      	ldr	r1, [pc, #136]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a22:	4313      	orrs	r3, r2
 8007a24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007a30:	d101      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007a32:	2301      	movs	r3, #1
 8007a34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007a42:	2301      	movs	r3, #1
 8007a44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00a      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a52:	4b16      	ldr	r3, [pc, #88]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a58:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a60:	4912      	ldr	r1, [pc, #72]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007a74:	4b0d      	ldr	r3, [pc, #52]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a7a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a84:	4909      	ldr	r1, [pc, #36]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d006      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 80d9 	beq.w	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007aa0:	4b02      	ldr	r3, [pc, #8]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a01      	ldr	r2, [pc, #4]	@ (8007aac <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007aa6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007aaa:	e001      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007aac:	40023800 	.word	0x40023800
 8007ab0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ab2:	f7fc ffa7 	bl	8004a04 <HAL_GetTick>
 8007ab6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ab8:	e008      	b.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007aba:	f7fc ffa3 	bl	8004a04 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b64      	cmp	r3, #100	@ 0x64
 8007ac6:	d901      	bls.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e194      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007acc:	4b6c      	ldr	r3, [pc, #432]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1f0      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d021      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11d      	bne.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007aec:	4b64      	ldr	r3, [pc, #400]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007af2:	0c1b      	lsrs	r3, r3, #16
 8007af4:	f003 0303 	and.w	r3, r3, #3
 8007af8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007afa:	4b61      	ldr	r3, [pc, #388]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b00:	0e1b      	lsrs	r3, r3, #24
 8007b02:	f003 030f 	and.w	r3, r3, #15
 8007b06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	019a      	lsls	r2, r3, #6
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	041b      	lsls	r3, r3, #16
 8007b12:	431a      	orrs	r2, r3
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	061b      	lsls	r3, r3, #24
 8007b18:	431a      	orrs	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	071b      	lsls	r3, r3, #28
 8007b20:	4957      	ldr	r1, [pc, #348]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b3c:	d00a      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d02e      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b52:	d129      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b54:	4b4a      	ldr	r3, [pc, #296]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b5a:	0c1b      	lsrs	r3, r3, #16
 8007b5c:	f003 0303 	and.w	r3, r3, #3
 8007b60:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b62:	4b47      	ldr	r3, [pc, #284]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b68:	0f1b      	lsrs	r3, r3, #28
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	019a      	lsls	r2, r3, #6
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	041b      	lsls	r3, r3, #16
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	061b      	lsls	r3, r3, #24
 8007b82:	431a      	orrs	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	071b      	lsls	r3, r3, #28
 8007b88:	493d      	ldr	r1, [pc, #244]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007b90:	4b3b      	ldr	r3, [pc, #236]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b96:	f023 021f 	bic.w	r2, r3, #31
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	4937      	ldr	r1, [pc, #220]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01d      	beq.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007bb4:	4b32      	ldr	r3, [pc, #200]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bba:	0e1b      	lsrs	r3, r3, #24
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007bc8:	0f1b      	lsrs	r3, r3, #28
 8007bca:	f003 0307 	and.w	r3, r3, #7
 8007bce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	019a      	lsls	r2, r3, #6
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	041b      	lsls	r3, r3, #16
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	061b      	lsls	r3, r3, #24
 8007be2:	431a      	orrs	r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	071b      	lsls	r3, r3, #28
 8007be8:	4925      	ldr	r1, [pc, #148]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d011      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	019a      	lsls	r2, r3, #6
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	041b      	lsls	r3, r3, #16
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	061b      	lsls	r3, r3, #24
 8007c10:	431a      	orrs	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	071b      	lsls	r3, r3, #28
 8007c18:	4919      	ldr	r1, [pc, #100]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007c20:	4b17      	ldr	r3, [pc, #92]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a16      	ldr	r2, [pc, #88]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c26:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c2c:	f7fc feea 	bl	8004a04 <HAL_GetTick>
 8007c30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c32:	e008      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007c34:	f7fc fee6 	bl	8004a04 <HAL_GetTick>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	1ad3      	subs	r3, r2, r3
 8007c3e:	2b64      	cmp	r3, #100	@ 0x64
 8007c40:	d901      	bls.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e0d7      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007c46:	4b0e      	ldr	r3, [pc, #56]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d0f0      	beq.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	f040 80cd 	bne.w	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007c5a:	4b09      	ldr	r3, [pc, #36]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a08      	ldr	r2, [pc, #32]	@ (8007c80 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007c60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c66:	f7fc fecd 	bl	8004a04 <HAL_GetTick>
 8007c6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c6c:	e00a      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007c6e:	f7fc fec9 	bl	8004a04 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b64      	cmp	r3, #100	@ 0x64
 8007c7a:	d903      	bls.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e0ba      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007c80:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007c84:	4b5e      	ldr	r3, [pc, #376]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c90:	d0ed      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d02e      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d12a      	bne.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007cba:	4b51      	ldr	r3, [pc, #324]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cc0:	0c1b      	lsrs	r3, r3, #16
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cce:	0f1b      	lsrs	r3, r3, #28
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	019a      	lsls	r2, r3, #6
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	041b      	lsls	r3, r3, #16
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	061b      	lsls	r3, r3, #24
 8007ce8:	431a      	orrs	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	071b      	lsls	r3, r3, #28
 8007cee:	4944      	ldr	r1, [pc, #272]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007cf6:	4b42      	ldr	r3, [pc, #264]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cfc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d04:	3b01      	subs	r3, #1
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	493d      	ldr	r1, [pc, #244]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d022      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d24:	d11d      	bne.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d26:	4b36      	ldr	r3, [pc, #216]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d2c:	0e1b      	lsrs	r3, r3, #24
 8007d2e:	f003 030f 	and.w	r3, r3, #15
 8007d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d34:	4b32      	ldr	r3, [pc, #200]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d3a:	0f1b      	lsrs	r3, r3, #28
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	019a      	lsls	r2, r3, #6
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	041b      	lsls	r3, r3, #16
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	061b      	lsls	r3, r3, #24
 8007d54:	431a      	orrs	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	071b      	lsls	r3, r3, #28
 8007d5a:	4929      	ldr	r1, [pc, #164]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d028      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007d6e:	4b24      	ldr	r3, [pc, #144]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d74:	0e1b      	lsrs	r3, r3, #24
 8007d76:	f003 030f 	and.w	r3, r3, #15
 8007d7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d7c:	4b20      	ldr	r3, [pc, #128]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d82:	0c1b      	lsrs	r3, r3, #16
 8007d84:	f003 0303 	and.w	r3, r3, #3
 8007d88:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	695b      	ldr	r3, [r3, #20]
 8007d8e:	019a      	lsls	r2, r3, #6
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	041b      	lsls	r3, r3, #16
 8007d94:	431a      	orrs	r2, r3
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	061b      	lsls	r3, r3, #24
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	071b      	lsls	r3, r3, #28
 8007da2:	4917      	ldr	r1, [pc, #92]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007da4:	4313      	orrs	r3, r2
 8007da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007daa:	4b15      	ldr	r3, [pc, #84]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007db0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db8:	4911      	ldr	r1, [pc, #68]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007dc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dcc:	f7fc fe1a 	bl	8004a04 <HAL_GetTick>
 8007dd0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007dd4:	f7fc fe16 	bl	8004a04 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b64      	cmp	r3, #100	@ 0x64
 8007de0:	d901      	bls.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e007      	b.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007de6:	4b06      	ldr	r3, [pc, #24]	@ (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007df2:	d1ef      	bne.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	40023800 	.word	0x40023800

08007e04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e071      	b.n	8007efe <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	7f5b      	ldrb	r3, [r3, #29]
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d105      	bne.n	8007e30 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7fa fbf0 	bl	8002610 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d053      	beq.n	8007eec <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	22ca      	movs	r2, #202	@ 0xca
 8007e4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2253      	movs	r2, #83	@ 0x53
 8007e52:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fa4b 	bl	80082f0 <RTC_EnterInitMode>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007e5e:	7bfb      	ldrb	r3, [r7, #15]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d12a      	bne.n	8007eba <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6899      	ldr	r1, [r3, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	4b26      	ldr	r3, [pc, #152]	@ (8007f08 <HAL_RTC_Init+0x104>)
 8007e70:	400b      	ands	r3, r1
 8007e72:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6899      	ldr	r1, [r3, #8]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	431a      	orrs	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	68d2      	ldr	r2, [r2, #12]
 8007e9a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6919      	ldr	r1, [r3, #16]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	041a      	lsls	r2, r3, #16
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	430a      	orrs	r2, r1
 8007eae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa54 	bl	800835e <RTC_ExitInitMode>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d110      	bne.n	8007ee2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0208 	bic.w	r2, r2, #8
 8007ece:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	699a      	ldr	r2, [r3, #24]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	22ff      	movs	r2, #255	@ 0xff
 8007ee8:	625a      	str	r2, [r3, #36]	@ 0x24
 8007eea:	e001      	b.n	8007ef0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d102      	bne.n	8007efc <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	ff8fffbf 	.word	0xff8fffbf

08007f0c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f0c:	b590      	push	{r4, r7, lr}
 8007f0e:	b087      	sub	sp, #28
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	60b9      	str	r1, [r7, #8]
 8007f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	7f1b      	ldrb	r3, [r3, #28]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_RTC_SetTime+0x1c>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e085      	b.n	8008034 <HAL_RTC_SetTime+0x128>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2202      	movs	r2, #2
 8007f32:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d126      	bne.n	8007f88 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d102      	bne.n	8007f4e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fa28 	bl	80083a8 <RTC_ByteToBcd2>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	785b      	ldrb	r3, [r3, #1]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fa21 	bl	80083a8 <RTC_ByteToBcd2>
 8007f66:	4603      	mov	r3, r0
 8007f68:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007f6a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	789b      	ldrb	r3, [r3, #2]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 fa19 	bl	80083a8 <RTC_ByteToBcd2>
 8007f76:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007f78:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	78db      	ldrb	r3, [r3, #3]
 8007f80:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007f82:	4313      	orrs	r3, r2
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	e018      	b.n	8007fba <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d102      	bne.n	8007f9c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007fa8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007fae:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	78db      	ldrb	r3, [r3, #3]
 8007fb4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	22ca      	movs	r2, #202	@ 0xca
 8007fc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2253      	movs	r2, #83	@ 0x53
 8007fc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	f000 f990 	bl	80082f0 <RTC_EnterInitMode>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007fd4:	7cfb      	ldrb	r3, [r7, #19]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d11e      	bne.n	8008018 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681a      	ldr	r2, [r3, #0]
 8007fde:	6979      	ldr	r1, [r7, #20]
 8007fe0:	4b16      	ldr	r3, [pc, #88]	@ (800803c <HAL_RTC_SetTime+0x130>)
 8007fe2:	400b      	ands	r3, r1
 8007fe4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007ff4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6899      	ldr	r1, [r3, #8]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	68da      	ldr	r2, [r3, #12]
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	431a      	orrs	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f9a5 	bl	800835e <RTC_ExitInitMode>
 8008014:	4603      	mov	r3, r0
 8008016:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008018:	7cfb      	ldrb	r3, [r7, #19]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d102      	bne.n	8008024 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	22ff      	movs	r2, #255	@ 0xff
 800802a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	771a      	strb	r2, [r3, #28]

  return status;
 8008032:	7cfb      	ldrb	r3, [r7, #19]
}
 8008034:	4618      	mov	r0, r3
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	bd90      	pop	{r4, r7, pc}
 800803c:	007f7f7f 	.word	0x007f7f7f

08008040 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	4b22      	ldr	r3, [pc, #136]	@ (80080f8 <HAL_RTC_GetTime+0xb8>)
 8008070:	4013      	ands	r3, r2
 8008072:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	0c1b      	lsrs	r3, r3, #16
 8008078:	b2db      	uxtb	r3, r3
 800807a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800807e:	b2da      	uxtb	r2, r3
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800808e:	b2da      	uxtb	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800809c:	b2da      	uxtb	r2, r3
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	0d9b      	lsrs	r3, r3, #22
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d11a      	bne.n	80080ee <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 f991 	bl	80083e4 <RTC_Bcd2ToByte>
 80080c2:	4603      	mov	r3, r0
 80080c4:	461a      	mov	r2, r3
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	785b      	ldrb	r3, [r3, #1]
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f988 	bl	80083e4 <RTC_Bcd2ToByte>
 80080d4:	4603      	mov	r3, r0
 80080d6:	461a      	mov	r2, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	789b      	ldrb	r3, [r3, #2]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 f97f 	bl	80083e4 <RTC_Bcd2ToByte>
 80080e6:	4603      	mov	r3, r0
 80080e8:	461a      	mov	r2, r3
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	007f7f7f 	.word	0x007f7f7f

080080fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80080fc:	b590      	push	{r4, r7, lr}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	7f1b      	ldrb	r3, [r3, #28]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d101      	bne.n	8008118 <HAL_RTC_SetDate+0x1c>
 8008114:	2302      	movs	r3, #2
 8008116:	e06f      	b.n	80081f8 <HAL_RTC_SetDate+0xfc>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2201      	movs	r2, #1
 800811c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2202      	movs	r2, #2
 8008122:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10e      	bne.n	8008148 <HAL_RTC_SetDate+0x4c>
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	785b      	ldrb	r3, [r3, #1]
 800812e:	f003 0310 	and.w	r3, r3, #16
 8008132:	2b00      	cmp	r3, #0
 8008134:	d008      	beq.n	8008148 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	785b      	ldrb	r3, [r3, #1]
 800813a:	f023 0310 	bic.w	r3, r3, #16
 800813e:	b2db      	uxtb	r3, r3
 8008140:	330a      	adds	r3, #10
 8008142:	b2da      	uxtb	r2, r3
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d11c      	bne.n	8008188 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	78db      	ldrb	r3, [r3, #3]
 8008152:	4618      	mov	r0, r3
 8008154:	f000 f928 	bl	80083a8 <RTC_ByteToBcd2>
 8008158:	4603      	mov	r3, r0
 800815a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	4618      	mov	r0, r3
 8008162:	f000 f921 	bl	80083a8 <RTC_ByteToBcd2>
 8008166:	4603      	mov	r3, r0
 8008168:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800816a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	789b      	ldrb	r3, [r3, #2]
 8008170:	4618      	mov	r0, r3
 8008172:	f000 f919 	bl	80083a8 <RTC_ByteToBcd2>
 8008176:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008178:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008182:	4313      	orrs	r3, r2
 8008184:	617b      	str	r3, [r7, #20]
 8008186:	e00e      	b.n	80081a6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	78db      	ldrb	r3, [r3, #3]
 800818c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	785b      	ldrb	r3, [r3, #1]
 8008192:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008194:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800819a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	22ca      	movs	r2, #202	@ 0xca
 80081ac:	625a      	str	r2, [r3, #36]	@ 0x24
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2253      	movs	r2, #83	@ 0x53
 80081b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 f89a 	bl	80082f0 <RTC_EnterInitMode>
 80081bc:	4603      	mov	r3, r0
 80081be:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80081c0:	7cfb      	ldrb	r3, [r7, #19]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	6979      	ldr	r1, [r7, #20]
 80081cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008200 <HAL_RTC_SetDate+0x104>)
 80081ce:	400b      	ands	r3, r1
 80081d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 f8c3 	bl	800835e <RTC_ExitInitMode>
 80081d8:	4603      	mov	r3, r0
 80081da:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80081dc:	7cfb      	ldrb	r3, [r7, #19]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	22ff      	movs	r2, #255	@ 0xff
 80081ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	771a      	strb	r2, [r3, #28]

  return status;
 80081f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd90      	pop	{r4, r7, pc}
 8008200:	00ffff3f 	.word	0x00ffff3f

08008204 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	4b21      	ldr	r3, [pc, #132]	@ (80082a0 <HAL_RTC_GetDate+0x9c>)
 800821c:	4013      	ands	r3, r2
 800821e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	0c1b      	lsrs	r3, r3, #16
 8008224:	b2da      	uxtb	r2, r3
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	0a1b      	lsrs	r3, r3, #8
 800822e:	b2db      	uxtb	r3, r3
 8008230:	f003 031f 	and.w	r3, r3, #31
 8008234:	b2da      	uxtb	r2, r3
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008242:	b2da      	uxtb	r2, r3
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	0b5b      	lsrs	r3, r3, #13
 800824c:	b2db      	uxtb	r3, r3
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	b2da      	uxtb	r2, r3
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d11a      	bne.n	8008294 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	78db      	ldrb	r3, [r3, #3]
 8008262:	4618      	mov	r0, r3
 8008264:	f000 f8be 	bl	80083e4 <RTC_Bcd2ToByte>
 8008268:	4603      	mov	r3, r0
 800826a:	461a      	mov	r2, r3
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	785b      	ldrb	r3, [r3, #1]
 8008274:	4618      	mov	r0, r3
 8008276:	f000 f8b5 	bl	80083e4 <RTC_Bcd2ToByte>
 800827a:	4603      	mov	r3, r0
 800827c:	461a      	mov	r2, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	789b      	ldrb	r3, [r3, #2]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f8ac 	bl	80083e4 <RTC_Bcd2ToByte>
 800828c:	4603      	mov	r3, r0
 800828e:	461a      	mov	r2, r3
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3718      	adds	r7, #24
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	00ffff3f 	.word	0x00ffff3f

080082a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a0d      	ldr	r2, [pc, #52]	@ (80082ec <HAL_RTC_WaitForSynchro+0x48>)
 80082b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082b8:	f7fc fba4 	bl	8004a04 <HAL_GetTick>
 80082bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80082be:	e009      	b.n	80082d4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80082c0:	f7fc fba0 	bl	8004a04 <HAL_GetTick>
 80082c4:	4602      	mov	r2, r0
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80082ce:	d901      	bls.n	80082d4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e007      	b.n	80082e4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0ee      	beq.n	80082c0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80082e2:	2300      	movs	r3, #0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	0001ff5f 	.word	0x0001ff5f

080082f0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800830a:	2b00      	cmp	r3, #0
 800830c:	d122      	bne.n	8008354 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68da      	ldr	r2, [r3, #12]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800831c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800831e:	f7fc fb71 	bl	8004a04 <HAL_GetTick>
 8008322:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008324:	e00c      	b.n	8008340 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008326:	f7fc fb6d 	bl	8004a04 <HAL_GetTick>
 800832a:	4602      	mov	r2, r0
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008334:	d904      	bls.n	8008340 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2204      	movs	r2, #4
 800833a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800833c:	2301      	movs	r3, #1
 800833e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <RTC_EnterInitMode+0x64>
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d1e8      	bne.n	8008326 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008378:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10a      	bne.n	800839e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff ff8b 	bl	80082a4 <HAL_RTC_WaitForSynchro>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2204      	movs	r2, #4
 8008398:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800839e:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80083b6:	e005      	b.n	80083c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3301      	adds	r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	3b0a      	subs	r3, #10
 80083c2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	2b09      	cmp	r3, #9
 80083c8:	d8f6      	bhi.n	80083b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	79fb      	ldrb	r3, [r7, #7]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	b2db      	uxtb	r3, r3
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3714      	adds	r7, #20
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80083f2:	79fb      	ldrb	r3, [r7, #7]
 80083f4:	091b      	lsrs	r3, r3, #4
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	461a      	mov	r2, r3
 80083fa:	4613      	mov	r3, r2
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	4413      	add	r3, r2
 8008400:	005b      	lsls	r3, r3, #1
 8008402:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	b2da      	uxtb	r2, r3
 8008408:	79fb      	ldrb	r3, [r7, #7]
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	b2db      	uxtb	r3, r3
 8008410:	4413      	add	r3, r2
 8008412:	b2db      	uxtb	r3, r3
}
 8008414:	4618      	mov	r0, r3
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800842c:	4b5a      	ldr	r3, [pc, #360]	@ (8008598 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a5a      	ldr	r2, [pc, #360]	@ (800859c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	0adb      	lsrs	r3, r3, #11
 8008438:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800843c:	fb02 f303 	mul.w	r3, r2, r3
 8008440:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	7f1b      	ldrb	r3, [r3, #28]
 8008446:	2b01      	cmp	r3, #1
 8008448:	d101      	bne.n	800844e <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
 800844a:	2302      	movs	r3, #2
 800844c:	e09d      	b.n	800858a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2201      	movs	r2, #1
 8008452:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2202      	movs	r2, #2
 8008458:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	22ca      	movs	r2, #202	@ 0xca
 8008460:	625a      	str	r2, [r3, #36]	@ 0x24
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	2253      	movs	r2, #83	@ 0x53
 8008468:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008474:	2b00      	cmp	r3, #0
 8008476:	d018      	beq.n	80084aa <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	3b01      	subs	r3, #1
 800847c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d10b      	bne.n	800849c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	22ff      	movs	r2, #255	@ 0xff
 800848a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2203      	movs	r2, #3
 8008490:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e076      	b.n	800858a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	f003 0304 	and.w	r3, r3, #4
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e6      	bne.n	8008478 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084b8:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80084ca:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80084cc:	4b32      	ldr	r3, [pc, #200]	@ (8008598 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a32      	ldr	r2, [pc, #200]	@ (800859c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80084d2:	fba2 2303 	umull	r2, r3, r2, r3
 80084d6:	0adb      	lsrs	r3, r3, #11
 80084d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80084dc:	fb02 f303 	mul.w	r3, r2, r3
 80084e0:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	3b01      	subs	r3, #1
 80084e6:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d10b      	bne.n	8008506 <HAL_RTCEx_SetWakeUpTimer_IT+0xe6>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	22ff      	movs	r2, #255	@ 0xff
 80084f4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2203      	movs	r2, #3
 80084fa:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2200      	movs	r2, #0
 8008500:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e041      	b.n	800858a <HAL_RTCEx_SetWakeUpTimer_IT+0x16a>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d0e6      	beq.n	80084e2 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	689a      	ldr	r2, [r3, #8]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f022 0207 	bic.w	r2, r2, #7
 8008522:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	6899      	ldr	r1, [r3, #8]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	430a      	orrs	r2, r1
 8008532:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800853c:	4b18      	ldr	r3, [pc, #96]	@ (80085a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a17      	ldr	r2, [pc, #92]	@ (80085a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 8008542:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008546:	6013      	str	r3, [r2, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8008548:	4b15      	ldr	r3, [pc, #84]	@ (80085a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	4a14      	ldr	r2, [pc, #80]	@ (80085a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800854e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008552:	6093      	str	r3, [r2, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008562:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689a      	ldr	r2, [r3, #8]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008572:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	22ff      	movs	r2, #255	@ 0xff
 800857a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2201      	movs	r2, #1
 8008580:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20004e7c 	.word	0x20004e7c
 800859c:	10624dd3 	.word	0x10624dd3
 80085a0:	40013c00 	.word	0x40013c00

080085a4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80085ac:	4b0e      	ldr	r3, [pc, #56]	@ (80085e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 80085ae:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80085b2:	615a      	str	r2, [r3, #20]

  /* Get the pending status of the Wakeup timer Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the Wakeup timer interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80085d2:	60da      	str	r2, [r3, #12]

    /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f000 f809 	bl	80085ec <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	775a      	strb	r2, [r3, #29]
}
 80085e0:	bf00      	nop
 80085e2:	3708      	adds	r7, #8
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	40013c00 	.word	0x40013c00

080085ec <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008610:	2301      	movs	r3, #1
 8008612:	e025      	b.n	8008660 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7f8 f8d9 	bl	80007e0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2202      	movs	r2, #2
 8008632:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f001 f997 	bl	8009974 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6818      	ldr	r0, [r3, #0]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	461a      	mov	r2, r3
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	f001 f9eb 	bl	8009a2c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2201      	movs	r2, #1
 800865a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800867a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	2b02      	cmp	r3, #2
 8008680:	d101      	bne.n	8008686 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8008682:	2302      	movs	r3, #2
 8008684:	e021      	b.n	80086ca <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8008686:	7dfb      	ldrb	r3, [r7, #23]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d002      	beq.n	8008692 <HAL_SDRAM_SendCommand+0x2a>
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	2b05      	cmp	r3, #5
 8008690:	d118      	bne.n	80086c4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2202      	movs	r2, #2
 8008696:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	68b9      	ldr	r1, [r7, #8]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f001 fa2c 	bl	8009b00 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d104      	bne.n	80086ba <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2205      	movs	r2, #5
 80086b4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80086b8:	e006      	b.n	80086c8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80086c2:	e001      	b.n	80086c8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e000      	b.n	80086ca <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b082      	sub	sp, #8
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d101      	bne.n	80086ec <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80086e8:	2302      	movs	r3, #2
 80086ea:	e016      	b.n	800871a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d10f      	bne.n	8008718 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	6839      	ldr	r1, [r7, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f001 fa1e 	bl	8009b48 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
 8008716:	e000      	b.n	800871a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008718:	2301      	movs	r3, #1
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008730:	2301      	movs	r3, #1
 8008732:	e049      	b.n	80087c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b00      	cmp	r3, #0
 800873e:	d106      	bne.n	800874e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f7fa f897 	bl	800287c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2202      	movs	r2, #2
 8008752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3304      	adds	r3, #4
 800875e:	4619      	mov	r1, r3
 8008760:	4610      	mov	r0, r2
 8008762:	f000 fa1f 	bl	8008ba4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2201      	movs	r2, #1
 800876a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2201      	movs	r2, #1
 800878a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087c6:	2300      	movs	r3, #0
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d001      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e054      	b.n	8008892 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2202      	movs	r2, #2
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f042 0201 	orr.w	r2, r2, #1
 80087fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a26      	ldr	r2, [pc, #152]	@ (80088a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d022      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008812:	d01d      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a22      	ldr	r2, [pc, #136]	@ (80088a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d018      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a21      	ldr	r2, [pc, #132]	@ (80088a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d013      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a1f      	ldr	r2, [pc, #124]	@ (80088ac <HAL_TIM_Base_Start_IT+0xdc>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d00e      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a1e      	ldr	r2, [pc, #120]	@ (80088b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d009      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a1c      	ldr	r2, [pc, #112]	@ (80088b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d004      	beq.n	8008850 <HAL_TIM_Base_Start_IT+0x80>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a1b      	ldr	r2, [pc, #108]	@ (80088b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d115      	bne.n	800887c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	4b19      	ldr	r3, [pc, #100]	@ (80088bc <HAL_TIM_Base_Start_IT+0xec>)
 8008858:	4013      	ands	r3, r2
 800885a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b06      	cmp	r3, #6
 8008860:	d015      	beq.n	800888e <HAL_TIM_Base_Start_IT+0xbe>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008868:	d011      	beq.n	800888e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f042 0201 	orr.w	r2, r2, #1
 8008878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887a:	e008      	b.n	800888e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f042 0201 	orr.w	r2, r2, #1
 800888a:	601a      	str	r2, [r3, #0]
 800888c:	e000      	b.n	8008890 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800888e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008890:	2300      	movs	r3, #0
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop
 80088a0:	40010000 	.word	0x40010000
 80088a4:	40000400 	.word	0x40000400
 80088a8:	40000800 	.word	0x40000800
 80088ac:	40000c00 	.word	0x40000c00
 80088b0:	40010400 	.word	0x40010400
 80088b4:	40014000 	.word	0x40014000
 80088b8:	40001800 	.word	0x40001800
 80088bc:	00010007 	.word	0x00010007

080088c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d020      	beq.n	8008924 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f003 0302 	and.w	r3, r3, #2
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01b      	beq.n	8008924 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f06f 0202 	mvn.w	r2, #2
 80088f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d003      	beq.n	8008912 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f92b 	bl	8008b66 <HAL_TIM_IC_CaptureCallback>
 8008910:	e005      	b.n	800891e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f91d 	bl	8008b52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 f92e 	bl	8008b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	f003 0304 	and.w	r3, r3, #4
 800892a:	2b00      	cmp	r3, #0
 800892c:	d020      	beq.n	8008970 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01b      	beq.n	8008970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f06f 0204 	mvn.w	r2, #4
 8008940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2202      	movs	r2, #2
 8008946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 f905 	bl	8008b66 <HAL_TIM_IC_CaptureCallback>
 800895c:	e005      	b.n	800896a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 f8f7 	bl	8008b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f908 	bl	8008b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f003 0308 	and.w	r3, r3, #8
 8008976:	2b00      	cmp	r3, #0
 8008978:	d020      	beq.n	80089bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f003 0308 	and.w	r3, r3, #8
 8008980:	2b00      	cmp	r3, #0
 8008982:	d01b      	beq.n	80089bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f06f 0208 	mvn.w	r2, #8
 800898c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2204      	movs	r2, #4
 8008992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	f003 0303 	and.w	r3, r3, #3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d003      	beq.n	80089aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f8df 	bl	8008b66 <HAL_TIM_IC_CaptureCallback>
 80089a8:	e005      	b.n	80089b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 f8d1 	bl	8008b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f8e2 	bl	8008b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	f003 0310 	and.w	r3, r3, #16
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d020      	beq.n	8008a08 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f003 0310 	and.w	r3, r3, #16
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d01b      	beq.n	8008a08 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f06f 0210 	mvn.w	r2, #16
 80089d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2208      	movs	r2, #8
 80089de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d003      	beq.n	80089f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 f8b9 	bl	8008b66 <HAL_TIM_IC_CaptureCallback>
 80089f4:	e005      	b.n	8008a02 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 f8ab 	bl	8008b52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f8bc 	bl	8008b7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00c      	beq.n	8008a2c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d007      	beq.n	8008a2c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f06f 0201 	mvn.w	r2, #1
 8008a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f7f9 fd76 	bl	8002518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d104      	bne.n	8008a40 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00c      	beq.n	8008a5a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d007      	beq.n	8008a5a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 fafd 	bl	8009054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00c      	beq.n	8008a7e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d007      	beq.n	8008a7e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 faf5 	bl	8009068 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00c      	beq.n	8008aa2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d007      	beq.n	8008aa2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 f876 	bl	8008b8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00c      	beq.n	8008ac6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f003 0320 	and.w	r3, r3, #32
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d007      	beq.n	8008ac6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f06f 0220 	mvn.w	r2, #32
 8008abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fabd 	bl	8009040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ac6:	bf00      	nop
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d101      	bne.n	8008ae6 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008ae2:	2302      	movs	r3, #2
 8008ae4:	e031      	b.n	8008b4a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2202      	movs	r2, #2
 8008af2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 f8ff 	bl	8008cfc <TIM_SlaveTimer_SetConfig>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d009      	beq.n	8008b18 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e018      	b.n	8008b4a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b26:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68da      	ldr	r2, [r3, #12]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008b36:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b48:	2300      	movs	r3, #0
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3708      	adds	r7, #8
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b5a:	bf00      	nop
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b6e:	bf00      	nop
 8008b70:	370c      	adds	r7, #12
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b7a:	b480      	push	{r7}
 8008b7c:	b083      	sub	sp, #12
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b82:	bf00      	nop
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
	...

08008ba4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a46      	ldr	r2, [pc, #280]	@ (8008cd0 <TIM_Base_SetConfig+0x12c>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d013      	beq.n	8008be4 <TIM_Base_SetConfig+0x40>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bc2:	d00f      	beq.n	8008be4 <TIM_Base_SetConfig+0x40>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a43      	ldr	r2, [pc, #268]	@ (8008cd4 <TIM_Base_SetConfig+0x130>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d00b      	beq.n	8008be4 <TIM_Base_SetConfig+0x40>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a42      	ldr	r2, [pc, #264]	@ (8008cd8 <TIM_Base_SetConfig+0x134>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d007      	beq.n	8008be4 <TIM_Base_SetConfig+0x40>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a41      	ldr	r2, [pc, #260]	@ (8008cdc <TIM_Base_SetConfig+0x138>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d003      	beq.n	8008be4 <TIM_Base_SetConfig+0x40>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a40      	ldr	r2, [pc, #256]	@ (8008ce0 <TIM_Base_SetConfig+0x13c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d108      	bne.n	8008bf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a35      	ldr	r2, [pc, #212]	@ (8008cd0 <TIM_Base_SetConfig+0x12c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d02b      	beq.n	8008c56 <TIM_Base_SetConfig+0xb2>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c04:	d027      	beq.n	8008c56 <TIM_Base_SetConfig+0xb2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a32      	ldr	r2, [pc, #200]	@ (8008cd4 <TIM_Base_SetConfig+0x130>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d023      	beq.n	8008c56 <TIM_Base_SetConfig+0xb2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a31      	ldr	r2, [pc, #196]	@ (8008cd8 <TIM_Base_SetConfig+0x134>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d01f      	beq.n	8008c56 <TIM_Base_SetConfig+0xb2>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a30      	ldr	r2, [pc, #192]	@ (8008cdc <TIM_Base_SetConfig+0x138>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d01b      	beq.n	8008c56 <TIM_Base_SetConfig+0xb2>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a2f      	ldr	r2, [pc, #188]	@ (8008ce0 <TIM_Base_SetConfig+0x13c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d017      	beq.n	8008c56 <TIM_Base_SetConfig+0xb2>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a2e      	ldr	r2, [pc, #184]	@ (8008ce4 <TIM_Base_SetConfig+0x140>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d013      	beq.n	8008c56 <TIM_Base_SetConfig+0xb2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a2d      	ldr	r2, [pc, #180]	@ (8008ce8 <TIM_Base_SetConfig+0x144>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00f      	beq.n	8008c56 <TIM_Base_SetConfig+0xb2>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a2c      	ldr	r2, [pc, #176]	@ (8008cec <TIM_Base_SetConfig+0x148>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d00b      	beq.n	8008c56 <TIM_Base_SetConfig+0xb2>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a2b      	ldr	r2, [pc, #172]	@ (8008cf0 <TIM_Base_SetConfig+0x14c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d007      	beq.n	8008c56 <TIM_Base_SetConfig+0xb2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a2a      	ldr	r2, [pc, #168]	@ (8008cf4 <TIM_Base_SetConfig+0x150>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d003      	beq.n	8008c56 <TIM_Base_SetConfig+0xb2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a29      	ldr	r2, [pc, #164]	@ (8008cf8 <TIM_Base_SetConfig+0x154>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d108      	bne.n	8008c68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a10      	ldr	r2, [pc, #64]	@ (8008cd0 <TIM_Base_SetConfig+0x12c>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d003      	beq.n	8008c9c <TIM_Base_SetConfig+0xf8>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a12      	ldr	r2, [pc, #72]	@ (8008ce0 <TIM_Base_SetConfig+0x13c>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d103      	bne.n	8008ca4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	691a      	ldr	r2, [r3, #16]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d105      	bne.n	8008cc2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	f023 0201 	bic.w	r2, r3, #1
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	611a      	str	r2, [r3, #16]
  }
}
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	40010000 	.word	0x40010000
 8008cd4:	40000400 	.word	0x40000400
 8008cd8:	40000800 	.word	0x40000800
 8008cdc:	40000c00 	.word	0x40000c00
 8008ce0:	40010400 	.word	0x40010400
 8008ce4:	40014000 	.word	0x40014000
 8008ce8:	40014400 	.word	0x40014400
 8008cec:	40014800 	.word	0x40014800
 8008cf0:	40001800 	.word	0x40001800
 8008cf4:	40001c00 	.word	0x40001c00
 8008cf8:	40002000 	.word	0x40002000

08008cfc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b086      	sub	sp, #24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008d06:	2300      	movs	r3, #0
 8008d08:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d18:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008d24:	693a      	ldr	r2, [r7, #16]
 8008d26:	4b3e      	ldr	r3, [pc, #248]	@ (8008e20 <TIM_SlaveTimer_SetConfig+0x124>)
 8008d28:	4013      	ands	r3, r2
 8008d2a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	693a      	ldr	r2, [r7, #16]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	2b70      	cmp	r3, #112	@ 0x70
 8008d44:	d01a      	beq.n	8008d7c <TIM_SlaveTimer_SetConfig+0x80>
 8008d46:	2b70      	cmp	r3, #112	@ 0x70
 8008d48:	d860      	bhi.n	8008e0c <TIM_SlaveTimer_SetConfig+0x110>
 8008d4a:	2b60      	cmp	r3, #96	@ 0x60
 8008d4c:	d054      	beq.n	8008df8 <TIM_SlaveTimer_SetConfig+0xfc>
 8008d4e:	2b60      	cmp	r3, #96	@ 0x60
 8008d50:	d85c      	bhi.n	8008e0c <TIM_SlaveTimer_SetConfig+0x110>
 8008d52:	2b50      	cmp	r3, #80	@ 0x50
 8008d54:	d046      	beq.n	8008de4 <TIM_SlaveTimer_SetConfig+0xe8>
 8008d56:	2b50      	cmp	r3, #80	@ 0x50
 8008d58:	d858      	bhi.n	8008e0c <TIM_SlaveTimer_SetConfig+0x110>
 8008d5a:	2b40      	cmp	r3, #64	@ 0x40
 8008d5c:	d019      	beq.n	8008d92 <TIM_SlaveTimer_SetConfig+0x96>
 8008d5e:	2b40      	cmp	r3, #64	@ 0x40
 8008d60:	d854      	bhi.n	8008e0c <TIM_SlaveTimer_SetConfig+0x110>
 8008d62:	2b30      	cmp	r3, #48	@ 0x30
 8008d64:	d055      	beq.n	8008e12 <TIM_SlaveTimer_SetConfig+0x116>
 8008d66:	2b30      	cmp	r3, #48	@ 0x30
 8008d68:	d850      	bhi.n	8008e0c <TIM_SlaveTimer_SetConfig+0x110>
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	d051      	beq.n	8008e12 <TIM_SlaveTimer_SetConfig+0x116>
 8008d6e:	2b20      	cmp	r3, #32
 8008d70:	d84c      	bhi.n	8008e0c <TIM_SlaveTimer_SetConfig+0x110>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d04d      	beq.n	8008e12 <TIM_SlaveTimer_SetConfig+0x116>
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d04b      	beq.n	8008e12 <TIM_SlaveTimer_SetConfig+0x116>
 8008d7a:	e047      	b.n	8008e0c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008d8c:	f000 f8a9 	bl	8008ee2 <TIM_ETR_SetConfig>
      break;
 8008d90:	e040      	b.n	8008e14 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	d101      	bne.n	8008d9e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e03b      	b.n	8008e16 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6a1a      	ldr	r2, [r3, #32]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f022 0201 	bic.w	r2, r2, #1
 8008db4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dc4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	011b      	lsls	r3, r3, #4
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68ba      	ldr	r2, [r7, #8]
 8008dd8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	68fa      	ldr	r2, [r7, #12]
 8008de0:	621a      	str	r2, [r3, #32]
      break;
 8008de2:	e017      	b.n	8008e14 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008df0:	461a      	mov	r2, r3
 8008df2:	f000 f817 	bl	8008e24 <TIM_TI1_ConfigInputStage>
      break;
 8008df6:	e00d      	b.n	8008e14 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e04:	461a      	mov	r2, r3
 8008e06:	f000 f83c 	bl	8008e82 <TIM_TI2_ConfigInputStage>
      break;
 8008e0a:	e003      	b.n	8008e14 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e10:	e000      	b.n	8008e14 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008e12:	bf00      	nop
  }

  return status;
 8008e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	fffefff8 	.word	0xfffefff8

08008e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e24:	b480      	push	{r7}
 8008e26:	b087      	sub	sp, #28
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6a1b      	ldr	r3, [r3, #32]
 8008e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	f023 0201 	bic.w	r2, r3, #1
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	699b      	ldr	r3, [r3, #24]
 8008e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	011b      	lsls	r3, r3, #4
 8008e54:	693a      	ldr	r2, [r7, #16]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f023 030a 	bic.w	r3, r3, #10
 8008e60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	697a      	ldr	r2, [r7, #20]
 8008e74:	621a      	str	r2, [r3, #32]
}
 8008e76:	bf00      	nop
 8008e78:	371c      	adds	r7, #28
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr

08008e82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b087      	sub	sp, #28
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	60f8      	str	r0, [r7, #12]
 8008e8a:	60b9      	str	r1, [r7, #8]
 8008e8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6a1b      	ldr	r3, [r3, #32]
 8008e92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6a1b      	ldr	r3, [r3, #32]
 8008e98:	f023 0210 	bic.w	r2, r3, #16
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	031b      	lsls	r3, r3, #12
 8008eb2:	693a      	ldr	r2, [r7, #16]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	011b      	lsls	r3, r3, #4
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	621a      	str	r2, [r3, #32]
}
 8008ed6:	bf00      	nop
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b087      	sub	sp, #28
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	60f8      	str	r0, [r7, #12]
 8008eea:	60b9      	str	r1, [r7, #8]
 8008eec:	607a      	str	r2, [r7, #4]
 8008eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008efc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	021a      	lsls	r2, r3, #8
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	431a      	orrs	r2, r3
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	697a      	ldr	r2, [r7, #20]
 8008f14:	609a      	str	r2, [r3, #8]
}
 8008f16:	bf00      	nop
 8008f18:	371c      	adds	r7, #28
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
	...

08008f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b085      	sub	sp, #20
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e06d      	b.n	8009018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a30      	ldr	r2, [pc, #192]	@ (8009024 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d004      	beq.n	8008f70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8009028 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d108      	bne.n	8008f82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008f76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a20      	ldr	r2, [pc, #128]	@ (8009024 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d022      	beq.n	8008fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fae:	d01d      	beq.n	8008fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800902c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d018      	beq.n	8008fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a1c      	ldr	r2, [pc, #112]	@ (8009030 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d013      	beq.n	8008fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a1a      	ldr	r2, [pc, #104]	@ (8009034 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d00e      	beq.n	8008fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a15      	ldr	r2, [pc, #84]	@ (8009028 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d009      	beq.n	8008fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a16      	ldr	r2, [pc, #88]	@ (8009038 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d004      	beq.n	8008fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a15      	ldr	r2, [pc, #84]	@ (800903c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d10c      	bne.n	8009006 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008ff2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr
 8009024:	40010000 	.word	0x40010000
 8009028:	40010400 	.word	0x40010400
 800902c:	40000400 	.word	0x40000400
 8009030:	40000800 	.word	0x40000800
 8009034:	40000c00 	.word	0x40000c00
 8009038:	40014000 	.word	0x40014000
 800903c:	40001800 	.word	0x40001800

08009040 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800905c:	bf00      	nop
 800905e:	370c      	adds	r7, #12
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e040      	b.n	8009110 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d106      	bne.n	80090a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7f9 fc42 	bl	8002928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2224      	movs	r2, #36	@ 0x24
 80090a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0201 	bic.w	r2, r2, #1
 80090b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d002      	beq.n	80090c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fa8c 	bl	80095e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 f825 	bl	8009118 <UART_SetConfig>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d101      	bne.n	80090d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e01b      	b.n	8009110 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	685a      	ldr	r2, [r3, #4]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0201 	orr.w	r2, r2, #1
 8009106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fb0b 	bl	8009724 <UART_CheckIdleState>
 800910e:	4603      	mov	r3, r0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b088      	sub	sp, #32
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	431a      	orrs	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	431a      	orrs	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	69db      	ldr	r3, [r3, #28]
 8009138:	4313      	orrs	r3, r2
 800913a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	4ba6      	ldr	r3, [pc, #664]	@ (80093dc <UART_SetConfig+0x2c4>)
 8009144:	4013      	ands	r3, r2
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	6812      	ldr	r2, [r2, #0]
 800914a:	6979      	ldr	r1, [r7, #20]
 800914c:	430b      	orrs	r3, r1
 800914e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68da      	ldr	r2, [r3, #12]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	430a      	orrs	r2, r1
 8009164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6a1b      	ldr	r3, [r3, #32]
 8009170:	697a      	ldr	r2, [r7, #20]
 8009172:	4313      	orrs	r3, r2
 8009174:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	430a      	orrs	r2, r1
 8009188:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a94      	ldr	r2, [pc, #592]	@ (80093e0 <UART_SetConfig+0x2c8>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d120      	bne.n	80091d6 <UART_SetConfig+0xbe>
 8009194:	4b93      	ldr	r3, [pc, #588]	@ (80093e4 <UART_SetConfig+0x2cc>)
 8009196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800919a:	f003 0303 	and.w	r3, r3, #3
 800919e:	2b03      	cmp	r3, #3
 80091a0:	d816      	bhi.n	80091d0 <UART_SetConfig+0xb8>
 80091a2:	a201      	add	r2, pc, #4	@ (adr r2, 80091a8 <UART_SetConfig+0x90>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	080091b9 	.word	0x080091b9
 80091ac:	080091c5 	.word	0x080091c5
 80091b0:	080091bf 	.word	0x080091bf
 80091b4:	080091cb 	.word	0x080091cb
 80091b8:	2301      	movs	r3, #1
 80091ba:	77fb      	strb	r3, [r7, #31]
 80091bc:	e150      	b.n	8009460 <UART_SetConfig+0x348>
 80091be:	2302      	movs	r3, #2
 80091c0:	77fb      	strb	r3, [r7, #31]
 80091c2:	e14d      	b.n	8009460 <UART_SetConfig+0x348>
 80091c4:	2304      	movs	r3, #4
 80091c6:	77fb      	strb	r3, [r7, #31]
 80091c8:	e14a      	b.n	8009460 <UART_SetConfig+0x348>
 80091ca:	2308      	movs	r3, #8
 80091cc:	77fb      	strb	r3, [r7, #31]
 80091ce:	e147      	b.n	8009460 <UART_SetConfig+0x348>
 80091d0:	2310      	movs	r3, #16
 80091d2:	77fb      	strb	r3, [r7, #31]
 80091d4:	e144      	b.n	8009460 <UART_SetConfig+0x348>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a83      	ldr	r2, [pc, #524]	@ (80093e8 <UART_SetConfig+0x2d0>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d132      	bne.n	8009246 <UART_SetConfig+0x12e>
 80091e0:	4b80      	ldr	r3, [pc, #512]	@ (80093e4 <UART_SetConfig+0x2cc>)
 80091e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091e6:	f003 030c 	and.w	r3, r3, #12
 80091ea:	2b0c      	cmp	r3, #12
 80091ec:	d828      	bhi.n	8009240 <UART_SetConfig+0x128>
 80091ee:	a201      	add	r2, pc, #4	@ (adr r2, 80091f4 <UART_SetConfig+0xdc>)
 80091f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f4:	08009229 	.word	0x08009229
 80091f8:	08009241 	.word	0x08009241
 80091fc:	08009241 	.word	0x08009241
 8009200:	08009241 	.word	0x08009241
 8009204:	08009235 	.word	0x08009235
 8009208:	08009241 	.word	0x08009241
 800920c:	08009241 	.word	0x08009241
 8009210:	08009241 	.word	0x08009241
 8009214:	0800922f 	.word	0x0800922f
 8009218:	08009241 	.word	0x08009241
 800921c:	08009241 	.word	0x08009241
 8009220:	08009241 	.word	0x08009241
 8009224:	0800923b 	.word	0x0800923b
 8009228:	2300      	movs	r3, #0
 800922a:	77fb      	strb	r3, [r7, #31]
 800922c:	e118      	b.n	8009460 <UART_SetConfig+0x348>
 800922e:	2302      	movs	r3, #2
 8009230:	77fb      	strb	r3, [r7, #31]
 8009232:	e115      	b.n	8009460 <UART_SetConfig+0x348>
 8009234:	2304      	movs	r3, #4
 8009236:	77fb      	strb	r3, [r7, #31]
 8009238:	e112      	b.n	8009460 <UART_SetConfig+0x348>
 800923a:	2308      	movs	r3, #8
 800923c:	77fb      	strb	r3, [r7, #31]
 800923e:	e10f      	b.n	8009460 <UART_SetConfig+0x348>
 8009240:	2310      	movs	r3, #16
 8009242:	77fb      	strb	r3, [r7, #31]
 8009244:	e10c      	b.n	8009460 <UART_SetConfig+0x348>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a68      	ldr	r2, [pc, #416]	@ (80093ec <UART_SetConfig+0x2d4>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d120      	bne.n	8009292 <UART_SetConfig+0x17a>
 8009250:	4b64      	ldr	r3, [pc, #400]	@ (80093e4 <UART_SetConfig+0x2cc>)
 8009252:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009256:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800925a:	2b30      	cmp	r3, #48	@ 0x30
 800925c:	d013      	beq.n	8009286 <UART_SetConfig+0x16e>
 800925e:	2b30      	cmp	r3, #48	@ 0x30
 8009260:	d814      	bhi.n	800928c <UART_SetConfig+0x174>
 8009262:	2b20      	cmp	r3, #32
 8009264:	d009      	beq.n	800927a <UART_SetConfig+0x162>
 8009266:	2b20      	cmp	r3, #32
 8009268:	d810      	bhi.n	800928c <UART_SetConfig+0x174>
 800926a:	2b00      	cmp	r3, #0
 800926c:	d002      	beq.n	8009274 <UART_SetConfig+0x15c>
 800926e:	2b10      	cmp	r3, #16
 8009270:	d006      	beq.n	8009280 <UART_SetConfig+0x168>
 8009272:	e00b      	b.n	800928c <UART_SetConfig+0x174>
 8009274:	2300      	movs	r3, #0
 8009276:	77fb      	strb	r3, [r7, #31]
 8009278:	e0f2      	b.n	8009460 <UART_SetConfig+0x348>
 800927a:	2302      	movs	r3, #2
 800927c:	77fb      	strb	r3, [r7, #31]
 800927e:	e0ef      	b.n	8009460 <UART_SetConfig+0x348>
 8009280:	2304      	movs	r3, #4
 8009282:	77fb      	strb	r3, [r7, #31]
 8009284:	e0ec      	b.n	8009460 <UART_SetConfig+0x348>
 8009286:	2308      	movs	r3, #8
 8009288:	77fb      	strb	r3, [r7, #31]
 800928a:	e0e9      	b.n	8009460 <UART_SetConfig+0x348>
 800928c:	2310      	movs	r3, #16
 800928e:	77fb      	strb	r3, [r7, #31]
 8009290:	e0e6      	b.n	8009460 <UART_SetConfig+0x348>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a56      	ldr	r2, [pc, #344]	@ (80093f0 <UART_SetConfig+0x2d8>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d120      	bne.n	80092de <UART_SetConfig+0x1c6>
 800929c:	4b51      	ldr	r3, [pc, #324]	@ (80093e4 <UART_SetConfig+0x2cc>)
 800929e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80092a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80092a8:	d013      	beq.n	80092d2 <UART_SetConfig+0x1ba>
 80092aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80092ac:	d814      	bhi.n	80092d8 <UART_SetConfig+0x1c0>
 80092ae:	2b80      	cmp	r3, #128	@ 0x80
 80092b0:	d009      	beq.n	80092c6 <UART_SetConfig+0x1ae>
 80092b2:	2b80      	cmp	r3, #128	@ 0x80
 80092b4:	d810      	bhi.n	80092d8 <UART_SetConfig+0x1c0>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d002      	beq.n	80092c0 <UART_SetConfig+0x1a8>
 80092ba:	2b40      	cmp	r3, #64	@ 0x40
 80092bc:	d006      	beq.n	80092cc <UART_SetConfig+0x1b4>
 80092be:	e00b      	b.n	80092d8 <UART_SetConfig+0x1c0>
 80092c0:	2300      	movs	r3, #0
 80092c2:	77fb      	strb	r3, [r7, #31]
 80092c4:	e0cc      	b.n	8009460 <UART_SetConfig+0x348>
 80092c6:	2302      	movs	r3, #2
 80092c8:	77fb      	strb	r3, [r7, #31]
 80092ca:	e0c9      	b.n	8009460 <UART_SetConfig+0x348>
 80092cc:	2304      	movs	r3, #4
 80092ce:	77fb      	strb	r3, [r7, #31]
 80092d0:	e0c6      	b.n	8009460 <UART_SetConfig+0x348>
 80092d2:	2308      	movs	r3, #8
 80092d4:	77fb      	strb	r3, [r7, #31]
 80092d6:	e0c3      	b.n	8009460 <UART_SetConfig+0x348>
 80092d8:	2310      	movs	r3, #16
 80092da:	77fb      	strb	r3, [r7, #31]
 80092dc:	e0c0      	b.n	8009460 <UART_SetConfig+0x348>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a44      	ldr	r2, [pc, #272]	@ (80093f4 <UART_SetConfig+0x2dc>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d125      	bne.n	8009334 <UART_SetConfig+0x21c>
 80092e8:	4b3e      	ldr	r3, [pc, #248]	@ (80093e4 <UART_SetConfig+0x2cc>)
 80092ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092f6:	d017      	beq.n	8009328 <UART_SetConfig+0x210>
 80092f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092fc:	d817      	bhi.n	800932e <UART_SetConfig+0x216>
 80092fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009302:	d00b      	beq.n	800931c <UART_SetConfig+0x204>
 8009304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009308:	d811      	bhi.n	800932e <UART_SetConfig+0x216>
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <UART_SetConfig+0x1fe>
 800930e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009312:	d006      	beq.n	8009322 <UART_SetConfig+0x20a>
 8009314:	e00b      	b.n	800932e <UART_SetConfig+0x216>
 8009316:	2300      	movs	r3, #0
 8009318:	77fb      	strb	r3, [r7, #31]
 800931a:	e0a1      	b.n	8009460 <UART_SetConfig+0x348>
 800931c:	2302      	movs	r3, #2
 800931e:	77fb      	strb	r3, [r7, #31]
 8009320:	e09e      	b.n	8009460 <UART_SetConfig+0x348>
 8009322:	2304      	movs	r3, #4
 8009324:	77fb      	strb	r3, [r7, #31]
 8009326:	e09b      	b.n	8009460 <UART_SetConfig+0x348>
 8009328:	2308      	movs	r3, #8
 800932a:	77fb      	strb	r3, [r7, #31]
 800932c:	e098      	b.n	8009460 <UART_SetConfig+0x348>
 800932e:	2310      	movs	r3, #16
 8009330:	77fb      	strb	r3, [r7, #31]
 8009332:	e095      	b.n	8009460 <UART_SetConfig+0x348>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a2f      	ldr	r2, [pc, #188]	@ (80093f8 <UART_SetConfig+0x2e0>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d125      	bne.n	800938a <UART_SetConfig+0x272>
 800933e:	4b29      	ldr	r3, [pc, #164]	@ (80093e4 <UART_SetConfig+0x2cc>)
 8009340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009344:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009348:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800934c:	d017      	beq.n	800937e <UART_SetConfig+0x266>
 800934e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009352:	d817      	bhi.n	8009384 <UART_SetConfig+0x26c>
 8009354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009358:	d00b      	beq.n	8009372 <UART_SetConfig+0x25a>
 800935a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800935e:	d811      	bhi.n	8009384 <UART_SetConfig+0x26c>
 8009360:	2b00      	cmp	r3, #0
 8009362:	d003      	beq.n	800936c <UART_SetConfig+0x254>
 8009364:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009368:	d006      	beq.n	8009378 <UART_SetConfig+0x260>
 800936a:	e00b      	b.n	8009384 <UART_SetConfig+0x26c>
 800936c:	2301      	movs	r3, #1
 800936e:	77fb      	strb	r3, [r7, #31]
 8009370:	e076      	b.n	8009460 <UART_SetConfig+0x348>
 8009372:	2302      	movs	r3, #2
 8009374:	77fb      	strb	r3, [r7, #31]
 8009376:	e073      	b.n	8009460 <UART_SetConfig+0x348>
 8009378:	2304      	movs	r3, #4
 800937a:	77fb      	strb	r3, [r7, #31]
 800937c:	e070      	b.n	8009460 <UART_SetConfig+0x348>
 800937e:	2308      	movs	r3, #8
 8009380:	77fb      	strb	r3, [r7, #31]
 8009382:	e06d      	b.n	8009460 <UART_SetConfig+0x348>
 8009384:	2310      	movs	r3, #16
 8009386:	77fb      	strb	r3, [r7, #31]
 8009388:	e06a      	b.n	8009460 <UART_SetConfig+0x348>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a1b      	ldr	r2, [pc, #108]	@ (80093fc <UART_SetConfig+0x2e4>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d138      	bne.n	8009406 <UART_SetConfig+0x2ee>
 8009394:	4b13      	ldr	r3, [pc, #76]	@ (80093e4 <UART_SetConfig+0x2cc>)
 8009396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800939a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800939e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093a2:	d017      	beq.n	80093d4 <UART_SetConfig+0x2bc>
 80093a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80093a8:	d82a      	bhi.n	8009400 <UART_SetConfig+0x2e8>
 80093aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093ae:	d00b      	beq.n	80093c8 <UART_SetConfig+0x2b0>
 80093b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093b4:	d824      	bhi.n	8009400 <UART_SetConfig+0x2e8>
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <UART_SetConfig+0x2aa>
 80093ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093be:	d006      	beq.n	80093ce <UART_SetConfig+0x2b6>
 80093c0:	e01e      	b.n	8009400 <UART_SetConfig+0x2e8>
 80093c2:	2300      	movs	r3, #0
 80093c4:	77fb      	strb	r3, [r7, #31]
 80093c6:	e04b      	b.n	8009460 <UART_SetConfig+0x348>
 80093c8:	2302      	movs	r3, #2
 80093ca:	77fb      	strb	r3, [r7, #31]
 80093cc:	e048      	b.n	8009460 <UART_SetConfig+0x348>
 80093ce:	2304      	movs	r3, #4
 80093d0:	77fb      	strb	r3, [r7, #31]
 80093d2:	e045      	b.n	8009460 <UART_SetConfig+0x348>
 80093d4:	2308      	movs	r3, #8
 80093d6:	77fb      	strb	r3, [r7, #31]
 80093d8:	e042      	b.n	8009460 <UART_SetConfig+0x348>
 80093da:	bf00      	nop
 80093dc:	efff69f3 	.word	0xefff69f3
 80093e0:	40011000 	.word	0x40011000
 80093e4:	40023800 	.word	0x40023800
 80093e8:	40004400 	.word	0x40004400
 80093ec:	40004800 	.word	0x40004800
 80093f0:	40004c00 	.word	0x40004c00
 80093f4:	40005000 	.word	0x40005000
 80093f8:	40011400 	.word	0x40011400
 80093fc:	40007800 	.word	0x40007800
 8009400:	2310      	movs	r3, #16
 8009402:	77fb      	strb	r3, [r7, #31]
 8009404:	e02c      	b.n	8009460 <UART_SetConfig+0x348>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a72      	ldr	r2, [pc, #456]	@ (80095d4 <UART_SetConfig+0x4bc>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d125      	bne.n	800945c <UART_SetConfig+0x344>
 8009410:	4b71      	ldr	r3, [pc, #452]	@ (80095d8 <UART_SetConfig+0x4c0>)
 8009412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009416:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800941a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800941e:	d017      	beq.n	8009450 <UART_SetConfig+0x338>
 8009420:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8009424:	d817      	bhi.n	8009456 <UART_SetConfig+0x33e>
 8009426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800942a:	d00b      	beq.n	8009444 <UART_SetConfig+0x32c>
 800942c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009430:	d811      	bhi.n	8009456 <UART_SetConfig+0x33e>
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <UART_SetConfig+0x326>
 8009436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800943a:	d006      	beq.n	800944a <UART_SetConfig+0x332>
 800943c:	e00b      	b.n	8009456 <UART_SetConfig+0x33e>
 800943e:	2300      	movs	r3, #0
 8009440:	77fb      	strb	r3, [r7, #31]
 8009442:	e00d      	b.n	8009460 <UART_SetConfig+0x348>
 8009444:	2302      	movs	r3, #2
 8009446:	77fb      	strb	r3, [r7, #31]
 8009448:	e00a      	b.n	8009460 <UART_SetConfig+0x348>
 800944a:	2304      	movs	r3, #4
 800944c:	77fb      	strb	r3, [r7, #31]
 800944e:	e007      	b.n	8009460 <UART_SetConfig+0x348>
 8009450:	2308      	movs	r3, #8
 8009452:	77fb      	strb	r3, [r7, #31]
 8009454:	e004      	b.n	8009460 <UART_SetConfig+0x348>
 8009456:	2310      	movs	r3, #16
 8009458:	77fb      	strb	r3, [r7, #31]
 800945a:	e001      	b.n	8009460 <UART_SetConfig+0x348>
 800945c:	2310      	movs	r3, #16
 800945e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	69db      	ldr	r3, [r3, #28]
 8009464:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009468:	d15b      	bne.n	8009522 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800946a:	7ffb      	ldrb	r3, [r7, #31]
 800946c:	2b08      	cmp	r3, #8
 800946e:	d828      	bhi.n	80094c2 <UART_SetConfig+0x3aa>
 8009470:	a201      	add	r2, pc, #4	@ (adr r2, 8009478 <UART_SetConfig+0x360>)
 8009472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009476:	bf00      	nop
 8009478:	0800949d 	.word	0x0800949d
 800947c:	080094a5 	.word	0x080094a5
 8009480:	080094ad 	.word	0x080094ad
 8009484:	080094c3 	.word	0x080094c3
 8009488:	080094b3 	.word	0x080094b3
 800948c:	080094c3 	.word	0x080094c3
 8009490:	080094c3 	.word	0x080094c3
 8009494:	080094c3 	.word	0x080094c3
 8009498:	080094bb 	.word	0x080094bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800949c:	f7fe f89a 	bl	80075d4 <HAL_RCC_GetPCLK1Freq>
 80094a0:	61b8      	str	r0, [r7, #24]
        break;
 80094a2:	e013      	b.n	80094cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094a4:	f7fe f8aa 	bl	80075fc <HAL_RCC_GetPCLK2Freq>
 80094a8:	61b8      	str	r0, [r7, #24]
        break;
 80094aa:	e00f      	b.n	80094cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094ac:	4b4b      	ldr	r3, [pc, #300]	@ (80095dc <UART_SetConfig+0x4c4>)
 80094ae:	61bb      	str	r3, [r7, #24]
        break;
 80094b0:	e00c      	b.n	80094cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094b2:	f7fd ffbd 	bl	8007430 <HAL_RCC_GetSysClockFreq>
 80094b6:	61b8      	str	r0, [r7, #24]
        break;
 80094b8:	e008      	b.n	80094cc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094be:	61bb      	str	r3, [r7, #24]
        break;
 80094c0:	e004      	b.n	80094cc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	77bb      	strb	r3, [r7, #30]
        break;
 80094ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d074      	beq.n	80095bc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	005a      	lsls	r2, r3, #1
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	085b      	lsrs	r3, r3, #1
 80094dc:	441a      	add	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	2b0f      	cmp	r3, #15
 80094ec:	d916      	bls.n	800951c <UART_SetConfig+0x404>
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094f4:	d212      	bcs.n	800951c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	f023 030f 	bic.w	r3, r3, #15
 80094fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	085b      	lsrs	r3, r3, #1
 8009504:	b29b      	uxth	r3, r3
 8009506:	f003 0307 	and.w	r3, r3, #7
 800950a:	b29a      	uxth	r2, r3
 800950c:	89fb      	ldrh	r3, [r7, #14]
 800950e:	4313      	orrs	r3, r2
 8009510:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	89fa      	ldrh	r2, [r7, #14]
 8009518:	60da      	str	r2, [r3, #12]
 800951a:	e04f      	b.n	80095bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	77bb      	strb	r3, [r7, #30]
 8009520:	e04c      	b.n	80095bc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009522:	7ffb      	ldrb	r3, [r7, #31]
 8009524:	2b08      	cmp	r3, #8
 8009526:	d828      	bhi.n	800957a <UART_SetConfig+0x462>
 8009528:	a201      	add	r2, pc, #4	@ (adr r2, 8009530 <UART_SetConfig+0x418>)
 800952a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952e:	bf00      	nop
 8009530:	08009555 	.word	0x08009555
 8009534:	0800955d 	.word	0x0800955d
 8009538:	08009565 	.word	0x08009565
 800953c:	0800957b 	.word	0x0800957b
 8009540:	0800956b 	.word	0x0800956b
 8009544:	0800957b 	.word	0x0800957b
 8009548:	0800957b 	.word	0x0800957b
 800954c:	0800957b 	.word	0x0800957b
 8009550:	08009573 	.word	0x08009573
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009554:	f7fe f83e 	bl	80075d4 <HAL_RCC_GetPCLK1Freq>
 8009558:	61b8      	str	r0, [r7, #24]
        break;
 800955a:	e013      	b.n	8009584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800955c:	f7fe f84e 	bl	80075fc <HAL_RCC_GetPCLK2Freq>
 8009560:	61b8      	str	r0, [r7, #24]
        break;
 8009562:	e00f      	b.n	8009584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009564:	4b1d      	ldr	r3, [pc, #116]	@ (80095dc <UART_SetConfig+0x4c4>)
 8009566:	61bb      	str	r3, [r7, #24]
        break;
 8009568:	e00c      	b.n	8009584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800956a:	f7fd ff61 	bl	8007430 <HAL_RCC_GetSysClockFreq>
 800956e:	61b8      	str	r0, [r7, #24]
        break;
 8009570:	e008      	b.n	8009584 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009576:	61bb      	str	r3, [r7, #24]
        break;
 8009578:	e004      	b.n	8009584 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	77bb      	strb	r3, [r7, #30]
        break;
 8009582:	bf00      	nop
    }

    if (pclk != 0U)
 8009584:	69bb      	ldr	r3, [r7, #24]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d018      	beq.n	80095bc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	085a      	lsrs	r2, r3, #1
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	441a      	add	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	fbb2 f3f3 	udiv	r3, r2, r3
 800959c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	2b0f      	cmp	r3, #15
 80095a2:	d909      	bls.n	80095b8 <UART_SetConfig+0x4a0>
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095aa:	d205      	bcs.n	80095b8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	60da      	str	r2, [r3, #12]
 80095b6:	e001      	b.n	80095bc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80095c8:	7fbb      	ldrb	r3, [r7, #30]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3720      	adds	r7, #32
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	40007c00 	.word	0x40007c00
 80095d8:	40023800 	.word	0x40023800
 80095dc:	00f42400 	.word	0x00f42400

080095e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ec:	f003 0308 	and.w	r3, r3, #8
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00a      	beq.n	800960a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009630:	f003 0302 	and.w	r3, r3, #2
 8009634:	2b00      	cmp	r3, #0
 8009636:	d00a      	beq.n	800964e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009652:	f003 0304 	and.w	r3, r3, #4
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	430a      	orrs	r2, r1
 800966e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009674:	f003 0310 	and.w	r3, r3, #16
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00a      	beq.n	8009692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	430a      	orrs	r2, r1
 8009690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009696:	f003 0320 	and.w	r3, r3, #32
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00a      	beq.n	80096b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	430a      	orrs	r2, r1
 80096b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d01a      	beq.n	80096f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096de:	d10a      	bne.n	80096f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	430a      	orrs	r2, r1
 80096f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	430a      	orrs	r2, r1
 8009716:	605a      	str	r2, [r3, #4]
  }
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08c      	sub	sp, #48	@ 0x30
 8009728:	af02      	add	r7, sp, #8
 800972a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009734:	f7fb f966 	bl	8004a04 <HAL_GetTick>
 8009738:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0308 	and.w	r3, r3, #8
 8009744:	2b08      	cmp	r3, #8
 8009746:	d12e      	bne.n	80097a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009748:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800974c:	9300      	str	r3, [sp, #0]
 800974e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009750:	2200      	movs	r2, #0
 8009752:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f83b 	bl	80097d2 <UART_WaitOnFlagUntilTimeout>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d021      	beq.n	80097a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	e853 3f00 	ldrex	r3, [r3]
 800976e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009776:	623b      	str	r3, [r7, #32]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	6a3b      	ldr	r3, [r7, #32]
 8009780:	61fb      	str	r3, [r7, #28]
 8009782:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009784:	69b9      	ldr	r1, [r7, #24]
 8009786:	69fa      	ldr	r2, [r7, #28]
 8009788:	e841 2300 	strex	r3, r2, [r1]
 800978c:	617b      	str	r3, [r7, #20]
   return(result);
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1e6      	bne.n	8009762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2220      	movs	r2, #32
 8009798:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097a2:	2303      	movs	r3, #3
 80097a4:	e011      	b.n	80097ca <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2220      	movs	r2, #32
 80097aa:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2220      	movs	r2, #32
 80097b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2200      	movs	r2, #0
 80097b8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2200      	movs	r2, #0
 80097be:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3728      	adds	r7, #40	@ 0x28
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	603b      	str	r3, [r7, #0]
 80097de:	4613      	mov	r3, r2
 80097e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097e2:	e04f      	b.n	8009884 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ea:	d04b      	beq.n	8009884 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ec:	f7fb f90a 	bl	8004a04 <HAL_GetTick>
 80097f0:	4602      	mov	r2, r0
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	1ad3      	subs	r3, r2, r3
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d302      	bcc.n	8009802 <UART_WaitOnFlagUntilTimeout+0x30>
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d101      	bne.n	8009806 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009802:	2303      	movs	r3, #3
 8009804:	e04e      	b.n	80098a4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b00      	cmp	r3, #0
 8009812:	d037      	beq.n	8009884 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2b80      	cmp	r3, #128	@ 0x80
 8009818:	d034      	beq.n	8009884 <UART_WaitOnFlagUntilTimeout+0xb2>
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b40      	cmp	r3, #64	@ 0x40
 800981e:	d031      	beq.n	8009884 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	69db      	ldr	r3, [r3, #28]
 8009826:	f003 0308 	and.w	r3, r3, #8
 800982a:	2b08      	cmp	r3, #8
 800982c:	d110      	bne.n	8009850 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2208      	movs	r2, #8
 8009834:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f000 f838 	bl	80098ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2208      	movs	r2, #8
 8009840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e029      	b.n	80098a4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	69db      	ldr	r3, [r3, #28]
 8009856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800985a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800985e:	d111      	bne.n	8009884 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009868:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f81e 	bl	80098ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2220      	movs	r2, #32
 8009874:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009880:	2303      	movs	r3, #3
 8009882:	e00f      	b.n	80098a4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	69da      	ldr	r2, [r3, #28]
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	4013      	ands	r3, r2
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	429a      	cmp	r2, r3
 8009892:	bf0c      	ite	eq
 8009894:	2301      	moveq	r3, #1
 8009896:	2300      	movne	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	461a      	mov	r2, r3
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d0a0      	beq.n	80097e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b095      	sub	sp, #84	@ 0x54
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098bc:	e853 3f00 	ldrex	r3, [r3]
 80098c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80098d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098da:	e841 2300 	strex	r3, r2, [r1]
 80098de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1e6      	bne.n	80098b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3308      	adds	r3, #8
 80098ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80098f6:	69fb      	ldr	r3, [r7, #28]
 80098f8:	f023 0301 	bic.w	r3, r3, #1
 80098fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3308      	adds	r3, #8
 8009904:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009906:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009908:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800990c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e5      	bne.n	80098e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800991e:	2b01      	cmp	r3, #1
 8009920:	d118      	bne.n	8009954 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	e853 3f00 	ldrex	r3, [r3]
 800992e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f023 0310 	bic.w	r3, r3, #16
 8009936:	647b      	str	r3, [r7, #68]	@ 0x44
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009940:	61bb      	str	r3, [r7, #24]
 8009942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	6979      	ldr	r1, [r7, #20]
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	e841 2300 	strex	r3, r2, [r1]
 800994c:	613b      	str	r3, [r7, #16]
   return(result);
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e6      	bne.n	8009922 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2220      	movs	r2, #32
 8009958:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009968:	bf00      	nop
 800996a:	3754      	adds	r7, #84	@ 0x54
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d121      	bne.n	80099ca <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	4b27      	ldr	r3, [pc, #156]	@ (8009a28 <FMC_SDRAM_Init+0xb4>)
 800998c:	4013      	ands	r3, r2
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	6851      	ldr	r1, [r2, #4]
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	6892      	ldr	r2, [r2, #8]
 8009996:	4311      	orrs	r1, r2
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	68d2      	ldr	r2, [r2, #12]
 800999c:	4311      	orrs	r1, r2
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	6912      	ldr	r2, [r2, #16]
 80099a2:	4311      	orrs	r1, r2
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	6952      	ldr	r2, [r2, #20]
 80099a8:	4311      	orrs	r1, r2
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	6992      	ldr	r2, [r2, #24]
 80099ae:	4311      	orrs	r1, r2
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	69d2      	ldr	r2, [r2, #28]
 80099b4:	4311      	orrs	r1, r2
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	6a12      	ldr	r2, [r2, #32]
 80099ba:	4311      	orrs	r1, r2
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80099c0:	430a      	orrs	r2, r1
 80099c2:	431a      	orrs	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	601a      	str	r2, [r3, #0]
 80099c8:	e026      	b.n	8009a18 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	69d9      	ldr	r1, [r3, #28]
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	4319      	orrs	r1, r3
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e0:	430b      	orrs	r3, r1
 80099e2:	431a      	orrs	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	4b0e      	ldr	r3, [pc, #56]	@ (8009a28 <FMC_SDRAM_Init+0xb4>)
 80099ee:	4013      	ands	r3, r2
 80099f0:	683a      	ldr	r2, [r7, #0]
 80099f2:	6851      	ldr	r1, [r2, #4]
 80099f4:	683a      	ldr	r2, [r7, #0]
 80099f6:	6892      	ldr	r2, [r2, #8]
 80099f8:	4311      	orrs	r1, r2
 80099fa:	683a      	ldr	r2, [r7, #0]
 80099fc:	68d2      	ldr	r2, [r2, #12]
 80099fe:	4311      	orrs	r1, r2
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	6912      	ldr	r2, [r2, #16]
 8009a04:	4311      	orrs	r1, r2
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	6952      	ldr	r2, [r2, #20]
 8009a0a:	4311      	orrs	r1, r2
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	6992      	ldr	r2, [r2, #24]
 8009a10:	430a      	orrs	r2, r1
 8009a12:	431a      	orrs	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	370c      	adds	r7, #12
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop
 8009a28:	ffff8000 	.word	0xffff8000

08009a2c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d128      	bne.n	8009a90 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	1e59      	subs	r1, r3, #1
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	3b01      	subs	r3, #1
 8009a52:	011b      	lsls	r3, r3, #4
 8009a54:	4319      	orrs	r1, r3
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	021b      	lsls	r3, r3, #8
 8009a5e:	4319      	orrs	r1, r3
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	3b01      	subs	r3, #1
 8009a66:	031b      	lsls	r3, r3, #12
 8009a68:	4319      	orrs	r1, r3
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	691b      	ldr	r3, [r3, #16]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	041b      	lsls	r3, r3, #16
 8009a72:	4319      	orrs	r1, r3
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	051b      	lsls	r3, r3, #20
 8009a7c:	4319      	orrs	r1, r3
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	061b      	lsls	r3, r3, #24
 8009a86:	430b      	orrs	r3, r1
 8009a88:	431a      	orrs	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	609a      	str	r2, [r3, #8]
 8009a8e:	e02d      	b.n	8009aec <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	4b19      	ldr	r3, [pc, #100]	@ (8009afc <FMC_SDRAM_Timing_Init+0xd0>)
 8009a96:	4013      	ands	r3, r2
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	68d2      	ldr	r2, [r2, #12]
 8009a9c:	3a01      	subs	r2, #1
 8009a9e:	0311      	lsls	r1, r2, #12
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	6952      	ldr	r2, [r2, #20]
 8009aa4:	3a01      	subs	r2, #1
 8009aa6:	0512      	lsls	r2, r2, #20
 8009aa8:	430a      	orrs	r2, r1
 8009aaa:	431a      	orrs	r2, r3
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	1e59      	subs	r1, r3, #1
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	011b      	lsls	r3, r3, #4
 8009ac6:	4319      	orrs	r1, r3
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	021b      	lsls	r3, r3, #8
 8009ad0:	4319      	orrs	r1, r3
 8009ad2:	68bb      	ldr	r3, [r7, #8]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	041b      	lsls	r3, r3, #16
 8009ada:	4319      	orrs	r1, r3
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	061b      	lsls	r3, r3, #24
 8009ae4:	430b      	orrs	r3, r1
 8009ae6:	431a      	orrs	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	ff0f0fff 	.word	0xff0f0fff

08009b00 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b085      	sub	sp, #20
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	691a      	ldr	r2, [r3, #16]
 8009b10:	4b0c      	ldr	r3, [pc, #48]	@ (8009b44 <FMC_SDRAM_SendCommand+0x44>)
 8009b12:	4013      	ands	r3, r2
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	6811      	ldr	r1, [r2, #0]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	6852      	ldr	r2, [r2, #4]
 8009b1c:	4311      	orrs	r1, r2
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	6892      	ldr	r2, [r2, #8]
 8009b22:	3a01      	subs	r2, #1
 8009b24:	0152      	lsls	r2, r2, #5
 8009b26:	4311      	orrs	r1, r2
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	68d2      	ldr	r2, [r2, #12]
 8009b2c:	0252      	lsls	r2, r2, #9
 8009b2e:	430a      	orrs	r2, r1
 8009b30:	431a      	orrs	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3714      	adds	r7, #20
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	ffc00000 	.word	0xffc00000

08009b48 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	695a      	ldr	r2, [r3, #20]
 8009b56:	4b07      	ldr	r3, [pc, #28]	@ (8009b74 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009b58:	4013      	ands	r3, r2
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	0052      	lsls	r2, r2, #1
 8009b5e:	431a      	orrs	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	ffffc001 	.word	0xffffc001

08009b78 <siprintf>:
 8009b78:	b40e      	push	{r1, r2, r3}
 8009b7a:	b500      	push	{lr}
 8009b7c:	b09c      	sub	sp, #112	@ 0x70
 8009b7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009b80:	9002      	str	r0, [sp, #8]
 8009b82:	9006      	str	r0, [sp, #24]
 8009b84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b88:	4809      	ldr	r0, [pc, #36]	@ (8009bb0 <siprintf+0x38>)
 8009b8a:	9107      	str	r1, [sp, #28]
 8009b8c:	9104      	str	r1, [sp, #16]
 8009b8e:	4909      	ldr	r1, [pc, #36]	@ (8009bb4 <siprintf+0x3c>)
 8009b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b94:	9105      	str	r1, [sp, #20]
 8009b96:	6800      	ldr	r0, [r0, #0]
 8009b98:	9301      	str	r3, [sp, #4]
 8009b9a:	a902      	add	r1, sp, #8
 8009b9c:	f000 f994 	bl	8009ec8 <_svfiprintf_r>
 8009ba0:	9b02      	ldr	r3, [sp, #8]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	701a      	strb	r2, [r3, #0]
 8009ba6:	b01c      	add	sp, #112	@ 0x70
 8009ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bac:	b003      	add	sp, #12
 8009bae:	4770      	bx	lr
 8009bb0:	20004ed4 	.word	0x20004ed4
 8009bb4:	ffff0208 	.word	0xffff0208

08009bb8 <memset>:
 8009bb8:	4402      	add	r2, r0
 8009bba:	4603      	mov	r3, r0
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d100      	bne.n	8009bc2 <memset+0xa>
 8009bc0:	4770      	bx	lr
 8009bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8009bc6:	e7f9      	b.n	8009bbc <memset+0x4>

08009bc8 <__errno>:
 8009bc8:	4b01      	ldr	r3, [pc, #4]	@ (8009bd0 <__errno+0x8>)
 8009bca:	6818      	ldr	r0, [r3, #0]
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	20004ed4 	.word	0x20004ed4

08009bd4 <__libc_init_array>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8009c0c <__libc_init_array+0x38>)
 8009bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8009c10 <__libc_init_array+0x3c>)
 8009bda:	1b64      	subs	r4, r4, r5
 8009bdc:	10a4      	asrs	r4, r4, #2
 8009bde:	2600      	movs	r6, #0
 8009be0:	42a6      	cmp	r6, r4
 8009be2:	d109      	bne.n	8009bf8 <__libc_init_array+0x24>
 8009be4:	4d0b      	ldr	r5, [pc, #44]	@ (8009c14 <__libc_init_array+0x40>)
 8009be6:	4c0c      	ldr	r4, [pc, #48]	@ (8009c18 <__libc_init_array+0x44>)
 8009be8:	f000 fc66 	bl	800a4b8 <_init>
 8009bec:	1b64      	subs	r4, r4, r5
 8009bee:	10a4      	asrs	r4, r4, #2
 8009bf0:	2600      	movs	r6, #0
 8009bf2:	42a6      	cmp	r6, r4
 8009bf4:	d105      	bne.n	8009c02 <__libc_init_array+0x2e>
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}
 8009bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfc:	4798      	blx	r3
 8009bfe:	3601      	adds	r6, #1
 8009c00:	e7ee      	b.n	8009be0 <__libc_init_array+0xc>
 8009c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c06:	4798      	blx	r3
 8009c08:	3601      	adds	r6, #1
 8009c0a:	e7f2      	b.n	8009bf2 <__libc_init_array+0x1e>
 8009c0c:	0800e074 	.word	0x0800e074
 8009c10:	0800e074 	.word	0x0800e074
 8009c14:	0800e074 	.word	0x0800e074
 8009c18:	0800e078 	.word	0x0800e078

08009c1c <__retarget_lock_acquire_recursive>:
 8009c1c:	4770      	bx	lr

08009c1e <__retarget_lock_release_recursive>:
 8009c1e:	4770      	bx	lr

08009c20 <_free_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4605      	mov	r5, r0
 8009c24:	2900      	cmp	r1, #0
 8009c26:	d041      	beq.n	8009cac <_free_r+0x8c>
 8009c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c2c:	1f0c      	subs	r4, r1, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bfb8      	it	lt
 8009c32:	18e4      	addlt	r4, r4, r3
 8009c34:	f000 f8e0 	bl	8009df8 <__malloc_lock>
 8009c38:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb0 <_free_r+0x90>)
 8009c3a:	6813      	ldr	r3, [r2, #0]
 8009c3c:	b933      	cbnz	r3, 8009c4c <_free_r+0x2c>
 8009c3e:	6063      	str	r3, [r4, #4]
 8009c40:	6014      	str	r4, [r2, #0]
 8009c42:	4628      	mov	r0, r5
 8009c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c48:	f000 b8dc 	b.w	8009e04 <__malloc_unlock>
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	d908      	bls.n	8009c62 <_free_r+0x42>
 8009c50:	6820      	ldr	r0, [r4, #0]
 8009c52:	1821      	adds	r1, r4, r0
 8009c54:	428b      	cmp	r3, r1
 8009c56:	bf01      	itttt	eq
 8009c58:	6819      	ldreq	r1, [r3, #0]
 8009c5a:	685b      	ldreq	r3, [r3, #4]
 8009c5c:	1809      	addeq	r1, r1, r0
 8009c5e:	6021      	streq	r1, [r4, #0]
 8009c60:	e7ed      	b.n	8009c3e <_free_r+0x1e>
 8009c62:	461a      	mov	r2, r3
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	b10b      	cbz	r3, 8009c6c <_free_r+0x4c>
 8009c68:	42a3      	cmp	r3, r4
 8009c6a:	d9fa      	bls.n	8009c62 <_free_r+0x42>
 8009c6c:	6811      	ldr	r1, [r2, #0]
 8009c6e:	1850      	adds	r0, r2, r1
 8009c70:	42a0      	cmp	r0, r4
 8009c72:	d10b      	bne.n	8009c8c <_free_r+0x6c>
 8009c74:	6820      	ldr	r0, [r4, #0]
 8009c76:	4401      	add	r1, r0
 8009c78:	1850      	adds	r0, r2, r1
 8009c7a:	4283      	cmp	r3, r0
 8009c7c:	6011      	str	r1, [r2, #0]
 8009c7e:	d1e0      	bne.n	8009c42 <_free_r+0x22>
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	6053      	str	r3, [r2, #4]
 8009c86:	4408      	add	r0, r1
 8009c88:	6010      	str	r0, [r2, #0]
 8009c8a:	e7da      	b.n	8009c42 <_free_r+0x22>
 8009c8c:	d902      	bls.n	8009c94 <_free_r+0x74>
 8009c8e:	230c      	movs	r3, #12
 8009c90:	602b      	str	r3, [r5, #0]
 8009c92:	e7d6      	b.n	8009c42 <_free_r+0x22>
 8009c94:	6820      	ldr	r0, [r4, #0]
 8009c96:	1821      	adds	r1, r4, r0
 8009c98:	428b      	cmp	r3, r1
 8009c9a:	bf04      	itt	eq
 8009c9c:	6819      	ldreq	r1, [r3, #0]
 8009c9e:	685b      	ldreq	r3, [r3, #4]
 8009ca0:	6063      	str	r3, [r4, #4]
 8009ca2:	bf04      	itt	eq
 8009ca4:	1809      	addeq	r1, r1, r0
 8009ca6:	6021      	streq	r1, [r4, #0]
 8009ca8:	6054      	str	r4, [r2, #4]
 8009caa:	e7ca      	b.n	8009c42 <_free_r+0x22>
 8009cac:	bd38      	pop	{r3, r4, r5, pc}
 8009cae:	bf00      	nop
 8009cb0:	20005644 	.word	0x20005644

08009cb4 <sbrk_aligned>:
 8009cb4:	b570      	push	{r4, r5, r6, lr}
 8009cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8009cf4 <sbrk_aligned+0x40>)
 8009cb8:	460c      	mov	r4, r1
 8009cba:	6831      	ldr	r1, [r6, #0]
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	b911      	cbnz	r1, 8009cc6 <sbrk_aligned+0x12>
 8009cc0:	f000 fba6 	bl	800a410 <_sbrk_r>
 8009cc4:	6030      	str	r0, [r6, #0]
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4628      	mov	r0, r5
 8009cca:	f000 fba1 	bl	800a410 <_sbrk_r>
 8009cce:	1c43      	adds	r3, r0, #1
 8009cd0:	d103      	bne.n	8009cda <sbrk_aligned+0x26>
 8009cd2:	f04f 34ff 	mov.w	r4, #4294967295
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	bd70      	pop	{r4, r5, r6, pc}
 8009cda:	1cc4      	adds	r4, r0, #3
 8009cdc:	f024 0403 	bic.w	r4, r4, #3
 8009ce0:	42a0      	cmp	r0, r4
 8009ce2:	d0f8      	beq.n	8009cd6 <sbrk_aligned+0x22>
 8009ce4:	1a21      	subs	r1, r4, r0
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	f000 fb92 	bl	800a410 <_sbrk_r>
 8009cec:	3001      	adds	r0, #1
 8009cee:	d1f2      	bne.n	8009cd6 <sbrk_aligned+0x22>
 8009cf0:	e7ef      	b.n	8009cd2 <sbrk_aligned+0x1e>
 8009cf2:	bf00      	nop
 8009cf4:	20005640 	.word	0x20005640

08009cf8 <_malloc_r>:
 8009cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cfc:	1ccd      	adds	r5, r1, #3
 8009cfe:	f025 0503 	bic.w	r5, r5, #3
 8009d02:	3508      	adds	r5, #8
 8009d04:	2d0c      	cmp	r5, #12
 8009d06:	bf38      	it	cc
 8009d08:	250c      	movcc	r5, #12
 8009d0a:	2d00      	cmp	r5, #0
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	db01      	blt.n	8009d14 <_malloc_r+0x1c>
 8009d10:	42a9      	cmp	r1, r5
 8009d12:	d904      	bls.n	8009d1e <_malloc_r+0x26>
 8009d14:	230c      	movs	r3, #12
 8009d16:	6033      	str	r3, [r6, #0]
 8009d18:	2000      	movs	r0, #0
 8009d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009df4 <_malloc_r+0xfc>
 8009d22:	f000 f869 	bl	8009df8 <__malloc_lock>
 8009d26:	f8d8 3000 	ldr.w	r3, [r8]
 8009d2a:	461c      	mov	r4, r3
 8009d2c:	bb44      	cbnz	r4, 8009d80 <_malloc_r+0x88>
 8009d2e:	4629      	mov	r1, r5
 8009d30:	4630      	mov	r0, r6
 8009d32:	f7ff ffbf 	bl	8009cb4 <sbrk_aligned>
 8009d36:	1c43      	adds	r3, r0, #1
 8009d38:	4604      	mov	r4, r0
 8009d3a:	d158      	bne.n	8009dee <_malloc_r+0xf6>
 8009d3c:	f8d8 4000 	ldr.w	r4, [r8]
 8009d40:	4627      	mov	r7, r4
 8009d42:	2f00      	cmp	r7, #0
 8009d44:	d143      	bne.n	8009dce <_malloc_r+0xd6>
 8009d46:	2c00      	cmp	r4, #0
 8009d48:	d04b      	beq.n	8009de2 <_malloc_r+0xea>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	4639      	mov	r1, r7
 8009d4e:	4630      	mov	r0, r6
 8009d50:	eb04 0903 	add.w	r9, r4, r3
 8009d54:	f000 fb5c 	bl	800a410 <_sbrk_r>
 8009d58:	4581      	cmp	r9, r0
 8009d5a:	d142      	bne.n	8009de2 <_malloc_r+0xea>
 8009d5c:	6821      	ldr	r1, [r4, #0]
 8009d5e:	1a6d      	subs	r5, r5, r1
 8009d60:	4629      	mov	r1, r5
 8009d62:	4630      	mov	r0, r6
 8009d64:	f7ff ffa6 	bl	8009cb4 <sbrk_aligned>
 8009d68:	3001      	adds	r0, #1
 8009d6a:	d03a      	beq.n	8009de2 <_malloc_r+0xea>
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	442b      	add	r3, r5
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	f8d8 3000 	ldr.w	r3, [r8]
 8009d76:	685a      	ldr	r2, [r3, #4]
 8009d78:	bb62      	cbnz	r2, 8009dd4 <_malloc_r+0xdc>
 8009d7a:	f8c8 7000 	str.w	r7, [r8]
 8009d7e:	e00f      	b.n	8009da0 <_malloc_r+0xa8>
 8009d80:	6822      	ldr	r2, [r4, #0]
 8009d82:	1b52      	subs	r2, r2, r5
 8009d84:	d420      	bmi.n	8009dc8 <_malloc_r+0xd0>
 8009d86:	2a0b      	cmp	r2, #11
 8009d88:	d917      	bls.n	8009dba <_malloc_r+0xc2>
 8009d8a:	1961      	adds	r1, r4, r5
 8009d8c:	42a3      	cmp	r3, r4
 8009d8e:	6025      	str	r5, [r4, #0]
 8009d90:	bf18      	it	ne
 8009d92:	6059      	strne	r1, [r3, #4]
 8009d94:	6863      	ldr	r3, [r4, #4]
 8009d96:	bf08      	it	eq
 8009d98:	f8c8 1000 	streq.w	r1, [r8]
 8009d9c:	5162      	str	r2, [r4, r5]
 8009d9e:	604b      	str	r3, [r1, #4]
 8009da0:	4630      	mov	r0, r6
 8009da2:	f000 f82f 	bl	8009e04 <__malloc_unlock>
 8009da6:	f104 000b 	add.w	r0, r4, #11
 8009daa:	1d23      	adds	r3, r4, #4
 8009dac:	f020 0007 	bic.w	r0, r0, #7
 8009db0:	1ac2      	subs	r2, r0, r3
 8009db2:	bf1c      	itt	ne
 8009db4:	1a1b      	subne	r3, r3, r0
 8009db6:	50a3      	strne	r3, [r4, r2]
 8009db8:	e7af      	b.n	8009d1a <_malloc_r+0x22>
 8009dba:	6862      	ldr	r2, [r4, #4]
 8009dbc:	42a3      	cmp	r3, r4
 8009dbe:	bf0c      	ite	eq
 8009dc0:	f8c8 2000 	streq.w	r2, [r8]
 8009dc4:	605a      	strne	r2, [r3, #4]
 8009dc6:	e7eb      	b.n	8009da0 <_malloc_r+0xa8>
 8009dc8:	4623      	mov	r3, r4
 8009dca:	6864      	ldr	r4, [r4, #4]
 8009dcc:	e7ae      	b.n	8009d2c <_malloc_r+0x34>
 8009dce:	463c      	mov	r4, r7
 8009dd0:	687f      	ldr	r7, [r7, #4]
 8009dd2:	e7b6      	b.n	8009d42 <_malloc_r+0x4a>
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	d1fb      	bne.n	8009dd4 <_malloc_r+0xdc>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	6053      	str	r3, [r2, #4]
 8009de0:	e7de      	b.n	8009da0 <_malloc_r+0xa8>
 8009de2:	230c      	movs	r3, #12
 8009de4:	6033      	str	r3, [r6, #0]
 8009de6:	4630      	mov	r0, r6
 8009de8:	f000 f80c 	bl	8009e04 <__malloc_unlock>
 8009dec:	e794      	b.n	8009d18 <_malloc_r+0x20>
 8009dee:	6005      	str	r5, [r0, #0]
 8009df0:	e7d6      	b.n	8009da0 <_malloc_r+0xa8>
 8009df2:	bf00      	nop
 8009df4:	20005644 	.word	0x20005644

08009df8 <__malloc_lock>:
 8009df8:	4801      	ldr	r0, [pc, #4]	@ (8009e00 <__malloc_lock+0x8>)
 8009dfa:	f7ff bf0f 	b.w	8009c1c <__retarget_lock_acquire_recursive>
 8009dfe:	bf00      	nop
 8009e00:	2000563c 	.word	0x2000563c

08009e04 <__malloc_unlock>:
 8009e04:	4801      	ldr	r0, [pc, #4]	@ (8009e0c <__malloc_unlock+0x8>)
 8009e06:	f7ff bf0a 	b.w	8009c1e <__retarget_lock_release_recursive>
 8009e0a:	bf00      	nop
 8009e0c:	2000563c 	.word	0x2000563c

08009e10 <__ssputs_r>:
 8009e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e14:	688e      	ldr	r6, [r1, #8]
 8009e16:	461f      	mov	r7, r3
 8009e18:	42be      	cmp	r6, r7
 8009e1a:	680b      	ldr	r3, [r1, #0]
 8009e1c:	4682      	mov	sl, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	4690      	mov	r8, r2
 8009e22:	d82d      	bhi.n	8009e80 <__ssputs_r+0x70>
 8009e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e2c:	d026      	beq.n	8009e7c <__ssputs_r+0x6c>
 8009e2e:	6965      	ldr	r5, [r4, #20]
 8009e30:	6909      	ldr	r1, [r1, #16]
 8009e32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e36:	eba3 0901 	sub.w	r9, r3, r1
 8009e3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e3e:	1c7b      	adds	r3, r7, #1
 8009e40:	444b      	add	r3, r9
 8009e42:	106d      	asrs	r5, r5, #1
 8009e44:	429d      	cmp	r5, r3
 8009e46:	bf38      	it	cc
 8009e48:	461d      	movcc	r5, r3
 8009e4a:	0553      	lsls	r3, r2, #21
 8009e4c:	d527      	bpl.n	8009e9e <__ssputs_r+0x8e>
 8009e4e:	4629      	mov	r1, r5
 8009e50:	f7ff ff52 	bl	8009cf8 <_malloc_r>
 8009e54:	4606      	mov	r6, r0
 8009e56:	b360      	cbz	r0, 8009eb2 <__ssputs_r+0xa2>
 8009e58:	6921      	ldr	r1, [r4, #16]
 8009e5a:	464a      	mov	r2, r9
 8009e5c:	f000 fae8 	bl	800a430 <memcpy>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e6a:	81a3      	strh	r3, [r4, #12]
 8009e6c:	6126      	str	r6, [r4, #16]
 8009e6e:	6165      	str	r5, [r4, #20]
 8009e70:	444e      	add	r6, r9
 8009e72:	eba5 0509 	sub.w	r5, r5, r9
 8009e76:	6026      	str	r6, [r4, #0]
 8009e78:	60a5      	str	r5, [r4, #8]
 8009e7a:	463e      	mov	r6, r7
 8009e7c:	42be      	cmp	r6, r7
 8009e7e:	d900      	bls.n	8009e82 <__ssputs_r+0x72>
 8009e80:	463e      	mov	r6, r7
 8009e82:	6820      	ldr	r0, [r4, #0]
 8009e84:	4632      	mov	r2, r6
 8009e86:	4641      	mov	r1, r8
 8009e88:	f000 faa8 	bl	800a3dc <memmove>
 8009e8c:	68a3      	ldr	r3, [r4, #8]
 8009e8e:	1b9b      	subs	r3, r3, r6
 8009e90:	60a3      	str	r3, [r4, #8]
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	4433      	add	r3, r6
 8009e96:	6023      	str	r3, [r4, #0]
 8009e98:	2000      	movs	r0, #0
 8009e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e9e:	462a      	mov	r2, r5
 8009ea0:	f000 fad4 	bl	800a44c <_realloc_r>
 8009ea4:	4606      	mov	r6, r0
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	d1e0      	bne.n	8009e6c <__ssputs_r+0x5c>
 8009eaa:	6921      	ldr	r1, [r4, #16]
 8009eac:	4650      	mov	r0, sl
 8009eae:	f7ff feb7 	bl	8009c20 <_free_r>
 8009eb2:	230c      	movs	r3, #12
 8009eb4:	f8ca 3000 	str.w	r3, [sl]
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ebe:	81a3      	strh	r3, [r4, #12]
 8009ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ec4:	e7e9      	b.n	8009e9a <__ssputs_r+0x8a>
	...

08009ec8 <_svfiprintf_r>:
 8009ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ecc:	4698      	mov	r8, r3
 8009ece:	898b      	ldrh	r3, [r1, #12]
 8009ed0:	061b      	lsls	r3, r3, #24
 8009ed2:	b09d      	sub	sp, #116	@ 0x74
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	4614      	mov	r4, r2
 8009eda:	d510      	bpl.n	8009efe <_svfiprintf_r+0x36>
 8009edc:	690b      	ldr	r3, [r1, #16]
 8009ede:	b973      	cbnz	r3, 8009efe <_svfiprintf_r+0x36>
 8009ee0:	2140      	movs	r1, #64	@ 0x40
 8009ee2:	f7ff ff09 	bl	8009cf8 <_malloc_r>
 8009ee6:	6028      	str	r0, [r5, #0]
 8009ee8:	6128      	str	r0, [r5, #16]
 8009eea:	b930      	cbnz	r0, 8009efa <_svfiprintf_r+0x32>
 8009eec:	230c      	movs	r3, #12
 8009eee:	603b      	str	r3, [r7, #0]
 8009ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef4:	b01d      	add	sp, #116	@ 0x74
 8009ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009efa:	2340      	movs	r3, #64	@ 0x40
 8009efc:	616b      	str	r3, [r5, #20]
 8009efe:	2300      	movs	r3, #0
 8009f00:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f02:	2320      	movs	r3, #32
 8009f04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f0c:	2330      	movs	r3, #48	@ 0x30
 8009f0e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a0ac <_svfiprintf_r+0x1e4>
 8009f12:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f16:	f04f 0901 	mov.w	r9, #1
 8009f1a:	4623      	mov	r3, r4
 8009f1c:	469a      	mov	sl, r3
 8009f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f22:	b10a      	cbz	r2, 8009f28 <_svfiprintf_r+0x60>
 8009f24:	2a25      	cmp	r2, #37	@ 0x25
 8009f26:	d1f9      	bne.n	8009f1c <_svfiprintf_r+0x54>
 8009f28:	ebba 0b04 	subs.w	fp, sl, r4
 8009f2c:	d00b      	beq.n	8009f46 <_svfiprintf_r+0x7e>
 8009f2e:	465b      	mov	r3, fp
 8009f30:	4622      	mov	r2, r4
 8009f32:	4629      	mov	r1, r5
 8009f34:	4638      	mov	r0, r7
 8009f36:	f7ff ff6b 	bl	8009e10 <__ssputs_r>
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	f000 80a7 	beq.w	800a08e <_svfiprintf_r+0x1c6>
 8009f40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f42:	445a      	add	r2, fp
 8009f44:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f46:	f89a 3000 	ldrb.w	r3, [sl]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 809f 	beq.w	800a08e <_svfiprintf_r+0x1c6>
 8009f50:	2300      	movs	r3, #0
 8009f52:	f04f 32ff 	mov.w	r2, #4294967295
 8009f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f5a:	f10a 0a01 	add.w	sl, sl, #1
 8009f5e:	9304      	str	r3, [sp, #16]
 8009f60:	9307      	str	r3, [sp, #28]
 8009f62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f66:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f68:	4654      	mov	r4, sl
 8009f6a:	2205      	movs	r2, #5
 8009f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f70:	484e      	ldr	r0, [pc, #312]	@ (800a0ac <_svfiprintf_r+0x1e4>)
 8009f72:	f7f6 f94d 	bl	8000210 <memchr>
 8009f76:	9a04      	ldr	r2, [sp, #16]
 8009f78:	b9d8      	cbnz	r0, 8009fb2 <_svfiprintf_r+0xea>
 8009f7a:	06d0      	lsls	r0, r2, #27
 8009f7c:	bf44      	itt	mi
 8009f7e:	2320      	movmi	r3, #32
 8009f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f84:	0711      	lsls	r1, r2, #28
 8009f86:	bf44      	itt	mi
 8009f88:	232b      	movmi	r3, #43	@ 0x2b
 8009f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f92:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f94:	d015      	beq.n	8009fc2 <_svfiprintf_r+0xfa>
 8009f96:	9a07      	ldr	r2, [sp, #28]
 8009f98:	4654      	mov	r4, sl
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f04f 0c0a 	mov.w	ip, #10
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fa6:	3b30      	subs	r3, #48	@ 0x30
 8009fa8:	2b09      	cmp	r3, #9
 8009faa:	d94b      	bls.n	800a044 <_svfiprintf_r+0x17c>
 8009fac:	b1b0      	cbz	r0, 8009fdc <_svfiprintf_r+0x114>
 8009fae:	9207      	str	r2, [sp, #28]
 8009fb0:	e014      	b.n	8009fdc <_svfiprintf_r+0x114>
 8009fb2:	eba0 0308 	sub.w	r3, r0, r8
 8009fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	9304      	str	r3, [sp, #16]
 8009fbe:	46a2      	mov	sl, r4
 8009fc0:	e7d2      	b.n	8009f68 <_svfiprintf_r+0xa0>
 8009fc2:	9b03      	ldr	r3, [sp, #12]
 8009fc4:	1d19      	adds	r1, r3, #4
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	9103      	str	r1, [sp, #12]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	bfbb      	ittet	lt
 8009fce:	425b      	neglt	r3, r3
 8009fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8009fd4:	9307      	strge	r3, [sp, #28]
 8009fd6:	9307      	strlt	r3, [sp, #28]
 8009fd8:	bfb8      	it	lt
 8009fda:	9204      	strlt	r2, [sp, #16]
 8009fdc:	7823      	ldrb	r3, [r4, #0]
 8009fde:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fe0:	d10a      	bne.n	8009ff8 <_svfiprintf_r+0x130>
 8009fe2:	7863      	ldrb	r3, [r4, #1]
 8009fe4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fe6:	d132      	bne.n	800a04e <_svfiprintf_r+0x186>
 8009fe8:	9b03      	ldr	r3, [sp, #12]
 8009fea:	1d1a      	adds	r2, r3, #4
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	9203      	str	r2, [sp, #12]
 8009ff0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ff4:	3402      	adds	r4, #2
 8009ff6:	9305      	str	r3, [sp, #20]
 8009ff8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a0bc <_svfiprintf_r+0x1f4>
 8009ffc:	7821      	ldrb	r1, [r4, #0]
 8009ffe:	2203      	movs	r2, #3
 800a000:	4650      	mov	r0, sl
 800a002:	f7f6 f905 	bl	8000210 <memchr>
 800a006:	b138      	cbz	r0, 800a018 <_svfiprintf_r+0x150>
 800a008:	9b04      	ldr	r3, [sp, #16]
 800a00a:	eba0 000a 	sub.w	r0, r0, sl
 800a00e:	2240      	movs	r2, #64	@ 0x40
 800a010:	4082      	lsls	r2, r0
 800a012:	4313      	orrs	r3, r2
 800a014:	3401      	adds	r4, #1
 800a016:	9304      	str	r3, [sp, #16]
 800a018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01c:	4824      	ldr	r0, [pc, #144]	@ (800a0b0 <_svfiprintf_r+0x1e8>)
 800a01e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a022:	2206      	movs	r2, #6
 800a024:	f7f6 f8f4 	bl	8000210 <memchr>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d036      	beq.n	800a09a <_svfiprintf_r+0x1d2>
 800a02c:	4b21      	ldr	r3, [pc, #132]	@ (800a0b4 <_svfiprintf_r+0x1ec>)
 800a02e:	bb1b      	cbnz	r3, 800a078 <_svfiprintf_r+0x1b0>
 800a030:	9b03      	ldr	r3, [sp, #12]
 800a032:	3307      	adds	r3, #7
 800a034:	f023 0307 	bic.w	r3, r3, #7
 800a038:	3308      	adds	r3, #8
 800a03a:	9303      	str	r3, [sp, #12]
 800a03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a03e:	4433      	add	r3, r6
 800a040:	9309      	str	r3, [sp, #36]	@ 0x24
 800a042:	e76a      	b.n	8009f1a <_svfiprintf_r+0x52>
 800a044:	fb0c 3202 	mla	r2, ip, r2, r3
 800a048:	460c      	mov	r4, r1
 800a04a:	2001      	movs	r0, #1
 800a04c:	e7a8      	b.n	8009fa0 <_svfiprintf_r+0xd8>
 800a04e:	2300      	movs	r3, #0
 800a050:	3401      	adds	r4, #1
 800a052:	9305      	str	r3, [sp, #20]
 800a054:	4619      	mov	r1, r3
 800a056:	f04f 0c0a 	mov.w	ip, #10
 800a05a:	4620      	mov	r0, r4
 800a05c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a060:	3a30      	subs	r2, #48	@ 0x30
 800a062:	2a09      	cmp	r2, #9
 800a064:	d903      	bls.n	800a06e <_svfiprintf_r+0x1a6>
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0c6      	beq.n	8009ff8 <_svfiprintf_r+0x130>
 800a06a:	9105      	str	r1, [sp, #20]
 800a06c:	e7c4      	b.n	8009ff8 <_svfiprintf_r+0x130>
 800a06e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a072:	4604      	mov	r4, r0
 800a074:	2301      	movs	r3, #1
 800a076:	e7f0      	b.n	800a05a <_svfiprintf_r+0x192>
 800a078:	ab03      	add	r3, sp, #12
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	462a      	mov	r2, r5
 800a07e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b8 <_svfiprintf_r+0x1f0>)
 800a080:	a904      	add	r1, sp, #16
 800a082:	4638      	mov	r0, r7
 800a084:	f3af 8000 	nop.w
 800a088:	1c42      	adds	r2, r0, #1
 800a08a:	4606      	mov	r6, r0
 800a08c:	d1d6      	bne.n	800a03c <_svfiprintf_r+0x174>
 800a08e:	89ab      	ldrh	r3, [r5, #12]
 800a090:	065b      	lsls	r3, r3, #25
 800a092:	f53f af2d 	bmi.w	8009ef0 <_svfiprintf_r+0x28>
 800a096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a098:	e72c      	b.n	8009ef4 <_svfiprintf_r+0x2c>
 800a09a:	ab03      	add	r3, sp, #12
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	462a      	mov	r2, r5
 800a0a0:	4b05      	ldr	r3, [pc, #20]	@ (800a0b8 <_svfiprintf_r+0x1f0>)
 800a0a2:	a904      	add	r1, sp, #16
 800a0a4:	4638      	mov	r0, r7
 800a0a6:	f000 f879 	bl	800a19c <_printf_i>
 800a0aa:	e7ed      	b.n	800a088 <_svfiprintf_r+0x1c0>
 800a0ac:	0800e038 	.word	0x0800e038
 800a0b0:	0800e042 	.word	0x0800e042
 800a0b4:	00000000 	.word	0x00000000
 800a0b8:	08009e11 	.word	0x08009e11
 800a0bc:	0800e03e 	.word	0x0800e03e

0800a0c0 <_printf_common>:
 800a0c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0c4:	4616      	mov	r6, r2
 800a0c6:	4698      	mov	r8, r3
 800a0c8:	688a      	ldr	r2, [r1, #8]
 800a0ca:	690b      	ldr	r3, [r1, #16]
 800a0cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	bfb8      	it	lt
 800a0d4:	4613      	movlt	r3, r2
 800a0d6:	6033      	str	r3, [r6, #0]
 800a0d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a0dc:	4607      	mov	r7, r0
 800a0de:	460c      	mov	r4, r1
 800a0e0:	b10a      	cbz	r2, 800a0e6 <_printf_common+0x26>
 800a0e2:	3301      	adds	r3, #1
 800a0e4:	6033      	str	r3, [r6, #0]
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	0699      	lsls	r1, r3, #26
 800a0ea:	bf42      	ittt	mi
 800a0ec:	6833      	ldrmi	r3, [r6, #0]
 800a0ee:	3302      	addmi	r3, #2
 800a0f0:	6033      	strmi	r3, [r6, #0]
 800a0f2:	6825      	ldr	r5, [r4, #0]
 800a0f4:	f015 0506 	ands.w	r5, r5, #6
 800a0f8:	d106      	bne.n	800a108 <_printf_common+0x48>
 800a0fa:	f104 0a19 	add.w	sl, r4, #25
 800a0fe:	68e3      	ldr	r3, [r4, #12]
 800a100:	6832      	ldr	r2, [r6, #0]
 800a102:	1a9b      	subs	r3, r3, r2
 800a104:	42ab      	cmp	r3, r5
 800a106:	dc26      	bgt.n	800a156 <_printf_common+0x96>
 800a108:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a10c:	6822      	ldr	r2, [r4, #0]
 800a10e:	3b00      	subs	r3, #0
 800a110:	bf18      	it	ne
 800a112:	2301      	movne	r3, #1
 800a114:	0692      	lsls	r2, r2, #26
 800a116:	d42b      	bmi.n	800a170 <_printf_common+0xb0>
 800a118:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a11c:	4641      	mov	r1, r8
 800a11e:	4638      	mov	r0, r7
 800a120:	47c8      	blx	r9
 800a122:	3001      	adds	r0, #1
 800a124:	d01e      	beq.n	800a164 <_printf_common+0xa4>
 800a126:	6823      	ldr	r3, [r4, #0]
 800a128:	6922      	ldr	r2, [r4, #16]
 800a12a:	f003 0306 	and.w	r3, r3, #6
 800a12e:	2b04      	cmp	r3, #4
 800a130:	bf02      	ittt	eq
 800a132:	68e5      	ldreq	r5, [r4, #12]
 800a134:	6833      	ldreq	r3, [r6, #0]
 800a136:	1aed      	subeq	r5, r5, r3
 800a138:	68a3      	ldr	r3, [r4, #8]
 800a13a:	bf0c      	ite	eq
 800a13c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a140:	2500      	movne	r5, #0
 800a142:	4293      	cmp	r3, r2
 800a144:	bfc4      	itt	gt
 800a146:	1a9b      	subgt	r3, r3, r2
 800a148:	18ed      	addgt	r5, r5, r3
 800a14a:	2600      	movs	r6, #0
 800a14c:	341a      	adds	r4, #26
 800a14e:	42b5      	cmp	r5, r6
 800a150:	d11a      	bne.n	800a188 <_printf_common+0xc8>
 800a152:	2000      	movs	r0, #0
 800a154:	e008      	b.n	800a168 <_printf_common+0xa8>
 800a156:	2301      	movs	r3, #1
 800a158:	4652      	mov	r2, sl
 800a15a:	4641      	mov	r1, r8
 800a15c:	4638      	mov	r0, r7
 800a15e:	47c8      	blx	r9
 800a160:	3001      	adds	r0, #1
 800a162:	d103      	bne.n	800a16c <_printf_common+0xac>
 800a164:	f04f 30ff 	mov.w	r0, #4294967295
 800a168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a16c:	3501      	adds	r5, #1
 800a16e:	e7c6      	b.n	800a0fe <_printf_common+0x3e>
 800a170:	18e1      	adds	r1, r4, r3
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	2030      	movs	r0, #48	@ 0x30
 800a176:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a17a:	4422      	add	r2, r4
 800a17c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a180:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a184:	3302      	adds	r3, #2
 800a186:	e7c7      	b.n	800a118 <_printf_common+0x58>
 800a188:	2301      	movs	r3, #1
 800a18a:	4622      	mov	r2, r4
 800a18c:	4641      	mov	r1, r8
 800a18e:	4638      	mov	r0, r7
 800a190:	47c8      	blx	r9
 800a192:	3001      	adds	r0, #1
 800a194:	d0e6      	beq.n	800a164 <_printf_common+0xa4>
 800a196:	3601      	adds	r6, #1
 800a198:	e7d9      	b.n	800a14e <_printf_common+0x8e>
	...

0800a19c <_printf_i>:
 800a19c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a0:	7e0f      	ldrb	r7, [r1, #24]
 800a1a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a1a4:	2f78      	cmp	r7, #120	@ 0x78
 800a1a6:	4691      	mov	r9, r2
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	469a      	mov	sl, r3
 800a1ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a1b2:	d807      	bhi.n	800a1c4 <_printf_i+0x28>
 800a1b4:	2f62      	cmp	r7, #98	@ 0x62
 800a1b6:	d80a      	bhi.n	800a1ce <_printf_i+0x32>
 800a1b8:	2f00      	cmp	r7, #0
 800a1ba:	f000 80d2 	beq.w	800a362 <_printf_i+0x1c6>
 800a1be:	2f58      	cmp	r7, #88	@ 0x58
 800a1c0:	f000 80b9 	beq.w	800a336 <_printf_i+0x19a>
 800a1c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a1cc:	e03a      	b.n	800a244 <_printf_i+0xa8>
 800a1ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a1d2:	2b15      	cmp	r3, #21
 800a1d4:	d8f6      	bhi.n	800a1c4 <_printf_i+0x28>
 800a1d6:	a101      	add	r1, pc, #4	@ (adr r1, 800a1dc <_printf_i+0x40>)
 800a1d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a1dc:	0800a235 	.word	0x0800a235
 800a1e0:	0800a249 	.word	0x0800a249
 800a1e4:	0800a1c5 	.word	0x0800a1c5
 800a1e8:	0800a1c5 	.word	0x0800a1c5
 800a1ec:	0800a1c5 	.word	0x0800a1c5
 800a1f0:	0800a1c5 	.word	0x0800a1c5
 800a1f4:	0800a249 	.word	0x0800a249
 800a1f8:	0800a1c5 	.word	0x0800a1c5
 800a1fc:	0800a1c5 	.word	0x0800a1c5
 800a200:	0800a1c5 	.word	0x0800a1c5
 800a204:	0800a1c5 	.word	0x0800a1c5
 800a208:	0800a349 	.word	0x0800a349
 800a20c:	0800a273 	.word	0x0800a273
 800a210:	0800a303 	.word	0x0800a303
 800a214:	0800a1c5 	.word	0x0800a1c5
 800a218:	0800a1c5 	.word	0x0800a1c5
 800a21c:	0800a36b 	.word	0x0800a36b
 800a220:	0800a1c5 	.word	0x0800a1c5
 800a224:	0800a273 	.word	0x0800a273
 800a228:	0800a1c5 	.word	0x0800a1c5
 800a22c:	0800a1c5 	.word	0x0800a1c5
 800a230:	0800a30b 	.word	0x0800a30b
 800a234:	6833      	ldr	r3, [r6, #0]
 800a236:	1d1a      	adds	r2, r3, #4
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6032      	str	r2, [r6, #0]
 800a23c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a240:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a244:	2301      	movs	r3, #1
 800a246:	e09d      	b.n	800a384 <_printf_i+0x1e8>
 800a248:	6833      	ldr	r3, [r6, #0]
 800a24a:	6820      	ldr	r0, [r4, #0]
 800a24c:	1d19      	adds	r1, r3, #4
 800a24e:	6031      	str	r1, [r6, #0]
 800a250:	0606      	lsls	r6, r0, #24
 800a252:	d501      	bpl.n	800a258 <_printf_i+0xbc>
 800a254:	681d      	ldr	r5, [r3, #0]
 800a256:	e003      	b.n	800a260 <_printf_i+0xc4>
 800a258:	0645      	lsls	r5, r0, #25
 800a25a:	d5fb      	bpl.n	800a254 <_printf_i+0xb8>
 800a25c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a260:	2d00      	cmp	r5, #0
 800a262:	da03      	bge.n	800a26c <_printf_i+0xd0>
 800a264:	232d      	movs	r3, #45	@ 0x2d
 800a266:	426d      	negs	r5, r5
 800a268:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a26c:	4859      	ldr	r0, [pc, #356]	@ (800a3d4 <_printf_i+0x238>)
 800a26e:	230a      	movs	r3, #10
 800a270:	e011      	b.n	800a296 <_printf_i+0xfa>
 800a272:	6821      	ldr	r1, [r4, #0]
 800a274:	6833      	ldr	r3, [r6, #0]
 800a276:	0608      	lsls	r0, r1, #24
 800a278:	f853 5b04 	ldr.w	r5, [r3], #4
 800a27c:	d402      	bmi.n	800a284 <_printf_i+0xe8>
 800a27e:	0649      	lsls	r1, r1, #25
 800a280:	bf48      	it	mi
 800a282:	b2ad      	uxthmi	r5, r5
 800a284:	2f6f      	cmp	r7, #111	@ 0x6f
 800a286:	4853      	ldr	r0, [pc, #332]	@ (800a3d4 <_printf_i+0x238>)
 800a288:	6033      	str	r3, [r6, #0]
 800a28a:	bf14      	ite	ne
 800a28c:	230a      	movne	r3, #10
 800a28e:	2308      	moveq	r3, #8
 800a290:	2100      	movs	r1, #0
 800a292:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a296:	6866      	ldr	r6, [r4, #4]
 800a298:	60a6      	str	r6, [r4, #8]
 800a29a:	2e00      	cmp	r6, #0
 800a29c:	bfa2      	ittt	ge
 800a29e:	6821      	ldrge	r1, [r4, #0]
 800a2a0:	f021 0104 	bicge.w	r1, r1, #4
 800a2a4:	6021      	strge	r1, [r4, #0]
 800a2a6:	b90d      	cbnz	r5, 800a2ac <_printf_i+0x110>
 800a2a8:	2e00      	cmp	r6, #0
 800a2aa:	d04b      	beq.n	800a344 <_printf_i+0x1a8>
 800a2ac:	4616      	mov	r6, r2
 800a2ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800a2b2:	fb03 5711 	mls	r7, r3, r1, r5
 800a2b6:	5dc7      	ldrb	r7, [r0, r7]
 800a2b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a2bc:	462f      	mov	r7, r5
 800a2be:	42bb      	cmp	r3, r7
 800a2c0:	460d      	mov	r5, r1
 800a2c2:	d9f4      	bls.n	800a2ae <_printf_i+0x112>
 800a2c4:	2b08      	cmp	r3, #8
 800a2c6:	d10b      	bne.n	800a2e0 <_printf_i+0x144>
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	07df      	lsls	r7, r3, #31
 800a2cc:	d508      	bpl.n	800a2e0 <_printf_i+0x144>
 800a2ce:	6923      	ldr	r3, [r4, #16]
 800a2d0:	6861      	ldr	r1, [r4, #4]
 800a2d2:	4299      	cmp	r1, r3
 800a2d4:	bfde      	ittt	le
 800a2d6:	2330      	movle	r3, #48	@ 0x30
 800a2d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a2dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a2e0:	1b92      	subs	r2, r2, r6
 800a2e2:	6122      	str	r2, [r4, #16]
 800a2e4:	f8cd a000 	str.w	sl, [sp]
 800a2e8:	464b      	mov	r3, r9
 800a2ea:	aa03      	add	r2, sp, #12
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	f7ff fee6 	bl	800a0c0 <_printf_common>
 800a2f4:	3001      	adds	r0, #1
 800a2f6:	d14a      	bne.n	800a38e <_printf_i+0x1f2>
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	b004      	add	sp, #16
 800a2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	f043 0320 	orr.w	r3, r3, #32
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	4833      	ldr	r0, [pc, #204]	@ (800a3d8 <_printf_i+0x23c>)
 800a30c:	2778      	movs	r7, #120	@ 0x78
 800a30e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	6831      	ldr	r1, [r6, #0]
 800a316:	061f      	lsls	r7, r3, #24
 800a318:	f851 5b04 	ldr.w	r5, [r1], #4
 800a31c:	d402      	bmi.n	800a324 <_printf_i+0x188>
 800a31e:	065f      	lsls	r7, r3, #25
 800a320:	bf48      	it	mi
 800a322:	b2ad      	uxthmi	r5, r5
 800a324:	6031      	str	r1, [r6, #0]
 800a326:	07d9      	lsls	r1, r3, #31
 800a328:	bf44      	itt	mi
 800a32a:	f043 0320 	orrmi.w	r3, r3, #32
 800a32e:	6023      	strmi	r3, [r4, #0]
 800a330:	b11d      	cbz	r5, 800a33a <_printf_i+0x19e>
 800a332:	2310      	movs	r3, #16
 800a334:	e7ac      	b.n	800a290 <_printf_i+0xf4>
 800a336:	4827      	ldr	r0, [pc, #156]	@ (800a3d4 <_printf_i+0x238>)
 800a338:	e7e9      	b.n	800a30e <_printf_i+0x172>
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	f023 0320 	bic.w	r3, r3, #32
 800a340:	6023      	str	r3, [r4, #0]
 800a342:	e7f6      	b.n	800a332 <_printf_i+0x196>
 800a344:	4616      	mov	r6, r2
 800a346:	e7bd      	b.n	800a2c4 <_printf_i+0x128>
 800a348:	6833      	ldr	r3, [r6, #0]
 800a34a:	6825      	ldr	r5, [r4, #0]
 800a34c:	6961      	ldr	r1, [r4, #20]
 800a34e:	1d18      	adds	r0, r3, #4
 800a350:	6030      	str	r0, [r6, #0]
 800a352:	062e      	lsls	r6, r5, #24
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	d501      	bpl.n	800a35c <_printf_i+0x1c0>
 800a358:	6019      	str	r1, [r3, #0]
 800a35a:	e002      	b.n	800a362 <_printf_i+0x1c6>
 800a35c:	0668      	lsls	r0, r5, #25
 800a35e:	d5fb      	bpl.n	800a358 <_printf_i+0x1bc>
 800a360:	8019      	strh	r1, [r3, #0]
 800a362:	2300      	movs	r3, #0
 800a364:	6123      	str	r3, [r4, #16]
 800a366:	4616      	mov	r6, r2
 800a368:	e7bc      	b.n	800a2e4 <_printf_i+0x148>
 800a36a:	6833      	ldr	r3, [r6, #0]
 800a36c:	1d1a      	adds	r2, r3, #4
 800a36e:	6032      	str	r2, [r6, #0]
 800a370:	681e      	ldr	r6, [r3, #0]
 800a372:	6862      	ldr	r2, [r4, #4]
 800a374:	2100      	movs	r1, #0
 800a376:	4630      	mov	r0, r6
 800a378:	f7f5 ff4a 	bl	8000210 <memchr>
 800a37c:	b108      	cbz	r0, 800a382 <_printf_i+0x1e6>
 800a37e:	1b80      	subs	r0, r0, r6
 800a380:	6060      	str	r0, [r4, #4]
 800a382:	6863      	ldr	r3, [r4, #4]
 800a384:	6123      	str	r3, [r4, #16]
 800a386:	2300      	movs	r3, #0
 800a388:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a38c:	e7aa      	b.n	800a2e4 <_printf_i+0x148>
 800a38e:	6923      	ldr	r3, [r4, #16]
 800a390:	4632      	mov	r2, r6
 800a392:	4649      	mov	r1, r9
 800a394:	4640      	mov	r0, r8
 800a396:	47d0      	blx	sl
 800a398:	3001      	adds	r0, #1
 800a39a:	d0ad      	beq.n	800a2f8 <_printf_i+0x15c>
 800a39c:	6823      	ldr	r3, [r4, #0]
 800a39e:	079b      	lsls	r3, r3, #30
 800a3a0:	d413      	bmi.n	800a3ca <_printf_i+0x22e>
 800a3a2:	68e0      	ldr	r0, [r4, #12]
 800a3a4:	9b03      	ldr	r3, [sp, #12]
 800a3a6:	4298      	cmp	r0, r3
 800a3a8:	bfb8      	it	lt
 800a3aa:	4618      	movlt	r0, r3
 800a3ac:	e7a6      	b.n	800a2fc <_printf_i+0x160>
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	4640      	mov	r0, r8
 800a3b6:	47d0      	blx	sl
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	d09d      	beq.n	800a2f8 <_printf_i+0x15c>
 800a3bc:	3501      	adds	r5, #1
 800a3be:	68e3      	ldr	r3, [r4, #12]
 800a3c0:	9903      	ldr	r1, [sp, #12]
 800a3c2:	1a5b      	subs	r3, r3, r1
 800a3c4:	42ab      	cmp	r3, r5
 800a3c6:	dcf2      	bgt.n	800a3ae <_printf_i+0x212>
 800a3c8:	e7eb      	b.n	800a3a2 <_printf_i+0x206>
 800a3ca:	2500      	movs	r5, #0
 800a3cc:	f104 0619 	add.w	r6, r4, #25
 800a3d0:	e7f5      	b.n	800a3be <_printf_i+0x222>
 800a3d2:	bf00      	nop
 800a3d4:	0800e049 	.word	0x0800e049
 800a3d8:	0800e05a 	.word	0x0800e05a

0800a3dc <memmove>:
 800a3dc:	4288      	cmp	r0, r1
 800a3de:	b510      	push	{r4, lr}
 800a3e0:	eb01 0402 	add.w	r4, r1, r2
 800a3e4:	d902      	bls.n	800a3ec <memmove+0x10>
 800a3e6:	4284      	cmp	r4, r0
 800a3e8:	4623      	mov	r3, r4
 800a3ea:	d807      	bhi.n	800a3fc <memmove+0x20>
 800a3ec:	1e43      	subs	r3, r0, #1
 800a3ee:	42a1      	cmp	r1, r4
 800a3f0:	d008      	beq.n	800a404 <memmove+0x28>
 800a3f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3fa:	e7f8      	b.n	800a3ee <memmove+0x12>
 800a3fc:	4402      	add	r2, r0
 800a3fe:	4601      	mov	r1, r0
 800a400:	428a      	cmp	r2, r1
 800a402:	d100      	bne.n	800a406 <memmove+0x2a>
 800a404:	bd10      	pop	{r4, pc}
 800a406:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a40a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a40e:	e7f7      	b.n	800a400 <memmove+0x24>

0800a410 <_sbrk_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	4d06      	ldr	r5, [pc, #24]	@ (800a42c <_sbrk_r+0x1c>)
 800a414:	2300      	movs	r3, #0
 800a416:	4604      	mov	r4, r0
 800a418:	4608      	mov	r0, r1
 800a41a:	602b      	str	r3, [r5, #0]
 800a41c:	f7f8 f996 	bl	800274c <_sbrk>
 800a420:	1c43      	adds	r3, r0, #1
 800a422:	d102      	bne.n	800a42a <_sbrk_r+0x1a>
 800a424:	682b      	ldr	r3, [r5, #0]
 800a426:	b103      	cbz	r3, 800a42a <_sbrk_r+0x1a>
 800a428:	6023      	str	r3, [r4, #0]
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	20005638 	.word	0x20005638

0800a430 <memcpy>:
 800a430:	440a      	add	r2, r1
 800a432:	4291      	cmp	r1, r2
 800a434:	f100 33ff 	add.w	r3, r0, #4294967295
 800a438:	d100      	bne.n	800a43c <memcpy+0xc>
 800a43a:	4770      	bx	lr
 800a43c:	b510      	push	{r4, lr}
 800a43e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a442:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a446:	4291      	cmp	r1, r2
 800a448:	d1f9      	bne.n	800a43e <memcpy+0xe>
 800a44a:	bd10      	pop	{r4, pc}

0800a44c <_realloc_r>:
 800a44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a450:	4680      	mov	r8, r0
 800a452:	4615      	mov	r5, r2
 800a454:	460c      	mov	r4, r1
 800a456:	b921      	cbnz	r1, 800a462 <_realloc_r+0x16>
 800a458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a45c:	4611      	mov	r1, r2
 800a45e:	f7ff bc4b 	b.w	8009cf8 <_malloc_r>
 800a462:	b92a      	cbnz	r2, 800a470 <_realloc_r+0x24>
 800a464:	f7ff fbdc 	bl	8009c20 <_free_r>
 800a468:	2400      	movs	r4, #0
 800a46a:	4620      	mov	r0, r4
 800a46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a470:	f000 f81a 	bl	800a4a8 <_malloc_usable_size_r>
 800a474:	4285      	cmp	r5, r0
 800a476:	4606      	mov	r6, r0
 800a478:	d802      	bhi.n	800a480 <_realloc_r+0x34>
 800a47a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a47e:	d8f4      	bhi.n	800a46a <_realloc_r+0x1e>
 800a480:	4629      	mov	r1, r5
 800a482:	4640      	mov	r0, r8
 800a484:	f7ff fc38 	bl	8009cf8 <_malloc_r>
 800a488:	4607      	mov	r7, r0
 800a48a:	2800      	cmp	r0, #0
 800a48c:	d0ec      	beq.n	800a468 <_realloc_r+0x1c>
 800a48e:	42b5      	cmp	r5, r6
 800a490:	462a      	mov	r2, r5
 800a492:	4621      	mov	r1, r4
 800a494:	bf28      	it	cs
 800a496:	4632      	movcs	r2, r6
 800a498:	f7ff ffca 	bl	800a430 <memcpy>
 800a49c:	4621      	mov	r1, r4
 800a49e:	4640      	mov	r0, r8
 800a4a0:	f7ff fbbe 	bl	8009c20 <_free_r>
 800a4a4:	463c      	mov	r4, r7
 800a4a6:	e7e0      	b.n	800a46a <_realloc_r+0x1e>

0800a4a8 <_malloc_usable_size_r>:
 800a4a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4ac:	1f18      	subs	r0, r3, #4
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	bfbc      	itt	lt
 800a4b2:	580b      	ldrlt	r3, [r1, r0]
 800a4b4:	18c0      	addlt	r0, r0, r3
 800a4b6:	4770      	bx	lr

0800a4b8 <_init>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	bf00      	nop
 800a4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4be:	bc08      	pop	{r3}
 800a4c0:	469e      	mov	lr, r3
 800a4c2:	4770      	bx	lr

0800a4c4 <_fini>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	bf00      	nop
 800a4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ca:	bc08      	pop	{r3}
 800a4cc:	469e      	mov	lr, r3
 800a4ce:	4770      	bx	lr
